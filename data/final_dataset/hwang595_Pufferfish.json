{"home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.LowRankVGG.__init__": [[15, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg_lth.LowRankVGG.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(64, 128, 3, 1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv3 = nn.Conv2d(128, 256, 3, 1, padding=1, bias=False)", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv4 = nn.Conv2d(256, 256, 3, 1, bias=False)", "\n", "self", ".", "conv4_u", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4_v", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv5 = nn.Conv2d(256, 512, 3, 1, bias=False)", "\n", "self", ".", "conv5_u", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv6 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv6_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv6_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv7 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv7_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv7_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv8 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv8_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv8_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "max_pooling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "#self.classifier = nn.Sequential(", "\n", "#    nn.Dropout(),", "\n", "#    nn.Linear(512, 128),", "\n", "#    nn.Linear(128, 512),", "\n", "#    nn.ReLU(True),", "\n", "#    nn.Dropout(),", "\n", "#    nn.Linear(512, 128),", "\n", "#    nn.Linear(128, 512),", "\n", "#    nn.ReLU(True),", "\n", "#    nn.Linear(512, num_classes),", "\n", "#)", "\n", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.LowRankVGG.forward": [[86, 136], ["vgg_lth.LowRankVGG.conv1", "vgg_lth.LowRankVGG.batch_norm1", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.max_pooling", "vgg_lth.LowRankVGG.conv2_u", "vgg_lth.LowRankVGG.conv2_v", "vgg_lth.LowRankVGG.batch_norm2", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.max_pooling", "vgg_lth.LowRankVGG.conv3_u", "vgg_lth.LowRankVGG.conv3_v", "vgg_lth.LowRankVGG.batch_norm3", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.conv4_u", "vgg_lth.LowRankVGG.conv4_v", "vgg_lth.LowRankVGG.batch_norm4", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.max_pooling", "vgg_lth.LowRankVGG.conv5_u", "vgg_lth.LowRankVGG.conv5_v", "vgg_lth.LowRankVGG.batch_norm5", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.conv6_u", "vgg_lth.LowRankVGG.conv6_v", "vgg_lth.LowRankVGG.batch_norm6", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.max_pooling", "vgg_lth.LowRankVGG.conv7_u", "vgg_lth.LowRankVGG.conv7_v", "vgg_lth.LowRankVGG.batch_norm7", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.conv8_u", "vgg_lth.LowRankVGG.conv8_v", "vgg_lth.LowRankVGG.batch_norm8", "vgg_lth.LowRankVGG.relu", "vgg_lth.LowRankVGG.max_pooling", "vgg_lth.LowRankVGG.view", "vgg_lth.LowRankVGG.classifier", "vgg_lth.LowRankVGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2_v", "(", "x", ")", "\n", "#x = self.conv2(x)", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3_v", "(", "x", ")", "\n", "#x = self.conv3(x)", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv6_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv7_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv8_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.FullRankVGG.__init__": [[142, 177], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg_lth.FullRankVGG.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FullRankVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.FullRankVGG.forward": [[178, 226], ["vgg_lth.FullRankVGG.conv1", "vgg_lth.FullRankVGG.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG.conv2", "vgg_lth.FullRankVGG.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG.conv3", "vgg_lth.FullRankVGG.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG.conv4", "vgg_lth.FullRankVGG.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG.conv5", "vgg_lth.FullRankVGG.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG.conv6", "vgg_lth.FullRankVGG.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG.conv7", "vgg_lth.FullRankVGG.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG.conv8", "vgg_lth.FullRankVGG.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG.view", "vgg_lth.FullRankVGG.classifier", "vgg_lth.FullRankVGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "#x = self.max_pooling(x)", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "#print(\"after conv1 x size: {}\".format(x.size()))", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "#print(\"after conv2 x size: {}\".format(x.size()))", "\n", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#print(\"after conv3 x size: {}\".format(x.size()))", "\n", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.FullRankVGG19.__init__": [[233, 315], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "vgg_lth.FullRankVGG19.modules", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FullRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#self.conv1 = nn.Conv2d(3, 64, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#self.conv2 = nn.Conv2d(64, 64, 3, 1, padding=1, bias=True)", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "#self.conv3 = nn.Conv2d(64, 128, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "#self.conv4 = nn.Conv2d(128, 128, 3, 1, padding=1, bias=True)", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv5 = nn.Conv2d(128, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv6 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv7 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv8 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv9 = nn.Conv2d(256, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv15", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.classifier = nn.Sequential(", "\n", "#     nn.Dropout(),", "\n", "#     nn.Linear(512, 512),", "\n", "#     nn.ReLU(True),", "\n", "#     nn.Dropout(),", "\n", "#     nn.Linear(512, 512),", "\n", "#     nn.ReLU(True),", "\n", "#     nn.Linear(512, num_classes),", "\n", "# )", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.FullRankVGG19.forward": [[316, 382], ["vgg_lth.FullRankVGG19.conv1", "vgg_lth.FullRankVGG19.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv2", "vgg_lth.FullRankVGG19.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG19.conv3", "vgg_lth.FullRankVGG19.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv4", "vgg_lth.FullRankVGG19.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG19.conv5", "vgg_lth.FullRankVGG19.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv6", "vgg_lth.FullRankVGG19.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv7", "vgg_lth.FullRankVGG19.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv8", "vgg_lth.FullRankVGG19.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG19.conv9", "vgg_lth.FullRankVGG19.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv10", "vgg_lth.FullRankVGG19.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv11", "vgg_lth.FullRankVGG19.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv12", "vgg_lth.FullRankVGG19.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.FullRankVGG19.conv13", "vgg_lth.FullRankVGG19.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv14", "vgg_lth.FullRankVGG19.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv15", "vgg_lth.FullRankVGG19.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.conv16", "vgg_lth.FullRankVGG19.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.FullRankVGG19.view", "vgg_lth.FullRankVGG19.fc", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "vgg_lth.FullRankVGG19.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv10", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv11", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv12", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv14", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv15", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv16", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#x = F.max_pool2d(x, 2, 2)", "\n", "\n", "#x = x.view(x.size(0), -1)", "\n", "#x = self.classifier(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.LowRankVGG19.__init__": [[390, 499], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "vgg_lth.LowRankVGG19.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2_u = nn.Conv2d(64, int(64/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv2_v = nn.Conv2d(int(64/LR_FACOR), 64, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv3_u = nn.Conv2d(64, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv3_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv4_u = nn.Conv2d(128, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv4_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv5_u = nn.Conv2d(128, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv5_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv6_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv6_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv7_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv7_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv8_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv8_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv9_u = nn.Conv2d(256, int(512/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv9_v = nn.Conv2d(int(512/LR_FACOR), 512, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# self.classifier = nn.Sequential(", "\n", "#     nn.Dropout(),", "\n", "#     nn.Linear(512, int(512/LR_FACOR), bias=False),", "\n", "#     nn.Linear(int(512/LR_FACOR), 512),", "\n", "#     nn.ReLU(True),", "\n", "#     nn.Dropout(),", "\n", "#     nn.Linear(512, int(512/LR_FACOR), bias=False),", "\n", "#     nn.Linear(int(512/LR_FACOR), 512),", "\n", "#     nn.ReLU(True),", "\n", "#     nn.Linear(512, num_classes),", "\n", "# )", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg_lth.LowRankVGG19.forward": [[500, 590], ["vgg_lth.LowRankVGG19.conv1", "vgg_lth.LowRankVGG19.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv2", "vgg_lth.LowRankVGG19.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.LowRankVGG19.conv3", "vgg_lth.LowRankVGG19.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv4", "vgg_lth.LowRankVGG19.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.LowRankVGG19.conv5", "vgg_lth.LowRankVGG19.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv6", "vgg_lth.LowRankVGG19.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv7", "vgg_lth.LowRankVGG19.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv8", "vgg_lth.LowRankVGG19.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.LowRankVGG19.conv9", "vgg_lth.LowRankVGG19.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv10_v", "vgg_lth.LowRankVGG19.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv11_v", "vgg_lth.LowRankVGG19.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv12_v", "vgg_lth.LowRankVGG19.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "vgg_lth.LowRankVGG19.conv13_v", "vgg_lth.LowRankVGG19.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv14_v", "vgg_lth.LowRankVGG19.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv15_v", "vgg_lth.LowRankVGG19.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.conv16_v", "vgg_lth.LowRankVGG19.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "vgg_lth.LowRankVGG19.view", "vgg_lth.LowRankVGG19.fc", "vgg_lth.LowRankVGG19.conv10_u", "vgg_lth.LowRankVGG19.conv11_u", "vgg_lth.LowRankVGG19.conv12_u", "vgg_lth.LowRankVGG19.conv13_u", "vgg_lth.LowRankVGG19.conv14_u", "vgg_lth.LowRankVGG19.conv15_u", "vgg_lth.LowRankVGG19.conv16_u", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "vgg_lth.LowRankVGG19.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n", "#x = self.conv11(x)", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv12_v", "(", "self", ".", "conv12_u", "(", "x", ")", ")", "\n", "#x = self.conv12(x)", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#x = F.max_pool2d(x, 2, 2)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#x = self.classifier(x)", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.VGG.__init__": [[19, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.VGG.modules", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "#m.bias.data.zero_()", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.VGG.forward": [[38, 43], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.make_layers": [[45, 59], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg11": [[70, 73], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg11_bn": [[75, 78], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg11_bn", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg13": [[80, 83], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg13_bn": [[85, 88], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg16": [[90, 93], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg16_bn": [[95, 98], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg19": [[100, 103], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.vgg.vgg19_bn": [[105, 108], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.bool_string": [[38, 42], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.add_weight_decay": [[44, 57], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.norm_calculator": [[60, 65], ["enumerate", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "norm_calculator", "(", "model", ")", ":", "\n", "    ", "model_norm", "=", "0", "\n", "for", "param_index", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "model_norm", "+=", "torch", ".", "norm", "(", "param", ")", "**", "2", "\n", "", "return", "torch", ".", "sqrt", "(", "model_norm", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.param_counter": [[67, 72], ["enumerate", "model.named_parameters", "param.numel"], "function", ["None"], ["", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.decompose_weights": [[74, 176], ["low_rank_model.load_state_dict", "enumerate", "enumerate", "model.state_dict().items", "low_rank_model.state_dict().items", "enumerate", "enumerate", "NotImplementedError", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "model.state_dict().items", "low_rank_model.state_dict().items", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "print", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "v_weight_sliced.t", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "low_rank_model.state_dict", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size", "len", "param.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "param.size", "param.size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size"], "function", ["None"], ["", "def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ",", "args", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "\n", "if", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "54", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "# alternative implementation: u_weight_alt = torch.mm(u, torch.diag(torch.sqrt(s)))", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "# alternative implementation: v_weight_alt = torch.mm(torch.diag(torch.sqrt(s)), v.t())", "\n", "#print(\"layer indeix: {}, dist u u_alt:{}, dist v v_alt: {}\".format(item_index, torch.dist(u_weight, u_weight_alt), torch.dist(v_weight.t(), v_weight_alt)))", "\n", "#print(\"layer indeix: {}, dist u u_alt:{}, dist v v_alt: {}\".format(item_index, torch.equal(u_weight, u_weight_alt), torch.equal(v_weight.t(), v_weight_alt)))", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "elif", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", "and", "\"classifier.\"", "in", "param_name", "and", "\"classifier.6.\"", "not", "in", "param_name", ":", "\n", "                ", "print", "(", "param_name", ",", "param", ".", "size", "(", ")", ")", "\n", "rank", "=", "min", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "param", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param", ")", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.train": [[179, 221], ["model.train", "enumerate", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "optimizer.zero_grad", "torch.cuda.Event.record", "model", "criterion", "criterion.backward", "optimizer.step", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "data.to", "target.to", "float", "logger.info", "torch.cuda.Event.elapsed_time", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_timer", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_start = time.time()", "\n", "iter_start", ".", "record", "(", ")", "\n", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "#torch.cuda.synchronize()", "\n", "#forward_dur = time.time() - iter_comp_start", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#backward_start = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "iter_end", ".", "record", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_dur = time.time() - iter_comp_start", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "\n", "epoch_timer", "+=", "iter_comp_dur", "\n", "\n", "if", "batch_idx", "%", "40", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]  Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "return", "epoch_timer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.validate": [[223, 259], ["model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "len", "model", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "target.size", "len", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "data.to", "target.to", "len", "model.state_dict", "os.path.isdir", "os.mkdir", "torch.nll_loss", "output.argmax.eq().sum", "torch.log_softmax", "output.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "device", ")", ":", "\n", "    ", "global", "best_acc", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "\n", "", "", "assert", "total", "==", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "acc", ">", "best_acc", ":", "\n", "            ", "logger", ".", "info", "(", "'###### Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_seed{}_best.pth'", ".", "format", "(", "args", ".", "arch", ",", "args", ".", "seed", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.seed": [[261, 272], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "logger.info"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "", "", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main.main": [[274, 540], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "main.seed", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "torch.CrossEntropyLoss", "torch.SGD", "range", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "ptflops.get_model_complexity_info", "logger.info", "logger.info", "os.path.isdir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "LowRankVGG19().to.load_state_dict", "LowRankVGG19().to.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "time.time", "time.time", "logger.info", "main.norm_calculator", "logger.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "resnet_cifar10.ResNet18().to", "ptflops.get_model_complexity_info", "main.param_counter", "main.validate", "exit", "FullRankVGG19().to.parameters", "logger.info", "logger.info", "main.train", "main.norm_calculator", "logger.info", "main.validate", "main.validate", "resnet_cifar10.LowrankResNet18().to", "resnet_cifar10.ResNet18().to", "NotImplementedError", "lowrank_vgg.FullRankVGG19().to", "main.param_counter", "range", "logger.info", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "main.decompose_weights", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.SGD", "main.train", "main.norm_calculator", "logger.info", "logger.info", "main.train", "main.norm_calculator", "logger.info", "range", "torch.pad().data.squeeze", "resnet_cifar10.ResNet18", "lowrank_vgg.LowRankVGG19().to", "lowrank_vgg.FullRankVGG19().to", "NotImplementedError", "float", "LowRankVGG19().to.parameters", "resnet_cifar10.LowrankResNet18", "resnet_cifar10.ResNet18", "lowrank_vgg.FullRankVGG19", "torch.cuda.Event.elapsed_time", "lowrank_vgg.LowRankVGG19", "lowrank_vgg.FullRankVGG19", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowrankResNet18", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "#parser.add_argument('-a', '--arch', metavar='ARCH', default='resnet18',", "\n", "#                choices=model_names,", "\n", "#                help='model architecture: ' +", "\n", "#                    ' | '.join(model_names) +", "\n", "#                    ' (default: resnet18)')", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "default", "=", "'resnet18'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "'the random seed to use in the experiment for reproducibility'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-re'", ",", "'--resume'", ",", "default", "=", "False", ",", "type", "=", "bool_string", ",", "\n", "help", "=", "'wether or not to resume from a checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eva'", ",", "'--evaluate'", ",", "type", "=", "bool_string", ",", "default", "=", "False", ",", "\n", "help", "=", "'wether or not to evaluate the model after loading the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'the rank factor that is going to use in the low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'-cp'", ",", "'--ckpt_path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint/vgg19_best.pth\"", ",", "\n", "help", "=", "'path to the checkpoint to resume.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "\n", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "        ", "args", ".", "fr_warmup_epoch", "=", "args", ".", "epochs", "\n", "\n", "# let's enable cudnn benchmark", "\n", "", "seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "#model = vgg11_bn().to(device)", "\n", "#model = LowRankVGG().to(device)", "\n", "#model = models.resnet50(num_classes=10).to(device)", "\n", "#model = models.__dict__[args.arch](num_classes=10).to(device)", "\n", "#model = LowRankResNet18().to(device)", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowrankResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "", "", "elif", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "\n", "", "", "with", "torch", ".", "cuda", ".", "device", "(", "0", ")", ":", "\n", "        ", "lowrank_macs", ",", "lowrank_params", "=", "get_model_complexity_info", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "vanilla_macs", ",", "vanilla_params", "=", "get_model_complexity_info", "(", "vanilla_model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "", "", "logger", ".", "info", "(", "\"============> Lowrank Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "model", ",", "param_counter", "(", "model", ")", ",", "lowrank_macs", ")", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"============> Vanilla Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "\n", "vanilla_model", ",", "param_counter", "(", "vanilla_model", ")", ",", "vanilla_macs", ")", ")", "\n", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "init_lr", "=", "args", ".", "lr", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ",", "'Error: no checkpoint directory found!'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "#if args.mode == \"lowrank\":", "\n", "#    model.load_state_dict(checkpoint['net'])", "\n", "#elif args.mode == \"vanilla\":", "\n", "#    vanilla_model.load_state_dict(checkpoint['net'])", "\n", "#else:", "\n", "#    raise NotImplementedError(\"Unsupported training mode ...\")", "\n", "\n", "best_acc", "=", "checkpoint", "[", "'acc'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "start_epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "# if args.mode == \"lowrank\":", "\n", "#     validate(", "\n", "#              test_loader=test_loader,", "\n", "#              model=model, ", "\n", "#              criterion=criterion, ", "\n", "#              epoch=start_epoch,", "\n", "#              args=args,", "\n", "#              device=device)", "\n", "# elif args.mode == \"vanilla\":", "\n", "#     validate(", "\n", "#              test_loader=test_loader,", "\n", "#              model=vanilla_model, ", "\n", "#              criterion=criterion, ", "\n", "#              epoch=start_epoch,", "\n", "#              args=args,", "\n", "#              device=device)", "\n", "#else:", "\n", "#    raise NotImplementedError(\"Unsupported training mode ...\")              ", "\n", "exit", "(", ")", "\n", "\n", "", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "        ", "vanilla_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "vanilla_model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "# switching off the weight decay for batch norm layers", "\n", "#parameters = add_weight_decay(model, 0.0001)", "\n", "#weight_decay = 0.", "\n", "# optimizer = torch.optim.SGD(parameters, args.lr,", "\n", "#                             momentum=args.momentum,", "\n", "#                             #weight_decay=args.weight_decay)", "\n", "#                             weight_decay=weight_decay)", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# adjusting lr schedule", "\n", "if", "epoch", "<", "150", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "", "", "", "elif", "(", "epoch", ">=", "150", "and", "epoch", "<", "250", ")", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "", "", "", "elif", "epoch", ">=", "250", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "", "", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "vanilla_model", ",", "criterion", ",", "vanilla_optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "\n", "epoch_norm", "=", "norm_calculator", "(", "vanilla_model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "decompose_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decompose_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "decompose_start", ".", "record", "(", ")", "\n", "model", "=", "decompose_weights", "(", "model", "=", "vanilla_model", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ",", "\n", "args", "=", "args", ")", "\n", "\n", "decompose_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "float", "(", "decompose_start", ".", "elapsed_time", "(", "decompose_end", ")", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "#optimizer = optim.SGD(model.parameters(), lr=(args.lr/2), momentum=args.momentum, weight_decay=1e-4)", "\n", "#init_lr = args.lr/2", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, {} training ...\"", ".", "format", "(", "epoch", ",", "args", ".", "mode", ")", ")", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n", "", "epoch_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"####### Comp Time Cost for Epoch: {} is {}, os time: {}\"", ".", "format", "(", "epoch", ",", "epoch_time", ",", "epoch_end", "-", "epoch_start", ")", ")", "\n", "\n", "# eval", "\n", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "# validate(test_loader, model, criterion, epoch, device)", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "vanilla_model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "\n", "\n", "", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BasicBlock.__init__": [[24, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BasicBlock.forward": [[38, 44], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BasicBlock.bn2", "resnet_cifar10.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BasicBlock.bn1", "resnet_cifar10.BasicBlock.conv2", "resnet_cifar10.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.Bottleneck.__init__": [[49, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.Bottleneck.forward": [[65, 72], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.Bottleneck.bn3", "resnet_cifar10.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.Bottleneck.bn1", "resnet_cifar10.Bottleneck.bn2", "resnet_cifar10.Bottleneck.conv3", "resnet_cifar10.Bottleneck.conv1", "resnet_cifar10.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowrankBasicBlock.__init__": [[77, 99], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowrankBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowrankBasicBlock.forward": [[101, 107], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowrankBasicBlock.bn2", "resnet_cifar10.LowrankBasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowrankBasicBlock.bn1", "resnet_cifar10.LowrankBasicBlock.conv2_v", "resnet_cifar10.LowrankBasicBlock.conv1_v", "resnet_cifar10.LowrankBasicBlock.conv2_u", "resnet_cifar10.LowrankBasicBlock.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock1.__init__": [[112, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(self.expansion*planes)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock1.forward": [[131, 139], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock1.conv2_v", "resnet_cifar10.LowRankBasicBlock1.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock1.conv1_v", "resnet_cifar10.LowRankBasicBlock1.conv2_u", "resnet_cifar10.LowRankBasicBlock1.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock2.__init__": [[144, 166], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock2.forward": [[168, 174], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock2.bn2_v", "resnet_cifar10.LowRankBasicBlock2.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock2.bn1_v", "resnet_cifar10.LowRankBasicBlock2.conv2_v", "resnet_cifar10.LowRankBasicBlock2.conv1_v", "resnet_cifar10.LowRankBasicBlock2.bn2_u", "resnet_cifar10.LowRankBasicBlock2.bn1_u", "resnet_cifar10.LowRankBasicBlock2.conv2_u", "resnet_cifar10.LowRankBasicBlock2.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1_v", "(", "self", ".", "conv1_v", "(", "self", ".", "bn1_u", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2_v", "(", "self", ".", "conv2_v", "(", "self", ".", "bn2_u", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock3.__init__": [[179, 196], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock3.forward": [[198, 204], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock3.bn2", "resnet_cifar10.LowRankBasicBlock3.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock3.bn1", "resnet_cifar10.LowRankBasicBlock3.conv2_v", "resnet_cifar10.LowRankBasicBlock3.conv1_v", "resnet_cifar10.LowRankBasicBlock3.conv2_u", "resnet_cifar10.LowRankBasicBlock3.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlockConcat.__init__": [[209, 229], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockConcat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_first", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_second", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "*", "3", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_first", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_second", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "*", "3", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlockConcat.forward": [[231, 239], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlockConcat.bn2", "resnet_cifar10.LowRankBasicBlockConcat.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlockConcat.bn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet_cifar10.LowRankBasicBlockConcat.conv2_first", "resnet_cifar10.LowRankBasicBlockConcat.conv2_second", "resnet_cifar10.LowRankBasicBlockConcat.conv1_first", "resnet_cifar10.LowRankBasicBlockConcat.conv1_second"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "torch", ".", "cat", "(", "(", "self", ".", "conv1_first", "(", "x", ")", ",", "self", ".", "conv1_second", "(", "x", ")", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "torch", ".", "cat", "(", "(", "self", ".", "conv2_first", "(", "out", ")", ",", "self", ".", "conv2_second", "(", "out", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock4.__init__": [[244, 261], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlock4.forward": [[263, 269], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock4.bn2", "resnet_cifar10.LowRankBasicBlock4.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlock4.bn1", "resnet_cifar10.LowRankBasicBlock4.conv2_v", "resnet_cifar10.LowRankBasicBlock4.conv1_v", "resnet_cifar10.LowRankBasicBlock4.conv2_u", "resnet_cifar10.LowRankBasicBlock4.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BaselineBasicBlock.__init__": [[275, 283], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BaselineBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "# if stride != 1 or in_planes != self.expansion*planes:", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BaselineBasicBlock.forward": [[289, 295], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BaselineBasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BaselineBasicBlock.bn1", "resnet_cifar10.BaselineBasicBlock.conv2", "resnet_cifar10.BaselineBasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out += self.shortcut(x)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBottleneckConv1x1.__init__": [[300, 317], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneckConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "conv1x1", "(", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBottleneckConv1x1.forward": [[319, 326], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBottleneckConv1x1.bn3", "resnet_cifar10.LowRankBottleneckConv1x1.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBottleneckConv1x1.bn1", "resnet_cifar10.LowRankBottleneckConv1x1.bn2", "resnet_cifar10.LowRankBottleneckConv1x1.conv3_v", "resnet_cifar10.LowRankBottleneckConv1x1.conv1_v", "resnet_cifar10.LowRankBottleneckConv1x1.conv2_v", "resnet_cifar10.LowRankBottleneckConv1x1.conv3_u", "resnet_cifar10.LowRankBottleneckConv1x1.conv1_u", "resnet_cifar10.LowRankBottleneckConv1x1.conv2_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3_v", "(", "self", ".", "conv3_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlockResidual.__init__": [[331, 351], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv1_res", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv2_res", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlockResidual.forward": [[353, 359], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlockResidual.bn2", "resnet_cifar10.LowRankBasicBlockResidual.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlockResidual.bn1", "resnet_cifar10.LowRankBasicBlockResidual.conv2_v", "resnet_cifar10.LowRankBasicBlockResidual.conv2_res", "resnet_cifar10.LowRankBasicBlockResidual.conv1_v", "resnet_cifar10.LowRankBasicBlockResidual.conv1_res", "resnet_cifar10.LowRankBasicBlockResidual.conv2_u", "resnet_cifar10.LowRankBasicBlockResidual.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", "+", "self", ".", "conv1_res", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "+", "self", ".", "conv2_res", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlockLowRankResidual.__init__": [[364, 390], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockLowRankResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "# first low rank conv layer", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "# residual part", "\n", "self", ".", "conv1_res_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_res_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv2_res_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_res_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankBasicBlockLowRankResidual.forward": [[392, 398], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlockLowRankResidual.bn2", "resnet_cifar10.LowRankBasicBlockLowRankResidual.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankBasicBlockLowRankResidual.bn1", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv2_v", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv2_res_v", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv1_v", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv1_res_v", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv2_u", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv2_res_u", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv1_u", "resnet_cifar10.LowRankBasicBlockLowRankResidual.conv1_res_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", "+", "self", ".", "conv1_res_v", "(", "self", ".", "conv1_res_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "+", "self", ".", "conv2_res_v", "(", "self", ".", "conv2_res_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BaselineResNet.__init__": [[401, 412], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar10.BaselineResNet._make_layer", "resnet_cifar10.BaselineResNet._make_layer", "resnet_cifar10.BaselineResNet._make_layer", "resnet_cifar10.BaselineResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "BaselineResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BaselineBasicBlock", ",", "int", "(", "64", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BaselineResNet._make_layer": [[413, 420], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BaselineResNet.forward": [[421, 431], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BaselineResNet.layer1", "resnet_cifar10.BaselineResNet.layer2", "resnet_cifar10.BaselineResNet.layer3", "resnet_cifar10.BaselineResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar10.BaselineResNet.view", "resnet_cifar10.BaselineResNet.linear", "resnet_cifar10.BaselineResNet.bn1", "resnet_cifar10.BaselineResNet.size", "resnet_cifar10.BaselineResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BasicBlockLR.__init__": [[436, 451], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlockLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv1_v = nn.Conv2d(in_planes, planes, kernel_size=(1, 3), stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BasicBlockLR.forward": [[453, 459], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BasicBlockLR.bn2", "resnet_cifar10.BasicBlockLR.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.BasicBlockLR.bn1", "resnet_cifar10.BasicBlockLR.conv2_v", "resnet_cifar10.BasicBlockLR.conv1_v", "resnet_cifar10.BasicBlockLR.conv2_u", "resnet_cifar10.BasicBlockLR.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet.__init__": [[462, 473], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.ResNet._make_layer", "resnet_cifar10.ResNet._make_layer", "resnet_cifar10.ResNet._make_layer", "resnet_cifar10.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet._make_layer": [[474, 481], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet.forward": [[482, 493], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.ResNet.layer1", "resnet_cifar10.ResNet.layer2", "resnet_cifar10.ResNet.layer3", "resnet_cifar10.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar10.ResNet.view", "resnet_cifar10.ResNet.linear", "resnet_cifar10.ResNet.conv1", "resnet_cifar10.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.HybridResNet.__init__": [[496, 509], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_cifar10.HybridResNet._make_layer", "resnet_cifar10.HybridResNet._make_layer", "resnet_cifar10.HybridResNet._make_layer", "resnet_cifar10.HybridResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "fullrank_block", ",", "lowrank_block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "HybridResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "_block_counter", "=", "0", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "assert", "fullrank_block", ".", "expansion", "==", "lowrank_block", ".", "expansion", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "fullrank_block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.HybridResNet._make_layer": [[510, 522], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "fullrank_block", "lowrank_block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "fullrank_block", ",", "lowrank_block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "if", "self", ".", "_block_counter", "<", "1", ":", "\n", "                ", "layers", ".", "append", "(", "fullrank_block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "fullrank_block", ".", "expansion", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "lowrank_block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "lowrank_block", ".", "expansion", "\n", "", "self", ".", "_block_counter", "+=", "1", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.HybridResNet.forward": [[523, 534], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.HybridResNet.layer1", "resnet_cifar10.HybridResNet.layer2", "resnet_cifar10.HybridResNet.layer3", "resnet_cifar10.HybridResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar10.HybridResNet.view", "resnet_cifar10.HybridResNet.linear", "resnet_cifar10.HybridResNet.conv1", "resnet_cifar10.HybridResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResNet.__init__": [[537, 548], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar10.LowRankResNet._make_layer", "resnet_cifar10.LowRankResNet._make_layer", "resnet_cifar10.LowRankResNet._make_layer", "resnet_cifar10.LowRankResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", "[", "0", "]", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", "[", "1", "]", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", "[", "2", "]", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", "[", "3", "]", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", "[", "0", "]", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResNet._make_layer": [[549, 556], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResNet.forward": [[557, 567], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.LowRankResNet.layer1", "resnet_cifar10.LowRankResNet.layer2", "resnet_cifar10.LowRankResNet.layer3", "resnet_cifar10.LowRankResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar10.LowRankResNet.view", "resnet_cifar10.LowRankResNet.linear", "resnet_cifar10.LowRankResNet.bn1", "resnet_cifar10.LowRankResNet.size", "resnet_cifar10.LowRankResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNetLR.__init__": [[571, 585], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar10.ResNetLR._make_layer", "resnet_cifar10.ResNetLR._make_layer", "resnet_cifar10.ResNetLR._make_layer", "resnet_cifar10.ResNetLR._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNetLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "#self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNetLR._make_layer": [[586, 593], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNetLR.forward": [[594, 604], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar10.ResNetLR.layer1", "resnet_cifar10.ResNetLR.layer2", "resnet_cifar10.ResNetLR.layer3", "resnet_cifar10.ResNetLR.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar10.ResNetLR.view", "resnet_cifar10.ResNetLR.linear", "resnet_cifar10.ResNetLR.bn1", "resnet_cifar10.ResNetLR.size", "resnet_cifar10.ResNetLR.conv1_v", "resnet_cifar10.ResNetLR.conv1_u"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet18": [[606, 608], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.BaselineResNet18": [[609, 611], ["resnet_cifar10.BaselineResNet"], "function", ["None"], ["", "def", "BaselineResNet18", "(", ")", ":", "\n", "    ", "return", "BaselineResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowrankResNet18": [[613, 615], ["resnet_cifar10.HybridResNet"], "function", ["None"], ["", "def", "LowrankResNet18", "(", ")", ":", "\n", "    ", "return", "HybridResNet", "(", "BasicBlock", ",", "LowrankBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResResNet18": [[622, 624], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "LowRankResResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockResidual", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResLowRankResNet18": [[625, 627], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "LowRankResLowRankResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockLowRankResidual", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResNet18LR": [[628, 630], ["resnet_cifar10.ResNetLR"], "function", ["None"], ["", "def", "LowRankResNet18LR", "(", ")", ":", "\n", "    ", "return", "ResNetLR", "(", "BasicBlockLR", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet34": [[631, 633], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResNet34": [[634, 636], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "LowRankResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet50": [[637, 639], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.LowRankResNet50": [[640, 642], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "LowRankResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBottleneckConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet101": [[643, 645], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.ResNet152": [[646, 648], ["resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.resnet_cifar10.test": [[650, 654], ["resnet_cifar10.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.LabelSmoothingLoss.__init__": [[132, 138], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "smoothing", "=", "0.0", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "cls", "=", "classes", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.LabelSmoothingLoss.forward": [[139, 147], ["pred.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "log_softmax", "(", "dim", "=", "self", ".", "dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# true_dist = pred.data.clone()", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "smoothing", "/", "(", "self", ".", "cls", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "pred", ",", "dim", "=", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.AverageMeter.__init__": [[755, 759], ["imagenet_training.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.AverageMeter.reset": [[760, 765], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.AverageMeter.update": [[766, 771], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.AverageMeter.__str__": [[772, 775], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.ProgressMeter.__init__": [[778, 782], ["imagenet_training.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.ProgressMeter.display": [[783, 787], ["logger.info", "str", "imagenet_training.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "logger", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.ProgressMeter._get_batch_fmtstr": [[788, 792], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.bool_string": [[38, 42], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.add_weight_decay": [[149, 162], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.dynamic_adjustment_v1": [[164, 172], ["model.parameters", "model.named_parameters"], "function", ["None"], ["", "def", "dynamic_adjustment_v1", "(", "model", ",", "epoch", ")", ":", "\n", "    ", "if", "epoch", "%", "10", "==", "0", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"_res\"", "in", "name", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.param_counter": [[174, 179], ["enumerate", "model.named_parameters", "param.numel"], "function", ["None"], ["", "", "", "", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.decompose_weights": [[181, 248], ["enumerate", "enumerate", "low_rank_model.load_state_dict", "model.state_dict().items", "low_rank_model.state_dict().items", "print", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "reconstructed_aggregator[].size", "param.size", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size", "reconstructed_aggregator[].size", "param.size"], "function", ["None"], ["", "def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ",", "args", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#if len(param.size()) == 4 and item_index not in range(0, 258) and \"downsample\" not in param_name and \"conv3\" not in param_name:", "\n", "        ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "258", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "            ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "#logger.info(\"### Weights norm u: {}, s: {}, v:{}, w_index: {}, w:{}, w name: {}, w shape: {}\".format(torch.norm(u),", "\n", "#                                                            torch.norm(s),", "\n", "#                                                            torch.norm(v),", "\n", "#                                                            item_index,", "\n", "#                                                            torch.norm(param),", "\n", "#                                                            param_name,", "\n", "#                                                            param.size()", "\n", "#                                                            ))", "\n", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "#model_weight_v = u_weight.view(u_weight_sliced_shape[0],", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "#model_weight_u = v_weight.t().view(v_weight_sliced_shape[1], ", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "#if \"downsample\" in param_name:", "\n", "#    print(\"@@@@ U size: {}, V size: {}\".format(model_weight_u.size(), model_weight_v.size()))", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "            ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"#### {}, {}, recons agg: {}\uff0c param: {}\"", ".", "format", "(", "item_index", ",", "param_name", ",", "\n", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", ",", "\n", "param", ".", "size", "(", ")", ")", ")", "\n", "if", "\"_extra_bns\"", "in", "args", ".", "arch", ":", "\n", "            ", "if", "\"bn1_u\"", "in", "param_name", "or", "\"bn2_u\"", "in", "param_name", "or", "\"bn3_u\"", "in", "param_name", ":", "\n", "                ", "reload_state_dict", "[", "param_name", "]", "=", "param", "\n", "", "else", ":", "\n", "                ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.main": [[250, 283], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "imagenet_training.main_worker"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.main_worker": [[285, 627], ["logger.info", "LabelSmoothingLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "logger.info", "torch.init_process_group", "logger.info", "logger.info", "imagenet_training.add_weight_decay", "imagenet_training.add_weight_decay", "decompose_weights.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.optim.lr_scheduler.MultiStepLR", "warmup_scheduler.GradualWarmupScheduler", "torch.optim.lr_scheduler.MultiStepLR", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "imagenet_training.validate", "logger.info", "logger.info", "logger.info", "int", "imagenet_training.param_counter", "imagenet_training.param_counter", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "decompose_weights.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "decompose_weights.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "decompose_weights.cuda", "torch.nn.DataParallel().cuda.cuda", "imagenet_training.LabelSmoothingLoss", "logger.info", "decompose_weights.load_state_dict", "torch.optim.SGD.load_state_dict", "logger.info", "logger.info", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "range", "logger.info", "imagenet_training.train", "logger.info", "max", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "decompose_weights.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "logger.info", "logger.info", "range", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "imagenet_training.decompose_weights", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.optim.lr_scheduler.MultiStepLR", "imagenet_training.train", "logger.info", "logger.info", "imagenet_training.train", "logger.info", "imagenet_training.validate", "imagenet_training.validate", "lr_scheduler.MultiStepLR.step", "warmup_scheduler.GradualWarmupScheduler.step", "lr_scheduler.MultiStepLR.step", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "time.time", "imagenet_training.add_weight_decay", "decompose_weights.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "range", "range", "warmup_scheduler.GradualWarmupScheduler.step", "lr_scheduler.MultiStepLR.step", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "range", "imagenet_training.save_checkpoint", "imagenet_training.save_checkpoint", "imagenet_training.save_checkpoint", "imagenet_training.save_checkpoint", "NotImplementedError", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "decompose_weights.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "decompose_weights.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "logger", ".", "info", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "rank_factor", "=", "args", ".", "rank_factor", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "", "model_vanilla", "=", "models", ".", "__dict__", "[", "args", ".", "vanilla_arch", "]", "(", ")", "\n", "logger", ".", "info", "(", "\"@@@ Num Params: Vanilla Model: {}, Hybrid Model: {}\"", ".", "format", "(", "param_counter", "(", "model_vanilla", ")", ",", "\n", "param_counter", "(", "model", ")", ")", ")", "\n", "#model_vanilla = torch.nn.DataParallel(model_vanilla).cuda()", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model_vanilla", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_vanilla", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_vanilla", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", "=", "model_vanilla", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_vanilla", ".", "features", ")", "\n", "model_vanilla", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_vanilla", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "#criterion = nn.CrossEntropyLoss().cuda(args.gpu)", "\n", "", "", "criterion", "=", "LabelSmoothingLoss", "(", "classes", "=", "1000", ",", "smoothing", "=", "0.1", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "if", "weight_decay", ":", "\n", "        ", "parameters", "=", "add_weight_decay", "(", "model", ",", "weight_decay", ")", "\n", "parameters_vanilla", "=", "add_weight_decay", "(", "model_vanilla", ",", "weight_decay", ")", "\n", "weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "parameters_vanilla", "=", "model_vanilla", ".", "parameters", "(", ")", "\n", "\n", "#logger.info(\"@@@@@@@ Parameters: {}, weight_decay: {}\".format(parameters, weight_decay))", "\n", "#optimizer = torch.optim.SGD(model.parameters(), args.lr,", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "optimizer_vanilla", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters_vanilla", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "\n", "if", "args", ".", "lr_warmup", ":", "\n", "#scheduler_multi_step = lr_scheduler.MultiStepLR(optimizer, milestones=[e - args.warmup_epoch - 1 for e in args.lr_decay_period], gamma=args.lr_decay_factor)", "\n", "#scheduler_warmup = GradualWarmupScheduler(optimizer, multiplier=args.multiplier, total_epoch=args.warmup_epoch, after_scheduler=scheduler_multi_step)", "\n", "        ", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_vanilla", ",", "milestones", "=", "[", "e", "-", "args", ".", "warmup_epoch", "-", "1", "for", "e", "in", "args", ".", "lr_decay_period", "]", ",", "gamma", "=", "args", ".", "lr_decay_factor", ")", "\n", "scheduler_warmup", "=", "GradualWarmupScheduler", "(", "optimizer_vanilla", ",", "multiplier", "=", "args", ".", "multiplier", ",", "total_epoch", "=", "args", ".", "warmup_epoch", ",", "after_scheduler", "=", "scheduler_multi_step", ")", "\n", "", "else", ":", "\n", "#scheduler_multi_step = lr_scheduler.MultiStepLR(optimizer, milestones=[e for e in args.lr_decay_period], gamma=args.lr_decay_factor)", "\n", "        ", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_vanilla", ",", "milestones", "=", "[", "e", "for", "e", "in", "args", ".", "lr_decay_period", "]", ",", "gamma", "=", "args", ".", "lr_decay_factor", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"What it looks like for the (lowrank) model : {}\"", ".", "format", "(", "model", ")", ")", "\n", "logger", ".", "info", "(", "\"\"", ")", "\n", "logger", ".", "info", "(", "\"What it looks like for the (vanilla) model : {}\"", ".", "format", "(", "model_vanilla", ")", ")", "\n", "\n", "\n", "", "if", "args", ".", "re_warmup", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "args", ".", "start_epoch", "=", "args", ".", "fr_warmup_epoch", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "#adjust_learning_rate(optimizer, epoch, args)", "\n", "", "if", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "for", "param_group", "in", "optimizer_vanilla", ".", "param_groups", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "\n", "\n", "", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "# warm-up training", "\n", "epoch_time_comm_comp", "=", "train", "(", "train_loader", ",", "model_vanilla", ",", "criterion", ",", "optimizer_vanilla", ",", "epoch", ",", "args", ")", "\n", "logger", ".", "info", "(", "\"@ Warming-up Epoch: {}, Comm+Comp time cost: {}\"", ".", "format", "(", "epoch", ",", "epoch_time_comm_comp", ")", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "# with open(\"checkpoint-epoch14.pth.tar\", \"rb\") as ckpt_file:", "\n", "#     save_state = torch.load(ckpt_file)", "\n", "# model_vanilla.load_state_dict(save_state['state_dict'])", "\n", "# logger.info(\"##### Done loading pretrained model weights ...\")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_start", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "decompose_weights", "(", "model", "=", "model_vanilla", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ",", "args", "=", "args", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "time", ".", "time", "(", ")", "-", "decompose_start", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "if", "weight_decay", ":", "\n", "                ", "parameters", "=", "add_weight_decay", "(", "model", ",", "weight_decay", ")", "\n", "weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "                ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "if", "args", ".", "lr_warmup", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", "*", "args", ".", "multiplier", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "args", ".", "fr_warmup_epoch", "for", "e", "in", "args", ".", "lr_decay_period", "]", ",", "\n", "gamma", "=", "args", ".", "lr_decay_factor", ")", "\n", "epoch_time_comm_comp", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "logger", ".", "info", "(", "\"@ Low-rank Training Epoch: {}, Comm+Comp time cost: {}\"", ".", "format", "(", "epoch", ",", "epoch_time_comm_comp", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, low rank training ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "epoch_time_comm_comp", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "logger", ".", "info", "(", "\"@ Low-rank Training Epoch: {}, Comm+Comp time cost: {}\"", ".", "format", "(", "epoch", ",", "epoch_time_comm_comp", ")", ")", "\n", "\n", "\n", "# train for one epoch", "\n", "#train(train_loader, model, criterion, optimizer, epoch, args)", "\n", "\n", "# evaluate on validation set", "\n", "", "if", "args", ".", "end_epoch_validation", ":", "\n", "            ", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "                ", "acc1", "=", "validate", "(", "val_loader", ",", "model_vanilla", ",", "criterion", ",", "args", ")", "\n", "", "else", ":", "\n", "                ", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "\n", "#if args.est_rank:", "\n", "#    if ((epoch+1) % 3 == 0):", "\n", "#        estimate_rank(model, epoch)", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "#and args.rank % ngpus_per_node == 0):", "\n", "and", "args", ".", "rank", "==", "0", ")", ":", "\n", "            ", "if", "args", ".", "end_epoch_validation", ":", "\n", "                ", "if", "(", "(", "epoch", "+", "1", ")", "%", "1", "==", "0", ")", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "args", ".", "warmup_epoch", ")", ":", "\n", "                        ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model_vanilla", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer_vanilla", ".", "state_dict", "(", ")", ",", "\n", "#}, is_best, filename=args.model_save_dir+\"/\"+\"checkpoint-epoch{}.pth.tar\".format(epoch+1))", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_save_dir", ",", "\"checkpoint-epoch{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "#}, is_best, filename=args.model_save_dir+\"/\"+\"checkpoint-epoch{}.pth.tar\".format(epoch+1))", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_save_dir", ",", "\"checkpoint-epoch{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "(", "epoch", "in", "range", "(", "80", ",", "90", ")", ")", ":", "\n", "                    ", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                        ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "#}, is_best, filename=args.model_save_dir+\"/\"+\"checkpoint-epoch{}.pth.tar\".format(epoch+1))", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_save_dir", ",", "\"checkpoint-epoch{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", ")", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "                        ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "vanilla_arch", ",", "\n", "'state_dict'", ":", "model_vanilla", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer_vanilla", ".", "state_dict", "(", ")", ",", "\n", "#}, is_best, filename=args.model_save_dir+\"/\"+\"checkpoint-epoch{}.pth.tar\".format(epoch+1))", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_save_dir", ",", "\"checkpoint-epoch{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported program mode ...\"", ")", "\n", "\n", "# if ((epoch+1) % 1 == 0):", "\n", "#     save_checkpoint({", "\n", "#         'epoch': epoch+1,", "\n", "#         'arch': args.arch,", "\n", "#         'state_dict': model.state_dict(),", "\n", "#         'best_acc1': best_acc1,", "\n", "#         'optimizer' : optimizer.state_dict(),", "\n", "#     }, is_best, filename=\"checkpoint-epoch{}.pth.tar\".format(epoch+1))", "\n", "", "", "", "", "if", "args", ".", "full_rank_warmup", ":", "\n", "# learning rate schedule with full-rank warmup", "\n", "            ", "if", "args", ".", "lr_warmup", ":", "\n", "                ", "if", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "                    ", "scheduler_warmup", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "# learning rate schedule without full-rank warmup", "\n", "            ", "if", "args", ".", "lr_warmup", ":", "\n", "                ", "scheduler_warmup", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.train": [[629, 701], ["imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.ProgressMeter", "model.train", "time.time", "enumerate", "len", "imagenet_training.AverageMeter.update", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "target.cuda.cuda", "torch.cuda.Event.record", "model", "criterion", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "imagenet_training.accuracy", "imagenet_training.AverageMeter.update", "imagenet_training.AverageMeter.update", "imagenet_training.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "imagenet_training.AverageMeter.update", "time.time", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "float", "imagenet_training.ProgressMeter.display", "time.time", "torch.cuda.Event.elapsed_time", "time.time"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter.display"], ["", "", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "comm_and_comp_time", "=", "0.0", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "#torch.cuda.synchronize()", "\n", "#forward_start = time.time()", "\n", "iter_start", ".", "record", "(", ")", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "#forward_dur = time.time() - forward_start", "\n", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#backward_start = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "#logger.info(\"Forward cost: {}, Backward cost: {}\".format(forward_dur, backward_dur))", "\n", "#comm_and_comp_time += forward_dur+backward_dur", "\n", "iter_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_time", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "comm_and_comp_time", "+=", "iter_time", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "return", "comm_and_comp_time", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.validate": [[703, 745], ["imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.AverageMeter", "imagenet_training.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "logger.info", "target.cuda.cuda", "model", "criterion", "imagenet_training.accuracy", "imagenet_training.AverageMeter.update", "imagenet_training.AverageMeter.update", "imagenet_training.AverageMeter.update", "imagenet_training.AverageMeter.update", "time.time", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "imagenet_training.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "logger", ".", "info", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.save_checkpoint": [[747, 751], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.adjust_learning_rate": [[794, 817], ["logger.info", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "in", "range", "(", "0", ",", "30", ")", ":", "\n", "        ", "if", "args", ".", "lr_warmup", ":", "\n", "# we adopt the learning rate warmup rule from the Facebook paper: ", "\n", "# https://research.fb.com/wp-content/uploads/2017/06/imagenet1kin1h5.pdf", "\n", "            ", "__pre_computed_lrs", "=", "[", "args", ".", "base_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "base_lr", ")", "/", "5", "*", "i", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "if", "epoch", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "                ", "lr", "=", "__pre_computed_lrs", "[", "epoch", "]", "\n", "", "else", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "", "", "elif", "epoch", "in", "range", "(", "30", ",", "60", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "/", "10", "\n", "", "elif", "epoch", "in", "range", "(", "60", ",", "80", ")", ":", "\n", "        ", "lr", "=", "(", "(", "args", ".", "lr", "/", "10", ")", "/", "10", ")", "\n", "", "elif", "epoch", "in", "range", "(", "80", ",", "90", ")", ":", "\n", "        ", "lr", "=", "(", "(", "args", ".", "lr", "/", "10", ")", "/", "10", "/", "10", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Current Effective lr: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.imagenet_training.accuracy": [[819, 834], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.bool_string": [[36, 40], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.add_weight_decay": [[42, 55], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.norm_calculator": [[58, 63], ["enumerate", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "norm_calculator", "(", "model", ")", ":", "\n", "    ", "model_norm", "=", "0", "\n", "for", "param_index", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "model_norm", "+=", "torch", ".", "norm", "(", "param", ")", "**", "2", "\n", "", "return", "torch", ".", "sqrt", "(", "model_norm", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.param_counter": [[65, 70], ["enumerate", "model.named_parameters", "param.numel"], "function", ["None"], ["", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.decompose_weights": [[72, 172], ["low_rank_model.load_state_dict", "enumerate", "enumerate", "model.state_dict().items", "low_rank_model.state_dict().items", "enumerate", "enumerate", "NotImplementedError", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "model.state_dict().items", "low_rank_model.state_dict().items", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "print", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "v_weight_sliced.t", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "low_rank_model.state_dict", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size", "len", "param.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "param.size", "param.size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size"], "function", ["None"], ["", "def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ",", "args", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "\n", "if", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "54", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "elif", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", "and", "\"classifier.\"", "in", "param_name", "and", "\"classifier.6.\"", "not", "in", "param_name", ":", "\n", "                ", "print", "(", "param_name", ",", "param", ".", "size", "(", ")", ")", "\n", "rank", "=", "min", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "param", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param", ")", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.train": [[175, 217], ["model.train", "enumerate", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "optimizer.zero_grad", "torch.cuda.Event.record", "model", "criterion", "criterion.backward", "optimizer.step", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "data.to", "target.to", "float", "logger.info", "torch.cuda.Event.elapsed_time", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_timer", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_start = time.time()", "\n", "iter_start", ".", "record", "(", ")", "\n", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "#torch.cuda.synchronize()", "\n", "#forward_dur = time.time() - iter_comp_start", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#backward_start = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "iter_end", ".", "record", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_dur = time.time() - iter_comp_start", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "\n", "epoch_timer", "+=", "iter_comp_dur", "\n", "\n", "if", "batch_idx", "%", "40", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]  Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "return", "epoch_timer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.validate": [[219, 235], ["model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "len", "data.to", "target.to", "len", "torch.nll_loss", "output.argmax.eq().sum", "torch.log_softmax", "output.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_cifar10_large_batch.main": [[237, 452], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "warmup_scheduler.GradualWarmupScheduler", "torch.CrossEntropyLoss", "main_cifar10_large_batch.norm_calculator", "logger.info", "range", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "ptflops.get_model_complexity_info", "ptflops.get_model_complexity_info", "LowRankVGG19().to.parameters", "FullRankVGG19().to.parameters", "logger.info", "main_cifar10_large_batch.norm_calculator", "logger.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "resnet_cifar10.ResNet18().to", "main_cifar10_large_batch.param_counter", "main_cifar10_large_batch.param_counter", "range", "logger.info", "main_cifar10_large_batch.train", "warmup_scheduler.GradualWarmupScheduler.step", "main_cifar10_large_batch.validate", "main_cifar10_large_batch.validate", "resnet_cifar10.LowrankResNet18().to", "resnet_cifar10.ResNet18().to", "NotImplementedError", "lowrank_vgg.FullRankVGG19().to", "logger.info", "logger.info", "range", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "main_cifar10_large_batch.decompose_weights", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "main_cifar10_large_batch.train", "torch.optim.lr_scheduler.MultiStepLR.step", "logger.info", "main_cifar10_large_batch.train", "torch.optim.lr_scheduler.MultiStepLR.step", "range", "torch.pad().data.squeeze", "resnet_cifar10.ResNet18", "lowrank_vgg.LowRankVGG19().to", "lowrank_vgg.FullRankVGG19().to", "NotImplementedError", "time.time", "LowRankVGG19().to.parameters", "resnet_cifar10.LowrankResNet18", "resnet_cifar10.ResNet18", "lowrank_vgg.FullRankVGG19", "lowrank_vgg.LowRankVGG19", "lowrank_vgg.FullRankVGG19", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowrankResNet18", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'resnet18'", ",", "\n", "choices", "=", "model_names", ",", "\n", "help", "=", "'model architecture: '", "+", "\n", "' | '", ".", "join", "(", "model_names", ")", "+", "\n", "' (default: resnet18)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'the rank factor that is going to use in the low rank models'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:2\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "# let's enable cudnn benchmark", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "#model = vgg11_bn().to(device)", "\n", "#model = LowRankVGG().to(device)", "\n", "#model = models.resnet50(num_classes=10).to(device)", "\n", "#model = models.__dict__[args.arch](num_classes=10).to(device)", "\n", "#model = LowRankResNet18().to(device)", "\n", "lr_warmup_epoch", "=", "5", "\n", "lr_decay_period", "=", "(", "150", ",", "250", ")", "\n", "lr_decay_gamma", "=", "0.1", "\n", "lr_warmup_multiplier", "=", "16", "\n", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowrankResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "", "", "elif", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "\n", "", "", "with", "torch", ".", "cuda", ".", "device", "(", "0", ")", ":", "\n", "        ", "lowrank_macs", ",", "lowrank_params", "=", "get_model_complexity_info", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "vanilla_macs", ",", "vanilla_params", "=", "get_model_complexity_info", "(", "vanilla_model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "", "logger", ".", "info", "(", "\"============> Lowrank Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "model", ",", "param_counter", "(", "model", ")", ",", "lowrank_macs", ")", ")", "\n", "logger", ".", "info", "(", "\"============> Vanilla Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "vanilla_model", ",", "param_counter", "(", "vanilla_model", ")", ",", "vanilla_macs", ")", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "scheduler_multi_step_lowrank", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "args", ".", "fr_warmup_epoch", "-", "1", "for", "e", "in", "lr_decay_period", "]", ",", "\n", "gamma", "=", "lr_decay_gamma", ")", "\n", "\n", "vanilla_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "vanilla_model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "scheduler_multi_step_vanilla", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "vanilla_optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "lr_warmup_epoch", "-", "1", "for", "e", "in", "lr_decay_period", "]", ",", "\n", "gamma", "=", "lr_decay_gamma", ")", "\n", "scheduler_warmup_vanilla", "=", "GradualWarmupScheduler", "(", "vanilla_optimizer", ",", "\n", "multiplier", "=", "lr_warmup_multiplier", ",", "\n", "total_epoch", "=", "lr_warmup_epoch", ",", "\n", "after_scheduler", "=", "scheduler_multi_step_vanilla", ")", "\n", "\n", "# switching off the weight decay for batch norm layers", "\n", "#parameters = add_weight_decay(model, 0.0001)", "\n", "#weight_decay = 0.", "\n", "# optimizer = torch.optim.SGD(parameters, args.lr,", "\n", "#                             momentum=args.momentum,", "\n", "#                             #weight_decay=args.weight_decay)", "\n", "#                             weight_decay=weight_decay)", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "init_lr", "=", "args", ".", "lr", "\n", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "0", ",", "epoch_norm", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjusting lr schedule", "\n", "# if epoch < 150:", "\n", "#     for group in optimizer.param_groups:", "\n", "#         group['lr'] = init_lr", "\n", "\n", "#     for group in vanilla_optimizer.param_groups:", "\n", "#         group['lr'] = init_lr", "\n", "# elif (epoch >= 150 and epoch < 250):", "\n", "#     for group in optimizer.param_groups:", "\n", "#         group['lr'] = init_lr/10.0", "\n", "\n", "#     for group in vanilla_optimizer.param_groups:", "\n", "#         group['lr'] = init_lr/10.0", "\n", "# elif epoch >= 250:", "\n", "#     for group in optimizer.param_groups:", "\n", "#         group['lr'] = init_lr/100.0", "\n", "\n", "#     for group in vanilla_optimizer.param_groups:", "\n", "#         group['lr'] = init_lr/100.0", "\n", "\n", "        ", "if", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                ", "logger", ".", "info", "(", "\"### Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "logger", ".", "info", "(", "\"### Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "vanilla_model", ",", "criterion", ",", "vanilla_optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "scheduler_warmup_vanilla", ".", "step", "(", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_start", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "decompose_weights", "(", "model", "=", "vanilla_model", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ",", "\n", "args", "=", "args", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "time", ".", "time", "(", ")", "-", "decompose_start", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "lr_warmup_multiplier", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "scheduler_multi_step_lowrank", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "args", ".", "fr_warmup_epoch", "-", "1", "for", "e", "in", "lr_decay_period", "]", ",", "\n", "gamma", "=", "lr_decay_gamma", ")", "\n", "#optimizer = optim.SGD(model.parameters(), lr=(args.lr/2), momentum=args.momentum, weight_decay=1e-4)", "\n", "#init_lr = args.lr/2", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "scheduler_multi_step_lowrank", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, low rank training ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "scheduler_multi_step_lowrank", ".", "step", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"####### Time Cost for Epoch: {} is {}\"", ".", "format", "(", "epoch", ",", "epoch_time", ")", ")", "\n", "\n", "\n", "# eval", "\n", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "# validate(test_loader, model, criterion, epoch, device)", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "vanilla_model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "device", "=", "device", ")", "\n", "\n", "\n", "", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_resume.add_weight_decay": [[28, 41], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_resume.load_checkpoint": [[43, 57], ["enumerate", "model.load_state_dict", "model.to", "logger.info", "open", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict().items", "torch.load.keys", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "load_checkpoint", "(", "model", ",", "resume_epoch", ",", "device", ")", ":", "\n", "    ", "with", "open", "(", "\"ckpt_model_resnet18_epoch{}\"", ".", "format", "(", "resume_epoch", ")", ",", "\"rb\"", ")", "as", "model_checkpoint", ":", "\n", "        ", "resnet18_epoch10", "=", "torch", ".", "load", "(", "model_checkpoint", ")", "\n", "# load desired weights to the model", "\n", "", "new_state_dict", "=", "{", "}", "\n", "model_counter_", "=", "0", "\n", "for", "param_idx", ",", "(", "key_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "key_name", "in", "resnet18_epoch10", ".", "keys", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "key_name", "]", "=", "resnet18_epoch10", "[", "key_name", "]", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "key_name", "]", "=", "param", "\n", "", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "\"Loading successfully ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_resume.main": [[59, 220], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "LowRankResNet18().to", "logger.info", "main_resume.load_checkpoint", "LowRankResNet18().to.eval", "len", "logger.info", "torch.SGD", "torch.CrossEntropyLoss", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "LowRankResNet18().to.parameters", "LowRankResNet18().to.train", "enumerate", "LowRankResNet18().to.eval", "len", "logger.info", "open", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "LowRankResNet18", "LowRankResNet18().to.", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "len", "logger.info", "optim.SGD.zero_grad", "LowRankResNet18().to.", "nn.CrossEntropyLoss.", "criterion.backward", "optim.SGD.step", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "LowRankResNet18().to.state_dict", "data.to", "target.to", "len", "data.to", "target.to", "LowRankResNet18().to.", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "len", "torch.pad().data.squeeze", "torch.nll_loss", "output.argmax.eq().sum", "len", "criterion.item", "data.to", "target.to", "len", "torch.log_softmax", "len", "len", "torch.nll_loss", "output.argmax.eq().sum", "output.argmax.eq", "torch.log_softmax", "torch.pad", "target.view_as", "output.argmax.eq", "torch.autograd.Variable", "target.view_as", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.load_checkpoint", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'resnet18'", ",", "\n", "choices", "=", "model_names", ",", "\n", "help", "=", "'model architecture: '", "+", "\n", "' | '", ".", "join", "(", "model_names", ")", "+", "\n", "' (default: resnet18)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'RE'", ",", "\n", "help", "=", "'starting from which epoch'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "\n", "model", "=", "LowRankResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "#model = BaselineResNet18().to(device)", "\n", "\n", "#model = LowRankResNet18LR().to(device)", "\n", "logger", ".", "info", "(", "\"============> Model info: {}\"", ".", "format", "(", "model", ")", ")", "\n", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "resume_epoch", ",", "device", ")", "\n", "\n", "# eval", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "args", ".", "resume_epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "#model = FullRankVGG().to(device)", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "# switching off the weight decay for batch norm layers", "\n", "#parameters = add_weight_decay(model, 0.0001)", "\n", "#weight_decay = 0.", "\n", "# optimizer = torch.optim.SGD(parameters, args.lr,", "\n", "#                             momentum=args.momentum,", "\n", "#                             #weight_decay=args.weight_decay)", "\n", "#                             weight_decay=weight_decay)", "\n", "\n", "#optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.0001)", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "init_lr", "=", "args", ".", "lr", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "resume_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjusting lr schedule", "\n", "        ", "if", "epoch", "<", "150", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "", "", "elif", "(", "epoch", ">=", "150", "and", "epoch", "<", "250", ")", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "", "", "elif", "epoch", ">=", "250", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "\n", "# train", "\n", "", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_start = time.time()", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "#torch.cuda.synchronize()", "\n", "#forward_dur = time.time() - iter_comp_start", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#backward_start = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_dur = time.time() - iter_comp_start", "\n", "\n", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]  Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "# eval", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "# we save the final model for future use", "\n", "", "with", "open", "(", "\"trained_model_resnet18\"", ",", "\"wb\"", ")", "as", "f_", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.LabelSmoothingLoss.__init__": [[131, 137], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "smoothing", "=", "0.0", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "cls", "=", "classes", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.LabelSmoothingLoss.forward": [[138, 146], ["pred.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "log_softmax", "(", "dim", "=", "self", ".", "dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# true_dist = pred.data.clone()", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "smoothing", "/", "(", "self", ".", "cls", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "pred", ",", "dim", "=", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.__init__": [[678, 682], ["amp_imagenet_training.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.reset": [[683, 688], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update": [[689, 694], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.__str__": [[695, 698], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter.__init__": [[701, 705], ["amp_imagenet_training.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter.display": [[706, 710], ["logger.info", "str", "amp_imagenet_training.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "logger", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter._get_batch_fmtstr": [[711, 715], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.bool_string": [[41, 45], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.add_weight_decay": [[148, 161], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.dynamic_adjustment_v1": [[163, 171], ["model.parameters", "model.named_parameters"], "function", ["None"], ["", "def", "dynamic_adjustment_v1", "(", "model", ",", "epoch", ")", ":", "\n", "    ", "if", "epoch", "%", "10", "==", "0", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"_res\"", "in", "name", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.decompose_weights": [[173, 230], ["enumerate", "enumerate", "low_rank_model.load_state_dict", "model.state_dict().items", "low_rank_model.state_dict().items", "print", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size"], "function", ["None"], ["", "", "", "", "def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#if len(param.size()) == 4 and item_index not in range(0, 258) and \"downsample\" not in param_name and \"conv3\" not in param_name:", "\n", "        ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "258", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "            ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "#logger.info(\"### Weights norm u: {}, s: {}, v:{}, w_index: {}, w:{}, w name: {}, w shape: {}\".format(torch.norm(u),", "\n", "#                                                            torch.norm(s),", "\n", "#                                                            torch.norm(v),", "\n", "#                                                            item_index,", "\n", "#                                                            torch.norm(param),", "\n", "#                                                            param_name,", "\n", "#                                                            param.size()", "\n", "#                                                            ))", "\n", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "#model_weight_v = u_weight.view(u_weight_sliced_shape[0],", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "#model_weight_u = v_weight.t().view(v_weight_sliced_shape[1], ", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "#if \"downsample\" in param_name:", "\n", "#    print(\"@@@@ U size: {}, V size: {}\".format(model_weight_u.size(), model_weight_v.size()))", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "            ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"#### {}, {}, recons agg: {}\uff0c param: {}\"", ".", "format", "(", "item_index", ",", "param_name", ",", "\n", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", ",", "\n", "param", ".", "size", "(", ")", ")", ")", "\n", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.main": [[232, 265], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "amp_imagenet_training.main_worker"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.main_worker": [[267, 552], ["LabelSmoothingLoss().cuda", "torch.cuda.amp.GradScaler", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "logger.info", "torch.init_process_group", "logger.info", "logger.info", "amp_imagenet_training.add_weight_decay", "amp_imagenet_training.add_weight_decay", "decompose_weights.parameters", "torch.nn.DataParallel().cuda.parameters", "torch.optim.lr_scheduler.MultiStepLR", "warmup_scheduler.GradualWarmupScheduler", "torch.optim.lr_scheduler.MultiStepLR", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "amp_imagenet_training.validate", "logger.info", "logger.info", "logger.info", "max", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "decompose_weights.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "decompose_weights.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "decompose_weights.cuda", "torch.nn.DataParallel().cuda.cuda", "amp_imagenet_training.LabelSmoothingLoss", "logger.info", "decompose_weights.load_state_dict", "torch.optim.SGD.load_state_dict", "logger.info", "logger.info", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "logger.info", "logger.info", "amp_imagenet_training.train", "logger.info", "amp_imagenet_training.validate", "amp_imagenet_training.validate", "warmup_scheduler.GradualWarmupScheduler.step", "lr_scheduler.MultiStepLR.step", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "decompose_weights.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "range", "logger.info", "amp_imagenet_training.decompose_weights", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "amp_imagenet_training.train", "logger.info", "logger.info", "amp_imagenet_training.train", "logger.info", "range", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "amp_imagenet_training.add_weight_decay", "decompose_weights.parameters", "range", "amp_imagenet_training.save_checkpoint", "amp_imagenet_training.save_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "decompose_weights.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "logger", ".", "info", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "rank_factor", "=", "args", ".", "rank_factor", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "", "model_vanilla", "=", "models", ".", "__dict__", "[", "args", ".", "vanilla_arch", "]", "(", ")", "\n", "#model_vanilla = torch.nn.DataParallel(model_vanilla).cuda()", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model_vanilla", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_vanilla", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_vanilla", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", "=", "model_vanilla", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_vanilla", ".", "features", ")", "\n", "model_vanilla", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "## handle vanilla model", "\n", "model_vanilla", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_vanilla", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "#criterion = nn.CrossEntropyLoss().cuda(args.gpu)", "\n", "", "", "criterion", "=", "LabelSmoothingLoss", "(", "classes", "=", "1000", ",", "smoothing", "=", "0.1", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "if", "weight_decay", ":", "\n", "        ", "parameters", "=", "add_weight_decay", "(", "model", ",", "weight_decay", ")", "\n", "parameters_vanilla", "=", "add_weight_decay", "(", "model_vanilla", ",", "weight_decay", ")", "\n", "weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "parameters_vanilla", "=", "model_vanilla", ".", "parameters", "(", ")", "\n", "\n", "#logger.info(\"@@@@@@@ Parameters: {}, weight_decay: {}\".format(parameters, weight_decay))", "\n", "#optimizer = torch.optim.SGD(model.parameters(), args.lr,", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "optimizer_vanilla", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters_vanilla", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "\n", "if", "args", ".", "lr_warmup", ":", "\n", "        ", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "e", "-", "args", ".", "warmup_epoch", "-", "1", "for", "e", "in", "args", ".", "lr_decay_period", "]", ",", "gamma", "=", "args", ".", "lr_decay_factor", ")", "\n", "scheduler_warmup", "=", "GradualWarmupScheduler", "(", "optimizer", ",", "multiplier", "=", "args", ".", "multiplier", ",", "total_epoch", "=", "args", ".", "warmup_epoch", ",", "after_scheduler", "=", "scheduler_multi_step", ")", "\n", "", "else", ":", "\n", "#scheduler_multi_step = lr_scheduler.MultiStepLR(optimizer, milestones=[e for e in args.lr_decay_period], gamma=args.lr_decay_factor)", "\n", "        ", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_vanilla", ",", "milestones", "=", "[", "e", "for", "e", "in", "args", ".", "lr_decay_period", "]", ",", "gamma", "=", "args", ".", "lr_decay_factor", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"What it looks like for the (lowrank) model : {}\"", ".", "format", "(", "model", ")", ")", "\n", "logger", ".", "info", "(", "\"\"", ")", "\n", "logger", ".", "info", "(", "\"What it looks like for the (vanilla) model : {}\"", ".", "format", "(", "model_vanilla", ")", ")", "\n", "\n", "\n", "", "if", "args", ".", "re_warmup", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "args", ".", "start_epoch", "=", "args", ".", "fr_warmup_epoch", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "#adjust_learning_rate(optimizer, epoch, args)", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "\n", "\n", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "# warm-up training", "\n", "epoch_time_comm_comp", "=", "train", "(", "train_loader", ",", "model_vanilla", ",", "criterion", ",", "optimizer_vanilla", ",", "epoch", ",", "args", ",", "scaler", "=", "scaler", ")", "\n", "logger", ".", "info", "(", "\"@ Warming-up Epoch: {}, Comm+Comp time cost: {}\"", ".", "format", "(", "epoch", ",", "epoch_time_comm_comp", ")", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "# with open(\"checkpoint-epoch14.pth.tar\", \"rb\") as ckpt_file:", "\n", "#     save_state = torch.load(ckpt_file)", "\n", "# model_vanilla.load_state_dict(save_state['state_dict'])", "\n", "# logger.info(\"##### Done loading pretrained model weights ...\")", "\n", "\n", "model", "=", "decompose_weights", "(", "model", "=", "model_vanilla", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ")", "\n", "\n", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "if", "weight_decay", ":", "\n", "                ", "parameters", "=", "add_weight_decay", "(", "model", ",", "weight_decay", ")", "\n", "weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "                ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "#weight_decay=args.weight_decay)", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "args", ".", "fr_warmup_epoch", "for", "e", "in", "args", ".", "lr_decay_period", "]", ",", "\n", "gamma", "=", "args", ".", "lr_decay_factor", ")", "\n", "epoch_time_comm_comp", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "scaler", "=", "scaler", ")", "\n", "logger", ".", "info", "(", "\"@ Low-rank Training Epoch: {}, Comm+Comp time cost: {}\"", ".", "format", "(", "epoch", ",", "epoch_time_comm_comp", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, low rank training ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "epoch_time_comm_comp", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "scaler", "=", "scaler", ")", "\n", "logger", ".", "info", "(", "\"@ Low-rank Training Epoch: {}, Comm+Comp time cost: {}\"", ".", "format", "(", "epoch", ",", "epoch_time_comm_comp", ")", ")", "\n", "\n", "\n", "# train for one epoch", "\n", "#train(train_loader, model, criterion, optimizer, epoch, args)", "\n", "\n", "# evaluate on validation set", "\n", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "acc1", "=", "validate", "(", "val_loader", ",", "model_vanilla", ",", "criterion", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "#if args.est_rank:", "\n", "#    if ((epoch+1) % 3 == 0):", "\n", "#        estimate_rank(model, epoch)", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "(", "(", "epoch", "+", "1", ")", "%", "1", "==", "0", ")", ":", "\n", "                ", "if", "epoch", "in", "range", "(", "args", ".", "warmup_epoch", ")", ":", "\n", "                    ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model_vanilla", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "\"checkpoint-epoch{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "\"checkpoint-epoch{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "# if ((epoch+1) % 1 == 0):", "\n", "#     save_checkpoint({", "\n", "#         'epoch': epoch+1,", "\n", "#         'arch': args.arch,", "\n", "#         'state_dict': model.state_dict(),", "\n", "#         'best_acc1': best_acc1,", "\n", "#         'optimizer' : optimizer.state_dict(),", "\n", "#     }, is_best, filename=\"checkpoint-epoch{}.pth.tar\".format(epoch+1))", "\n", "\n", "", "", "", "if", "args", ".", "lr_warmup", ":", "\n", "            ", "scheduler_warmup", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.train": [[554, 624], ["amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.ProgressMeter", "model.train", "time.time", "enumerate", "len", "amp_imagenet_training.AverageMeter.update", "target.cuda.cuda", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "model", "criterion", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "amp_imagenet_training.accuracy", "amp_imagenet_training.AverageMeter.update", "amp_imagenet_training.AverageMeter.update", "amp_imagenet_training.AverageMeter.update", "optimizer.zero_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "scaler.scale().backward", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "scaler.step", "scaler.update", "amp_imagenet_training.AverageMeter.update", "time.time", "images.cuda.cuda", "time.time", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "time.time", "amp_imagenet_training.ProgressMeter.display", "time.time", "scaler.scale", "time.time"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter.display"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "scaler", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "comm_and_comp_time", "=", "0.0", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "forward_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "forward_dur", "=", "time", ".", "time", "(", ")", "-", "forward_start", "\n", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "backward_start", "=", "time", ".", "time", "(", ")", "\n", "#loss.backward()", "\n", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "backward_dur", "=", "time", ".", "time", "(", ")", "-", "backward_start", "\n", "\n", "#optimizer.step()", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "#logger.info(\"Forward cost: {}, Backward cost: {}\".format(forward_dur, backward_dur))", "\n", "comm_and_comp_time", "+=", "forward_dur", "+", "backward_dur", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "#if i > 500:", "\n", "#    break", "\n", "", "", "return", "comm_and_comp_time", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.validate": [[626, 668], ["amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.AverageMeter", "amp_imagenet_training.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "logger.info", "target.cuda.cuda", "model", "criterion", "amp_imagenet_training.accuracy", "amp_imagenet_training.AverageMeter.update", "amp_imagenet_training.AverageMeter.update", "amp_imagenet_training.AverageMeter.update", "amp_imagenet_training.AverageMeter.update", "time.time", "images.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "amp_imagenet_training.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "logger", ".", "info", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.save_checkpoint": [[670, 674], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.adjust_learning_rate": [[717, 740], ["logger.info", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "in", "range", "(", "0", ",", "30", ")", ":", "\n", "        ", "if", "args", ".", "lr_warmup", ":", "\n", "# we adopt the learning rate warmup rule from the Facebook paper: ", "\n", "# https://research.fb.com/wp-content/uploads/2017/06/imagenet1kin1h5.pdf", "\n", "            ", "__pre_computed_lrs", "=", "[", "args", ".", "base_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "base_lr", ")", "/", "5", "*", "i", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "if", "epoch", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "                ", "lr", "=", "__pre_computed_lrs", "[", "epoch", "]", "\n", "", "else", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "", "", "elif", "epoch", "in", "range", "(", "30", ",", "60", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "/", "10", "\n", "", "elif", "epoch", "in", "range", "(", "60", ",", "80", ")", ":", "\n", "        ", "lr", "=", "(", "(", "args", ".", "lr", "/", "10", ")", "/", "10", ")", "\n", "", "elif", "epoch", "in", "range", "(", "80", ",", "90", ")", ":", "\n", "        ", "lr", "=", "(", "(", "args", ".", "lr", "/", "10", ")", "/", "10", "/", "10", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Current Effective lr: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.accuracy": [[742, 757], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.bool_string": [[41, 45], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.add_weight_decay": [[47, 60], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.norm_calculator": [[63, 68], ["enumerate", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "norm_calculator", "(", "model", ")", ":", "\n", "    ", "model_norm", "=", "0", "\n", "for", "param_index", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "model_norm", "+=", "torch", ".", "norm", "(", "param", ")", "**", "2", "\n", "", "return", "torch", ".", "sqrt", "(", "model_norm", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.param_counter": [[70, 75], ["enumerate", "model.named_parameters", "param.numel"], "function", ["None"], ["", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.seed": [[77, 88], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "logger.info"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.decompose_weights": [[90, 190], ["low_rank_model.load_state_dict", "enumerate", "enumerate", "model.state_dict().items", "low_rank_model.state_dict().items", "enumerate", "enumerate", "NotImplementedError", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "model.state_dict().items", "low_rank_model.state_dict().items", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "print", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "v_weight_sliced.t", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "low_rank_model.state_dict", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size", "len", "param.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "param.size", "param.size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size"], "function", ["None"], ["", "def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ",", "args", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "\n", "if", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "54", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "elif", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", "and", "\"classifier.\"", "in", "param_name", "and", "\"classifier.6.\"", "not", "in", "param_name", ":", "\n", "                ", "print", "(", "param_name", ",", "param", ".", "size", "(", ")", ")", "\n", "rank", "=", "min", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "param", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param", ")", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.train": [[193, 226], ["model.train", "enumerate", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "optimizer.zero_grad", "torch.cuda.Event.record", "scaler.scale().backward", "scaler.step", "scaler.update", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "data.to", "target.to", "torch.cuda.amp.autocast", "model", "criterion", "float", "logger.info", "scaler.scale", "torch.cuda.Event.elapsed_time", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scaler", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_timer", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "iter_start", ".", "record", "(", ")", "\n", "with", "autocast", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "#loss.backward()", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "#optimizer.step()", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "iter_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "epoch_timer", "+=", "iter_comp_dur", "\n", "\n", "if", "batch_idx", "%", "40", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]  Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "epoch_timer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.validate": [[228, 264], ["model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "len", "model", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "target.size", "len", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "data.to", "target.to", "len", "model.state_dict", "os.path.isdir", "os.mkdir", "torch.nll_loss", "output.argmax.eq().sum", "torch.log_softmax", "output.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "device", ")", ":", "\n", "    ", "global", "best_acc", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "\n", "", "", "assert", "total", "==", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "acc", ">", "best_acc", ":", "\n", "            ", "logger", ".", "info", "(", "'###### Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_amp_seed{}_best.pth'", ".", "format", "(", "args", ".", "arch", ",", "args", ".", "seed", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_amp.main": [[266, 518], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "main_amp.seed", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "torch.cuda.amp.GradScaler", "logger.info", "torch.CrossEntropyLoss", "torch.SGD", "range", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "ptflops.get_model_complexity_info", "logger.info", "logger.info", "os.path.isdir", "torch.load", "torch.load", "torch.load", "torch.load", "LowRankVGG19().to.load_state_dict", "LowRankVGG19().to.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "time.time", "time.time", "logger.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "resnet_cifar10.ResNet18().to", "ptflops.get_model_complexity_info", "main_amp.param_counter", "main_amp.validate", "exit", "FullRankVGG19().to.parameters", "logger.info", "logger.info", "main_amp.train", "main_amp.norm_calculator", "logger.info", "main_amp.validate", "main_amp.validate", "resnet_cifar10.LowrankResNet18().to", "resnet_cifar10.ResNet18().to", "NotImplementedError", "lowrank_vgg.FullRankVGG19().to", "main_amp.param_counter", "range", "logger.info", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "main_amp.decompose_weights", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.SGD", "main_amp.train", "main_amp.norm_calculator", "logger.info", "logger.info", "main_amp.train", "main_amp.norm_calculator", "logger.info", "range", "torch.pad().data.squeeze", "resnet_cifar10.ResNet18", "lowrank_vgg.LowRankVGG19().to", "lowrank_vgg.FullRankVGG19().to", "NotImplementedError", "float", "LowRankVGG19().to.parameters", "resnet_cifar10.LowrankResNet18", "resnet_cifar10.ResNet18", "lowrank_vgg.FullRankVGG19", "torch.cuda.Event.elapsed_time", "lowrank_vgg.LowRankVGG19", "lowrank_vgg.FullRankVGG19", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowrankResNet18", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18"], ["", "", "", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'resnet18'", ",", "\n", "choices", "=", "model_names", ",", "\n", "help", "=", "'model architecture: '", "+", "\n", "' | '", ".", "join", "(", "model_names", ")", "+", "\n", "' (default: resnet18)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'the rank factor that is going to use in the low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'-re'", ",", "'--resume'", ",", "default", "=", "False", ",", "type", "=", "bool_string", ",", "\n", "help", "=", "'wether or not to resume from a checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eva'", ",", "'--evaluate'", ",", "type", "=", "bool_string", ",", "default", "=", "False", ",", "\n", "help", "=", "'wether or not to evaluate the model after loading the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-cp'", ",", "'--ckpt_path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint/vgg19_best.pth\"", ",", "\n", "help", "=", "'path to the checkpoint to resume.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "        ", "args", ".", "fr_warmup_epoch", "=", "args", ".", "epochs", "\n", "\n", "# let's enable cudnn benchmark", "\n", "", "seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "#model = vgg11_bn().to(device)", "\n", "#model = LowRankVGG().to(device)", "\n", "#model = models.resnet50(num_classes=10).to(device)", "\n", "#model = models.__dict__[args.arch](num_classes=10).to(device)", "\n", "#model = LowRankResNet18().to(device)", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowrankResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "", "", "elif", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"============> Model info: {}\"", ".", "format", "(", "model", ")", ")", "\n", "\n", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "\n", "# switching off the weight decay for batch norm layers", "\n", "#parameters = add_weight_decay(model, 0.0001)", "\n", "#weight_decay = 0.", "\n", "# optimizer = torch.optim.SGD(parameters, args.lr,", "\n", "#                             momentum=args.momentum,", "\n", "#                             #weight_decay=args.weight_decay)", "\n", "#                             weight_decay=weight_decay)", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "0", ")", ":", "\n", "        ", "lowrank_macs", ",", "lowrank_params", "=", "get_model_complexity_info", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "vanilla_macs", ",", "vanilla_params", "=", "get_model_complexity_info", "(", "vanilla_model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "", "", "logger", ".", "info", "(", "\"============> Lowrank Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "model", ",", "param_counter", "(", "model", ")", ",", "lowrank_macs", ")", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"============> Vanilla Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "\n", "vanilla_model", ",", "param_counter", "(", "vanilla_model", ")", ",", "vanilla_macs", ")", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "init_lr", "=", "args", ".", "lr", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ",", "'Error: no checkpoint directory found!'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "#if args.mode == \"lowrank\":", "\n", "#    model.load_state_dict(checkpoint['net'])", "\n", "#elif args.mode == \"vanilla\":", "\n", "#    vanilla_model.load_state_dict(checkpoint['net'])", "\n", "#else:", "\n", "#    raise NotImplementedError(\"Unsupported training mode ...\")", "\n", "\n", "best_acc", "=", "checkpoint", "[", "'acc'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "start_epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "        ", "vanilla_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "vanilla_model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# adjusting lr schedule", "\n", "if", "epoch", "<", "150", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "", "", "", "elif", "(", "epoch", ">=", "150", "and", "epoch", "<", "250", ")", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "", "", "", "elif", "epoch", ">=", "250", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "", "", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "vanilla_model", ",", "criterion", ",", "vanilla_optimizer", ",", "epoch", ",", "\n", "scaler", "=", "scaler", ",", "\n", "device", "=", "device", ")", "\n", "\n", "epoch_norm", "=", "norm_calculator", "(", "vanilla_model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "decompose_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decompose_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "\n", "decompose_start", ".", "record", "(", ")", "\n", "model", "=", "decompose_weights", "(", "model", "=", "vanilla_model", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ",", "\n", "args", "=", "args", ")", "\n", "\n", "decompose_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "float", "(", "decompose_start", ".", "elapsed_time", "(", "decompose_end", ")", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "#optimizer = optim.SGD(model.parameters(), lr=(args.lr/2), momentum=args.momentum, weight_decay=1e-4)", "\n", "#init_lr = args.lr/2", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "scaler", "=", "scaler", ",", "\n", "device", "=", "device", ")", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, low rank training ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "scaler", "=", "scaler", ",", "\n", "device", "=", "device", ")", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n", "", "epoch_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"####### Comp Time Cost for Epoch: {} is {}, os time: {}\"", ".", "format", "(", "epoch", ",", "epoch_time", ",", "epoch_end", "-", "epoch_start", ")", ")", "\n", "\n", "\n", "# eval", "\n", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "vanilla_model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.bool_string": [[43, 47], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.add_weight_decay": [[49, 62], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.norm_calculator": [[65, 70], ["enumerate", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "norm_calculator", "(", "model", ")", ":", "\n", "    ", "model_norm", "=", "0", "\n", "for", "param_index", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "model_norm", "+=", "torch", ".", "norm", "(", "param", ")", "**", "2", "\n", "", "return", "torch", ".", "sqrt", "(", "model_norm", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.param_counter": [[72, 77], ["enumerate", "model.named_parameters", "param.numel"], "function", ["None"], ["", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.decompose_weights": [[79, 174], ["low_rank_model.load_state_dict", "enumerate", "enumerate", "model.state_dict().items", "low_rank_model.state_dict().items", "enumerate", "enumerate", "NotImplementedError", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "model.state_dict().items", "low_rank_model.state_dict().items", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "param.view", "min", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size"], "function", ["None"], ["", "def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ",", "args", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "\n", "if", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "54", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "# alternative implementation: u_weight_alt = torch.mm(u, torch.diag(torch.sqrt(s)))", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "# alternative implementation: v_weight_alt = torch.mm(torch.diag(torch.sqrt(s)), v.t())", "\n", "# sanity check: print(\"dist u u_alt:{}, dist v v_alt: {}\".format(torch.dist(u_weight, u_weight_alt), torch.dist(v_weight.t(), v_weight_alt)))", "\n", "# print(\"## v weight size: {}, v weight alt size: {}\".format(v_weight.size(), v_weight_alt.size()))", "\n", "#print(\"layer indeix: {}, dist u u_alt:{}, dist v v_alt: {}\".format(item_index, torch.dist(u_weight, u_weight_alt), torch.dist(v_weight.t(), v_weight_alt)))", "\n", "#print(\"layer indeix: {}, dist u u_alt:{}, dist v v_alt: {}\".format(item_index, torch.equal(u_weight, u_weight_alt), torch.equal(v_weight.t(), v_weight_alt)))", "\n", "#print(\"dist param impl: {}, dist param impl alt: {}\".format(torch.dist(param_reshaped, torch.mm(u_weight_alt, v_weight_alt)), torch.dist(param_reshaped, torch.mm(u_weight, v_weight.t()))))", "\n", "#print(\"dist: {}\".format(torch.dist(torch.mm(u_weight_alt, v_weight_alt), torch.mm(u_weight, v_weight.t()))))", "\n", "\n", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "# alternative implementation: u_weight_alt = torch.mm(u, torch.diag(torch.sqrt(s)))", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "# alternative implementation: v_weight_alt = torch.mm(torch.diag(torch.sqrt(s)), v.t())", "\n", "# sanity check: print(\"dist u u_alt:{}, dist v v_alt: {}\".format(torch.dist(u_weight, u_weight_alt), torch.dist(v_weight.t(), v_weight_alt))", "\n", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.train": [[177, 228], ["model.train", "enumerate", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "optimizer.zero_grad", "torch.cuda.Event.record", "model", "criterion", "criterion.backward", "optimizer.step", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "data.to", "target.to", "float", "float", "logger.info", "float", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_total_time", "=", "0.0", "\n", "epoch_comp_time", "=", "0.0", "\n", "epoch_data_time", "=", "0.0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "comp_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "data_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "data_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "iter_start", ".", "record", "(", ")", "\n", "data_start", ".", "record", "(", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "data_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_data_dur", "=", "float", "(", "data_start", ".", "elapsed_time", "(", "data_end", ")", ")", "/", "1000.0", "\n", "epoch_data_time", "+=", "iter_data_dur", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "comp_start", ".", "record", "(", ")", "# only contain comp time", "\n", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "comp_end", ".", "record", "(", ")", "# only contain comp time", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "comp_start", ".", "elapsed_time", "(", "comp_end", ")", ")", "/", "1000.0", "\n", "epoch_comp_time", "+=", "iter_comp_dur", "\n", "\n", "if", "batch_idx", "%", "40", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]  Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "iter_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_total_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "epoch_total_time", "+=", "iter_total_dur", "\n", "\n", "", "return", "{", "\"total_time\"", ":", "epoch_total_time", ",", "\n", "\"comp_time\"", ":", "epoch_comp_time", ",", "\n", "\"data_time\"", ":", "epoch_data_time", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate": [[230, 268], ["model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "len", "model", "torch.nll_loss().item", "model.argmax", "output.argmax.eq().sum().item", "target.size", "len", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "data.to", "target.to", "model.state_dict", "os.path.isdir", "os.mkdir", "torch.nll_loss", "output.argmax.eq().sum", "torch.log_softmax", "output.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "device", ")", ":", "\n", "    ", "global", "best_acc", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "\n", "", "", "assert", "total", "==", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "acc", ")", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "acc", ">", "best_acc", ":", "\n", "            ", "logger", ".", "info", "(", "'###### Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_best_lth.pth'", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.seed": [[270, 281], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "logger.info"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "", "", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.main": [[283, 497], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "logger.info", "main_lth.seed", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "torch.CrossEntropyLoss", "torch.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "main_lth.norm_calculator", "logger.info", "range", "NotImplementedError", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "ptflops.get_model_complexity_info", "ptflops.get_model_complexity_info", "logger.info", "os.path.isdir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "LowrankVGG19LTH().to.load_state_dict", "LowrankVGG19LTH().to.parameters", "VGG19LTH().to.parameters", "logger.info", "main_lth.norm_calculator", "logger.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "main_lth.param_counter", "main_lth.param_counter", "main_lth.validate", "exit", "logger.info", "logger.info", "main_lth.train", "main_lth.validate", "main_lth.validate", "lowrank_vgg.VGG19LTH().to", "range", "logger.info", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "main_lth.decompose_weights", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.SGD", "main_lth.train", "logger.info", "main_lth.train", "range", "torch.pad().data.squeeze", "lowrank_vgg.LowrankVGG19LTH().to", "lowrank_vgg.VGG19LTH().to", "NotImplementedError", "float", "LowrankVGG19LTH().to.parameters", "lowrank_vgg.VGG19LTH", "torch.cuda.Event.elapsed_time", "lowrank_vgg.LowrankVGG19LTH", "lowrank_vgg.VGG19LTH", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.main_lth.validate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'resnet18'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "160", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'the rank factor that is going to use in the low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'-re'", ",", "'--resume'", ",", "default", "=", "False", ",", "type", "=", "bool_string", ",", "\n", "help", "=", "'wether or not to resume from a checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eva'", ",", "'--evaluate'", ",", "type", "=", "bool_string", ",", "default", "=", "False", ",", "\n", "help", "=", "'wether or not to evaluate the model after loading the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-cp'", ",", "'--ckpt_path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint/vgg19_best.pth\"", ",", "\n", "help", "=", "'path to the checkpoint to resume.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "logger", ".", "info", "(", "\"#### Args: {}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "# let's enable cudnn benchmark", "\n", "seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "# if args.mode == \"vanilla\":", "\n", "#     model = ResNet18().to(device)", "\n", "# elif args.mode == \"lowrank\":", "\n", "#     model = LowrankResNet18().to(device)", "\n", "#     vanilla_model = ResNet18().to(device)", "\n", "# else:", "\n", "        ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "", "elif", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "VGG19LTH", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowrankVGG19LTH", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "VGG19LTH", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "\n", "", "", "with", "torch", ".", "cuda", ".", "device", "(", "0", ")", ":", "\n", "        ", "lowrank_macs", ",", "lowrank_params", "=", "get_model_complexity_info", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "vanilla_macs", ",", "vanilla_params", "=", "get_model_complexity_info", "(", "vanilla_model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "", "logger", ".", "info", "(", "\"============> Lowrank Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "model", ",", "param_counter", "(", "model", ")", ",", "lowrank_macs", ")", ")", "\n", "logger", ".", "info", "(", "\"============> Vanilla Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "vanilla_model", ",", "param_counter", "(", "vanilla_model", ")", ",", "vanilla_macs", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ",", "'Error: no checkpoint directory found!'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "best_acc", "=", "checkpoint", "[", "'acc'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "start_epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "vanilla_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "vanilla_model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "# switching off the weight decay for batch norm layers", "\n", "#parameters = add_weight_decay(model, 0.0001)", "\n", "#weight_decay = 0.", "\n", "# optimizer = torch.optim.SGD(parameters, args.lr,", "\n", "#                             momentum=args.momentum,", "\n", "#                             #weight_decay=args.weight_decay)", "\n", "#                             weight_decay=weight_decay)", "\n", "init_lr", "=", "args", ".", "lr", "\n", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "0", ",", "epoch_norm", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "# adjusting lr schedule", "\n", "        ", "if", "epoch", "<", "80", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "\n", "", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "", "", "elif", "(", "epoch", ">=", "80", "and", "epoch", "<", "120", ")", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "\n", "", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "", "", "elif", "epoch", ">=", "120", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "vanilla_model", ",", "criterion", ",", "vanilla_optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "decompose_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decompose_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "decompose_start", ".", "record", "(", ")", "\n", "model", "=", "decompose_weights", "(", "model", "=", "vanilla_model", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ",", "\n", "args", "=", "args", ")", "\n", "decompose_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "float", "(", "decompose_start", ".", "elapsed_time", "(", "decompose_end", ")", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "#optimizer = optim.SGD(model.parameters(), lr=(args.lr/2), momentum=args.momentum, weight_decay=1e-4)", "\n", "#init_lr = args.lr/2", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, low rank training ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"####### Time Cost for Epoch: {} ===> Total: {}, Comp: {}, Data: {}\"", ".", "format", "(", "\n", "epoch", ",", "epoch_time", "[", "\"total_time\"", "]", ",", "\n", "epoch_time", "[", "\"comp_time\"", "]", ",", "\n", "epoch_time", "[", "\"data_time\"", "]", ")", ")", "\n", "\n", "# eval", "\n", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "# validate(test_loader, model, criterion, epoch, device)", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "vanilla_model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "\n", "\n", "", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowRankVGG.__init__": [[33, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.LowRankVGG.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(64, 128, 3, 1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv3 = nn.Conv2d(128, 256, 3, 1, padding=1, bias=False)", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv4 = nn.Conv2d(256, 256, 3, 1, bias=False)", "\n", "self", ".", "conv4_u", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4_v", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv5 = nn.Conv2d(256, 512, 3, 1, bias=False)", "\n", "self", ".", "conv5_u", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv6 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv6_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv6_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv7 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv7_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv7_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv8 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv8_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv8_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "max_pooling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "#self.classifier = nn.Sequential(", "\n", "#    nn.Dropout(),", "\n", "#    nn.Linear(512, 128),", "\n", "#    nn.Linear(128, 512),", "\n", "#    nn.ReLU(True),", "\n", "#    nn.Dropout(),", "\n", "#    nn.Linear(512, 128),", "\n", "#    nn.Linear(128, 512),", "\n", "#    nn.ReLU(True),", "\n", "#    nn.Linear(512, num_classes),", "\n", "#)", "\n", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowRankVGG.forward": [[104, 154], ["lowrank_vgg.LowRankVGG.conv1", "lowrank_vgg.LowRankVGG.batch_norm1", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv2_u", "lowrank_vgg.LowRankVGG.conv2_v", "lowrank_vgg.LowRankVGG.batch_norm2", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv3_u", "lowrank_vgg.LowRankVGG.conv3_v", "lowrank_vgg.LowRankVGG.batch_norm3", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.conv4_u", "lowrank_vgg.LowRankVGG.conv4_v", "lowrank_vgg.LowRankVGG.batch_norm4", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv5_u", "lowrank_vgg.LowRankVGG.conv5_v", "lowrank_vgg.LowRankVGG.batch_norm5", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.conv6_u", "lowrank_vgg.LowRankVGG.conv6_v", "lowrank_vgg.LowRankVGG.batch_norm6", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv7_u", "lowrank_vgg.LowRankVGG.conv7_v", "lowrank_vgg.LowRankVGG.batch_norm7", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.conv8_u", "lowrank_vgg.LowRankVGG.conv8_v", "lowrank_vgg.LowRankVGG.batch_norm8", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.view", "lowrank_vgg.LowRankVGG.classifier", "lowrank_vgg.LowRankVGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2_v", "(", "x", ")", "\n", "#x = self.conv2(x)", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3_v", "(", "x", ")", "\n", "#x = self.conv3(x)", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv6_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv7_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv8_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.FullRankVGG.__init__": [[160, 195], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.FullRankVGG.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FullRankVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.FullRankVGG.forward": [[196, 244], ["lowrank_vgg.FullRankVGG.conv1", "lowrank_vgg.FullRankVGG.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv2", "lowrank_vgg.FullRankVGG.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv3", "lowrank_vgg.FullRankVGG.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG.conv4", "lowrank_vgg.FullRankVGG.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv5", "lowrank_vgg.FullRankVGG.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG.conv6", "lowrank_vgg.FullRankVGG.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv7", "lowrank_vgg.FullRankVGG.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG.conv8", "lowrank_vgg.FullRankVGG.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.view", "lowrank_vgg.FullRankVGG.classifier", "lowrank_vgg.FullRankVGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "#x = self.max_pooling(x)", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "#print(\"after conv1 x size: {}\".format(x.size()))", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "#print(\"after conv2 x size: {}\".format(x.size()))", "\n", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#print(\"after conv3 x size: {}\".format(x.size()))", "\n", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.FullRankVGG19.__init__": [[251, 330], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.FullRankVGG19.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FullRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#self.conv1 = nn.Conv2d(3, 64, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#self.conv2 = nn.Conv2d(64, 64, 3, 1, padding=1, bias=True)", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "#self.conv3 = nn.Conv2d(64, 128, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "#self.conv4 = nn.Conv2d(128, 128, 3, 1, padding=1, bias=True)", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv5 = nn.Conv2d(128, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv6 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv7 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv8 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv9 = nn.Conv2d(256, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv15", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.FullRankVGG19.forward": [[331, 393], ["lowrank_vgg.FullRankVGG19.conv1", "lowrank_vgg.FullRankVGG19.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv2", "lowrank_vgg.FullRankVGG19.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv3", "lowrank_vgg.FullRankVGG19.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv4", "lowrank_vgg.FullRankVGG19.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv5", "lowrank_vgg.FullRankVGG19.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv6", "lowrank_vgg.FullRankVGG19.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv7", "lowrank_vgg.FullRankVGG19.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv8", "lowrank_vgg.FullRankVGG19.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv9", "lowrank_vgg.FullRankVGG19.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv10", "lowrank_vgg.FullRankVGG19.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv11", "lowrank_vgg.FullRankVGG19.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv12", "lowrank_vgg.FullRankVGG19.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv13", "lowrank_vgg.FullRankVGG19.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv14", "lowrank_vgg.FullRankVGG19.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv15", "lowrank_vgg.FullRankVGG19.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv16", "lowrank_vgg.FullRankVGG19.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.view", "lowrank_vgg.FullRankVGG19.classifier", "lowrank_vgg.FullRankVGG19.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv10", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv11", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv12", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv14", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv15", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv16", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowRankVGG19.__init__": [[604, 711], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.LowRankVGG19.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "int", "int", "int", "int", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2_u = nn.Conv2d(64, int(64/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv2_v = nn.Conv2d(int(64/LR_FACOR), 64, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv3_u = nn.Conv2d(64, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv3_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv4_u = nn.Conv2d(128, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv4_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv5_u = nn.Conv2d(128, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv5_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv6_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv6_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv7_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv7_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv8_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv8_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv9_u = nn.Conv2d(256, int(512/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv9_v = nn.Conv2d(int(512/LR_FACOR), 512, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowRankVGG19.forward": [[712, 800], ["lowrank_vgg.LowRankVGG19.conv1", "lowrank_vgg.LowRankVGG19.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv2", "lowrank_vgg.LowRankVGG19.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv3", "lowrank_vgg.LowRankVGG19.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv4", "lowrank_vgg.LowRankVGG19.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv5", "lowrank_vgg.LowRankVGG19.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv6", "lowrank_vgg.LowRankVGG19.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv7", "lowrank_vgg.LowRankVGG19.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv8", "lowrank_vgg.LowRankVGG19.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv9", "lowrank_vgg.LowRankVGG19.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv10_v", "lowrank_vgg.LowRankVGG19.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv11_v", "lowrank_vgg.LowRankVGG19.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv12_v", "lowrank_vgg.LowRankVGG19.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv13_v", "lowrank_vgg.LowRankVGG19.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv14_v", "lowrank_vgg.LowRankVGG19.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv15_v", "lowrank_vgg.LowRankVGG19.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv16_v", "lowrank_vgg.LowRankVGG19.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.view", "lowrank_vgg.LowRankVGG19.classifier", "lowrank_vgg.LowRankVGG19.conv10_u", "lowrank_vgg.LowRankVGG19.conv11_u", "lowrank_vgg.LowRankVGG19.conv12_u", "lowrank_vgg.LowRankVGG19.conv13_u", "lowrank_vgg.LowRankVGG19.conv14_u", "lowrank_vgg.LowRankVGG19.conv15_u", "lowrank_vgg.LowRankVGG19.conv16_u", "lowrank_vgg.LowRankVGG19.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n", "#x = self.conv11(x)", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv12_v", "(", "self", ".", "conv12_u", "(", "x", ")", ")", "\n", "#x = self.conv12(x)", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowRankVGG19NonSquare.__init__": [[806, 913], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.LowRankVGG19NonSquare.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "int", "int", "int", "int", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG19NonSquare", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2_u = nn.Conv2d(64, int(64/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv2_v = nn.Conv2d(int(64/LR_FACOR), 64, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv3_u = nn.Conv2d(64, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv3_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv4_u = nn.Conv2d(128, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv4_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv5_u = nn.Conv2d(128, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv5_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv6_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv6_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv7_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv7_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv8_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv8_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv9_u = nn.Conv2d(256, int(512/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv9_v = nn.Conv2d(int(512/LR_FACOR), 512, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowRankVGG19NonSquare.forward": [[914, 1002], ["lowrank_vgg.LowRankVGG19NonSquare.conv1", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv2", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv3", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv4", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv5", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv6", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv7", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv8", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv9", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv10_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv11_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv12_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv13_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv14_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv15_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv16_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.view", "lowrank_vgg.LowRankVGG19NonSquare.classifier", "lowrank_vgg.LowRankVGG19NonSquare.conv10_u", "lowrank_vgg.LowRankVGG19NonSquare.conv11_u", "lowrank_vgg.LowRankVGG19NonSquare.conv12_u", "lowrank_vgg.LowRankVGG19NonSquare.conv13_u", "lowrank_vgg.LowRankVGG19NonSquare.conv14_u", "lowrank_vgg.LowRankVGG19NonSquare.conv15_u", "lowrank_vgg.LowRankVGG19NonSquare.conv16_u", "lowrank_vgg.LowRankVGG19NonSquare.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n", "#x = self.conv11(x)", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv12_v", "(", "self", ".", "conv12_u", "(", "x", ")", ")", "\n", "#x = self.conv12(x)", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.VGG19LTH.__init__": [[1010, 1073], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "lowrank_vgg.VGG19LTH.modules", "isinstance", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG19LTH", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv9 = nn.Conv2d(256, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "\n", "self", ".", "conv13", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv15", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "#self.max_pooling5 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "#if isinstance(m, nn.Conv2d):", "\n", "#    n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "#    m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", "=", "torch", ".", "rand", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "m", ".", "bias", ".", "data", "=", "torch", ".", "zeros_like", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.VGG19LTH.forward": [[1075, 1138], ["lowrank_vgg.VGG19LTH.conv1", "lowrank_vgg.VGG19LTH.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv2", "lowrank_vgg.VGG19LTH.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv3", "lowrank_vgg.VGG19LTH.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv4", "lowrank_vgg.VGG19LTH.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv5", "lowrank_vgg.VGG19LTH.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv6", "lowrank_vgg.VGG19LTH.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv7", "lowrank_vgg.VGG19LTH.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv8", "lowrank_vgg.VGG19LTH.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv9", "lowrank_vgg.VGG19LTH.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv10", "lowrank_vgg.VGG19LTH.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv11", "lowrank_vgg.VGG19LTH.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv12", "lowrank_vgg.VGG19LTH.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv13", "lowrank_vgg.VGG19LTH.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv14", "lowrank_vgg.VGG19LTH.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv15", "lowrank_vgg.VGG19LTH.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv16", "lowrank_vgg.VGG19LTH.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.view", "lowrank_vgg.VGG19LTH.classifier", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "lowrank_vgg.VGG19LTH.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv10", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv11", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv12", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv14", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv15", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv16", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowrankVGG19LTH.__init__": [[1145, 1221], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "lowrank_vgg.LowrankVGG19LTH.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "isinstance", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowrankVGG19LTH", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "#self.max_pooling5 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", "=", "torch", ".", "rand", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "m", ".", "bias", ".", "data", "=", "torch", ".", "zeros_like", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.LowrankVGG19LTH.forward": [[1222, 1312], ["lowrank_vgg.LowrankVGG19LTH.conv1", "lowrank_vgg.LowrankVGG19LTH.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv2", "lowrank_vgg.LowrankVGG19LTH.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv3", "lowrank_vgg.LowrankVGG19LTH.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv4", "lowrank_vgg.LowrankVGG19LTH.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv5", "lowrank_vgg.LowrankVGG19LTH.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv6", "lowrank_vgg.LowrankVGG19LTH.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv7", "lowrank_vgg.LowrankVGG19LTH.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv8", "lowrank_vgg.LowrankVGG19LTH.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv9", "lowrank_vgg.LowrankVGG19LTH.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv10_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv11_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv12_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv13_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv14_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv15_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv16_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.view", "lowrank_vgg.LowrankVGG19LTH.classifier", "lowrank_vgg.LowrankVGG19LTH.conv10_u", "lowrank_vgg.LowrankVGG19LTH.conv11_u", "lowrank_vgg.LowrankVGG19LTH.conv12_u", "lowrank_vgg.LowrankVGG19LTH.conv13_u", "lowrank_vgg.LowrankVGG19LTH.conv14_u", "lowrank_vgg.LowrankVGG19LTH.conv15_u", "lowrank_vgg.LowrankVGG19LTH.conv16_u", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "lowrank_vgg.LowrankVGG19LTH.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n", "#x = self.conv11(x)", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv12_v", "(", "self", ".", "conv12_u", "(", "x", ")", ")", "\n", "#x = self.conv12(x)", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#x = F.max_pool2d(x, 2, 2)", "\n", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.uniform": [[12, 16], ["isinstance", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["def", "uniform", "(", "w", ")", ":", "\n", "    ", "if", "isinstance", "(", "w", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "w", ".", "weight", ".", "data", "=", "torch", ".", "rand", "(", "w", ".", "weight", ".", "data", ".", "shape", ")", "\n", "w", ".", "bias", ".", "data", "=", "torch", ".", "zeros_like", "(", "w", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.kaiming_normal": [[17, 20], ["isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "kaiming_normal", "(", "w", ")", ":", "\n", "    ", "if", "isinstance", "(", "w", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "w", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.lowrank_vgg.param_counter": [[22, 27], ["enumerate", "model.named_parameters", "p.numel"], "function", ["None"], ["", "", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "param_counter", "=", "0", "\n", "for", "p_index", ",", "(", "p_name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "param_counter", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "param_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.warmup_scheduler.scheduler.GradualWarmupScheduler.__init__": [[16, 24], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater thant or equal to 1.'", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.warmup_scheduler.scheduler.GradualWarmupScheduler.get_lr": [[25, 38], ["scheduler.GradualWarmupScheduler.after_scheduler.get_lr", "float"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "self", ".", "finished", "=", "True", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "if", "self", ".", "multiplier", "==", "1.0", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "total_epoch", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.warmup_scheduler.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau": [[39, 52], ["zip", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step"], ["", "", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "if", "epoch", "!=", "0", "else", "1", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.warmup_scheduler.scheduler.GradualWarmupScheduler.step": [[53, 64], ["type", "scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "super().step", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.warmup_scheduler.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.VBMF": [[7, 119], ["numpy.linalg.svd", "numpy.sqrt", "numpy.sum", "numpy.multiply", "numpy.zeros", "numpy.zeros", "numpy.sqrt", "numpy.sqrt", "numpy.divide", "numpy.divide", "numpy.sum", "scipy.optimize.minimize_scalar", "print", "numpy.ones", "numpy.ones", "numpy.multiply", "numpy.divide", "numpy.multiply", "numpy.diag", "numpy.multiply", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.sum", "numpy.multiply", "numpy.multiply", "numpy.log", "numpy.log", "numpy.multiply"], "function", ["None"], ["def", "VBMF", "(", "Y", ",", "cacb", ",", "sigma2", "=", "None", ",", "H", "=", "None", ")", ":", "\n", "    ", "\"\"\"Implementation of the analytical solution to Variational Bayes Matrix Factorization.\n\n    This function can be used to calculate the analytical solution to VBMF. \n    This is based on the paper and MatLab code by Nakajima et al.:\n    \"Global analytic solution of fully-observed variational Bayesian matrix factorization.\"\n\n    Notes\n    -----\n        If sigma2 is unspecified, it is estimated by minimizing the free energy.\n        If H is unspecified, it is set to the smallest of the sides of the input Y.\n        To estimate cacb, use the function EVBMF().\n\n    Attributes\n    ----------\n    Y : numpy-array\n        Input matrix that is to be factorized. Y has shape (L,M), where L<=M.\n        \n    cacb : int\n        Product of the prior variances of the matrices that factorize the input.\n    \n    sigma2 : int or None (default=None)\n        Variance of the noise on Y.\n        \n    H : int or None (default = None)\n        Maximum rank of the factorized matrices.\n        \n    Returns\n    -------\n    U : numpy-array\n        Left-singular vectors. \n        \n    S : numpy-array\n        Diagonal matrix of singular values.\n        \n    V : numpy-array\n        Right-singular vectors.\n        \n    post : dictionary\n        Dictionary containing the computed posterior values.\n        \n        \n    References\n    ----------\n    .. [1] Nakajima, Shinichi, et al. \"Global analytic solution of fully-observed variational Bayesian matrix factorization.\" Journal of Machine Learning Research 14.Jan (2013): 1-37.\n    \n    .. [2] Nakajima, Shinichi, et al. \"Perfect dimensionality recovery by variational Bayesian PCA.\" Advances in Neural Information Processing Systems. 2012.\n    \"\"\"", "\n", "\n", "L", ",", "M", "=", "Y", ".", "shape", "#has to be L<=M", "\n", "\n", "if", "H", "is", "None", ":", "\n", "        ", "H", "=", "L", "\n", "\n", "#SVD of the input matrix, max rank of H", "\n", "", "U", ",", "s", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "Y", ")", "\n", "U", "=", "U", "[", ":", ",", ":", "H", "]", "\n", "s", "=", "s", "[", ":", "H", "]", "\n", "V", "=", "V", "[", ":", "H", "]", ".", "T", "\n", "\n", "#Calculate residual", "\n", "residual", "=", "0.", "\n", "if", "H", "<", "L", ":", "\n", "        ", "residual", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y", "**", "2", ")", "-", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "\n", "\n", "#Estimation of the variance when sigma2 is unspecified", "\n", "", "if", "sigma2", "is", "None", ":", "\n", "        ", "upper_bound", "=", "(", "np", ".", "sum", "(", "s", "**", "2", ")", "+", "residual", ")", "/", "(", "L", "+", "M", ")", "\n", "\n", "if", "L", "==", "H", ":", "\n", "            ", "lower_bound", "=", "s", "[", "-", "1", "]", "**", "2", "/", "M", "\n", "", "else", ":", "\n", "            ", "lower_bound", "=", "residual", "/", "(", "(", "L", "-", "H", ")", "*", "M", ")", "\n", "\n", "", "sigma2_opt", "=", "minimize_scalar", "(", "VBsigma2", ",", "args", "=", "(", "L", ",", "M", ",", "cacb", ",", "s", ",", "residual", ")", ",", "bounds", "=", "[", "lower_bound", ",", "upper_bound", "]", ",", "method", "=", "'Bounded'", ")", "\n", "sigma2", "=", "sigma2_opt", ".", "x", "\n", "print", "(", "\"Estimated sigma2: \"", ",", "sigma2", ")", "\n", "\n", "#Threshold gamma term", "\n", "#Formula above (21) from [1]", "\n", "", "thresh_term", "=", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "/", "2", "\n", "threshold", "=", "np", ".", "sqrt", "(", "sigma2", "*", "(", "thresh_term", "+", "np", ".", "sqrt", "(", "thresh_term", "**", "2", "-", "L", "*", "M", ")", ")", ")", "\n", "\n", "#Number of singular values where gamma>threshold", "\n", "pos", "=", "np", ".", "sum", "(", "s", ">", "threshold", ")", "\n", "\n", "#Formula (10) from [2]", "\n", "d", "=", "np", ".", "multiply", "(", "s", "[", ":", "pos", "]", ",", "\n", "1", "-", "np", ".", "multiply", "(", "sigma2", "/", "(", "2", "*", "s", "[", ":", "pos", "]", "**", "2", ")", ",", "\n", "L", "+", "M", "+", "np", ".", "sqrt", "(", "(", "M", "-", "L", ")", "**", "2", "+", "4", "*", "s", "[", ":", "pos", "]", "**", "2", "/", "cacb", "**", "2", ")", ")", ")", "\n", "\n", "#Computation of the posterior", "\n", "post", "=", "{", "}", "\n", "zeta", "=", "sigma2", "/", "(", "2", "*", "L", "*", "M", ")", "*", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", "-", "np", ".", "sqrt", "(", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "**", "2", "-", "4", "*", "L", "*", "M", ")", ")", "\n", "post", "[", "'ma'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'mb'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'sa2'", "]", "=", "cacb", "*", "(", "1", "-", "L", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "post", "[", "'sb2'", "]", "=", "cacb", "*", "(", "1", "-", "M", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "\n", "delta", "=", "cacb", "/", "sigma2", "*", "(", "s", "[", ":", "pos", "]", "-", "d", "-", "L", "*", "sigma2", "/", "s", "[", ":", "pos", "]", ")", "\n", "post", "[", "'ma'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "multiply", "(", "d", ",", "delta", ")", ")", "\n", "post", "[", "'mb'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "d", ",", "delta", ")", ")", "\n", "post", "[", "'sa2'", "]", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", "*", "delta", ",", "s", "[", ":", "pos", "]", ")", "\n", "post", "[", "'sb2'", "]", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", ",", "np", ".", "multiply", "(", "delta", ",", "s", "[", ":", "pos", "]", ")", ")", "\n", "post", "[", "'sigma2'", "]", "=", "sigma2", "\n", "post", "[", "'F'", "]", "=", "0.5", "*", "(", "L", "*", "M", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "sigma2", ")", "+", "(", "residual", "+", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "/", "sigma2", "-", "(", "L", "+", "M", ")", "*", "H", "\n", "+", "np", ".", "sum", "(", "M", "*", "np", ".", "log", "(", "cacb", "/", "post", "[", "'sa2'", "]", ")", "+", "L", "*", "np", ".", "log", "(", "cacb", "/", "post", "[", "'sb2'", "]", ")", "\n", "+", "(", "post", "[", "'ma'", "]", "**", "2", "+", "M", "*", "post", "[", "'sa2'", "]", ")", "/", "cacb", "+", "(", "post", "[", "'mb'", "]", "**", "2", "+", "L", "*", "post", "[", "'sb2'", "]", ")", "/", "cacb", "\n", "+", "(", "-", "2", "*", "np", ".", "multiply", "(", "np", ".", "multiply", "(", "post", "[", "'ma'", "]", ",", "post", "[", "'mb'", "]", ")", ",", "s", ")", "\n", "+", "np", ".", "multiply", "(", "post", "[", "'ma'", "]", "**", "2", "+", "M", "*", "post", "[", "'sa2'", "]", ",", "post", "[", "'mb'", "]", "**", "2", "+", "L", "*", "post", "[", "'sb2'", "]", ")", ")", "/", "sigma2", ")", ")", "\n", "\n", "return", "U", "[", ":", ",", ":", "pos", "]", ",", "np", ".", "diag", "(", "d", ")", ",", "V", "[", ":", ",", ":", "pos", "]", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.VBsigma2": [[121, 150], ["len", "numpy.sqrt", "numpy.sum", "numpy.multiply", "numpy.zeros", "numpy.zeros", "numpy.sqrt", "numpy.sqrt", "numpy.divide", "numpy.divide", "numpy.ones", "numpy.ones", "numpy.multiply", "numpy.divide", "numpy.multiply", "numpy.multiply", "numpy.sqrt", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.sum", "numpy.multiply", "numpy.multiply", "numpy.log", "numpy.log", "numpy.multiply"], "function", ["None"], ["", "def", "VBsigma2", "(", "sigma2", ",", "L", ",", "M", ",", "cacb", ",", "s", ",", "residual", ")", ":", "\n", "    ", "H", "=", "len", "(", "s", ")", "\n", "\n", "thresh_term", "=", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "/", "2", "\n", "threshold", "=", "np", ".", "sqrt", "(", "sigma2", "*", "(", "thresh_term", "+", "np", ".", "sqrt", "(", "thresh_term", "**", "2", "-", "L", "*", "M", ")", ")", ")", "\n", "pos", "=", "np", ".", "sum", "(", "s", ">", "threshold", ")", "\n", "\n", "d", "=", "np", ".", "multiply", "(", "s", "[", ":", "pos", "]", ",", "\n", "1", "-", "np", ".", "multiply", "(", "sigma2", "/", "(", "2", "*", "s", "[", ":", "pos", "]", "**", "2", ")", ",", "\n", "L", "+", "M", "+", "np", ".", "sqrt", "(", "(", "M", "-", "L", ")", "**", "2", "+", "4", "*", "s", "[", ":", "pos", "]", "**", "2", "/", "cacb", "**", "2", ")", ")", ")", "\n", "\n", "zeta", "=", "sigma2", "/", "(", "2", "*", "L", "*", "M", ")", "*", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", "-", "np", ".", "sqrt", "(", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "**", "2", "-", "4", "*", "L", "*", "M", ")", ")", "\n", "post_ma", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post_mb", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post_sa2", "=", "cacb", "*", "(", "1", "-", "L", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "post_sb2", "=", "cacb", "*", "(", "1", "-", "M", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "\n", "delta", "=", "cacb", "/", "sigma2", "*", "(", "s", "[", ":", "pos", "]", "-", "d", "-", "L", "*", "sigma2", "/", "s", "[", ":", "pos", "]", ")", "\n", "post_ma", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "multiply", "(", "d", ",", "delta", ")", ")", "\n", "post_mb", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "d", ",", "delta", ")", ")", "\n", "post_sa2", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", "*", "delta", ",", "s", "[", ":", "pos", "]", ")", "\n", "post_sb2", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", ",", "np", ".", "multiply", "(", "delta", ",", "s", "[", ":", "pos", "]", ")", ")", "\n", "\n", "F", "=", "0.5", "*", "(", "L", "*", "M", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "sigma2", ")", "+", "(", "residual", "+", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "/", "sigma2", "-", "(", "L", "+", "M", ")", "*", "H", "\n", "+", "np", ".", "sum", "(", "M", "*", "np", ".", "log", "(", "cacb", "/", "post_sa2", ")", "+", "L", "*", "np", ".", "log", "(", "cacb", "/", "post_sb2", ")", "\n", "+", "(", "post_ma", "**", "2", "+", "M", "*", "post_sa2", ")", "/", "cacb", "+", "(", "post_mb", "**", "2", "+", "L", "*", "post_sb2", ")", "/", "cacb", "\n", "+", "(", "-", "2", "*", "np", ".", "multiply", "(", "np", ".", "multiply", "(", "post_ma", ",", "post_mb", ")", ",", "s", ")", "\n", "+", "np", ".", "multiply", "(", "post_ma", "**", "2", "+", "M", "*", "post_sa2", ",", "post_mb", "**", "2", "+", "L", "*", "post_sb2", ")", ")", "/", "sigma2", ")", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.EVBMF": [[153, 260], ["numpy.linalg.svd", "numpy.sqrt", "numpy.sum", "numpy.multiply", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.multiply", "numpy.sqrt", "numpy.sqrt", "numpy.divide", "numpy.divide", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.max", "scipy.optimize.minimize_scalar", "numpy.multiply", "numpy.sqrt", "numpy.multiply", "numpy.divide", "numpy.multiply", "numpy.diag", "int", "numpy.sqrt", "numpy.sqrt", "numpy.divide", "numpy.multiply", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.min", "numpy.sum", "numpy.divide", "numpy.mean", "numpy.log", "numpy.sum", "numpy.ceil", "numpy.divide", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "EVBMF", "(", "Y", ",", "sigma2", "=", "None", ",", "H", "=", "None", ")", ":", "\n", "    ", "\"\"\"Implementation of the analytical solution to Empirical Variational Bayes Matrix Factorization.\n\n    This function can be used to calculate the analytical solution to empirical VBMF. \n    This is based on the paper and MatLab code by Nakajima et al.:\n    \"Global analytic solution of fully-observed variational Bayesian matrix factorization.\"\n\n    Notes\n    -----\n        If sigma2 is unspecified, it is estimated by minimizing the free energy.\n        If H is unspecified, it is set to the smallest of the sides of the input Y.\n\n    Attributes\n    ----------\n    Y : numpy-array\n        Input matrix that is to be factorized. Y has shape (L,M), where L<=M.\n    \n    sigma2 : int or None (default=None)\n        Variance of the noise on Y.\n        \n    H : int or None (default = None)\n        Maximum rank of the factorized matrices.\n        \n    Returns\n    -------\n    U : numpy-array\n        Left-singular vectors. \n        \n    S : numpy-array\n        Diagonal matrix of singular values.\n        \n    V : numpy-array\n        Right-singular vectors.\n        \n    post : dictionary\n        Dictionary containing the computed posterior values.\n        \n        \n    References\n    ----------\n    .. [1] Nakajima, Shinichi, et al. \"Global analytic solution of fully-observed variational Bayesian matrix factorization.\" Journal of Machine Learning Research 14.Jan (2013): 1-37.\n    \n    .. [2] Nakajima, Shinichi, et al. \"Perfect dimensionality recovery by variational Bayesian PCA.\" Advances in Neural Information Processing Systems. 2012.     \n    \"\"\"", "\n", "L", ",", "M", "=", "Y", ".", "shape", "#has to be L<=M", "\n", "\n", "if", "H", "is", "None", ":", "\n", "        ", "H", "=", "L", "\n", "\n", "", "alpha", "=", "L", "/", "M", "\n", "tauubar", "=", "2.5129", "*", "np", ".", "sqrt", "(", "alpha", ")", "\n", "\n", "#SVD of the input matrix, max rank of H", "\n", "U", ",", "s", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "Y", ")", "\n", "U", "=", "U", "[", ":", ",", ":", "H", "]", "\n", "s", "=", "s", "[", ":", "H", "]", "\n", "V", "=", "V", "[", ":", "H", "]", ".", "T", "\n", "\n", "#Calculate residual", "\n", "residual", "=", "0.", "\n", "if", "H", "<", "L", ":", "\n", "        ", "residual", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y", "**", "2", ")", "-", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "\n", "\n", "#Estimation of the variance when sigma2 is unspecified", "\n", "", "if", "sigma2", "is", "None", ":", "\n", "        ", "xubar", "=", "(", "1", "+", "tauubar", ")", "*", "(", "1", "+", "alpha", "/", "tauubar", ")", "\n", "eH_ub", "=", "int", "(", "np", ".", "min", "(", "[", "np", ".", "ceil", "(", "L", "/", "(", "1", "+", "alpha", ")", ")", "-", "1", ",", "H", "]", ")", ")", "-", "1", "\n", "upper_bound", "=", "(", "np", ".", "sum", "(", "s", "**", "2", ")", "+", "residual", ")", "/", "(", "L", "*", "M", ")", "\n", "lower_bound", "=", "np", ".", "max", "(", "[", "s", "[", "eH_ub", "+", "1", "]", "**", "2", "/", "(", "M", "*", "xubar", ")", ",", "np", ".", "mean", "(", "s", "[", "eH_ub", "+", "1", ":", "]", "**", "2", ")", "/", "M", "]", ")", "\n", "\n", "scale", "=", "1.", "#/lower_bound", "\n", "s", "=", "s", "*", "np", ".", "sqrt", "(", "scale", ")", "\n", "residual", "=", "residual", "*", "scale", "\n", "lower_bound", "=", "lower_bound", "*", "scale", "\n", "upper_bound", "=", "upper_bound", "*", "scale", "\n", "\n", "sigma2_opt", "=", "minimize_scalar", "(", "EVBsigma2", ",", "args", "=", "(", "L", ",", "M", ",", "s", ",", "residual", ",", "xubar", ")", ",", "bounds", "=", "[", "lower_bound", ",", "upper_bound", "]", ",", "method", "=", "'Bounded'", ")", "\n", "sigma2", "=", "sigma2_opt", ".", "x", "\n", "\n", "#Threshold gamma term", "\n", "", "threshold", "=", "np", ".", "sqrt", "(", "M", "*", "sigma2", "*", "(", "1", "+", "tauubar", ")", "*", "(", "1", "+", "alpha", "/", "tauubar", ")", ")", "\n", "pos", "=", "np", ".", "sum", "(", "s", ">", "threshold", ")", "\n", "\n", "#Formula (15) from [2]", "\n", "d", "=", "np", ".", "multiply", "(", "s", "[", ":", "pos", "]", "/", "2", ",", "1", "-", "np", ".", "divide", "(", "(", "L", "+", "M", ")", "*", "sigma2", ",", "s", "[", ":", "pos", "]", "**", "2", ")", "+", "np", ".", "sqrt", "(", "(", "1", "-", "np", ".", "divide", "(", "(", "L", "+", "M", ")", "*", "sigma2", ",", "s", "[", ":", "pos", "]", "**", "2", ")", ")", "**", "2", "-", "4", "*", "L", "*", "M", "*", "sigma2", "**", "2", "/", "s", "[", ":", "pos", "]", "**", "4", ")", ")", "\n", "\n", "#Computation of the posterior", "\n", "post", "=", "{", "}", "\n", "post", "[", "'ma'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'mb'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'sa2'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'sb2'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'cacb'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "\n", "tau", "=", "np", ".", "multiply", "(", "d", ",", "s", "[", ":", "pos", "]", ")", "/", "(", "M", "*", "sigma2", ")", "\n", "delta", "=", "np", ".", "multiply", "(", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "M", "*", "d", ",", "L", "*", "s", "[", ":", "pos", "]", ")", ")", ",", "1", "+", "alpha", "/", "tau", ")", "\n", "\n", "post", "[", "'ma'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "multiply", "(", "d", ",", "delta", ")", ")", "\n", "post", "[", "'mb'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "d", ",", "delta", ")", ")", "\n", "post", "[", "'sa2'", "]", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", "*", "delta", ",", "s", "[", ":", "pos", "]", ")", "\n", "post", "[", "'sb2'", "]", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", ",", "np", ".", "multiply", "(", "delta", ",", "s", "[", ":", "pos", "]", ")", ")", "\n", "post", "[", "'cacb'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "multiply", "(", "d", ",", "s", "[", ":", "pos", "]", ")", "/", "(", "L", "*", "M", ")", ")", "\n", "post", "[", "'sigma2'", "]", "=", "sigma2", "\n", "post", "[", "'F'", "]", "=", "0.5", "*", "(", "L", "*", "M", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "sigma2", ")", "+", "(", "residual", "+", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "/", "sigma2", "\n", "+", "np", ".", "sum", "(", "M", "*", "np", ".", "log", "(", "tau", "+", "1", ")", "+", "L", "*", "np", ".", "log", "(", "tau", "/", "alpha", "+", "1", ")", "-", "M", "*", "tau", ")", ")", "\n", "\n", "return", "U", "[", ":", ",", ":", "pos", "]", ",", "np", ".", "diag", "(", "d", ")", ",", "V", "[", ":", ",", ":", "pos", "]", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.EVBsigma2": [[261, 279], ["len", "VBMF.tau", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.log", "numpy.sum", "numpy.log", "numpy.divide", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.tau"], ["", "def", "EVBsigma2", "(", "sigma2", ",", "L", ",", "M", ",", "s", ",", "residual", ",", "xubar", ")", ":", "\n", "    ", "H", "=", "len", "(", "s", ")", "\n", "\n", "alpha", "=", "L", "/", "M", "\n", "x", "=", "s", "**", "2", "/", "(", "M", "*", "sigma2", ")", "\n", "\n", "z1", "=", "x", "[", "x", ">", "xubar", "]", "\n", "z2", "=", "x", "[", "x", "<=", "xubar", "]", "\n", "tau_z1", "=", "tau", "(", "z1", ",", "alpha", ")", "\n", "\n", "term1", "=", "np", ".", "sum", "(", "z2", "-", "np", ".", "log", "(", "z2", ")", ")", "\n", "term2", "=", "np", ".", "sum", "(", "z1", "-", "tau_z1", ")", "\n", "term3", "=", "np", ".", "sum", "(", "np", ".", "log", "(", "np", ".", "divide", "(", "tau_z1", "+", "1", ",", "z1", ")", ")", ")", "\n", "term4", "=", "alpha", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "tau_z1", "/", "alpha", "+", "1", ")", ")", "\n", "\n", "obj", "=", "term1", "+", "term2", "+", "term3", "+", "term4", "+", "residual", "/", "(", "M", "*", "sigma2", ")", "+", "(", "L", "-", "H", ")", "*", "np", ".", "log", "(", "sigma2", ")", "\n", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.phi0": [[280, 282], ["numpy.log"], "function", ["None"], ["", "def", "phi0", "(", "x", ")", ":", "\n", "    ", "return", "x", "-", "np", ".", "log", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.phi1": [[283, 285], ["VBMF.tau", "numpy.log", "numpy.log", "VBMF.tau", "VBMF.tau"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.tau", "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.tau", "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.tau"], ["", "def", "phi1", "(", "x", ",", "alpha", ")", ":", "\n", "    ", "return", "np", ".", "log", "(", "tau", "(", "x", ",", "alpha", ")", "+", "1", ")", "+", "alpha", "*", "np", ".", "log", "(", "tau", "(", "x", ",", "alpha", ")", "/", "alpha", "+", "1", ")", "-", "tau", "(", "x", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.VBMF.VBMF.tau": [[286, 288], ["numpy.sqrt"], "function", ["None"], ["", "def", "tau", "(", "x", ",", "alpha", ")", ":", "\n", "    ", "return", "0.5", "*", "(", "x", "-", "(", "1", "+", "alpha", ")", "+", "np", ".", "sqrt", "(", "(", "x", "-", "(", "1", "+", "alpha", ")", ")", "**", "2", "-", "4", "*", "alpha", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.Reducer.__init__": [[18, 32], ["numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ")", ":", "\n", "        ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "M", "=", "1024", "*", "1024", "\n", "# self.precalc_numbers = (", "\n", "# torch.from_numpy(self.rng.randn(128 * M)).to(device).type(torch.float32)", "\n", "# )", "\n", "# if torch.distributed.is_available():", "\n", "# self.n_workers = torch.distributed.get_world_size()", "\n", "# self.rank = torch.distributed.get_rank()", "\n", "# else:", "\n", "self", ".", "n_workers", "=", "1", "\n", "self", ".", "rank", "=", "0", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "timer", "=", "timer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.Reducer.reduce": [[33, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"Return communicated bits\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.RankKReducer.__init__": [[38, 47], ["powersgd_grad_original.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "n_power_iterations", "=", "0", ",", "\n", "reuse_query", "=", "True", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "assert", "n_power_iterations", "==", "0", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "p_memory", "=", "None", "\n", "self", ".", "q_memory", "=", "None", "\n", "self", ".", "reuse_query", "=", "reuse_query", "\n", "self", ".", "memory_update", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.RankKReducer.set_random": [[48, 52], ["torch.randn"], "methods", ["None"], ["", "def", "set_random", "(", "self", ",", "vector", ")", ":", "\n", "#TODO: Verify what this is doing", "\n", "# torch.manual_seed(self.rng.randint(1_000_000_000))", "\n", "        ", "vector", ".", "data", "[", ":", "]", "=", "torch", ".", "randn", "(", "*", "vector", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "# orthogonalize(vector)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.RankKReducer.reduce": [[54, 185], ["enumerate", "powersgd_grad_original.RankKReducer.timer", "powersgd_grad_original.RankKReducer.timer", "zip", "powersgd_grad_original.RankKReducer.timer", "zip", "powersgd_grad_original.RankKReducer.timer", "powersgd_grad_original.n_bits", "powersgd_grad_original.RankKReducer.timer", "powersgd_grad_original.TensorBuffer", "powersgd_grad_original.RankKReducer.timer", "powersgd_grad_original.RankKReducer.timer", "zip", "powersgd_grad_original.RankKReducer.timer", "powersgd_grad_original.n_bits", "powersgd_grad_original.RankKReducer.timer", "zip", "powersgd_grad_original.RankKReducer.timer", "powersgd_grad_original.TensorBuffer.unpack", "enumerate", "enumerate", "torch.zeros_like", "zip", "zip", "tensor.view", "min", "torch.empty", "torch.empty", "tensor.view", "min", "ps.append", "qs.append", "tensor.view", "tensor.view", "torch.matmul", "powersgd_grad_original.orthogonalize", "tensor.view", "torch.matmul", "torch.matmul", "tensor.ndimension", "tensor.ndimension", "powersgd_grad_original.RankKReducer.p_memory[].view", "powersgd_grad_original.RankKReducer.q_memory[].view", "powersgd_grad_original.RankKReducer.set_random", "tensor.view.t", "q.t"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.unpack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.orthogonalize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.RankKReducer.set_random"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ",", "use_memory", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "if", "use_memory", "and", "self", ".", "memory_update", "==", "None", ":", "\n", "# need to intialize the vector", "\n", "            ", "self", ".", "memory_update", "=", "[", "torch", ".", "zeros_like", "(", "gg", ")", "for", "gg", "in", "grad_in", "]", "\n", "\n", "", "if", "use_memory", ":", "\n", "# add the memory term to the gradient before using", "\n", "            ", "for", "idx", ",", "mem_term", "in", "enumerate", "(", "self", ".", "memory_update", ")", ":", "\n", "                ", "grad_in", "[", "idx", "]", "=", "grad_in", "[", "idx", "]", "+", "mem_term", "\n", "\n", "# Split the tensors into rank1-ones that will be reduced un-compressed", "\n", "# and rank > 1 tensors that are compressed", "\n", "", "", "rank1_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", "<=", "1", "\n", "]", "\n", "high_rank_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", ">", "1", "\n", "]", "\n", "\n", "# We are building a rank-1 approximation of every tensor", "\n", "# that can be interpreted as a matrix. Let the approximation be", "\n", "# M = p q^T", "\n", "# We are allocating consequtive memory for the p's and q's", "\n", "\n", "memory_is_uninitialized", "=", "self", ".", "p_memory", "is", "None", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.allocate_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "p_total_size", "=", "0", "\n", "q_total_size", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "p_total_size", "+=", "n", "*", "rank", "\n", "q_total_size", "+=", "m", "*", "rank", "\n", "", "if", "self", ".", "p_memory", "is", "None", ":", "\n", "                ", "self", ".", "p_memory", "=", "torch", ".", "empty", "(", "p_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "q_memory", "=", "torch", ".", "empty", "(", "q_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Find them again and make lists of pointers", "\n", "", "ps", "=", "[", "]", "\n", "qs", "=", "[", "]", "\n", "p_idx", "=", "0", "\n", "q_idx", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "ps", ".", "append", "(", "self", ".", "p_memory", "[", "p_idx", ":", "p_idx", "+", "n", "*", "rank", "]", ".", "view", "(", "n", ",", "rank", ")", ")", "\n", "qs", ".", "append", "(", "self", ".", "q_memory", "[", "q_idx", ":", "q_idx", "+", "m", "*", "rank", "]", ".", "view", "(", "m", ",", "rank", ")", ")", "\n", "p_idx", "+=", "n", "*", "rank", "\n", "q_idx", "+=", "m", "*", "rank", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.prepare.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "\n", "if", "self", ".", "reuse_query", "and", "not", "memory_is_uninitialized", ":", "\n", "# orthogonalize(q)", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "# Sample a query vector q", "\n", "                    ", "self", ".", "set_random", "(", "q", ")", "\n", "\n", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.compute.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ",", "q", ",", "out", "=", "p", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "# Don't need all reduce", "\n", "# all_reduce(self.p_memory)", "\n", "            ", "bits_communicated", "+=", "n_bits", "(", "self", ".", "p_memory", ")", "\n", "\n", "# Start communicating rank 1 tensors", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.rank1.pack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_tensor_list", "=", "TensorBuffer", "(", "[", "tensor", "for", "(", "tensor", ",", "_", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "# Don't need all reduce", "\n", "# with self.timer(\"reduce.rank1.all_reduce\", verbosity=2):", "\n", "# rank1_handle = rank1_tensor_list.all_reduce(async_op=True)", "\n", "# bits_communicated += rank1_tensor_list.bits()", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.normalize.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", "in", "ps", ":", "\n", "                ", "orthogonalize", "(", "p", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.compute.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "_", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ".", "t", "(", ")", ",", "p", ",", "out", "=", "q", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "# all_reduce(self.q_memory)", "\n", "            ", "bits_communicated", "+=", "n_bits", "(", "self", ".", "q_memory", ")", "\n", "self", ".", "q_memory", ".", "data", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.outerprod\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", ",", "q", ",", "(", "tensor", ",", "out", ",", "mem", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "# Set the output gradient", "\n", "                ", "torch", ".", "matmul", "(", "p", ",", "q", ".", "t", "(", ")", ",", "out", "=", "out", ".", "data", "[", ":", "]", ")", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "-", "out", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.rank1.unpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "# rank1_handle.wait()", "\n", "            ", "rank1_tensor_list", ".", "buffer", "/=", "self", ".", "n_workers", "\n", "rank1_tensor_list", ".", "unpack", "(", "[", "out", "for", "(", "_", ",", "out", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "", "if", "use_memory", ":", "\n", "# very dirty hack, the previous iteration", "\n", "# was adding the memory term, that updates the things in place", "\n", "# and effect the whole gradient in subsequent methods", "\n", "# this is a quick fix where i subtract the same term again", "\n", "            ", "for", "idx", ",", "mem_val", "in", "enumerate", "(", "self", ".", "memory_update", ")", ":", "\n", "                ", "grad_in", "[", "idx", "]", "=", "grad_in", "[", "idx", "]", "-", "mem_val", "\n", "\n", "", "", "if", "use_memory", ":", "\n", "            ", "for", "idx", ",", "mem_update", "in", "enumerate", "(", "memory_out", ")", ":", "\n", "                ", "self", ".", "memory_update", "[", "idx", "]", "=", "mem_update", "\n", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.__init__": [[192, 203], ["torch.cat", "indices.append", "tensor.nelement", "t.view"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["def", "__init__", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "indices", "=", "[", "0", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "new_end", "=", "indices", "[", "-", "1", "]", "+", "tensor", ".", "nelement", "(", ")", "\n", "indices", ".", "append", "(", "new_end", ")", "\n", "\n", "", "self", ".", "_start_idx", "=", "indices", "[", ":", "-", "1", "]", "\n", "self", ".", "_end_idx", "=", "indices", "[", "1", ":", "]", "\n", "self", ".", "_tensors", "=", "tensors", "\n", "\n", "self", ".", "buffer", "=", "torch", ".", "cat", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "tensors", "]", ")", "# copies", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.__getitem__": [[204, 206], ["powersgd_grad_original.TensorBuffer.buffer[].view"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "buffer", "[", "self", ".", "_start_idx", "[", "index", "]", ":", "self", ".", "_end_idx", "[", "index", "]", "]", ".", "view", "(", "*", "self", ".", "_tensors", "[", "index", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.__len__": [[207, 209], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.pack": [[210, 216], ["zip"], "methods", ["None"], ["", "def", "pack", "(", "self", ",", "tensors", "=", "None", ")", ":", "\n", "# Optional. init already does this.", "\n", "        ", "if", "tensors", "is", "None", ":", "\n", "            ", "tensors", "=", "self", ".", "_tensors", "\n", "", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "entry", "[", ":", "]", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.unpack": [[217, 220], ["zip"], "methods", ["None"], ["", "", "def", "unpack", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "tensor", "[", ":", "]", "=", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.nelement": [[221, 223], ["powersgd_grad_original.TensorBuffer.buffer.nelement"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "", "def", "nelement", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.element_size": [[224, 226], ["powersgd_grad_original.TensorBuffer.buffer.element_size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size"], ["", "def", "element_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.bits": [[227, 229], ["powersgd_grad_original.TensorBuffer.element_size", "powersgd_grad_original.TensorBuffer.nelement"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "def", "bits", "(", "self", ")", ":", "\n", "        ", "return", "8", "*", "self", ".", "nelement", "(", ")", "*", "self", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.all_reduce": [[230, 232], ["torch.distributed.all_reduce"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce"], ["", "def", "all_reduce", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.TensorBuffer.all_gather": [[233, 241], ["powersgd_grad_original.TensorBuffer.all_gather"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather"], ["", "def", "all_gather", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "buffers", "=", "[", "torch", ".", "empty_like", "(", "self", ".", "buffer", ")", "for", "i", "in", "range", "(", "n_workers", ")", "]", "\n", "handle", "=", "all_gather", "(", "buffers", ",", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "if", "async_op", ":", "\n", "            ", "return", "buffers", ",", "handle", "\n", "", "else", ":", "\n", "            ", "return", "buffers", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.n_bits": [[242, 244], ["tensor.element_size", "tensor.nelement"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "", "", "def", "n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad_original.orthogonalize": [[248, 260], ["range", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "orthogonalize", "(", "matrix", ")", ":", "\n", "    ", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Normalize the i'th column", "\n", "        ", "col", "=", "matrix", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "col", "/=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "col", "**", "2", ")", ")", "\n", "# Project it on the rest and remove it", "\n", "if", "i", "+", "1", "<", "m", ":", "\n", "            ", "rest", "=", "matrix", "[", ":", ",", "i", "+", "1", ":", "]", "\n", "# rest -= torch.matmul(col.t(), rest) * col", "\n", "rest", "-=", "torch", ".", "sum", "(", "col", "*", "rest", ",", "dim", "=", "0", ")", "*", "col", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.add_fit_args": [[99, 139], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args", "TypeError"], "function", ["None"], ["param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "elif", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", "and", "\"classifier.\"", "in", "param_name", "and", "\"classifier.6.\"", "not", "in", "param_name", ":", "\n", "                ", "print", "(", "param_name", ",", "param", ".", "size", "(", ")", ")", "\n", "rank", "=", "min", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "param", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param", ")", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.seed": [[140, 151], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "print"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.get_lr": [[152, 207], ["torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "min", "print"], "function", ["None"], ["model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n", "\n", "\n", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_timer", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_start = time.time()", "\n", "iter_start", ".", "record", "(", ")", "\n", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "#torch.cuda.synchronize()", "\n", "#forward_dur = time.time() - iter_comp_start", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#backward_start = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "iter_end", ".", "record", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.get_lr_squeezenet": [[207, 224], ["enumerate", "print"], "function", ["None"], ["\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_dur = time.time() - iter_comp_start", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "\n", "epoch_timer", "+=", "iter_comp_dur", "\n", "\n", "if", "batch_idx", "%", "40", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]  Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "return", "epoch_timer", "\n", "\n", "\n", "", "def", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "device", ")", ":", "\n", "    ", "global", "best_acc", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.add_weight_decay": [[225, 238], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.vectorize_grad": [[240, 242], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grad_value.view"], "function", ["None"], ["acc", "=", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.devectorize_grad": [[243, 250], ["enumerate", "model.parameters", "out_grad_list.append", "p.numel", "reduced_grad[].view", "p.size", "p.numel"], "function", ["None"], ["test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "acc", ">", "best_acc", ":", "\n", "            ", "logger", ".", "info", "(", "'###### Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.main": [[252, 670], ["dict", "dict", "dict", "collections.defaultdict", "dict", "dict", "collections.defaultdict", "dict", "train_network.build", "logger.info", "range", "print", "torch.init_process_group", "print", "torch.SGD", "main.add_weight_decay", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.SGD", "print", "print", "print", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "train_network.build.train_single_iter", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "timing_log[].append", "timing_log[].append", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "list", "train_network.build.model.eval", "train_network.build.validate_model", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "train_network.build.model.parameters", "train_network.build.model.parameters", "sparsify_gradient.applySparsify", "train_network.build.model.parameters", "train_network.build.model.parameters", "logger.info", "train_network.build.sampler.set_epoch", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "list", "main.vectorize_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "enumerate", "time.time", "open", "json.dump", "open", "json.dump", "open", "json.dump", "open", "json.dump", "open", "json.dump", "print", "main.get_lr_squeezenet", "lr_scheduler.MultiStepLR.step", "datetime.timedelta", "p.ndimension", "m.update_method", "m.update_method", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "enumerate", "main.devectorize_grad", "train_network.build.model.parameters", "optim.SGD.step", "optim.SGD.zero_grad", "optim.SGD.step", "optim.SGD.zero_grad", "list.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "print", "torch.tensor().to.tolist", "list", "print", "enumerate", "print", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "enumerate", "train_network.build.model.parameters", "train_network.build.model.zero_grad", "list.append", "list.append", "len", "auto_scale.run_auto_scale_gng", "print", "list", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "map", "open", "json.dump", "open", "json.dump", "open", "json.dump", "sparse_object.apply_method", "devectorize_grad.append", "devectorize_grad.append", "train_network.build.model.parameters", "p.data.add_", "map", "sparse_mth.update_method", "m.update_method", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "param.grad.data.clone().detach", "momenta[].data.mul_().add_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "NotImplemented", "param.grad.data.clone", "momenta[].data.mul_"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.train_network.__init__.build", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.train_single_iter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.validate_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main.get_lr_squeezenet", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.update_method", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.update_method", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.apply_method", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.update_method", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.update_method", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce"], ["'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_seed{}_best.pth'", ".", "format", "(", "args", ".", "arch", ",", "args", ".", "seed", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n", "\n", "", "", "", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "#parser.add_argument('-a', '--arch', metavar='ARCH', default='resnet18',", "\n", "#                choices=model_names,", "\n", "#                help='model architecture: ' +", "\n", "#                    ' | '.join(model_names) +", "\n", "#                    ' (default: resnet18)')", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "default", "=", "'resnet18'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "'the random seed to use in the experiment for reproducibility'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-re'", ",", "'--resume'", ",", "default", "=", "False", ",", "type", "=", "bool_string", ",", "\n", "help", "=", "'wether or not to resume from a checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eva'", ",", "'--evaluate'", ",", "type", "=", "bool_string", ",", "default", "=", "False", ",", "\n", "help", "=", "'wether or not to evaluate the model after loading the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'the rank factor that is going to use in the low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'-cp'", ",", "'--ckpt_path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint/vgg19_best.pth\"", ",", "\n", "help", "=", "'path to the checkpoint to resume.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "\n", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "        ", "args", ".", "fr_warmup_epoch", "=", "args", ".", "epochs", "\n", "\n", "# let's enable cudnn benchmark", "\n", "", "seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "#model = vgg11_bn().to(device)", "\n", "#model = LowRankVGG().to(device)", "\n", "#model = models.resnet50(num_classes=10).to(device)", "\n", "#model = models.__dict__[args.arch](num_classes=10).to(device)", "\n", "#model = LowRankResNet18().to(device)", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowrankResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "", "", "elif", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "\n", "", "", "with", "torch", ".", "cuda", ".", "device", "(", "0", ")", ":", "\n", "        ", "lowrank_macs", ",", "lowrank_params", "=", "get_model_complexity_info", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "vanilla_macs", ",", "vanilla_params", "=", "get_model_complexity_info", "(", "vanilla_model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "", "", "logger", ".", "info", "(", "\"============> Lowrank Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "model", ",", "param_counter", "(", "model", ")", ",", "lowrank_macs", ")", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"============> Vanilla Model info: {}, num params: {}, Macs: {}\"", ".", "format", "(", "\n", "vanilla_model", ",", "param_counter", "(", "vanilla_model", ")", ",", "vanilla_macs", ")", ")", "\n", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "init_lr", "=", "args", ".", "lr", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ",", "'Error: no checkpoint directory found!'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "#if args.mode == \"lowrank\":", "\n", "#    model.load_state_dict(checkpoint['net'])", "\n", "#elif args.mode == \"vanilla\":", "\n", "#    vanilla_model.load_state_dict(checkpoint['net'])", "\n", "#else:", "\n", "#    raise NotImplementedError(\"Unsupported training mode ...\")", "\n", "\n", "best_acc", "=", "checkpoint", "[", "'acc'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "start_epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "# if args.mode == \"lowrank\":", "\n", "#     validate(", "\n", "#              test_loader=test_loader,", "\n", "#              model=model, ", "\n", "#              criterion=criterion, ", "\n", "#              epoch=start_epoch,", "\n", "#              args=args,", "\n", "#              device=device)", "\n", "# elif args.mode == \"vanilla\":", "\n", "#     validate(", "\n", "#              test_loader=test_loader,", "\n", "#              model=vanilla_model, ", "\n", "#              criterion=criterion, ", "\n", "#              epoch=start_epoch,", "\n", "#              args=args,", "\n", "#              device=device)", "\n", "#else:", "\n", "#    raise NotImplementedError(\"Unsupported training mode ...\")              ", "\n", "exit", "(", ")", "\n", "\n", "", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "        ", "vanilla_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "vanilla_model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "# switching off the weight decay for batch norm layers", "\n", "#parameters = add_weight_decay(model, 0.0001)", "\n", "#weight_decay = 0.", "\n", "# optimizer = torch.optim.SGD(parameters, args.lr,", "\n", "#                             momentum=args.momentum,", "\n", "#                             #weight_decay=args.weight_decay)", "\n", "#                             weight_decay=weight_decay)", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# adjusting lr schedule", "\n", "if", "epoch", "<", "150", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "\n", "", "", "", "elif", "(", "epoch", ">=", "150", "and", "epoch", "<", "250", ")", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "10.0", "\n", "", "", "", "elif", "epoch", ">=", "250", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "                ", "for", "group", "in", "vanilla_optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "init_lr", "/", "100.0", "\n", "\n", "", "", "", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Epoch: {}, Current effective lr: {}\"", ".", "format", "(", "epoch", ",", "group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, Warmuping ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "vanilla_model", ",", "criterion", ",", "vanilla_optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "\n", "epoch_norm", "=", "norm_calculator", "(", "vanilla_model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "", "elif", "args", ".", "full_rank_warmup", "and", "epoch", "==", "args", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, swtiching to low rank model ...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "decompose_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decompose_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "decompose_start", ".", "record", "(", ")", "\n", "model", "=", "decompose_weights", "(", "model", "=", "vanilla_model", ",", "\n", "low_rank_model", "=", "model", ",", "\n", "rank_factor", "=", "args", ".", "rank_factor", ",", "\n", "args", "=", "args", ")", "\n", "\n", "decompose_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "float", "(", "decompose_start", ".", "elapsed_time", "(", "decompose_end", ")", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "#optimizer = optim.SGD(model.parameters(), lr=(args.lr/2), momentum=args.momentum, weight_decay=1e-4)", "\n", "#init_lr = args.lr/2", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch: {}, {} training ...\"", ".", "format", "(", "epoch", ",", "args", ".", "mode", ")", ")", "\n", "epoch_time", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "device", "=", "device", ")", "\n", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n", "", "epoch_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"####### Comp Time Cost for Epoch: {} is {}, os time: {}\"", ".", "format", "(", "epoch", ",", "epoch_time", ",", "epoch_end", "-", "epoch_start", ")", ")", "\n", "\n", "# eval", "\n", "if", "args", ".", "full_rank_warmup", "and", "epoch", "in", "range", "(", "args", ".", "fr_warmup_epoch", ")", ":", "\n", "# validate(test_loader, model, criterion, epoch, device)", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "vanilla_model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "validate", "(", "\n", "test_loader", "=", "test_loader", ",", "\n", "model", "=", "model", ",", "\n", "criterion", "=", "criterion", ",", "\n", "epoch", "=", "epoch", ",", "\n", "args", "=", "args", ",", "\n", "device", "=", "device", ")", "\n", "\n", "\n", "", "epoch_norm", "=", "norm_calculator", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"###### Norm of the Model in Epoch: {}, is: {}\"", ".", "format", "(", "epoch", ",", "epoch_norm", ")", ")", "\n", "\n", "# we save the final model for future use", "\n", "#with open(\"trained_model_resnet18\", \"wb\") as f_:", "\n", "#    torch.save(model.state_dict(), f_)", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer.__init__": [[25, 31], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reset"], ["def", "__init__", "(", "self", ",", "verbosity_level", "=", "1", ",", "log_fn", "=", "None", ",", "skip_first", "=", "True", ")", ":", "\n", "        ", "self", ".", "verbosity_level", "=", "verbosity_level", "\n", "self", ".", "log_fn", "=", "log_fn", "if", "log_fn", "is", "not", "None", "else", "self", ".", "_default_log_fn", "\n", "self", ".", "skip_first", "=", "skip_first", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer.reset": [[32, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the timer\"\"\"", "\n", "self", ".", "totals", "=", "{", "}", "# Total time per label", "\n", "self", ".", "first_time", "=", "{", "}", "# First occurrence of a label (start time)", "\n", "self", ".", "last_time", "=", "{", "}", "# Last occurence of a label (end time)", "\n", "self", ".", "call_counts", "=", "{", "}", "# Number of times a label occurred", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer.__call__": [[39, 80], ["timer.Timer._cuda_sync", "time.time", "timer.Timer._cuda_sync", "time.time", "numpy.random.rand", "timer.Timer.log_fn", "float"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer._cuda_sync", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer._cuda_sync"], ["", "@", "contextmanager", "\n", "def", "__call__", "(", "self", ",", "label", ",", "epoch", "=", "-", "1.0", ",", "verbosity", "=", "1", ")", ":", "\n", "# Don't measure this if the verbosity level is too high", "\n", "        ", "if", "verbosity", ">", "self", ".", "verbosity_level", ":", "\n", "            ", "yield", "\n", "return", "\n", "\n", "# Measure the time", "\n", "", "self", ".", "_cuda_sync", "(", ")", "\n", "# we switch to a lower resolution timer for now", "\n", "#start = time.time_ns() * NS", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "yield", "\n", "self", ".", "_cuda_sync", "(", ")", "\n", "#end = time.time_ns() * NS", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Update first and last occurrence of this label", "\n", "if", "not", "label", "in", "self", ".", "first_time", ":", "\n", "            ", "self", ".", "first_time", "[", "label", "]", "=", "start", "\n", "", "self", ".", "last_time", "[", "label", "]", "=", "end", "\n", "\n", "# Update the totals and call counts", "\n", "if", "not", "label", "in", "self", ".", "totals", "and", "self", ".", "skip_first", ":", "\n", "            ", "self", ".", "totals", "[", "label", "]", "=", "0.0", "\n", "del", "self", ".", "first_time", "[", "label", "]", "\n", "self", ".", "call_counts", "[", "label", "]", "=", "0", "\n", "", "elif", "not", "label", "in", "self", ".", "totals", "and", "not", "self", ".", "skip_first", ":", "\n", "            ", "self", ".", "totals", "[", "label", "]", "=", "end", "-", "start", "\n", "self", ".", "call_counts", "[", "label", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "totals", "[", "label", "]", "+=", "end", "-", "start", "\n", "self", ".", "call_counts", "[", "label", "]", "+=", "1", "\n", "\n", "", "if", "self", ".", "call_counts", "[", "label", "]", ">", "0", ":", "\n", "# We will reduce the probability of logging a timing linearly with the number of times", "\n", "# we have seen it.", "\n", "# It will always be recorded in the totals, though", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "1", "/", "self", ".", "call_counts", "[", "label", "]", ":", "\n", "                ", "self", ".", "log_fn", "(", "\n", "\"timer\"", ",", "{", "\"epoch\"", ":", "float", "(", "epoch", ")", ",", "\"value\"", ":", "end", "-", "start", "}", ",", "{", "\"event\"", ":", "label", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer.summary": [[82, 103], ["io.StringIO", "print", "print", "sorted", "print", "buffer.getvalue", "print"], "methods", ["None"], ["", "", "", "def", "summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a summary in string-form of all the timings recorded so far\n        \"\"\"", "\n", "with", "StringIO", "(", ")", "as", "buffer", ":", "\n", "            ", "print", "(", "\"--- Timer summary -----------------------------------------------\"", ",", "file", "=", "buffer", ")", "\n", "print", "(", "\"  Event                          |  Count | Average time |  Frac.\"", ",", "file", "=", "buffer", ")", "\n", "for", "event_label", "in", "sorted", "(", "self", ".", "totals", ")", ":", "\n", "                ", "total", "=", "self", ".", "totals", "[", "event_label", "]", "\n", "count", "=", "self", ".", "call_counts", "[", "event_label", "]", "\n", "if", "count", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "avg_duration", "=", "total", "/", "count", "\n", "total_runtime", "=", "self", ".", "last_time", "[", "event_label", "]", "-", "self", ".", "first_time", "[", "event_label", "]", "\n", "runtime_percentage", "=", "100", "*", "total", "/", "total_runtime", "\n", "print", "(", "\n", "f\"- {event_label:30s} | {count:6d} | {avg_duration:11.5f}s | {runtime_percentage:5.1f}%\"", ",", "\n", "file", "=", "buffer", ",", "\n", ")", "\n", "", "print", "(", "\"-----------------------------------------------------------------\"", ",", "file", "=", "buffer", ")", "\n", "return", "buffer", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer.save_summary": [[104, 121], ["sorted", "open", "json.dump"], "methods", ["None"], ["", "", "def", "save_summary", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "event_label", "in", "sorted", "(", "self", ".", "totals", ")", ":", "\n", "            ", "total", "=", "self", ".", "totals", "[", "event_label", "]", "\n", "count", "=", "self", ".", "call_counts", "[", "event_label", "]", "\n", "if", "count", "==", "0", ":", "\n", "                ", "continue", "\n", "", "avg_duration", "=", "total", "/", "count", "\n", "data", "[", "event_label", "]", "=", "{", "\n", "\"label\"", ":", "event_label", ",", "\n", "\"average_duration\"", ":", "avg_duration", ",", "\n", "\"n_events\"", ":", "count", ",", "\n", "\"total_time\"", ":", "total", ",", "\n", "}", "\n", "\n", "", "with", "open", "(", "json_file_path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer._cuda_sync": [[122, 126], ["torch.cuda.is_available", "torch.cuda.synchronize"], "methods", ["None"], ["", "", "def", "_cuda_sync", "(", "self", ")", ":", "\n", "        ", "\"\"\"Finish all asynchronous GPU computations to get correct timings\"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.timer.Timer._default_log_fn": [[127, 132], ["print"], "methods", ["None"], ["", "", "def", "_default_log_fn", "(", "self", ",", "_", ",", "values", ",", "tags", ")", ":", "\n", "        ", "label", "=", "tags", "[", "\"label\"", "]", "\n", "epoch", "=", "values", "[", "\"epoch\"", "]", "\n", "duration", "=", "values", "[", "\"value\"", "]", "\n", "print", "(", "f\"Timer: {label:30s} @ {epoch:4.1f} - {duration:8.5f}s\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.__init__": [[36, 47], ["torch.cat", "indices.append", "tensor.nelement", "t.view"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["def", "__init__", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "indices", "=", "[", "0", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "new_end", "=", "indices", "[", "-", "1", "]", "+", "tensor", ".", "nelement", "(", ")", "\n", "indices", ".", "append", "(", "new_end", ")", "\n", "\n", "", "self", ".", "_start_idx", "=", "indices", "[", ":", "-", "1", "]", "\n", "self", ".", "_end_idx", "=", "indices", "[", "1", ":", "]", "\n", "self", ".", "_tensors", "=", "tensors", "\n", "\n", "self", ".", "buffer", "=", "torch", ".", "cat", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "tensors", "]", ")", "# copies", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.__getitem__": [[48, 50], ["gradient_reducers.TensorBuffer.buffer[].view"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "buffer", "[", "self", ".", "_start_idx", "[", "index", "]", ":", "self", ".", "_end_idx", "[", "index", "]", "]", ".", "view", "(", "*", "self", ".", "_tensors", "[", "index", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.pack": [[54, 60], ["zip"], "methods", ["None"], ["", "def", "pack", "(", "self", ",", "tensors", "=", "None", ")", ":", "\n", "# Optional. init already does this.", "\n", "        ", "if", "tensors", "is", "None", ":", "\n", "            ", "tensors", "=", "self", ".", "_tensors", "\n", "", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "entry", "[", ":", "]", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.unpack": [[61, 64], ["zip"], "methods", ["None"], ["", "", "def", "unpack", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "tensor", "[", ":", "]", "=", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.nelement": [[65, 67], ["gradient_reducers.TensorBuffer.buffer.nelement"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "", "def", "nelement", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.element_size": [[68, 70], ["gradient_reducers.TensorBuffer.buffer.element_size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size"], ["", "def", "element_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.bits": [[71, 73], ["gradient_reducers.TensorBuffer.element_size", "gradient_reducers.TensorBuffer.nelement"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "def", "bits", "(", "self", ")", ":", "\n", "        ", "return", "8", "*", "self", ".", "nelement", "(", ")", "*", "self", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.all_reduce": [[74, 76], ["torch.distributed.all_reduce"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce"], ["", "def", "all_reduce", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.TensorBuffer.all_gather": [[77, 85], ["gradient_reducers.TensorBuffer.all_gather"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather"], ["", "def", "all_gather", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "buffers", "=", "[", "torch", ".", "empty_like", "(", "self", ".", "buffer", ")", "for", "i", "in", "range", "(", "n_workers", ")", "]", "\n", "handle", "=", "all_gather", "(", "buffers", ",", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "if", "async_op", ":", "\n", "            ", "return", "buffers", ",", "handle", "\n", "", "else", ":", "\n", "            ", "return", "buffers", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.Reducer.__init__": [[88, 101], ["numpy.random.RandomState", "torch.from_numpy().to().type", "torch.distributed.is_available", "torch.distributed.get_world_size", "torch.distributed.get_rank", "torch.from_numpy().to", "torch.from_numpy", "gradient_reducers.Reducer.rng.randn"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ")", ":", "\n", "        ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "M", "=", "1024", "*", "1024", "\n", "self", ".", "precalc_numbers", "=", "(", "\n", "torch", ".", "from_numpy", "(", "self", ".", "rng", ".", "randn", "(", "128", "*", "M", ")", ")", ".", "to", "(", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", ")", "\n", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_workers", "=", "1", "\n", "self", ".", "rank", "=", "0", "\n", "", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.Reducer.reduce": [[102, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"Return communicated bits\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.ReducerSignleNode.__init__": [[108, 117], ["numpy.random.RandomState", "torch.from_numpy().to().type", "torch.from_numpy().to", "torch.from_numpy", "gradient_reducers.ReducerSignleNode.rng.randn"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ")", ":", "\n", "        ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "M", "=", "1024", "*", "1024", "\n", "self", ".", "precalc_numbers", "=", "(", "\n", "torch", ".", "from_numpy", "(", "self", ".", "rng", ".", "randn", "(", "128", "*", "M", ")", ")", ".", "to", "(", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", ")", "\n", "self", ".", "n_workers", "=", "1", "\n", "self", ".", "rank", "=", "0", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.ReducerSignleNode.reduce": [[118, 121], ["NotImplementedError"], "methods", ["None"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"Return communicated bits\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignCompressor.packing": [[126, 141], ["torch.sign", "src_tensor.to.to.size", "src_tensor.to.to.view", "len", "torch.zeros", "torch.cat", "src_tensor.to.to.view", "src_tensor.to.to.to", "bit2byte.packing", "dst_tensor.to.to.to"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["def", "packing", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "src_tensor", "=", "torch", ".", "sign", "(", "src_tensor", ")", "\n", "src_tensor_size", "=", "src_tensor", ".", "size", "(", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "src_len", "=", "len", "(", "src_tensor", ")", "\n", "add_elm", "=", "32", "-", "(", "src_len", "%", "32", ")", "\n", "if", "src_len", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "new_tensor", "=", "torch", ".", "zeros", "(", "[", "add_elm", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "src_tensor", ".", "device", ")", "\n", "src_tensor", "=", "torch", ".", "cat", "(", "(", "src_tensor", ",", "new_tensor", ")", ",", "0", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "src_tensor", "=", "src_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "dst_tensor", "=", "bit2byte", ".", "packing", "(", "src_tensor", ")", "\n", "dst_tensor", "=", "dst_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "dst_tensor", ",", "src_tensor_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignCompressor.unpacking": [[142, 159], ["gradient_reducers.SignCompressor.element_num", "src_tensor.int.int.int", "torch.ones", "new_tensor.float.float.view", "bit2byte.unpacking", "new_tensor.float.float.view", "new_tensor.float.float.view", "new_tensor.float.float.float", "new_tensor.float.float.add_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.element_num", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking"], ["", "def", "unpacking", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "src_element_num", "=", "self", ".", "element_num", "(", "src_tensor_size", ")", "\n", "add_elm", "=", "32", "-", "(", "src_element_num", "%", "32", ")", "\n", "if", "src_element_num", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "src_tensor", "=", "src_tensor", ".", "int", "(", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "\n", "src_element_num", "+", "add_elm", ",", "device", "=", "src_tensor", ".", "device", ",", "dtype", "=", "torch", ".", "int32", "\n", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", "[", ":", "src_element_num", "]", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "src_tensor_size", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", ".", "float", "(", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignCompressor.majority_vote": [[160, 177], ["len", "torch.stack", "src_tensor.view.view.view", "torch.ones", "new_tensor.to.to.view", "bit2byte.unpacking", "new_tensor.to.to.permute().contiguous().view", "torch.sum", "new_tensor.to.to.view().permute", "torch.sign", "bit2byte.packing", "new_tensor.to.to.to", "len", "new_tensor.to.to.add_", "new_tensor.to.to.permute().contiguous", "new_tensor.to.to.view", "new_tensor.to.to.permute"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "majority_vote", "(", "self", ",", "src_tensor_list", ")", ":", "\n", "        ", "voter_num", "=", "len", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "torch", ".", "stack", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "full_size", "=", "32", "*", "len", "(", "src_tensor", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "full_size", ",", "device", "=", "src_tensor", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "# sum", "\n", "new_tensor", "=", "new_tensor", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "voter_num", ",", "-", "1", ")", "\n", "new_tensor", "=", "torch", ".", "sum", "(", "new_tensor", ",", "0", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ",", "32", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "new_tensor", "=", "torch", ".", "sign", "(", "new_tensor", ")", "\n", "new_tensor", "=", "bit2byte", ".", "packing", "(", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignCompressor.element_num": [[178, 183], ["range", "len"], "methods", ["None"], ["", "def", "element_num", "(", "self", ",", "size", ")", ":", "\n", "        ", "num", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "size", ")", ")", ":", "\n", "            ", "num", "*=", "size", "[", "i", "]", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignCompressor.compress": [[184, 186], ["gradient_reducers.SignCompressor.packing"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing"], ["", "def", "compress", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "return", "self", ".", "packing", "(", "src_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignCompressor.uncompress": [[187, 190], ["gradient_reducers.SignCompressor.unpacking"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking"], ["", "def", "uncompress", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "dst_tensor", "=", "self", ".", "unpacking", "(", "src_tensor", ",", "src_tensor_size", ")", "\n", "return", "dst_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignSGDwithMajorityVoteReducer.reduce": [[193, 263], ["torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "gradient_reducers.SignCompressor", "gradient_reducers.SignCompressor.compress", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.all_gather", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.n_bits", "sum_of_signs.sign", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.empty_like", "float", "float", "gradient_reducers.SignCompressor.uncompress", "float", "range", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.compress", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.uncompress"], ["    ", "def", "reduce", "(", "self", ",", "aggregated_grad", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :aggregated_grad: here we actually compress momentum rather than gradient\n        \"\"\"", "\n", "enc_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "bits_communicated", "=", "0", "\n", "comm_time_counter", "=", "0", "\n", "encode_decode_counter", "=", "0", "\n", "\n", "# encoding stage", "\n", "enc_start", ".", "record", "(", ")", "\n", "sign_compressor", "=", "SignCompressor", "(", ")", "\n", "#with self.timer(\"reduce.flatpack\"):", "\n", "#flatgrad = TensorBuffer(grad_in)", "\n", "\n", "#with self.timer(\"reduce.compress\", verbosity=2):", "\n", "my_bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "aggregated_grad", ")", "\n", "\n", "#with self.timer(\"reduce.gather\", verbosity=2): # let's always assume we are with distributed mode", "\n", "bits", "=", "[", "torch", ".", "empty_like", "(", "my_bits", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "enc_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "enc_cost", "=", "float", "(", "enc_start", ".", "elapsed_time", "(", "enc_end", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "enc_cost", "\n", "\n", "comm_start", ".", "record", "(", ")", "\n", "all_gather", "(", "bits", ",", "my_bits", ")", "\n", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "comm_time_counter", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "# in seconds", "\n", "\n", "# decoding stage", "\n", "dec_start", ".", "record", "(", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "my_bits", ")", "# for the norm vector, being optimistic here", "\n", "\n", "#with self.timer(\"reduce.decompress\", verbosity=2):", "\n", "sum_of_signs", "=", "None", "\n", "for", "their_bits", "in", "bits", ":", "\n", "            ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "if", "sum_of_signs", "is", "None", ":", "\n", "                ", "sum_of_signs", "=", "uncompressed", "\n", "", "else", ":", "\n", "                ", "sum_of_signs", "+=", "uncompressed", "\n", "\n", "#with self.timer(\"reduce.majorityvote\", verbosity=2):", "\n", "#total_sign = sum_of_signs.sign()", "\n", "", "", "reduced_aggregated_grad", "=", "sum_of_signs", ".", "sign", "(", ")", "\n", "\n", "dec_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "dec_cost", "=", "float", "(", "dec_start", ".", "elapsed_time", "(", "dec_end", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "dec_cost", "\n", "#with self.timer(\"reduce.set_out\", verbosity=2):", "\n", "#flatgrad.buffer = total_sign", "\n", "#for out, majorityvote in zip(grad_out, flatgrad):", "\n", "#    out.data[:] = majorityvote", "\n", "\n", "# no error feedback scheme is used here, this we do not enable the ", "\n", "#with self.timer(\"reduce.memory\", verbosity=2):", "\n", "#for mem in memory_out:", "\n", "#    mem.data[:] = -10_000_000  # don't try to use memory", "\n", "#return bits_communicated", "\n", "return", "reduced_aggregated_grad", ",", "bits_communicated", ",", "comm_time_counter", ",", "encode_decode_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignSGDwithMajorityVoteReducerSimulation.reduce": [[266, 335], ["torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "gradient_reducers.SignCompressor", "range", "torch.stack", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.all_gather", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.n_bits", "sum_of_signs.sign", "torch.cuda.Event.record", "torch.cuda.synchronize", "aggregated_grad.size", "gradient_reducers.SignCompressor.compress", "torch.stack.append", "sign_size_list.append", "torch.empty_like", "float", "float", "range", "gradient_reducers.SignCompressor.uncompress", "float", "range", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "unrolled_bits.append", "torch.cuda.Event.elapsed_time"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.compress", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.uncompress"], ["    ", "def", "reduce", "(", "self", ",", "aggregated_grad", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :aggregated_grad: here we actually compress momentum rather than gradient\n         and we do aggregated gradient # simulated nodes X dimension\n        \"\"\"", "\n", "enc_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "bits_communicated", "=", "0", "\n", "comm_time_counter", "=", "0", "\n", "encode_decode_counter", "=", "0", "\n", "\n", "# encoding stage", "\n", "enc_start", ".", "record", "(", ")", "\n", "sign_compressor", "=", "SignCompressor", "(", ")", "\n", "\n", "num_simulated_nodes", "=", "aggregated_grad", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "my_bits_list", "=", "[", "]", "\n", "sign_size_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_simulated_nodes", ")", ":", "\n", "            ", "my_bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "aggregated_grad", "[", "i", "]", ")", "\n", "my_bits_list", ".", "append", "(", "my_bits", ")", "\n", "sign_size_list", ".", "append", "(", "sign_size", ")", "\n", "\n", "", "my_bits_list", "=", "torch", ".", "stack", "(", "my_bits_list", ")", "# # of simulated nodes X compressed tensors     ", "\n", "\n", "bits", "=", "[", "torch", ".", "empty_like", "(", "my_bits_list", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "enc_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "enc_cost", "=", "float", "(", "enc_start", ".", "elapsed_time", "(", "enc_end", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "enc_cost", "\n", "\n", "comm_start", ".", "record", "(", ")", "\n", "all_gather", "(", "bits", ",", "my_bits_list", ")", "\n", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "comm_time_counter", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "# in seconds", "\n", "\n", "# decoding stage", "\n", "dec_start", ".", "record", "(", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "my_bits_list", ")", "# for the norm vector, being optimistic here", "\n", "\n", "# unroll the bits", "\n", "unrolled_bits", "=", "[", "]", "\n", "for", "their_bits", "in", "bits", ":", "\n", "            ", "for", "node_index", "in", "range", "(", "num_simulated_nodes", ")", ":", "\n", "                ", "unrolled_bits", ".", "append", "(", "their_bits", "[", "node_index", "]", ")", "\n", "\n", "", "", "sum_of_signs", "=", "None", "\n", "for", "their_bits", "in", "unrolled_bits", ":", "\n", "            ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "if", "sum_of_signs", "is", "None", ":", "\n", "                ", "sum_of_signs", "=", "uncompressed", "\n", "", "else", ":", "\n", "                ", "sum_of_signs", "+=", "uncompressed", "\n", "\n", "", "", "reduced_aggregated_grad", "=", "sum_of_signs", ".", "sign", "(", ")", "\n", "\n", "dec_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "dec_cost", "=", "float", "(", "dec_start", ".", "elapsed_time", "(", "dec_end", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "dec_cost", "\n", "return", "reduced_aggregated_grad", ",", "bits_communicated", ",", "comm_time_counter", ",", "encode_decode_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.SignSGDwithMajorityVoteReducerSimulationSignleNode.reduce": [[338, 410], ["torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "gradient_reducers.SignCompressor", "range", "torch.stack", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.n_bits", "sum_of_signs.sign", "torch.cuda.Event.record", "torch.cuda.synchronize", "aggregated_grad.size", "gradient_reducers.SignCompressor.compress", "torch.stack.append", "sign_size_list.append", "float", "gradient_reducers.SignCompressor.uncompress", "float", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.compress", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.uncompress"], ["    ", "def", "reduce", "(", "self", ",", "aggregated_grad", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :aggregated_grad: here we actually compress momentum rather than gradient\n         and we do aggregated gradient # simulated nodes X dimension\n        \"\"\"", "\n", "enc_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "bits_communicated", "=", "0", "\n", "comm_time_counter", "=", "0", "\n", "encode_decode_counter", "=", "0", "\n", "\n", "# encoding stage", "\n", "enc_start", ".", "record", "(", ")", "\n", "sign_compressor", "=", "SignCompressor", "(", ")", "\n", "\n", "num_simulated_nodes", "=", "aggregated_grad", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "my_bits_list", "=", "[", "]", "\n", "sign_size_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_simulated_nodes", ")", ":", "\n", "            ", "my_bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "aggregated_grad", "[", "i", "]", ")", "\n", "my_bits_list", ".", "append", "(", "my_bits", ")", "\n", "sign_size_list", ".", "append", "(", "sign_size", ")", "\n", "\n", "", "my_bits_list", "=", "torch", ".", "stack", "(", "my_bits_list", ")", "# # of simulated nodes X compressed tensors     ", "\n", "\n", "#bits = [torch.empty_like(my_bits_list) for i in range(self.n_workers)]", "\n", "enc_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "enc_cost", "=", "float", "(", "enc_start", ".", "elapsed_time", "(", "enc_end", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "enc_cost", "\n", "\n", "# comm_start.record()", "\n", "# #all_gather(bits, my_bits_list)", "\n", "# comm_end.record()", "\n", "# torch.cuda.synchronize()", "\n", "comm_time_counter", "=", "0", "# in seconds", "\n", "\n", "# decoding stage", "\n", "dec_start", ".", "record", "(", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "my_bits_list", ")", "# for the norm vector, being optimistic here", "\n", "\n", "# unroll the bits", "\n", "#unrolled_bits = []", "\n", "#for their_bits in my_bits_list:", "\n", "#    for node_index in range(num_simulated_nodes):", "\n", "#        unrolled_bits.append(their_bits[node_index])", "\n", "\n", "sum_of_signs", "=", "None", "\n", "#for their_bits, their_sign_size in zip(my_bits_list, sign_size_list):", "\n", "#    uncompressed = sign_compressor.uncompress(their_bits, their_sign_size)", "\n", "for", "their_bits", "in", "my_bits_list", ":", "\n", "            ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "if", "sum_of_signs", "is", "None", ":", "\n", "                ", "sum_of_signs", "=", "uncompressed", "\n", "", "else", ":", "\n", "                ", "sum_of_signs", "+=", "uncompressed", "\n", "\n", "", "", "reduced_aggregated_grad", "=", "sum_of_signs", ".", "sign", "(", ")", "\n", "\n", "dec_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "dec_cost", "=", "float", "(", "dec_start", ".", "elapsed_time", "(", "dec_end", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "dec_cost", "\n", "return", "reduced_aggregated_grad", ",", "bits_communicated", ",", "comm_time_counter", ",", "encode_decode_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.StochasticUniformQuantization.reduce": [[414, 495], ["torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.min", "torch.max", "torch.bernoulli", "torch.zeros().to", "gradient_reducers.SignCompressor", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "gradient_reducers.SignCompressor.compress", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.distributed.all_gather", "torch.distributed.all_gather", "gradient_reducers.n_bits", "gradient_reducers.n_bits", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "range", "torch.stack().sum", "torch.cuda.Event.record", "torch.cuda.synchronize", "print", "torch.empty_like", "torch.empty_like", "gradient_reducers.SignCompressor.uncompress", "unquantized_aggregated_grad.append", "float", "torch.zeros", "range", "range", "aggregated_grad.size", "torch.where", "torch.stack", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "float", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.compress", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.uncompress"], ["    ", "def", "reduce", "(", "self", ",", "aggregated_grad", ")", ":", "\n", "        ", "\"\"\"\n        implement the binary stochastic quantization in https://arxiv.org/pdf/1611.00429.pdf\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "#sign_compressor = SignCompressor()", "\n", "comm_time_counter", "=", "0", "\n", "encode_decode_counter", "=", "0", "\n", "\n", "quantization_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "quantization_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "quantization_start", ".", "record", "(", ")", "\n", "min_val", "=", "torch", ".", "min", "(", "aggregated_grad", ")", "\n", "max_val", "=", "torch", ".", "max", "(", "aggregated_grad", ")", "\n", "prob_vector", "=", "(", "aggregated_grad", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "dices_vector", "=", "torch", ".", "bernoulli", "(", "prob_vector", ")", "# binary", "\n", "dices_vector", "=", "dices_vector", "*", "2", "-", "1", "\n", "min_max_val", "=", "torch", ".", "zeros", "(", "2", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "min_max_val", "[", "0", "]", "=", "min_val", "\n", "min_max_val", "[", "1", "]", "=", "max_val", "\n", "compressor", "=", "SignCompressor", "(", ")", "\n", "\n", "quantization_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "# initialize the min max val tensor", "\n", "encode_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "encode_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "#min_max_val = torch.stack((min_val, max_val), dim=0)", "\n", "#print(\"min max val size: {}, min max val device: {}\".format(min_max_val.size(), min_max_val.device))", "\n", "encode_start", ".", "record", "(", ")", "\n", "compressed_dice", ",", "dice_size", "=", "compressor", ".", "compress", "(", "dices_vector", ")", "\n", "encode_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "# two all-gather to collect", "\n", "comm_start", ".", "record", "(", ")", "\n", "gathered_buffer_grad", "=", "[", "torch", ".", "empty_like", "(", "compressed_dice", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "gathered_buffer_grad", ",", "compressed_dice", ")", "\n", "\n", "gathered_buffer_min_max", "=", "[", "torch", ".", "empty_like", "(", "min_max_val", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "gathered_buffer_min_max", ",", "min_max_val", ")", "\n", "\n", "bits_communicated", "+=", "n_bits", "(", "compressed_dice", ")", "# for the norm vector, being optimistic here", "\n", "bits_communicated", "+=", "n_bits", "(", "min_max_val", ")", "\n", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "\n", "decode_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decode_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decode_start", ".", "record", "(", ")", "\n", "# decompression", "\n", "unquantized_aggregated_grad", "=", "[", "]", "\n", "for", "worker_index", "in", "range", "(", "self", ".", "n_workers", ")", ":", "\n", "            ", "gathered_buffer_grad", "[", "worker_index", "]", "=", "compressor", ".", "uncompress", "(", "gathered_buffer_grad", "[", "worker_index", "]", ",", "\n", "aggregated_grad", ".", "size", "(", ")", ")", "\n", "gathered_buffer_grad", "[", "worker_index", "]", "=", "(", "gathered_buffer_grad", "[", "worker_index", "]", "+", "1", ")", "/", "2", "\n", "\n", "#tempt_grad = torch.where(gathered_buffer_grad[worker_index]==1, max_val, min_val)", "\n", "unquantized_aggregated_grad", ".", "append", "(", "torch", ".", "where", "(", "gathered_buffer_grad", "[", "worker_index", "]", "==", "1", ",", "\n", "gathered_buffer_min_max", "[", "worker_index", "]", "[", "1", "]", ",", "\n", "gathered_buffer_min_max", "[", "worker_index", "]", "[", "0", "]", ")", ")", "\n", "#max_val, min_val))", "\n", "#unquantized_aggregated_grad.append(gathered_buffer_grad[worker_index])", "\n", "#unquantized_aggregated_grad.append(tempt_grad)", "\n", "\n", "", "reduced_aggregated_grad", "=", "torch", ".", "stack", "(", "unquantized_aggregated_grad", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "decode_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "#print(\"reduced_aggregated_grad: {}\".format(reduced_aggregated_grad))", "\n", "print", "(", "\"Time Elapsed quan: {} encode: {}, comm: {}, decode: {}\"", ".", "format", "(", "quantization_start", ".", "elapsed_time", "(", "quantization_end", ")", ",", "\n", "encode_start", ".", "elapsed_time", "(", "encode_end", ")", ",", "\n", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ",", "\n", "decode_start", ".", "elapsed_time", "(", "decode_end", ")", ")", ")", "\n", "comm_time_counter", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "# in seconds", "\n", "encode_decode_counter", "=", "(", "float", "(", "quantization_start", ".", "elapsed_time", "(", "quantization_end", ")", ")", "+", "encode_start", ".", "elapsed_time", "(", "encode_end", ")", "+", "decode_start", ".", "elapsed_time", "(", "decode_end", ")", ")", "/", "1000.0", "\n", "return", "reduced_aggregated_grad", ",", "bits_communicated", ",", "comm_time_counter", ",", "encode_decode_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.RankKReducer.__init__": [[499, 506], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "n_power_iterations", "=", "0", ",", "reuse_query", "=", "False", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ")", "\n", "assert", "n_power_iterations", "==", "0", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "p_memory", "=", "None", "\n", "self", ".", "q_memory", "=", "None", "\n", "self", ".", "reuse_query", "=", "reuse_query", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.RankKReducer.set_random": [[507, 510], ["torch.manual_seed", "torch.randn", "gradient_reducers.RankKReducer.rng.randint"], "methods", ["None"], ["", "def", "set_random", "(", "self", ",", "vector", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "rng", ".", "randint", "(", "1_000_000_000", ")", ")", "\n", "vector", ".", "data", "[", ":", "]", "=", "torch", ".", "randn", "(", "*", "vector", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "# orthogonalize(vector)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.RankKReducer.reduce": [[512, 695], ["torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "zip", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "zip", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.all_reduce", "gradient_reducers.n_bits", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.TensorBuffer", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "zip", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.all_reduce", "gradient_reducers.n_bits", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "zip", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event.record", "gradient_reducers.TensorBuffer.unpack", "torch.cuda.Event.record", "torch.cuda.synchronize", "tensor.view", "min", "torch.empty", "torch.empty", "tensor.view", "min", "ps.append", "qs.append", "float", "tensor.view", "float", "tensor.view", "torch.matmul", "float", "float", "float", "float", "gradient_reducers.orthogonalize", "float", "tensor.view", "torch.matmul", "float", "float", "torch.matmul", "float", "float", "zip", "zip", "gradient_reducers.RankKReducer.p_memory[].view", "gradient_reducers.RankKReducer.q_memory[].view", "torch.cuda.Event.elapsed_time", "gradient_reducers.RankKReducer.set_random", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "tensor.view.t", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "q.t", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "tensor.ndimension", "tensor.ndimension"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.unpack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.orthogonalize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.RankKReducer.set_random"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "comm_time_counter", "=", "0", "\n", "encode_decode_counter", "=", "0", "\n", "\n", "enc_start_allocate_memory", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end_allocate_memory", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_start_prepare_q", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end_prepare_q", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_start_compute_p", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end_compute_p", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_start_r1_pack", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end_r1_pack", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_start_normalize_p", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end_normalize_p", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_start_compute_q", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "enc_end_compute_q", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "comm_start_reduce_p", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end_reduce_p", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_start_rank1_allreduce", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end_rank1_allreduce", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_start_reduce_q", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end_reduce_q", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "dec_start_outerprod", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_end_outerprod", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_start_r1_unpack", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "dec_end_r1_unpack", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "# Split the tensors into rank1-ones that will be reduced un-compressed", "\n", "# and rank > 1 tensors that are compressed", "\n", "enc_start_allocate_memory", ".", "record", "(", ")", "\n", "rank1_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", "<=", "1", "\n", "]", "\n", "high_rank_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", ">", "1", "\n", "]", "\n", "\n", "# We are building a rank-1 approximation of every tensor", "\n", "# that can be interpreted as a matrix. Let the approximation be", "\n", "# M = p q^T", "\n", "# We are allocating consequtive memory for the p's and q's", "\n", "memory_is_uninitialized", "=", "self", ".", "p_memory", "is", "None", "\n", "\n", "#with self.timer(\"reduce.allocate_memory\", verbosity=2):", "\n", "p_total_size", "=", "0", "\n", "q_total_size", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "            ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "p_total_size", "+=", "n", "*", "rank", "\n", "q_total_size", "+=", "m", "*", "rank", "\n", "", "if", "self", ".", "p_memory", "is", "None", ":", "\n", "            ", "self", ".", "p_memory", "=", "torch", ".", "empty", "(", "p_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "q_memory", "=", "torch", ".", "empty", "(", "q_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Find them again and make lists of pointers", "\n", "", "ps", "=", "[", "]", "\n", "qs", "=", "[", "]", "\n", "p_idx", "=", "0", "\n", "q_idx", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "            ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "ps", ".", "append", "(", "self", ".", "p_memory", "[", "p_idx", ":", "p_idx", "+", "n", "*", "rank", "]", ".", "view", "(", "n", ",", "rank", ")", ")", "\n", "qs", ".", "append", "(", "self", ".", "q_memory", "[", "q_idx", ":", "q_idx", "+", "m", "*", "rank", "]", ".", "view", "(", "m", ",", "rank", ")", ")", "\n", "p_idx", "+=", "n", "*", "rank", "\n", "q_idx", "+=", "m", "*", "rank", "\n", "", "enc_end_allocate_memory", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "allocate_memory_cost", "=", "float", "(", "enc_start_allocate_memory", ".", "elapsed_time", "(", "enc_end_allocate_memory", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "allocate_memory_cost", "\n", "\n", "enc_start_prepare_q", ".", "record", "(", ")", "\n", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "            ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "\n", "if", "self", ".", "reuse_query", "and", "not", "memory_is_uninitialized", ":", "\n", "# orthogonalize(q)", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# Sample a query vector q", "\n", "                ", "self", ".", "set_random", "(", "q", ")", "\n", "", "", "enc_end_prepare_q", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "prepare_q_cost", "=", "float", "(", "enc_start_prepare_q", ".", "elapsed_time", "(", "enc_end_prepare_q", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "prepare_q_cost", "\n", "\n", "enc_start_compute_p", ".", "record", "(", ")", "\n", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "            ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ",", "q", ",", "out", "=", "p", ")", "\n", "", "enc_end_compute_p", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "compute_p_cost", "=", "float", "(", "enc_start_compute_p", ".", "elapsed_time", "(", "enc_end_compute_p", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "compute_p_cost", "\n", "\n", "comm_start_reduce_p", ".", "record", "(", ")", "\n", "all_reduce", "(", "self", ".", "p_memory", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "self", ".", "p_memory", ")", "\n", "comm_end_reduce_p", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "reduce_p_cost", "=", "float", "(", "comm_start_reduce_p", ".", "elapsed_time", "(", "comm_end_reduce_p", ")", ")", "/", "1000.0", "\n", "comm_time_counter", "+=", "reduce_p_cost", "\n", "\n", "# Start communicating rank 1 tensors", "\n", "enc_start_r1_pack", ".", "record", "(", ")", "\n", "rank1_tensor_list", "=", "TensorBuffer", "(", "[", "tensor", "for", "(", "tensor", ",", "_", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "enc_end_r1_pack", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "r1_pack_cost", "=", "float", "(", "enc_start_r1_pack", ".", "elapsed_time", "(", "enc_end_r1_pack", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "r1_pack_cost", "\n", "\n", "comm_start_rank1_allreduce", ".", "record", "(", ")", "\n", "#rank1_handle = rank1_tensor_list.all_reduce(async_op=False)", "\n", "rank1_tensor_list", ".", "all_reduce", "(", "async_op", "=", "False", ")", "\n", "bits_communicated", "+=", "rank1_tensor_list", ".", "bits", "(", ")", "\n", "comm_end_rank1_allreduce", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "rank1_allreduce_cost", "=", "float", "(", "comm_start_rank1_allreduce", ".", "elapsed_time", "(", "comm_end_rank1_allreduce", ")", ")", "/", "1000.0", "\n", "comm_time_counter", "+=", "rank1_allreduce_cost", "\n", "\n", "enc_start_normalize_p", ".", "record", "(", ")", "\n", "for", "p", "in", "ps", ":", "\n", "            ", "orthogonalize", "(", "p", ")", "\n", "", "enc_end_normalize_p", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "normalize_p_cost", "=", "float", "(", "enc_start_normalize_p", ".", "elapsed_time", "(", "enc_end_normalize_p", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "normalize_p_cost", "\n", "\n", "enc_start_compute_q", ".", "record", "(", ")", "\n", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "_", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "            ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ".", "t", "(", ")", ",", "p", ",", "out", "=", "q", ")", "\n", "", "enc_end_compute_q", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "compute_q_cost", "=", "float", "(", "enc_start_compute_q", ".", "elapsed_time", "(", "enc_end_compute_q", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "compute_q_cost", "\n", "\n", "comm_start_reduce_q", ".", "record", "(", ")", "\n", "all_reduce", "(", "self", ".", "q_memory", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "self", ".", "q_memory", ")", "\n", "comm_end_reduce_q", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "reduce_q_cost", "=", "float", "(", "comm_start_reduce_q", ".", "elapsed_time", "(", "comm_end_reduce_q", ")", ")", "/", "1000.0", "\n", "comm_time_counter", "+=", "reduce_q_cost", "\n", "\n", "dec_start_outerprod", ".", "record", "(", ")", "\n", "self", ".", "q_memory", ".", "data", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "for", "p", ",", "q", ",", "(", "tensor", ",", "out", ",", "mem", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "# Set the output gradient", "\n", "            ", "torch", ".", "matmul", "(", "p", ",", "q", ".", "t", "(", ")", ",", "out", "=", "out", ".", "data", "[", ":", "]", ")", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "-", "out", "\n", "", "dec_end_outerprod", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "outerprod_cost", "=", "float", "(", "dec_start_outerprod", ".", "elapsed_time", "(", "dec_end_outerprod", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "outerprod_cost", "\n", "\n", "dec_start_r1_unpack", ".", "record", "(", ")", "\n", "#rank1_handle.wait()", "\n", "rank1_tensor_list", ".", "buffer", "/=", "self", ".", "n_workers", "\n", "rank1_tensor_list", ".", "unpack", "(", "[", "out", "for", "(", "_", ",", "out", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "dec_end_r1_unpack", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "r1_unpack_cost", "=", "float", "(", "dec_start_r1_unpack", ".", "elapsed_time", "(", "dec_end_r1_unpack", ")", ")", "/", "1000.0", "\n", "encode_decode_counter", "+=", "r1_unpack_cost", "\n", "\n", "return", "bits_communicated", ",", "comm_time_counter", ",", "encode_decode_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.n_bits": [[14, 16], ["tensor.element_size", "tensor.nelement"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "def", "n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.all_reduce": [[18, 21], ["torch.distributed.is_available", "torch.distributed.all_reduce", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce"], ["", "def", "all_reduce", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "and", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_reduce", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.all_gather": [[23, 29], ["torch.distributed.is_available", "torch.distributed.all_gather", "torch.distributed.get_world_size", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather"], ["", "", "def", "all_gather", "(", "out_list", ",", "in_tensor", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "and", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_gather", "(", "out_list", ",", "in_tensor", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "out_list", ")", "==", "1", "\n", "out_list", "[", "0", "]", ".", "data", "=", "in_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.gradient_reducers.orthogonalize": [[698, 710], ["torch.tensor", "range", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "orthogonalize", "(", "matrix", ",", "eps", "=", "torch", ".", "tensor", "(", "1e-8", ")", ")", ":", "\n", "    ", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Normalize the i'th column", "\n", "        ", "col", "=", "matrix", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "col", "/=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "col", "**", "2", ")", ")", "+", "eps", "\n", "# Project it on the rest and remove it", "\n", "if", "i", "+", "1", "<", "m", ":", "\n", "            ", "rest", "=", "matrix", "[", ":", ",", "i", "+", "1", ":", "]", "\n", "# rest -= torch.matmul(col.t(), rest) * col", "\n", "rest", "-=", "torch", ".", "sum", "(", "col", "*", "rest", ",", "dim", "=", "0", ")", "*", "col", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.Reducer.__init__": [[18, 32], ["numpy.random.RandomState", "torch.distributed.is_available", "torch.distributed.get_world_size", "torch.distributed.get_rank"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ")", ":", "\n", "        ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "M", "=", "1024", "*", "1024", "\n", "# self.precalc_numbers = (", "\n", "# torch.from_numpy(self.rng.randn(128 * M)).to(device).type(torch.float32)", "\n", "# )", "\n", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_workers", "=", "1", "\n", "", "self", ".", "rank", "=", "0", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "timer", "=", "timer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.Reducer.reduce": [[33, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"Return communicated bits\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.RankKReducer.__init__": [[38, 46], ["powersgd_grad.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "n_power_iterations", "=", "0", ",", "\n", "reuse_query", "=", "True", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "assert", "n_power_iterations", "==", "0", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "p_memory", "=", "None", "\n", "self", ".", "q_memory", "=", "None", "\n", "self", ".", "reuse_query", "=", "reuse_query", "\n", "# self.memory_update = None ", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.RankKReducer.set_random": [[48, 53], ["torch.manual_seed", "torch.randn", "powersgd_grad.RankKReducer.rng.randint"], "methods", ["None"], ["", "def", "set_random", "(", "self", ",", "vector", ")", ":", "\n", "#TODO: Verify what this is doing", "\n", "# this brings some non-determinism", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "rng", ".", "randint", "(", "1_000_000_000", ")", ")", "\n", "vector", ".", "data", "[", ":", "]", "=", "torch", ".", "randn", "(", "*", "vector", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "# orthogonalize(vector)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.RankKReducer.reduce": [[55, 252], ["powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "zip", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "zip", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "torch.distributed.all_reduce", "torch.numel", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "zip", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "torch.distributed.all_reduce", "torch.numel", "torch.cuda.synchronize", "powersgd_grad.RankKReducer.timer", "torch.cuda.synchronize", "time.time", "zip", "torch.cuda.synchronize", "zip", "tensor.view", "min", "torch.empty", "torch.empty", "tensor.view", "min", "ps.append", "qs.append", "time.time", "tensor.view", "time.time", "tensor.view", "torch.matmul", "time.time", "time.time", "powersgd_grad.orthogonalize", "time.time", "tensor.view", "torch.matmul", "time.time", "time.time", "torch.matmul", "time.time", "tensor.ndimension", "powersgd_grad.RankKReducer.p_memory[].view", "powersgd_grad.RankKReducer.q_memory[].view", "powersgd_grad.RankKReducer.set_random", "tensor.view.t", "q.t"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.orthogonalize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.RankKReducer.set_random"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "floats_communicated", "=", "0", "\n", "reducer_comm_time", "=", "0", "\n", "reducer_encdec_overhead", "=", "0", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# if use_memory and self.memory_update==None:", "\n", "# # need to intialize the vector", "\n", "# self.memory_update = [torch.zeros_like(gg) for gg in grad_in]", "\n", "\n", "# if use_memory:", "\n", "# # add the memory term to the gradient before using", "\n", "# for idx, mem_term in enumerate(self.memory_update):", "\n", "# grad_in[idx] = grad_in[idx] + mem_term", "\n", "\n", "# Split the tensors into rank1-ones that will be reduced un-compressed", "\n", "# and rank > 1 tensors that are compressed", "\n", "\n", "# No need for rank 1 tensors ", "\n", "# rank1_tensors = [", "\n", "# (tensor, out, mem)", "\n", "# for tensor, out, mem in zip(grad_in, grad_out, memory_out)", "\n", "# if tensor.ndimension() <= 1", "\n", "# ]", "\n", "high_rank_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", ">", "1", "\n", "]", "\n", "\n", "# We are building a rank-1 approximation of every tensor", "\n", "# that can be interpreted as a matrix. Let the approximation be", "\n", "# M = p q^T", "\n", "# We are allocating consequtive memory for the p's and q's", "\n", "\n", "memory_is_uninitialized", "=", "self", ".", "p_memory", "is", "None", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.allocate_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "allocate_mem_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "p_total_size", "=", "0", "\n", "q_total_size", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "p_total_size", "+=", "n", "*", "rank", "\n", "q_total_size", "+=", "m", "*", "rank", "\n", "", "if", "self", ".", "p_memory", "is", "None", ":", "\n", "                ", "self", ".", "p_memory", "=", "torch", ".", "empty", "(", "p_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "q_memory", "=", "torch", ".", "empty", "(", "q_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Find them again and make lists of pointers", "\n", "", "ps", "=", "[", "]", "\n", "qs", "=", "[", "]", "\n", "p_idx", "=", "0", "\n", "q_idx", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "ps", ".", "append", "(", "self", ".", "p_memory", "[", "p_idx", ":", "p_idx", "+", "n", "*", "rank", "]", ".", "view", "(", "n", ",", "rank", ")", ")", "\n", "qs", ".", "append", "(", "self", ".", "q_memory", "[", "q_idx", ":", "q_idx", "+", "m", "*", "rank", "]", ".", "view", "(", "m", ",", "rank", ")", ")", "\n", "p_idx", "+=", "n", "*", "rank", "\n", "q_idx", "+=", "m", "*", "rank", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "allocate_mem_dur", "=", "time", ".", "time", "(", ")", "-", "allocate_mem_start", "\n", "reducer_encdec_overhead", "+=", "allocate_mem_dur", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.prepare.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "prepare_q_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "\n", "if", "self", ".", "reuse_query", "and", "not", "memory_is_uninitialized", ":", "\n", "# orthogonalize(q)", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "# Sample a query vector q", "\n", "                    ", "self", ".", "set_random", "(", "q", ")", "\n", "", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "prepare_q_dur", "=", "time", ".", "time", "(", ")", "-", "prepare_q_start", "\n", "reducer_encdec_overhead", "+=", "prepare_q_dur", "\n", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.compute.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "compute_p_start", "=", "time", ".", "time", "(", ")", "\n", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ",", "q", ",", "out", "=", "p", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "compute_p_dur", "=", "time", ".", "time", "(", ")", "-", "compute_p_start", "\n", "reducer_encdec_overhead", "+=", "compute_p_dur", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "# Don't need all reduce", "\n", "# all_reduce(self.p_memory)", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "reduce_p_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "p_memory", ",", "async_op", "=", "False", ")", "\n", "# bits_communicated += n_bits(self.p_memory)", "\n", "floats_communicated", "+=", "torch", ".", "numel", "(", "self", ".", "p_memory", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "reduce_p_dur", "=", "time", ".", "time", "(", ")", "-", "reduce_p_start", "\n", "reducer_comm_time", "+=", "reduce_p_dur", "\n", "\n", "\n", "# Start communicating rank 1 tensors", "\n", "# no need for rank1 tensors", "\n", "# with self.timer(\"reduce.rank1.pack\", verbosity=2):", "\n", "# rank1_tensor_list = TensorBuffer([tensor for (tensor, _, _) in rank1_tensors])", "\n", "# Don't need all reduce", "\n", "# Don't need all reduce even in case of distribbuted case", "\n", "# because rank 1 tensor ill not be even part of powersgd", "\n", "#TODO: Verify above hypothesis", "\n", "# with self.timer(\"reduce.rank1.all_reduce\", verbosity=2):", "\n", "# rank1_handle = rank1_tensor_list.all_reduce(async_op=True)", "\n", "# bits_communicated += rank1_tensor_list.bits()", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.normalize.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "normalize_p_start", "=", "time", ".", "time", "(", ")", "\n", "for", "p", "in", "ps", ":", "\n", "                ", "orthogonalize", "(", "p", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "normalize_p_dur", "=", "time", ".", "time", "(", ")", "-", "normalize_p_start", "\n", "reducer_encdec_overhead", "+=", "normalize_p_dur", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.compute.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "compute_q_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "_", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ".", "t", "(", ")", ",", "p", ",", "out", "=", "q", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "compute_q_dur", "=", "time", ".", "time", "(", ")", "-", "compute_q_start", "\n", "reducer_encdec_overhead", "+=", "compute_q_dur", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "# all_reduce(self.q_memory)", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "reduce_q_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "q_memory", ",", "async_op", "=", "False", ")", "\n", "# bits_communicated += n_bits(self.q_memory)", "\n", "floats_communicated", "+=", "torch", ".", "numel", "(", "self", ".", "q_memory", ")", "\n", "self", ".", "q_memory", ".", "data", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "reduce_q_dur", "=", "time", ".", "time", "(", ")", "-", "reduce_q_start", "\n", "reducer_comm_time", "+=", "reduce_q_dur", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.outerprod\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "outerprod_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "p", ",", "q", ",", "(", "tensor", ",", "out", ",", "mem", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "# Set the output gradient", "\n", "                ", "torch", ".", "matmul", "(", "p", ",", "q", ".", "t", "(", ")", ",", "out", "=", "out", ".", "data", "[", ":", "]", ")", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "-", "out", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "outerprod_dur", "=", "time", ".", "time", "(", ")", "-", "outerprod_start", "\n", "reducer_encdec_overhead", "+=", "outerprod_dur", "\n", "# no need for rank1 tensors", "\n", "# with self.timer(\"reduce.rank1.unpack\", verbosity=2):", "\n", "# # rank1_handle.wait()", "\n", "# rank1_tensor_list.buffer /= self.n_workers", "\n", "# rank1_tensor_list.unpack([out for (_, out, _) in rank1_tensors])", "\n", "# if use_memory:", "\n", "# # very dirty hack, the previous iteration", "\n", "# # was adding the memory term, that updates the things in place", "\n", "# # and effect the whole gradient in subsequent methods", "\n", "# # this is a quick fix where i subtract the same term again", "\n", "# for idx, mem_val in enumerate(self.memory_update):", "\n", "# grad_in[idx] = grad_in[idx] - mem_val", "\n", "\n", "# if use_memory:", "\n", "# for idx, mem_update in enumerate(memory_out):", "\n", "# self.memory_update[idx] = mem_update", "\n", "", "return", "floats_communicated", ",", "reducer_comm_time", ",", "reducer_encdec_overhead", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.__init__": [[259, 270], ["torch.cat", "indices.append", "tensor.nelement", "t.view"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["def", "__init__", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "indices", "=", "[", "0", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "new_end", "=", "indices", "[", "-", "1", "]", "+", "tensor", ".", "nelement", "(", ")", "\n", "indices", ".", "append", "(", "new_end", ")", "\n", "\n", "", "self", ".", "_start_idx", "=", "indices", "[", ":", "-", "1", "]", "\n", "self", ".", "_end_idx", "=", "indices", "[", "1", ":", "]", "\n", "self", ".", "_tensors", "=", "tensors", "\n", "\n", "self", ".", "buffer", "=", "torch", ".", "cat", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "tensors", "]", ")", "# copies", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.__getitem__": [[271, 273], ["powersgd_grad.TensorBuffer.buffer[].view"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "buffer", "[", "self", ".", "_start_idx", "[", "index", "]", ":", "self", ".", "_end_idx", "[", "index", "]", "]", ".", "view", "(", "*", "self", ".", "_tensors", "[", "index", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.__len__": [[274, 276], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.pack": [[277, 283], ["zip"], "methods", ["None"], ["", "def", "pack", "(", "self", ",", "tensors", "=", "None", ")", ":", "\n", "# Optional. init already does this.", "\n", "        ", "if", "tensors", "is", "None", ":", "\n", "            ", "tensors", "=", "self", ".", "_tensors", "\n", "", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "entry", "[", ":", "]", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.unpack": [[284, 287], ["zip"], "methods", ["None"], ["", "", "def", "unpack", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "tensor", "[", ":", "]", "=", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement": [[288, 290], ["powersgd_grad.TensorBuffer.buffer.nelement"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "", "def", "nelement", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size": [[291, 293], ["powersgd_grad.TensorBuffer.buffer.element_size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size"], ["", "def", "element_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.bits": [[294, 296], ["powersgd_grad.TensorBuffer.element_size", "powersgd_grad.TensorBuffer.nelement"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "def", "bits", "(", "self", ")", ":", "\n", "        ", "return", "8", "*", "self", ".", "nelement", "(", ")", "*", "self", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce": [[297, 299], ["torch.distributed.all_reduce"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce"], ["", "def", "all_reduce", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather": [[300, 308], ["powersgd_grad.TensorBuffer.all_gather"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_gather"], ["", "def", "all_gather", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "buffers", "=", "[", "torch", ".", "empty_like", "(", "self", ".", "buffer", ")", "for", "i", "in", "range", "(", "n_workers", ")", "]", "\n", "handle", "=", "all_gather", "(", "buffers", ",", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "if", "async_op", ":", "\n", "            ", "return", "buffers", ",", "handle", "\n", "", "else", ":", "\n", "            ", "return", "buffers", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.n_bits": [[309, 311], ["tensor.element_size", "tensor.nelement"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["", "", "", "def", "n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.orthogonalize": [[315, 327], ["range", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "orthogonalize", "(", "matrix", ")", ":", "\n", "    ", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Normalize the i'th column", "\n", "        ", "col", "=", "matrix", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "col", "/=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "col", "**", "2", ")", ")", "\n", "# Project it on the rest and remove it", "\n", "if", "i", "+", "1", "<", "m", ":", "\n", "            ", "rest", "=", "matrix", "[", ":", ",", "i", "+", "1", ":", "]", "\n", "# rest -= torch.matmul(col.t(), rest) * col", "\n", "rest", "-=", "torch", ".", "sum", "(", "col", "*", "rest", ",", "dim", "=", "0", ")", "*", "col", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.add_fit_args": [[260, 302], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_fit_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--norm-thresh\"", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"norm thresh for layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-type\"", ",", "default", "=", "\"languageModel\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"type of model helps to select the right config\"", ")", "\n", "#parser.add_argument(\"--auto-switch\", default=False, action=\"store_true\",", "\n", "#                    help=\"Enables automatic switching\")", "\n", "# the presence of fixed-k in args will make the value true", "\n", "#parser.add_argument(\"--fixed-k\", default=False, action=\"store_true\",", "\n", "#                    help=\"Indicates if we want to use a fixed k\")", "\n", "#parser.add_argument(\"--k\", default=None, type=int, ", "\n", "#                    help= \"If fixed-k is true then uses this for training\")", "\n", "parser", ".", "add_argument", "(", "\"--norm-file\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"wikitext_lstm_full_rank.json\"", ")", "\n", "#parser.add_argument(\"--start-k\", default=False, action=\"store_true\",", "\n", "#                    help=\"starts with a k\")", "\n", "#parser.add_argument(\"--k-start\", default=None, type= int,", "\n", "#                    help = \"Fix the start k\")", "\n", "#parser.add_argument(\"--fixed-sched\", default=False, action=\"store_true\",", "\n", "#                    help=\"follow a fixed schedule\")", "\n", "parser", ".", "add_argument", "(", "\"--zero-memory\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--compressor\"", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ",", "help", "=", "\"which gradient compressor to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config-mode\"", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ",", "help", "=", "\"which framework to use: pufferfish|powerfish|vanilla.\"", ")", "\n", "# here powerfish indicates that we conduct powersgd for the full-rank warmup epoch then swtich to full pufferfish", "\n", "\n", "# distributed arguments", "\n", "parser", ".", "add_argument", "(", "\"--distributed\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Indicates if we have to use distributed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master-ip\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Master IP for NCCL/MPI\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-nodes\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Indicate number of nodes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Rank of this node\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.seed": [[303, 314], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "print"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "print", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator": [[316, 321], ["enumerate", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "norm_calculator", "(", "model", ")", ":", "\n", "    ", "model_norm", "=", "0", "\n", "for", "param_index", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "model_norm", "+=", "torch", ".", "norm", "(", "param", ")", "**", "2", "\n", "", "return", "torch", ".", "sqrt", "(", "model_norm", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.get_lr": [[323, 365], ["min", "range", "range", "range", "print", "range", "range", "range", "NotImplementedError", "min"], "function", ["None"], ["", "def", "get_lr", "(", "config", ",", "epoch_num", ")", ":", "\n", "    ", "\"\"\"\n    Return learning rate in case of the time \n    \"\"\"", "\n", "max_factor", "=", "config", "[", "'lr_warmup_scaling'", "]", "\n", "factor", "=", "1.0", "+", "(", "max_factor", "-", "1.0", ")", "*", "min", "(", "epoch_num", "/", "config", "[", "'lr_warmup_epochs'", "]", ",", "1.0", ")", "\n", "if", "config", "[", "'name'", "]", "==", "\"CNN\"", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "        ", "if", "epoch_num", "<", "150", ":", "\n", "            ", "if", "epoch_num", "in", "range", "(", "config", "[", "\"lr_warmup_epochs\"", "]", ")", ":", "\n", "                ", "new_lr", "=", "config", "[", "'init_lr'", "]", "*", "factor", "\n", "", "else", ":", "\n", "# sometimes pufferfish+powersgd suffers from large batch training after full rank warmup", "\n", "# so let's do one simple trick here that after full-rank warmup, we do another lr warmup", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "epoch_num", "in", "range", "(", "config", "[", "\"full_rank_warmup_epoch\"", "]", ",", "config", "[", "\"full_rank_warmup_epoch\"", "]", "+", "config", "[", "'lowrank_lr_re_warmup_epochs'", "]", ")", ":", "\n", "                        ", "factor", "=", "1.0", "+", "(", "max_factor", "-", "1.0", ")", "*", "min", "(", "(", "epoch_num", "-", "config", "[", "\"full_rank_warmup_epoch\"", "]", ")", "/", "config", "[", "\"lowrank_lr_re_warmup_epochs\"", "]", ",", "1.0", ")", "\n", "new_lr", "=", "config", "[", "'init_lr'", "]", "*", "factor", "\n", "", "else", ":", "\n", "                        ", "new_lr", "=", "config", "[", "'init_lr'", "]", "*", "max_factor", "\n", "", "", "else", ":", "\n", "                    ", "new_lr", "=", "config", "[", "'init_lr'", "]", "*", "max_factor", "\n", "", "", "return", "new_lr", "\n", "", "elif", "epoch_num", ">=", "150", "and", "epoch_num", "<", "250", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "*", "max_factor", "/", "10.0", "\n", "return", "new_lr", "\n", "", "elif", "epoch_num", ">=", "250", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "*", "max_factor", "/", "100.0", "\n", "return", "new_lr", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Something went wrong in learning rate selection\"", ")", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "        ", "if", "epoch_num", "in", "range", "(", "30", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "\n", "", "elif", "epoch_num", "in", "range", "(", "30", ",", "60", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "10.0", "\n", "", "elif", "epoch_num", "in", "range", "(", "60", ",", "80", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "100.0", "\n", "", "elif", "epoch_num", "in", "range", "(", "80", ",", "90", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "1000.0", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Invalid Epoch ....\"", ")", "\n", "", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.add_weight_decay": [[367, 380], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.vectorize_grad": [[382, 386], ["torch._utils._flatten_dense_tensors"], "function", ["None"], ["", "def", "vectorize_grad", "(", "grad_train", ")", ":", "\n", "#return torch.cat([grad_value.view(-1) for grad_value in grad_train])", "\n", "# better implementation?", "\n", "    ", "return", "_flatten_dense_tensors", "(", "grad_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.devectorize_grad": [[387, 394], ["enumerate", "model.parameters", "out_grad_list.append", "p.numel", "reduced_grad[].view", "p.size", "p.numel"], "function", ["None"], ["", "def", "devectorize_grad", "(", "reduced_grad", ",", "model", ")", ":", "\n", "    ", "out_grad_list", "=", "[", "]", "\n", "index_bias", "=", "0", "\n", "for", "p_index", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "out_grad_list", ".", "append", "(", "reduced_grad", "[", "index_bias", ":", "index_bias", "+", "p", ".", "numel", "(", ")", "]", ".", "view", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "index_bias", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "out_grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.replace_grad_by_momentum": [[396, 409], ["ValueError"], "function", ["None"], ["", "def", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ",", "config", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Inplace operation that applies momentum to a gradient.\n    This distinguishes between types of momentum (heavy-ball vs nesterov)\n    \"\"\"", "\n", "if", "config", "[", "\"optimizer_momentum_type\"", "]", "==", "\"heavy-ball\"", ":", "\n", "        ", "grad", "[", ":", "]", "=", "momentum", "\n", "", "if", "config", "[", "\"optimizer_momentum_type\"", "]", "==", "\"exponential_moving_average\"", ":", "\n", "        ", "grad", "[", ":", "]", "=", "momentum", "\n", "", "elif", "config", "[", "\"optimizer_momentum_type\"", "]", "==", "\"nesterov\"", ":", "\n", "        ", "grad", "[", ":", "]", "+=", "momentum", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown momentum type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.main": [[411, 1094], ["dict", "dict", "dict", "collections.defaultdict", "dict", "dict", "collections.defaultdict", "dict", "train_network.build", "logger.info", "print", "range", "print", "torch.init_process_group", "print", "logger.info", "utils.get_weight_decay", "enumerate", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "main_clean_up.norm_calculator", "main_clean_up.add_weight_decay", "torch.SGD", "main_clean_up.add_weight_decay", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.SGD", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gradient_reducers.StochasticUniformQuantization", "utils.get_weight_decay", "train_network.build.sampler.set_epoch", "train_network.build.init_hybrid_net", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "list", "torch.cuda.Event.record", "train_network.build.batch_loss_and_gradient", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "open", "json.dump", "open", "json.dump", "open", "json.dump", "datetime.timedelta", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "warmup_scheduler.GradualWarmupScheduler", "main_clean_up.add_weight_decay", "torch.SGD", "train_network.build.model.parameters", "train_network.build.model.parameters", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "train_network.build.model.parameters", "train_network.build.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gradient_reducers.SignSGDwithMajorityVoteReducer", "main_clean_up.get_lr", "logger.info", "main_clean_up.add_weight_decay", "optim.SGD.zero_grad", "train_network.build.lowrank_model.zero_grad", "range", "print", "train_network.build.model.train", "print", "train_network.build.lowrank_model.train", "train_network.build.model.train", "NotImplementedError", "float", "zip", "main_clean_up.vectorize_grad", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "float", "range", "train_network.build.validate_model", "train_network.build.validate_lowrank_model", "train_network.build.validate_model", "NotImplementedError", "torch.optim.lr_scheduler.MultiStepLR.step", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "train_network.build.lowrank_model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "warmup_scheduler.GradualWarmupScheduler", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError", "train_network.build.lowrank_model.parameters", "train_network.build.lowrank_model.parameters", "train_network.build.lowrank_model.parameters", "gradient_reducers.RankKReducer", "NotImplementedError", "range", "NotImplementedError", "range", "main_clean_up.get_lr", "logger.info", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.cuda.Event.elapsed_time", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.cuda.Event.elapsed_time", "gradient_reducers.RankKReducer", "logger.info", "logger.info", "logger.info", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError", "grad.clone().detach", "momentum.mul_().add_", "main_clean_up.replace_grad_by_momentum", "range", "zip", "zip", "zip", "range", "torch.cuda.Event.record", "gradient_reducers.RankKReducer.reduce", "range", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "float", "NotImplementedError", "range", "enumerate", "enumerate", "enumerate", "NotImplementedError", "optim.SGD.step", "optim.SGD.zero_grad", "range", "zip", "zip", "zip", "range", "zip", "train_network.build.model.zero_grad", "zip", "train_network.build.lowrank_model.zero_grad", "zip", "train_network.build.model.zero_grad", "range", "warmup_scheduler.GradualWarmupScheduler.step", "torch.optim.lr_scheduler.MultiStepLR.step", "warmup_scheduler.GradualWarmupScheduler.step", "NotImplementedError", "range", "torch.optim.lr_scheduler.MultiStepLR.step", "NotImplementedError", "logger.info", "logger.info", "NotImplementedError", "gradient_reducers.RankKReducer.reduce", "range", "main_clean_up.devectorize_grad", "main_clean_up.devectorize_grad", "main_clean_up.devectorize_grad", "NotImplementedError", "torch.cuda.Event.elapsed_time", "train_network.build.model.parameters", "train_network.build.lowrank_model.parameters", "train_network.build.model.parameters", "range", "optim.SGD.step", "optim.SGD.zero_grad", "optim.SGD.step", "optim.SGD.zero_grad", "optim.SGD.step", "optim.SGD.zero_grad", "NotImplementedError", "enumerate", "train_network.build.model.parameters", "train_network.build.model.zero_grad", "NotImplementedError", "train_network.build.model.parameters", "train_network.build.lowrank_model.parameters", "train_network.build.model.parameters", "NotImplementedError", "range", "zip", "zip", "zip", "train_network.build.model.parameters", "p.data.add_", "train_network.build.lowrank_model.parameters", "p.data.add_", "train_network.build.model.parameters", "p.data.add_", "NotImplementedError", "NotImplemented", "grad.clone", "momentum.mul_", "range", "zip", "main_clean_up.vectorize_grad", "NotImplementedError", "range", "main_clean_up.devectorize_grad", "range", "train_network.build.model.parameters", "p.data.add_", "grad.add_", "grad.add_", "grad.add_", "range", "zip", "enumerate", "main_clean_up.replace_grad_by_momentum", "main_clean_up.replace_grad_by_momentum", "main_clean_up.replace_grad_by_momentum", "NotImplementedError", "range", "zip", "train_network.build.model.zero_grad", "optim.SGD.step", "optim.SGD.zero_grad", "print", "float", "param.grad.data.clone().detach", "momenta[].data.mul_().add_", "train_network.build.model.parameters", "train_network.build.lowrank_model.parameters", "grad.clone().detach", "grad.clone().detach", "grad.clone().detach", "range", "zip", "train_network.build.model.parameters", "p.data.add_", "range", "gradient_reducers.RankKReducer.reduce", "gradient_reducers.RankKReducer.reduce", "torch.cuda.Event.elapsed_time", "param.data.detach", "param.data.detach", "param.data.detach", "grad.add_", "momentum.mul_().add_", "momentum.mul_().add_", "momentum.mul_().add_", "momentum.mul_().add_", "momentum.mul_().add_", "momentum.mul_().add_", "main_clean_up.replace_grad_by_momentum", "range", "gradient_reducers.RankKReducer.reduce", "print", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "gradient_reducers.RankKReducer.reduce", "NotImplementedError", "param.grad.data.clone", "momenta[].data.mul_", "grad.clone", "grad.clone", "grad.clone", "grad.clone().detach", "param.data.detach", "momentum.mul_", "momentum.mul_", "momentum.mul_", "momentum.mul_", "momentum.mul_", "momentum.mul_", "momentum.mul_().add_", "momentum.mul_().add_", "grad.clone", "momentum.mul_", "momentum.mul_"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.train_network.__init__.build", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.get_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_clean_up.norm_calculator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.get_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.init_hybrid_net", "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.batch_loss_and_gradient", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.get_lr", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.validate_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.validate_lowrank_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.validate_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.get_lr", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "chosen_method_log", "=", "dict", "(", ")", "# this writes things when method is changed", "\n", "current_method_log", "=", "dict", "(", ")", "# this will monitor what is the current method ", "\n", "candidate_method_stat", "=", "dict", "(", ")", "# this tracks the thresh for all candidate method", "\n", "timing_log", "=", "defaultdict", "(", "list", ")", "\n", "floats_communicated", "=", "dict", "(", ")", "\n", "#grad_calc_dict = dict()", "\n", "ratio_calc_dict", "=", "dict", "(", ")", "\n", "compute_time_per_dict", "=", "defaultdict", "(", "dict", ")", "\n", "breakdown_time_log_dict", "=", "dict", "(", ")", "\n", "\n", "prev_norm", "=", "None", "\n", "json_f_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", "\n", "current_method_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_epoch_method.json\"", "\n", "candidate_methods_stat_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_candidate_method_stats.json\"", "\n", "timing_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_timing_log.json\"", "\n", "bytes_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_floats_communicated.json\"", "\n", "ratio_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_ratio_vals.json\"", "\n", "grad_calc_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_grad_norm_vals.json\"", "\n", "per_iteration_compute_time_log", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_iteration_compute_time.json\"", "\n", "breakdown_time_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_epoch_breakdown_time.json\"", "\n", "\n", "#TODO: Clean this up to manually select the model ", "\n", "if", "args", ".", "model_type", "==", "\"CNN\"", ":", "\n", "        ", "if", "args", ".", "config_mode", "==", "\"vanilla\"", ":", "\n", "            ", "if", "args", ".", "compressor", "==", "\"powersgd\"", ":", "\n", "                ", "config", "=", "cifar10_config_vanilla_powersgd", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "                ", "config", "=", "cifar10_config_vanilla_signum", "\n", "", "else", ":", "\n", "                ", "config", "=", "cifar10_config_vanilla", "\n", "", "", "elif", "args", ".", "config_mode", "==", "\"pufferfish\"", ":", "\n", "# TODO: let's add pufferfish + powersgd here", "\n", "            ", "config", "=", "cifar10_config_pufferfish", "\n", "", "elif", "args", ".", "config_mode", "==", "\"powerfish\"", ":", "\n", "            ", "config", "=", "cifar10_config_powerfish", "\n", "", "", "elif", "args", ".", "model_type", "==", "\"languageModel\"", ":", "\n", "        ", "config", "=", "lstm_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"newlanguageModel\"", ":", "\n", "        ", "config", "=", "new_lstm_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"imagenet\"", ":", "\n", "#config = imagenet_config", "\n", "        ", "if", "args", ".", "config_mode", "==", "\"vanilla\"", ":", "\n", "            ", "config", "=", "imagenet_vanilla_config", "\n", "", "elif", "args", ".", "config_mode", "==", "\"pufferfish\"", ":", "\n", "            ", "config", "=", "imagenet_pufferfish_config", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported config mode ...\"", ")", "\n", "", "", "elif", "args", ".", "model_type", "==", "\"cifar10\"", ":", "\n", "        ", "config", "=", "cifar10_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"svhn\"", ":", "\n", "        ", "config", "=", "svhn_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"squeezenet_cifar\"", ":", "\n", "        ", "config", "=", "cifar_squeezenet_config", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"{} not NotImplemented\"", ".", "format", "(", "args", ".", "model_type", ")", ")", "\n", "", "config", "[", "'is_distributed'", "]", "=", "False", "# adding a new key in the config", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "print", "(", "\"Initializing distributed\"", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"NCCL\"", ",", "init_method", "=", "args", ".", "master_ip", ",", "\n", "timeout", "=", "datetime", ".", "timedelta", "(", "seconds", "=", "120", ")", ",", "\n", "world_size", "=", "args", ".", "num_nodes", ",", "rank", "=", "args", ".", "rank", ")", "\n", "config", "[", "'is_distributed'", "]", "=", "True", "\n", "print", "(", "\"Distributed Initialized\"", ")", "\n", "", "train_task", "=", "train_network", ".", "build", "(", "config", "[", "'dataset'", "]", ",", "config", ")", "\n", "logger", ".", "info", "(", "\"==> Model Architecture: {}\"", ".", "format", "(", "train_task", ".", "model", ")", ")", "\n", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"==> Lowrank Model Architecture: {}\"", ".", "format", "(", "train_task", ".", "lowrank_model", ")", ")", "\n", "\n", "#TODO: Fix this for distributed", "\n", "# use parameter groups to get things for different learning rates", "\n", "# and weight decay parameters ", "\n", "", "current_lr", "=", "config", "[", "'init_lr'", "]", "\n", "\n", "print", "(", "\"Initi model Norm: {}, rank: {}\"", ".", "format", "(", "norm_calculator", "(", "train_task", ".", "model", ")", ",", "args", ".", "rank", ")", ")", "\n", "\n", "if", "args", ".", "compressor", "not", "in", "(", "\"signum\"", ",", "\"powersgd\"", ")", ":", "\n", "        ", "if", "config", "[", "'name'", "]", "==", "\"CNN\"", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "# optimizer only for langauge model", "\n", "# otherwise we are going manual\\", "\n", "# my guess is that repackage thing for language models changes", "\n", "# the model structure and the optimizer is registered only for some of", "\n", "# the parameters", "\n", "#optimizer = optim.SGD(train_task.model.parameters(), lr=current_lr,", "\n", "#                                momentum=config['momentum'],", "\n", "#                                weight_decay=1e-4)", "\n", "            ", "parameters", "=", "add_weight_decay", "(", "train_task", ".", "model", ",", "weight_decay", "=", "1e-4", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "0", ")", "\n", "\n", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                ", "optimizer_lowrank", "=", "optim", ".", "SGD", "(", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "current_lr", "*", "config", "[", "'lr_warmup_scaling'", "]", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "if", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                ", "scheduler_multi_step", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "config", "[", "\"lr_warmup_epochs\"", "]", "-", "1", "for", "e", "in", "config", "[", "\"decay_steps\"", "]", "]", ",", "\n", "gamma", "=", "config", "[", "\"decay_factor\"", "]", ")", "\n", "scheduler_warmup", "=", "GradualWarmupScheduler", "(", "optimizer", ",", "\n", "multiplier", "=", "config", "[", "\"lr_warmup_scaling\"", "]", ",", "\n", "total_epoch", "=", "config", "[", "\"lr_warmup_epochs\"", "]", ",", "\n", "after_scheduler", "=", "scheduler_multi_step", ")", "\n", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                ", "scheduler_multi_step", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "-", "config", "[", "\"lr_warmup_epochs\"", "]", "-", "1", "for", "e", "in", "config", "[", "\"decay_steps\"", "]", "]", ",", "\n", "gamma", "=", "config", "[", "\"decay_factor\"", "]", ")", "\n", "scheduler_warmup", "=", "GradualWarmupScheduler", "(", "optimizer", ",", "\n", "multiplier", "=", "config", "[", "\"lr_warmup_scaling\"", "]", ",", "\n", "total_epoch", "=", "config", "[", "\"lr_warmup_epochs\"", "]", ",", "\n", "after_scheduler", "=", "scheduler_multi_step", ")", "\n", "scheduler_multi_step_lowrank", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_lowrank", ",", "\n", "milestones", "=", "[", "e", "-", "config", "[", "\"full_rank_warmup_epoch\"", "]", "-", "1", "for", "e", "in", "config", "[", "\"decay_steps\"", "]", "]", ",", "\n", "gamma", "=", "config", "[", "\"decay_factor\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "# parameters ", "\n", "            ", "parameters", "=", "add_weight_decay", "(", "train_task", ".", "model", ",", "config", "[", "'weight_decay'", "]", ")", "\n", "# weight decay is incorporated in the parameters", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "weight_decay", "=", "0", ")", "\n", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                ", "lowrank_parameters", "=", "add_weight_decay", "(", "train_task", ".", "lowrank_model", ",", "config", "[", "'weight_decay'", "]", ")", "\n", "optimizer_lowrank", "=", "optim", ".", "SGD", "(", "lowrank_parameters", ",", "\n", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "0", ")", "\n", "\n", "", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "for", "e", "in", "config", "[", "'decay_steps'", "]", "]", ",", "\n", "gamma", "=", "config", "[", "'lr_decay_factor'", "]", ")", "\n", "\n", "", "if", "config", "[", "'name'", "]", "==", "\"squeezenet_cifar\"", ":", "\n", "# special optimizer for squeezenet", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "", "", "else", ":", "\n", "        ", "optimizer", "=", "None", "\n", "\n", "\n", "", "current_test_loss", "=", "None", "\n", "best_test_loss", "=", "None", "\n", "\n", "if", "args", ".", "compressor", "in", "(", "\"signum\"", ",", "\"powersgd\"", ")", ":", "\n", "        ", "momenta", "=", "[", "torch", ".", "empty_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "            ", "momenta_lowrank", "=", "[", "torch", ".", "empty_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", "]", "\n", "", "", "if", "args", ".", "compressor", "==", "\"powersgd\"", ":", "\n", "# handle error feedback", "\n", "        ", "memories", "=", "[", "torch", ".", "zeros_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "# handle error feedback lowrank", "\n", "            ", "memories_lowrank", "=", "[", "torch", ".", "zeros_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", "]", "\n", "send_buffers_lowrank", "=", "[", "torch", ".", "zeros_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", "]", "\n", "# for powerfish, we don't need to initialize these buffers as we switches to normal low-rank training         ", "\n", "\n", "", "", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "        ", "grad_compressor", "=", "None", "\n", "", "elif", "args", ".", "compressor", "==", "\"suquantization\"", ":", "\n", "        ", "grad_compressor", "=", "StochasticUniformQuantization", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ")", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "        ", "grad_compressor", "=", "SignSGDwithMajorityVoteReducer", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ")", "\n", "", "elif", "args", ".", "compressor", "==", "\"powersgd\"", ":", "\n", "        ", "grad_compressor", "=", "RankKReducer", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ",", "\n", "n_power_iterations", "=", "0", ",", "\n", "reuse_query", "=", "config", "[", "'optimizer_reducer_reuse_query'", "]", ",", "\n", "rank", "=", "config", "[", "'optimizer_reducer_rank'", "]", ")", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "            ", "grad_compressor_lowrank", "=", "RankKReducer", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ",", "\n", "n_power_iterations", "=", "0", ",", "\n", "reuse_query", "=", "config", "[", "'optimizer_reducer_reuse_query'", "]", ",", "\n", "rank", "=", "config", "[", "'optimizer_reducer_rank'", "]", ")", "\n", "# for powerfish, we don't need to initialize these buffers as we switches to normal low-rank training         ", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "\n", "", "wds", "=", "[", "get_weight_decay", "(", "name", ",", "config", ")", "for", "name", "in", "train_task", ".", "parameter_names", "]", "\n", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "        ", "lowrank_wds", "=", "[", "get_weight_decay", "(", "name", ",", "config", ")", "for", "name", "in", "train_task", ".", "lowrank_parameter_names", "]", "\n", "# for powerfish, we don't need to initialize these buffers as we switches to normal low-rank training", "\n", "\n", "", "for", "epoch", "in", "range", "(", "config", "[", "'num_epochs'", "]", ")", ":", "\n", "# to put into the `breakdown_time_log`", "\n", "        ", "epoch_compute_time", "=", "0.0", "\n", "epoch_comm_time", "=", "0.0", "\n", "epoch_total_time", "=", "0.0", "\n", "epoch_encoding_overhead", "=", "0.0", "\n", "epoch_iter_time", "=", "0.0", "\n", "\n", "# for logging out the current learning rate", "\n", "if", "args", ".", "compressor", "not", "in", "(", "\"signum\"", ",", "\"powersgd\"", ")", ":", "\n", "            ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                    ", "for", "param_group", "in", "optimizer_lowrank", ".", "param_groups", ":", "\n", "                        ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                    ", "current_lr", "=", "get_lr", "(", "config", "=", "config", ",", "epoch_num", "=", "epoch", ")", "\n", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "current_lr", ")", ")", "\n", "", "elif", "epoch", "==", "config", "[", "'full_rank_warmup_epoch'", "]", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "for", "param_group", "in", "optimizer_lowrank", ".", "param_groups", ":", "\n", "                        ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "", "else", ":", "\n", "                ", "current_lr", "=", "get_lr", "(", "config", "=", "config", ",", "epoch_num", "=", "epoch", ")", "\n", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "current_lr", ")", ")", "\n", "\n", "", "", "if", "config", "[", "'is_distributed'", "]", ":", "\n", "            ", "train_task", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "# set epoch to make sure the data is reshuffled per epoch", "\n", "\n", "", "elements_per_epoch", "=", "0", "\n", "\n", "if", "config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", "and", "epoch", "==", "config", "[", "\"full_rank_warmup_epoch\"", "]", ":", "\n", "            ", "train_task", ".", "init_hybrid_net", "(", ")", "\n", "\n", "if", "args", ".", "compressor", "not", "in", "(", "\"signum\"", ",", "\"powersgd\"", ")", "or", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "# let's reset the optimizer here:", "\n", "                ", "lowrank_parameters", "=", "add_weight_decay", "(", "train_task", ".", "lowrank_model", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "optimizer_lowrank", "=", "optim", ".", "SGD", "(", "lowrank_parameters", ",", "\n", "lr", "=", "config", "[", "'init_lr'", "]", "*", "config", "[", "'lr_warmup_scaling'", "]", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "0", ")", "\n", "scheduler_multi_step_lowrank", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_lowrank", ",", "\n", "milestones", "=", "[", "e", "-", "config", "[", "\"full_rank_warmup_epoch\"", "]", "for", "e", "in", "config", "[", "\"decay_steps\"", "]", "]", ",", "\n", "gamma", "=", "config", "[", "\"decay_factor\"", "]", ")", "\n", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                    ", "optimizer_lowrank", "=", "optim", ".", "SGD", "(", "lowrank_parameters", ",", "\n", "lr", "=", "config", "[", "'init_lr'", "]", "*", "config", "[", "'lr_warmup_scaling'", "]", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "0", ")", "\n", "scheduler_multi_step_lowrank", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_lowrank", ",", "\n", "milestones", "=", "[", "e", "-", "config", "[", "\"full_rank_warmup_epoch\"", "]", "for", "e", "in", "config", "[", "\"decay_steps\"", "]", "]", ",", "\n", "gamma", "=", "config", "[", "\"decay_factor\"", "]", ")", "\n", "#scheduler_multi_step_lowrank = torch.optim.lr_scheduler.MultiStepLR(optimizer_lowrank, ", "\n", "#                                            milestones=[e-config[\"full_rank_warmup_epoch\"]-config[\"lowrank_lr_re_warmup_epochs\"]-1 for e in config[\"decay_steps\"]], ", "\n", "#                                            gamma=config[\"decay_factor\"])", "\n", "#scheduler_warmup_powerfish = GradualWarmupScheduler(optimizer_lowrank, ", "\n", "#                    multiplier=config[\"lr_warmup_scaling\"], ", "\n", "#                    total_epoch=config[\"lowrank_lr_re_warmup_epochs\"], ", "\n", "#                    after_scheduler=scheduler_multi_step_lowrank)", "\n", "for", "param_group", "in", "optimizer_lowrank", ".", "param_groups", ":", "\n", "                        ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode ...\"", ")", "\n", "\n", "", "optimizer_lowrank", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                ", "optimizer_lowrank", "=", "None", "\n", "scheduler_multi_step_lowrank", "=", "None", "\n", "train_task", ".", "lowrank_model", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "# note that currently we assume everything is running over CUDA", "\n", "", "", "if", "config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                ", "print", "(", "\"epoch: {}, operating vanilla model ....\"", ".", "format", "(", "epoch", ")", ")", "\n", "train_task", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"epoch: {}, operating low rank model ....\"", ".", "format", "(", "epoch", ")", ")", "\n", "train_task", ".", "lowrank_model", ".", "train", "(", ")", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "            ", "train_task", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "\n", "", "for", "iter_index", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_task", ".", "train_loader", ")", ":", "\n", "            ", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "debug_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "debug_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "iter_start", ".", "record", "(", ")", "\n", "\n", "out_grad_list", "=", "list", "(", ")", "#list to store output gradients", "\n", "\n", "comp_start", ".", "record", "(", ")", "\n", "grad_train", "=", "train_task", ".", "batch_loss_and_gradient", "(", "batch_idx", "=", "iter_index", ",", "data", "=", "data", ",", "target", "=", "target", ",", "logger", "=", "logger", ",", "epoch", "=", "epoch", ")", "\n", "comp_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "comp_start", ".", "elapsed_time", "(", "comp_end", ")", ")", "/", "1000.0", "\n", "epoch_compute_time", "+=", "iter_comp_dur", "\n", "#print(\"@@@@@@ Epoch: {} Iter: {} Iter Comp Dur: {}\".format(epoch, iter_index, iter_comp_dur))", "\n", "\n", "if", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "# based on the discussion in https://arxiv.org/pdf/1810.05291.pdf, ", "\n", "# momentum rather than gradient is compressed", "\n", "# we thus calculate the momentum first", "\n", "                ", "for", "grad", ",", "momentum", "in", "zip", "(", "grad_train", ",", "momenta", ")", ":", "\n", "                    ", "if", "epoch", "==", "0", "and", "iter_index", "==", "0", ":", "\n", "                        ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "\n", "alpha", "=", "1", "-", "config", "[", "\"momentum\"", "]", ",", "other", "=", "grad", "\n", ")", "\n", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ",", "config", "=", "config", ")", "\n", "\n", "# aggregate the gradients here:", "\n", "", "", "", "if", "args", ".", "compressor", "!=", "\"powersgd\"", ":", "\n", "                ", "concat_grad", "=", "vectorize_grad", "(", "grad_train", ")", "\n", "", "else", ":", "\n", "# implement err feedback step here", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_train", ",", "memories", ",", "send_buffers", ")", ":", "\n", "                            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "", "else", ":", "\n", "                        ", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_train", ",", "memories_lowrank", ",", "send_buffers_lowrank", ")", ":", "\n", "                            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                    ", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_train", ",", "memories", ",", "send_buffers", ")", ":", "\n", "                        ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_train", ",", "memories", ",", "send_buffers", ")", ":", "\n", "                            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "", "else", ":", "\n", "# we switch back to normal low-rank training", "\n", "                        ", "concat_grad", "=", "vectorize_grad", "(", "grad_train", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "# communication step", "\n", "", "", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                ", "comm_start", ".", "record", "(", ")", "\n", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                ", "if", "epoch", "not", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                    ", "comm_start", ".", "record", "(", ")", "\n", "\n", "", "", "if", "config", "[", "'grad_comb'", "]", ":", "\n", "                ", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                    ", "torch", ".", "distributed", ".", "all_reduce", "(", "concat_grad", ",", "async_op", "=", "False", ")", "\n", "concat_grad", "[", ":", "]", "=", "concat_grad", "/", "args", ".", "num_nodes", "\n", "", "elif", "args", ".", "compressor", "==", "\"suquantization\"", ":", "\n", "#print(\"##### max: {}, min grad: {}\".format(torch.max(concat_grad), torch.min(concat_grad)))", "\n", "                    ", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "concat_grad", ")", "\n", "concat_grad", "[", ":", "]", "=", "reduced_aggregated_grad", "/", "args", ".", "num_nodes", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "                    ", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "concat_grad", ")", "\n", "concat_grad", "[", ":", "]", "=", "reduced_aggregated_grad", "\n", "", "elif", "args", ".", "compressor", "==", "\"powersgd\"", ":", "\n", "                    ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "grad_in", "=", "send_buffers", ",", "\n", "grad_out", "=", "grad_train", ",", "\n", "memory_out", "=", "memories", ")", "\n", "", "else", ":", "\n", "                            ", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor_lowrank", ".", "reduce", "(", "grad_in", "=", "send_buffers_lowrank", ",", "\n", "grad_out", "=", "grad_train", ",", "\n", "memory_out", "=", "memories_lowrank", ")", "\n", "", "print", "(", "\"@@@@@@ Epoch: {}, iter: {}, comm_time: {}\"", ".", "format", "(", "epoch", ",", "iter_index", ",", "compressor_iter_comm_time", ")", ")", "\n", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "grad_in", "=", "send_buffers", ",", "\n", "grad_out", "=", "grad_train", ",", "\n", "memory_out", "=", "memories", ")", "\n", "print", "(", "\"@@@@@@ Epoch: {}, iter: {}, comm_time: {}\"", ".", "format", "(", "epoch", ",", "iter_index", ",", "compressor_iter_comm_time", ")", ")", "\n", "", "else", ":", "\n", "                            ", "torch", ".", "distributed", ".", "all_reduce", "(", "concat_grad", ",", "async_op", "=", "False", ")", "\n", "concat_grad", "[", ":", "]", "=", "concat_grad", "/", "args", ".", "num_nodes", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                        ", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "grad_in", "=", "send_buffers", ",", "\n", "grad_out", "=", "grad_train", ",", "\n", "memory_out", "=", "memories", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "", "", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                ", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                ", "if", "epoch", "not", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                    ", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "", "if", "config", "[", "'grad_comb'", "]", ":", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "args", ".", "compressor", "!=", "\"powersgd\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "out_grad_list", "=", "devectorize_grad", "(", "concat_grad", ",", "train_task", ".", "model", ")", "\n", "", "else", ":", "\n", "                            ", "out_grad_list", "=", "devectorize_grad", "(", "concat_grad", ",", "train_task", ".", "lowrank_model", ")", "\n", "", "", "else", ":", "\n", "                        ", "out_grad_list", "=", "[", "g", "for", "g", "in", "grad_train", "]", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                    ", "if", "args", ".", "compressor", "!=", "\"powersgd\"", ":", "\n", "                        ", "out_grad_list", "=", "devectorize_grad", "(", "concat_grad", ",", "train_task", ".", "model", ")", "\n", "", "else", ":", "\n", "                        ", "out_grad_list", "=", "[", "g", "for", "g", "in", "grad_train", "]", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "out_grad_list", "=", "[", "g", "for", "g", "in", "grad_train", "]", "\n", "", "else", ":", "\n", "                        ", "out_grad_list", "=", "devectorize_grad", "(", "concat_grad", ",", "train_task", ".", "lowrank_model", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                    ", "iter_comm_cost", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "\n", "epoch_comm_time", "+=", "iter_comm_cost", "\n", "", "elif", "args", ".", "compressor", "in", "(", "\"suquantization\"", ",", "\"signum\"", ",", "\"powersgd\"", ")", ":", "\n", "                    ", "if", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "epoch_comm_time", "+=", "compressor_iter_comm_time", "\n", "epoch_encoding_overhead", "+=", "iter_encode_decode_time", "\n", "", "else", ":", "\n", "                            ", "iter_comm_cost", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "\n", "epoch_comm_time", "+=", "iter_comm_cost", "\n", "", "", "else", ":", "\n", "                        ", "epoch_comm_time", "+=", "compressor_iter_comm_time", "\n", "epoch_encoding_overhead", "+=", "iter_encode_decode_time", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "# updated the gradients in place", "\n", "# TODO: Move this to a new function", "\n", "", "", "if", "args", ".", "compressor", "not", "in", "(", "\"signum\"", ",", "\"powersgd\"", ")", ":", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "param", ".", "grad", ".", "data", "=", "out_grad_list", "[", "idx", "]", "\n", "", "", "else", ":", "\n", "                        ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "param", ".", "grad", ".", "data", "=", "out_grad_list", "[", "idx", "]", "\n", "", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                        ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "param", ".", "grad", ".", "data", "=", "out_grad_list", "[", "idx", "]", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "\n", "", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'imagenet'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                    ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                            ", "optimizer_lowrank", ".", "step", "(", ")", "\n", "optimizer_lowrank", ".", "zero_grad", "(", ")", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "", "", "elif", "config", "[", "'name'", "]", "==", "\"squeezenet_cifar\"", ":", "\n", "                    ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "config", "[", "'name'", "]", "==", "'languageModel'", "or", "config", "[", "'name'", "]", "==", "'newlanguageModel'", ":", "\n", "# momentum implementation ", "\n", "                    ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "if", "epoch", "==", "0", "and", "first_iter", "==", "0", ":", "\n", "                            ", "momenta", "[", "idx", "]", ".", "data", "=", "param", ".", "grad", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "first_iter", "=", "1", "\n", "", "else", ":", "\n", "                            ", "momenta", "[", "idx", "]", ".", "data", ".", "mul_", "(", "0.9", ")", ".", "add_", "(", "param", ".", "grad", ".", "data", ")", "\n", "", "param", ".", "grad", ".", "data", "[", ":", "]", "+=", "momenta", "[", "idx", "]", ".", "data", "\n", "\n", "", "for", "p", "in", "train_task", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "-", "current_lr", ",", "p", ".", "grad", ".", "data", ")", "\n", "", "train_task", ".", "model", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported model name type ...\"", ")", "\n", "", "", "else", ":", "\n", "# for signsgd we will need to handle weight decay manually: (line ``update parameters\"\" in https://openreview.net/pdf?id=BJxhijAcY7)", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "grad", ",", "param", ",", "wd", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "wds", ")", ":", "\n", "                            ", "if", "wd", ">", "0", ":", "\n", "                                ", "grad", ".", "add_", "(", "alpha", "=", "wd", ",", "other", "=", "param", ".", "data", ".", "detach", "(", ")", ")", "\n", "", "", "", "else", ":", "\n", "                        ", "for", "grad", ",", "param", ",", "wd", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", ",", "lowrank_wds", ")", ":", "\n", "                            ", "if", "wd", ">", "0", ":", "\n", "                                ", "grad", ".", "add_", "(", "alpha", "=", "wd", ",", "other", "=", "param", ".", "data", ".", "detach", "(", ")", ")", "\n", "", "", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                    ", "for", "grad", ",", "param", ",", "wd", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "wds", ")", ":", "\n", "                        ", "if", "wd", ">", "0", ":", "\n", "                            ", "grad", ".", "add_", "(", "alpha", "=", "wd", ",", "other", "=", "param", ".", "data", ".", "detach", "(", ")", ")", "\n", "", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "grad", ",", "param", ",", "wd", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "wds", ")", ":", "\n", "                            ", "if", "wd", ">", "0", ":", "\n", "                                ", "grad", ".", "add_", "(", "alpha", "=", "wd", ",", "other", "=", "param", ".", "data", ".", "detach", "(", ")", ")", "\n", "", "", "", "else", ":", "\n", "                        ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "param", ".", "grad", ".", "data", "=", "out_grad_list", "[", "idx", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "", "if", "args", ".", "compressor", "==", "\"powersgd\"", ":", "\n", "                    ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "for", "grad", ",", "momentum", "in", "zip", "(", "out_grad_list", ",", "momenta", ")", ":", "\n", "                                ", "if", "epoch", "==", "0", "and", "iter_index", "==", "0", ":", "\n", "                                    ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                                    ", "if", "(", "\n", "config", "[", "\"optimizer_momentum_type\"", "]", "\n", "==", "\"exponential_moving_average\"", "\n", ")", ":", "\n", "                                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "\n", "alpha", "=", "(", "1", "-", "config", "[", "\"momentum\"", "]", ")", ",", "other", "=", "grad", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "other", "=", "grad", ")", "\n", "", "", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ",", "config", "=", "config", ")", "\n", "", "", "else", ":", "\n", "                            ", "for", "grad", ",", "momentum", "in", "zip", "(", "out_grad_list", ",", "momenta_lowrank", ")", ":", "\n", "                                ", "if", "epoch", "==", "0", "and", "iter_index", "==", "0", ":", "\n", "                                    ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                                    ", "if", "(", "\n", "config", "[", "\"optimizer_momentum_type\"", "]", "\n", "==", "\"exponential_moving_average\"", "\n", ")", ":", "\n", "                                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "\n", "alpha", "=", "(", "1", "-", "config", "[", "\"momentum\"", "]", ")", ",", "other", "=", "grad", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "other", "=", "grad", ")", "\n", "", "", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ",", "config", "=", "config", ")", "\n", "", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                        ", "for", "grad", ",", "momentum", "in", "zip", "(", "out_grad_list", ",", "momenta", ")", ":", "\n", "                            ", "if", "epoch", "==", "0", "and", "iter_index", "==", "0", ":", "\n", "                                ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                                ", "if", "(", "\n", "config", "[", "\"optimizer_momentum_type\"", "]", "\n", "==", "\"exponential_moving_average\"", "\n", ")", ":", "\n", "                                    ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "\n", "alpha", "=", "(", "1", "-", "config", "[", "\"momentum\"", "]", ")", ",", "other", "=", "grad", "\n", ")", "\n", "", "else", ":", "\n", "                                    ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "other", "=", "grad", ")", "\n", "", "", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ",", "config", "=", "config", ")", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                        ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                            ", "for", "grad", ",", "momentum", "in", "zip", "(", "out_grad_list", ",", "momenta", ")", ":", "\n", "                                ", "if", "epoch", "==", "0", "and", "iter_index", "==", "0", ":", "\n", "                                    ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                                    ", "if", "(", "\n", "config", "[", "\"optimizer_momentum_type\"", "]", "\n", "==", "\"exponential_moving_average\"", "\n", ")", ":", "\n", "                                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "\n", "alpha", "=", "(", "1", "-", "config", "[", "\"momentum\"", "]", ")", ",", "other", "=", "grad", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "other", "=", "grad", ")", "\n", "", "", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ",", "config", "=", "config", ")", "\n", "", "", "else", ":", "\n", "                            ", "pass", "\n", "", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "", "", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "grad", ",", "p", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "p", ".", "data", ".", "add_", "(", "alpha", "=", "-", "current_lr", ",", "other", "=", "grad", ")", "\n", "", "train_task", ".", "model", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                        ", "for", "grad", ",", "p", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "lowrank_model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "p", ".", "data", ".", "add_", "(", "alpha", "=", "-", "current_lr", ",", "other", "=", "grad", ")", "\n", "", "train_task", ".", "lowrank_model", ".", "zero_grad", "(", ")", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                    ", "for", "grad", ",", "p", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "alpha", "=", "-", "current_lr", ",", "other", "=", "grad", ")", "\n", "", "train_task", ".", "model", ".", "zero_grad", "(", ")", "\n", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "for", "grad", ",", "p", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "p", ".", "data", ".", "add_", "(", "alpha", "=", "-", "current_lr", ",", "other", "=", "grad", ")", "\n", "", "train_task", ".", "model", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                        ", "optimizer_lowrank", ".", "step", "(", ")", "\n", "optimizer_lowrank", ".", "zero_grad", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "#train_task.model.zero_grad()", "\n", "\n", "", "", "iter_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_total_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "epoch_iter_time", "+=", "iter_total_dur", "\n", "# print(\"@@@@@@@ Iter: {}, Comp: {}, Comm: {}, Total: {}, Debug Dur: {}\".format(iter_index, ", "\n", "#                                                     iter_comp_dur,", "\n", "#                                                     iter_comm_cost,", "\n", "#                                                     iter_total_dur, debug_dur))", "\n", "\n", "", "breakdown_time_log_dict", "[", "epoch", "]", "=", "{", "\"comp\"", ":", "epoch_compute_time", ",", "\"comm\"", ":", "epoch_comm_time", ",", "\n", "\"encdec_overhead\"", ":", "epoch_encoding_overhead", ",", "\"total\"", ":", "epoch_iter_time", "}", "\n", "\n", "floats_communicated", "[", "epoch", "]", "=", "elements_per_epoch", "\n", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "with", "open", "(", "bytes_log_fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "floats_communicated", ",", "fout", ")", "\n", "", "with", "open", "(", "per_iteration_compute_time_log", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "compute_time_per_dict", ",", "fout", ")", "\n", "", "with", "open", "(", "breakdown_time_log_fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "breakdown_time_log_dict", ",", "fout", ")", "\n", "\n", "# validate model", "\n", "", "if", "config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                ", "current_test_loss", "=", "train_task", ".", "validate_model", "(", "logger", ")", "\n", "", "else", ":", "\n", "                ", "current_test_loss", "=", "train_task", ".", "validate_lowrank_model", "(", "logger", ")", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "            ", "current_test_loss", "=", "train_task", ".", "validate_model", "(", "logger", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "\n", "", "current_test_loss", "=", "10000", "\n", "if", "not", "best_test_loss", "or", "current_test_loss", "<", "best_test_loss", ":", "\n", "            ", "best_test_loss", "=", "current_test_loss", "\n", "\n", "", "if", "args", ".", "compressor", "not", "in", "(", "\"signum\"", ",", "\"powersgd\"", ")", ":", "\n", "            ", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"pufferfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "scheduler_warmup", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                        ", "scheduler_multi_step_lowrank", ".", "step", "(", ")", "\n", "", "", "elif", "config", "[", "'training_mode'", "]", "==", "\"vanilla\"", ":", "\n", "                    ", "scheduler_warmup", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!\"", ")", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "                ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                ", "if", "config", "[", "'training_mode'", "]", "==", "\"powerfish\"", ":", "\n", "                    ", "if", "epoch", "in", "range", "(", "config", "[", "'full_rank_warmup_epoch'", "]", ")", ":", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "scheduler_multi_step_lowrank", ".", "step", "(", ")", "\n", "#scheduler_warmup_powerfish.step()", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.get_fixed_schedule.return_schedule": [[1, 6], ["None"], "function", ["None"], ["def", "return_schedule", "(", "epoch", ",", "num_layers", ")", ":", "\n", "    ", "if", "epoch", "<", "100", ":", "\n", "        ", "return", "[", "4", "]", "*", "num_layers", "\n", "", "else", ":", "\n", "        ", "return", "[", "None", "]", "*", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.add_fit_args": [[129, 172], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_fit_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--norm-thresh\"", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"norm thresh for layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-type\"", ",", "default", "=", "\"languageModel\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"type of model helps to select the right config\"", ")", "\n", "#parser.add_argument(\"--auto-switch\", default=False, action=\"store_true\",", "\n", "#                    help=\"Enables automatic switching\")", "\n", "# the presence of fixed-k in args will make the value true", "\n", "#parser.add_argument(\"--fixed-k\", default=False, action=\"store_true\",", "\n", "#                    help=\"Indicates if we want to use a fixed k\")", "\n", "#parser.add_argument(\"--k\", default=None, type=int, ", "\n", "#                    help= \"If fixed-k is true then uses this for training\")", "\n", "parser", ".", "add_argument", "(", "\"--num-simulated-nodes\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of nodes to simulate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--norm-file\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"wikitext_lstm_full_rank.json\"", ")", "\n", "#parser.add_argument(\"--start-k\", default=False, action=\"store_true\",", "\n", "#                    help=\"starts with a k\")", "\n", "#parser.add_argument(\"--k-start\", default=None, type= int,", "\n", "#                    help = \"Fix the start k\")", "\n", "#parser.add_argument(\"--fixed-sched\", default=False, action=\"store_true\",", "\n", "#                    help=\"follow a fixed schedule\")", "\n", "parser", ".", "add_argument", "(", "\"--zero-memory\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--compressor\"", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ",", "help", "=", "\"which gradient compressor to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config-mode\"", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ",", "help", "=", "\"which framework to use: pufferfish|vanilla.\"", ")", "\n", "\n", "# distributed arguments", "\n", "parser", ".", "add_argument", "(", "\"--distributed\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Indicates if we have to use distributed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master-ip\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Master IP for NCCL/MPI\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-nodes\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Indicate number of nodes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Rank of this node\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.seed": [[173, 184], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "print"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "print", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.get_lr": [[185, 215], ["torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "min", "range", "range", "print", "range", "range", "NotImplementedError"], "function", ["None"], ["", "def", "get_lr", "(", "config", ",", "epoch_num", ")", ":", "\n", "    ", "\"\"\"\n    Return learning rate in case of the time \n    \"\"\"", "\n", "max_factor", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "factor", "=", "1.0", "+", "(", "max_factor", "-", "1.0", ")", "*", "min", "(", "epoch_num", "/", "config", "[", "'warmup_epochs'", "]", ",", "1.0", ")", "\n", "if", "config", "[", "'name'", "]", "==", "\"CNN\"", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "        ", "if", "epoch_num", "<=", "150", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "\n", "return", "new_lr", "\n", "", "elif", "epoch_num", ">", "150", "and", "epoch_num", "<=", "250", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "10.0", "\n", "return", "new_lr", "\n", "", "elif", "epoch_num", ">", "250", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "100.0", "\n", "return", "new_lr", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Something went wrong in learning rate selection\"", ")", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "        ", "if", "epoch_num", "in", "range", "(", "30", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "\n", "", "elif", "epoch_num", "in", "range", "(", "30", ",", "60", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "10.0", "\n", "", "elif", "epoch_num", "in", "range", "(", "60", ",", "80", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "100.0", "\n", "", "elif", "epoch_num", "in", "range", "(", "80", ",", "90", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "1000.0", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Invalid Epoch ....\"", ")", "\n", "", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.add_weight_decay": [[217, 230], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.vectorize_grad": [[232, 236], ["torch._utils._flatten_dense_tensors"], "function", ["None"], ["", "def", "vectorize_grad", "(", "grad_train", ")", ":", "\n", "#return torch.cat([grad_value.view(-1) for grad_value in grad_train])", "\n", "# better implementation?", "\n", "    ", "return", "_flatten_dense_tensors", "(", "grad_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.devectorize_grad": [[237, 244], ["enumerate", "model.parameters", "out_grad_list.append", "p.numel", "reduced_grad[].view", "p.size", "p.numel"], "function", ["None"], ["", "def", "devectorize_grad", "(", "reduced_grad", ",", "model", ")", ":", "\n", "    ", "out_grad_list", "=", "[", "]", "\n", "index_bias", "=", "0", "\n", "for", "p_index", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "out_grad_list", ".", "append", "(", "reduced_grad", "[", "index_bias", ":", "index_bias", "+", "p", ".", "numel", "(", ")", "]", ".", "view", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "index_bias", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "out_grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.replace_grad_by_momentum": [[246, 252], ["None"], "function", ["None"], ["", "def", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ")", ":", "\n", "    ", "\"\"\"\n    Inplace operation that applies momentum to a gradient.\n    This distinguishes between types of momentum (heavy-ball vs nesterov)\n    \"\"\"", "\n", "grad", "[", ":", "]", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation.main": [[254, 558], ["dict", "dict", "dict", "collections.defaultdict", "dict", "dict", "collections.defaultdict", "dict", "train_network.build", "logger.info", "main_simulation.vectorize_grad", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "range", "range", "print", "torch.init_process_group", "print", "momenta.append", "utils.get_weight_decay", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "train_network.build.model.train", "enumerate", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "train_network.build.validate_model", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "torch.SGD", "main_simulation.add_weight_decay", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.SGD", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "gradient_reducers.StochasticUniformQuantization", "main_simulation.get_lr", "logger.info", "train_network.build.sampler.set_epoch", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "list", "torch.cuda.Event.record", "train_network.build.batch_loss_and_gradient", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "main_simulation.vectorize_grad", "open", "json.dump", "open", "json.dump", "open", "json.dump", "datetime.timedelta", "train_network.build.model.parameters", "train_network.build.model.parameters", "train_network.build.model.parameters", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulation", "NotImplementedError", "logger.info", "float", "zip", "print", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "lr_scheduler.MultiStepLR.step", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "vectorize_grad.size", "train_network.build.model.parameters", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "main_simulation.devectorize_grad", "enumerate", "zip", "zip", "train_network.build.model.zero_grad", "float", "grad.clone().detach", "momentum.mul_().add_", "main_simulation.replace_grad_by_momentum", "int", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "train_network.build.model.parameters", "optim.SGD.step", "optim.SGD.zero_grad", "NotImplementedError", "train_network.build.model.parameters", "train_network.build.model.parameters", "p.data.add_", "torch.cuda.Event.elapsed_time", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "NotImplementedError", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulation.reduce", "float", "NotImplementedError", "grad.add_", "NotImplemented", "grad.clone", "momentum.mul_", "len", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulation.reduce", "NotImplementedError", "torch.cuda.Event.elapsed_time", "param.data.detach", "vectorize_grad.size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.train_network.__init__.build", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.get_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.validate_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.get_lr", "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.batch_loss_and_gradient", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "chosen_method_log", "=", "dict", "(", ")", "# this writes things when method is changed", "\n", "current_method_log", "=", "dict", "(", ")", "# this will monitor what is the current method ", "\n", "candidate_method_stat", "=", "dict", "(", ")", "# this tracks the thresh for all candidate method", "\n", "timing_log", "=", "defaultdict", "(", "list", ")", "\n", "floats_communicated", "=", "dict", "(", ")", "\n", "#grad_calc_dict = dict()", "\n", "ratio_calc_dict", "=", "dict", "(", ")", "\n", "compute_time_per_dict", "=", "defaultdict", "(", "dict", ")", "\n", "breakdown_time_log_dict", "=", "dict", "(", ")", "\n", "\n", "prev_norm", "=", "None", "\n", "json_f_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", "\n", "current_method_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_epoch_method.json\"", "\n", "candidate_methods_stat_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_candidate_method_stats.json\"", "\n", "timing_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_timing_log.json\"", "\n", "bytes_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_floats_communicated.json\"", "\n", "ratio_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_ratio_vals.json\"", "\n", "grad_calc_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_grad_norm_vals.json\"", "\n", "per_iteration_compute_time_log", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_iteration_compute_time.json\"", "\n", "breakdown_time_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_epoch_breakdown_time.json\"", "\n", "\n", "#TODO: Clean this up to manually select the model ", "\n", "if", "args", ".", "model_type", "==", "\"CNN\"", ":", "\n", "        ", "config", "=", "cifar_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"languageModel\"", ":", "\n", "        ", "config", "=", "lstm_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"newlanguageModel\"", ":", "\n", "        ", "config", "=", "new_lstm_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"imagenet\"", ":", "\n", "#config = imagenet_config", "\n", "        ", "if", "args", ".", "config_mode", "==", "\"vanilla\"", ":", "\n", "            ", "config", "=", "imagenet_vanilla_config", "\n", "", "elif", "args", ".", "config_mode", "==", "\"pufferfish\"", ":", "\n", "            ", "config", "=", "imagenet_pufferfish_config", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported config mode ...\"", ")", "\n", "", "", "elif", "args", ".", "model_type", "==", "\"cifar10\"", ":", "\n", "        ", "config", "=", "cifar10_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"svhn\"", ":", "\n", "        ", "config", "=", "svhn_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"squeezenet_cifar\"", ":", "\n", "        ", "config", "=", "cifar_squeezenet_config", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"{} not NotImplemented\"", ".", "format", "(", "args", ".", "model_type", ")", ")", "\n", "", "config", "[", "'is_distributed'", "]", "=", "False", "# adding a new key in the config", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "print", "(", "\"Initializing distributed\"", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"NCCL\"", ",", "init_method", "=", "args", ".", "master_ip", ",", "\n", "timeout", "=", "datetime", ".", "timedelta", "(", "seconds", "=", "120", ")", ",", "\n", "world_size", "=", "args", ".", "num_nodes", ",", "rank", "=", "args", ".", "rank", ")", "\n", "config", "[", "'is_distributed'", "]", "=", "True", "\n", "print", "(", "\"Distributed Initialized\"", ")", "\n", "", "train_task", "=", "train_network", ".", "build", "(", "config", "[", "'dataset'", "]", ",", "config", ")", "\n", "logger", ".", "info", "(", "\"==> Model Architecture: {}\"", ".", "format", "(", "train_task", ".", "model", ")", ")", "\n", "#TODO: Fix this for distributed", "\n", "# use parameter groups to get things for different learning rates", "\n", "# and weight decay parameters ", "\n", "current_lr", "=", "config", "[", "'init_lr'", "]", "\n", "\n", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "        ", "if", "config", "[", "'name'", "]", "==", "\"CNN\"", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "# optimizer only for langauge model", "\n", "# otherwise we are going manual\\", "\n", "# my guess is that repackage thing for language models changes", "\n", "# the model structure and the optimizer is registered only for some of", "\n", "# the parameters", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "# parameters ", "\n", "            ", "parameters", "=", "add_weight_decay", "(", "train_task", ".", "model", ",", "config", "[", "'weight_decay'", "]", ")", "\n", "# weight decay is incorporated in the parameters", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "weight_decay", "=", "0", ")", "\n", "\n", "# let's comment out the learning rate warmup for now", "\n", "# scheduler_multi_step = lr_scheduler.MultiStepLR(", "\n", "#     optimizer, milestones=[e - config['warmup_epoch']- 1 for e in", "\n", "#                            config['lr_decay_period']],", "\n", "#     gamma=config['lr_decay_factor'])", "\n", "# scheduler_warmup = GradualWarmupScheduler(", "\n", "#     optimizer, multiplier=config['multiplier'],", "\n", "#     total_epoch=config['warmup_epoch'], after_scheduler=scheduler_multi_step)", "\n", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "for", "e", "in", "config", "[", "'decay_steps'", "]", "]", ",", "\n", "gamma", "=", "config", "[", "'lr_decay_factor'", "]", ")", "\n", "\n", "", "if", "config", "[", "'name'", "]", "==", "\"squeezenet_cifar\"", ":", "\n", "# special optimizer for squeezenet", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "", "", "else", ":", "\n", "        ", "optimizer", "=", "None", "\n", "\n", "\n", "", "current_test_loss", "=", "None", "\n", "best_test_loss", "=", "None", "\n", "\n", "# since we are simulating things, we will need to allocate buffer for each simulated node", "\n", "vectorized_net", "=", "vectorize_grad", "(", "[", "p", ".", "data", "for", "p", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", ")", "\n", "momenta", "=", "[", "]", "\n", "simulated_grad_buffer", "=", "torch", ".", "empty", "(", "args", ".", "num_simulated_nodes", ",", "vectorized_net", ".", "size", "(", ")", "[", "0", "]", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "# #simulated node X model dimention d", "\n", "for", "node_index", "in", "range", "(", "args", ".", "num_simulated_nodes", ")", ":", "\n", "        ", "momenta", ".", "append", "(", "[", "torch", ".", "empty_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "", "first_iter", "=", "0", "# hack for momentum code", "\n", "\n", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "        ", "grad_compressor", "=", "None", "\n", "", "elif", "args", ".", "compressor", "==", "\"suquantization\"", ":", "\n", "        ", "grad_compressor", "=", "StochasticUniformQuantization", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ")", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "        ", "grad_compressor", "=", "SignSGDwithMajorityVoteReducerSimulation", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "\n", "", "wds", "=", "[", "get_weight_decay", "(", "name", ",", "config", ")", "for", "name", "in", "train_task", ".", "parameter_names", "]", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'num_epochs'", "]", ")", ":", "\n", "# to put into the `breakdown_time_log`", "\n", "        ", "epoch_compute_time", "=", "0.0", "\n", "epoch_comm_time", "=", "0.0", "\n", "epoch_total_time", "=", "0.0", "\n", "epoch_encoding_overhead", "=", "0.0", "\n", "epoch_iter_time", "=", "0.0", "\n", "\n", "# for logging out the current learning rate", "\n", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "current_lr", "=", "get_lr", "(", "config", "=", "config", ",", "epoch_num", "=", "epoch", ")", "\n", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "current_lr", ")", ")", "\n", "\n", "", "if", "config", "[", "'is_distributed'", "]", ":", "\n", "            ", "train_task", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "# set epoch to make sure the data is reshuffled per epoch", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "elements_per_epoch", "=", "0", "\n", "simulated_nodes_index", "=", "0", "# which is [0, args.num_simulated_nodes-1]", "\n", "global_iter", "=", "0", "\n", "\n", "# note that currently we assume everything is running over CUDA", "\n", "train_task", ".", "model", ".", "train", "(", ")", "\n", "\n", "\n", "for", "iter_index", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_task", ".", "train_loader", ")", ":", "\n", "            ", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "debug_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "debug_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "iter_start", ".", "record", "(", ")", "\n", "\n", "out_grad_list", "=", "list", "(", ")", "#list to store output gradients", "\n", "\n", "comp_start", ".", "record", "(", ")", "\n", "grad_train", "=", "train_task", ".", "batch_loss_and_gradient", "(", "batch_idx", "=", "iter_index", ",", "data", "=", "data", ",", "target", "=", "target", ",", "logger", "=", "logger", ",", "epoch", "=", "epoch", ")", "\n", "\n", "comp_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "comp_start", ".", "elapsed_time", "(", "comp_end", ")", ")", "/", "1000.0", "\n", "epoch_compute_time", "+=", "iter_comp_dur", "\n", "\n", "if", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "# based on the discussion in https://arxiv.org/pdf/1810.05291.pdf, ", "\n", "# momentum rather than gradient is compressed", "\n", "# we thus calculate the momentum first", "\n", "                ", "for", "grad", ",", "momentum", "in", "zip", "(", "grad_train", ",", "momenta", "[", "simulated_nodes_index", "]", ")", ":", "\n", "                    ", "if", "epoch", "==", "0", "and", "iter_index", "<", "args", ".", "num_simulated_nodes", ":", "\n", "                        ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "\n", "1", "-", "config", "[", "\"momentum\"", "]", ",", "grad", "\n", ")", "\n", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ")", "\n", "\n", "# aggregate the gradients here:", "\n", "", "", "", "concat_grad", "=", "vectorize_grad", "(", "grad_train", ")", "\n", "\n", "simulated_grad_buffer", "[", "simulated_nodes_index", "]", "=", "concat_grad", "\n", "# collect the gradient for simulated user", "\n", "simulated_nodes_index", "+=", "1", "\n", "\n", "if", "simulated_nodes_index", "<", "args", ".", "num_simulated_nodes", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"######## Epoch: {} | Global iter: {}/{}\"", ".", "format", "(", "epoch", ",", "global_iter", ",", "int", "(", "len", "(", "train_task", ".", "train_loader", ")", "/", "args", ".", "num_simulated_nodes", ")", ")", ")", "\n", "# communication step", "\n", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                    ", "comm_start", ".", "record", "(", ")", "\n", "\n", "", "if", "config", "[", "'grad_comb'", "]", ":", "\n", "                    ", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                        ", "torch", ".", "distributed", ".", "all_reduce", "(", "concat_grad", ",", "async_op", "=", "False", ")", "\n", "concat_grad", "[", ":", "]", "=", "concat_grad", "/", "args", ".", "num_nodes", "\n", "", "elif", "args", ".", "compressor", "==", "\"suquantization\"", ":", "\n", "#print(\"##### max: {}, min grad: {}\".format(torch.max(concat_grad), torch.min(concat_grad)))", "\n", "                        ", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "simulated_grad_buffer", ")", "\n", "concat_grad", "[", ":", "]", "=", "reduced_aggregated_grad", "/", "args", ".", "num_nodes", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "#print(\"######## Compressing gradient local iter: {}\".format(iter_index))", "\n", "                        ", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "simulated_grad_buffer", ")", "\n", "concat_grad", "[", ":", "]", "=", "reduced_aggregated_grad", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "", "", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                    ", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "if", "config", "[", "'grad_comb'", "]", ":", "\n", "                    ", "out_grad_list", "=", "devectorize_grad", "(", "concat_grad", ",", "train_task", ".", "model", ")", "\n", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                        ", "iter_comm_cost", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "\n", "epoch_comm_time", "+=", "iter_comm_cost", "\n", "", "elif", "args", ".", "compressor", "in", "(", "\"suquantization\"", ",", "\"signum\"", ")", ":", "\n", "                        ", "epoch_comm_time", "+=", "compressor_iter_comm_time", "\n", "epoch_encoding_overhead", "+=", "iter_encode_decode_time", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "# updated the gradients in place", "\n", "# TODO: Move this to a new function", "\n", "", "", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "                    ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "param", ".", "grad", ".", "data", "=", "out_grad_list", "[", "idx", "]", "\n", "\n", "", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'imagenet'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported model name type ...\"", ")", "\n", "", "", "else", ":", "\n", "# for signsgd we will need to handle weight decay manually: (line ``update parameters\"\" in https://openreview.net/pdf?id=BJxhijAcY7)", "\n", "                    ", "for", "grad", ",", "param", ",", "wd", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "wds", ")", ":", "\n", "                        ", "if", "wd", ">", "0", ":", "\n", "                            ", "grad", ".", "add_", "(", "wd", ",", "param", ".", "data", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "for", "grad", ",", "p", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "-", "current_lr", ",", "grad", ")", "\n", "\n", "", "train_task", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "", "iter_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_total_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "epoch_iter_time", "+=", "iter_total_dur", "\n", "\n", "# meset the gradient buffer", "\n", "simulated_grad_buffer", "=", "torch", ".", "empty", "(", "args", ".", "num_simulated_nodes", ",", "vectorized_net", ".", "size", "(", ")", "[", "0", "]", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "simulated_nodes_index", "=", "0", "\n", "global_iter", "+=", "1", "\n", "\n", "\n", "", "", "breakdown_time_log_dict", "[", "epoch", "]", "=", "{", "\"comp\"", ":", "epoch_compute_time", ",", "\"comm\"", ":", "epoch_comm_time", ",", "\n", "\"encdec_overhead\"", ":", "epoch_encoding_overhead", ",", "\"total\"", ":", "epoch_iter_time", "}", "\n", "\n", "\n", "floats_communicated", "[", "epoch", "]", "=", "elements_per_epoch", "\n", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "with", "open", "(", "bytes_log_fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "floats_communicated", ",", "fout", ")", "\n", "\n", "", "with", "open", "(", "per_iteration_compute_time_log", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "compute_time_per_dict", ",", "fout", ")", "\n", "", "with", "open", "(", "breakdown_time_log_fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "breakdown_time_log_dict", ",", "fout", ")", "\n", "\n", "# validate model", "\n", "", "current_test_loss", "=", "train_task", ".", "validate_model", "(", "logger", ")", "\n", "\n", "current_test_loss", "=", "10000", "\n", "if", "not", "best_test_loss", "or", "current_test_loss", "<", "best_test_loss", ":", "\n", "            ", "best_test_loss", "=", "current_test_loss", "\n", "\n", "", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "            ", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "current_lr", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "                ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_fit_args": [[129, 172], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_fit_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--norm-thresh\"", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"norm thresh for layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-type\"", ",", "default", "=", "\"languageModel\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"type of model helps to select the right config\"", ")", "\n", "#parser.add_argument(\"--auto-switch\", default=False, action=\"store_true\",", "\n", "#                    help=\"Enables automatic switching\")", "\n", "# the presence of fixed-k in args will make the value true", "\n", "#parser.add_argument(\"--fixed-k\", default=False, action=\"store_true\",", "\n", "#                    help=\"Indicates if we want to use a fixed k\")", "\n", "#parser.add_argument(\"--k\", default=None, type=int, ", "\n", "#                    help= \"If fixed-k is true then uses this for training\")", "\n", "parser", ".", "add_argument", "(", "\"--num-simulated-nodes\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of nodes to simulate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--norm-file\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"wikitext_lstm_full_rank.json\"", ")", "\n", "#parser.add_argument(\"--start-k\", default=False, action=\"store_true\",", "\n", "#                    help=\"starts with a k\")", "\n", "#parser.add_argument(\"--k-start\", default=None, type= int,", "\n", "#                    help = \"Fix the start k\")", "\n", "#parser.add_argument(\"--fixed-sched\", default=False, action=\"store_true\",", "\n", "#                    help=\"follow a fixed schedule\")", "\n", "parser", ".", "add_argument", "(", "\"--zero-memory\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--compressor\"", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ",", "help", "=", "\"which gradient compressor to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config-mode\"", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ",", "help", "=", "\"which framework to use: pufferfish|vanilla.\"", ")", "\n", "\n", "# distributed arguments", "\n", "#parser.add_argument(\"--distributed\", default=False, action=\"store_true\",", "\n", "#                    help=\"Indicates if we have to use distributed\")", "\n", "#parser.add_argument(\"--master-ip\", default=None, type=str,", "\n", "#                    help=\"Master IP for NCCL/MPI\")", "\n", "#parser.add_argument(\"--num-nodes\", default=0, type=int,", "\n", "#                    help=\"Indicate number of nodes\")", "\n", "#parser.add_argument(\"--rank\", default=0, type=int,", "\n", "#                    help=\"Rank of this node\")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.seed": [[173, 184], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "print"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "print", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.get_lr": [[185, 215], ["range", "range", "print", "range", "range", "NotImplementedError"], "function", ["None"], ["", "def", "get_lr", "(", "config", ",", "epoch_num", ")", ":", "\n", "    ", "\"\"\"\n    Return learning rate in case of the time \n    \"\"\"", "\n", "#max_factor = torch.distributed.get_world_size()", "\n", "#factor = 1.0 + (max_factor - 1.0) *min(epoch_num/config['warmup_epochs'], 1.0)", "\n", "if", "config", "[", "'name'", "]", "==", "\"CNN\"", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "        ", "if", "epoch_num", "<=", "150", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "\n", "return", "new_lr", "\n", "", "elif", "epoch_num", ">", "150", "and", "epoch_num", "<=", "250", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "10.0", "\n", "return", "new_lr", "\n", "", "elif", "epoch_num", ">", "250", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "100.0", "\n", "return", "new_lr", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Something went wrong in learning rate selection\"", ")", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "        ", "if", "epoch_num", "in", "range", "(", "30", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "\n", "", "elif", "epoch_num", "in", "range", "(", "30", ",", "60", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "10.0", "\n", "", "elif", "epoch_num", "in", "range", "(", "60", ",", "80", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "100.0", "\n", "", "elif", "epoch_num", "in", "range", "(", "80", ",", "90", ")", ":", "\n", "            ", "new_lr", "=", "config", "[", "'init_lr'", "]", "/", "1000.0", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Invalid Epoch ....\"", ")", "\n", "", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay": [[217, 230], ["model.named_parameters", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad": [[232, 236], ["torch._utils._flatten_dense_tensors"], "function", ["None"], ["", "def", "vectorize_grad", "(", "grad_train", ")", ":", "\n", "#return torch.cat([grad_value.view(-1) for grad_value in grad_train])", "\n", "# better implementation?", "\n", "    ", "return", "_flatten_dense_tensors", "(", "grad_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad": [[237, 244], ["enumerate", "model.parameters", "out_grad_list.append", "p.numel", "reduced_grad[].view", "p.size", "p.numel"], "function", ["None"], ["", "def", "devectorize_grad", "(", "reduced_grad", ",", "model", ")", ":", "\n", "    ", "out_grad_list", "=", "[", "]", "\n", "index_bias", "=", "0", "\n", "for", "p_index", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "out_grad_list", ".", "append", "(", "reduced_grad", "[", "index_bias", ":", "index_bias", "+", "p", ".", "numel", "(", ")", "]", ".", "view", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "index_bias", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "out_grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum": [[246, 252], ["None"], "function", ["None"], ["", "def", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ")", ":", "\n", "    ", "\"\"\"\n    Inplace operation that applies momentum to a gradient.\n    This distinguishes between types of momentum (heavy-ball vs nesterov)\n    \"\"\"", "\n", "grad", "[", ":", "]", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.main": [[254, 568], ["dict", "dict", "dict", "collections.defaultdict", "dict", "dict", "collections.defaultdict", "dict", "train_network.build", "logger.info", "main_simulation_single_node.vectorize_grad", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "range", "range", "momenta.append", "utils.get_weight_decay", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "train_network.build.model.train", "enumerate", "train_network.build.validate_model", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "os.path.basename().split", "torch.SGD", "main_simulation_single_node.add_weight_decay", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.SGD", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "gradient_reducers.StochasticUniformQuantization", "main_simulation_single_node.get_lr", "logger.info", "train_network.build.sampler.set_epoch", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "list", "torch.cuda.Event.record", "train_network.build.batch_loss_and_gradient", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "main_simulation_single_node.vectorize_grad", "open", "json.dump", "open", "json.dump", "open", "json.dump", "train_network.build.model.parameters", "train_network.build.model.parameters", "train_network.build.model.parameters", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulationSignleNode", "NotImplementedError", "logger.info", "float", "zip", "print", "print", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "lr_scheduler.MultiStepLR.step", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "vectorize_grad.size", "train_network.build.model.parameters", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "main_simulation_single_node.devectorize_grad", "enumerate", "zip", "zip", "train_network.build.model.zero_grad", "float", "grad.clone().detach", "momentum.mul_().add_", "main_simulation_single_node.replace_grad_by_momentum", "len", "len", "int", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "train_network.build.model.parameters", "optim.SGD.step", "optim.SGD.zero_grad", "NotImplementedError", "train_network.build.model.parameters", "train_network.build.model.parameters", "p.data.add_", "torch.cuda.Event.elapsed_time", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "NotImplementedError", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulationSignleNode.reduce", "float", "NotImplementedError", "grad.add_", "NotImplemented", "grad.clone", "momentum.mul_", "len", "NotImplementedError", "torch.cuda.Event.elapsed_time", "vectorize_grad.size", "print", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulationSignleNode.reduce", "gradient_reducers.SignSGDwithMajorityVoteReducerSimulationSignleNode.reduce", "param.data.detach", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.train_network.__init__.build", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.get_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.validate_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.add_weight_decay", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.get_lr", "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.batch_loss_and_gradient", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.vectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.devectorize_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.main_simulation_single_node.replace_grad_by_momentum", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "chosen_method_log", "=", "dict", "(", ")", "# this writes things when method is changed", "\n", "current_method_log", "=", "dict", "(", ")", "# this will monitor what is the current method ", "\n", "candidate_method_stat", "=", "dict", "(", ")", "# this tracks the thresh for all candidate method", "\n", "timing_log", "=", "defaultdict", "(", "list", ")", "\n", "floats_communicated", "=", "dict", "(", ")", "\n", "#grad_calc_dict = dict()", "\n", "ratio_calc_dict", "=", "dict", "(", ")", "\n", "compute_time_per_dict", "=", "defaultdict", "(", "dict", ")", "\n", "breakdown_time_log_dict", "=", "dict", "(", ")", "\n", "\n", "prev_norm", "=", "None", "\n", "json_f_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", "\n", "current_method_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_epoch_method.json\"", "\n", "candidate_methods_stat_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_candidate_method_stats.json\"", "\n", "timing_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_timing_log.json\"", "\n", "bytes_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_floats_communicated.json\"", "\n", "ratio_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_ratio_vals.json\"", "\n", "grad_calc_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_grad_norm_vals.json\"", "\n", "per_iteration_compute_time_log", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_iteration_compute_time.json\"", "\n", "breakdown_time_log_fname", "=", "os", ".", "path", ".", "basename", "(", "\n", "args", ".", "norm_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_per_epoch_breakdown_time.json\"", "\n", "\n", "#TODO: Clean this up to manually select the model ", "\n", "if", "args", ".", "model_type", "==", "\"CNN\"", ":", "\n", "        ", "config", "=", "cifar_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"languageModel\"", ":", "\n", "        ", "config", "=", "lstm_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"newlanguageModel\"", ":", "\n", "        ", "config", "=", "new_lstm_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"imagenet\"", ":", "\n", "#config = imagenet_config", "\n", "        ", "if", "args", ".", "config_mode", "==", "\"vanilla\"", ":", "\n", "            ", "config", "=", "imagenet_vanilla_config", "\n", "", "elif", "args", ".", "config_mode", "==", "\"pufferfish\"", ":", "\n", "            ", "config", "=", "imagenet_pufferfish_config", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported config mode ...\"", ")", "\n", "", "", "elif", "args", ".", "model_type", "==", "\"cifar10\"", ":", "\n", "        ", "config", "=", "cifar10_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"svhn\"", ":", "\n", "        ", "config", "=", "svhn_config", "\n", "", "elif", "args", ".", "model_type", "==", "\"squeezenet_cifar\"", ":", "\n", "        ", "config", "=", "cifar_squeezenet_config", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"{} not NotImplemented\"", ".", "format", "(", "args", ".", "model_type", ")", ")", "\n", "", "config", "[", "'is_distributed'", "]", "=", "False", "# adding a new key in the config", "\n", "# if args.distributed:", "\n", "#     print (\"Initializing distributed\")", "\n", "#     dist.init_process_group(backend=\"NCCL\", init_method=args.master_ip,", "\n", "#                             timeout=datetime.timedelta(seconds=120),", "\n", "#                             world_size=args.num_nodes, rank=args.rank)", "\n", "#     config['is_distributed'] = True ", "\n", "#     print (\"Distributed Initialized\")", "\n", "\n", "train_task", "=", "train_network", ".", "build", "(", "config", "[", "'dataset'", "]", ",", "config", ")", "\n", "logger", ".", "info", "(", "\"==> Model Architecture: {}\"", ".", "format", "(", "train_task", ".", "model", ")", ")", "\n", "#TODO: Fix this for distributed", "\n", "# use parameter groups to get things for different learning rates", "\n", "# and weight decay parameters ", "\n", "current_lr", "=", "config", "[", "'init_lr'", "]", "\n", "\n", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "        ", "if", "config", "[", "'name'", "]", "==", "\"CNN\"", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "# optimizer only for langauge model", "\n", "# otherwise we are going manual\\", "\n", "# my guess is that repackage thing for language models changes", "\n", "# the model structure and the optimizer is registered only for some of", "\n", "# the parameters", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "# parameters ", "\n", "            ", "parameters", "=", "add_weight_decay", "(", "train_task", ".", "model", ",", "config", "[", "'weight_decay'", "]", ")", "\n", "# weight decay is incorporated in the parameters", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "weight_decay", "=", "0", ")", "\n", "\n", "# let's comment out the learning rate warmup for now", "\n", "# scheduler_multi_step = lr_scheduler.MultiStepLR(", "\n", "#     optimizer, milestones=[e - config['warmup_epoch']- 1 for e in", "\n", "#                            config['lr_decay_period']],", "\n", "#     gamma=config['lr_decay_factor'])", "\n", "# scheduler_warmup = GradualWarmupScheduler(", "\n", "#     optimizer, multiplier=config['multiplier'],", "\n", "#     total_epoch=config['warmup_epoch'], after_scheduler=scheduler_multi_step)", "\n", "scheduler_multi_step", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "[", "e", "for", "e", "in", "config", "[", "'decay_steps'", "]", "]", ",", "\n", "gamma", "=", "config", "[", "'lr_decay_factor'", "]", ")", "\n", "\n", "", "if", "config", "[", "'name'", "]", "==", "\"squeezenet_cifar\"", ":", "\n", "# special optimizer for squeezenet", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "current_lr", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "", "", "else", ":", "\n", "        ", "optimizer", "=", "None", "\n", "\n", "\n", "", "current_test_loss", "=", "None", "\n", "best_test_loss", "=", "None", "\n", "\n", "# since we are simulating things, we will need to allocate buffer for each simulated node", "\n", "vectorized_net", "=", "vectorize_grad", "(", "[", "p", ".", "data", "for", "p", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", ")", "\n", "momenta", "=", "[", "]", "\n", "simulated_grad_buffer", "=", "torch", ".", "empty", "(", "args", ".", "num_simulated_nodes", ",", "vectorized_net", ".", "size", "(", ")", "[", "0", "]", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "# #simulated node X model dimention d", "\n", "for", "node_index", "in", "range", "(", "args", ".", "num_simulated_nodes", ")", ":", "\n", "        ", "momenta", ".", "append", "(", "[", "torch", ".", "empty_like", "(", "param", ")", "for", "param", "in", "train_task", ".", "model", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "", "first_iter", "=", "0", "# hack for momentum code", "\n", "\n", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "        ", "grad_compressor", "=", "None", "\n", "", "elif", "args", ".", "compressor", "==", "\"suquantization\"", ":", "\n", "        ", "grad_compressor", "=", "StochasticUniformQuantization", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ")", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "        ", "grad_compressor", "=", "SignSGDwithMajorityVoteReducerSimulationSignleNode", "(", "random_seed", "=", "0", ",", "device", "=", "config", "[", "'device'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "\n", "", "wds", "=", "[", "get_weight_decay", "(", "name", ",", "config", ")", "for", "name", "in", "train_task", ".", "parameter_names", "]", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'num_epochs'", "]", ")", ":", "\n", "# to put into the `breakdown_time_log`", "\n", "        ", "epoch_compute_time", "=", "0.0", "\n", "epoch_comm_time", "=", "0.0", "\n", "epoch_total_time", "=", "0.0", "\n", "epoch_encoding_overhead", "=", "0.0", "\n", "epoch_iter_time", "=", "0.0", "\n", "\n", "# for logging out the current learning rate", "\n", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "current_lr", "=", "get_lr", "(", "config", "=", "config", ",", "epoch_num", "=", "epoch", ")", "\n", "logger", ".", "info", "(", "\"### Epoch: {}, Current Effective lr: {}\"", ".", "format", "(", "epoch", ",", "current_lr", ")", ")", "\n", "\n", "", "if", "config", "[", "'is_distributed'", "]", ":", "\n", "            ", "train_task", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "# set epoch to make sure the data is reshuffled per epoch", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "elements_per_epoch", "=", "0", "\n", "simulated_nodes_index", "=", "0", "# which is [0, args.num_simulated_nodes-1]", "\n", "global_iter", "=", "0", "\n", "\n", "# note that currently we assume everything is running over CUDA", "\n", "train_task", ".", "model", ".", "train", "(", ")", "\n", "\n", "\n", "for", "iter_index", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_task", ".", "train_loader", ")", ":", "\n", "            ", "comm_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comm_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "comp_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "iter_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "debug_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "debug_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "iter_start", ".", "record", "(", ")", "\n", "\n", "out_grad_list", "=", "list", "(", ")", "#list to store output gradients", "\n", "\n", "comp_start", ".", "record", "(", ")", "\n", "grad_train", "=", "train_task", ".", "batch_loss_and_gradient", "(", "batch_idx", "=", "iter_index", ",", "data", "=", "data", ",", "target", "=", "target", ",", "logger", "=", "logger", ",", "epoch", "=", "epoch", ")", "\n", "#grad_train = [p.data for p in train_task.model.parameters()]", "\n", "\n", "comp_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "comp_start", ".", "elapsed_time", "(", "comp_end", ")", ")", "/", "1000.0", "\n", "epoch_compute_time", "+=", "iter_comp_dur", "\n", "\n", "if", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "# based on the discussion in https://arxiv.org/pdf/1810.05291.pdf, ", "\n", "# momentum rather than gradient is compressed", "\n", "# we thus calculate the momentum first", "\n", "                ", "for", "grad", ",", "momentum", "in", "zip", "(", "grad_train", ",", "momenta", "[", "simulated_nodes_index", "]", ")", ":", "\n", "                    ", "if", "epoch", "==", "0", "and", "iter_index", "<", "args", ".", "num_simulated_nodes", ":", "\n", "                        ", "momentum", ".", "data", "=", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "#momentum.mul_(config[\"momentum\"]).add_(", "\n", "#                                        1 - config[\"momentum\"], grad", "\n", "#                                    )", "\n", "                        ", "momentum", ".", "mul_", "(", "config", "[", "\"momentum\"", "]", ")", ".", "add_", "(", "other", "=", "grad", ",", "alpha", "=", "(", "1", "-", "config", "[", "\"momentum\"", "]", ")", ")", "\n", "replace_grad_by_momentum", "(", "grad", ",", "momentum", ")", "\n", "\n", "# aggregate the gradients here:", "\n", "", "", "", "concat_grad", "=", "vectorize_grad", "(", "grad_train", ")", "\n", "\n", "simulated_grad_buffer", "[", "simulated_nodes_index", "]", "=", "concat_grad", "\n", "# collect the gradient for simulated user", "\n", "simulated_nodes_index", "+=", "1", "\n", "\n", "#if simulated_nodes_index < args.num_simulated_nodes or iter_index != len(train_task.train_loader)-1:", "\n", "#    continue", "\n", "#else:", "\n", "if", "simulated_nodes_index", ">=", "args", ".", "num_simulated_nodes", "or", "iter_index", "==", "len", "(", "train_task", ".", "train_loader", ")", "-", "1", ":", "\n", "                ", "print", "(", "\"@@@@@@@@ simulated_nodes_index: {}, iter_index: {}, len train_task.train_loader: {}\"", ".", "format", "(", "simulated_nodes_index", ",", "iter_index", ",", "len", "(", "train_task", ".", "train_loader", ")", ")", ")", "\n", "print", "(", "\"######## Epoch: {} | Global iter: {}/{}\"", ".", "format", "(", "epoch", ",", "global_iter", ",", "int", "(", "len", "(", "train_task", ".", "train_loader", ")", "/", "args", ".", "num_simulated_nodes", ")", ")", ")", "\n", "# communication step", "\n", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                    ", "comm_start", ".", "record", "(", ")", "\n", "\n", "", "if", "config", "[", "'grad_comb'", "]", ":", "\n", "                    ", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                        ", "torch", ".", "distributed", ".", "all_reduce", "(", "concat_grad", ",", "async_op", "=", "False", ")", "\n", "concat_grad", "[", ":", "]", "=", "concat_grad", "/", "args", ".", "num_nodes", "\n", "", "elif", "args", ".", "compressor", "==", "\"suquantization\"", ":", "\n", "                        ", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "simulated_grad_buffer", ")", "\n", "concat_grad", "[", ":", "]", "=", "reduced_aggregated_grad", "/", "args", ".", "num_nodes", "\n", "", "elif", "args", ".", "compressor", "==", "\"signum\"", ":", "\n", "                        ", "if", "iter_index", "==", "len", "(", "train_task", ".", "train_loader", ")", "-", "1", ":", "\n", "                            ", "print", "(", "\"$$$$$$$$ sim grad buff 0: {}, sim grad buffer -1: {}\"", ".", "format", "(", "simulated_grad_buffer", "[", "0", "]", ",", "simulated_grad_buffer", "[", "-", "1", "]", ")", ")", "\n", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "simulated_grad_buffer", "[", "0", ":", "simulated_nodes_index", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                            ", "reduced_aggregated_grad", ",", "bits_communicated", ",", "compressor_iter_comm_time", ",", "iter_encode_decode_time", "=", "grad_compressor", ".", "reduce", "(", "simulated_grad_buffer", ")", "\n", "", "concat_grad", "[", ":", "]", "=", "reduced_aggregated_grad", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "", "", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                    ", "comm_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "if", "config", "[", "'grad_comb'", "]", ":", "\n", "                    ", "out_grad_list", "=", "devectorize_grad", "(", "concat_grad", ",", "train_task", ".", "model", ")", "\n", "if", "args", ".", "compressor", "==", "\"vanilla\"", ":", "\n", "                        ", "iter_comm_cost", "=", "float", "(", "comm_start", ".", "elapsed_time", "(", "comm_end", ")", ")", "/", "1000.0", "\n", "epoch_comm_time", "+=", "iter_comm_cost", "\n", "", "elif", "args", ".", "compressor", "in", "(", "\"suquantization\"", ",", "\"signum\"", ")", ":", "\n", "                        ", "epoch_comm_time", "+=", "compressor_iter_comm_time", "\n", "epoch_encoding_overhead", "+=", "iter_encode_decode_time", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported gradient compressor !\"", ")", "\n", "\n", "# updated the gradients in place", "\n", "# TODO: Move this to a new function", "\n", "", "", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "                    ", "for", "idx", ",", "param", "in", "enumerate", "(", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "param", ".", "grad", ".", "data", "=", "out_grad_list", "[", "idx", "]", "\n", "\n", "", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'imagenet'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Unsupported model name type ...\"", ")", "\n", "", "", "else", ":", "\n", "# for signsgd we will need to handle weight decay manually: (line ``update parameters\"\" in https://openreview.net/pdf?id=BJxhijAcY7)", "\n", "                    ", "for", "grad", ",", "param", ",", "wd", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ",", "wds", ")", ":", "\n", "                        ", "if", "wd", ">", "0", ":", "\n", "#grad.add_(wd, param.data.detach())", "\n", "                            ", "grad", ".", "add_", "(", "other", "=", "param", ".", "data", ".", "detach", "(", ")", ",", "alpha", "=", "wd", ")", "\n", "\n", "", "", "for", "grad", ",", "p", "in", "zip", "(", "out_grad_list", ",", "train_task", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "#p.data.add_(-current_lr, grad)", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "other", "=", "grad", ",", "alpha", "=", "-", "current_lr", ")", "\n", "\n", "", "train_task", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "", "iter_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_total_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "epoch_iter_time", "+=", "iter_total_dur", "\n", "\n", "# meset the gradient buffer", "\n", "simulated_grad_buffer", "=", "torch", ".", "empty", "(", "args", ".", "num_simulated_nodes", ",", "vectorized_net", ".", "size", "(", ")", "[", "0", "]", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "simulated_nodes_index", "=", "0", "\n", "global_iter", "+=", "1", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "\n", "", "", "breakdown_time_log_dict", "[", "epoch", "]", "=", "{", "\"comp\"", ":", "epoch_compute_time", ",", "\"comm\"", ":", "epoch_comm_time", ",", "\n", "\"encdec_overhead\"", ":", "epoch_encoding_overhead", ",", "\"total\"", ":", "epoch_iter_time", "}", "\n", "\n", "\n", "floats_communicated", "[", "epoch", "]", "=", "elements_per_epoch", "\n", "\n", "#torch.distributed.barrier()", "\n", "\n", "with", "open", "(", "bytes_log_fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "floats_communicated", ",", "fout", ")", "\n", "", "with", "open", "(", "per_iteration_compute_time_log", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "compute_time_per_dict", ",", "fout", ")", "\n", "", "with", "open", "(", "breakdown_time_log_fname", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "breakdown_time_log_dict", ",", "fout", ")", "\n", "\n", "# validate model", "\n", "", "current_test_loss", "=", "train_task", ".", "validate_model", "(", "logger", ")", "\n", "\n", "current_test_loss", "=", "10000", "\n", "if", "not", "best_test_loss", "or", "current_test_loss", "<", "best_test_loss", ":", "\n", "            ", "best_test_loss", "=", "current_test_loss", "\n", "\n", "", "if", "args", ".", "compressor", "!=", "\"signum\"", ":", "\n", "            ", "if", "config", "[", "'name'", "]", "==", "'CNN'", "or", "config", "[", "'name'", "]", "==", "'cifar100'", "or", "config", "[", "'name'", "]", "==", "'svhn'", ":", "\n", "                ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "group", "[", "'lr'", "]", "=", "current_lr", "\n", "", "", "if", "config", "[", "'name'", "]", "==", "'imagenet'", ":", "\n", "                ", "scheduler_multi_step", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.is_conv_param": [[4, 10], ["None"], "function", ["None"], ["def", "is_conv_param", "(", "parameter_name", ")", ":", "\n", "    ", "\"\"\"\n    Says whether this parameter is a conv linear layer that \n    needs a different treatment from the other weights\n    \"\"\"", "\n", "return", "\"conv\"", "in", "parameter_name", "and", "\"weight\"", "in", "parameter_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.is_batchnorm_param": [[12, 17], ["re.match"], "function", ["None"], ["", "def", "is_batchnorm_param", "(", "parameter_name", ")", ":", "\n", "    ", "\"\"\"\n    Is this parameter part of a batchnorm parameter?\n    \"\"\"", "\n", "return", "re", ".", "match", "(", "r\"\"\".*\\.bn\\d+\\.(weight|bias)\"\"\"", ",", "parameter_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.get_weight_decay": [[18, 29], ["utils.is_conv_param", "utils.is_batchnorm_param"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.is_conv_param", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.utils.is_batchnorm_param"], ["", "def", "get_weight_decay", "(", "parameter_name", ",", "config", ")", ":", "\n", "    ", "\"\"\"Take care of differences between weight decay for parameters\"\"\"", "\n", "if", "is_conv_param", "(", "parameter_name", ")", ":", "\n", "#print(\"@@@@@@@ param name: {}, is conv param !!!!!\".format(parameter_name))", "\n", "        ", "return", "config", "[", "\"optimizer_weight_decay_conv\"", "]", "\n", "", "elif", "is_batchnorm_param", "(", "parameter_name", ")", ":", "\n", "#print(\"@@@@@@@ param name: {}, is bn param !!!!!\".format(parameter_name))", "\n", "        ", "return", "config", "[", "\"optimizer_weight_decay_bn\"", "]", "\n", "", "else", ":", "\n", "#print(\"@@@@@@@ param name: {}, is other param !!!!!\".format(parameter_name))", "\n", "        ", "return", "config", "[", "\"optimizer_weight_decay_other\"", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.__init__": [[70, 86], ["torch.distributed.is_available", "torch.zeros", "torch.distributed.get_world_size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "grad_shape", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Begining everything is empty no need to initialize anything\n        \"\"\"", "\n", "self", ".", "k", "=", "None", "# None also indicates to use Full Ranks", "\n", "self", ".", "psg_instance", "=", "None", "# Class instance of powerSGD", "\n", "# this is for the memory of powerSGD", "\n", "#TODO: Currently memory is being dealt in the powersgd method", "\n", "# don't do that", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "memory", "=", "[", "torch", ".", "zeros", "(", "grad_shape", ",", "device", "=", "self", ".", "device", ")", "]", "\n", "self", ".", "distributed", "=", "torch", ".", "distributed", ".", "is_available", "(", ")", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "self", ".", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_workers", "=", "1", "\n", "# TODO: Add random seed as an argument", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.apply_method": [[89, 110], ["torch.zeros_like", "sparsify_gradient.applySparsify.psg_instance.reduce", "torch.numel", "torch.distributed.all_reduce"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce"], ["", "", "def", "apply_method", "(", "self", ",", "grad_in", ",", "use_memory", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Applies whatever method is stored in the psg instance\n        Use memory is currently not used\n        \"\"\"", "\n", "grad_out", "=", "[", "torch", ".", "zeros_like", "(", "grad_in", ",", "device", "=", "self", ".", "device", ")", "]", "\n", "# commenting memory for imagenet scale", "\n", "grad_in", "=", "grad_in", "+", "self", ".", "memory", "[", "0", "]", "\n", "#TODO: Verify memory is being applied properly", "\n", "#TODO: Add distributed in the case of num_workers > 1", "\n", "if", "self", ".", "psg_instance", "is", "not", "None", ":", "\n", "            ", "floats_comm", ",", "comm_cost", ",", "overhead_cost", "=", "self", ".", "psg_instance", ".", "reduce", "(", "[", "grad_in", "]", ",", "grad_out", ",", "self", ".", "memory", ")", "\n", "return", "(", "grad_out", "[", "0", "]", ",", "floats_comm", ",", "comm_cost", ",", "overhead_cost", ")", "\n", "", "else", ":", "\n", "# This is essentially full rank", "\n", "            ", "if", "self", ".", "distributed", ":", "\n", "# distributed for full rank sgd", "\n", "                ", "floats_comm", "=", "torch", ".", "numel", "(", "grad_in", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "grad_in", ",", "async_op", "=", "False", ")", "\n", "grad_in", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "", "return", "(", "grad_in", ",", "floats_comm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.applySparsify.update_method": [[111, 142], ["torch.zeros_like", "powersgd_grad.RankKReducer", "print", "torch.zeros_like"], "methods", ["None"], ["", "", "def", "update_method", "(", "self", ",", "new_k", ",", "zero_memory", "=", "False", ")", ":", "\n", "        ", "if", "new_k", "==", "None", ":", "\n", "            ", "self", ".", "psg_instance", "=", "None", "\n", "# didn't find a suitable method", "\n", "# added for this case", "\n", "self", ".", "k", "=", "new_k", "\n", "self", ".", "memory", "=", "[", "torch", ".", "zeros_like", "(", "self", ".", "memory", "[", "0", "]", ",", "\n", "device", "=", "self", ".", "device", ")", "]", "\n", "\n", "# making a hack to test what happens when we switch", "\n", "", "elif", "self", ".", "k", "!=", "new_k", ":", "\n", "# essentially every update call will initialize a new method", "\n", "            ", "self", ".", "psg_instance", "=", "powersgd_grad", ".", "RankKReducer", "(", "42", ",", "'cuda:0'", ",", "timer", ",", "\n", "rank", "=", "new_k", ")", "\n", "self", ".", "k", "=", "new_k", "\n", "if", "zero_memory", ":", "\n", "# pass", "\n", "                ", "self", ".", "memory", "=", "[", "torch", ".", "zeros_like", "(", "self", ".", "memory", "[", "0", "]", ",", "\n", "device", "=", "self", ".", "device", ")", "]", "\n", "\n", "# elif self.k != new_k:", "\n", "# #TODO: Make device configurable", "\n", "# self.psg_instance = powersgd_grad.RankKReducer(42, 'cuda:0', timer,", "\n", "# rank=new_k)", "\n", "# self.k = new_k", "\n", "# elif self.k == new_k:", "\n", "# # Do nothing", "\n", "# pass", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Do nothing self.k ={}  new_k = {}\"", ".", "format", "(", "self", ".", "k", ",", "new_k", ")", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.sparsify_gradient.metric": [[4, 7], ["log_metric"], "function", ["None"], ["def", "metric", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "True", "==", "0", ":", "\n", "        ", "log_metric", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "timer", "=", "Timer", "(", "verbosity_level", "=", "2", ",", "log_fn", "=", "metric", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.__init__": [[6, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "update_weight", "=", "1", ")", ":", "\n", "        ", "self", ".", "average", "=", "None", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "update_weight", "=", "update_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.value": [[11, 18], ["isinstance", "isinstance", "v.value", "mean_accumulator.MeanAccumulator.average.items", "v.value"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.value", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.value"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "average", ",", "dict", ")", ":", "\n", "            ", "return", "{", "k", ":", "v", ".", "value", "(", ")", "for", "k", ",", "v", "in", "self", ".", "average", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "self", ".", "average", ",", "list", ")", ":", "\n", "            ", "return", "[", "v", ".", "value", "(", ")", "for", "v", "in", "self", ".", "average", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "average", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce": [[19, 53], ["isinstance", "sorted", "isinstance", "torch.distributed.is_available", "torch.distributed.get_world_size", "mean_accumulator.MeanAccumulator.average.keys", "mean_accumulator.MeanAccumulator.average[].reduce", "torch.tensor", "torch.distributed.all_reduce", "isinstance", "torch.tensor.mul_", "torch.distributed.all_reduce", "torch.distributed.all_reduce.wait", "torch.distributed.all_reduce.wait", "torch.tensor.item", "isinstance", "avg.reduce", "mean_accumulator.MeanAccumulator.average.clone", "torch.tensor", "torch.distributed.get_backend"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.all_reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce"], ["", "", "def", "reduce", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reduce over workers\"\"\"", "\n", "if", "not", "torch", ".", "distributed", ".", "is_available", "(", ")", "or", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "==", "1", ":", "\n", "# Skip this if there is only one worker", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "average", ",", "dict", ")", ":", "\n", "            ", "for", "key", "in", "sorted", "(", "self", ".", "average", ".", "keys", "(", ")", ")", ":", "\n", "                ", "self", ".", "average", "[", "key", "]", ".", "reduce", "(", ")", "\n", "", "", "elif", "isinstance", "(", "self", ".", "average", ",", "list", ")", ":", "\n", "            ", "for", "avg", "in", "self", ".", "average", ":", "\n", "                ", "avg", ".", "reduce", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "device", "=", "\"cuda\"", "if", "torch", ".", "distributed", ".", "get_backend", "(", ")", "==", "\"nccl\"", "else", "\"cpu\"", "\n", "total_count", "=", "torch", ".", "tensor", "(", "self", ".", "counter", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "handle_tc", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "total_count", ",", "async_op", "=", "True", ")", "\n", "\n", "# Average * count", "\n", "if", "isinstance", "(", "self", ".", "average", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "multiplied", "=", "self", ".", "average", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "multiplied", "=", "torch", ".", "tensor", "(", "self", ".", "average", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "multiplied", ".", "mul_", "(", "self", ".", "counter", ")", "\n", "handle_mul", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "multiplied", ",", "async_op", "=", "True", ")", "\n", "\n", "handle_tc", ".", "wait", "(", ")", "\n", "handle_mul", ".", "wait", "(", ")", "\n", "\n", "self", ".", "counter", "=", "total_count", ".", "item", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "average", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "self", ".", "average", ".", "data", "=", "multiplied", "/", "total_count", "\n", "", "else", ":", "\n", "                ", "self", ".", "average", "=", "(", "multiplied", "/", "total_count", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add": [[54, 68], ["mean_accumulator.MeanAccumulator._init", "isinstance", "value.items", "isinstance", "mean_accumulator.MeanAccumulator.average[].add", "zip", "mean_accumulator.MeanAccumulator._update", "avg.add"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator._init", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator._update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["", "", "", "def", "add", "(", "self", ",", "value", ",", "weight", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Add a value to the average\"\"\"", "\n", "self", ".", "counter", "+=", "weight", "\n", "if", "self", ".", "average", "is", "None", ":", "\n", "            ", "self", ".", "_init", "(", "value", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "average", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "value", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "average", "[", "k", "]", ".", "add", "(", "v", ",", "weight", ")", "\n", "", "", "elif", "isinstance", "(", "self", ".", "average", ",", "list", ")", ":", "\n", "                ", "for", "avg", ",", "new_value", "in", "zip", "(", "self", ".", "average", ",", "value", ")", ":", "\n", "                    ", "avg", ".", "add", "(", "new_value", ",", "weight", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_update", "(", "value", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator._update": [[69, 79], ["isinstance", "float", "float", "mean_accumulator.MeanAccumulator.average.mul_", "mean_accumulator.MeanAccumulator.average.add_", "isinstance", "ValueError"], "methods", ["None"], ["", "", "", "def", "_update", "(", "self", ",", "value", ",", "weight", ")", ":", "\n", "        ", "alpha", "=", "float", "(", "self", ".", "update_weight", "*", "weight", ")", "/", "float", "(", "self", ".", "counter", "+", "self", ".", "update_weight", "-", "1", ")", "\n", "if", "isinstance", "(", "self", ".", "average", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "self", ".", "average", ".", "mul_", "(", "1.0", "-", "alpha", ")", "\n", "self", ".", "average", ".", "add_", "(", "alpha", ",", "value", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "average", ",", "float", ")", ":", "\n", "            ", "self", ".", "average", "*=", "1.0", "-", "alpha", "\n", "self", ".", "average", "+=", "alpha", "*", "value", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator._init": [[80, 94], ["isinstance", "isinstance", "mean_accumulator.MeanAccumulator", "mean_accumulator.MeanAccumulator.average[].add", "copy.deepcopy", "mean_accumulator.MeanAccumulator", "mean_accumulator.MeanAccumulator.add", "mean_accumulator.MeanAccumulator.average.append"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["", "", "def", "_init", "(", "self", ",", "value", ",", "weight", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "self", ".", "average", "=", "{", "}", "\n", "for", "key", "in", "value", ":", "\n", "                ", "self", ".", "average", "[", "key", "]", "=", "MeanAccumulator", "(", ")", "\n", "self", ".", "average", "[", "key", "]", ".", "add", "(", "value", "[", "key", "]", ",", "weight", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "self", ".", "average", "=", "[", "]", "\n", "for", "v", "in", "value", ":", "\n", "                ", "acc", "=", "MeanAccumulator", "(", ")", "\n", "acc", ".", "add", "(", "value", "[", "key", "]", ",", "weight", ")", "\n", "self", ".", "average", ".", "append", "(", "acc", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "average", "=", "deepcopy", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reset": [[95, 98], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "average", "=", "None", "\n", "self", ".", "counter", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.train_network.__init__.build": [[1, 22], ["cifarTrain", "imagenetTrain", "languageModel", "cifar100Train", "lstmModel", "svhnTrain", "NotImplemented"], "function", ["None"], ["\n", "from", "warmup_scheduler", ".", "scheduler", "import", "GradualWarmupScheduler", "\n", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.__init__": [[116, 142], ["cifar10.cifarTrain._create_model", "cifar10.cifarTrain._create_data_loader", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "cifar10.cifarTrain._create_model", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "cifar10.cifarTrain.model.named_parameters", "cifar10.cifarTrain.lowrank_model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_data_loader", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model"], ["def", "__init__", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "device", "=", "model_config", "[", "'device'", "]", "\n", "self", ".", "model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'arch'", "]", ")", "\n", "\n", "self", ".", "__arch", "=", "model_config", "[", "'arch'", "]", "\n", "\n", "if", "model_config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "self", ".", "rank_factor", "=", "model_config", "[", "'rank_factor'", "]", "\n", "self", ".", "lowrank_model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'lowrank_arch'", "]", ")", "\n", "\n", "# full train loader doesn't do sampling", "\n", "", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "full_train_loader", ",", "self", ".", "sampler", "=", "self", ".", "_create_data_loader", "(", "\n", "model_config", "[", "'data_path'", "]", ",", "model_config", "[", "'num_dataloader_threads'", "]", ",", "\n", "model_config", "[", "'train_batch_size'", "]", ",", "model_config", "[", "'test_batch_size'", "]", ",", "\n", "model_config", "[", "'is_distributed'", "]", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "model_config", "[", "'init_lr'", "]", "\n", "\n", "self", ".", "training_mode", "=", "model_config", "[", "\"training_mode\"", "]", "\n", "if", "self", ".", "training_mode", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "self", ".", "full_rank_warmup_epoch", "=", "model_config", "[", "\"full_rank_warmup_epoch\"", "]", "\n", "\n", "", "self", ".", "parameter_names", "=", "[", "name", "for", "(", "name", ",", "_", ")", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "\n", "if", "model_config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "self", ".", "lowrank_parameter_names", "=", "[", "name", "for", "(", "name", ",", "_", ")", "in", "self", ".", "lowrank_model", ".", "named_parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain._create_model": [[143, 152], ["model.to", "getattr"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "_create_model", "(", "self", ",", "arch", ")", ":", "\n", "        ", "\"\"\"\n        Returns the model skeleton of the specified architecture\n        arch(string): Model architecture\n        \"\"\"", "\n", "#TODO: Fix this architecture thing", "\n", "model", "=", "getattr", "(", "cifar_architectures", ",", "arch", ")", "(", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain._create_data_loader": [[153, 205], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["", "def", "_create_data_loader", "(", "self", ",", "data_path", ",", "num_workers", ",", "train_batch_size", ",", "\n", "test_batch_size", ",", "is_distributed", ")", ":", "\n", "        ", "\"\"\"\n        Returns test and train loaders for a given dataset\n        data_path(str): Location of dataset\n        num_workers(int): Number of workers for loading data\n        train_batch_size(int): Num images in training batch\n        test_batch_size(int): Num images in test batch\n        \"\"\"", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_path", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "sampler", "=", "None", "\n", "is_shuffle", "=", "True", "\n", "if", "is_distributed", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "training_set", ")", "\n", "# when using sampler you don't use shuffle", "\n", "is_shuffle", "=", "False", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "sampler", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_path", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "(", "train_loader", ",", "test_loader", ",", "full_train_loader", ",", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.train_single_iter": [[206, 229], ["enumerate", "cifar10.cifarTrain.model.train", "cifar10.cifarTrain.model.eval", "cifar10.cifarTrain.model", "cifar10.cifarTrain.criterion", "cifar10.cifarTrain.backward", "data.to", "target.to", "cifar10.cifarTrain.model.parameters", "logger.info", "len", "cifar10.cifarTrain.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train_single_iter", "(", "self", ",", "epoch", "=", "None", ",", "logger", "=", "None", ",", "for_autoscale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Train single iter and pack grads in a list and return that list\n        \"\"\"", "\n", "if", "not", "for_autoscale", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "train_data_loader", "=", "self", ".", "train_loader", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "train_data_loader", "=", "self", ".", "full_train_loader", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "batch_idx", "%", "4", "==", "0", ":", "\n", "                ", "if", "logger", "is", "not", "None", ":", "\n", "# not called by autoscale routine", "\n", "                    ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "yield", "grad_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.batch_loss_and_gradient": [[231, 263], ["cifar10.cifarTrain.criterion", "cifar10.cifarTrain.backward", "data.to", "target.to", "cifar10.cifarTrain.model", "NotImplementedError", "NotImplementedError", "logger.info", "range", "cifar10.cifarTrain.model", "cifar10.cifarTrain.lowrank_model", "cifar10.cifarTrain.model.parameters", "range", "len", "cifar10.cifarTrain.item", "cifar10.cifarTrain.model.parameters", "cifar10.cifarTrain.lowrank_model.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "batch_loss_and_gradient", "(", "self", ",", "batch_idx", ",", "data", ",", "target", ",", "logger", "=", "None", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "training_mode", "==", "\"vanilla\"", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "elif", "self", ".", "training_mode", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "if", "epoch", "in", "range", "(", "self", ".", "full_rank_warmup_epoch", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "lowrank_model", "(", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!!\"", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "training_mode", "==", "\"vanilla\"", ":", "\n", "            ", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "", "elif", "self", ".", "training_mode", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "if", "epoch", "in", "range", "(", "self", ".", "full_rank_warmup_epoch", ")", ":", "\n", "                ", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "lowrank_model", ".", "parameters", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!!\"", ")", "\n", "\n", "", "if", "batch_idx", "%", "100", "==", "0", ":", "\n", "            ", "if", "logger", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "grad_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.validate_model": [[264, 280], ["cifar10.cifarTrain.model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "cifar10.cifarTrain.model", "cifar10.cifarTrain.criterion().item", "pred.eq().sum().item", "len", "data.to", "target.to", "cifar10.cifarTrain.max", "len", "cifar10.cifarTrain.criterion", "pred.eq().sum", "pred.eq", "target.view_as"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.validate_lowrank_model": [[281, 297], ["cifar10.cifarTrain.lowrank_model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "cifar10.cifarTrain.lowrank_model", "cifar10.cifarTrain.criterion().item", "pred.eq().sum().item", "len", "data.to", "target.to", "cifar10.cifarTrain.max", "len", "cifar10.cifarTrain.criterion", "pred.eq().sum", "pred.eq", "target.view_as"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate_lowrank_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "lowrank_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "lowrank_model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.cifarTrain.init_hybrid_net": [[298, 303], ["cifar10.decompose_weights"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights"], ["", "def", "init_hybrid_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "lowrank_model", "=", "decompose_weights", "(", "model", "=", "self", ".", "model", ",", "\n", "low_rank_model", "=", "self", ".", "lowrank_model", ",", "\n", "rank_factor", "=", "self", ".", "rank_factor", ",", "\n", "arch", "=", "self", ".", "__arch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar.cifar10.decompose_weights": [[7, 107], ["print", "low_rank_model.load_state_dict", "enumerate", "enumerate", "model.state_dict().items", "low_rank_model.state_dict().items", "enumerate", "enumerate", "NotImplementedError", "param.view", "min", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "model.state_dict().items", "low_rank_model.state_dict().items", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "min", "torch.svd", "torch.svd", "int", "v_weight_sliced.t", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "low_rank_model.state_dict", "param.view", "min", "torch.svd", "torch.svd", "int", "u_weight_sliced.view", "v_weight_sliced.t().view", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator.append", "reconstructed_aggregator[].size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size", "len", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "model.state_dict", "len", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "u_weight_sliced.size", "v_weight_sliced.size", "low_rank_model.state_dict", "param.size", "param.size", "param.size", "param.size", "param.size", "param.view.size", "param.view.size", "v_weight_sliced.t", "param.size", "param.size", "param.size"], "function", ["None"], ["def", "decompose_weights", "(", "model", ",", "low_rank_model", ",", "rank_factor", ",", "arch", ")", ":", "\n", "# SVD version", "\n", "    ", "reconstructed_aggregator", "=", "[", "]", "\n", "print", "(", "\"Conducting model decomposition !!!!!!\"", ")", "\n", "if", "arch", "==", "\"FullRankVGG19\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "54", ")", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "elif", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", "and", "\"classifier.\"", "in", "param_name", "and", "\"classifier.6.\"", "not", "in", "param_name", ":", "\n", "#print(param_name, param.size())", "\n", "                ", "rank", "=", "min", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "param", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param", ")", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "arch", "==", "\"ResNet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n", "                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n", "            ", "assert", "(", "reconstructed_aggregator", "[", "model_counter", "]", ".", "size", "(", ")", "==", "param", ".", "size", "(", ")", ")", "\n", "reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenet.Block.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "torch.autograd.Variable", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.VGG.__init__": [[16, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.VGG.modules", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "'''\n    VGG model \n    '''", "\n", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.VGG.forward": [[36, 41], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["#m.bias.data.zero_()", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.make_layers": [[43, 57], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["\n", "\n", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg11": [[68, 71], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg11_bn": [[73, 76], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg11_bn", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg13": [[78, 81], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg13_bn": [[83, 86], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg16": [[88, 91], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg16_bn": [[93, 96], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg19": [[98, 101], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.vgg.vgg19_bn": [[103, 106], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "\n", "", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenetv2.Block.__init__": [[15, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenetv2.Block.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenetv2.MobileNetV2.__init__": [[52, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenetv2.MobileNetV2._make_layers": [[62, 70], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenetv2.MobileNetV2.forward": [[71, 80], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.mobilenetv2.test": [[82, 87], ["mobilenetv2.MobileNetV2", "torch.autograd.Variable", "MobileNetV2.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.SepConv.__init__": [[14, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.SepConv.forward": [[22, 24], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.CellA.__init__": [[27, 34], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.CellA.forward": [[35, 41], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.CellB.__init__": [[43, 57], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.CellB.forward": [[58, 72], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.PNASNet.__init__": [[74, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.PNASNet._make_layer": [[90, 96], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.PNASNet._downsample": [[97, 101], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.PNASNet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.PNASNetA": [[114, 116], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.PNASNetB": [[117, 119], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.pnasnet.test": [[121, 127], ["pnasnet.PNASNetB", "print", "torch.autograd.Variable", "PNASNetB.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.Bottleneck.__init__": [[10, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.Bottleneck.forward": [[29, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.DPN.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.DPN._make_layer": [[55, 62], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.DPN.forward": [[63, 73], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.DPN26": [[75, 83], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.DPN92": [[84, 92], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.dpn.test": [[94, 99], ["dpn.DPN92", "torch.autograd.Variable", "DPN92.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleBlock.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleBlock.forward": [[17, 22], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.Bottleneck.__init__": [[25, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.Bottleneck.forward": [[43, 51], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleNet.__init__": [[54, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleNet._make_layer": [[68, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleNet.forward": [[77, 86], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleNetG2": [[88, 95], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.ShuffleNetG3": [[96, 103], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.shufflenet.test": [[105, 110], ["shufflenet.ShuffleNetG2", "torch.autograd.Variable", "ShuffleNetG2.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.BasicResidualSEBlock.__init__": [[9, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "self", ".", "squeeze", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "excitation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", ",", "out_channels", "*", "self", ".", "expansion", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", "//", "r", ",", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.BasicResidualSEBlock.forward": [[37, 49], ["senet_new.BasicResidualSEBlock.shortcut", "senet_new.BasicResidualSEBlock.residual", "senet_new.BasicResidualSEBlock.squeeze", "squeeze.view.view.view", "senet_new.BasicResidualSEBlock.excitation", "excitation.view.view.view", "torch.relu", "torch.relu", "torch.relu", "squeeze.view.view.size", "senet_new.BasicResidualSEBlock.size", "senet_new.BasicResidualSEBlock.size", "excitation.view.view.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "\n", "squeeze", "=", "self", ".", "squeeze", "(", "residual", ")", "\n", "squeeze", "=", "squeeze", ".", "view", "(", "squeeze", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "excitation", "=", "self", ".", "excitation", "(", "squeeze", ")", "\n", "excitation", "=", "excitation", ".", "view", "(", "residual", ".", "size", "(", "0", ")", ",", "residual", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "residual", "*", "excitation", ".", "expand_as", "(", "residual", ")", "+", "shortcut", "\n", "\n", "return", "F", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.BottleneckResidualSEBlock.__init__": [[54, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "squeeze", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "excitation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", ",", "out_channels", "*", "self", ".", "expansion", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", "//", "r", ",", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.BottleneckResidualSEBlock.forward": [[86, 99], ["senet_new.BottleneckResidualSEBlock.shortcut", "senet_new.BottleneckResidualSEBlock.residual", "senet_new.BottleneckResidualSEBlock.squeeze", "squeeze.view.view.view", "senet_new.BottleneckResidualSEBlock.excitation", "excitation.view.view.view", "torch.relu", "torch.relu", "torch.relu", "squeeze.view.view.size", "senet_new.BottleneckResidualSEBlock.size", "senet_new.BottleneckResidualSEBlock.size", "excitation.view.view.expand_as"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "squeeze", "=", "self", ".", "squeeze", "(", "residual", ")", "\n", "squeeze", "=", "squeeze", ".", "view", "(", "squeeze", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "excitation", "=", "self", ".", "excitation", "(", "squeeze", ")", "\n", "excitation", "=", "excitation", ".", "view", "(", "residual", ".", "size", "(", "0", ")", ",", "residual", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "residual", "*", "excitation", ".", "expand_as", "(", "residual", ")", "+", "shortcut", "\n", "\n", "return", "F", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.SEResNet.__init__": [[102, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "senet_new.SEResNet._make_stage", "senet_new.SEResNet._make_stage", "senet_new.SEResNet._make_stage", "senet_new.SEResNet._make_stage", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "block_num", ",", "class_num", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "64", "\n", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "stage1", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "0", "]", ",", "64", ",", "1", ")", "\n", "self", ".", "stage2", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "1", "]", ",", "128", ",", "2", ")", "\n", "self", ".", "stage3", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "2", "]", ",", "256", ",", "2", ")", "\n", "self", ".", "stage4", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "3", "]", ",", "516", ",", "2", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.SEResNet.forward": [[120, 134], ["senet_new.SEResNet.pre", "senet_new.SEResNet.stage1", "senet_new.SEResNet.stage2", "senet_new.SEResNet.stage3", "senet_new.SEResNet.stage4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "senet_new.SEResNet.view", "senet_new.SEResNet.linear", "senet_new.SEResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.SEResNet._make_stage": [[136, 147], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "block", ",", "num", ",", "out_channels", ",", "stride", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "out_channels", ",", "stride", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "*", "block", ".", "expansion", "\n", "\n", "while", "num", "-", "1", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "num", "-=", "1", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.seresnet18": [[148, 151], ["print", "senet_new.SEResNet"], "function", ["None"], ["", "", "def", "seresnet18", "(", ")", ":", "\n", "    ", "print", "(", "\"Seresnet18\"", ")", "\n", "return", "SEResNet", "(", "BasicResidualSEBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.seresnet34": [[152, 154], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet34", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BasicResidualSEBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.seresnet50": [[155, 157], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet50", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BottleneckResidualSEBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.seresnet101": [[158, 160], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet101", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BottleneckResidualSEBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet_new.seresnet152": [[161, 163], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet152", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BottleneckResidualSEBlock", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BasicBlock.__init__": [[24, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BasicBlock.forward": [[38, 44], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.Bottleneck.__init__": [[49, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.Bottleneck.forward": [[65, 72], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowrankBasicBlock.__init__": [[77, 99], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowrankBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowrankBasicBlock.forward": [[101, 107], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowrankBasicBlock.bn2", "resnet.LowrankBasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowrankBasicBlock.bn1", "resnet.LowrankBasicBlock.conv2_v", "resnet.LowrankBasicBlock.conv1_v", "resnet.LowrankBasicBlock.conv2_u", "resnet.LowrankBasicBlock.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock1.__init__": [[112, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(self.expansion*planes)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock1.forward": [[131, 139], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock1.conv2_v", "resnet.LowRankBasicBlock1.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock1.conv1_v", "resnet.LowRankBasicBlock1.conv2_u", "resnet.LowRankBasicBlock1.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock2.__init__": [[144, 166], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock2.forward": [[168, 174], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock2.bn2_v", "resnet.LowRankBasicBlock2.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock2.bn1_v", "resnet.LowRankBasicBlock2.conv2_v", "resnet.LowRankBasicBlock2.conv1_v", "resnet.LowRankBasicBlock2.bn2_u", "resnet.LowRankBasicBlock2.bn1_u", "resnet.LowRankBasicBlock2.conv2_u", "resnet.LowRankBasicBlock2.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1_v", "(", "self", ".", "conv1_v", "(", "self", ".", "bn1_u", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2_v", "(", "self", ".", "conv2_v", "(", "self", ".", "bn2_u", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock3.__init__": [[179, 196], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock3.forward": [[198, 204], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock3.bn2", "resnet.LowRankBasicBlock3.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock3.bn1", "resnet.LowRankBasicBlock3.conv2_v", "resnet.LowRankBasicBlock3.conv1_v", "resnet.LowRankBasicBlock3.conv2_u", "resnet.LowRankBasicBlock3.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlockConcat.__init__": [[209, 229], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockConcat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_first", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_second", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "*", "3", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_first", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_second", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "*", "3", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlockConcat.forward": [[231, 239], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlockConcat.bn2", "resnet.LowRankBasicBlockConcat.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlockConcat.bn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet.LowRankBasicBlockConcat.conv2_first", "resnet.LowRankBasicBlockConcat.conv2_second", "resnet.LowRankBasicBlockConcat.conv1_first", "resnet.LowRankBasicBlockConcat.conv1_second"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "torch", ".", "cat", "(", "(", "self", ".", "conv1_first", "(", "x", ")", ",", "self", ".", "conv1_second", "(", "x", ")", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "torch", ".", "cat", "(", "(", "self", ".", "conv2_first", "(", "out", ")", ",", "self", ".", "conv2_second", "(", "out", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock4.__init__": [[244, 261], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlock4.forward": [[263, 269], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock4.bn2", "resnet.LowRankBasicBlock4.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlock4.bn1", "resnet.LowRankBasicBlock4.conv2_v", "resnet.LowRankBasicBlock4.conv1_v", "resnet.LowRankBasicBlock4.conv2_u", "resnet.LowRankBasicBlock4.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BaselineBasicBlock.__init__": [[275, 283], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BaselineBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "# if stride != 1 or in_planes != self.expansion*planes:", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BaselineBasicBlock.forward": [[289, 295], ["torch.relu", "torch.relu", "torch.relu", "resnet.BaselineBasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "resnet.BaselineBasicBlock.bn1", "resnet.BaselineBasicBlock.conv2", "resnet.BaselineBasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out += self.shortcut(x)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBottleneckConv1x1.__init__": [[300, 317], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneckConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "conv1x1", "(", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBottleneckConv1x1.forward": [[319, 326], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBottleneckConv1x1.bn3", "resnet.LowRankBottleneckConv1x1.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBottleneckConv1x1.bn1", "resnet.LowRankBottleneckConv1x1.bn2", "resnet.LowRankBottleneckConv1x1.conv3_v", "resnet.LowRankBottleneckConv1x1.conv1_v", "resnet.LowRankBottleneckConv1x1.conv2_v", "resnet.LowRankBottleneckConv1x1.conv3_u", "resnet.LowRankBottleneckConv1x1.conv1_u", "resnet.LowRankBottleneckConv1x1.conv2_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3_v", "(", "self", ".", "conv3_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlockResidual.__init__": [[331, 351], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv1_res", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv2_res", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlockResidual.forward": [[353, 359], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlockResidual.bn2", "resnet.LowRankBasicBlockResidual.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlockResidual.bn1", "resnet.LowRankBasicBlockResidual.conv2_v", "resnet.LowRankBasicBlockResidual.conv2_res", "resnet.LowRankBasicBlockResidual.conv1_v", "resnet.LowRankBasicBlockResidual.conv1_res", "resnet.LowRankBasicBlockResidual.conv2_u", "resnet.LowRankBasicBlockResidual.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", "+", "self", ".", "conv1_res", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "+", "self", ".", "conv2_res", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlockLowRankResidual.__init__": [[364, 390], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockLowRankResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "# first low rank conv layer", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "# residual part", "\n", "self", ".", "conv1_res_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_res_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv2_res_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_res_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankBasicBlockLowRankResidual.forward": [[392, 398], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlockLowRankResidual.bn2", "resnet.LowRankBasicBlockLowRankResidual.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.LowRankBasicBlockLowRankResidual.bn1", "resnet.LowRankBasicBlockLowRankResidual.conv2_v", "resnet.LowRankBasicBlockLowRankResidual.conv2_res_v", "resnet.LowRankBasicBlockLowRankResidual.conv1_v", "resnet.LowRankBasicBlockLowRankResidual.conv1_res_v", "resnet.LowRankBasicBlockLowRankResidual.conv2_u", "resnet.LowRankBasicBlockLowRankResidual.conv2_res_u", "resnet.LowRankBasicBlockLowRankResidual.conv1_u", "resnet.LowRankBasicBlockLowRankResidual.conv1_res_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", "+", "self", ".", "conv1_res_v", "(", "self", ".", "conv1_res_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "+", "self", ".", "conv2_res_v", "(", "self", ".", "conv2_res_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BaselineResNet.__init__": [[401, 412], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.BaselineResNet._make_layer", "resnet.BaselineResNet._make_layer", "resnet.BaselineResNet._make_layer", "resnet.BaselineResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "BaselineResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BaselineBasicBlock", ",", "int", "(", "64", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BaselineResNet._make_layer": [[413, 420], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BaselineResNet.forward": [[421, 431], ["torch.relu", "torch.relu", "torch.relu", "resnet.BaselineResNet.layer1", "resnet.BaselineResNet.layer2", "resnet.BaselineResNet.layer3", "resnet.BaselineResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.BaselineResNet.view", "resnet.BaselineResNet.linear", "resnet.BaselineResNet.bn1", "resnet.BaselineResNet.size", "resnet.BaselineResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BasicBlockLR.__init__": [[436, 451], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlockLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv1_v = nn.Conv2d(in_planes, planes, kernel_size=(1, 3), stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BasicBlockLR.forward": [[453, 459], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlockLR.bn2", "resnet.BasicBlockLR.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlockLR.bn1", "resnet.BasicBlockLR.conv2_v", "resnet.BasicBlockLR.conv1_v", "resnet.BasicBlockLR.conv2_u", "resnet.BasicBlockLR.conv1_u"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet.__init__": [[462, 473], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet._make_layer": [[474, 481], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet.forward": [[482, 493], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.conv1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.HybridResNet.__init__": [[496, 509], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.HybridResNet._make_layer", "resnet.HybridResNet._make_layer", "resnet.HybridResNet._make_layer", "resnet.HybridResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "fullrank_block", ",", "lowrank_block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "HybridResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "_block_counter", "=", "0", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "fullrank_block", ",", "lowrank_block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "assert", "fullrank_block", ".", "expansion", "==", "lowrank_block", ".", "expansion", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "fullrank_block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.HybridResNet._make_layer": [[510, 522], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "fullrank_block", "lowrank_block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "fullrank_block", ",", "lowrank_block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "if", "self", ".", "_block_counter", "<", "1", ":", "\n", "                ", "layers", ".", "append", "(", "fullrank_block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "fullrank_block", ".", "expansion", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "lowrank_block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "lowrank_block", ".", "expansion", "\n", "", "self", ".", "_block_counter", "+=", "1", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.HybridResNet.forward": [[523, 534], ["torch.relu", "torch.relu", "torch.relu", "resnet.HybridResNet.layer1", "resnet.HybridResNet.layer2", "resnet.HybridResNet.layer3", "resnet.HybridResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.HybridResNet.view", "resnet.HybridResNet.linear", "resnet.HybridResNet.conv1", "resnet.HybridResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResNet.__init__": [[537, 548], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.LowRankResNet._make_layer", "resnet.LowRankResNet._make_layer", "resnet.LowRankResNet._make_layer", "resnet.LowRankResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", "[", "0", "]", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", "[", "1", "]", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", "[", "2", "]", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", "[", "3", "]", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", "[", "0", "]", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResNet._make_layer": [[549, 556], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResNet.forward": [[557, 567], ["torch.relu", "torch.relu", "torch.relu", "resnet.LowRankResNet.layer1", "resnet.LowRankResNet.layer2", "resnet.LowRankResNet.layer3", "resnet.LowRankResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.LowRankResNet.view", "resnet.LowRankResNet.linear", "resnet.LowRankResNet.bn1", "resnet.LowRankResNet.size", "resnet.LowRankResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNetLR.__init__": [[571, 585], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNetLR._make_layer", "resnet.ResNetLR._make_layer", "resnet.ResNetLR._make_layer", "resnet.ResNetLR._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNetLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "#self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNetLR._make_layer": [[586, 593], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNetLR.forward": [[594, 604], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNetLR.layer1", "resnet.ResNetLR.layer2", "resnet.ResNetLR.layer3", "resnet.ResNetLR.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNetLR.view", "resnet.ResNetLR.linear", "resnet.ResNetLR.bn1", "resnet.ResNetLR.size", "resnet.ResNetLR.conv1_v", "resnet.ResNetLR.conv1_u"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet18": [[606, 608], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.BaselineResNet18": [[609, 611], ["resnet.BaselineResNet"], "function", ["None"], ["", "def", "BaselineResNet18", "(", ")", ":", "\n", "    ", "return", "BaselineResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowrankResNet18": [[613, 615], ["resnet.HybridResNet"], "function", ["None"], ["", "def", "LowrankResNet18", "(", ")", ":", "\n", "    ", "return", "HybridResNet", "(", "BasicBlock", ",", "LowrankBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResResNet18": [[622, 624], ["resnet.ResNet"], "function", ["None"], ["", "def", "LowRankResResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockResidual", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResLowRankResNet18": [[625, 627], ["resnet.ResNet"], "function", ["None"], ["", "def", "LowRankResLowRankResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockLowRankResidual", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResNet18LR": [[628, 630], ["resnet.ResNetLR"], "function", ["None"], ["", "def", "LowRankResNet18LR", "(", ")", ":", "\n", "    ", "return", "ResNetLR", "(", "BasicBlockLR", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet34": [[631, 633], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResNet34": [[634, 636], ["resnet.ResNet"], "function", ["None"], ["", "def", "LowRankResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet50": [[637, 639], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.LowRankResNet50": [[640, 642], ["resnet.ResNet"], "function", ["None"], ["", "def", "LowRankResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBottleneckConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet101": [[643, 645], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.ResNet152": [[646, 648], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnet.test": [[650, 654], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.BasicBlock.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.BasicBlock.forward": [[31, 45], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.PreActBlock.__init__": [[48, 63], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.PreActBlock.forward": [[64, 79], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.SENet.__init__": [[82, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.SENet._make_layer": [[94, 101], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.SENet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.SENet18": [[114, 116], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.senet.test": [[118, 122], ["senet.SENet18", "SENet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.Bottleneck.__init__": [[12, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet.__init__": [[39, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet._make_dense_layers": [[70, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet.forward": [[77, 87], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet121": [[88, 90], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet169": [[91, 93], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet201": [[94, 96], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.DenseNet161": [[97, 99], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.densenet_cifar": [[100, 102], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.densenet.test_densenet": [[103, 108], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.densenet_cifar"], ["", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.Block.__init__": [[16, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.Block.forward": [[33, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt.__init__": [[43, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt._make_layer": [[57, 66], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt.forward": [[67, 77], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt29_2x64d": [[79, 81], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt29_4x64d": [[82, 84], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt29_8x64d": [[85, 87], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.ResNeXt29_32x4d": [[88, 90], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.resnext.test_resnext": [[91, 96], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "torch.autograd.Variable", "net.size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.squeezenet.fire.__init__": [[10, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "squeezenet.fire.modules", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "squeeze_planes", ",", "expand_planes", ")", ":", "\n", "        ", "super", "(", "fire", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "squeeze_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "squeeze_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# using MSR initilization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.squeezenet.fire.forward": [[27, 38], ["squeezenet.fire.conv1", "squeezenet.fire.bn1", "squeezenet.fire.relu1", "squeezenet.fire.conv2", "squeezenet.fire.bn2", "squeezenet.fire.conv3", "squeezenet.fire.bn3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "squeezenet.fire.relu2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "out1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out1", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "conv3", "(", "x", ")", "\n", "out2", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.squeezenet.SqueezeNet.__init__": [[41, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.fire", "squeezenet.fire", "squeezenet.fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.fire", "squeezenet.fire", "squeezenet.fire", "squeezenet.fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.fire", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "squeezenet.SqueezeNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 16", "\n", "self", ".", "fire2", "=", "fire", "(", "96", ",", "16", ",", "64", ")", "\n", "self", ".", "fire3", "=", "fire", "(", "128", ",", "16", ",", "64", ")", "\n", "self", ".", "fire4", "=", "fire", "(", "128", ",", "32", ",", "128", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 8", "\n", "self", ".", "fire5", "=", "fire", "(", "256", ",", "32", ",", "128", ")", "\n", "self", ".", "fire6", "=", "fire", "(", "256", ",", "48", ",", "192", ")", "\n", "self", ".", "fire7", "=", "fire", "(", "384", ",", "48", ",", "192", ")", "\n", "self", ".", "fire8", "=", "fire", "(", "384", ",", "64", ",", "256", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 4", "\n", "self", ".", "fire9", "=", "fire", "(", "512", ",", "64", ",", "256", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "10", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "# self.softmax = nn.LogSoftmax(dim=1)", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.squeezenet.SqueezeNet.forward": [[69, 91], ["squeezenet.SqueezeNet.conv1", "squeezenet.SqueezeNet.bn1", "squeezenet.SqueezeNet.relu", "squeezenet.SqueezeNet.maxpool1", "squeezenet.SqueezeNet.fire2", "squeezenet.SqueezeNet.fire3", "squeezenet.SqueezeNet.fire4", "squeezenet.SqueezeNet.maxpool2", "squeezenet.SqueezeNet.fire5", "squeezenet.SqueezeNet.fire6", "squeezenet.SqueezeNet.fire7", "squeezenet.SqueezeNet.fire8", "squeezenet.SqueezeNet.maxpool3", "squeezenet.SqueezeNet.fire9", "squeezenet.SqueezeNet.conv2", "squeezenet.SqueezeNet.avg_pool", "x.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "fire2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire4", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire5", "(", "x", ")", "\n", "x", "=", "self", ".", "fire6", "(", "x", ")", "\n", "x", "=", "self", ".", "fire7", "(", "x", ")", "\n", "x", "=", "self", ".", "fire8", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire9", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "# x = self.softmax(x)", "\n", "# x = x.view(128,10) # 128 is batch size ", "\n", "# # 10 is number of classes", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "# moved to squeeze a little more flexible", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.squeezenet.fire_layer": [[92, 95], ["squeezenet.fire"], "function", ["None"], ["", "", "def", "fire_layer", "(", "inp", ",", "s", ",", "e", ")", ":", "\n", "    ", "f", "=", "fire", "(", "inp", ",", "s", ",", "e", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.squeezenet.squeezenet_cifar": [[96, 102], ["squeezenet.SqueezeNet"], "function", ["None"], ["", "def", "squeezenet_cifar", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "SqueezeNet", "(", ")", "\n", "# inp = Variable(torch.randn(64,3,32,32))", "\n", "# out = net.forward(inp)", "\n", "# print(out.size())", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.googlenet.Inception.__init__": [[10, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.googlenet.Inception.forward": [[50, 56], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.googlenet.GoogLeNet.__init__": [[59, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.googlenet.GoogLeNet.forward": [[84, 101], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActBlock.__init__": [[18, 28], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActBlock.forward": [[30, 37], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActBottleneck.__init__": [[43, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActBottleneck.forward": [[57, 65], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet.__init__": [[68, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet.forward": [[87, 97], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet18": [[99, 101], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet34": [[102, 104], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet50": [[105, 107], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet101": [[108, 110], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.PreActResNet152": [[111, 113], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.preact_resnet.test": [[115, 119], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.wide_basic.__init__": [[23, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.wide_basic.forward": [[37, 43], ["wresnet.wide_basic.dropout", "wresnet.wide_basic.conv2", "wresnet.wide_basic.shortcut", "wresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wresnet.wide_basic.bn2", "wresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.Wide_ResNet.__init__": [[45, 62], ["torch.Module.__init__", "print", "wresnet.conv3x3", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.Wide_ResNet._wide_layer": [[63, 72], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.Wide_ResNet.forward": [[73, 84], ["wresnet.Wide_ResNet.conv1", "wresnet.Wide_ResNet.layer1", "wresnet.Wide_ResNet.layer2", "wresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wresnet.Wide_ResNet.view", "wresnet.Wide_ResNet.linear", "wresnet.Wide_ResNet.bn1", "wresnet.Wide_ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.conv3x3": [[10, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.wresnet.wresnet_cifar": [[85, 87], ["wresnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wresnet_cifar", "(", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "0", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowRankVGG.__init__": [[33, 92], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.LowRankVGG.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(64, 128, 3, 1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv3 = nn.Conv2d(128, 256, 3, 1, padding=1, bias=False)", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv4 = nn.Conv2d(256, 256, 3, 1, bias=False)", "\n", "self", ".", "conv4_u", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4_v", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv5 = nn.Conv2d(256, 512, 3, 1, bias=False)", "\n", "self", ".", "conv5_u", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv6 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv6_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv6_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv7 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv7_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv7_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.conv8 = nn.Conv2d(512, 512, 3, 1, bias=False)", "\n", "self", ".", "conv8_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv8_v", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "max_pooling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "#self.classifier = nn.Sequential(", "\n", "#    nn.Dropout(),", "\n", "#    nn.Linear(512, 128),", "\n", "#    nn.Linear(128, 512),", "\n", "#    nn.ReLU(True),", "\n", "#    nn.Dropout(),", "\n", "#    nn.Linear(512, 128),", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowRankVGG.forward": [[93, 143], ["lowrank_vgg.LowRankVGG.conv1", "lowrank_vgg.LowRankVGG.batch_norm1", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv2_u", "lowrank_vgg.LowRankVGG.conv2_v", "lowrank_vgg.LowRankVGG.batch_norm2", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv3_u", "lowrank_vgg.LowRankVGG.conv3_v", "lowrank_vgg.LowRankVGG.batch_norm3", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.conv4_u", "lowrank_vgg.LowRankVGG.conv4_v", "lowrank_vgg.LowRankVGG.batch_norm4", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv5_u", "lowrank_vgg.LowRankVGG.conv5_v", "lowrank_vgg.LowRankVGG.batch_norm5", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.conv6_u", "lowrank_vgg.LowRankVGG.conv6_v", "lowrank_vgg.LowRankVGG.batch_norm6", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.conv7_u", "lowrank_vgg.LowRankVGG.conv7_v", "lowrank_vgg.LowRankVGG.batch_norm7", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.conv8_u", "lowrank_vgg.LowRankVGG.conv8_v", "lowrank_vgg.LowRankVGG.batch_norm8", "lowrank_vgg.LowRankVGG.relu", "lowrank_vgg.LowRankVGG.max_pooling", "lowrank_vgg.LowRankVGG.view", "lowrank_vgg.LowRankVGG.classifier", "lowrank_vgg.LowRankVGG.size"], "methods", ["None"], ["#    nn.Linear(128, 512),", "\n", "#    nn.ReLU(True),", "\n", "#    nn.Linear(512, num_classes),", "\n", "#)", "\n", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2_v", "(", "x", ")", "\n", "#x = self.conv2(x)", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3_v", "(", "x", ")", "\n", "#x = self.conv3(x)", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv6_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv7_u", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7_v", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.FullRankVGG.__init__": [[149, 184], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.FullRankVGG.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "self", ".", "max_pooling", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "FullRankVGG", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    LowRankVGG model \n    '''", "\n", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FullRankVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.FullRankVGG.forward": [[185, 230], ["lowrank_vgg.FullRankVGG.conv1", "lowrank_vgg.FullRankVGG.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv2", "lowrank_vgg.FullRankVGG.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv3", "lowrank_vgg.FullRankVGG.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG.conv4", "lowrank_vgg.FullRankVGG.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv5", "lowrank_vgg.FullRankVGG.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG.conv6", "lowrank_vgg.FullRankVGG.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.conv7", "lowrank_vgg.FullRankVGG.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG.conv8", "lowrank_vgg.FullRankVGG.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG.view", "lowrank_vgg.FullRankVGG.classifier", "lowrank_vgg.FullRankVGG.size"], "methods", ["None"], ["nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "#x = self.max_pooling(x)", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "#print(\"after conv1 x size: {}\".format(x.size()))", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "#print(\"after conv2 x size: {}\".format(x.size()))", "\n", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#print(\"after conv3 x size: {}\".format(x.size()))", "\n", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.FullRankVGG19.__init__": [[237, 302], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.FullRankVGG19.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "\n", "", "", "class", "FullRankVGG19", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    FullRankVGG19 Model \n    '''", "\n", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FullRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#self.conv1 = nn.Conv2d(3, 64, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#self.conv2 = nn.Conv2d(64, 64, 3, 1, padding=1, bias=True)", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "#self.conv3 = nn.Conv2d(64, 128, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "#self.conv4 = nn.Conv2d(128, 128, 3, 1, padding=1, bias=True)", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv5 = nn.Conv2d(128, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv6 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv7 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv8 = nn.Conv2d(256, 256, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv9 = nn.Conv2d(256, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.FullRankVGG19.forward": [[303, 365], ["lowrank_vgg.FullRankVGG19.conv1", "lowrank_vgg.FullRankVGG19.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv2", "lowrank_vgg.FullRankVGG19.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv3", "lowrank_vgg.FullRankVGG19.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv4", "lowrank_vgg.FullRankVGG19.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv5", "lowrank_vgg.FullRankVGG19.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv6", "lowrank_vgg.FullRankVGG19.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv7", "lowrank_vgg.FullRankVGG19.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv8", "lowrank_vgg.FullRankVGG19.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv9", "lowrank_vgg.FullRankVGG19.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv10", "lowrank_vgg.FullRankVGG19.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv11", "lowrank_vgg.FullRankVGG19.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv12", "lowrank_vgg.FullRankVGG19.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.conv13", "lowrank_vgg.FullRankVGG19.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv14", "lowrank_vgg.FullRankVGG19.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv15", "lowrank_vgg.FullRankVGG19.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.FullRankVGG19.conv16", "lowrank_vgg.FullRankVGG19.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.FullRankVGG19.view", "lowrank_vgg.FullRankVGG19.classifier", "lowrank_vgg.FullRankVGG19.size"], "methods", ["None"], ["#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv15", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv10", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowRankVGG19.__init__": [[373, 480], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.LowRankVGG19.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "int", "int", "int", "int", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv14", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv15", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv16", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "LR_FACOR", "=", "4", "\n", "\n", "class", "LowRankVGG19", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    LowRankVGG-19-BN model \n    '''", "\n", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2_u = nn.Conv2d(64, int(64/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv2_v = nn.Conv2d(int(64/LR_FACOR), 64, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv3_u = nn.Conv2d(64, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv3_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv4_u = nn.Conv2d(128, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv4_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv5_u = nn.Conv2d(128, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv5_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv6_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv6_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv7_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv7_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv8_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv8_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv9_u = nn.Conv2d(256, int(512/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv9_v = nn.Conv2d(int(512/LR_FACOR), 512, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowRankVGG19.forward": [[481, 562], ["lowrank_vgg.LowRankVGG19.conv1", "lowrank_vgg.LowRankVGG19.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv2", "lowrank_vgg.LowRankVGG19.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv3", "lowrank_vgg.LowRankVGG19.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv4", "lowrank_vgg.LowRankVGG19.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv5", "lowrank_vgg.LowRankVGG19.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv6", "lowrank_vgg.LowRankVGG19.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv7", "lowrank_vgg.LowRankVGG19.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv8", "lowrank_vgg.LowRankVGG19.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv9", "lowrank_vgg.LowRankVGG19.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv10_v", "lowrank_vgg.LowRankVGG19.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv11_v", "lowrank_vgg.LowRankVGG19.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv12_v", "lowrank_vgg.LowRankVGG19.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.conv13_v", "lowrank_vgg.LowRankVGG19.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv14_v", "lowrank_vgg.LowRankVGG19.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv15_v", "lowrank_vgg.LowRankVGG19.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19.conv16_v", "lowrank_vgg.LowRankVGG19.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19.view", "lowrank_vgg.LowRankVGG19.classifier", "lowrank_vgg.LowRankVGG19.conv10_u", "lowrank_vgg.LowRankVGG19.conv11_u", "lowrank_vgg.LowRankVGG19.conv12_u", "lowrank_vgg.LowRankVGG19.conv13_u", "lowrank_vgg.LowRankVGG19.conv14_u", "lowrank_vgg.LowRankVGG19.conv15_u", "lowrank_vgg.LowRankVGG19.conv16_u", "lowrank_vgg.LowRankVGG19.size"], "methods", ["None"], ["self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowRankVGG19NonSquare.__init__": [[569, 676], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lowrank_vgg.LowRankVGG19NonSquare.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "int", "int", "int", "int", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "\n", "", "", "class", "LowRankVGG19", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    LowRankVGG-19-BN model \n    '''", "\n", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2_u = nn.Conv2d(64, int(64/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv2_v = nn.Conv2d(int(64/LR_FACOR), 64, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv3_u = nn.Conv2d(64, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv3_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv4_u = nn.Conv2d(128, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv4_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv5_u = nn.Conv2d(128, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv5_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv6_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv6_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv7_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv7_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv8_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv8_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv9_u = nn.Conv2d(256, int(512/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv9_v = nn.Conv2d(int(512/LR_FACOR), 512, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowRankVGG19NonSquare.forward": [[677, 765], ["lowrank_vgg.LowRankVGG19NonSquare.conv1", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv2", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv3", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv4", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv5", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv6", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv7", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv8", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv9", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv10_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv11_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv12_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.conv13_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv14_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv15_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowRankVGG19NonSquare.conv16_v", "lowrank_vgg.LowRankVGG19NonSquare.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowRankVGG19NonSquare.view", "lowrank_vgg.LowRankVGG19NonSquare.classifier", "lowrank_vgg.LowRankVGG19NonSquare.conv10_u", "lowrank_vgg.LowRankVGG19NonSquare.conv11_u", "lowrank_vgg.LowRankVGG19NonSquare.conv12_u", "lowrank_vgg.LowRankVGG19NonSquare.conv13_u", "lowrank_vgg.LowRankVGG19NonSquare.conv14_u", "lowrank_vgg.LowRankVGG19NonSquare.conv15_u", "lowrank_vgg.LowRankVGG19NonSquare.conv16_u", "lowrank_vgg.LowRankVGG19NonSquare.size"], "methods", ["None"], ["\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.VGG19LTH.__init__": [[773, 836], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "lowrank_vgg.VGG19LTH.modules", "isinstance", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n", "x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "LowRankVGG19NonSquare", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    LowRankVGG-19-BN model \n    '''", "\n", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankVGG19NonSquare", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.conv2_u = nn.Conv2d(64, int(64/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv2_v = nn.Conv2d(int(64/LR_FACOR), 64, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "#self.max_pooling1 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv3_u = nn.Conv2d(64, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv3_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.conv4_u = nn.Conv2d(128, int(128/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv4_v = nn.Conv2d(int(128/LR_FACOR), 128, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "#self.max_pooling2 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv5_u = nn.Conv2d(128, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv5_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv6_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.VGG19LTH.forward": [[838, 901], ["lowrank_vgg.VGG19LTH.conv1", "lowrank_vgg.VGG19LTH.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv2", "lowrank_vgg.VGG19LTH.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv3", "lowrank_vgg.VGG19LTH.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv4", "lowrank_vgg.VGG19LTH.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv5", "lowrank_vgg.VGG19LTH.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv6", "lowrank_vgg.VGG19LTH.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv7", "lowrank_vgg.VGG19LTH.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv8", "lowrank_vgg.VGG19LTH.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv9", "lowrank_vgg.VGG19LTH.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv10", "lowrank_vgg.VGG19LTH.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv11", "lowrank_vgg.VGG19LTH.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv12", "lowrank_vgg.VGG19LTH.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.VGG19LTH.conv13", "lowrank_vgg.VGG19LTH.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv14", "lowrank_vgg.VGG19LTH.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv15", "lowrank_vgg.VGG19LTH.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.conv16", "lowrank_vgg.VGG19LTH.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.VGG19LTH.view", "lowrank_vgg.VGG19LTH.classifier", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "lowrank_vgg.VGG19LTH.size"], "methods", ["None"], ["self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv7_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv7_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.conv8_u = nn.Conv2d(256, int(256/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv8_v = nn.Conv2d(int(256/LR_FACOR), 256, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "#self.max_pooling3 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "#self.conv9_u = nn.Conv2d(256, int(512/LR_FACOR), 3, 1, padding=1, bias=False)", "\n", "#self.conv9_v = nn.Conv2d(int(512/LR_FACOR), 512, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv10_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv10_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv11_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv11_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv12_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv12_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "#self.max_pooling4 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "\n", "self", ".", "conv13_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv13_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv14_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv14_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv15_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv15_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "conv16_u", "=", "nn", ".", "Conv2d", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "(", "3", ",", "1", ")", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv16_v", "=", "nn", ".", "Conv2d", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=False)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "max_pooling5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "int", "(", "512", "/", "LR_FACOR", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "512", "/", "LR_FACOR", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowrankVGG19LTH.__init__": [[908, 984], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "lowrank_vgg.LowrankVGG19LTH.modules", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "isinstance", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv2_v(self.conv2_u(x))", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv3_v(self.conv3_u(x))", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv4_v(self.conv4_u(x))", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv5_v(self.conv5_u(x))", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv6_v(self.conv6_u(x))", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv7_v(self.conv7_u(x))", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "#x = self.conv8_v(self.conv8_u(x))", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm8", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "#x = self.conv9_v(self.conv9_u(x))", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_norm9", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv10_v", "(", "self", ".", "conv10_u", "(", "x", ")", ")", "\n", "#x = self.conv10(x)", "\n", "x", "=", "self", ".", "batch_norm10", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv11_v", "(", "self", ".", "conv11_u", "(", "x", ")", ")", "\n", "#x = self.conv11(x)", "\n", "x", "=", "self", ".", "batch_norm11", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv12_v", "(", "self", ".", "conv12_u", "(", "x", ")", ")", "\n", "#x = self.conv12(x)", "\n", "x", "=", "self", ".", "batch_norm12", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "conv13_v", "(", "self", ".", "conv13_u", "(", "x", ")", ")", "\n", "#x = self.conv13(x)", "\n", "x", "=", "self", ".", "batch_norm13", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv14_v", "(", "self", ".", "conv14_u", "(", "x", ")", ")", "\n", "#x = self.conv14(x)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.LowrankVGG19LTH.forward": [[985, 1075], ["lowrank_vgg.LowrankVGG19LTH.conv1", "lowrank_vgg.LowrankVGG19LTH.batch_norm1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv2", "lowrank_vgg.LowrankVGG19LTH.batch_norm2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv3", "lowrank_vgg.LowrankVGG19LTH.batch_norm3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv4", "lowrank_vgg.LowrankVGG19LTH.batch_norm4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv5", "lowrank_vgg.LowrankVGG19LTH.batch_norm5", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv6", "lowrank_vgg.LowrankVGG19LTH.batch_norm6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv7", "lowrank_vgg.LowrankVGG19LTH.batch_norm7", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv8", "lowrank_vgg.LowrankVGG19LTH.batch_norm8", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv9", "lowrank_vgg.LowrankVGG19LTH.batch_norm9", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv10_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm10", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv11_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm11", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv12_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm12", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lowrank_vgg.LowrankVGG19LTH.conv13_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm13", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv14_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm14", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv15_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm15", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.conv16_v", "lowrank_vgg.LowrankVGG19LTH.batch_norm16", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lowrank_vgg.LowrankVGG19LTH.view", "lowrank_vgg.LowrankVGG19LTH.classifier", "lowrank_vgg.LowrankVGG19LTH.conv10_u", "lowrank_vgg.LowrankVGG19LTH.conv11_u", "lowrank_vgg.LowrankVGG19LTH.conv12_u", "lowrank_vgg.LowrankVGG19LTH.conv13_u", "lowrank_vgg.LowrankVGG19LTH.conv14_u", "lowrank_vgg.LowrankVGG19LTH.conv15_u", "lowrank_vgg.LowrankVGG19LTH.conv16_u", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "lowrank_vgg.LowrankVGG19LTH.size"], "methods", ["None"], ["x", "=", "self", ".", "batch_norm14", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv15_v", "(", "self", ".", "conv15_u", "(", "x", ")", ")", "\n", "#x = self.conv15(x)", "\n", "x", "=", "self", ".", "batch_norm15", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv16_v", "(", "self", ".", "conv16_u", "(", "x", ")", ")", "\n", "#x = self.conv16(x)", "\n", "x", "=", "self", ".", "batch_norm16", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "\n", "", "", "class", "VGG19LTH", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    VGG19 LTH model, to match the model in: https://github.com/facebookresearch/open_lth/blob/master/models/cifar_vgg.py\n    please note that, one difference between this model and the original model is that we switch off all bias for the conv layers \n    '''", "\n", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG19LTH", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# based on the literature, we don't touch the first conv layer", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv9 = nn.Conv2d(256, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv10 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv11 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv12 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "\n", "self", ".", "conv13", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv13 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv14 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv15", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv15 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv16 = nn.Conv2d(512, 512, 3, 1, padding=1, bias=True)", "\n", "self", ".", "batch_norm16", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "#self.max_pooling5 = nn.MaxPool2d(kernel_size=2, stride=2)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "#if isinstance(m, nn.Conv2d):", "\n", "#    n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "#    m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", "=", "torch", ".", "rand", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "m", ".", "bias", ".", "data", "=", "torch", ".", "zeros_like", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.uniform": [[12, 16], ["isinstance", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["def", "uniform", "(", "w", ")", ":", "\n", "    ", "if", "isinstance", "(", "w", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "w", ".", "weight", ".", "data", "=", "torch", ".", "rand", "(", "w", ".", "weight", ".", "data", ".", "shape", ")", "\n", "w", ".", "bias", ".", "data", "=", "torch", ".", "zeros_like", "(", "w", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal": [[17, 20], ["isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "kaiming_normal", "(", "w", ")", ":", "\n", "    ", "if", "isinstance", "(", "w", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "w", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.param_counter": [[22, 27], ["enumerate", "model.named_parameters", "p.numel"], "function", ["None"], ["", "", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "param_counter", "=", "0", "\n", "for", "p_index", ",", "(", "p_name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "param_counter", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "param_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn.svhn.svhnTrain.__init__": [[14, 24], ["svhn.svhnTrain._create_model", "svhn.svhnTrain._create_data_loader", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_data_loader", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["def", "__init__", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "device", "=", "model_config", "[", "'device'", "]", "\n", "self", ".", "model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'arch'", "]", ")", "\n", "# full train loader doesn't do sampling", "\n", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "full_train_loader", "=", "self", ".", "_create_data_loader", "(", "\n", "model_config", "[", "'data_path'", "]", ",", "model_config", "[", "'num_dataloader_threads'", "]", ",", "\n", "model_config", "[", "'train_batch_size'", "]", ",", "model_config", "[", "'test_batch_size'", "]", ",", "\n", "model_config", "[", "'is_distributed'", "]", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "model_config", "[", "'init_lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn.svhn.svhnTrain._create_model": [[25, 34], ["model.to", "getattr"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "_create_model", "(", "self", ",", "arch", ")", ":", "\n", "        ", "\"\"\"\n        Returns the model skeleton of the specified architecture\n        arch(string): Model architecture\n        \"\"\"", "\n", "#TODO: Fix this architecture thing", "\n", "model", "=", "getattr", "(", "svhn_architectures", ",", "arch", ")", "(", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn.svhn.svhnTrain._create_data_loader": [[35, 80], ["torchvision.datasets.SVHN", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torchvision.datasets.SVHN", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["", "def", "_create_data_loader", "(", "self", ",", "data_path", ",", "num_workers", ",", "train_batch_size", ",", "\n", "test_batch_size", ",", "is_distributed", ")", ":", "\n", "        ", "\"\"\"\n        Returns test and train loaders for a given dataset\n        data_path(str): Location of dataset\n        num_workers(int): Number of workers for loading data\n        train_batch_size(int): Num images in training batch\n        test_batch_size(int): Num images in test batch\n        \"\"\"", "\n", "sampler", "=", "None", "\n", "is_shuffle", "=", "True", "\n", "training_set", "=", "datasets", ".", "SVHN", "(", "\n", "root", "=", "data_path", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", ")", "\n", "if", "is_distributed", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "training_set", ")", "\n", "# when using sampler you don't use shuffle", "\n", "is_shuffle", "=", "False", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "train_batch_size", ",", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "is_shuffle", ",", "pin_memory", "=", "True", ")", "\n", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "train_batch_size", ",", "sampler", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "SVHN", "(", "\n", "root", "=", "data_path", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", ",", "\n", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "test_batch_size", ",", "sampler", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "(", "train_loader", ",", "test_loader", ",", "full_train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn.svhn.svhnTrain.train_single_iter": [[81, 104], ["enumerate", "svhn.svhnTrain.model.train", "svhn.svhnTrain.model.eval", "svhn.svhnTrain.model", "svhn.svhnTrain.criterion", "svhn.svhnTrain.backward", "data.to", "target.to", "svhn.svhnTrain.model.parameters", "logger.info", "len", "svhn.svhnTrain.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train_single_iter", "(", "self", ",", "epoch", "=", "None", ",", "logger", "=", "None", ",", "for_autoscale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Train single iter and pack grads in a list and return that list\n        \"\"\"", "\n", "if", "not", "for_autoscale", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "train_data_loader", "=", "self", ".", "train_loader", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "train_data_loader", "=", "self", ".", "full_train_loader", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "batch_idx", "%", "20", "==", "0", ":", "\n", "                ", "if", "logger", "is", "not", "None", ":", "\n", "# not called by autoscale routine", "\n", "                    ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "yield", "grad_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn.svhn.svhnTrain.validate_model": [[105, 121], ["svhn.svhnTrain.model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "svhn.svhnTrain.model", "svhn.svhnTrain.criterion().item", "pred.eq().sum().item", "len", "data.to", "target.to", "svhn.svhnTrain.max", "len", "svhn.svhnTrain.criterion", "pred.eq().sum", "pred.eq", "target.view_as"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "\n", "logger", ".", "info", "(", "'Test set(svhn): Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "test_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenet.Block.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "torch.autograd.Variable", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.VGG.__init__": [[16, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.VGG.modules", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "'''\n    VGG model \n    '''", "\n", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.VGG.forward": [[37, 42], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.make_layers": [[44, 58], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["\n", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg11": [[69, 72], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg11_bn": [[74, 77], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg11_bn", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg13": [[79, 82], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg13_bn": [[84, 87], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg16": [[89, 92], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg16_bn": [[94, 97], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg19": [[99, 102], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.vgg.vgg19_bn": [[104, 107], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenetv2.Block.__init__": [[15, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenetv2.Block.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenetv2.MobileNetV2.__init__": [[52, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenetv2.MobileNetV2._make_layers": [[62, 70], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenetv2.MobileNetV2.forward": [[71, 80], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.mobilenetv2.test": [[82, 87], ["mobilenetv2.MobileNetV2", "torch.autograd.Variable", "MobileNetV2.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.SepConv.__init__": [[14, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.SepConv.forward": [[22, 24], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.CellA.__init__": [[27, 34], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.CellA.forward": [[35, 41], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.CellB.__init__": [[43, 57], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.CellB.forward": [[58, 72], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet.__init__": [[74, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet._make_layer": [[90, 96], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet._downsample": [[97, 101], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNetA": [[114, 116], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNetB": [[117, 119], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.test": [[121, 127], ["pnasnet.PNASNetB", "print", "torch.autograd.Variable", "PNASNetB.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.Bottleneck.__init__": [[10, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.Bottleneck.forward": [[29, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN._make_layer": [[55, 62], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN.forward": [[63, 73], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN26": [[75, 83], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN92": [[84, 92], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.test": [[94, 99], ["dpn.DPN92", "torch.autograd.Variable", "DPN92.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleBlock.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleBlock.forward": [[17, 22], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.Bottleneck.__init__": [[25, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.Bottleneck.forward": [[43, 51], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNet.__init__": [[54, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNet._make_layer": [[68, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNet.forward": [[77, 86], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNetG2": [[88, 95], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNetG3": [[96, 103], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.test": [[105, 110], ["shufflenet.ShuffleNetG2", "torch.autograd.Variable", "ShuffleNetG2.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.BasicBlock.__init__": [[19, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.BasicBlock.forward": [[36, 42], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], [")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.Bottleneck.__init__": [[47, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.Bottleneck.forward": [[66, 73], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet.__init__": [[76, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowrankBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet._make_layer": [[88, 95], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet.forward": [[96, 106], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18": [[108, 110], ["resnet.ResNet"], "function", ["None"], ["\n", "", "", "class", "LowRankBasicBlock1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet34": [[111, 113], ["resnet.ResNet"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet50": [[114, 116], ["resnet.ResNet"], "function", ["None"], ["#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet101": [[117, 119], ["resnet.ResNet"], "function", ["None"], ["self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet152": [[120, 122], ["resnet.ResNet"], "function", ["None"], ["self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.test": [[124, 128], ["resnet.ResNet18", "ResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnet.ResNet18"], ["self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(self.expansion*planes)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.BasicBlock.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.BasicBlock.forward": [[31, 45], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.PreActBlock.__init__": [[48, 63], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.PreActBlock.forward": [[64, 79], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.SENet.__init__": [[82, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.SENet._make_layer": [[94, 101], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.SENet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.SENet18": [[114, 116], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.test": [[118, 122], ["senet.SENet18", "SENet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.Bottleneck.__init__": [[12, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet.__init__": [[39, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet._make_dense_layers": [[70, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet.forward": [[77, 87], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet121": [[88, 90], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet169": [[91, 93], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet201": [[94, 96], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.DenseNet161": [[97, 99], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.densenet_cifar": [[100, 102], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.densenet.test_densenet": [[103, 108], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.densenet_cifar"], ["", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.Block.__init__": [[16, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.Block.forward": [[33, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt.__init__": [[43, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt._make_layer": [[57, 66], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt.forward": [[67, 77], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt29_2x64d": [[79, 81], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt29_4x64d": [[82, 84], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt29_8x64d": [[85, 87], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt29_32x4d": [[88, 90], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.test_resnext": [[91, 96], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "torch.autograd.Variable", "net.size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.googlenet.Inception.__init__": [[10, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.googlenet.Inception.forward": [[50, 56], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.googlenet.GoogLeNet.__init__": [[59, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.googlenet.GoogLeNet.forward": [[84, 101], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActBlock.__init__": [[18, 28], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActBlock.forward": [[30, 37], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActBottleneck.__init__": [[43, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActBottleneck.forward": [[57, 65], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet.__init__": [[68, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet.forward": [[87, 97], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet18": [[99, 101], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet34": [[102, 104], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet50": [[105, 107], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet101": [[108, 110], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet152": [[111, 113], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.test": [[115, 119], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.svhn_architectures.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.__init__": [[22, 56], ["imagenet_train.imagenetTrain._create_data_loader", "LabelSmoothingLoss().to", "imagenet_train.imagenetTrain._create_model", "imagenet_train.imagenetTrain._create_model", "imagenet_train.imagenetTrain._create_model", "imagenet_train.imagenetTrain.model.named_parameters", "imagenet_train.LabelSmoothingLoss", "imagenet_train.imagenetTrain.lowrank_model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_data_loader", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model"], ["    ", "def", "__init__", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "device", "=", "model_config", "[", "'device'", "]", "\n", "if", "model_config", "[", "'early_bird'", "]", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'arch'", "]", ",", "\n", "False", ",", "\n", "model_config", "[", "'rank_factor'", "]", ",", "\n", "scratch_dir", "=", "model_config", "[", "'scratch'", "]", ")", "\n", "", "else", ":", "\n", "# vanilla model", "\n", "            ", "self", ".", "model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'arch'", "]", ",", "\n", "is_lowrank", "=", "False", ",", "\n", "rank_factor", "=", "model_config", "[", "'rank_factor'", "]", ")", "\n", "\n", "if", "model_config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "                ", "self", ".", "rank_factor", "=", "model_config", "[", "'rank_factor'", "]", "\n", "self", ".", "lowrank_model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'lowrank_arch'", "]", ",", "\n", "is_lowrank", "=", "True", ",", "\n", "rank_factor", "=", "model_config", "[", "'rank_factor'", "]", ")", "\n", "\n", "# full train loader doesn't do sampling", "\n", "", "", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "sampler", "=", "self", ".", "_create_data_loader", "(", "\n", "model_config", "[", "'data_path'", "]", ",", "model_config", "[", "'num_dataloader_threads'", "]", ",", "\n", "model_config", "[", "'train_batch_size'", "]", ",", "model_config", "[", "'test_batch_size'", "]", ",", "\n", "model_config", "[", "'is_distributed'", "]", ")", "\n", "\n", "self", ".", "training_mode", "=", "model_config", "[", "\"training_mode\"", "]", "\n", "self", ".", "parameter_names", "=", "[", "name", "for", "(", "name", ",", "_", ")", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "self", ".", "criterion", "=", "LabelSmoothingLoss", "(", "classes", "=", "1000", ",", "\n", "smoothing", "=", "0.1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "model_config", "[", "'init_lr'", "]", "\n", "\n", "if", "model_config", "[", "'training_mode'", "]", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "self", ".", "full_rank_warmup_epoch", "=", "model_config", "[", "\"full_rank_warmup_epoch\"", "]", "\n", "self", ".", "lowrank_parameter_names", "=", "[", "name", "for", "(", "name", ",", "_", ")", "in", "self", ".", "lowrank_model", ".", "named_parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain._create_model": [[57, 70], ["model.to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.to", "model.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "_create_model", "(", "self", ",", "arch", ",", "is_lowrank", ",", "rank_factor", ",", "scratch_dir", "=", "None", ")", ":", "\n", "        ", "if", "is_lowrank", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "arch", "]", "(", "rank_factor", "=", "rank_factor", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "arch", "==", "\"resnet50_prune\"", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "scratch_dir", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "cfg_input", "=", "checkpoint", "[", "'cfg'", "]", "\n", "model", "=", "models", ".", "__dict__", "[", "arch", "]", "(", "pretrained", "=", "False", ",", "cfg", "=", "cfg_input", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "arch", "]", "(", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain._create_data_loader": [[71, 116], ["os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["", "def", "_create_data_loader", "(", "self", ",", "data_path", ",", "num_workers", ",", "train_batch_size", ",", "\n", "test_batch_size", ",", "is_distributed", ")", ":", "\n", "        ", "\"\"\"\n        Returns test and train loaders for a given dataset\n        \n        \"\"\"", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train'", ")", "\n", "val_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"val\"", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "train_dir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "sampler", "=", "None", "\n", "is_shuffle", "=", "True", "\n", "if", "is_distributed", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "is_shuffle", "=", "False", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "val_dir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "return", "(", "train_loader", ",", "test_loader", ",", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.train_single_iter": [[117, 134], ["enumerate", "imagenet_train.imagenetTrain.model", "imagenet_train.imagenetTrain.criterion", "imagenet_train.imagenetTrain.backward", "data.to", "target.to", "imagenet_train.imagenetTrain.model.parameters", "logger.info", "len", "imagenet_train.imagenetTrain.item", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train_single_iter", "(", "self", ",", "epoch", "=", "None", ",", "logger", "=", "None", ",", "for_autoscale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Train single iter\n        \"\"\"", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "batch_idx", "%", "100", "==", "0", ":", "\n", "                ", "if", "logger", "is", "not", "None", ":", "\n", "\n", "                    ", "logger", ".", "info", "(", "'Train Epoch(imagenet): {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "train_data_loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "yield", "grad_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.batch_loss_and_gradient": [[135, 168], ["imagenet_train.imagenetTrain.criterion", "imagenet_train.imagenetTrain.backward", "data.to", "target.to", "imagenet_train.imagenetTrain.model", "NotImplementedError", "NotImplementedError", "logger.info", "range", "imagenet_train.imagenetTrain.model", "imagenet_train.imagenetTrain.lowrank_model", "imagenet_train.imagenetTrain.model.parameters", "range", "len", "imagenet_train.imagenetTrain.item", "imagenet_train.imagenetTrain.model.parameters", "imagenet_train.imagenetTrain.lowrank_model.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "batch_loss_and_gradient", "(", "self", ",", "batch_idx", ",", "data", ",", "target", ",", "logger", "=", "None", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "#output = self.model(data)", "\n", "if", "self", ".", "training_mode", "==", "\"vanilla\"", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "elif", "self", ".", "training_mode", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "if", "epoch", "in", "range", "(", "self", ".", "full_rank_warmup_epoch", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "lowrank_model", "(", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!!\"", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#grad_array = [param.grad.data for param in self.model.parameters()]", "\n", "\n", "if", "self", ".", "training_mode", "==", "\"vanilla\"", ":", "\n", "            ", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "", "elif", "self", ".", "training_mode", "in", "(", "\"pufferfish\"", ",", "\"powerfish\"", ")", ":", "\n", "            ", "if", "epoch", "in", "range", "(", "self", ".", "full_rank_warmup_epoch", ")", ":", "\n", "                ", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "lowrank_model", ".", "parameters", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported training mode !!!!\"", ")", "\n", "\n", "", "if", "batch_idx", "%", "100", "==", "0", ":", "\n", "            ", "if", "logger", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'Train Epoch(imagenet): {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "grad_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.validate_model": [[170, 187], ["imagenet_train.imagenetTrain.model.eval", "len", "logger.info", "imagenet_train.imagenetTrain.model.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "imagenet_train.imagenetTrain.model", "imagenet_train.imagenetTrain.criterion().item", "pred.eq().sum().item", "len", "data.to", "target.to", "imagenet_train.imagenetTrain.max", "len", "imagenet_train.imagenetTrain.criterion", "pred.eq().sum", "pred.eq", "target.view_as"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ")", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.imagenetTrain.validate_lowrank_model": [[189, 206], ["imagenet_train.imagenetTrain.lowrank_model.eval", "len", "logger.info", "imagenet_train.imagenetTrain.lowrank_model.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "imagenet_train.imagenetTrain.lowrank_model", "imagenet_train.imagenetTrain.criterion().item", "pred.eq().sum().item", "len", "data.to", "target.to", "imagenet_train.imagenetTrain.max", "len", "imagenet_train.imagenetTrain.criterion", "pred.eq().sum", "pred.eq", "target.view_as"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "validate_lowrank_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "lowrank_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "lowrank_model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ")", ")", "\n", "self", ".", "lowrank_model", ".", "train", "(", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.LabelSmoothingLoss.__init__": [[209, 215], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "smoothing", "=", "0.0", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "cls", "=", "classes", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.imagenet.imagenet_train.LabelSmoothingLoss.forward": [[216, 224], ["pred.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "log_softmax", "(", "dim", "=", "self", ".", "dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# true_dist = pred.data.clone()", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "smoothing", "/", "(", "self", ".", "cls", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "pred", ",", "dim", "=", "self", ".", "dim", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.Bottleneck.__init__": [[20, 45], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cfg", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "cfg_bef", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg_bef", "=", "cfg_bef", "\n", "self", ".", "cfg", "=", "cfg", "\n", "if", "cfg_bef", "!=", "None", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cfg_bef", ",", "cfg", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "1", "]", ",", "cfg", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "2", "]", ")", "\n", "if", "downsample", "!=", "None", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "cfg", "[", "3", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "3", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "cfg_bef", "!=", "None", ":", "\n", "                ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "cfg_bef", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "cfg_bef", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "cfg", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "0", "]", ")", "\n", "", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.Bottleneck.forward": [[46, 67], ["hand_resnet50.Bottleneck.conv1", "hand_resnet50.Bottleneck.bn1", "hand_resnet50.Bottleneck.relu", "hand_resnet50.Bottleneck.conv2", "hand_resnet50.Bottleneck.bn2", "hand_resnet50.Bottleneck.relu", "hand_resnet50.Bottleneck.conv3", "hand_resnet50.Bottleneck.bn3", "hand_resnet50.Bottleneck.relu", "hand_resnet50.Bottleneck.downsample", "hand_resnet50.Bottleneck.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", ".", "clone", "(", ")", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.Bottleneck.get_output_c": [[68, 75], ["None"], "methods", ["None"], ["", "def", "get_output_c", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "downsample", "!=", "None", ":", "\n", "            ", "return", "self", ".", "cfg", "[", "3", "]", "\n", "", "elif", "self", ".", "cfg_bef", "!=", "None", ":", "\n", "            ", "return", "self", ".", "cfg_bef", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "cfg", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.ResNet.__init__": [[79, 104], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "hand_resnet50.ResNet._make_layer", "hand_resnet50.ResNet._make_layer", "hand_resnet50.ResNet._make_layer", "hand_resnet50.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "hand_resnet50.ResNet.modules", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "cfg", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "cfg", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", ",", "cfg_bef", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "0", "]", ",", "cfg", "[", "1", ":", "11", "]", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", ",", "cfg_bef", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg_bef", ",", "cfg", "[", "10", ":", "23", "]", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", ",", "cfg_bef", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg_bef", ",", "cfg", "[", "22", ":", "41", "]", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", ",", "cfg_bef", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg_bef", ",", "cfg", "[", "40", ":", "50", "]", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg_bef", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "# m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.ResNet._make_layer": [[105, 127], ["layers.append", "block().get_output_c", "range", "torch.Sequential", "torch.Sequential", "block", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block", "layers.append", "block().get_output_c", "layers.append", "block().get_output_c", "block", "block", "block", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.Bottleneck.get_output_c", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.Bottleneck.get_output_c", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.Bottleneck.get_output_c"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "cfg_bef", ",", "cfg", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cfg_bef", ",", "cfg", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "3", "]", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", ":", "4", "]", ",", "stride", ",", "downsample", ",", "cfg_bef", "=", "cfg_bef", ")", ")", "\n", "cfg_bef", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", ":", "4", "]", ",", "stride", ",", "downsample", ")", ".", "get_output_c", "(", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "i", "==", "1", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "+", "1", "]", ",", "cfg_bef", "=", "cfg_bef", ")", ")", "\n", "cfg_bef", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "+", "1", "]", ")", ".", "get_output_c", "(", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "+", "1", "]", ",", "cfg_bef", "=", "cfg_bef", ")", ")", "\n", "cfg_bef", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "+", "1", "]", ",", "cfg_bef", "=", "cfg_bef", ")", ".", "get_output_c", "(", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", ",", "cfg_bef", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.ResNet.forward": [[128, 144], ["hand_resnet50.ResNet.conv1", "hand_resnet50.ResNet.bn1", "hand_resnet50.ResNet.relu", "hand_resnet50.ResNet.maxpool", "hand_resnet50.ResNet.layer1", "hand_resnet50.ResNet.layer2", "hand_resnet50.ResNet.layer3", "hand_resnet50.ResNet.layer4", "hand_resnet50.ResNet.avgpool", "hand_resnet50.ResNet.view", "hand_resnet50.ResNet.fc", "hand_resnet50.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.hand_resnet50.resnet50_prune": [[151, 167], ["hand_resnet50.ResNet", "ResNet.load_state_dict", "len", "torch.load_url"], "function", ["None"], ["def", "resnet50_prune", "(", "pretrained", "=", "False", ",", "cfg", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_official", "=", "[", "[", "64", "]", ",", "[", "64", ",", "64", ",", "64", "]", ",", "[", "256", ",", "64", ",", "64", "]", "*", "2", ",", "[", "256", ",", "128", ",", "128", "]", ",", "[", "512", ",", "128", ",", "128", "]", "*", "3", ",", "\n", "[", "512", ",", "256", ",", "256", "]", ",", "[", "1024", ",", "256", ",", "256", "]", "*", "5", ",", "[", "1024", ",", "512", ",", "512", "]", ",", "[", "2048", ",", "512", ",", "512", "]", "*", "2", "]", "\n", "cfg_official", "=", "[", "item", "for", "sublist", "in", "cfg_official", "for", "item", "in", "sublist", "]", "\n", "assert", "len", "(", "cfg_official", ")", "==", "49", ",", "\"Length of cfg_official is not right\"", "\n", "cfg", "=", "cfg_official", "\n", "", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "cfg", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet.ConvBNReLU.__init__": [[34, 40], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet.InvertedResidual.__init__": [[44, 64], ["torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "mobilenet.ConvBNReLU", "mobilenet.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "# test()", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet.InvertedResidual.forward": [[65, 70], ["mobilenet.InvertedResidual.conv", "mobilenet.InvertedResidual.conv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet.MobileNetV2.__init__": [[73, 149], ["torch.nn.Module.__init__", "mobilenet._make_divisible", "mobilenet._make_divisible", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "mobilenet.MobileNetV2.modules", "ValueError", "mobilenet.ConvBNReLU", "mobilenet._make_divisible", "range", "mobilenet.ConvBNReLU", "torch.nn.Dropout", "torch.nn.Linear", "isinstance", "len", "len", "max", "features.append", "torch.nn.init.kaiming_normal_", "isinstance", "block", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet._make_divisible", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet._make_divisible", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet._make_divisible"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet.MobileNetV2._forward": [[150, 155], ["mobilenet.MobileNetV2.features", "mobilenet.MobileNetV2.mean", "mobilenet.MobileNetV2.classifier"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet._make_divisible": [[13, 31], ["max", "int"], "function", ["None"], ["class", "Block", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''Depthwise conv + Pointwise conv'''", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "MobileNet", "(", "nn", ".", "Module", ")", ":", "\n", "# (128,2) means conv planes=128, conv stride=2, by default conv stride=1", "\n", "    ", "cfg", "=", "[", "64", ",", "(", "128", ",", "2", ")", ",", "128", ",", "(", "256", ",", "2", ")", ",", "256", ",", "(", "512", ",", "2", ")", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "(", "1024", ",", "2", ")", ",", "1024", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mobilenet.mobilenet_v2": [[160, 175], ["mobilenet.MobileNetV2", "utils.load_state_dict_from_url", "MobileNetV2.load_state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.VGG.__init__": [[26, 41], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "#m.bias.data.zero_()", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.VGG.forward": [[42, 48], ["vgg.VGG.features", "vgg.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "vgg.VGG.classifier"], "methods", ["None"], ["return", "x", "\n", "\n", "\n", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.VGG._initialize_weights": [[49, 61], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "\n", "", "cfg", "=", "{", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.make_layers": [[63, 77], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["'B'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'D'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'E'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "\n", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "}", "\n", "\n", "\n", "def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n", "\n", "", "def", "vgg11_bn", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.make_layers_lowrank": [[79, 101], ["enumerate", "torch.Sequential", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["\n", "", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n", "\n", "", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n", "\n", "", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n", "\n", "", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n", "\n", "", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg": [[111, 120], ["vgg.VGG", "vgg.make_layers", "utils.load_state_dict_from_url", "VGG.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["    ", "net_vgg11", "=", "vgg11", "(", ")", "\n", "print", "(", "\"#### Net work: {}\"", ".", "format", "(", "net_vgg11", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg_lowrank": [[122, 127], ["vgg.VGG", "vgg.make_layers_lowrank"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.make_layers_lowrank"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg11": [[129, 138], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.lowrank_vgg11": [[140, 149], ["vgg._vgg_lowrank"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg_lowrank"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg11_bn": [[151, 160], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg13": [[162, 171], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg13_bn": [[173, 182], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg16": [[184, 193], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg16_bn": [[195, 204], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg19": [[206, 215], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg19_bn": [[217, 226], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg._vgg"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models._utils.IntermediateLayerGetter.__init__": [[45, 62], ["torch.nn.Module.__init__", "collections.OrderedDict", "model.named_children", "torch.nn.ModuleDict", "set().issubset", "ValueError", "return_layers.items", "set", "model.named_children"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "return_layers", ")", ":", "\n", "        ", "if", "not", "set", "(", "return_layers", ")", ".", "issubset", "(", "[", "name", "for", "name", ",", "_", "in", "model", ".", "named_children", "(", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"return_layers are not present in model\"", ")", "\n", "", "super", "(", "IntermediateLayerGetter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "orig_return_layers", "=", "return_layers", "\n", "return_layers", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "return_layers", ".", "items", "(", ")", "}", "\n", "layers", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "            ", "layers", "[", "name", "]", "=", "module", "\n", "if", "name", "in", "return_layers", ":", "\n", "                ", "del", "return_layers", "[", "name", "]", "\n", "", "if", "not", "return_layers", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "layers", "=", "nn", ".", "ModuleDict", "(", "layers", ")", "\n", "self", ".", "return_layers", "=", "orig_return_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models._utils.IntermediateLayerGetter.forward": [[63, 71], ["collections.OrderedDict", "_utils.IntermediateLayerGetter.layers.items", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "module", "in", "self", ".", "layers", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "return_layers", ":", "\n", "                ", "out_name", "=", "self", ".", "return_layers", "[", "name", "]", "\n", "out", "[", "out_name", "]", "=", "x", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models._utils.IntermediateLayerGetter._load_from_state_dict": [[72, 90], ["local_metadata.get", "super()._load_from_state_dict", "_utils.IntermediateLayerGetter.state_dict().keys", "_utils.IntermediateLayerGetter.state_dict", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet._load_from_state_dict"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "if", "(", "version", "is", "None", "or", "version", "<", "2", ")", ":", "\n", "# now we have a new nesting level for torchscript support", "\n", "            ", "for", "new_key", "in", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "# remove prefix \"layers.\"", "\n", "                ", "old_key", "=", "new_key", "[", "len", "(", "\"layers.\"", ")", ":", "]", "\n", "old_key", "=", "prefix", "+", "old_key", "\n", "new_key", "=", "prefix", "+", "new_key", "\n", "if", "old_key", "in", "state_dict", ":", "\n", "                    ", "value", "=", "state_dict", "[", "old_key", "]", "\n", "del", "state_dict", "[", "old_key", "]", "\n", "state_dict", "[", "new_key", "]", "=", "value", "\n", "", "", "", "super", "(", "IntermediateLayerGetter", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.Inception3.__init__": [[67, 118], ["torch.Module.__init__", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "inception_a", "inception_a", "inception_a", "inception_b", "inception_c", "inception_c", "inception_c", "inception_c", "inception_d", "inception_e", "inception_e", "torch.Linear", "torch.Linear", "torch.Linear", "inception.Inception3.modules", "len", "inception_aux", "isinstance", "isinstance", "stats.truncnorm", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "values.view.view.view", "isinstance", "hasattr", "stats.truncnorm.rvs", "m.weight.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m.weight.copy_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.weight.numel"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "aux_logits", "=", "True", ",", "transform_input", "=", "False", ",", "\n", "inception_blocks", "=", "None", ")", ":", "\n", "        ", "super", "(", "Inception3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "inception_blocks", "is", "None", ":", "\n", "            ", "inception_blocks", "=", "[", "\n", "BasicConv2d", ",", "InceptionA", ",", "InceptionB", ",", "InceptionC", ",", "\n", "InceptionD", ",", "InceptionE", ",", "InceptionAux", "\n", "]", "\n", "", "assert", "len", "(", "inception_blocks", ")", "==", "7", "\n", "conv_block", "=", "inception_blocks", "[", "0", "]", "\n", "inception_a", "=", "inception_blocks", "[", "1", "]", "\n", "inception_b", "=", "inception_blocks", "[", "2", "]", "\n", "inception_c", "=", "inception_blocks", "[", "3", "]", "\n", "inception_d", "=", "inception_blocks", "[", "4", "]", "\n", "inception_e", "=", "inception_blocks", "[", "5", "]", "\n", "inception_aux", "=", "inception_blocks", "[", "6", "]", "\n", "\n", "self", ".", "aux_logits", "=", "aux_logits", "\n", "self", ".", "transform_input", "=", "transform_input", "\n", "self", ".", "Conv2d_1a_3x3", "=", "conv_block", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "Conv2d_2a_3x3", "=", "conv_block", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Conv2d_2b_3x3", "=", "conv_block", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "Conv2d_3b_1x1", "=", "conv_block", "(", "64", ",", "80", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Conv2d_4a_3x3", "=", "conv_block", "(", "80", ",", "192", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Mixed_5b", "=", "inception_a", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "self", ".", "Mixed_5c", "=", "inception_a", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_5d", "=", "inception_a", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_6a", "=", "inception_b", "(", "288", ")", "\n", "self", ".", "Mixed_6b", "=", "inception_c", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "self", ".", "Mixed_6c", "=", "inception_c", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6d", "=", "inception_c", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6e", "=", "inception_c", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "if", "aux_logits", ":", "\n", "            ", "self", ".", "AuxLogits", "=", "inception_aux", "(", "768", ",", "num_classes", ")", "\n", "", "self", ".", "Mixed_7a", "=", "inception_d", "(", "768", ")", "\n", "self", ".", "Mixed_7b", "=", "inception_e", "(", "1280", ")", "\n", "self", ".", "Mixed_7c", "=", "inception_e", "(", "2048", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "import", "scipy", ".", "stats", "as", "stats", "\n", "stddev", "=", "m", ".", "stddev", "if", "hasattr", "(", "m", ",", "'stddev'", ")", "else", "0.1", "\n", "X", "=", "stats", ".", "truncnorm", "(", "-", "2", ",", "2", ",", "scale", "=", "stddev", ")", "\n", "values", "=", "torch", ".", "as_tensor", "(", "X", ".", "rvs", "(", "m", ".", "weight", ".", "numel", "(", ")", ")", ",", "dtype", "=", "m", ".", "weight", ".", "dtype", ")", "\n", "values", "=", "values", ".", "view", "(", "m", ".", "weight", ".", "size", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "copy_", "(", "values", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.Inception3._transform_input": [[119, 126], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "", "", "def", "_transform_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "transform_input", ":", "\n", "            ", "x_ch0", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "0", "]", ",", "1", ")", "*", "(", "0.229", "/", "0.5", ")", "+", "(", "0.485", "-", "0.5", ")", "/", "0.5", "\n", "x_ch1", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "1", "]", ",", "1", ")", "*", "(", "0.224", "/", "0.5", ")", "+", "(", "0.456", "-", "0.5", ")", "/", "0.5", "\n", "x_ch2", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "2", "]", ",", "1", ")", "*", "(", "0.225", "/", "0.5", ")", "+", "(", "0.406", "-", "0.5", ")", "/", "0.5", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_ch0", ",", "x_ch1", ",", "x_ch2", ")", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.Inception3._forward": [[127, 181], ["inception.Inception3.Conv2d_1a_3x3", "inception.Inception3.Conv2d_2a_3x3", "inception.Inception3.Conv2d_2b_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.Inception3.Conv2d_3b_1x1", "inception.Inception3.Conv2d_4a_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.Inception3.Mixed_5b", "inception.Inception3.Mixed_5c", "inception.Inception3.Mixed_5d", "inception.Inception3.Mixed_6a", "inception.Inception3.Mixed_6b", "inception.Inception3.Mixed_6c", "inception.Inception3.Mixed_6d", "inception.Inception3.Mixed_6e", "inception.Inception3.Mixed_7a", "inception.Inception3.Mixed_7b", "inception.Inception3.Mixed_7c", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.dropout", "torch.dropout", "torch.dropout", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "inception.Inception3.fc", "inception.Inception3.AuxLogits"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "# N x 3 x 299 x 299", "\n", "        ", "x", "=", "self", ".", "Conv2d_1a_3x3", "(", "x", ")", "\n", "# N x 32 x 149 x 149", "\n", "x", "=", "self", ".", "Conv2d_2a_3x3", "(", "x", ")", "\n", "# N x 32 x 147 x 147", "\n", "x", "=", "self", ".", "Conv2d_2b_3x3", "(", "x", ")", "\n", "# N x 64 x 147 x 147", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# N x 64 x 73 x 73", "\n", "x", "=", "self", ".", "Conv2d_3b_1x1", "(", "x", ")", "\n", "# N x 80 x 73 x 73", "\n", "x", "=", "self", ".", "Conv2d_4a_3x3", "(", "x", ")", "\n", "# N x 192 x 71 x 71", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# N x 192 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5b", "(", "x", ")", "\n", "# N x 256 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5c", "(", "x", ")", "\n", "# N x 288 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5d", "(", "x", ")", "\n", "# N x 288 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_6a", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6b", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6c", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6d", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6e", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "aux_defined", "=", "self", ".", "training", "and", "self", ".", "aux_logits", "\n", "if", "aux_defined", ":", "\n", "            ", "aux", "=", "self", ".", "AuxLogits", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "aux", "=", "None", "\n", "# N x 768 x 17 x 17", "\n", "", "x", "=", "self", ".", "Mixed_7a", "(", "x", ")", "\n", "# N x 1280 x 8 x 8", "\n", "x", "=", "self", ".", "Mixed_7b", "(", "x", ")", "\n", "# N x 2048 x 8 x 8", "\n", "x", "=", "self", ".", "Mixed_7c", "(", "x", ")", "\n", "# N x 2048 x 8 x 8", "\n", "# Adaptive average pooling", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "# N x 2048 x 1 x 1", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "# N x 2048 x 1 x 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# N x 2048", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# N x 1000 (num_classes)", "\n", "return", "x", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.Inception3.eager_outputs": [[182, 189], ["InceptionOutputs"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "eager_outputs", "(", "self", ",", "x", ",", "aux", ")", ":", "\n", "# type: (Tensor, Optional[Tensor]) -> InceptionOutputs", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "aux_logits", ":", "\n", "            ", "return", "InceptionOutputs", "(", "x", ",", "aux", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.Inception3.forward": [[190, 200], ["inception.Inception3._transform_input", "inception.Inception3._forward", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "InceptionOutputs", "inception.Inception3.eager_outputs", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._transform_input", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.eager_outputs"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_transform_input", "(", "x", ")", "\n", "x", ",", "aux", "=", "self", ".", "_forward", "(", "x", ")", "\n", "aux_defined", "=", "self", ".", "training", "and", "self", ".", "aux_logits", "\n", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "if", "not", "aux_defined", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Scripted Inception3 always returns Inception3 Tuple\"", ")", "\n", "", "return", "InceptionOutputs", "(", "x", ",", "aux", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "eager_outputs", "(", "x", ",", "aux", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionA.__init__": [[204, 218], ["torch.Module.__init__", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch1x1", "=", "conv_block", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch5x5_1", "=", "conv_block", "(", "in_channels", ",", "48", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch5x5_2", "=", "conv_block", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "conv_block", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "conv_block", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "conv_block", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "branch_pool", "=", "conv_block", "(", "in_channels", ",", "pool_features", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionA._forward": [[219, 234], ["inception.InceptionA.branch1x1", "inception.InceptionA.branch5x5_1", "inception.InceptionA.branch5x5_2", "inception.InceptionA.branch3x3dbl_1", "inception.InceptionA.branch3x3dbl_2", "inception.InceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionA.branch_pool"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionA.forward": [[235, 238], ["inception.InceptionA._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_forward", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionB.__init__": [[242, 251], ["torch.Module.__init__", "conv_block", "conv_block", "conv_block", "conv_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch3x3", "=", "conv_block", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "conv_block", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "conv_block", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "conv_block", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionB._forward": [[252, 263], ["inception.InceptionB.branch3x3", "inception.InceptionB.branch3x3dbl_1", "inception.InceptionB.branch3x3dbl_2", "inception.InceptionB.branch3x3dbl_3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3", "(", "x", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "outputs", "=", "[", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionB.forward": [[264, 267], ["inception.InceptionB._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_forward", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionC.__init__": [[271, 289], ["torch.Module.__init__", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch1x1", "=", "conv_block", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n", "c7", "=", "channels_7x7", "\n", "self", ".", "branch7x7_1", "=", "conv_block", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7_2", "=", "conv_block", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7_3", "=", "conv_block", "(", "c7", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch7x7dbl_1", "=", "conv_block", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7dbl_2", "=", "conv_block", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_3", "=", "conv_block", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7dbl_4", "=", "conv_block", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_5", "=", "conv_block", "(", "c7", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "conv_block", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionC._forward": [[290, 308], ["inception.InceptionC.branch1x1", "inception.InceptionC.branch7x7_1", "inception.InceptionC.branch7x7_2", "inception.InceptionC.branch7x7_3", "inception.InceptionC.branch7x7dbl_1", "inception.InceptionC.branch7x7dbl_2", "inception.InceptionC.branch7x7dbl_3", "inception.InceptionC.branch7x7dbl_4", "inception.InceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionC.branch_pool"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionC.forward": [[309, 312], ["inception.InceptionC._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_forward", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionD.__init__": [[316, 327], ["torch.Module.__init__", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch3x3_1", "=", "conv_block", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2", "=", "conv_block", "(", "192", ",", "320", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch7x7x3_1", "=", "conv_block", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7x3_2", "=", "conv_block", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7x3_3", "=", "conv_block", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7x3_4", "=", "conv_block", "(", "192", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionD._forward": [[328, 340], ["inception.InceptionD.branch3x3_1", "inception.InceptionD.branch3x3_2", "inception.InceptionD.branch7x7x3_1", "inception.InceptionD.branch7x7x3_2", "inception.InceptionD.branch7x7x3_3", "inception.InceptionD.branch7x7x3_4", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "self", ".", "branch3x3_2", "(", "branch3x3", ")", "\n", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_1", "(", "x", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_2", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_3", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_4", "(", "branch7x7x3", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "outputs", "=", "[", "branch3x3", ",", "branch7x7x3", ",", "branch_pool", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionD.forward": [[341, 344], ["inception.InceptionD._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_forward", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionE.__init__": [[348, 364], ["torch.Module.__init__", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch1x1", "=", "conv_block", "(", "in_channels", ",", "320", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch3x3_1", "=", "conv_block", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2a", "=", "conv_block", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3_2b", "=", "conv_block", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "conv_block", "(", "in_channels", ",", "448", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "conv_block", "(", "448", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3a", "=", "conv_block", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3dbl_3b", "=", "conv_block", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "conv_block", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionE._forward": [[365, 388], ["inception.InceptionE.branch1x1", "inception.InceptionE.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.InceptionE.branch3x3dbl_1", "inception.InceptionE.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionE.branch_pool", "inception.InceptionE.branch3x3_2a", "inception.InceptionE.branch3x3_2b", "inception.InceptionE.branch3x3dbl_3a", "inception.InceptionE.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionE.forward": [[389, 392], ["inception.InceptionE._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_forward", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionAux.__init__": [[396, 405], ["torch.Module.__init__", "conv_block", "conv_block", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionAux", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "conv0", "=", "conv_block", "(", "in_channels", ",", "128", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv1", "=", "conv_block", "(", "128", ",", "768", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv1", ".", "stddev", "=", "0.01", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "self", ".", "fc", ".", "stddev", "=", "0.001", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.InceptionAux.forward": [[406, 422], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionAux.conv0", "inception.InceptionAux.conv1", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "inception.InceptionAux.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# N x 768 x 17 x 17", "\n", "        ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "5", ",", "stride", "=", "3", ")", "\n", "# N x 768 x 5 x 5", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "# N x 128 x 5 x 5", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# N x 768 x 1 x 1", "\n", "# Adaptive average pooling", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "# N x 768 x 1 x 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# N x 768", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# N x 1000", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.BasicConv2d.__init__": [[426, 430], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.BasicConv2d.forward": [[431, 435], ["inception.BasicConv2d.conv", "inception.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.inception.inception_v3": [[29, 63], ["inception.Inception3", "inception.Inception3", "utils.load_state_dict_from_url", "Inception3.load_state_dict"], "function", ["None"], ["def", "inception_v3", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Inception v3 model architecture from\n    `\"Rethinking the Inception Architecture for Computer Vision\" <http://arxiv.org/abs/1512.00567>`_.\n\n    .. note::\n        **Important**: In contrast to the other models the inception_v3 expects tensors with a size of\n        N x 3 x 299 x 299, so ensure your images are sized accordingly.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        aux_logits (bool): If True, add an auxiliary branch that can improve training.\n            Default: *True*\n        transform_input (bool): If True, preprocesses the input according to the method with which it\n            was trained on ImageNet. Default: *False*\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "if", "'transform_input'", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'transform_input'", "]", "=", "True", "\n", "", "if", "'aux_logits'", "in", "kwargs", ":", "\n", "            ", "original_aux_logits", "=", "kwargs", "[", "'aux_logits'", "]", "\n", "kwargs", "[", "'aux_logits'", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "original_aux_logits", "=", "True", "\n", "", "model", "=", "Inception3", "(", "**", "kwargs", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'inception_v3_google'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "not", "original_aux_logits", ":", "\n", "            ", "model", ".", "aux_logits", "=", "False", "\n", "del", "model", ".", "AuxLogits", "\n", "", "return", "model", "\n", "\n", "", "return", "Inception3", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.InvertedResidual.__init__": [[37, 68], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenetv2.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenetv2.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.InvertedResidual.depthwise_conv", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.InvertedResidual.depthwise_conv"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "(", "1", "<=", "stride", "<=", "3", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'illegal stride value'", ")", "\n", "", "self", ".", "stride", "=", "stride", "\n", "\n", "branch_features", "=", "oup", "//", "2", "\n", "assert", "(", "self", ".", "stride", "!=", "1", ")", "or", "(", "inp", "==", "branch_features", "<<", "1", ")", "\n", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "depthwise_conv", "(", "inp", ",", "inp", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "self", ".", "depthwise_conv", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.InvertedResidual.depthwise_conv": [[70, 73], ["torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthwise_conv", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "groups", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.InvertedResidual.forward": [[74, 84], ["shufflenetv2.channel_shuffle", "x.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.InvertedResidual.branch2", "shufflenetv2.InvertedResidual.branch1", "shufflenetv2.InvertedResidual.branch2"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.ShuffleNetV2.__init__": [[87, 124], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "zip", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "len", "ValueError", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "range", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "inverted_residual", "seq.append", "torch.Sequential", "torch.Sequential", "inverted_residual"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stages_repeats", ",", "stages_out_channels", ",", "num_classes", "=", "1000", ",", "inverted_residual", "=", "InvertedResidual", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "stages_repeats", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_repeats as list of 3 positive ints'", ")", "\n", "", "if", "len", "(", "stages_out_channels", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_out_channels as list of 5 positive ints'", ")", "\n", "", "self", ".", "_stage_out_channels", "=", "stages_out_channels", "\n", "\n", "input_channels", "=", "3", "\n", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "stage_names", "=", "[", "'stage{}'", ".", "format", "(", "i", ")", "for", "i", "in", "[", "2", ",", "3", ",", "4", "]", "]", "\n", "for", "name", ",", "repeats", ",", "output_channels", "in", "zip", "(", "\n", "stage_names", ",", "stages_repeats", ",", "self", ".", "_stage_out_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "seq", "=", "[", "inverted_residual", "(", "input_channels", ",", "output_channels", ",", "2", ")", "]", "\n", "for", "i", "in", "range", "(", "repeats", "-", "1", ")", ":", "\n", "                ", "seq", ".", "append", "(", "inverted_residual", "(", "output_channels", ",", "output_channels", ",", "1", ")", ")", "\n", "", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "seq", ")", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "-", "1", "]", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "output_channels", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.ShuffleNetV2._forward": [[125, 135], ["shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.maxpool", "shufflenetv2.ShuffleNetV2.stage2", "shufflenetv2.ShuffleNetV2.stage3", "shufflenetv2.ShuffleNetV2.stage4", "shufflenetv2.ShuffleNetV2.conv5", "shufflenetv2.ShuffleNetV2.mean", "shufflenetv2.ShuffleNetV2.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "# globalpool", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.channel_shuffle": [[19, 34], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "# type: (torch.Tensor, int) -> torch.Tensor", "\n", "    ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2._shufflenetv2": [[139, 151], ["shufflenetv2.ShuffleNetV2", "NotImplementedError", "utils.load_state_dict_from_url", "ShuffleNetV2.load_state_dict"], "function", ["None"], ["", "def", "_shufflenetv2", "(", "arch", ",", "pretrained", ",", "progress", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShuffleNetV2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "if", "model_url", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'pretrained {} is not supported as of now'", ".", "format", "(", "arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.shufflenet_v2_x0_5": [[153, 165], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x0_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 0.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x0.5'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.shufflenet_v2_x1_0": [[167, 179], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x1_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.0'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.shufflenet_v2_x1_5": [[181, 193], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x1_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.5'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "176", ",", "352", ",", "704", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.shufflenet_v2_x2_0": [[195, 207], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x2_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 2.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x2.0'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "244", ",", "488", ",", "976", ",", "2048", "]", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.BasicBlock.__init__": [[57, 74], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3"], ["\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowrankBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.BasicBlock.forward": [[141, 158], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "", "class", "LowRankBasicBlock2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBasicBlockConv1x1.__init__": [[251, 273], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "ValueError", "NotImplementedError", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "\n", "", "", "class", "BaselineBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBasicBlockConv1x1.forward": [[274, 295], ["resnet.LowRankBasicBlockConv1x1.conv1_u", "resnet.LowRankBasicBlockConv1x1.bn1_u", "resnet.LowRankBasicBlockConv1x1.conv1_v", "resnet.LowRankBasicBlockConv1x1.bn1_v", "resnet.LowRankBasicBlockConv1x1.relu", "resnet.LowRankBasicBlockConv1x1.conv2_u", "resnet.LowRankBasicBlockConv1x1.bn2_u", "resnet.LowRankBasicBlockConv1x1.conv2_v", "resnet.LowRankBasicBlockConv1x1.bn2_v", "resnet.LowRankBasicBlockConv1x1.relu", "resnet.LowRankBasicBlockConv1x1.downsample"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BaselineBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "# if stride != 1 or in_planes != self.expansion*planes:", "\n", "#     self.shortcut = nn.Sequential(", "\n", "#         nn.Conv2d(in_planes, self.expansion*planes, kernel_size=1, stride=stride, bias=False),", "\n", "#         nn.BatchNorm2d(self.expansion*planes)", "\n", "#     )", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out += self.shortcut(x)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.Bottleneck.__init__": [[301, 318], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["        ", "super", "(", "LowRankBottleneckConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "conv1x1", "(", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.Bottleneck.forward": [[319, 340], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3_v", "(", "self", ".", "conv3_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlockResidual", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv1_res", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneck.__init__": [[392, 414], ["torch.Module.__init__", "resnet.conv1x1", "torch.Linear", "torch.Linear", "norm_layer", "resnet.conv3x3", "torch.Linear", "torch.Linear", "norm_layer", "resnet.conv1x1", "torch.Linear", "torch.Linear", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", "+", "self", ".", "conv1_res_v", "(", "self", ".", "conv1_res_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "+", "self", ".", "conv2_res_v", "(", "self", ".", "conv2_res_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "BaselineResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "BaselineResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BaselineBasicBlock", ",", "int", "(", "64", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneck.forward": [[415, 445], ["resnet.LowRankBottleneck.conv1_u", "resnet.LowRankBottleneck._adjust_itermediate_shape", "resnet.LowRankBottleneck.conv1_v", "resnet.LowRankBottleneck.transpose().view", "resnet.LowRankBottleneck.bn1", "resnet.LowRankBottleneck.relu", "resnet.LowRankBottleneck.conv2_u", "resnet.LowRankBottleneck._adjust_itermediate_shape", "resnet.LowRankBottleneck.conv2_v", "resnet.LowRankBottleneck.transpose().view", "resnet.LowRankBottleneck.bn2", "resnet.LowRankBottleneck.relu", "resnet.LowRankBottleneck.conv3_u", "resnet.LowRankBottleneck._adjust_itermediate_shape", "resnet.LowRankBottleneck.conv3_v", "resnet.LowRankBottleneck.transpose().view", "resnet.LowRankBottleneck.bn3", "resnet.LowRankBottleneck.relu", "resnet.LowRankBottleneck.downsample", "resnet.LowRankBottleneck.transpose", "resnet.LowRankBottleneck.size", "resnet.LowRankBottleneck.transpose", "resnet.LowRankBottleneck.size", "resnet.LowRankBottleneck.transpose", "resnet.LowRankBottleneck.size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape"], ["layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "", "class", "BasicBlockLR", "(", "nn", ".", "Module", ")", ":", "\n", "# method from the paper: https://arxiv.org/pdf/1511.06744.pdf", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlockLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.conv1_v = nn.Conv2d(in_planes, planes, kernel_size=(1, 3), stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneck._adjust_itermediate_shape": [[446, 451], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], ["self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneckConv1x1.__init__": [[457, 483], ["torch.Module.__init__", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1(x)))", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneckConv1x1.forward": [[513, 562], ["resnet.LowRankBottleneckConv1x1.conv1_u", "resnet.LowRankBottleneckConv1x1.conv1_v", "resnet.LowRankBottleneckConv1x1.bn1", "resnet.LowRankBottleneckConv1x1.relu", "resnet.LowRankBottleneckConv1x1.conv2_u", "resnet.LowRankBottleneckConv1x1.conv2_v", "resnet.LowRankBottleneckConv1x1.bn2", "resnet.LowRankBottleneckConv1x1.relu", "resnet.LowRankBottleneckConv1x1.conv3_u", "resnet.LowRankBottleneckConv1x1.conv3_v", "resnet.LowRankBottleneckConv1x1.bn3", "resnet.LowRankBottleneckConv1x1.relu", "resnet.LowRankBottleneckConv1x1.downsample"], "methods", ["None"], ["for", "stride", "in", "strides", ":", "\n", "            ", "if", "self", ".", "_block_counter", "<", "1", ":", "\n", "                ", "layers", ".", "append", "(", "fullrank_block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "fullrank_block", ".", "expansion", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "lowrank_block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "lowrank_block", ".", "expansion", "\n", "", "self", ".", "_block_counter", "+=", "1", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LowRankResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", "[", "0", "]", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", "[", "1", "]", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", "[", "2", "]", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", "[", "3", "]", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", "[", "0", "]", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape": [[563, 568], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], ["out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResidualBottleneck.__init__": [[726, 751], ["torch.Module.__init__", "resnet.conv1x1", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "resnet.conv1x1", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResidualBottleneck.forward": [[752, 777], ["resnet.LowRankResidualBottleneck.bn1", "resnet.LowRankResidualBottleneck.relu", "resnet.LowRankResidualBottleneck.bn2", "resnet.LowRankResidualBottleneck.relu", "resnet.LowRankResidualBottleneck.conv3", "resnet.LowRankResidualBottleneck.bn3", "resnet.LowRankResidualBottleneck.relu", "resnet.LowRankResidualBottleneck.conv1_v", "resnet.LowRankResidualBottleneck.conv1_res", "resnet.LowRankResidualBottleneck.conv2_v", "resnet.LowRankResidualBottleneck.conv2_res", "resnet.LowRankResidualBottleneck.downsample", "resnet.LowRankResidualBottleneck.conv1_u", "resnet.LowRankResidualBottleneck.conv2_u"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResidualBottleneck._adjust_itermediate_shape": [[778, 783], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.ResNet.__init__": [[786, 836], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.ResNet._make_layer": [[837, 860], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.ResNet._forward": [[861, 881], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.VariationRankResNet.__init__": [[987, 1037], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.VariationRankResNet._make_layer", "resnet.VariationRankResNet._make_layer", "resnet.VariationRankResNet._make_layer", "resnet.VariationRankResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.VariationRankResNet.modules", "len", "ValueError", "isinstance", "resnet.VariationRankResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.VariationRankResNet._make_layer": [[1038, 1061], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.VariationRankResNet._forward": [[1062, 1082], ["resnet.VariationRankResNet.conv1", "resnet.VariationRankResNet.bn1", "resnet.VariationRankResNet.relu", "resnet.VariationRankResNet.maxpool", "resnet.VariationRankResNet.layer1", "resnet.VariationRankResNet.layer2", "resnet.VariationRankResNet.layer3", "resnet.VariationRankResNet.layer4", "resnet.VariationRankResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.VariationRankResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResNet.__init__": [[1089, 1141], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.LowRankResNet._make_layer", "resnet.LowRankResNet._make_layer", "resnet.LowRankResNet._make_layer", "resnet.LowRankResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.LowRankResNet.modules", "len", "ValueError", "isinstance", "resnet.LowRankResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResNet._make_layer": [[1142, 1165], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResNet._forward": [[1166, 1184], ["resnet.LowRankResNet.conv1", "resnet.LowRankResNet.bn1", "resnet.LowRankResNet.relu", "resnet.LowRankResNet.maxpool", "resnet.LowRankResNet.layer1", "resnet.LowRankResNet.layer2", "resnet.LowRankResNet.layer3", "resnet.LowRankResNet.layer4", "resnet.LowRankResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.LowRankResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.HybridResNet.__init__": [[1189, 1268], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.HybridResNet._make_layer", "resnet.HybridResNet._make_layer", "resnet.HybridResNet._make_layer", "resnet.HybridResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.HybridResNet.modules", "len", "ValueError", "isinstance", "resnet.HybridResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.HybridResNet._make_layer": [[1269, 1309], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.HybridResNet._make_layer_dual_blocks": [[1310, 1356], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fr_block", "resnet.conv1x1", "norm_layer", "layers.append", "layers.append", "fr_block", "lr_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.HybridResNet._forward": [[1357, 1370], ["resnet.HybridResNet.conv1", "resnet.HybridResNet.bn1", "resnet.HybridResNet.relu", "resnet.HybridResNet.maxpool", "resnet.HybridResNet.layer1", "resnet.HybridResNet.layer2", "resnet.HybridResNet.layer3", "resnet.HybridResNet.layer4", "resnet.HybridResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.HybridResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResNetConv1x1.__init__": [[1562, 1619], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.LowRankResNetConv1x1._make_layer", "resnet.LowRankResNetConv1x1._make_layer", "resnet.LowRankResNetConv1x1._make_layer", "resnet.LowRankResNetConv1x1._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.LowRankResNetConv1x1.modules", "len", "ValueError", "isinstance", "resnet.LowRankResNetConv1x1.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResNetConv1x1._make_layer": [[1626, 1667], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankResNetConv1x1._forward": [[1668, 1689], ["resnet.LowRankResNetConv1x1.conv1", "resnet.LowRankResNetConv1x1.bn1", "resnet.LowRankResNetConv1x1.relu", "resnet.LowRankResNetConv1x1.maxpool", "resnet.LowRankResNetConv1x1.layer1", "resnet.LowRankResNetConv1x1.layer2", "resnet.LowRankResNetConv1x1.layer3", "resnet.LowRankResNetConv1x1.layer4", "resnet.LowRankResNetConv1x1.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.LowRankResNetConv1x1.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.BaselineResNet.__init__": [[1696, 1746], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.BaselineResNet._make_layer", "resnet.BaselineResNet._make_layer", "resnet.BaselineResNet._make_layer", "resnet.BaselineResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.BaselineResNet.modules", "len", "ValueError", "int", "int", "int", "int", "isinstance", "resnet.BaselineResNet.modules", "int", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.BaselineResNet._make_layer": [[1747, 1770], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.BaselineResNet._forward": [[1771, 1787], ["resnet.BaselineResNet.conv1", "resnet.BaselineResNet.bn1", "resnet.BaselineResNet.relu", "resnet.BaselineResNet.maxpool", "resnet.BaselineResNet.layer1", "resnet.BaselineResNet.layer2", "resnet.BaselineResNet.layer3", "resnet.BaselineResNet.layer4", "resnet.BaselineResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.BaselineResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.conv3x3": [[42, 46], ["torch.Conv2d"], "function", ["None"], ["out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.conv1x1": [[48, 51], ["torch.Conv2d"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._resnet": [[1793, 1796], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._baseline_resnet": [[1797, 1800], ["resnet.BaselineResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._lowrank_resnet": [[1801, 1804], ["resnet.LowRankResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._lowrank_resnet_conv1x1": [[1805, 1808], ["resnet.LowRankResNetConv1x1"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._hybrid_resnet": [[1809, 1812], ["resnet.HybridResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._vr_resnet": [[1817, 1820], ["resnet.VariationRankResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnet18": [[1826, 1835], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.baseline_resnet18": [[1837, 1846], ["resnet._baseline_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._baseline_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.lowrank_resnet18_conv1x1": [[1848, 1857], ["resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnet34": [[1859, 1868], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.lowrank_resnet34_conv1x1": [[1870, 1879], ["resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnet50": [[1881, 1890], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.vr_resnet50": [[1903, 1912], ["resnet._vr_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._vr_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.lowrank_resnet50": [[1914, 1923], ["resnet._lowrank_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.lowrank_resnet50_conv1x1": [[1924, 1933], ["resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.hybrid_resnet50": [[1934, 1943], ["resnet._hybrid_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._hybrid_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.lowrank_resresnet50": [[1967, 1976], ["resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnet101": [[1978, 1987], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.hybrid_resnet101": [[1989, 1998], ["resnet._hybrid_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._hybrid_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnet152": [[2000, 2009], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.hybrid_resnet152": [[2011, 2020], ["resnet._hybrid_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._hybrid_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnext50_32x4d": [[2022, 2033], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.resnext101_32x8d": [[2035, 2046], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.wide_resnet50_2": [[2048, 2062], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.lowrank_wide_resnet50_2": [[2064, 2080], ["resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.hybrid_wide_resnet50_2": [[2082, 2097], ["resnet._hybrid_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._hybrid_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.wide_resnet101_2": [[2099, 2113], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.count_parameters": [[2115, 2117], ["sum", "p.numel", "model.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.__init__": [[23, 37], ["torch.Module.__init__", "float", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["return", "out", "\n", "\n", "\n", "", "", "class", "Transition", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.bn_function": [[38, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet._DenseLayer.conv1", "densenet._DenseLayer.relu1", "densenet._DenseLayer.norm1"], "methods", ["None"], ["", "", "class", "DenseNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.any_requires_grad": [[45, 51], ["None"], "methods", ["None"], ["\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.call_checkpoint_bottleneck": [[52, 59], ["torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "densenet._DenseLayer.bn_function"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.bn_function"], ["self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.forward": [[72, 91], ["isinstance", "densenet._DenseLayer.conv2", "densenet._DenseLayer.any_requires_grad", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "densenet._DenseLayer.call_checkpoint_bottleneck", "densenet._DenseLayer.bn_function", "densenet._DenseLayer.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "Exception", "densenet._DenseLayer.norm2"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.any_requires_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.call_checkpoint_bottleneck", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseLayer.bn_function"], ["for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n", "", "def", "DenseNet169", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseBlock.__init__": [[97, 109], ["torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "densenet._DenseLayer"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n", "", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n", "", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n", "# test_densenet()", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseBlock.forward": [[110, 116], ["densenet._DenseBlock.layers.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "features.append"], "methods", ["None"], ["", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._DenseBlock._load_from_state_dict": [[117, 135], ["local_metadata.get", "super()._load_from_state_dict", "densenet._DenseBlock.state_dict().keys", "densenet._DenseBlock.state_dict", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet._load_from_state_dict"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._Transition.__init__": [[138, 145], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.DenseNet.__init__": [[165, 213], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet._Transition", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.DenseNet.forward": [[214, 221], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "densenet.DenseNet.classifier"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._load_state_dict": [[223, 239], ["re.compile", "utils.load_state_dict_from_url", "list", "model.load_state_dict", "utils.load_state_dict_from_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._densenet": [[241, 247], ["densenet.DenseNet", "densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._load_state_dict"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet121": [[249, 261], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._densenet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet161": [[263, 275], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._densenet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet169": [[277, 289], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._densenet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet201": [[291, 303], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet._densenet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.alexnet.AlexNet.__init__": [[16, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.alexnet.AlexNet.forward": [[44, 50], ["alexnet.AlexNet.features", "alexnet.AlexNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "alexnet.AlexNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.alexnet.alexnet": [[52, 66], ["alexnet.AlexNet", "utils.load_state_dict_from_url", "AlexNet.load_state_dict"], "function", ["None"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'alexnet'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet.Fire.__init__": [[16, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# using MSR initilization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet.Fire.forward": [[29, 35], ["squeezenet.Fire.squeeze_activation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "squeezenet.Fire.squeeze", "squeezenet.Fire.expand1x1_activation", "squeezenet.Fire.expand3x3_activation", "squeezenet.Fire.expand1x1", "squeezenet.Fire.expand3x3"], "methods", ["None"], ["x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "out1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out1", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "conv3", "(", "x", ")", "\n", "out2", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet.SqueezeNet.__init__": [[39, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "squeezenet.SqueezeNet.modules", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.Fire", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "torch.normal_", "torch.normal_", "torch.normal_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "", "", "class", "SqueezeNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 16", "\n", "self", ".", "fire2", "=", "fire", "(", "96", ",", "16", ",", "64", ")", "\n", "self", ".", "fire3", "=", "fire", "(", "128", ",", "16", ",", "64", ")", "\n", "self", ".", "fire4", "=", "fire", "(", "128", ",", "32", ",", "128", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 8", "\n", "self", ".", "fire5", "=", "fire", "(", "256", ",", "32", ",", "128", ")", "\n", "self", ".", "fire6", "=", "fire", "(", "256", ",", "48", ",", "192", ")", "\n", "self", ".", "fire7", "=", "fire", "(", "384", ",", "48", ",", "192", ")", "\n", "self", ".", "fire8", "=", "fire", "(", "384", ",", "64", ",", "256", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 4", "\n", "self", ".", "fire9", "=", "fire", "(", "512", ",", "64", ",", "256", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "10", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "# self.softmax = nn.LogSoftmax(dim=1)", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "fire2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire4", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire5", "(", "x", ")", "\n", "x", "=", "self", ".", "fire6", "(", "x", ")", "\n", "x", "=", "self", ".", "fire7", "(", "x", ")", "\n", "x", "=", "self", ".", "fire8", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire9", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "# x = self.softmax(x)", "\n", "# x = x.view(128,10) # 128 is batch size ", "\n", "# # 10 is number of classes", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "# moved to squeeze a little more flexible", "\n", "return", "x", "\n", "\n", "", "", "def", "fire_layer", "(", "inp", ",", "s", ",", "e", ")", ":", "\n", "    ", "f", "=", "fire", "(", "inp", ",", "s", ",", "e", ")", "\n", "return", "f", "\n", "\n", "", "def", "squeezenet_cifar", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "SqueezeNet", "(", ")", "\n", "# inp = Variable(torch.randn(64,3,32,32))", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet.SqueezeNet.forward": [[99, 103], ["squeezenet.SqueezeNet.features", "squeezenet.SqueezeNet.classifier", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["None"], ["# out = net.forward(inp)", "\n", "# print(out.size())", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet._squeezenet": [[105, 113], ["squeezenet.SqueezeNet", "utils.load_state_dict_from_url", "SqueezeNet.load_state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet.squeezenet1_0": [[115, 125], ["squeezenet._squeezenet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet._squeezenet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet.squeezenet1_1": [[127, 138], ["squeezenet._squeezenet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.squeezenet._squeezenet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.__init__": [[66, 109], ["torch.Module.__init__", "conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "conv_block", "conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "inception_block", "inception_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "inception_block", "inception_block", "inception_block", "inception_block", "inception_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "inception_block", "inception_block", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "len", "inception_aux_block", "inception_aux_block", "googlenet.GoogLeNet._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "# net = GoogLeNet()", "\n", "# x = torch.randn(1,3,32,32)", "\n", "# y = net(Variable(x))", "\n", "# print(y.size())", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._initialize_weights": [[110, 122], ["googlenet.GoogLeNet.modules", "isinstance", "isinstance", "stats.truncnorm", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "values.view.view.view", "isinstance", "stats.truncnorm.rvs", "m.weight.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m.weight.copy_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.weight.numel"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._transform_input": [[123, 131], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._forward": [[132, 188], ["googlenet.GoogLeNet.conv1", "googlenet.GoogLeNet.maxpool1", "googlenet.GoogLeNet.conv2", "googlenet.GoogLeNet.conv3", "googlenet.GoogLeNet.maxpool2", "googlenet.GoogLeNet.inception3a", "googlenet.GoogLeNet.inception3b", "googlenet.GoogLeNet.maxpool3", "googlenet.GoogLeNet.inception4a", "googlenet.GoogLeNet.inception4b", "googlenet.GoogLeNet.inception4c", "googlenet.GoogLeNet.inception4d", "googlenet.GoogLeNet.inception4e", "googlenet.GoogLeNet.maxpool4", "googlenet.GoogLeNet.inception5a", "googlenet.GoogLeNet.inception5b", "googlenet.GoogLeNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "googlenet.GoogLeNet.dropout", "googlenet.GoogLeNet.fc", "googlenet.GoogLeNet.aux1", "googlenet.GoogLeNet.aux2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.eager_outputs": [[189, 196], ["_GoogLeNetOutputs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.forward": [[197, 208], ["googlenet.GoogLeNet._transform_input", "googlenet.GoogLeNet._forward", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "GoogLeNetOutputs", "googlenet.GoogLeNet.eager_outputs", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._transform_input", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.eager_outputs"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.Inception.__init__": [[213, 233], ["torch.Module.__init__", "conv_block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_block", "conv_block", "conv_block", "conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "conv_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.Inception._forward": [[235, 243], ["googlenet.Inception.branch1", "googlenet.Inception.branch2", "googlenet.Inception.branch3", "googlenet.Inception.branch4"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.Inception.forward": [[244, 247], ["googlenet.Inception._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.InceptionAux.__init__": [[251, 259], ["torch.Module.__init__", "conv_block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.InceptionAux.forward": [[260, 276], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "googlenet.InceptionAux.conv", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "googlenet.InceptionAux.fc2", "googlenet.InceptionAux.fc1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.BasicConv2d.__init__": [[280, 284], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.BasicConv2d.forward": [[285, 289], ["googlenet.BasicConv2d.conv", "googlenet.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.googlenet": [[28, 61], ["googlenet.GoogLeNet", "googlenet.GoogLeNet", "utils.load_state_dict_from_url", "GoogLeNet.load_state_dict", "warnings.warn"], "function", ["None"], ["\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n", "\n", "", "", "class", "GoogLeNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._InvertedResidual.__init__": [[26, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "kernel_size", ",", "stride", ",", "expansion_factor", ",", "\n", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "assert", "kernel_size", "in", "[", "3", ",", "5", "]", "\n", "mid_ch", "=", "in_ch", "*", "expansion_factor", "\n", "self", ".", "apply_residual", "=", "(", "in_ch", "==", "out_ch", "and", "stride", "==", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "# Pointwise", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "mid_ch", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_ch", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# Depthwise", "\n", "nn", ".", "Conv2d", "(", "mid_ch", ",", "mid_ch", ",", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "mid_ch", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_ch", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# Linear pointwise. Note that there's no activation.", "\n", "nn", ".", "Conv2d", "(", "mid_ch", ",", "out_ch", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ",", "momentum", "=", "bn_momentum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._InvertedResidual.forward": [[47, 52], ["mnasnet._InvertedResidual.layers", "mnasnet._InvertedResidual.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "apply_residual", ":", "\n", "            ", "return", "self", ".", "layers", "(", "input", ")", "+", "input", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "layers", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet.__init__": [[99, 133], ["super().__init__", "mnasnet._get_depths", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mnasnet.MNASNet._initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mnasnet._stack", "mnasnet._stack", "mnasnet._stack", "mnasnet._stack", "mnasnet._stack", "mnasnet._stack", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._get_depths", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack"], ["def", "__init__", "(", "self", ",", "alpha", ",", "num_classes", "=", "1000", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "alpha", ">", "0.0", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "depths", "=", "_get_depths", "(", "alpha", ")", "\n", "layers", "=", "[", "\n", "# First layer: regular conv.", "\n", "nn", ".", "Conv2d", "(", "3", ",", "depths", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "depths", "[", "0", "]", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# Depthwise separable, no skip.", "\n", "nn", ".", "Conv2d", "(", "depths", "[", "0", "]", ",", "depths", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "\n", "groups", "=", "depths", "[", "0", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "depths", "[", "0", "]", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "depths", "[", "0", "]", ",", "depths", "[", "1", "]", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "depths", "[", "1", "]", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "# MNASNet blocks: stacks of inverted residuals.", "\n", "_stack", "(", "depths", "[", "1", "]", ",", "depths", "[", "2", "]", ",", "3", ",", "2", ",", "3", ",", "3", ",", "_BN_MOMENTUM", ")", ",", "\n", "_stack", "(", "depths", "[", "2", "]", ",", "depths", "[", "3", "]", ",", "5", ",", "2", ",", "3", ",", "3", ",", "_BN_MOMENTUM", ")", ",", "\n", "_stack", "(", "depths", "[", "3", "]", ",", "depths", "[", "4", "]", ",", "5", ",", "2", ",", "6", ",", "3", ",", "_BN_MOMENTUM", ")", ",", "\n", "_stack", "(", "depths", "[", "4", "]", ",", "depths", "[", "5", "]", ",", "3", ",", "1", ",", "6", ",", "2", ",", "_BN_MOMENTUM", ")", ",", "\n", "_stack", "(", "depths", "[", "5", "]", ",", "depths", "[", "6", "]", ",", "5", ",", "2", ",", "6", ",", "4", ",", "_BN_MOMENTUM", ")", ",", "\n", "_stack", "(", "depths", "[", "6", "]", ",", "depths", "[", "7", "]", ",", "3", ",", "1", ",", "6", ",", "1", ",", "_BN_MOMENTUM", ")", ",", "\n", "# Final mapping to classifier input.", "\n", "nn", ".", "Conv2d", "(", "depths", "[", "7", "]", ",", "1280", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1280", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet.forward": [[134, 139], ["mnasnet.MNASNet.layers", "x.mean.mean.mean", "mnasnet.MNASNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "# Equivalent to global avgpool and removing H and W dimensions.", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet._initialize_weights": [[140, 154], ["mnasnet.MNASNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "\n", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "\n", "nonlinearity", "=", "\"sigmoid\"", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet._load_from_state_dict": [[155, 194], ["local_metadata.get", "super()._load_from_state_dict", "mnasnet._get_depths", "enumerate", "warnings.warn", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mnasnet._stack"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.MNASNet._load_from_state_dict", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._get_depths", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack"], ["", "", "", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "\"version\"", ",", "None", ")", "\n", "assert", "version", "in", "[", "1", ",", "2", "]", "\n", "\n", "if", "version", "==", "1", "and", "not", "self", ".", "alpha", "==", "1.0", ":", "\n", "# In the initial version of the model (v1), stem was fixed-size.", "\n", "# All other layer configurations were the same. This will patch", "\n", "# the model so that it's identical to v1. Model with alpha 1.0 is", "\n", "# unaffected.", "\n", "            ", "depths", "=", "_get_depths", "(", "self", ".", "alpha", ")", "\n", "v1_stem", "=", "[", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "groups", "=", "32", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "_stack", "(", "16", ",", "depths", "[", "2", "]", ",", "3", ",", "2", ",", "3", ",", "3", ",", "_BN_MOMENTUM", ")", ",", "\n", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "v1_stem", ")", ":", "\n", "                ", "self", ".", "layers", "[", "idx", "]", "=", "layer", "\n", "\n", "# The model is now identical to v1, and must be saved as such.", "\n", "", "self", ".", "_version", "=", "1", "\n", "warnings", ".", "warn", "(", "\n", "\"A new version of MNASNet model has been implemented. \"", "\n", "\"Your checkpoint was saved using the previous version. \"", "\n", "\"This checkpoint will load and work as before, but \"", "\n", "\"you may want to upgrade by training a newer model or \"", "\n", "\"transfer learning from an updated ImageNet checkpoint.\"", ",", "\n", "UserWarning", ")", "\n", "\n", "", "super", "(", "MNASNet", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "\n", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._stack": [[54, 67], ["mnasnet._InvertedResidual", "range", "torch.Sequential", "remaining.append", "mnasnet._InvertedResidual"], "function", ["None"], ["", "", "", "def", "_stack", "(", "in_ch", ",", "out_ch", ",", "kernel_size", ",", "stride", ",", "exp_factor", ",", "repeats", ",", "\n", "bn_momentum", ")", ":", "\n", "    ", "\"\"\" Creates a stack of inverted residuals. \"\"\"", "\n", "assert", "repeats", ">=", "1", "\n", "# First one has no skip, because feature map size changes.", "\n", "first", "=", "_InvertedResidual", "(", "in_ch", ",", "out_ch", ",", "kernel_size", ",", "stride", ",", "exp_factor", ",", "\n", "bn_momentum", "=", "bn_momentum", ")", "\n", "remaining", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "repeats", ")", ":", "\n", "        ", "remaining", ".", "append", "(", "\n", "_InvertedResidual", "(", "out_ch", ",", "out_ch", ",", "kernel_size", ",", "1", ",", "exp_factor", ",", "\n", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "first", ",", "*", "remaining", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._round_to_multiple_of": [[69, 76], ["max", "int"], "function", ["None"], ["", "def", "_round_to_multiple_of", "(", "val", ",", "divisor", ",", "round_up_bias", "=", "0.9", ")", ":", "\n", "    ", "\"\"\" Asymmetric rounding to make `val` divisible by `divisor`. With default\n    bias, will round up, unless the number is no more than 10% greater than the\n    smaller divisible value, i.e. (83, 8) -> 80, but (84, 8) -> 88. \"\"\"", "\n", "assert", "0.0", "<", "round_up_bias", "<", "1.0", "\n", "new_val", "=", "max", "(", "divisor", ",", "int", "(", "val", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "return", "new_val", "if", "new_val", ">=", "round_up_bias", "*", "val", "else", "new_val", "+", "divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._get_depths": [[78, 83], ["mnasnet._round_to_multiple_of"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._round_to_multiple_of"], ["", "def", "_get_depths", "(", "alpha", ")", ":", "\n", "    ", "\"\"\" Scales tensor depths as in reference MobileNet code, prefers rouding up\n    rather than down. \"\"\"", "\n", "depths", "=", "[", "32", ",", "16", ",", "24", ",", "40", ",", "80", ",", "96", ",", "192", ",", "320", "]", "\n", "return", "[", "_round_to_multiple_of", "(", "depth", "*", "alpha", ",", "8", ")", "for", "depth", "in", "depths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._load_pretrained": [[196, 203], ["model.load_state_dict", "ValueError", "utils.load_state_dict_from_url"], "function", ["None"], ["", "", "def", "_load_pretrained", "(", "model_name", ",", "model", ",", "progress", ")", ":", "\n", "    ", "if", "model_name", "not", "in", "_MODEL_URLS", "or", "_MODEL_URLS", "[", "model_name", "]", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"No checkpoint is available for model type {}\"", ".", "format", "(", "model_name", ")", ")", "\n", "", "checkpoint_url", "=", "_MODEL_URLS", "[", "model_name", "]", "\n", "model", ".", "load_state_dict", "(", "\n", "load_state_dict_from_url", "(", "checkpoint_url", ",", "progress", "=", "progress", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.mnasnet0_5": [[205, 217], ["mnasnet.MNASNet", "mnasnet._load_pretrained"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._load_pretrained"], ["", "def", "mnasnet0_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet with depth multiplier of 0.5 from\n    `\"MnasNet: Platform-Aware Neural Architecture Search for Mobile\"\n    <https://arxiv.org/pdf/1807.11626.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MNASNet", "(", "0.5", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_pretrained", "(", "\"mnasnet0_5\"", ",", "model", ",", "progress", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.mnasnet0_75": [[219, 231], ["mnasnet.MNASNet", "mnasnet._load_pretrained"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._load_pretrained"], ["", "def", "mnasnet0_75", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet with depth multiplier of 0.75 from\n    `\"MnasNet: Platform-Aware Neural Architecture Search for Mobile\"\n    <https://arxiv.org/pdf/1807.11626.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MNASNet", "(", "0.75", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_pretrained", "(", "\"mnasnet0_75\"", ",", "model", ",", "progress", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.mnasnet1_0": [[233, 245], ["mnasnet.MNASNet", "mnasnet._load_pretrained"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._load_pretrained"], ["", "def", "mnasnet1_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet with depth multiplier of 1.0 from\n    `\"MnasNet: Platform-Aware Neural Architecture Search for Mobile\"\n    <https://arxiv.org/pdf/1807.11626.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MNASNet", "(", "1.0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_pretrained", "(", "\"mnasnet1_0\"", ",", "model", ",", "progress", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet.mnasnet1_3": [[247, 259], ["mnasnet.MNASNet", "mnasnet._load_pretrained"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.mnasnet._load_pretrained"], ["", "def", "mnasnet1_3", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet with depth multiplier of 1.3 from\n    `\"MnasNet: Platform-Aware Neural Architecture Search for Mobile\"\n    <https://arxiv.org/pdf/1807.11626.pdf>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MNASNet", "(", "1.3", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_pretrained", "(", "\"mnasnet1_3\"", ",", "model", ",", "progress", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg.__init__": [[18, 34], ["torch.Module.__init__", "vgg.vgg.make_layers", "torch.Linear", "torch.Linear", "vgg.vgg._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["\n", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg.make_layers": [[35, 49], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "#m.bias.data.zero_()", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg.forward": [[50, 56], ["vgg.vgg.feature", "x.view.view.view", "vgg.vgg.classifier", "torch.AvgPool2d", "torch.AvgPool2d", "x.view.view.size"], "methods", ["None"], ["            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg.vgg._initialize_weights": [[57, 70], ["vgg.vgg.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "\n", "", "cfg", "=", "{", "\n", "'A'", ":", "[", "64", ",", "'M'", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'B'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'D'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'E'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "\n", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "}", "\n", "\n", "\n", "def", "vgg11", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.channel_selection.channel_selection.__init__": [[12, 19], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the `indexes` with all one vector with the length same as the number of channels.\n        During pruning, the places in `indexes` which correpond to the channels to be pruned will be set to 0.\n\t    \"\"\"", "\n", "super", "(", "channel_selection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indexes", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.channel_selection.channel_selection.forward": [[20, 31], ["numpy.squeeze", "numpy.argwhere", "numpy.resize", "channel_selection.channel_selection.indexes.data.cpu().numpy", "channel_selection.channel_selection.indexes.data.cpu"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.resize"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        Parameter\n        ---------\n        input_tensor: (N,C,H,W). It should be the output of BatchNorm2d layer.\n\t\t\"\"\"", "\n", "selected_index", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "self", ".", "indexes", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "selected_index", ".", "size", "==", "1", ":", "\n", "            ", "selected_index", "=", "np", ".", "resize", "(", "selected_index", ",", "(", "1", ",", ")", ")", "\n", "", "output", "=", "input_tensor", "[", ":", ",", "selected_index", ",", ":", ",", ":", "]", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.BasicBlock.__init__": [[36, 46], ["torch.Module.__init__", "channel_selection.channel_selection.channel_selection", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cfg", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "1", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "cfg", "[", "1", "]", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.BasicBlock.forward": [[47, 65], ["resnet_imagenet.BasicBlock.select", "resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.bn1", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.bn2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "select", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.Bottleneck.__init__": [[70, 82], ["torch.Module.__init__", "channel_selection.channel_selection.channel_selection", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.Bottleneck.forward": [[83, 105], ["resnet_imagenet.Bottleneck.select", "resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.bn1", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.bn2", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.bn3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "select", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.ResNet.__init__": [[109, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "channel_selection.channel_selection.channel_selection", "resnet_imagenet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "if", "cfg", "is", "None", ":", "\n", "# Construct config variable (basic block)", "\n", "            ", "cfg", "=", "[", "[", "64", "]", ",", "[", "64", ",", "64", "]", "*", "layers", "[", "0", "]", ",", "[", "128", ",", "128", "]", "*", "layers", "[", "1", "]", ",", "[", "256", ",", "256", "]", "*", "layers", "[", "2", "]", ",", "[", "512", ",", "512", "]", "*", "layers", "[", "3", "]", "]", "\n", "cfg", "=", "[", "item", "for", "sub_list", "in", "cfg", "for", "item", "in", "sub_list", "]", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "cfg", "=", "cfg", "[", "0", ":", "2", "*", "layers", "[", "0", "]", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "cfg", "=", "cfg", "[", "2", "*", "layers", "[", "0", "]", ":", "2", "*", "(", "layers", "[", "0", "]", "+", "layers", "[", "1", "]", ")", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "cfg", "=", "cfg", "[", "2", "*", "(", "layers", "[", "0", "]", "+", "layers", "[", "1", "]", ")", ":", "2", "*", "(", "layers", "[", "0", "]", "+", "layers", "[", "1", "]", "+", "layers", "[", "2", "]", ")", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "cfg", "=", "cfg", "[", "2", "*", "(", "layers", "[", "0", "]", "+", "layers", "[", "1", "]", "+", "layers", "[", "2", "]", ")", ":", "2", "*", "(", "layers", "[", "0", "]", "+", "layers", "[", "1", "]", "+", "layers", "[", "2", "]", "+", "layers", "[", "3", "]", ")", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "64", "*", "block", ".", "expansion", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.ResNet._make_layer": [[138, 154], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "cfg", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "0", ":", "2", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "2", "*", "i", ":", "2", "*", "(", "i", "+", "1", ")", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.ResNet.forward": [[155, 172], ["resnet_imagenet.ResNet.conv1", "resnet_imagenet.ResNet.bn1", "resnet_imagenet.ResNet.select", "resnet_imagenet.ResNet.relu", "resnet_imagenet.ResNet.maxpool", "resnet_imagenet.ResNet.layer1", "resnet_imagenet.ResNet.layer2", "resnet_imagenet.ResNet.layer3", "resnet_imagenet.ResNet.layer4", "resnet_imagenet.ResNet.avgpool", "resnet_imagenet.ResNet.view", "resnet_imagenet.ResNet.fc", "resnet_imagenet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "select", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.conv3x3": [[28, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.resnet18": [[174, 184], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "cfg", "=", "cfg", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet18'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.resnet34": [[186, 196], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet34'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.resnet50": [[198, 208], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet50'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.resnet101": [[210, 220], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet101'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet_imagenet.resnet152": [[222, 232], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet152'", "]", ")", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.wage_initializer.truncated_normal_": [[5, 12], ["tensor.new_empty().normal_", "tensor.data.copy_", "tensor.data.mul_().add_", "valid.max", "tensor.new_empty().normal_.gather().squeeze", "tensor.new_empty", "tensor.data.mul_", "tensor.new_empty().normal_.gather"], "function", ["None"], ["def", "truncated_normal_", "(", "tensor", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "shape", "\n", "tmp", "=", "tensor", ".", "new_empty", "(", "size", "+", "(", "4", ",", ")", ")", ".", "normal_", "(", ")", "\n", "valid", "=", "(", "tmp", "<", "2", ")", "&", "(", "tmp", ">", "-", "2", ")", "\n", "ind", "=", "valid", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "tensor", ".", "data", ".", "copy_", "(", "tmp", ".", "gather", "(", "-", "1", ",", "ind", ")", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "tensor", ".", "data", ".", "mul_", "(", "std", ")", ".", "add_", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.wage_initializer.scale_limit": [[13, 22], ["max", "max", "round", "numpy.log2"], "function", ["None"], ["", "def", "scale_limit", "(", "limit", ",", "bits_W", ",", "name", ",", "scale_dict", ")", ":", "\n", "# This is a magic number, copied", "\n", "    ", "beta", "=", "1.5", "\n", "Wm", "=", "beta", "/", "(", "2", "**", "(", "bits_W", "-", "1", ")", ")", "\n", "scale", "=", "2", "**", "round", "(", "np", ".", "log2", "(", "Wm", "/", "limit", ")", ")", "\n", "scale", "=", "max", "(", "scale", ",", "1.0", ")", "\n", "limit", "=", "max", "(", "Wm", ",", "limit", ")", "\n", "scale_dict", "[", "name", "]", "=", "scale", "\n", "return", "limit", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.wage_initializer.wage_init_": [[23, 41], ["tensor.ndimension", "math.sqrt", "wage_initializer.scale_limit", "tensor.data.uniform_", "print", "NotImplementedError", "ValueError", "tensor.size", "tensor.size", "tensor.dim", "[].numel"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.wage_initializer.scale_limit"], ["", "def", "wage_init_", "(", "tensor", ",", "bits_W", ",", "name", ",", "scale_dict", ",", "factor", "=", "2.0", ",", "mode", "=", "\"fan_in\"", ")", ":", "\n", "    ", "if", "mode", "!=", "\"fan_in\"", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"support only wage normal\"", ")", "\n", "\n", "", "dimensions", "=", "tensor", ".", "ndimension", "(", ")", "\n", "if", "dimensions", "<", "2", ":", "raise", "ValueError", "(", "\"tensor at least is 2d\"", ")", "\n", "elif", "dimensions", "==", "2", ":", "fan_in", "=", "tensor", ".", "size", "(", "1", ")", "\n", "elif", "dimensions", ">", "2", ":", "\n", "        ", "num_input_fmaps", "=", "tensor", ".", "size", "(", "1", ")", "\n", "receptive_field_size", "=", "1", "\n", "if", "tensor", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "receptive_field_size", "=", "tensor", "[", "0", "]", "[", "0", "]", ".", "numel", "(", ")", "\n", "", "fan_in", "=", "num_input_fmaps", "*", "receptive_field_size", "\n", "# This is a magic number, copied", "\n", "", "float_limit", "=", "math", ".", "sqrt", "(", "3", "*", "factor", "/", "fan_in", ")", "\n", "quant_limit", "=", "scale_limit", "(", "float_limit", ",", "bits_W", ",", "name", ",", "scale_dict", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "quant_limit", ",", "quant_limit", ")", "\n", "print", "(", "\"name {}, fan_in {}, float_limit {}, quant limit {}\"", ".", "format", "(", "name", ",", "fan_in", ",", "float_limit", ",", "quant_limit", ")", ")", "\n", "#import pdb; pdb.set_trace()", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.WeightQuantFunc.forward": [[12, 22], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize_2.quantize"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "weight", ",", "num_bits_weight", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# q_weight", "\n", "            ", "if", "num_bits_weight", "is", "not", "None", "and", "num_bits_weight", "<", "32", ":", "\n", "                ", "q_weight", "=", "quantize", "(", "\n", "weight", ",", "num_bits", "=", "num_bits_weight", ",", "dequantize", "=", "True", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ",", "signed", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "q_weight", "=", "weight", "\n", "", "", "return", "q_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.WeightQuantFunc.backward": [[23, 28], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "grad_weight", "=", "grad_output", "\n", "", "return", "grad_weight", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.new_conv.__init__": [[41, 56], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Conv2d.__init__", "quantize_2.Quantize"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ",", "num_bits_grad", "=", "8", ",", "input_signed", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "new_conv", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "input_signed", "=", "input_signed", "\n", "\n", "self", ".", "quant_input", "=", "Quantize", "(", "num_bits", "=", "self", ".", "num_bits", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "dequantize", "=", "True", ",", "input_signed", "=", "self", ".", "input_signed", ",", "stochastic", "=", "False", ",", "momentum", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.new_conv.forward": [[57, 66], ["conv.new_conv.quant_input", "conv.quant_weight", "torch.conv2d", "torch.conv2d", "torch.conv2d", "conv.conv2d_biprec"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.quant_weight", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.conv2d_biprec"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "q_input", "=", "self", ".", "quant_input", "(", "input", ")", "\n", "q_weight", "=", "quant_weight", "(", "self", ".", "weight", ",", "num_bits_weight", "=", "self", ".", "num_bits_weight", ")", "\n", "q_bias", "=", "None", "\n", "if", "self", ".", "num_bits_grad", "is", "None", ":", "\n", "            ", "q_output", "=", "F", ".", "conv2d", "(", "q_input", ",", "q_weight", ",", "bias", "=", "q_bias", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ",", "groups", "=", "self", ".", "groups", ")", "\n", "", "else", ":", "\n", "            ", "q_output", "=", "conv2d_biprec", "(", "q_input", ",", "q_weight", ",", "bias", "=", "q_bias", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "num_bits_grad", "=", "self", ".", "num_bits_grad", ")", "\n", "", "return", "q_output", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.quant_weight": [[29, 31], ["WeightQuantFunc.apply"], "function", ["None"], ["", "", "def", "quant_weight", "(", "weight", ",", "num_bits_weight", "=", "8", ")", ":", "\n", "    ", "return", "WeightQuantFunc", ".", "apply", "(", "weight", ",", "num_bits_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.conv.conv2d_biprec": [[32, 39], ["torch.conv2d", "torch.conv2d", "quantize_2.quantize_grad", "input.detach", "weight.detach", "F.conv2d.detach", "bias.detach"], "function", ["None"], ["", "def", "conv2d_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "conv2d", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_lp.vgg_lp.__init__": [[19, 38], ["torch.Module.__init__", "quantize.WAGEQuantizer", "vgg_lp.vgg_lp.make_layers", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "quantize.WAGEQuantizer", "vgg_lp.vgg_lp._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "bits_A", ",", "bits_E", ",", "bits_W", ",", "dataset", "=", "'cifar10'", ",", "depth", "=", "19", ",", "init_weights", "=", "True", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "vgg_lp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "cfg", "is", "None", ":", "\n", "            ", "cfg", "=", "defaultcfg", "[", "depth", "]", "\n", "", "self", ".", "bits_W", "=", "bits_W", "\n", "self", ".", "quant", "=", "WAGEQuantizer", "(", "bits_A", ",", "bits_E", ")", "\n", "\n", "self", ".", "feature", "=", "self", ".", "make_layers", "(", "cfg", ",", "True", ")", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "            ", "num_classes", "=", "100", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "num_classes", ")", ",", "\n", "WAGEQuantizer", "(", "-", "1", ",", "bits_E", ",", "\"bf-loss\"", ")", "# only quantize backward pass", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_lp.vgg_lp.make_layers": [[39, 54], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "make_layers", "(", "self", ",", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "layers", "+=", "[", "self", ".", "quant", "]", "\n", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_lp.vgg_lp.forward": [[55, 61], ["vgg_lp.vgg_lp.feature", "x.view.view.view", "vgg_lp.vgg_lp.classifier", "torch.AvgPool2d", "torch.AvgPool2d", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature", "(", "x", ")", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_lp.vgg_lp._initialize_weights": [[62, 79], ["vgg_lp.vgg_lp.modules", "vgg_lp.vgg_lp.named_parameters", "isinstance", "m.weight.data.normal_", "quantize.Q", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "weight", ".", "data", "=", "Q", "(", "m", ".", "weight", ".", "data", ",", "self", ".", "bits_W", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "weight_scale", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_lp.vgg_lp._wage_initialize_weights": [[80, 87], ["vgg_lp.vgg_lp.named_parameters", "wage_initializer.wage_init_", "quantize.Q", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.wage_initializer.wage_init_", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q"], ["", "", "def", "_wage_initialize_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight_scale", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'weight'", "in", "name", "and", "len", "(", "param", ".", "data", ".", "shape", ")", ">", "3", ":", "\n", "                ", "wage_init_", "(", "param", ",", "self", ".", "bits_W", ",", "name", ",", "self", ".", "weight_scale", ",", "factor", "=", "1.0", ")", "\n", "param", ".", "data", "=", "Q", "(", "param", ".", "data", ",", "self", ".", "bits_W", ")", "\n", "", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.Bottleneck.__init__": [[19, 33], ["torch.Module.__init__", "quantize.WAGEQuantizer", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "bits_A", ",", "bits_E", ",", "inplanes", ",", "planes", ",", "cfg", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quant", "=", "WAGEQuantizer", "(", "bits_A", ",", "bits_E", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "1", "]", ",", "cfg", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "2", "]", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.Bottleneck.forward": [[34, 59], ["preresnet_lp.Bottleneck.bn1", "preresnet_lp.Bottleneck.select", "preresnet_lp.Bottleneck.relu", "preresnet_lp.Bottleneck.quant", "preresnet_lp.Bottleneck.conv1", "preresnet_lp.Bottleneck.bn2", "preresnet_lp.Bottleneck.relu", "preresnet_lp.Bottleneck.quant", "preresnet_lp.Bottleneck.conv2", "preresnet_lp.Bottleneck.bn3", "preresnet_lp.Bottleneck.relu", "preresnet_lp.Bottleneck.quant", "preresnet_lp.Bottleneck.conv3", "preresnet_lp.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "select", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "quant", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "quant", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "quant", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.resnet_lp.__init__": [[61, 102], ["torch.Module.__init__", "quantize.WAGEQuantizer", "torch.Conv2d", "preresnet_lp.resnet_lp._make_layer", "preresnet_lp.resnet_lp._make_layer", "preresnet_lp.resnet_lp._make_layer", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.ReLU", "torch.AvgPool2d", "preresnet_lp.resnet_lp._initialize_weights", "torch.Sequential", "torch.Linear", "quantize.WAGEQuantizer", "torch.Sequential", "torch.Linear", "quantize.WAGEQuantizer"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "bits_A", ",", "bits_E", ",", "bits_W", ",", "depth", "=", "164", ",", "dataset", "=", "'cifar10'", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "resnet_lp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bits_A", "=", "bits_A", "\n", "self", ".", "bits_E", "=", "bits_E", "\n", "self", ".", "bits_W", "=", "bits_W", "\n", "self", ".", "quant", "=", "WAGEQuantizer", "(", "bits_A", ",", "bits_E", ")", "\n", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2'", "\n", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "block", "=", "Bottleneck", "\n", "\n", "if", "cfg", "is", "None", ":", "\n", "# Construct config variable.", "\n", "            ", "cfg", "=", "[", "[", "16", ",", "16", ",", "16", "]", ",", "[", "64", ",", "16", ",", "16", "]", "*", "(", "n", "-", "1", ")", ",", "[", "64", ",", "32", ",", "32", "]", ",", "[", "128", ",", "32", ",", "32", "]", "*", "(", "n", "-", "1", ")", ",", "[", "128", ",", "64", ",", "64", "]", ",", "[", "256", ",", "64", ",", "64", "]", "*", "(", "n", "-", "1", ")", ",", "[", "256", "]", "]", "\n", "cfg", "=", "[", "item", "for", "sub_list", "in", "cfg", "for", "item", "in", "sub_list", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ",", "cfg", "=", "cfg", "[", "0", ":", "3", "*", "n", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "cfg", "=", "cfg", "[", "3", "*", "n", ":", "6", "*", "n", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "cfg", "=", "cfg", "[", "6", "*", "n", ":", "9", "*", "n", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "10", ")", ",", "\n", "WAGEQuantizer", "(", "-", "1", ",", "self", ".", "bits_E", ",", "\"bf-loss\"", ")", "# only quantize backward pass", "\n", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "100", ")", ",", "\n", "WAGEQuantizer", "(", "-", "1", ",", "self", ".", "bits_E", ",", "\"bf-loss\"", ")", "\n", ")", "\n", "\n", "", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.resnet_lp._initialize_weights": [[103, 115], ["preresnet_lp.resnet_lp.modules", "preresnet_lp.resnet_lp.named_parameters", "isinstance", "m.weight.data.normal_", "quantize.Q", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "weight", ".", "data", "=", "Q", "(", "m", ".", "weight", ".", "data", ",", "self", ".", "bits_W", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "weight_scale", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.resnet_lp._wage_initialize_weights": [[116, 130], ["preresnet_lp.resnet_lp.named_parameters", "wage_initializer.wage_init_", "quantize.Q", "param.data.zero_", "param.data.fill_", "param.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.wage_initializer.wage_init_", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q"], ["", "", "def", "_wage_initialize_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight_scale", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'weight'", "in", "name", "and", "not", "'bn'", "in", "name", "and", "not", "'downsample'", "in", "name", ":", "\n", "                ", "wage_init_", "(", "param", ",", "self", ".", "bits_W", ",", "name", ",", "self", ".", "weight_scale", ",", "factor", "=", "1.0", ")", "\n", "param", ".", "data", "=", "Q", "(", "param", ".", "data", ",", "self", ".", "bits_W", ")", "\n", "", "if", "'bn'", "in", "name", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "param", ".", "data", ".", "fill_", "(", "0.5", ")", ";", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "if", "'bias'", "in", "name", ":", "param", ".", "data", ".", "zero_", "(", ")", ";", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "", "if", "'downsample'", "in", "name", ":", "\n", "                ", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "", "if", "'bias'", "in", "name", ":", "\n", "                ", "param", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "weight_scale", "[", "name", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.resnet_lp._make_layer": [[131, 146], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "cfg", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "bits_A", ",", "self", ".", "bits_E", ",", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "0", ":", "3", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "bits_A", ",", "self", ".", "bits_E", ",", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet_lp.resnet_lp.forward": [[147, 164], ["preresnet_lp.resnet_lp.quant", "preresnet_lp.resnet_lp.conv1", "preresnet_lp.resnet_lp.layer1", "preresnet_lp.resnet_lp.layer2", "preresnet_lp.resnet_lp.layer3", "preresnet_lp.resnet_lp.bn", "preresnet_lp.resnet_lp.select", "preresnet_lp.resnet_lp.relu", "preresnet_lp.resnet_lp.quant", "preresnet_lp.resnet_lp.avgpool", "preresnet_lp.resnet_lp.view", "preresnet_lp.resnet_lp.fc", "preresnet_lp.resnet_lp.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "quant", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "select", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "quant", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.BasicBlock.__init__": [[18, 27], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Transition", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.BasicBlock.forward": [[28, 39], ["densenet.BasicBlock.bn1", "densenet.BasicBlock.select", "densenet.BasicBlock.relu", "densenet.BasicBlock.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "DenseNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.Transition.__init__": [[41, 48], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.Transition.forward": [[49, 56], ["densenet.Transition.bn1", "densenet.Transition.select", "densenet.Transition.relu", "densenet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet.__init__": [[59, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.densenet._make_denseblock", "densenet.densenet._make_transition", "densenet.densenet._make_denseblock", "densenet.densenet._make_transition", "densenet.densenet._make_denseblock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "densenet.densenet.modules", "range", "len", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "cfg.append", "torch.Linear", "torch.Linear", "torch.Linear", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "range"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_denseblock", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_transition", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_denseblock", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_transition", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_denseblock"], ["num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n", "", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n", "", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n", "", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n", "", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n", "", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_denseblock": [[109, 118], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "layers.append", "block"], "methods", ["None"], ["# test_densenet()", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet._make_transition": [[119, 125], ["int", "densenet.Transition", "math.floor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.densenet.densenet.forward": [[126, 141], ["densenet.densenet.conv1", "densenet.densenet.trans1", "densenet.densenet.trans2", "densenet.densenet.dense3", "densenet.densenet.bn", "densenet.densenet.select", "densenet.densenet.relu", "densenet.densenet.avgpool", "densenet.densenet.view", "densenet.densenet.fc", "densenet.densenet.dense1", "densenet.densenet.dense2", "densenet.densenet.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.Bottleneck.__init__": [[21, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cfg", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "1", "]", ",", "cfg", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "2", "]", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.Bottleneck.forward": [[34, 55], ["resnet50.Bottleneck.conv1", "resnet50.Bottleneck.bn1", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv2", "resnet50.Bottleneck.bn2", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv3", "resnet50.Bottleneck.bn3", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.ResNet.__init__": [[59, 84], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet50.ResNet.modules", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "cfg", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "cfg", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "1", ":", "10", "]", ",", "64", ",", "layers", "[", "0", "]", ",", "layer_index", "=", "0", ",", "full_cfg", "=", "cfg", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "10", ":", "22", "]", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "layer_index", "=", "1", ",", "full_cfg", "=", "cfg", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "22", ":", "40", "]", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "layer_index", "=", "2", ",", "full_cfg", "=", "cfg", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "40", ":", "49", "]", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "layer_index", "=", "3", ",", "full_cfg", "=", "cfg", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "# m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.ResNet._make_layer": [[85, 119], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "print", "print", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "cfg", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "layer_index", "=", "0", ",", "full_cfg", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "layer_index", "==", "0", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "full_cfg", "[", "0", "]", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "#nn.Conv2d(self.inplanes, planes * block.expansion,", "\n", "#          kernel_size=1, stride=stride, bias=True),                    ", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "layer_index", "==", "1", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "full_cfg", "[", "4", "]", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "print", "(", "\"####### downsample layer: {}\"", ".", "format", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ")", ")", "\n", "print", "(", "\"@@@@@@@ cfg: {}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", ":", "3", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.ResNet.forward": [[120, 136], ["resnet50.ResNet.conv1", "resnet50.ResNet.bn1", "resnet50.ResNet.relu", "resnet50.ResNet.maxpool", "resnet50.ResNet.layer1", "resnet50.ResNet.layer2", "resnet50.ResNet.layer3", "resnet50.ResNet.layer4", "resnet50.ResNet.avgpool", "resnet50.ResNet.view", "resnet50.ResNet.fc", "resnet50.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.conv3x3": [[13, 17], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet50.resnet50_official": [[143, 159], ["resnet50.ResNet", "ResNet.load_state_dict", "len", "torch.load_url"], "function", ["None"], ["def", "resnet50_official", "(", "depth", "=", "50", ",", "dataset", "=", "'ImageNet'", ",", "cfg", "=", "None", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "cfg", "==", "None", ":", "\n", "        ", "cfg_official", "=", "[", "[", "64", "]", ",", "[", "64", ",", "64", ",", "64", "]", ",", "[", "256", ",", "64", ",", "64", "]", "*", "2", ",", "[", "256", ",", "128", ",", "128", "]", ",", "[", "512", ",", "128", ",", "128", "]", "*", "3", ",", "\n", "[", "512", ",", "256", ",", "256", "]", ",", "[", "1024", ",", "256", ",", "256", "]", "*", "5", ",", "[", "1024", ",", "512", ",", "512", "]", ",", "[", "2048", ",", "512", ",", "512", "]", "*", "2", "]", "\n", "cfg_official", "=", "[", "item", "for", "sublist", "in", "cfg_official", "for", "item", "in", "sublist", "]", "\n", "assert", "len", "(", "cfg_official", ")", "==", "49", ",", "\"Length of cfg_official is not right\"", "\n", "cfg", "=", "cfg_official", "\n", "", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "cfg", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet.Bottleneck.__init__": [[18, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cfg", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "1", "]", ",", "cfg", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "2", "]", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet.Bottleneck.forward": [[32, 54], ["preresnet.Bottleneck.bn1", "preresnet.Bottleneck.select", "preresnet.Bottleneck.relu", "preresnet.Bottleneck.conv1", "preresnet.Bottleneck.bn2", "preresnet.Bottleneck.relu", "preresnet.Bottleneck.conv2", "preresnet.Bottleneck.bn3", "preresnet.Bottleneck.relu", "preresnet.Bottleneck.conv3", "preresnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "select", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet.resnet.__init__": [[56, 93], ["torch.Module.__init__", "torch.Conv2d", "preresnet.resnet._make_layer", "preresnet.resnet._make_layer", "preresnet.resnet._make_layer", "torch.BatchNorm2d", "channel_selection.channel_selection.channel_selection", "torch.ReLU", "torch.AdaptiveAvgPool2d", "preresnet.resnet.modules", "torch.Linear", "isinstance", "torch.Linear", "m.weight.data.normal_", "isinstance", "torch.Linear", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "164", ",", "dataset", "=", "'cifar10'", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2'", "\n", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "block", "=", "Bottleneck", "\n", "\n", "if", "cfg", "is", "None", ":", "\n", "# Construct config variable.", "\n", "            ", "cfg", "=", "[", "[", "16", ",", "16", ",", "16", "]", ",", "[", "64", ",", "16", ",", "16", "]", "*", "(", "n", "-", "1", ")", ",", "[", "64", ",", "32", ",", "32", "]", ",", "[", "128", ",", "32", ",", "32", "]", "*", "(", "n", "-", "1", ")", ",", "[", "128", ",", "64", ",", "64", "]", ",", "[", "256", ",", "64", ",", "64", "]", "*", "(", "n", "-", "1", ")", ",", "[", "256", "]", "]", "\n", "cfg", "=", "[", "item", "for", "sub_list", "in", "cfg", "for", "item", "in", "sub_list", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ",", "cfg", "=", "cfg", "[", "0", ":", "3", "*", "n", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "cfg", "=", "cfg", "[", "3", "*", "n", ":", "6", "*", "n", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "cfg", "=", "cfg", "[", "6", "*", "n", ":", "9", "*", "n", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "10", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "100", ")", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "1000", ")", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet.resnet._make_layer": [[94, 109], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "cfg", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "0", ":", "3", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.preresnet.resnet.forward": [[110, 124], ["preresnet.resnet.conv1", "preresnet.resnet.layer1", "preresnet.resnet.layer2", "preresnet.resnet.layer3", "preresnet.resnet.bn", "preresnet.resnet.select", "preresnet.resnet.relu", "preresnet.resnet.avgpool", "preresnet.resnet.view", "preresnet.resnet.fc", "preresnet.resnet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "select", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.forward": [[60, 70], ["quantize.WAGERounding.save_for_backward", "quantize.Q"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "x", ",", "bits_A", ",", "bits_E", ",", "optional", ")", ":", "\n", "        ", "self", ".", "optional", "=", "optional", "\n", "self", ".", "bits_E", "=", "bits_E", "\n", "self", ".", "save_for_backward", "(", "x", ")", "\n", "\n", "if", "bits_A", "==", "-", "1", ":", "ret", "=", "x", "\n", "else", ":", "ret", "=", "Q", "(", "x", ",", "bits_A", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward": [[71, 90], ["quantize.QE", "print", "print", "print", "print", "print", "print", "grad_output.max", "grad_output.min"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.QE"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "self", ".", "bits_E", "==", "-", "1", ":", "return", "grad_output", ",", "None", ",", "None", ",", "None", "\n", "\n", "if", "self", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "grad_input", "=", "QE", "(", "grad_output", ",", "self", ".", "bits_E", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "print", "(", "\"=\"", "*", "80", ")", "\n", "print", "(", "\"Error backward:%s\"", "%", "self", ".", "optional", ")", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "grad_output", ".", "max", "(", ")", ")", "\n", "print", "(", "grad_output", ".", "min", "(", ")", ")", "\n", "print", "(", "\"=\"", "*", "80", ")", "\n", "raise", "e", "\n", "", "", "else", ":", "\n", "            ", "grad_input", "=", "grad_output", "\n", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGEQuantizer.__init__": [[94, 100], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bits_A", ",", "bits_E", ",", "name", "=", "\"\"", ",", "writer", "=", "None", ")", ":", "\n", "        ", "super", "(", "WAGEQuantizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bits_A", "=", "bits_A", "\n", "self", ".", "bits_E", "=", "bits_E", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGEQuantizer.forward": [[101, 111], ["quantize_wage", "quantize.C", "quantize.WAGEQuantizer.writer.add_histogram", "quantize.WAGEQuantizer.writer.add_histogram", "C.clone().cpu().data.numpy", "quantize_wage.clone().cpu().data.numpy", "C.clone().cpu", "quantize_wage.clone().cpu", "C.clone", "quantize_wage.clone"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.C"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bits_A", "!=", "-", "1", ":", "\n", "            ", "x", "=", "C", "(", "x", ",", "self", ".", "bits_A", ")", "#  keeps the gradients", "\n", "", "y", "=", "quantize_wage", "(", "x", ",", "self", ".", "bits_A", ",", "self", ".", "bits_E", ",", "self", ".", "name", ")", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "\n", "\"activation-before/%s\"", "%", "self", ".", "name", ",", "x", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_histogram", "(", "\n", "\"activation-after/%s\"", "%", "self", ".", "name", ",", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.shift": [[7, 10], ["torch.round", "torch.round", "torch.round", "torch.log2", "torch.log2", "torch.log2"], "function", ["None"], ["def", "shift", "(", "x", ")", ":", "\n", "#TODO: edge case, when x contains 0", "\n", "    ", "return", "2.", "**", "torch", ".", "round", "(", "torch", ".", "log2", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.S": [[11, 13], ["None"], "function", ["None"], ["", "def", "S", "(", "bits", ")", ":", "\n", "    ", "return", "2.", "**", "(", "bits", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.SR": [[14, 17], ["torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.floor", "torch.floor", "torch.floor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "SR", "(", "x", ")", ":", "\n", "    ", "r", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "*", "x", ".", "size", "(", ")", ")", ".", "uniform_", "(", ")", "\n", "return", "torch", ".", "floor", "(", "x", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.C": [[18, 26], ["torch.clamp", "torch.clamp", "torch.clamp", "quantize.S"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.S"], ["", "def", "C", "(", "x", ",", "bits", ")", ":", "\n", "    ", "if", "bits", ">", "15", "or", "bits", "==", "1", ":", "\n", "        ", "delta", "=", "0", "\n", "", "else", ":", "\n", "        ", "delta", "=", "1.", "/", "S", "(", "bits", ")", "\n", "", "upper", "=", "1", "-", "delta", "\n", "lower", "=", "-", "1", "+", "delta", "\n", "return", "torch", ".", "clamp", "(", "x", ",", "lower", ",", "upper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q": [[27, 34], ["torch.sign", "torch.sign", "torch.sign", "torch.round", "torch.round", "torch.round", "quantize.S", "quantize.S"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.S", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.S"], ["", "def", "Q", "(", "x", ",", "bits", ")", ":", "\n", "    ", "assert", "bits", "!=", "-", "1", "\n", "if", "bits", "==", "1", ":", "\n", "        ", "return", "torch", ".", "sign", "(", "x", ")", "\n", "", "if", "bits", ">", "15", ":", "\n", "        ", "return", "x", "\n", "", "return", "torch", ".", "round", "(", "x", "*", "S", "(", "bits", ")", ")", "/", "S", "(", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.QW": [[35, 42], ["quantize.Q", "quantize.C"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.C"], ["", "def", "QW", "(", "x", ",", "bits", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "if", "bits", "==", "-", "1", ":", "\n", "        ", "return", "x", "\n", "", "y", "=", "Q", "(", "C", "(", "x", ",", "bits", ")", ",", "bits", ")", "\n", "# per layer scaling", "\n", "if", "scale", ">", "1.8", ":", "y", "/=", "scale", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.QE": [[43, 50], ["x.abs().max", "quantize.shift", "quantize.Q", "quantize.C", "x.abs"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.shift", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.Q", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.C"], ["", "def", "QE", "(", "x", ",", "bits", ")", ":", "\n", "    ", "if", "bits", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "max_entry", "=", "x", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "assert", "max_entry", "!=", "0", ",", "\"QE blow\"", "\n", "x", "/=", "shift", "(", "max_entry", ")", "\n", "return", "Q", "(", "C", "(", "x", ",", "bits", ")", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.QG": [[51, 58], ["x.abs().max", "quantize.shift", "quantize.SR", "quantize.S", "x.abs"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.shift", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.SR", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.S"], ["", "def", "QG", "(", "x", ",", "bits_G", ",", "bits_R", ",", "lr", ")", ":", "\n", "    ", "max_entry", "=", "x", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "assert", "max_entry", "!=", "0", ",", "\"QG blow\"", "\n", "x", "/=", "shift", "(", "max_entry", ")", "\n", "norm", "=", "lr", "*", "x", "\n", "norm", "=", "SR", "(", "norm", ")", "\n", "return", "norm", "/", "S", "(", "bits_G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_11.VGG.__init__": [[17, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "vgg_11.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "cfg", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "cfg", "[", "0", "]", "*", "7", "*", "7", ",", "cfg", "[", "1", "]", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "cfg", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "cfg", "[", "1", "]", ",", "cfg", "[", "2", "]", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "cfg", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "cfg", "[", "2", "]", ",", "num_classes", ")", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_11.VGG.forward": [[32, 37], ["vgg_11.VGG.features", "vgg_11.VGG.view", "vgg_11.VGG.classifier", "vgg_11.VGG.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_11.VGG._initialize_weights": [[38, 53], ["vgg_11.VGG.modules", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architectures.lowrank_vgg.kaiming_normal"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "#, nonlinearity='relu')", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_11.make_layers": [[54, 68], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.vgg_11.slimmingvgg": [[73, 88], ["vgg_11.VGG", "vgg_11.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["def", "slimmingvgg", "(", "pretrained", "=", "False", ",", "depth", "=", "None", ",", "dataset", "=", "None", ",", "config", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "if", "config", "==", "None", ":", "\n", "        ", "config", "=", "cfg", "[", "'A'", "]", "\n", "", "config2", "=", "[", "config", "[", "-", "4", "]", ",", "config", "[", "-", "2", "]", ",", "config", "[", "-", "1", "]", "]", "\n", "model", "=", "VGG", "(", "make_layers", "(", "config", "[", ":", "-", "2", "]", ",", "batch_norm", "=", "True", ")", ",", "config2", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg11_bn'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPBasicBlock.__init__": [[164, 181], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3"], ["nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1_v", "(", "self", ".", "conv1_v", "(", "self", ".", "bn1_u", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2_v", "(", "self", ".", "conv2_v", "(", "self", ".", "bn2_u", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlock3", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPBasicBlock.forward": [[182, 200], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "resnet.AMPBasicBlock.conv1", "resnet.AMPBasicBlock.bn1", "resnet.AMPBasicBlock.relu", "resnet.AMPBasicBlock.conv2", "resnet.AMPBasicBlock.bn2", "resnet.AMPBasicBlock.relu", "resnet.AMPBasicBlock.downsample"], "methods", ["None"], ["self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPBottleneck.__init__": [[346, 363], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", "+", "self", ".", "conv1_res", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "+", "self", ".", "conv2_res", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlockLowRankResidual", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPBottleneck.forward": [[364, 386], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "resnet.AMPBottleneck.conv1", "resnet.AMPBottleneck.bn1", "resnet.AMPBottleneck.relu", "resnet.AMPBottleneck.conv2", "resnet.AMPBottleneck.bn2", "resnet.AMPBottleneck.relu", "resnet.AMPBottleneck.conv3", "resnet.AMPBottleneck.bn3", "resnet.AMPBottleneck.relu", "resnet.AMPBottleneck.downsample"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockLowRankResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "# first low rank conv layer", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "# residual part", "\n", "self", ".", "conv1_res_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_res_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv2_res_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_res_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneckConv1x1ExtraBN.__init__": [[574, 603], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["\n", "#self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.LowRankBottleneckConv1x1ExtraBN.forward": [[606, 636], ["resnet.LowRankBottleneckConv1x1ExtraBN.conv1_u", "resnet.LowRankBottleneckConv1x1ExtraBN.bn1_u", "resnet.LowRankBottleneckConv1x1ExtraBN.conv1_v", "resnet.LowRankBottleneckConv1x1ExtraBN.bn1_v", "resnet.LowRankBottleneckConv1x1ExtraBN.relu", "resnet.LowRankBottleneckConv1x1ExtraBN.conv2_u", "resnet.LowRankBottleneckConv1x1ExtraBN.bn2_u", "resnet.LowRankBottleneckConv1x1ExtraBN.conv2_v", "resnet.LowRankBottleneckConv1x1ExtraBN.bn2_v", "resnet.LowRankBottleneckConv1x1ExtraBN.relu", "resnet.LowRankBottleneckConv1x1ExtraBN.conv3_u", "resnet.LowRankBottleneckConv1x1ExtraBN.bn3_u", "resnet.LowRankBottleneckConv1x1ExtraBN.conv3_v", "resnet.LowRankBottleneckConv1x1ExtraBN.bn3_v", "resnet.LowRankBottleneckConv1x1ExtraBN.relu", "resnet.LowRankBottleneckConv1x1ExtraBN.downsample"], "methods", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "def", "BaselineResNet18", "(", ")", ":", "\n", "    ", "return", "BaselineResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "\n", "", "def", "LowrankResNet18", "(", ")", ":", "\n", "    ", "return", "HybridResNet", "(", "BasicBlock", ",", "LowrankBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "# def LowRankResNet18():", "\n", "#     return LowRankResNet(block=[LowRankBasicBlockConcat,", "\n", "#                           LowRankBasicBlockConcat,", "\n", "#                           LowRankBasicBlockConcat,", "\n", "#                           LowRankBasicBlockConcat], num_blocks=[2,2,2,2])", "\n", "\n", "", "def", "LowRankResResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockResidual", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "def", "LowRankResLowRankResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockLowRankResidual", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "def", "LowRankResNet18LR", "(", ")", ":", "\n", "    ", "return", "ResNetLR", "(", "BasicBlockLR", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n", "", "def", "LowRankResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "LowRankBasicBlockConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPLowRankBottleneckConv1x1.__init__": [[642, 668], ["torch.Module.__init__", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["\n", "", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n", "", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n", "\n", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "model", "=", "LowRankResResNet18", "(", ")", "\n", "\n", "#print(model)", "\n", "#for name, p in model.named_parameters():", "\n", "#print(name, p.requires_grad)", "\n", "#    if \"_res\" in name:", "\n", "#        p.requires_grad = False", "\n", "\n", "#for name, p in model.named_parameters():", "\n", "#    print(name, p.requires_grad)", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPLowRankBottleneckConv1x1.forward": [[670, 720], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "resnet.AMPLowRankBottleneckConv1x1.conv1_u", "resnet.AMPLowRankBottleneckConv1x1.conv1_v", "resnet.AMPLowRankBottleneckConv1x1.bn1", "resnet.AMPLowRankBottleneckConv1x1.relu", "resnet.AMPLowRankBottleneckConv1x1.conv2_u", "resnet.AMPLowRankBottleneckConv1x1.conv2_v", "resnet.AMPLowRankBottleneckConv1x1.bn2", "resnet.AMPLowRankBottleneckConv1x1.relu", "resnet.AMPLowRankBottleneckConv1x1.conv3_u", "resnet.AMPLowRankBottleneckConv1x1.conv3_v", "resnet.AMPLowRankBottleneckConv1x1.bn3", "resnet.AMPLowRankBottleneckConv1x1.relu", "resnet.AMPLowRankBottleneckConv1x1.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPResNet.__init__": [[887, 937], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.AMPResNet._make_layer", "resnet.AMPResNet._make_layer", "resnet.AMPResNet._make_layer", "resnet.AMPResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.AMPResNet.modules", "len", "ValueError", "isinstance", "resnet.AMPResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPResNet._make_layer": [[938, 961], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPResNet.forward": [[962, 983], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "resnet.AMPResNet.conv1", "resnet.AMPResNet.bn1", "resnet.AMPResNet.relu", "resnet.AMPResNet.maxpool", "resnet.AMPResNet.layer1", "resnet.AMPResNet.layer2", "resnet.AMPResNet.layer3", "resnet.AMPResNet.layer4", "resnet.AMPResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.AMPResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPHybridResNet.__init__": [[1376, 1455], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.AMPHybridResNet._make_layer", "resnet.AMPHybridResNet._make_layer", "resnet.AMPHybridResNet._make_layer", "resnet.AMPHybridResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.AMPHybridResNet.modules", "len", "ValueError", "isinstance", "resnet.AMPHybridResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPHybridResNet._make_layer": [[1456, 1496], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "resnet.conv1x1", "resnet.conv1x1", "norm_layer", "resnet.conv1x1", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPHybridResNet._make_layer_dual_blocks": [[1497, 1543], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fr_block", "resnet.conv1x1", "norm_layer", "layers.append", "layers.append", "fr_block", "lr_block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.AMPHybridResNet.forward": [[1544, 1558], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "resnet.AMPHybridResNet.conv1", "resnet.AMPHybridResNet.bn1", "resnet.AMPHybridResNet.relu", "resnet.AMPHybridResNet.maxpool", "resnet.AMPHybridResNet.layer1", "resnet.AMPHybridResNet.layer2", "resnet.AMPHybridResNet.layer3", "resnet.AMPHybridResNet.layer4", "resnet.AMPHybridResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.AMPHybridResNet.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._amp_hybrid_resnet": [[1813, 1816], ["resnet.AMPHybridResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._amp_resnet": [[1821, 1824], ["resnet.AMPResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.amp_resnet50": [[1892, 1901], ["resnet._amp_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._amp_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.hybrid_resnet50_extra_bns": [[1945, 1954], ["resnet._hybrid_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._hybrid_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.amp_hybrid_resnet50": [[1956, 1965], ["resnet._amp_hybrid_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet._amp_hybrid_resnet"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.resnet.count_parameters2": [[2118, 2120], ["sum", "p.numel", "model.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._segm_resnet": [[19, 44], ["_utils.IntermediateLayerGetter", "base_model", "fcn.FCNHead"], "function", ["None"], ["def", "_segm_resnet", "(", "name", ",", "backbone_name", ",", "num_classes", ",", "aux", ",", "pretrained_backbone", "=", "True", ")", ":", "\n", "    ", "backbone", "=", "resnet", ".", "__dict__", "[", "backbone_name", "]", "(", "\n", "pretrained", "=", "pretrained_backbone", ",", "\n", "replace_stride_with_dilation", "=", "[", "False", ",", "True", ",", "True", "]", ")", "\n", "\n", "return_layers", "=", "{", "'layer4'", ":", "'out'", "}", "\n", "if", "aux", ":", "\n", "        ", "return_layers", "[", "'layer3'", "]", "=", "'aux'", "\n", "", "backbone", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "\n", "\n", "aux_classifier", "=", "None", "\n", "if", "aux", ":", "\n", "        ", "inplanes", "=", "1024", "\n", "aux_classifier", "=", "FCNHead", "(", "inplanes", ",", "num_classes", ")", "\n", "\n", "", "model_map", "=", "{", "\n", "'deeplabv3'", ":", "(", "DeepLabHead", ",", "DeepLabV3", ")", ",", "\n", "'fcn'", ":", "(", "FCNHead", ",", "FCN", ")", ",", "\n", "}", "\n", "inplanes", "=", "2048", "\n", "classifier", "=", "model_map", "[", "name", "]", "[", "0", "]", "(", "inplanes", ",", "num_classes", ")", "\n", "base_model", "=", "model_map", "[", "name", "]", "[", "1", "]", "\n", "\n", "model", "=", "base_model", "(", "backbone", ",", "classifier", ",", "aux_classifier", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._load_model": [[46, 59], ["segmentation._segm_resnet", "NotImplementedError", "utils.load_state_dict_from_url", "_segm_resnet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._segm_resnet"], ["", "def", "_load_model", "(", "arch_type", ",", "backbone", ",", "pretrained", ",", "progress", ",", "num_classes", ",", "aux_loss", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "aux_loss", "=", "True", "\n", "", "model", "=", "_segm_resnet", "(", "arch_type", ",", "backbone", ",", "num_classes", ",", "aux_loss", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "arch", "=", "arch_type", "+", "'_'", "+", "backbone", "+", "'_coco'", "\n", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "if", "model_url", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'pretrained {} is not supported as of now'", ".", "format", "(", "arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation.fcn_resnet50": [[61, 71], ["segmentation._load_model"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._load_model"], ["", "def", "fcn_resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "21", ",", "aux_loss", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fully-Convolutional Network model with a ResNet-50 backbone.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017 which\n            contains the same classes as Pascal VOC\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_load_model", "(", "'fcn'", ",", "'resnet50'", ",", "pretrained", ",", "progress", ",", "num_classes", ",", "aux_loss", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation.fcn_resnet101": [[73, 83], ["segmentation._load_model"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._load_model"], ["", "def", "fcn_resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "21", ",", "aux_loss", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fully-Convolutional Network model with a ResNet-101 backbone.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017 which\n            contains the same classes as Pascal VOC\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_load_model", "(", "'fcn'", ",", "'resnet101'", ",", "pretrained", ",", "progress", ",", "num_classes", ",", "aux_loss", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation.deeplabv3_resnet50": [[85, 95], ["segmentation._load_model"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._load_model"], ["", "def", "deeplabv3_resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "21", ",", "aux_loss", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a DeepLabV3 model with a ResNet-50 backbone.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017 which\n            contains the same classes as Pascal VOC\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_load_model", "(", "'deeplabv3'", ",", "'resnet50'", ",", "pretrained", ",", "progress", ",", "num_classes", ",", "aux_loss", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation.deeplabv3_resnet101": [[97, 107], ["segmentation._load_model"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.segmentation._load_model"], ["", "def", "deeplabv3_resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "21", ",", "aux_loss", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a DeepLabV3 model with a ResNet-101 backbone.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017 which\n            contains the same classes as Pascal VOC\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_load_model", "(", "'deeplabv3'", ",", "'resnet101'", ",", "pretrained", ",", "progress", ",", "num_classes", ",", "aux_loss", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation._utils._SimpleSegmentationModel.__init__": [[11, 16], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation._utils._SimpleSegmentationModel.forward": [[17, 35], ["_utils._SimpleSegmentationModel.backbone", "collections.OrderedDict", "_utils._SimpleSegmentationModel.classifier", "torch.nn.functional.interpolate", "_utils._SimpleSegmentationModel.aux_classifier", "torch.nn.functional.interpolate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.fcn.FCNHead.__init__": [[26, 37], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ")", ":", "\n", "        ", "inter_channels", "=", "in_channels", "//", "4", "\n", "layers", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "channels", ",", "1", ")", "\n", "]", "\n", "\n", "super", "(", "FCNHead", ",", "self", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.deeplabv3.DeepLabHead.__init__": [[30, 37], ["torch.nn.Sequential.__init__", "deeplabv3.ASPP", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DeepLabHead", ",", "self", ")", ".", "__init__", "(", "\n", "ASPP", "(", "in_channels", ",", "[", "12", ",", "24", ",", "36", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.deeplabv3.ASPPConv.__init__": [[41, 48], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.deeplabv3.ASPPPooling.__init__": [[51, 57], ["torch.nn.Sequential.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ASPPPooling", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.deeplabv3.ASPPPooling.forward": [[58, 62], ["super().forward", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "super", "(", "ASPPPooling", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.deeplabv3.ASPP.__init__": [[65, 87], ["torch.nn.Module.__init__", "modules.append", "tuple", "modules.append", "modules.append", "modules.append", "modules.append", "torch.nn.ModuleList", "torch.nn.Sequential", "torch.nn.Sequential", "deeplabv3.ASPPConv", "deeplabv3.ASPPConv", "deeplabv3.ASPPConv", "deeplabv3.ASPPPooling", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "atrous_rates", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "256", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "rate1", ",", "rate2", ",", "rate3", "=", "tuple", "(", "atrous_rates", ")", "\n", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate1", ")", ")", "\n", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate2", ")", ")", "\n", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate3", ")", ")", "\n", "modules", ".", "append", "(", "ASPPPooling", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.segmentation.deeplabv3.ASPP.forward": [[88, 94], ["torch.cat", "deeplabv3.ASPP.project", "torch.cat.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "project", "(", "res", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.__init__": [[45, 64], ["torch.nn.Module.__init__", "isinstance", "tuple", "isinstance", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sizes", "=", "(", "128", ",", "256", ",", "512", ")", ",", "\n", "aspect_ratios", "=", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AnchorGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "sizes", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# TODO change this", "\n", "            ", "sizes", "=", "tuple", "(", "(", "s", ",", ")", "for", "s", "in", "sizes", ")", "\n", "", "if", "not", "isinstance", "(", "aspect_ratios", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_ratios", "=", "(", "aspect_ratios", ",", ")", "*", "len", "(", "sizes", ")", "\n", "\n", "", "assert", "len", "(", "sizes", ")", "==", "len", "(", "aspect_ratios", ")", "\n", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "aspect_ratios", "=", "aspect_ratios", "\n", "self", ".", "cell_anchors", "=", "None", "\n", "self", ".", "_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.generate_anchors": [[65, 77], ["torch.as_tensor", "torch.as_tensor", "torch.sqrt", "base_anchors.round", "torch.stack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_anchors", "(", "scales", ",", "aspect_ratios", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "scales", "=", "torch", ".", "as_tensor", "(", "scales", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "aspect_ratios", "=", "torch", ".", "as_tensor", "(", "aspect_ratios", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "h_ratios", "=", "torch", ".", "sqrt", "(", "aspect_ratios", ")", "\n", "w_ratios", "=", "1", "/", "h_ratios", "\n", "\n", "ws", "=", "(", "w_ratios", "[", ":", ",", "None", "]", "*", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h_ratios", "[", ":", ",", "None", "]", "*", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "base_anchors", "=", "torch", ".", "stack", "(", "[", "-", "ws", ",", "-", "hs", ",", "ws", ",", "hs", "]", ",", "dim", "=", "1", ")", "/", "2", "\n", "return", "base_anchors", ".", "round", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.set_cell_anchors": [[78, 91], ["rpn.AnchorGenerator.generate_anchors", "zip"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.generate_anchors"], ["", "def", "set_cell_anchors", "(", "self", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "cell_anchors", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "cell_anchors", "\n", "", "cell_anchors", "=", "[", "\n", "self", ".", "generate_anchors", "(", "\n", "sizes", ",", "\n", "aspect_ratios", ",", "\n", "dtype", ",", "\n", "device", "\n", ")", "\n", "for", "sizes", ",", "aspect_ratios", "in", "zip", "(", "self", ".", "sizes", ",", "self", ".", "aspect_ratios", ")", "\n", "]", "\n", "self", ".", "cell_anchors", "=", "cell_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.num_anchors_per_location": [[92, 94], ["len", "len", "zip"], "methods", ["None"], ["", "def", "num_anchors_per_location", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "s", ")", "*", "len", "(", "a", ")", "for", "s", ",", "a", "in", "zip", "(", "self", ".", "sizes", ",", "self", ".", "aspect_ratios", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.grid_anchors": [[95, 123], ["zip", "torchvision._is_tracing", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack", "anchors.append", "torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.stack.view", "base_anchors.view"], "methods", ["None"], ["", "def", "grid_anchors", "(", "self", ",", "grid_sizes", ",", "strides", ")", ":", "\n", "        ", "anchors", "=", "[", "]", "\n", "for", "size", ",", "stride", ",", "base_anchors", "in", "zip", "(", "\n", "grid_sizes", ",", "strides", ",", "self", ".", "cell_anchors", "\n", ")", ":", "\n", "            ", "grid_height", ",", "grid_width", "=", "size", "\n", "stride_height", ",", "stride_width", "=", "stride", "\n", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "# required in ONNX export for mult operation with float32", "\n", "                ", "stride_width", "=", "torch", ".", "tensor", "(", "stride_width", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "stride_height", "=", "torch", ".", "tensor", "(", "stride_height", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "device", "=", "base_anchors", ".", "device", "\n", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_width", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "*", "stride_width", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_height", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "*", "stride_height", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ",", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "\n", "\n", "anchors", ".", "append", "(", "\n", "(", "shifts", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", "+", "base_anchors", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.cached_grid_anchors": [[124, 131], ["rpn.AnchorGenerator.grid_anchors", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.grid_anchors"], ["", "def", "cached_grid_anchors", "(", "self", ",", "grid_sizes", ",", "strides", ")", ":", "\n", "        ", "key", "=", "tuple", "(", "grid_sizes", ")", "+", "tuple", "(", "strides", ")", "\n", "if", "key", "in", "self", ".", "_cache", ":", "\n", "            ", "return", "self", ".", "_cache", "[", "key", "]", "\n", "", "anchors", "=", "self", ".", "grid_anchors", "(", "grid_sizes", ",", "strides", ")", "\n", "self", ".", "_cache", "[", "key", "]", "=", "anchors", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.forward": [[132, 149], ["tuple", "tuple", "rpn.AnchorGenerator.set_cell_anchors", "rpn.AnchorGenerator.cached_grid_anchors", "enumerate", "anchors.append", "torch.cat", "anchors_in_image.append", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.set_cell_anchors", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.cached_grid_anchors"], ["", "def", "forward", "(", "self", ",", "image_list", ",", "feature_maps", ")", ":", "\n", "        ", "grid_sizes", "=", "tuple", "(", "[", "feature_map", ".", "shape", "[", "-", "2", ":", "]", "for", "feature_map", "in", "feature_maps", "]", ")", "\n", "image_size", "=", "image_list", ".", "tensors", ".", "shape", "[", "-", "2", ":", "]", "\n", "strides", "=", "tuple", "(", "(", "float", "(", "image_size", "[", "0", "]", ")", "/", "float", "(", "g", "[", "0", "]", ")", ",", "\n", "float", "(", "image_size", "[", "1", "]", ")", "/", "float", "(", "g", "[", "1", "]", ")", ")", "\n", "for", "g", "in", "grid_sizes", ")", "\n", "dtype", ",", "device", "=", "feature_maps", "[", "0", "]", ".", "dtype", ",", "feature_maps", "[", "0", "]", ".", "device", "\n", "self", ".", "set_cell_anchors", "(", "dtype", ",", "device", ")", "\n", "anchors_over_all_feature_maps", "=", "self", ".", "cached_grid_anchors", "(", "grid_sizes", ",", "strides", ")", "\n", "anchors", "=", "[", "]", "\n", "for", "i", ",", "(", "image_height", ",", "image_width", ")", "in", "enumerate", "(", "image_list", ".", "image_sizes", ")", ":", "\n", "            ", "anchors_in_image", "=", "[", "]", "\n", "for", "anchors_per_feature_map", "in", "anchors_over_all_feature_maps", ":", "\n", "                ", "anchors_in_image", ".", "append", "(", "anchors_per_feature_map", ")", "\n", "", "anchors", ".", "append", "(", "anchors_in_image", ")", "\n", "", "anchors", "=", "[", "torch", ".", "cat", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RPNHead.__init__": [[160, 173], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "rpn.RPNHead.children", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RPNHead.forward": [[174, 182], ["torch.nn.functional.relu", "logits.append", "bbox_reg.append", "rpn.RPNHead.conv", "rpn.RPNHead.cls_logits", "rpn.RPNHead.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "x", ":", "\n", "            ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "feature", ")", ")", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "t", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "t", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.__init__": [[248, 278], ["super().__init__", "_utils.BoxCoder", "_utils.Matcher", "_utils.BalancedPositiveNegativeSampler"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "\n", "anchor_generator", ",", "\n", "head", ",", "\n", "#", "\n", "fg_iou_thresh", ",", "bg_iou_thresh", ",", "\n", "batch_size_per_image", ",", "positive_fraction", ",", "\n", "#", "\n", "pre_nms_top_n", ",", "post_nms_top_n", ",", "nms_thresh", ")", ":", "\n", "        ", "super", "(", "RegionProposalNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_coder", "=", "det_utils", ".", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "\n", "# used during training", "\n", "self", ".", "box_similarity", "=", "box_ops", ".", "box_iou", "\n", "\n", "self", ".", "proposal_matcher", "=", "det_utils", ".", "Matcher", "(", "\n", "fg_iou_thresh", ",", "\n", "bg_iou_thresh", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "fg_bg_sampler", "=", "det_utils", ".", "BalancedPositiveNegativeSampler", "(", "\n", "batch_size_per_image", ",", "positive_fraction", "\n", ")", "\n", "# used during testing", "\n", "self", ".", "_pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "_post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "1e-3", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.pre_nms_top_n": [[279, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_nms_top_n", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_pre_nms_top_n", "[", "'training'", "]", "\n", "", "return", "self", ".", "_pre_nms_top_n", "[", "'testing'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.post_nms_top_n": [[285, 290], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "post_nms_top_n", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_post_nms_top_n", "[", "'training'", "]", "\n", "", "return", "self", ".", "_post_nms_top_n", "[", "'testing'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.assign_targets_to_anchors": [[291, 318], ["zip", "rpn.RegionProposalNetwork.box_similarity", "rpn.RegionProposalNetwork.proposal_matcher", "labels_per_image.to.to.to", "labels.append", "matched_gt_boxes.append", "rpn.RegionProposalNetwork.clamp"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "assign_targets_to_anchors", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "matched_gt_boxes", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "gt_boxes", "=", "targets_per_image", "[", "\"boxes\"", "]", "\n", "match_quality_matrix", "=", "self", ".", "box_similarity", "(", "gt_boxes", ",", "anchors_per_image", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# get the targets corresponding GT for each proposal", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_gt_boxes_per_image", "=", "gt_boxes", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "self", ".", "proposal_matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard indices that are between thresholds", "\n", "inds_to_discard", "=", "matched_idxs", "==", "self", ".", "proposal_matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "matched_gt_boxes", ".", "append", "(", "matched_gt_boxes_per_image", ")", "\n", "", "return", "labels", ",", "matched_gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork._get_top_n_idx": [[319, 332], ["objectness.split", "torch.cat", "torchvision._is_tracing", "ob.topk", "r.append", "rpn._onnx_get_num_anchors_and_pre_nms_top_n", "min"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn._onnx_get_num_anchors_and_pre_nms_top_n"], ["", "def", "_get_top_n_idx", "(", "self", ",", "objectness", ",", "num_anchors_per_level", ")", ":", "\n", "        ", "r", "=", "[", "]", "\n", "offset", "=", "0", "\n", "for", "ob", "in", "objectness", ".", "split", "(", "num_anchors_per_level", ",", "1", ")", ":", "\n", "            ", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "                ", "num_anchors", ",", "pre_nms_top_n", "=", "_onnx_get_num_anchors_and_pre_nms_top_n", "(", "ob", ",", "self", ".", "pre_nms_top_n", ")", "\n", "", "else", ":", "\n", "                ", "num_anchors", "=", "ob", ".", "shape", "[", "1", "]", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "", "_", ",", "top_n_idx", "=", "ob", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ")", "\n", "r", ".", "append", "(", "top_n_idx", "+", "offset", ")", "\n", "offset", "+=", "num_anchors", "\n", "", "return", "torch", ".", "cat", "(", "r", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.filter_proposals": [[333, 368], ["objectness.reshape.reshape.detach", "objectness.reshape.reshape.reshape", "torch.cat", "levels.reshape().expand_as.reshape().expand_as.reshape().expand_as", "rpn.RegionProposalNetwork._get_top_n_idx", "zip", "torch.full", "torch.arange", "torchvision.ops.boxes.clip_boxes_to_image", "torchvision.ops.boxes.remove_small_boxes", "torchvision.ops.boxes.batched_nms", "final_boxes.append", "final_scores.append", "enumerate", "levels.reshape().expand_as.reshape().expand_as.reshape"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork._get_top_n_idx"], ["", "def", "filter_proposals", "(", "self", ",", "proposals", ",", "objectness", ",", "image_shapes", ",", "num_anchors_per_level", ")", ":", "\n", "        ", "num_images", "=", "proposals", ".", "shape", "[", "0", "]", "\n", "device", "=", "proposals", ".", "device", "\n", "# do not backprop throught objectness", "\n", "objectness", "=", "objectness", ".", "detach", "(", ")", "\n", "objectness", "=", "objectness", ".", "reshape", "(", "num_images", ",", "-", "1", ")", "\n", "\n", "levels", "=", "[", "\n", "torch", ".", "full", "(", "(", "n", ",", ")", ",", "idx", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "device", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "num_anchors_per_level", ")", "\n", "]", "\n", "levels", "=", "torch", ".", "cat", "(", "levels", ",", "0", ")", "\n", "levels", "=", "levels", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "objectness", ")", "\n", "\n", "# select top_n boxes independently per level before applying nms", "\n", "top_n_idx", "=", "self", ".", "_get_top_n_idx", "(", "objectness", ",", "num_anchors_per_level", ")", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "num_images", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "objectness", "=", "objectness", "[", "batch_idx", ",", "top_n_idx", "]", "\n", "levels", "=", "levels", "[", "batch_idx", ",", "top_n_idx", "]", "\n", "proposals", "=", "proposals", "[", "batch_idx", ",", "top_n_idx", "]", "\n", "\n", "final_boxes", "=", "[", "]", "\n", "final_scores", "=", "[", "]", "\n", "for", "boxes", ",", "scores", ",", "lvl", ",", "img_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "levels", ",", "image_shapes", ")", ":", "\n", "            ", "boxes", "=", "box_ops", ".", "clip_boxes_to_image", "(", "boxes", ",", "img_shape", ")", "\n", "keep", "=", "box_ops", ".", "remove_small_boxes", "(", "boxes", ",", "self", ".", "min_size", ")", "\n", "boxes", ",", "scores", ",", "lvl", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "lvl", "[", "keep", "]", "\n", "# non-maximum suppression, independently done per level", "\n", "keep", "=", "box_ops", ".", "batched_nms", "(", "boxes", ",", "scores", ",", "lvl", ",", "self", ".", "nms_thresh", ")", "\n", "# keep only topk scoring predictions", "\n", "keep", "=", "keep", "[", ":", "self", ".", "post_nms_top_n", "]", "\n", "boxes", ",", "scores", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", "\n", "final_boxes", ".", "append", "(", "boxes", ")", "\n", "final_scores", ".", "append", "(", "scores", ")", "\n", "", "return", "final_boxes", ",", "final_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.compute_loss": [[369, 404], ["rpn.RegionProposalNetwork.fg_bg_sampler", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.cat", "objectness.flatten.flatten.flatten", "torch.cat", "torch.cat", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.l1_loss", "torch.cat.numel", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "objectness", ",", "pred_bbox_deltas", ",", "labels", ",", "regression_targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            objectness (Tensor)\n            pred_bbox_deltas (Tensor)\n            labels (List[Tensor])\n            regression_targets (List[Tensor])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor)\n        \"\"\"", "\n", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", "=", "objectness", ".", "flatten", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "F", ".", "l1_loss", "(", "\n", "pred_bbox_deltas", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.forward": [[405, 449], ["list", "rpn.RegionProposalNetwork.head", "rpn.RegionProposalNetwork.anchor_generator", "len", "rpn.concat_box_prediction_layers", "rpn.RegionProposalNetwork.box_coder.decode", "proposals.view.view.view", "rpn.RegionProposalNetwork.filter_proposals", "list.values", "o[].numel", "pred_bbox_deltas.detach", "rpn.RegionProposalNetwork.assign_targets_to_anchors", "rpn.RegionProposalNetwork.box_coder.encode", "rpn.RegionProposalNetwork.compute_loss"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.concat_box_prediction_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.decode", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.filter_proposals", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.assign_targets_to_anchors", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.encode", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.RegionProposalNetwork.compute_loss"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (List[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (List[Dict[Tensor]]): ground-truth boxes present in the image (optional).\n                If provided, each element in the dict should contain a field `boxes`,\n                with the locations of the ground-truth boxes.\n\n        Returns:\n            boxes (List[Tensor]): the predicted boxes from the RPN, one Tensor per\n                image.\n            losses (Dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "# RPN uses all feature maps that are available", "\n", "features", "=", "list", "(", "features", ".", "values", "(", ")", ")", "\n", "objectness", ",", "pred_bbox_deltas", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "num_images", "=", "len", "(", "anchors", ")", "\n", "num_anchors_per_level", "=", "[", "o", "[", "0", "]", ".", "numel", "(", ")", "for", "o", "in", "objectness", "]", "\n", "objectness", ",", "pred_bbox_deltas", "=", "concat_box_prediction_layers", "(", "objectness", ",", "pred_bbox_deltas", ")", "\n", "# apply pred_bbox_deltas to anchors to obtain the decoded proposals", "\n", "# note that we detach the deltas because Faster R-CNN do not backprop through", "\n", "# the proposals", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "pred_bbox_deltas", ".", "detach", "(", ")", ",", "anchors", ")", "\n", "proposals", "=", "proposals", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "boxes", ",", "scores", "=", "self", ".", "filter_proposals", "(", "proposals", ",", "objectness", ",", "images", ".", "image_sizes", ",", "num_anchors_per_level", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "labels", ",", "matched_gt_boxes", "=", "self", ".", "assign_targets_to_anchors", "(", "anchors", ",", "targets", ")", "\n", "regression_targets", "=", "self", ".", "box_coder", ".", "encode", "(", "matched_gt_boxes", ",", "anchors", ")", "\n", "loss_objectness", ",", "loss_rpn_box_reg", "=", "self", ".", "compute_loss", "(", "\n", "objectness", ",", "pred_bbox_deltas", ",", "labels", ",", "regression_targets", ")", "\n", "losses", "=", "{", "\n", "\"loss_objectness\"", ":", "loss_objectness", ",", "\n", "\"loss_rpn_box_reg\"", ":", "loss_rpn_box_reg", ",", "\n", "}", "\n", "", "return", "boxes", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn._onnx_get_num_anchors_and_pre_nms_top_n": [[12, 23], ["[].unsqueeze", "torch.min().to", "torch.min", "operators.shape_as_tensor", "torch.cat().to", "torch.cat", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["@", "torch", ".", "jit", ".", "unused", "\n", "def", "_onnx_get_num_anchors_and_pre_nms_top_n", "(", "ob", ",", "orig_pre_nms_top_n", ")", ":", "\n", "    ", "from", "torch", ".", "onnx", "import", "operators", "\n", "num_anchors", "=", "operators", ".", "shape_as_tensor", "(", "ob", ")", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "# TODO : remove cast to IntTensor/num_anchors.dtype when", "\n", "#        ONNX Runtime version is updated with ReduceMin int64 support", "\n", "pre_nms_top_n", "=", "torch", ".", "min", "(", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "tensor", "(", "[", "orig_pre_nms_top_n", "]", ",", "dtype", "=", "num_anchors", ".", "dtype", ")", ",", "\n", "num_anchors", ")", ",", "0", ")", ".", "to", "(", "torch", ".", "int32", ")", ")", ".", "to", "(", "num_anchors", ".", "dtype", ")", "\n", "\n", "return", "num_anchors", ",", "pre_nms_top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.permute_and_flatten": [[184, 189], ["layer.reshape.view", "layer.reshape.permute", "layer.reshape.reshape"], "function", ["None"], ["", "", "def", "permute_and_flatten", "(", "layer", ",", "N", ",", "A", ",", "C", ",", "H", ",", "W", ")", ":", "\n", "    ", "layer", "=", "layer", ".", "view", "(", "N", ",", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "layer", "=", "layer", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "layer", "=", "layer", ".", "reshape", "(", "N", ",", "-", "1", ",", "C", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.concat_box_prediction_layers": [[191, 220], ["zip", "torch.cat().reshape", "torch.cat().reshape", "rpn.permute_and_flatten", "box_cls_flattened.append", "rpn.permute_and_flatten", "box_regression_flattened.append", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.permute_and_flatten", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.permute_and_flatten"], ["", "def", "concat_box_prediction_layers", "(", "box_cls", ",", "box_regression", ")", ":", "\n", "    ", "box_cls_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "# for each feature level, permute the outputs to make them be in the", "\n", "# same format as the labels. Note that the labels are computed for", "\n", "# all feature levels concatenated, so we keep the same representation", "\n", "# for the objectness and the box_regression", "\n", "for", "box_cls_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "box_cls", ",", "box_regression", "\n", ")", ":", "\n", "        ", "N", ",", "AxC", ",", "H", ",", "W", "=", "box_cls_per_level", ".", "shape", "\n", "Ax4", "=", "box_regression_per_level", ".", "shape", "[", "1", "]", "\n", "A", "=", "Ax4", "//", "4", "\n", "C", "=", "AxC", "//", "A", "\n", "box_cls_per_level", "=", "permute_and_flatten", "(", "\n", "box_cls_per_level", ",", "N", ",", "A", ",", "C", ",", "H", ",", "W", "\n", ")", "\n", "box_cls_flattened", ".", "append", "(", "box_cls_per_level", ")", "\n", "\n", "box_regression_per_level", "=", "permute_and_flatten", "(", "\n", "box_regression_per_level", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", "\n", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "# concatenate on the first dimension (representing the feature levels), to", "\n", "# take into account the way the labels were generated (with all feature maps", "\n", "# being concatenated as well)", "\n", "", "box_cls", "=", "torch", ".", "cat", "(", "box_cls_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "C", ")", "\n", "box_regression", "=", "torch", ".", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "return", "box_cls", ",", "box_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BalancedPositiveNegativeSampler.__init__": [[14, 22], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BalancedPositiveNegativeSampler.__call__": [[23, 73], ["torch.nonzero().squeeze", "torch.nonzero().squeeze", "int", "min", "min", "torch.zeros_like", "torch.zeros_like", "pos_idx.append", "neg_idx.append", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.randperm", "torch.randperm", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["None"], ["\n", "_version", "=", "2", "\n", "__constants__", "=", "[", "'layers'", "]", "\n", "__annotations__", "=", "{", "\n", "\"return_layers\"", ":", "Dict", "[", "str", ",", "str", "]", ",", "\n", "}", "\n", "\n", "def", "__init__", "(", "self", ",", "model", ",", "return_layers", ")", ":", "\n", "        ", "if", "not", "set", "(", "return_layers", ")", ".", "issubset", "(", "[", "name", "for", "name", ",", "_", "in", "model", ".", "named_children", "(", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"return_layers are not present in model\"", ")", "\n", "", "super", "(", "IntermediateLayerGetter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "orig_return_layers", "=", "return_layers", "\n", "return_layers", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "return_layers", ".", "items", "(", ")", "}", "\n", "layers", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "            ", "layers", "[", "name", "]", "=", "module", "\n", "if", "name", "in", "return_layers", ":", "\n", "                ", "del", "return_layers", "[", "name", "]", "\n", "", "if", "not", "return_layers", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "layers", "=", "nn", ".", "ModuleDict", "(", "layers", ")", "\n", "self", ".", "return_layers", "=", "orig_return_layers", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "module", "in", "self", ".", "layers", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "return_layers", ":", "\n", "                ", "out_name", "=", "self", ".", "return_layers", "[", "name", "]", "\n", "out", "[", "out_name", "]", "=", "x", "\n", "", "", "return", "out", "\n", "\n", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.__init__": [[129, 137], ["math.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.encode": [[138, 144], ["torch.cat", "torch.cat", "_utils.BoxCoder.encode_single", "_utils.BoxCoder.split", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.encode_single"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.encode_single": [[145, 160], ["torch.as_tensor", "_utils.encode_boxes"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.encode_boxes"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.decode": [[161, 172], ["isinstance", "isinstance", "isinstance", "torch.cat", "_utils.BoxCoder.decode_single", "_utils.BoxCoder.reshape", "torch.cat", "b.size", "torch.cat.reshape", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.decode_single"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.decode_single": [[173, 211], ["boxes.to.to.to", "torch.clamp", "torch.clamp", "torch.stack().flatten", "torch.exp", "torch.exp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.Matcher.__init__": [[231, 249], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.Matcher.__call__": [[250, 290], ["match_quality_matrix.max", "match_quality_matrix.numel", "matches.clone", "_utils.Matcher.set_low_quality_matches_", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.Matcher.set_low_quality_matches_"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.Matcher.set_low_quality_matches_": [[291, 321], ["match_quality_matrix.max", "torch.nonzero"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.encode_boxes": [[75, 121], ["proposals[].unsqueeze", "proposals[].unsqueeze", "proposals[].unsqueeze", "proposals[].unsqueeze", "reference_boxes[].unsqueeze", "reference_boxes[].unsqueeze", "reference_boxes[].unsqueeze", "reference_boxes[].unsqueeze", "torch.cat", "torch.log", "torch.log"], "function", ["None"], ["        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "if", "(", "version", "is", "None", "or", "version", "<", "2", ")", ":", "\n", "# now we have a new nesting level for torchscript support", "\n", "            ", "for", "new_key", "in", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "# remove prefix \"layers.\"", "\n", "                ", "old_key", "=", "new_key", "[", "len", "(", "\"layers.\"", ")", ":", "]", "\n", "old_key", "=", "prefix", "+", "old_key", "\n", "new_key", "=", "prefix", "+", "new_key", "\n", "if", "old_key", "in", "state_dict", ":", "\n", "                    ", "value", "=", "state_dict", "[", "old_key", "]", "\n", "del", "state_dict", "[", "old_key", "]", "\n", "state_dict", "[", "new_key", "]", "=", "value", "\n", "", "", "", "super", "(", "IntermediateLayerGetter", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.__init__": [[15, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            tensors (tensor)\n            image_sizes (list[tuple[int, int]])\n        \"\"\"", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "image_sizes", "=", "image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to": [[24, 27], ["image_list.ImageList.tensors.to", "image_list.ImageList"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ImageList", "(", "cast_tensor", ",", "self", ".", "image_sizes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.faster_rcnn.FasterRCNN.__init__": [[143, 234], ["isinstance", "isinstance", "dict", "dict", "rpn.RegionProposalNetwork.RegionProposalNetwork", "roi_heads.RoIHeads.RoIHeads", "transform.GeneralizedRCNNTransform.GeneralizedRCNNTransform", "generalized_rcnn.GeneralizedRCNN.__init__", "hasattr", "ValueError", "rpn.RegionProposalNetwork.AnchorGenerator", "rpn.RegionProposalNetwork.RPNHead", "torchvision.ops.MultiScaleRoIAlign", "faster_rcnn.TwoMLPHead", "faster_rcnn.FastRCNNPredictor", "type", "type", "ValueError", "ValueError", "len", "rpn.RegionProposalNetwork.AnchorGenerator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.rpn.AnchorGenerator.num_anchors_per_location"], ["def", "__init__", "(", "self", ",", "backbone", ",", "num_classes", "=", "None", ",", "\n", "# transform parameters", "\n", "min_size", "=", "800", ",", "max_size", "=", "1333", ",", "\n", "image_mean", "=", "None", ",", "image_std", "=", "None", ",", "\n", "# RPN parameters", "\n", "rpn_anchor_generator", "=", "None", ",", "rpn_head", "=", "None", ",", "\n", "rpn_pre_nms_top_n_train", "=", "2000", ",", "rpn_pre_nms_top_n_test", "=", "1000", ",", "\n", "rpn_post_nms_top_n_train", "=", "2000", ",", "rpn_post_nms_top_n_test", "=", "1000", ",", "\n", "rpn_nms_thresh", "=", "0.7", ",", "\n", "rpn_fg_iou_thresh", "=", "0.7", ",", "rpn_bg_iou_thresh", "=", "0.3", ",", "\n", "rpn_batch_size_per_image", "=", "256", ",", "rpn_positive_fraction", "=", "0.5", ",", "\n", "# Box parameters", "\n", "box_roi_pool", "=", "None", ",", "box_head", "=", "None", ",", "box_predictor", "=", "None", ",", "\n", "box_score_thresh", "=", "0.05", ",", "box_nms_thresh", "=", "0.5", ",", "box_detections_per_img", "=", "100", ",", "\n", "box_fg_iou_thresh", "=", "0.5", ",", "box_bg_iou_thresh", "=", "0.5", ",", "\n", "box_batch_size_per_image", "=", "512", ",", "box_positive_fraction", "=", "0.25", ",", "\n", "bbox_reg_weights", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "hasattr", "(", "backbone", ",", "\"out_channels\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"backbone should contain an attribute out_channels \"", "\n", "\"specifying the number of output channels (assumed to be the \"", "\n", "\"same for all the levels)\"", ")", "\n", "\n", "", "assert", "isinstance", "(", "rpn_anchor_generator", ",", "(", "AnchorGenerator", ",", "type", "(", "None", ")", ")", ")", "\n", "assert", "isinstance", "(", "box_roi_pool", ",", "(", "MultiScaleRoIAlign", ",", "type", "(", "None", ")", ")", ")", "\n", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "box_predictor", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should be None when box_predictor is specified\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "box_predictor", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should not be None when box_predictor \"", "\n", "\"is not specified\"", ")", "\n", "\n", "", "", "out_channels", "=", "backbone", ".", "out_channels", "\n", "\n", "if", "rpn_anchor_generator", "is", "None", ":", "\n", "            ", "anchor_sizes", "=", "(", "(", "32", ",", ")", ",", "(", "64", ",", ")", ",", "(", "128", ",", ")", ",", "(", "256", ",", ")", ",", "(", "512", ",", ")", ")", "\n", "aspect_ratios", "=", "(", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", ")", "*", "len", "(", "anchor_sizes", ")", "\n", "rpn_anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_sizes", ",", "aspect_ratios", "\n", ")", "\n", "", "if", "rpn_head", "is", "None", ":", "\n", "            ", "rpn_head", "=", "RPNHead", "(", "\n", "out_channels", ",", "rpn_anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "rpn_pre_nms_top_n", "=", "dict", "(", "training", "=", "rpn_pre_nms_top_n_train", ",", "testing", "=", "rpn_pre_nms_top_n_test", ")", "\n", "rpn_post_nms_top_n", "=", "dict", "(", "training", "=", "rpn_post_nms_top_n_train", ",", "testing", "=", "rpn_post_nms_top_n_test", ")", "\n", "\n", "rpn", "=", "RegionProposalNetwork", "(", "\n", "rpn_anchor_generator", ",", "rpn_head", ",", "\n", "rpn_fg_iou_thresh", ",", "rpn_bg_iou_thresh", ",", "\n", "rpn_batch_size_per_image", ",", "rpn_positive_fraction", ",", "\n", "rpn_pre_nms_top_n", ",", "rpn_post_nms_top_n", ",", "rpn_nms_thresh", ")", "\n", "\n", "if", "box_roi_pool", "is", "None", ":", "\n", "            ", "box_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "output_size", "=", "7", ",", "\n", "sampling_ratio", "=", "2", ")", "\n", "\n", "", "if", "box_head", "is", "None", ":", "\n", "            ", "resolution", "=", "box_roi_pool", ".", "output_size", "[", "0", "]", "\n", "representation_size", "=", "1024", "\n", "box_head", "=", "TwoMLPHead", "(", "\n", "out_channels", "*", "resolution", "**", "2", ",", "\n", "representation_size", ")", "\n", "\n", "", "if", "box_predictor", "is", "None", ":", "\n", "            ", "representation_size", "=", "1024", "\n", "box_predictor", "=", "FastRCNNPredictor", "(", "\n", "representation_size", ",", "\n", "num_classes", ")", "\n", "\n", "", "roi_heads", "=", "RoIHeads", "(", "\n", "# Box", "\n", "box_roi_pool", ",", "box_head", ",", "box_predictor", ",", "\n", "box_fg_iou_thresh", ",", "box_bg_iou_thresh", ",", "\n", "box_batch_size_per_image", ",", "box_positive_fraction", ",", "\n", "bbox_reg_weights", ",", "\n", "box_score_thresh", ",", "box_nms_thresh", ",", "box_detections_per_img", ")", "\n", "\n", "if", "image_mean", "is", "None", ":", "\n", "            ", "image_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "", "if", "image_std", "is", "None", ":", "\n", "            ", "image_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "transform", "=", "GeneralizedRCNNTransform", "(", "min_size", ",", "max_size", ",", "image_mean", ",", "image_std", ")", "\n", "\n", "super", "(", "FasterRCNN", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "rpn", ",", "roi_heads", ",", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.faster_rcnn.TwoMLPHead.__init__": [[245, 250], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "representation_size", ")", ":", "\n", "        ", "super", "(", "TwoMLPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "in_channels", ",", "representation_size", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "representation_size", ",", "representation_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.faster_rcnn.TwoMLPHead.forward": [[251, 258], ["torch.relu.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "faster_rcnn.TwoMLPHead.fc6", "faster_rcnn.TwoMLPHead.fc7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.faster_rcnn.FastRCNNPredictor.__init__": [[270, 274], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "FastRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", "*", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.faster_rcnn.FastRCNNPredictor.forward": [[275, 283], ["x.flatten.flatten.flatten", "faster_rcnn.FastRCNNPredictor.cls_score", "faster_rcnn.FastRCNNPredictor.bbox_pred", "x.flatten.flatten.ndimension", "list"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "            ", "assert", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "==", "[", "1", ",", "1", "]", "\n", "", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "scores", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "\n", "return", "scores", ",", "bbox_deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.faster_rcnn.fasterrcnn_resnet50_fpn": [[291, 339], ["backbone_utils.resnet_fpn_backbone", "faster_rcnn.FasterRCNN", "utils.load_state_dict_from_url", "FasterRCNN.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.backbone_utils.resnet_fpn_backbone"], ["def", "fasterrcnn_resnet50_fpn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "91", ",", "pretrained_backbone", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Faster R-CNN model with a ResNet-50-FPN backbone.\n\n    The input to the model is expected to be a list of tensors, each of shape ``[C, H, W]``, one for each\n    image, and should be in ``0-1`` range. Different images can have different sizes.\n\n    The behavior of the model changes depending if it is in training or evaluation mode.\n\n    During training, the model expects both the input tensors, as well as a targets (list of dictionary),\n    containing:\n        - boxes (``FloatTensor[N, 4]``): the ground-truth boxes in ``[x1, y1, x2, y2]`` format, with values\n          between ``0`` and ``H`` and ``0`` and ``W``\n        - labels (``Int64Tensor[N]``): the class label for each ground-truth box\n\n    The model returns a ``Dict[Tensor]`` during training, containing the classification and regression\n    losses for both the RPN and the R-CNN.\n\n    During inference, the model requires only the input tensors, and returns the post-processed\n    predictions as a ``List[Dict[Tensor]]``, one for each input image. The fields of the ``Dict`` are as\n    follows:\n        - boxes (``FloatTensor[N, 4]``): the predicted boxes in ``[x1, y1, x2, y2]`` format, with values between\n          ``0`` and ``H`` and ``0`` and ``W``\n        - labels (``Int64Tensor[N]``): the predicted labels for each image\n        - scores (``Tensor[N]``): the scores or each prediction\n\n    Example::\n\n        >>> model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\n        >>> model.eval()\n        >>> x = [torch.rand(3, 300, 400), torch.rand(3, 500, 400)]\n        >>> predictions = model(x)\n\n    Arguments:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "# no need to download the backbone if pretrained is set", "\n", "        ", "pretrained_backbone", "=", "False", "\n", "", "backbone", "=", "resnet_fpn_backbone", "(", "'resnet50'", ",", "pretrained_backbone", ")", "\n", "model", "=", "FasterRCNN", "(", "backbone", ",", "num_classes", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'fasterrcnn_resnet50_fpn_coco'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.generalized_rcnn.GeneralizedRCNN.__init__": [[24, 30], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "rpn", ",", "roi_heads", ",", "transform", ")", ":", "\n", "        ", "super", "(", "GeneralizedRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "rpn", "=", "rpn", "\n", "self", ".", "roi_heads", "=", "roi_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.generalized_rcnn.GeneralizedRCNN.forward": [[31, 63], ["generalized_rcnn.GeneralizedRCNN.transform", "generalized_rcnn.GeneralizedRCNN.backbone", "isinstance", "generalized_rcnn.GeneralizedRCNN.rpn", "generalized_rcnn.GeneralizedRCNN.roi_heads", "generalized_rcnn.GeneralizedRCNN.transform.postprocess", "losses.update", "losses.update", "ValueError", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.postprocess", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (list[Tensor]): images to be processed\n            targets (list[Dict[Tensor]]): ground-truth boxes present in the image (optional)\n\n        Returns:\n            result (list[BoxList] or dict[Tensor]): the output from the model.\n                During training, it returns a dict[Tensor] which contains the losses.\n                During testing, it returns list[BoxList] contains additional fields\n                like `scores`, `labels` and `mask` (for Mask R-CNN models).\n\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "", "original_image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", ",", "targets", "=", "self", ".", "transform", "(", "images", ",", "targets", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "if", "isinstance", "(", "features", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "features", "=", "OrderedDict", "(", "[", "(", "0", ",", "features", ")", "]", ")", "\n", "", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "detections", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "images", ".", "image_sizes", ",", "targets", ")", "\n", "detections", "=", "self", ".", "transform", ".", "postprocess", "(", "detections", ",", "images", ".", "image_sizes", ",", "original_image_sizes", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "losses", "\n", "\n", "", "return", "detections", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.keypoint_rcnn.KeypointRCNN.__init__": [[149, 216], ["isinstance", "faster_rcnn.FasterRCNN.__init__", "torchvision.ops.MultiScaleRoIAlign", "tuple", "keypoint_rcnn.KeypointRCNNHeads", "keypoint_rcnn.KeypointRCNNPredictor", "type", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "num_classes", "=", "None", ",", "\n", "# transform parameters", "\n", "min_size", "=", "None", ",", "max_size", "=", "1333", ",", "\n", "image_mean", "=", "None", ",", "image_std", "=", "None", ",", "\n", "# RPN parameters", "\n", "rpn_anchor_generator", "=", "None", ",", "rpn_head", "=", "None", ",", "\n", "rpn_pre_nms_top_n_train", "=", "2000", ",", "rpn_pre_nms_top_n_test", "=", "1000", ",", "\n", "rpn_post_nms_top_n_train", "=", "2000", ",", "rpn_post_nms_top_n_test", "=", "1000", ",", "\n", "rpn_nms_thresh", "=", "0.7", ",", "\n", "rpn_fg_iou_thresh", "=", "0.7", ",", "rpn_bg_iou_thresh", "=", "0.3", ",", "\n", "rpn_batch_size_per_image", "=", "256", ",", "rpn_positive_fraction", "=", "0.5", ",", "\n", "# Box parameters", "\n", "box_roi_pool", "=", "None", ",", "box_head", "=", "None", ",", "box_predictor", "=", "None", ",", "\n", "box_score_thresh", "=", "0.05", ",", "box_nms_thresh", "=", "0.5", ",", "box_detections_per_img", "=", "100", ",", "\n", "box_fg_iou_thresh", "=", "0.5", ",", "box_bg_iou_thresh", "=", "0.5", ",", "\n", "box_batch_size_per_image", "=", "512", ",", "box_positive_fraction", "=", "0.25", ",", "\n", "bbox_reg_weights", "=", "None", ",", "\n", "# keypoint parameters", "\n", "keypoint_roi_pool", "=", "None", ",", "keypoint_head", "=", "None", ",", "keypoint_predictor", "=", "None", ",", "\n", "num_keypoints", "=", "17", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "keypoint_roi_pool", ",", "(", "MultiScaleRoIAlign", ",", "type", "(", "None", ")", ")", ")", "\n", "if", "min_size", "is", "None", ":", "\n", "            ", "min_size", "=", "(", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", ")", "\n", "\n", "", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "keypoint_predictor", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should be None when keypoint_predictor is specified\"", ")", "\n", "\n", "", "", "out_channels", "=", "backbone", ".", "out_channels", "\n", "\n", "if", "keypoint_roi_pool", "is", "None", ":", "\n", "            ", "keypoint_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "output_size", "=", "14", ",", "\n", "sampling_ratio", "=", "2", ")", "\n", "\n", "", "if", "keypoint_head", "is", "None", ":", "\n", "            ", "keypoint_layers", "=", "tuple", "(", "512", "for", "_", "in", "range", "(", "8", ")", ")", "\n", "keypoint_head", "=", "KeypointRCNNHeads", "(", "out_channels", ",", "keypoint_layers", ")", "\n", "\n", "", "if", "keypoint_predictor", "is", "None", ":", "\n", "            ", "keypoint_dim_reduced", "=", "512", "# == keypoint_layers[-1]", "\n", "keypoint_predictor", "=", "KeypointRCNNPredictor", "(", "keypoint_dim_reduced", ",", "num_keypoints", ")", "\n", "\n", "", "super", "(", "KeypointRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", ",", "num_classes", ",", "\n", "# transform parameters", "\n", "min_size", ",", "max_size", ",", "\n", "image_mean", ",", "image_std", ",", "\n", "# RPN-specific parameters", "\n", "rpn_anchor_generator", ",", "rpn_head", ",", "\n", "rpn_pre_nms_top_n_train", ",", "rpn_pre_nms_top_n_test", ",", "\n", "rpn_post_nms_top_n_train", ",", "rpn_post_nms_top_n_test", ",", "\n", "rpn_nms_thresh", ",", "\n", "rpn_fg_iou_thresh", ",", "rpn_bg_iou_thresh", ",", "\n", "rpn_batch_size_per_image", ",", "rpn_positive_fraction", ",", "\n", "# Box parameters", "\n", "box_roi_pool", ",", "box_head", ",", "box_predictor", ",", "\n", "box_score_thresh", ",", "box_nms_thresh", ",", "box_detections_per_img", ",", "\n", "box_fg_iou_thresh", ",", "box_bg_iou_thresh", ",", "\n", "box_batch_size_per_image", ",", "box_positive_fraction", ",", "\n", "bbox_reg_weights", ")", "\n", "\n", "self", ".", "roi_heads", ".", "keypoint_roi_pool", "=", "keypoint_roi_pool", "\n", "self", ".", "roi_heads", ".", "keypoint_head", "=", "keypoint_head", "\n", "self", ".", "roi_heads", ".", "keypoint_predictor", "=", "keypoint_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.keypoint_rcnn.KeypointRCNNHeads.__init__": [[219, 231], ["torch.nn.Sequential.__init__", "keypoint_rcnn.KeypointRCNNHeads.children", "d.append", "d.append", "isinstance", "torchvision.ops.misc.Conv2d", "torch.nn.ReLU", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "layers", ")", ":", "\n", "        ", "d", "=", "[", "]", "\n", "next_feature", "=", "in_channels", "\n", "for", "l", "in", "layers", ":", "\n", "            ", "d", ".", "append", "(", "misc_nn_ops", ".", "Conv2d", "(", "next_feature", ",", "l", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "d", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "next_feature", "=", "l", "\n", "", "super", "(", "KeypointRCNNHeads", ",", "self", ")", ".", "__init__", "(", "*", "d", ")", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "misc_nn_ops", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.keypoint_rcnn.KeypointRCNNPredictor.__init__": [[234, 251], ["torch.nn.Module.__init__", "torchvision.ops.misc.ConvTranspose2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_keypoints", ")", ":", "\n", "        ", "super", "(", "KeypointRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_features", "=", "in_channels", "\n", "deconv_kernel", "=", "4", "\n", "self", ".", "kps_score_lowres", "=", "misc_nn_ops", ".", "ConvTranspose2d", "(", "\n", "input_features", ",", "\n", "num_keypoints", ",", "\n", "deconv_kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "deconv_kernel", "//", "2", "-", "1", ",", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "self", ".", "kps_score_lowres", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "kps_score_lowres", ".", "bias", ",", "0", ")", "\n", "self", ".", "up_scale", "=", "2", "\n", "self", ".", "out_channels", "=", "num_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.keypoint_rcnn.KeypointRCNNPredictor.forward": [[252, 258], ["keypoint_rcnn.KeypointRCNNPredictor.kps_score_lowres", "torchvision.ops.misc.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "kps_score_lowres", "(", "x", ")", "\n", "x", "=", "misc_nn_ops", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "up_scale", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.keypoint_rcnn.keypointrcnn_resnet50_fpn": [[266, 318], ["backbone_utils.resnet_fpn_backbone", "keypoint_rcnn.KeypointRCNN", "utils.load_state_dict_from_url", "KeypointRCNN.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.backbone_utils.resnet_fpn_backbone"], ["def", "keypointrcnn_resnet50_fpn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "2", ",", "num_keypoints", "=", "17", ",", "\n", "pretrained_backbone", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Keypoint R-CNN model with a ResNet-50-FPN backbone.\n\n    The input to the model is expected to be a list of tensors, each of shape ``[C, H, W]``, one for each\n    image, and should be in ``0-1`` range. Different images can have different sizes.\n\n    The behavior of the model changes depending if it is in training or evaluation mode.\n\n    During training, the model expects both the input tensors, as well as a targets (list of dictionary),\n    containing:\n        - boxes (``FloatTensor[N, 4]``): the ground-truth boxes in ``[x1, y1, x2, y2]`` format, with values\n          between ``0`` and ``H`` and ``0`` and ``W``\n        - labels (``Int64Tensor[N]``): the class label for each ground-truth box\n        - keypoints (``FloatTensor[N, K, 3]``): the ``K`` keypoints location for each of the ``N`` instances, in the\n          format ``[x, y, visibility]``, where ``visibility=0`` means that the keypoint is not visible.\n\n    The model returns a ``Dict[Tensor]`` during training, containing the classification and regression\n    losses for both the RPN and the R-CNN, and the keypoint loss.\n\n    During inference, the model requires only the input tensors, and returns the post-processed\n    predictions as a ``List[Dict[Tensor]]``, one for each input image. The fields of the ``Dict`` are as\n    follows:\n        - boxes (``FloatTensor[N, 4]``): the predicted boxes in ``[x1, y1, x2, y2]`` format, with values between\n          ``0`` and ``H`` and ``0`` and ``W``\n        - labels (``Int64Tensor[N]``): the predicted labels for each image\n        - scores (``Tensor[N]``): the scores or each prediction\n        - keypoints (``FloatTensor[N, K, 3]``): the locations of the predicted keypoints, in ``[x, y, v]`` format.\n\n    Example::\n\n        >>> model = torchvision.models.detection.keypointrcnn_resnet50_fpn(pretrained=True)\n        >>> model.eval()\n        >>> x = [torch.rand(3, 300, 400), torch.rand(3, 500, 400)]\n        >>> predictions = model(x)\n\n    Arguments:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "# no need to download the backbone if pretrained is set", "\n", "        ", "pretrained_backbone", "=", "False", "\n", "", "backbone", "=", "resnet_fpn_backbone", "(", "'resnet50'", ",", "pretrained_backbone", ")", "\n", "model", "=", "KeypointRCNN", "(", "backbone", ",", "num_classes", ",", "num_keypoints", "=", "num_keypoints", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'keypointrcnn_resnet50_fpn_coco'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.__init__": [[408, 460], ["super().__init__", "_utils.Matcher", "_utils.BalancedPositiveNegativeSampler", "_utils.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "box_roi_pool", ",", "\n", "box_head", ",", "\n", "box_predictor", ",", "\n", "# Faster R-CNN training", "\n", "fg_iou_thresh", ",", "bg_iou_thresh", ",", "\n", "batch_size_per_image", ",", "positive_fraction", ",", "\n", "bbox_reg_weights", ",", "\n", "# Faster R-CNN inference", "\n", "score_thresh", ",", "\n", "nms_thresh", ",", "\n", "detections_per_img", ",", "\n", "# Mask", "\n", "mask_roi_pool", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "mask_predictor", "=", "None", ",", "\n", "keypoint_roi_pool", "=", "None", ",", "\n", "keypoint_head", "=", "None", ",", "\n", "keypoint_predictor", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RoIHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "box_similarity", "=", "box_ops", ".", "box_iou", "\n", "# assign ground-truth boxes for each proposal", "\n", "self", ".", "proposal_matcher", "=", "det_utils", ".", "Matcher", "(", "\n", "fg_iou_thresh", ",", "\n", "bg_iou_thresh", ",", "\n", "allow_low_quality_matches", "=", "False", ")", "\n", "\n", "self", ".", "fg_bg_sampler", "=", "det_utils", ".", "BalancedPositiveNegativeSampler", "(", "\n", "batch_size_per_image", ",", "\n", "positive_fraction", ")", "\n", "\n", "if", "bbox_reg_weights", "is", "None", ":", "\n", "            ", "bbox_reg_weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", "\n", "", "self", ".", "box_coder", "=", "det_utils", ".", "BoxCoder", "(", "bbox_reg_weights", ")", "\n", "\n", "self", ".", "box_roi_pool", "=", "box_roi_pool", "\n", "self", ".", "box_head", "=", "box_head", "\n", "self", ".", "box_predictor", "=", "box_predictor", "\n", "\n", "self", ".", "score_thresh", "=", "score_thresh", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "detections_per_img", "=", "detections_per_img", "\n", "\n", "self", ".", "mask_roi_pool", "=", "mask_roi_pool", "\n", "self", ".", "mask_head", "=", "mask_head", "\n", "self", ".", "mask_predictor", "=", "mask_predictor", "\n", "\n", "self", ".", "keypoint_roi_pool", "=", "keypoint_roi_pool", "\n", "self", ".", "keypoint_head", "=", "keypoint_head", "\n", "self", ".", "keypoint_predictor", "=", "keypoint_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.has_mask": [[461, 470], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_mask", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mask_roi_pool", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "mask_head", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "mask_predictor", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.has_keypoint": [[471, 480], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_keypoint", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "keypoint_roi_pool", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "keypoint_head", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "keypoint_predictor", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.assign_targets_to_proposals": [[481, 504], ["zip", "roi_heads.RoIHeads.box_similarity", "roi_heads.RoIHeads.proposal_matcher", "roi_heads.RoIHeads.clamp", "labels_in_image.to.to.to", "matched_idxs.append", "labels.append"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "assign_targets_to_proposals", "(", "self", ",", "proposals", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "        ", "matched_idxs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "proposals_in_image", ",", "gt_boxes_in_image", ",", "gt_labels_in_image", "in", "zip", "(", "proposals", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "            ", "match_quality_matrix", "=", "self", ".", "box_similarity", "(", "gt_boxes_in_image", ",", "proposals_in_image", ")", "\n", "matched_idxs_in_image", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "\n", "clamped_matched_idxs_in_image", "=", "matched_idxs_in_image", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "labels_in_image", "=", "gt_labels_in_image", "[", "clamped_matched_idxs_in_image", "]", "\n", "labels_in_image", "=", "labels_in_image", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "# Label background (below the low threshold)", "\n", "bg_inds", "=", "matched_idxs_in_image", "==", "self", ".", "proposal_matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_in_image", "[", "bg_inds", "]", "=", "0", "\n", "\n", "# Label ignore proposals (between low and high thresholds)", "\n", "ignore_inds", "=", "matched_idxs_in_image", "==", "self", ".", "proposal_matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_in_image", "[", "ignore_inds", "]", "=", "-", "1", "# -1 is ignored by sampler", "\n", "\n", "matched_idxs", ".", "append", "(", "clamped_matched_idxs_in_image", ")", "\n", "labels", ".", "append", "(", "labels_in_image", ")", "\n", "", "return", "matched_idxs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.subsample": [[505, 514], ["roi_heads.RoIHeads.fg_bg_sampler", "enumerate", "zip", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "sampled_inds.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "subsample", "(", "self", ",", "labels", ")", ":", "\n", "        ", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "img_idx", ",", "(", "pos_inds_img", ",", "neg_inds_img", ")", "in", "enumerate", "(", "\n", "zip", "(", "sampled_pos_inds", ",", "sampled_neg_inds", ")", "\n", ")", ":", "\n", "            ", "img_sampled_inds", "=", "torch", ".", "nonzero", "(", "pos_inds_img", "|", "neg_inds_img", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_inds", ".", "append", "(", "img_sampled_inds", ")", "\n", "", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.add_gt_proposals": [[515, 522], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip"], "methods", ["None"], ["", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "gt_boxes", ")", ":", "\n", "        ", "proposals", "=", "[", "\n", "torch", ".", "cat", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.check_targets": [[523, 529], ["all", "all", "all"], "methods", ["None"], ["", "def", "check_targets", "(", "self", ",", "targets", ")", ":", "\n", "        ", "assert", "targets", "is", "not", "None", "\n", "assert", "all", "(", "\"boxes\"", "in", "t", "for", "t", "in", "targets", ")", "\n", "assert", "all", "(", "\"labels\"", "in", "t", "for", "t", "in", "targets", ")", "\n", "if", "self", ".", "has_mask", ":", "\n", "            ", "assert", "all", "(", "\"masks\"", "in", "t", "for", "t", "in", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.select_training_samples": [[530, 554], ["roi_heads.RoIHeads.check_targets", "roi_heads.RoIHeads.add_gt_proposals", "roi_heads.RoIHeads.assign_targets_to_proposals", "roi_heads.RoIHeads.subsample", "len", "range", "roi_heads.RoIHeads.box_coder.encode", "t[].to", "matched_gt_boxes.append"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.check_targets", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.add_gt_proposals", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.assign_targets_to_proposals", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.subsample", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.encode", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "select_training_samples", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "self", ".", "check_targets", "(", "targets", ")", "\n", "dtype", "=", "proposals", "[", "0", "]", ".", "dtype", "\n", "gt_boxes", "=", "[", "t", "[", "\"boxes\"", "]", ".", "to", "(", "dtype", ")", "for", "t", "in", "targets", "]", "\n", "gt_labels", "=", "[", "t", "[", "\"labels\"", "]", "for", "t", "in", "targets", "]", "\n", "\n", "# append ground-truth bboxes to propos", "\n", "proposals", "=", "self", ".", "add_gt_proposals", "(", "proposals", ",", "gt_boxes", ")", "\n", "\n", "# get matching gt indices for each proposal", "\n", "matched_idxs", ",", "labels", "=", "self", ".", "assign_targets_to_proposals", "(", "proposals", ",", "gt_boxes", ",", "gt_labels", ")", "\n", "# sample a fixed proportion of positive-negative proposals", "\n", "sampled_inds", "=", "self", ".", "subsample", "(", "labels", ")", "\n", "matched_gt_boxes", "=", "[", "]", "\n", "num_images", "=", "len", "(", "proposals", ")", "\n", "for", "img_id", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "img_sampled_inds", "=", "sampled_inds", "[", "img_id", "]", "\n", "proposals", "[", "img_id", "]", "=", "proposals", "[", "img_id", "]", "[", "img_sampled_inds", "]", "\n", "labels", "[", "img_id", "]", "=", "labels", "[", "img_id", "]", "[", "img_sampled_inds", "]", "\n", "matched_idxs", "[", "img_id", "]", "=", "matched_idxs", "[", "img_id", "]", "[", "img_sampled_inds", "]", "\n", "matched_gt_boxes", ".", "append", "(", "gt_boxes", "[", "img_id", "]", "[", "matched_idxs", "[", "img_id", "]", "]", ")", "\n", "\n", "", "regression_targets", "=", "self", ".", "box_coder", ".", "encode", "(", "matched_gt_boxes", ",", "proposals", ")", "\n", "return", "proposals", ",", "matched_idxs", ",", "labels", ",", "regression_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.postprocess_detections": [[555, 612], ["roi_heads.RoIHeads.box_coder.decode", "torch.softmax", "torch.softmax", "zip", "len", "len", "pred_boxes.split.split.split", "pred_scores.split.split.split", "torchvision.ops.boxes.clip_boxes_to_image", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "labels.reshape.reshape.view().expand_as", "boxes.reshape.reshape.reshape", "scores.reshape.reshape.reshape", "labels.reshape.reshape.reshape", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torchvision.ops.boxes.remove_small_boxes", "torchvision.ops.boxes.batched_nms", "all_boxes.append", "all_scores.append", "all_labels.append", "labels.reshape.reshape.view", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection._utils.BoxCoder.decode"], ["", "def", "postprocess_detections", "(", "self", ",", "class_logits", ",", "box_regression", ",", "proposals", ",", "image_shapes", ")", ":", "\n", "        ", "device", "=", "class_logits", ".", "device", "\n", "num_classes", "=", "class_logits", ".", "shape", "[", "-", "1", "]", "\n", "\n", "boxes_per_image", "=", "[", "len", "(", "boxes_in_image", ")", "for", "boxes_in_image", "in", "proposals", "]", "\n", "pred_boxes", "=", "self", ".", "box_coder", ".", "decode", "(", "box_regression", ",", "proposals", ")", "\n", "\n", "pred_scores", "=", "F", ".", "softmax", "(", "class_logits", ",", "-", "1", ")", "\n", "\n", "# split boxes and scores per image", "\n", "if", "len", "(", "boxes_per_image", ")", "==", "1", ":", "\n", "# TODO : remove this when ONNX support dynamic split sizes", "\n", "            ", "pred_boxes", "=", "(", "pred_boxes", ",", ")", "\n", "pred_scores", "=", "(", "pred_scores", ",", ")", "\n", "", "else", ":", "\n", "            ", "pred_boxes", "=", "pred_boxes", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "pred_scores", "=", "pred_scores", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "\n", "", "all_boxes", "=", "[", "]", "\n", "all_scores", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "boxes", ",", "scores", ",", "image_shape", "in", "zip", "(", "pred_boxes", ",", "pred_scores", ",", "image_shapes", ")", ":", "\n", "            ", "boxes", "=", "box_ops", ".", "clip_boxes_to_image", "(", "boxes", ",", "image_shape", ")", "\n", "\n", "# create labels for each prediction", "\n", "labels", "=", "torch", ".", "arange", "(", "num_classes", ",", "device", "=", "device", ")", "\n", "labels", "=", "labels", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "scores", ")", "\n", "\n", "# remove predictions with the background label", "\n", "boxes", "=", "boxes", "[", ":", ",", "1", ":", "]", "\n", "scores", "=", "scores", "[", ":", ",", "1", ":", "]", "\n", "labels", "=", "labels", "[", ":", ",", "1", ":", "]", "\n", "\n", "# batch everything, by making every class prediction be a separate instance", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# remove low scoring boxes", "\n", "inds", "=", "torch", ".", "nonzero", "(", "scores", ">", "self", ".", "score_thresh", ")", ".", "squeeze", "(", "1", ")", "\n", "boxes", ",", "scores", ",", "labels", "=", "boxes", "[", "inds", "]", ",", "scores", "[", "inds", "]", ",", "labels", "[", "inds", "]", "\n", "\n", "# remove empty boxes", "\n", "keep", "=", "box_ops", ".", "remove_small_boxes", "(", "boxes", ",", "min_size", "=", "1e-2", ")", "\n", "boxes", ",", "scores", ",", "labels", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "labels", "[", "keep", "]", "\n", "\n", "# non-maximum suppression, independently done per class", "\n", "keep", "=", "box_ops", ".", "batched_nms", "(", "boxes", ",", "scores", ",", "labels", ",", "self", ".", "nms_thresh", ")", "\n", "# keep only topk scoring predictions", "\n", "keep", "=", "keep", "[", ":", "self", ".", "detections_per_img", "]", "\n", "boxes", ",", "scores", ",", "labels", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "labels", "[", "keep", "]", "\n", "\n", "all_boxes", ".", "append", "(", "boxes", ")", "\n", "all_scores", ".", "append", "(", "scores", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "return", "all_boxes", ",", "all_scores", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.forward": [[613, 716], ["roi_heads.RoIHeads.box_roi_pool", "roi_heads.RoIHeads.box_head", "roi_heads.RoIHeads.box_predictor", "roi_heads.RoIHeads.select_training_samples", "roi_heads.fastrcnn_loss", "dict", "roi_heads.RoIHeads.postprocess_detections", "len", "range", "roi_heads.RoIHeads.mask_roi_pool", "roi_heads.RoIHeads.mask_head", "roi_heads.RoIHeads.mask_predictor", "dict.update", "roi_heads.RoIHeads.keypoint_roi_pool", "roi_heads.RoIHeads.keypoint_head", "roi_heads.RoIHeads.keypoint_predictor", "dict.update", "result.append", "len", "range", "roi_heads.maskrcnn_loss", "dict", "roi_heads.maskrcnn_inference", "zip", "len", "range", "roi_heads.keypointrcnn_loss", "dict", "roi_heads.keypointrcnn_inference", "zip", "dict", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "mask_proposals.append", "pos_matched_idxs.append", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "keypoint_proposals.append", "pos_matched_idxs.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.select_training_samples", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.fastrcnn_loss", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.RoIHeads.postprocess_detections", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.maskrcnn_loss", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.maskrcnn_inference", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.keypointrcnn_loss", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.keypointrcnn_inference"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "image_shapes", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (List[Tensor])\n            proposals (List[Tensor[N, 4]])\n            image_shapes (List[Tuple[H, W]])\n            targets (List[Dict])\n        \"\"\"", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "for", "t", "in", "targets", ":", "\n", "                ", "assert", "t", "[", "\"boxes\"", "]", ".", "dtype", ".", "is_floating_point", ",", "'target boxes must of float type'", "\n", "assert", "t", "[", "\"labels\"", "]", ".", "dtype", "==", "torch", ".", "int64", ",", "'target labels must of int64 type'", "\n", "if", "self", ".", "has_keypoint", ":", "\n", "                    ", "assert", "t", "[", "\"keypoints\"", "]", ".", "dtype", "==", "torch", ".", "float32", ",", "'target keypoints must of float type'", "\n", "\n", "", "", "", "if", "self", ".", "training", ":", "\n", "            ", "proposals", ",", "matched_idxs", ",", "labels", ",", "regression_targets", "=", "self", ".", "select_training_samples", "(", "proposals", ",", "targets", ")", "\n", "\n", "", "box_features", "=", "self", ".", "box_roi_pool", "(", "features", ",", "proposals", ",", "image_shapes", ")", "\n", "box_features", "=", "self", ".", "box_head", "(", "box_features", ")", "\n", "class_logits", ",", "box_regression", "=", "self", ".", "box_predictor", "(", "box_features", ")", "\n", "\n", "result", ",", "losses", "=", "[", "]", ",", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss_classifier", ",", "loss_box_reg", "=", "fastrcnn_loss", "(", "\n", "class_logits", ",", "box_regression", ",", "labels", ",", "regression_targets", ")", "\n", "losses", "=", "dict", "(", "loss_classifier", "=", "loss_classifier", ",", "loss_box_reg", "=", "loss_box_reg", ")", "\n", "", "else", ":", "\n", "            ", "boxes", ",", "scores", ",", "labels", "=", "self", ".", "postprocess_detections", "(", "class_logits", ",", "box_regression", ",", "proposals", ",", "image_shapes", ")", "\n", "num_images", "=", "len", "(", "boxes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "result", ".", "append", "(", "\n", "dict", "(", "\n", "boxes", "=", "boxes", "[", "i", "]", ",", "\n", "labels", "=", "labels", "[", "i", "]", ",", "\n", "scores", "=", "scores", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "has_mask", ":", "\n", "            ", "mask_proposals", "=", "[", "p", "[", "\"boxes\"", "]", "for", "p", "in", "result", "]", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "                ", "num_images", "=", "len", "(", "proposals", ")", "\n", "mask_proposals", "=", "[", "]", "\n", "pos_matched_idxs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_images", ")", ":", "\n", "                    ", "pos", "=", "torch", ".", "nonzero", "(", "labels", "[", "img_id", "]", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "mask_proposals", ".", "append", "(", "proposals", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "pos_matched_idxs", ".", "append", "(", "matched_idxs", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "\n", "", "", "mask_features", "=", "self", ".", "mask_roi_pool", "(", "features", ",", "mask_proposals", ",", "image_shapes", ")", "\n", "mask_features", "=", "self", ".", "mask_head", "(", "mask_features", ")", "\n", "mask_logits", "=", "self", ".", "mask_predictor", "(", "mask_features", ")", "\n", "\n", "loss_mask", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "                ", "gt_masks", "=", "[", "t", "[", "\"masks\"", "]", "for", "t", "in", "targets", "]", "\n", "gt_labels", "=", "[", "t", "[", "\"labels\"", "]", "for", "t", "in", "targets", "]", "\n", "loss_mask", "=", "maskrcnn_loss", "(", "\n", "mask_logits", ",", "mask_proposals", ",", "\n", "gt_masks", ",", "gt_labels", ",", "pos_matched_idxs", ")", "\n", "loss_mask", "=", "dict", "(", "loss_mask", "=", "loss_mask", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "[", "r", "[", "\"labels\"", "]", "for", "r", "in", "result", "]", "\n", "masks_probs", "=", "maskrcnn_inference", "(", "mask_logits", ",", "labels", ")", "\n", "for", "mask_prob", ",", "r", "in", "zip", "(", "masks_probs", ",", "result", ")", ":", "\n", "                    ", "r", "[", "\"masks\"", "]", "=", "mask_prob", "\n", "\n", "", "", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "if", "self", ".", "has_keypoint", ":", "\n", "            ", "keypoint_proposals", "=", "[", "p", "[", "\"boxes\"", "]", "for", "p", "in", "result", "]", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "                ", "num_images", "=", "len", "(", "proposals", ")", "\n", "keypoint_proposals", "=", "[", "]", "\n", "pos_matched_idxs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_images", ")", ":", "\n", "                    ", "pos", "=", "torch", ".", "nonzero", "(", "labels", "[", "img_id", "]", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "keypoint_proposals", ".", "append", "(", "proposals", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "pos_matched_idxs", ".", "append", "(", "matched_idxs", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "\n", "", "", "keypoint_features", "=", "self", ".", "keypoint_roi_pool", "(", "features", ",", "keypoint_proposals", ",", "image_shapes", ")", "\n", "keypoint_features", "=", "self", ".", "keypoint_head", "(", "keypoint_features", ")", "\n", "keypoint_logits", "=", "self", ".", "keypoint_predictor", "(", "keypoint_features", ")", "\n", "\n", "loss_keypoint", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "                ", "gt_keypoints", "=", "[", "t", "[", "\"keypoints\"", "]", "for", "t", "in", "targets", "]", "\n", "loss_keypoint", "=", "keypointrcnn_loss", "(", "\n", "keypoint_logits", ",", "keypoint_proposals", ",", "\n", "gt_keypoints", ",", "pos_matched_idxs", ")", "\n", "loss_keypoint", "=", "dict", "(", "loss_keypoint", "=", "loss_keypoint", ")", "\n", "", "else", ":", "\n", "                ", "keypoints_probs", ",", "kp_scores", "=", "keypointrcnn_inference", "(", "keypoint_logits", ",", "keypoint_proposals", ")", "\n", "for", "keypoint_prob", ",", "kps", ",", "r", "in", "zip", "(", "keypoints_probs", ",", "kp_scores", ",", "result", ")", ":", "\n", "                    ", "r", "[", "\"keypoints\"", "]", "=", "keypoint_prob", "\n", "r", "[", "\"keypoints_scores\"", "]", "=", "kps", "\n", "\n", "", "", "losses", ".", "update", "(", "loss_keypoint", ")", "\n", "\n", "", "return", "result", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.fastrcnn_loss": [[14, 50], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "box_regression.reshape.reshape", "torch.smooth_l1_loss", "torch.cat.numel", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["def", "fastrcnn_loss", "(", "class_logits", ",", "box_regression", ",", "labels", ",", "regression_targets", ")", ":", "\n", "    ", "\"\"\"\n    Computes the loss for Faster R-CNN.\n\n    Arguments:\n        class_logits (Tensor)\n        box_regression (Tensor)\n        labels (list[BoxList])\n        regression_targets (Tensor)\n\n    Returns:\n        classification_loss (Tensor)\n        box_loss (Tensor)\n    \"\"\"", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "classification_loss", "=", "F", ".", "cross_entropy", "(", "class_logits", ",", "labels", ")", "\n", "\n", "# get indices that correspond to the regression targets for", "\n", "# the corresponding ground truth labels, to be used with", "\n", "# advanced indexing", "\n", "sampled_pos_inds_subset", "=", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "labels_pos", "=", "labels", "[", "sampled_pos_inds_subset", "]", "\n", "N", ",", "num_classes", "=", "class_logits", ".", "shape", "\n", "box_regression", "=", "box_regression", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "box_loss", "=", "F", ".", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds_subset", ",", "labels_pos", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds_subset", "]", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "box_loss", "=", "box_loss", "/", "labels", ".", "numel", "(", ")", "\n", "\n", "return", "classification_loss", ",", "box_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.maskrcnn_inference": [[52, 84], ["x.sigmoid", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "len", "len", "mask_prob.split.split"], "function", ["None"], ["", "def", "maskrcnn_inference", "(", "x", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    From the results of the CNN, post process the masks\n    by taking the mask corresponding to the class with max\n    probability (which are of fixed size and directly output\n    by the CNN) and return the masks in the mask field of the BoxList.\n\n    Arguments:\n        x (Tensor): the mask logits\n        labels (list[BoxList]): bounding boxes that are used as\n            reference, one for ech image\n\n    Returns:\n        results (list[BoxList]): one BoxList for each image, containing\n            the extra field mask\n    \"\"\"", "\n", "mask_prob", "=", "x", ".", "sigmoid", "(", ")", "\n", "\n", "# select masks coresponding to the predicted classes", "\n", "num_masks", "=", "x", ".", "shape", "[", "0", "]", "\n", "boxes_per_image", "=", "[", "len", "(", "l", ")", "for", "l", "in", "labels", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "index", "=", "torch", ".", "arange", "(", "num_masks", ",", "device", "=", "labels", ".", "device", ")", "\n", "mask_prob", "=", "mask_prob", "[", "index", ",", "labels", "]", "[", ":", ",", "None", "]", "\n", "\n", "if", "len", "(", "boxes_per_image", ")", "==", "1", ":", "\n", "# TODO : remove when dynamic split supported in ONNX", "\n", "        ", "mask_prob", "=", "(", "mask_prob", ",", ")", "\n", "", "else", ":", "\n", "        ", "mask_prob", "=", "mask_prob", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "mask_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.project_masks_on_boxes": [[86, 98], ["matched_idxs.to.to", "torch.cat", "torch.cat", "gt_masks[].to", "torchvision.ops.roi_align"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "project_masks_on_boxes", "(", "gt_masks", ",", "boxes", ",", "matched_idxs", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    Given segmentation masks and the bounding boxes corresponding\n    to the location of the masks in the image, this function\n    crops and resizes the masks in the position defined by the\n    boxes. This prepares the masks for them to be fed to the\n    loss computation as the targets.\n    \"\"\"", "\n", "matched_idxs", "=", "matched_idxs", ".", "to", "(", "boxes", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "matched_idxs", "[", ":", ",", "None", "]", ",", "boxes", "]", ",", "dim", "=", "1", ")", "\n", "gt_masks", "=", "gt_masks", "[", ":", ",", "None", "]", ".", "to", "(", "rois", ")", "\n", "return", "roi_align", "(", "gt_masks", ",", "rois", ",", "(", "M", ",", "M", ")", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.maskrcnn_loss": [[100, 130], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.binary_cross_entropy_with_logits", "roi_heads.project_masks_on_boxes", "torch.cat.numel", "zip", "zip", "mask_logits.sum", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.project_masks_on_boxes"], ["", "def", "maskrcnn_loss", "(", "mask_logits", ",", "proposals", ",", "gt_masks", ",", "gt_labels", ",", "mask_matched_idxs", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        proposals (list[BoxList])\n        mask_logits (Tensor)\n        targets (list[BoxList])\n\n    Return:\n        mask_loss (Tensor): scalar tensor containing the loss\n    \"\"\"", "\n", "\n", "discretization_size", "=", "mask_logits", ".", "shape", "[", "-", "1", "]", "\n", "labels", "=", "[", "l", "[", "idxs", "]", "for", "l", ",", "idxs", "in", "zip", "(", "gt_labels", ",", "mask_matched_idxs", ")", "]", "\n", "mask_targets", "=", "[", "\n", "project_masks_on_boxes", "(", "m", ",", "p", ",", "i", ",", "discretization_size", ")", "\n", "for", "m", ",", "p", ",", "i", "in", "zip", "(", "gt_masks", ",", "proposals", ",", "mask_matched_idxs", ")", "\n", "]", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "mask_targets", "=", "torch", ".", "cat", "(", "mask_targets", ",", "dim", "=", "0", ")", "\n", "\n", "# torch.mean (in binary_cross_entropy_with_logits) doesn't", "\n", "# accept empty tensors, so handle it separately", "\n", "if", "mask_targets", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "mask_logits", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "mask_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "mask_logits", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ",", "device", "=", "labels", ".", "device", ")", ",", "labels", "]", ",", "mask_targets", "\n", ")", "\n", "return", "mask_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.keypoints_to_heatmap": [[132, 165], ["x.floor().long.floor().long", "y.floor().long.floor().long", "x.floor().long.floor", "y.floor().long.floor"], "function", ["None"], ["", "def", "keypoints_to_heatmap", "(", "keypoints", ",", "rois", ",", "heatmap_size", ")", ":", "\n", "    ", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "scale_x", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", ")", "\n", "scale_y", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", ")", "\n", "\n", "offset_x", "=", "offset_x", "[", ":", ",", "None", "]", "\n", "offset_y", "=", "offset_y", "[", ":", ",", "None", "]", "\n", "scale_x", "=", "scale_x", "[", ":", ",", "None", "]", "\n", "scale_y", "=", "scale_y", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "keypoints", "[", "...", ",", "0", "]", "\n", "y", "=", "keypoints", "[", "...", ",", "1", "]", "\n", "\n", "x_boundary_inds", "=", "x", "==", "rois", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "y_boundary_inds", "=", "y", "==", "rois", "[", ":", ",", "3", "]", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "(", "x", "-", "offset_x", ")", "*", "scale_x", "\n", "x", "=", "x", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "y", "=", "(", "y", "-", "offset_y", ")", "*", "scale_y", "\n", "y", "=", "y", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "\n", "x", "[", "x_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "y", "[", "y_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "\n", "valid_loc", "=", "(", "x", ">=", "0", ")", "&", "(", "y", ">=", "0", ")", "&", "(", "x", "<", "heatmap_size", ")", "&", "(", "y", "<", "heatmap_size", ")", "\n", "vis", "=", "keypoints", "[", "...", ",", "2", "]", ">", "0", "\n", "valid", "=", "(", "valid_loc", "&", "vis", ")", ".", "long", "(", ")", "\n", "\n", "lin_ind", "=", "y", "*", "heatmap_size", "+", "x", "\n", "heatmaps", "=", "lin_ind", "*", "valid", "\n", "\n", "return", "heatmaps", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.heatmaps_to_keypoints": [[167, 212], ["widths.clamp.clamp", "heights.clamp.clamp", "widths.clamp.ceil", "heights.clamp.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "int", "int", "roi_map.reshape().argmax", "torch.zeros.permute", "len", "len", "widths_ceil[].item", "heights_ceil[].item", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "roi_map.reshape", "x_int.float", "y_int.float", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "heatmaps_to_keypoints", "(", "maps", ",", "rois", ")", ":", "\n", "    ", "\"\"\"Extract predicted keypoint locations from heatmaps. Output has shape\n    (#rois, 4, #keypoints) with the 4 rows corresponding to (x, y, logit, prob)\n    for each keypoint.\n    \"\"\"", "\n", "# This function converts a discrete image coordinate in a HEATMAP_SIZE x", "\n", "# HEATMAP_SIZE image to a continuous keypoint coordinate. We maintain", "\n", "# consistency with keypoints_to_heatmap_labels by using the conversion from", "\n", "# Heckbert 1990: c = d + 0.5, where d is a discrete coordinate and c is a", "\n", "# continuous coordinate.", "\n", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "\n", "widths", "=", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", "\n", "heights", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "\n", "widths", "=", "widths", ".", "clamp", "(", "min", "=", "1", ")", "\n", "heights", "=", "heights", ".", "clamp", "(", "min", "=", "1", ")", "\n", "widths_ceil", "=", "widths", ".", "ceil", "(", ")", "\n", "heights_ceil", "=", "heights", ".", "ceil", "(", ")", "\n", "\n", "num_keypoints", "=", "maps", ".", "shape", "[", "1", "]", "\n", "xy_preds", "=", "torch", ".", "zeros", "(", "(", "len", "(", "rois", ")", ",", "3", ",", "num_keypoints", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "maps", ".", "device", ")", "\n", "end_scores", "=", "torch", ".", "zeros", "(", "(", "len", "(", "rois", ")", ",", "num_keypoints", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "maps", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rois", ")", ")", ":", "\n", "        ", "roi_map_width", "=", "int", "(", "widths_ceil", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "roi_map_height", "=", "int", "(", "heights_ceil", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "width_correction", "=", "widths", "[", "i", "]", "/", "roi_map_width", "\n", "height_correction", "=", "heights", "[", "i", "]", "/", "roi_map_height", "\n", "roi_map", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "maps", "[", "i", "]", "[", "None", "]", ",", "size", "=", "(", "roi_map_height", ",", "roi_map_width", ")", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "# roi_map_probs = scores_to_probs(roi_map.copy())", "\n", "w", "=", "roi_map", ".", "shape", "[", "2", "]", "\n", "pos", "=", "roi_map", ".", "reshape", "(", "num_keypoints", ",", "-", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "x_int", "=", "pos", "%", "w", "\n", "y_int", "=", "(", "pos", "-", "x_int", ")", "//", "w", "\n", "# assert (roi_map_probs[k, y_int, x_int] ==", "\n", "#         roi_map_probs[k, :, :].max())", "\n", "x", "=", "(", "x_int", ".", "float", "(", ")", "+", "0.5", ")", "*", "width_correction", "\n", "y", "=", "(", "y_int", ".", "float", "(", ")", "+", "0.5", ")", "*", "height_correction", "\n", "xy_preds", "[", "i", ",", "0", ",", ":", "]", "=", "x", "+", "offset_x", "[", "i", "]", "\n", "xy_preds", "[", "i", ",", "1", ",", ":", "]", "=", "y", "+", "offset_y", "[", "i", "]", "\n", "xy_preds", "[", "i", ",", "2", ",", ":", "]", "=", "1", "\n", "end_scores", "[", "i", ",", ":", "]", "=", "roi_map", "[", "torch", ".", "arange", "(", "num_keypoints", ")", ",", "y_int", ",", "x_int", "]", "\n", "\n", "", "return", "xy_preds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "end_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.keypointrcnn_loss": [[214, 241], ["zip", "torch.cat", "torch.cat", "torch.cat().to", "torch.cat().to", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "keypoint_logits.view.view", "torch.cross_entropy", "roi_heads.keypoints_to_heatmap", "heatmaps.append", "torch.nonzero().squeeze.append", "heatmaps_per_image.view", "valid_per_image.view", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.cat.numel", "len", "keypoint_logits.view.sum"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.keypoints_to_heatmap"], ["", "def", "keypointrcnn_loss", "(", "keypoint_logits", ",", "proposals", ",", "gt_keypoints", ",", "keypoint_matched_idxs", ")", ":", "\n", "    ", "N", ",", "K", ",", "H", ",", "W", "=", "keypoint_logits", ".", "shape", "\n", "assert", "H", "==", "W", "\n", "discretization_size", "=", "H", "\n", "heatmaps", "=", "[", "]", "\n", "valid", "=", "[", "]", "\n", "for", "proposals_per_image", ",", "gt_kp_in_image", ",", "midx", "in", "zip", "(", "proposals", ",", "gt_keypoints", ",", "keypoint_matched_idxs", ")", ":", "\n", "        ", "kp", "=", "gt_kp_in_image", "[", "midx", "]", "\n", "heatmaps_per_image", ",", "valid_per_image", "=", "keypoints_to_heatmap", "(", "\n", "kp", ",", "proposals_per_image", ",", "discretization_size", "\n", ")", "\n", "heatmaps", ".", "append", "(", "heatmaps_per_image", ".", "view", "(", "-", "1", ")", ")", "\n", "valid", ".", "append", "(", "valid_per_image", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "keypoint_targets", "=", "torch", ".", "cat", "(", "heatmaps", ",", "dim", "=", "0", ")", "\n", "valid", "=", "torch", ".", "cat", "(", "valid", ",", "dim", "=", "0", ")", ".", "to", "(", "dtype", "=", "torch", ".", "uint8", ")", "\n", "valid", "=", "torch", ".", "nonzero", "(", "valid", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# torch.mean (in binary_cross_entropy_with_logits) does'nt", "\n", "# accept empty tensors, so handle it sepaartely", "\n", "if", "keypoint_targets", ".", "numel", "(", ")", "==", "0", "or", "len", "(", "valid", ")", "==", "0", ":", "\n", "        ", "return", "keypoint_logits", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "keypoint_logits", "=", "keypoint_logits", ".", "view", "(", "N", "*", "K", ",", "H", "*", "W", ")", "\n", "\n", "keypoint_loss", "=", "F", ".", "cross_entropy", "(", "keypoint_logits", "[", "valid", "]", ",", "keypoint_targets", "[", "valid", "]", ")", "\n", "return", "keypoint_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.keypointrcnn_inference": [[243, 256], ["x.split", "zip", "len", "roi_heads.heatmaps_to_keypoints", "kp_probs.append", "kp_scores.append"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.heatmaps_to_keypoints"], ["", "def", "keypointrcnn_inference", "(", "x", ",", "boxes", ")", ":", "\n", "    ", "kp_probs", "=", "[", "]", "\n", "kp_scores", "=", "[", "]", "\n", "\n", "boxes_per_image", "=", "[", "len", "(", "box", ")", "for", "box", "in", "boxes", "]", "\n", "x2", "=", "x", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "for", "xx", ",", "bb", "in", "zip", "(", "x2", ",", "boxes", ")", ":", "\n", "        ", "kp_prob", ",", "scores", "=", "heatmaps_to_keypoints", "(", "xx", ",", "bb", ")", "\n", "kp_probs", ".", "append", "(", "kp_prob", ")", "\n", "kp_scores", ".", "append", "(", "scores", ")", "\n", "\n", "", "return", "kp_probs", ",", "kp_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads._onnx_expand_boxes": [[258, 273], ["torch.stack", "torch.stack", "w_half.to", "h_half.to", "torchvision.ops.boxes"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "_onnx_expand_boxes", "(", "boxes", ",", "scale", ")", ":", "\n", "    ", "w_half", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "h_half", "=", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "x_c", "=", "(", "boxes", "[", ":", ",", "2", "]", "+", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "y_c", "=", "(", "boxes", "[", ":", ",", "3", "]", "+", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "\n", "w_half", "=", "w_half", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "*", "scale", "\n", "h_half", "=", "h_half", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "*", "scale", "\n", "\n", "boxes_exp0", "=", "x_c", "-", "w_half", "\n", "boxes_exp1", "=", "y_c", "-", "h_half", "\n", "boxes_exp2", "=", "x_c", "+", "w_half", "\n", "boxes_exp3", "=", "y_c", "+", "h_half", "\n", "boxes_exp", "=", "torch", ".", "stack", "(", "(", "boxes_exp0", ",", "boxes_exp1", ",", "boxes_exp2", ",", "boxes_exp3", ")", ",", "1", ")", "\n", "return", "boxes_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.expand_boxes": [[278, 295], ["torchvision._is_tracing", "torch.zeros_like", "torch.zeros_like", "roi_heads._onnx_expand_boxes", "torchvision.ops.boxes"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads._onnx_expand_boxes"], ["", "def", "expand_boxes", "(", "boxes", ",", "scale", ")", ":", "\n", "    ", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "        ", "return", "_onnx_expand_boxes", "(", "boxes", ",", "scale", ")", "\n", "", "w_half", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "h_half", "=", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "x_c", "=", "(", "boxes", "[", ":", ",", "2", "]", "+", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "y_c", "=", "(", "boxes", "[", ":", ",", "3", "]", "+", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "\n", "w_half", "*=", "scale", "\n", "h_half", "*=", "scale", "\n", "\n", "boxes_exp", "=", "torch", ".", "zeros_like", "(", "boxes", ")", "\n", "boxes_exp", "[", ":", ",", "0", "]", "=", "x_c", "-", "w_half", "\n", "boxes_exp", "[", ":", ",", "2", "]", "=", "x_c", "+", "w_half", "\n", "boxes_exp", "[", ":", ",", "1", "]", "=", "y_c", "-", "h_half", "\n", "boxes_exp", "[", ":", ",", "3", "]", "=", "y_c", "+", "h_half", "\n", "return", "boxes_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.expand_masks": [[297, 305], ["torchvision._is_tracing", "torch.nn.functional.pad", "torch.nn.functional.pad", "M.to", "float"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "expand_masks", "(", "mask", ",", "padding", ")", ":", "\n", "    ", "M", "=", "mask", ".", "shape", "[", "-", "1", "]", "\n", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "        ", "scale", "=", "(", "M", "+", "2", "*", "padding", ")", ".", "to", "(", "torch", ".", "float32", ")", "/", "M", ".", "to", "(", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "scale", "=", "float", "(", "M", "+", "2", "*", "padding", ")", "/", "M", "\n", "", "padded_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "mask", ",", "(", "padding", ",", ")", "*", "4", ")", "\n", "return", "padded_mask", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.paste_mask_in_image": [[307, 331], ["int", "int", "max", "max", "misc_nn_ops.interpolate.expand", "torchvision.ops.misc.interpolate", "torch.zeros", "torch.zeros", "max", "min", "max", "min"], "function", ["None"], ["", "def", "paste_mask_in_image", "(", "mask", ",", "box", ",", "im_h", ",", "im_w", ")", ":", "\n", "    ", "TO_REMOVE", "=", "1", "\n", "w", "=", "int", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "TO_REMOVE", ")", "\n", "h", "=", "int", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "TO_REMOVE", ")", "\n", "w", "=", "max", "(", "w", ",", "1", ")", "\n", "h", "=", "max", "(", "h", ",", "1", ")", "\n", "\n", "# Set shape to [batchxCxHxW]", "\n", "mask", "=", "mask", ".", "expand", "(", "(", "1", ",", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "# Resize mask", "\n", "mask", "=", "misc_nn_ops", ".", "interpolate", "(", "mask", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "mask", "=", "mask", "[", "0", "]", "[", "0", "]", "\n", "\n", "im_mask", "=", "torch", ".", "zeros", "(", "(", "im_h", ",", "im_w", ")", ",", "dtype", "=", "mask", ".", "dtype", ",", "device", "=", "mask", ".", "device", ")", "\n", "x_0", "=", "max", "(", "box", "[", "0", "]", ",", "0", ")", "\n", "x_1", "=", "min", "(", "box", "[", "2", "]", "+", "1", ",", "im_w", ")", "\n", "y_0", "=", "max", "(", "box", "[", "1", "]", ",", "0", ")", "\n", "y_1", "=", "min", "(", "box", "[", "3", "]", "+", "1", ",", "im_h", ")", "\n", "\n", "im_mask", "[", "y_0", ":", "y_1", ",", "x_0", ":", "x_1", "]", "=", "mask", "[", "\n", "(", "y_0", "-", "box", "[", "1", "]", ")", ":", "(", "y_1", "-", "box", "[", "1", "]", ")", ",", "(", "x_0", "-", "box", "[", "0", "]", ")", ":", "(", "x_1", "-", "box", "[", "0", "]", ")", "\n", "]", "\n", "return", "im_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads._onnx_paste_mask_in_image": [[333, 372], ["torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.interpolate.expand", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unpaded_im_mask.size", "unpaded_im_mask.size", "torch.cat", "torch.cat", "concat_0.size", "concat_0.size", "torch.cat", "torch.cat", "torch.nn.functional.interpolate.size", "torch.nn.functional.interpolate.size", "int", "int", "box[].unsqueeze", "im_w.unsqueeze", "box[].unsqueeze", "im_h.unsqueeze", "unpaded_im_mask.to", "box[].unsqueeze", "box[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "_onnx_paste_mask_in_image", "(", "mask", ",", "box", ",", "im_h", ",", "im_w", ")", ":", "\n", "    ", "one", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "zero", "=", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "w", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "one", ")", "\n", "h", "=", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "one", ")", "\n", "w", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "(", "w", ",", "one", ")", ")", ")", "\n", "h", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "(", "h", ",", "one", ")", ")", ")", "\n", "\n", "# Set shape to [batchxCxHxW]", "\n", "mask", "=", "mask", ".", "expand", "(", "(", "1", ",", "1", ",", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "# Resize mask", "\n", "mask", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "mask", ",", "size", "=", "(", "int", "(", "h", ")", ",", "int", "(", "w", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "mask", "=", "mask", "[", "0", "]", "[", "0", "]", "\n", "\n", "x_0", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "(", "box", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "zero", ")", ")", ")", "\n", "x_1", "=", "torch", ".", "min", "(", "torch", ".", "cat", "(", "(", "box", "[", "2", "]", ".", "unsqueeze", "(", "0", ")", "+", "one", ",", "im_w", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "y_0", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "(", "box", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "zero", ")", ")", ")", "\n", "y_1", "=", "torch", ".", "min", "(", "torch", ".", "cat", "(", "(", "box", "[", "3", "]", ".", "unsqueeze", "(", "0", ")", "+", "one", ",", "im_h", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "\n", "unpaded_im_mask", "=", "mask", "[", "(", "y_0", "-", "box", "[", "1", "]", ")", ":", "(", "y_1", "-", "box", "[", "1", "]", ")", ",", "\n", "(", "x_0", "-", "box", "[", "0", "]", ")", ":", "(", "x_1", "-", "box", "[", "0", "]", ")", "]", "\n", "\n", "# TODO : replace below with a dynamic padding when support is added in ONNX", "\n", "\n", "# pad y", "\n", "zeros_y0", "=", "torch", ".", "zeros", "(", "y_0", ",", "unpaded_im_mask", ".", "size", "(", "1", ")", ")", "\n", "zeros_y1", "=", "torch", ".", "zeros", "(", "im_h", "-", "y_1", ",", "unpaded_im_mask", ".", "size", "(", "1", ")", ")", "\n", "concat_0", "=", "torch", ".", "cat", "(", "(", "zeros_y0", ",", "\n", "unpaded_im_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "zeros_y1", ")", ",", "0", ")", "[", "0", ":", "im_h", ",", ":", "]", "\n", "# pad x", "\n", "zeros_x0", "=", "torch", ".", "zeros", "(", "concat_0", ".", "size", "(", "0", ")", ",", "x_0", ")", "\n", "zeros_x1", "=", "torch", ".", "zeros", "(", "concat_0", ".", "size", "(", "0", ")", ",", "im_w", "-", "x_1", ")", "\n", "im_mask", "=", "torch", ".", "cat", "(", "(", "zeros_x0", ",", "\n", "concat_0", ",", "\n", "zeros_x1", ")", ",", "1", ")", "[", ":", ",", ":", "im_w", "]", "\n", "return", "im_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads._onnx_paste_masks_in_image_loop": [[374, 382], ["torch.zeros", "torch.zeros", "range", "masks.size", "roi_heads._onnx_paste_mask_in_image", "mask_res.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torchvision.ops.boxes"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads._onnx_paste_mask_in_image"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_onnx_paste_masks_in_image_loop", "(", "masks", ",", "boxes", ",", "im_h", ",", "im_w", ")", ":", "\n", "    ", "res_append", "=", "torch", ".", "zeros", "(", "0", ",", "im_h", ",", "im_w", ")", "\n", "for", "i", "in", "range", "(", "masks", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "mask_res", "=", "_onnx_paste_mask_in_image", "(", "masks", "[", "i", "]", "[", "0", "]", ",", "boxes", "[", "i", "]", ",", "im_h", ",", "im_w", ")", "\n", "mask_res", "=", "mask_res", ".", "unsqueeze", "(", "0", ")", "\n", "res_append", "=", "torch", ".", "cat", "(", "(", "res_append", ",", "mask_res", ")", ")", "\n", "", "return", "res_append", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.paste_masks_in_image": [[384, 405], ["roi_heads.expand_masks", "expand_boxes().to", "torchvision._is_tracing", "boxes.tolist.tolist", "roi_heads.paste_mask_in_image", "len", "masks.new_empty", "roi_heads.expand_boxes", "roi_heads._onnx_paste_masks_in_image_loop", "zip", "torch.stack", "torch.stack", "torch.scalar_tensor", "torch.scalar_tensor", "torch.scalar_tensor", "torch.scalar_tensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.expand_masks", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.paste_mask_in_image", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.expand_boxes", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads._onnx_paste_masks_in_image_loop"], ["", "def", "paste_masks_in_image", "(", "masks", ",", "boxes", ",", "img_shape", ",", "padding", "=", "1", ")", ":", "\n", "    ", "masks", ",", "scale", "=", "expand_masks", "(", "masks", ",", "padding", "=", "padding", ")", "\n", "boxes", "=", "expand_boxes", "(", "boxes", ",", "scale", ")", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "# im_h, im_w = img_shape.tolist()", "\n", "im_h", ",", "im_w", "=", "img_shape", "\n", "\n", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "        ", "return", "_onnx_paste_masks_in_image_loop", "(", "masks", ",", "boxes", ",", "\n", "torch", ".", "scalar_tensor", "(", "im_h", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "torch", ".", "scalar_tensor", "(", "im_w", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "[", ":", ",", "None", "]", "\n", "\n", "", "boxes", "=", "boxes", ".", "tolist", "(", ")", "\n", "res", "=", "[", "\n", "paste_mask_in_image", "(", "m", "[", "0", "]", ",", "b", ",", "im_h", ",", "im_w", ")", "\n", "for", "m", ",", "b", "in", "zip", "(", "masks", ",", "boxes", ")", "\n", "]", "\n", "if", "len", "(", "res", ")", ">", "0", ":", "\n", "        ", "res", "=", "torch", ".", "stack", "(", "res", ",", "dim", "=", "0", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "        ", "res", "=", "masks", ".", "new_empty", "(", "(", "0", ",", "1", ",", "im_h", ",", "im_w", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.backbone_utils.BackboneWithFPN.__init__": [[31, 41], ["_utils.IntermediateLayerGetter", "torchvision.ops.feature_pyramid_network.FeaturePyramidNetwork", "torch.nn.Sequential.__init__", "collections.OrderedDict", "torchvision.ops.feature_pyramid_network.LastLevelMaxPool"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "return_layers", ",", "in_channels_list", ",", "out_channels", ")", ":", "\n", "        ", "body", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "\n", "fpn", "=", "FeaturePyramidNetwork", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "extra_blocks", "=", "LastLevelMaxPool", "(", ")", ",", "\n", ")", "\n", "super", "(", "BackboneWithFPN", ",", "self", ")", ".", "__init__", "(", "OrderedDict", "(", "\n", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.backbone_utils.resnet_fpn_backbone": [[43, 63], ["backbone.named_parameters", "backbone_utils.BackboneWithFPN", "parameter.requires_grad_"], "function", ["None"], ["", "", "def", "resnet_fpn_backbone", "(", "backbone_name", ",", "pretrained", ")", ":", "\n", "    ", "backbone", "=", "resnet", ".", "__dict__", "[", "backbone_name", "]", "(", "\n", "pretrained", "=", "pretrained", ",", "\n", "norm_layer", "=", "misc_nn_ops", ".", "FrozenBatchNorm2d", ")", "\n", "# freeze layers", "\n", "for", "name", ",", "parameter", "in", "backbone", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'layer2'", "not", "in", "name", "and", "'layer3'", "not", "in", "name", "and", "'layer4'", "not", "in", "name", ":", "\n", "            ", "parameter", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "return_layers", "=", "{", "'layer1'", ":", "0", ",", "'layer2'", ":", "1", ",", "'layer3'", ":", "2", ",", "'layer4'", ":", "3", "}", "\n", "\n", "in_channels_stage2", "=", "backbone", ".", "inplanes", "//", "8", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", "\n", "out_channels", "=", "256", "\n", "return", "BackboneWithFPN", "(", "backbone", ",", "return_layers", ",", "in_channels_list", ",", "out_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.mask_rcnn.MaskRCNN.__init__": [[151, 218], ["isinstance", "faster_rcnn.FasterRCNN.__init__", "torchvision.ops.MultiScaleRoIAlign", "mask_rcnn.MaskRCNNHeads", "mask_rcnn.MaskRCNNPredictor", "type", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "num_classes", "=", "None", ",", "\n", "# transform parameters", "\n", "min_size", "=", "800", ",", "max_size", "=", "1333", ",", "\n", "image_mean", "=", "None", ",", "image_std", "=", "None", ",", "\n", "# RPN parameters", "\n", "rpn_anchor_generator", "=", "None", ",", "rpn_head", "=", "None", ",", "\n", "rpn_pre_nms_top_n_train", "=", "2000", ",", "rpn_pre_nms_top_n_test", "=", "1000", ",", "\n", "rpn_post_nms_top_n_train", "=", "2000", ",", "rpn_post_nms_top_n_test", "=", "1000", ",", "\n", "rpn_nms_thresh", "=", "0.7", ",", "\n", "rpn_fg_iou_thresh", "=", "0.7", ",", "rpn_bg_iou_thresh", "=", "0.3", ",", "\n", "rpn_batch_size_per_image", "=", "256", ",", "rpn_positive_fraction", "=", "0.5", ",", "\n", "# Box parameters", "\n", "box_roi_pool", "=", "None", ",", "box_head", "=", "None", ",", "box_predictor", "=", "None", ",", "\n", "box_score_thresh", "=", "0.05", ",", "box_nms_thresh", "=", "0.5", ",", "box_detections_per_img", "=", "100", ",", "\n", "box_fg_iou_thresh", "=", "0.5", ",", "box_bg_iou_thresh", "=", "0.5", ",", "\n", "box_batch_size_per_image", "=", "512", ",", "box_positive_fraction", "=", "0.25", ",", "\n", "bbox_reg_weights", "=", "None", ",", "\n", "# Mask parameters", "\n", "mask_roi_pool", "=", "None", ",", "mask_head", "=", "None", ",", "mask_predictor", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "mask_roi_pool", ",", "(", "MultiScaleRoIAlign", ",", "type", "(", "None", ")", ")", ")", "\n", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "mask_predictor", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should be None when mask_predictor is specified\"", ")", "\n", "\n", "", "", "out_channels", "=", "backbone", ".", "out_channels", "\n", "\n", "if", "mask_roi_pool", "is", "None", ":", "\n", "            ", "mask_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "output_size", "=", "14", ",", "\n", "sampling_ratio", "=", "2", ")", "\n", "\n", "", "if", "mask_head", "is", "None", ":", "\n", "            ", "mask_layers", "=", "(", "256", ",", "256", ",", "256", ",", "256", ")", "\n", "mask_dilation", "=", "1", "\n", "mask_head", "=", "MaskRCNNHeads", "(", "out_channels", ",", "mask_layers", ",", "mask_dilation", ")", "\n", "\n", "", "if", "mask_predictor", "is", "None", ":", "\n", "            ", "mask_predictor_in_channels", "=", "256", "# == mask_layers[-1]", "\n", "mask_dim_reduced", "=", "256", "\n", "mask_predictor", "=", "MaskRCNNPredictor", "(", "mask_predictor_in_channels", ",", "\n", "mask_dim_reduced", ",", "num_classes", ")", "\n", "\n", "", "super", "(", "MaskRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", ",", "num_classes", ",", "\n", "# transform parameters", "\n", "min_size", ",", "max_size", ",", "\n", "image_mean", ",", "image_std", ",", "\n", "# RPN-specific parameters", "\n", "rpn_anchor_generator", ",", "rpn_head", ",", "\n", "rpn_pre_nms_top_n_train", ",", "rpn_pre_nms_top_n_test", ",", "\n", "rpn_post_nms_top_n_train", ",", "rpn_post_nms_top_n_test", ",", "\n", "rpn_nms_thresh", ",", "\n", "rpn_fg_iou_thresh", ",", "rpn_bg_iou_thresh", ",", "\n", "rpn_batch_size_per_image", ",", "rpn_positive_fraction", ",", "\n", "# Box parameters", "\n", "box_roi_pool", ",", "box_head", ",", "box_predictor", ",", "\n", "box_score_thresh", ",", "box_nms_thresh", ",", "box_detections_per_img", ",", "\n", "box_fg_iou_thresh", ",", "box_bg_iou_thresh", ",", "\n", "box_batch_size_per_image", ",", "box_positive_fraction", ",", "\n", "bbox_reg_weights", ")", "\n", "\n", "self", ".", "roi_heads", ".", "mask_roi_pool", "=", "mask_roi_pool", "\n", "self", ".", "roi_heads", ".", "mask_head", "=", "mask_head", "\n", "self", ".", "roi_heads", ".", "mask_predictor", "=", "mask_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.mask_rcnn.MaskRCNNHeads.__init__": [[221, 241], ["collections.OrderedDict", "enumerate", "torch.nn.Sequential.__init__", "mask_rcnn.MaskRCNNHeads.named_parameters", "torchvision.ops.misc.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "layers", ",", "dilation", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            num_classes (int): number of output classes\n            input_size (int): number of channels of the input once it's flattened\n            representation_size (int): size of the intermediate representation\n        \"\"\"", "\n", "d", "=", "OrderedDict", "(", ")", "\n", "next_feature", "=", "in_channels", "\n", "for", "layer_idx", ",", "layer_features", "in", "enumerate", "(", "layers", ",", "1", ")", ":", "\n", "            ", "d", "[", "\"mask_fcn{}\"", ".", "format", "(", "layer_idx", ")", "]", "=", "misc_nn_ops", ".", "Conv2d", "(", "\n", "next_feature", ",", "layer_features", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "d", "[", "\"relu{}\"", ".", "format", "(", "layer_idx", ")", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "next_feature", "=", "layer_features", "\n", "\n", "", "super", "(", "MaskRCNNHeads", ",", "self", ")", ".", "__init__", "(", "d", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "# elif \"bias\" in name:", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.mask_rcnn.MaskRCNNPredictor.__init__": [[246, 256], ["torch.nn.Sequential.__init__", "mask_rcnn.MaskRCNNPredictor.named_parameters", "collections.OrderedDict", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torchvision.ops.misc.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ReLU", "torchvision.ops.misc.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "dim_reduced", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "MaskRCNNPredictor", ",", "self", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv5_mask\"", ",", "misc_nn_ops", ".", "ConvTranspose2d", "(", "in_channels", ",", "dim_reduced", ",", "2", ",", "2", ",", "0", ")", ")", ",", "\n", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"mask_fcn_logits\"", ",", "misc_nn_ops", ".", "Conv2d", "(", "dim_reduced", ",", "num_classes", ",", "1", ",", "1", ",", "0", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "# elif \"bias\" in name:", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.mask_rcnn.maskrcnn_resnet50_fpn": [[266, 318], ["backbone_utils.resnet_fpn_backbone", "mask_rcnn.MaskRCNN", "utils.load_state_dict_from_url", "MaskRCNN.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.backbone_utils.resnet_fpn_backbone"], ["def", "maskrcnn_resnet50_fpn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "\n", "num_classes", "=", "91", ",", "pretrained_backbone", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Mask R-CNN model with a ResNet-50-FPN backbone.\n\n    The input to the model is expected to be a list of tensors, each of shape ``[C, H, W]``, one for each\n    image, and should be in ``0-1`` range. Different images can have different sizes.\n\n    The behavior of the model changes depending if it is in training or evaluation mode.\n\n    During training, the model expects both the input tensors, as well as a targets (list of dictionary),\n    containing:\n        - boxes (``FloatTensor[N, 4]``): the ground-truth boxes in ``[x1, y1, x2, y2]`` format, with values\n          between ``0`` and ``H`` and ``0`` and ``W``\n        - labels (``Int64Tensor[N]``): the class label for each ground-truth box\n        - masks (``UInt8Tensor[N, H, W]``): the segmentation binary masks for each instance\n\n    The model returns a ``Dict[Tensor]`` during training, containing the classification and regression\n    losses for both the RPN and the R-CNN, and the mask loss.\n\n    During inference, the model requires only the input tensors, and returns the post-processed\n    predictions as a ``List[Dict[Tensor]]``, one for each input image. The fields of the ``Dict`` are as\n    follows:\n        - boxes (``FloatTensor[N, 4]``): the predicted boxes in ``[x1, y1, x2, y2]`` format, with values between\n          ``0`` and ``H`` and ``0`` and ``W``\n        - labels (``Int64Tensor[N]``): the predicted labels for each image\n        - scores (``Tensor[N]``): the scores or each prediction\n        - masks (``UInt8Tensor[N, 1, H, W]``): the predicted masks for each instance, in ``0-1`` range. In order to\n          obtain the final segmentation masks, the soft masks can be thresholded, generally\n          with a value of 0.5 (``mask >= 0.5``)\n\n    Example::\n\n        >>> model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)\n        >>> model.eval()\n        >>> x = [torch.rand(3, 300, 400), torch.rand(3, 500, 400)]\n        >>> predictions = model(x)\n\n    Arguments:\n        pretrained (bool): If True, returns a model pre-trained on COCO train2017\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "# no need to download the backbone if pretrained is set", "\n", "        ", "pretrained_backbone", "=", "False", "\n", "", "backbone", "=", "resnet_fpn_backbone", "(", "'resnet50'", ",", "pretrained_backbone", ")", "\n", "model", "=", "MaskRCNN", "(", "backbone", ",", "num_classes", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'maskrcnn_resnet50_fpn_coco'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.__init__": [[24, 32], ["torch.nn.Module.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ",", "image_mean", ",", "image_std", ")", ":", "\n", "        ", "super", "(", "GeneralizedRCNNTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "min_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "min_size", "=", "(", "min_size", ",", ")", "\n", "", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "image_mean", "=", "image_mean", "\n", "self", ".", "image_std", "=", "image_std", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.forward": [[33, 51], ["range", "transform.GeneralizedRCNNTransform.batch_images", "image_list.ImageList.ImageList", "len", "transform.GeneralizedRCNNTransform.normalize", "transform.GeneralizedRCNNTransform.resize", "transform.GeneralizedRCNNTransform.dim", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.batch_images", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.normalize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.resize"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "images", "=", "[", "img", "for", "img", "in", "images", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "image", "=", "images", "[", "i", "]", "\n", "target", "=", "targets", "[", "i", "]", "if", "targets", "is", "not", "None", "else", "targets", "\n", "if", "image", ".", "dim", "(", ")", "!=", "3", ":", "\n", "                ", "raise", "ValueError", "(", "\"images is expected to be a list of 3d tensors \"", "\n", "\"of shape [C, H, W], got {}\"", ".", "format", "(", "image", ".", "shape", ")", ")", "\n", "", "image", "=", "self", ".", "normalize", "(", "image", ")", "\n", "image", ",", "target", "=", "self", ".", "resize", "(", "image", ",", "target", ")", "\n", "images", "[", "i", "]", "=", "image", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "[", "i", "]", "=", "target", "\n", "\n", "", "", "image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", "=", "self", ".", "batch_images", "(", "images", ")", "\n", "image_list", "=", "ImageList", "(", "images", ",", "image_sizes", ")", "\n", "return", "image_list", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.normalize": [[52, 57], ["torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "image", ")", ":", "\n", "        ", "dtype", ",", "device", "=", "image", ".", "dtype", ",", "image", ".", "device", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "image_mean", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "image_std", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "return", "(", "image", "-", "mean", "[", ":", ",", "None", ",", "None", "]", ")", "/", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.resize": [[58, 91], ["torch.tensor", "float", "float", "transform.resize_boxes", "torch.min", "torch.max", "random.choice", "torch.nn.functional.interpolate", "[].byte", "transform.resize_keypoints", "torchvision.ops.misc.interpolate", "mask[].float"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.resize_boxes", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.resize_keypoints"], ["", "def", "resize", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "im_shape", "=", "torch", ".", "tensor", "(", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "min_size", "=", "float", "(", "torch", ".", "min", "(", "im_shape", ")", ")", "\n", "max_size", "=", "float", "(", "torch", ".", "max", "(", "im_shape", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "size", "=", "random", ".", "choice", "(", "self", ".", "min_size", ")", "\n", "", "else", ":", "\n", "# FIXME assume for now that testing uses the largest scale", "\n", "            ", "size", "=", "self", ".", "min_size", "[", "-", "1", "]", "\n", "", "scale_factor", "=", "size", "/", "min_size", "\n", "if", "max_size", "*", "scale_factor", ">", "self", ".", "max_size", ":", "\n", "            ", "scale_factor", "=", "self", ".", "max_size", "/", "max_size", "\n", "", "image", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "image", "[", "None", "]", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", ",", "target", "\n", "\n", "", "bbox", "=", "target", "[", "\"boxes\"", "]", "\n", "bbox", "=", "resize_boxes", "(", "bbox", ",", "(", "h", ",", "w", ")", ",", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "bbox", "\n", "\n", "if", "\"masks\"", "in", "target", ":", "\n", "            ", "mask", "=", "target", "[", "\"masks\"", "]", "\n", "mask", "=", "misc_nn_ops", ".", "interpolate", "(", "mask", "[", "None", "]", ".", "float", "(", ")", ",", "scale_factor", "=", "scale_factor", ")", "[", "0", "]", ".", "byte", "(", ")", "\n", "target", "[", "\"masks\"", "]", "=", "mask", "\n", "\n", "", "if", "\"keypoints\"", "in", "target", ":", "\n", "            ", "keypoints", "=", "target", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "resize_keypoints", "(", "keypoints", ",", "(", "h", ",", "w", ")", ",", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "target", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform._onnx_batch_images": [[94, 114], ["range", "tuple", "torch.stack", "images[].dim", "torch.max().to", "tuple.append", "torch.nn.functional.pad", "padded_imgs.append", "torch.max", "torch.ceil", "torch.ceil", "zip", "torch.stack().to", "tuple", "max_size[].to", "max_size[].to", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "_onnx_batch_images", "(", "self", ",", "images", ",", "size_divisible", "=", "32", ")", ":", "\n", "        ", "max_size", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "images", "[", "0", "]", ".", "dim", "(", ")", ")", ":", "\n", "            ", "max_size_i", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "img", ".", "shape", "[", "i", "]", "for", "img", "in", "images", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "max_size", ".", "append", "(", "max_size_i", ")", "\n", "", "stride", "=", "size_divisible", "\n", "max_size", "[", "1", "]", "=", "(", "torch", ".", "ceil", "(", "(", "max_size", "[", "1", "]", ".", "to", "(", "torch", ".", "float32", ")", ")", "/", "stride", ")", "*", "stride", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "max_size", "[", "2", "]", "=", "(", "torch", ".", "ceil", "(", "(", "max_size", "[", "2", "]", ".", "to", "(", "torch", ".", "float32", ")", ")", "/", "stride", ")", "*", "stride", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "# work around for", "\n", "# pad_img[: img.shape[0], : img.shape[1], : img.shape[2]].copy_(img)", "\n", "# which is not yet supported in onnx", "\n", "padded_imgs", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "            ", "padding", "=", "[", "(", "s1", "-", "s2", ")", "for", "s1", ",", "s2", "in", "zip", "(", "max_size", ",", "tuple", "(", "img", ".", "shape", ")", ")", "]", "\n", "padded_img", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "img", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ",", "0", ",", "padding", "[", "0", "]", ")", ")", "\n", "padded_imgs", ".", "append", "(", "padded_img", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "padded_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.batch_images": [[115, 134], ["torchvision._is_tracing", "tuple", "list", "int", "int", "tuple", "images[].new().zero_", "zip", "transform.GeneralizedRCNNTransform._onnx_batch_images", "pad_img[].copy_", "max", "math.ceil", "math.ceil", "len", "images[].new", "zip", "float", "float"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform._onnx_batch_images"], ["", "def", "batch_images", "(", "self", ",", "images", ",", "size_divisible", "=", "32", ")", ":", "\n", "        ", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "# batch_images() does not export well to ONNX", "\n", "# call _onnx_batch_images() instead", "\n", "            ", "return", "self", ".", "_onnx_batch_images", "(", "images", ",", "size_divisible", ")", "\n", "\n", "", "max_size", "=", "tuple", "(", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "[", "img", ".", "shape", "for", "img", "in", "images", "]", ")", ")", "\n", "stride", "=", "size_divisible", "\n", "max_size", "=", "list", "(", "max_size", ")", "\n", "max_size", "[", "1", "]", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "max_size", "[", "1", "]", ")", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "[", "2", "]", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "max_size", "[", "2", "]", ")", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "batch_shape", "=", "(", "len", "(", "images", ")", ",", ")", "+", "max_size", "\n", "batched_imgs", "=", "images", "[", "0", "]", ".", "new", "(", "*", "batch_shape", ")", ".", "zero_", "(", ")", "\n", "for", "img", ",", "pad_img", "in", "zip", "(", "images", ",", "batched_imgs", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "\n", "", "return", "batched_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.GeneralizedRCNNTransform.postprocess": [[135, 151], ["enumerate", "zip", "transform.resize_boxes", "roi_heads.paste_masks_in_image", "transform.resize_keypoints"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.resize_boxes", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.roi_heads.paste_masks_in_image", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.resize_keypoints"], ["", "def", "postprocess", "(", "self", ",", "result", ",", "image_shapes", ",", "original_image_sizes", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "result", "\n", "", "for", "i", ",", "(", "pred", ",", "im_s", ",", "o_im_s", ")", "in", "enumerate", "(", "zip", "(", "result", ",", "image_shapes", ",", "original_image_sizes", ")", ")", ":", "\n", "            ", "boxes", "=", "pred", "[", "\"boxes\"", "]", "\n", "boxes", "=", "resize_boxes", "(", "boxes", ",", "im_s", ",", "o_im_s", ")", "\n", "result", "[", "i", "]", "[", "\"boxes\"", "]", "=", "boxes", "\n", "if", "\"masks\"", "in", "pred", ":", "\n", "                ", "masks", "=", "pred", "[", "\"masks\"", "]", "\n", "masks", "=", "paste_masks_in_image", "(", "masks", ",", "boxes", ",", "o_im_s", ")", "\n", "result", "[", "i", "]", "[", "\"masks\"", "]", "=", "masks", "\n", "", "if", "\"keypoints\"", "in", "pred", ":", "\n", "                ", "keypoints", "=", "pred", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "resize_keypoints", "(", "keypoints", ",", "im_s", ",", "o_im_s", ")", "\n", "result", "[", "i", "]", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.resize_keypoints": [[153, 160], ["tuple", "keypoints.clone", "float", "float", "zip"], "function", ["None"], ["", "", "def", "resize_keypoints", "(", "keypoints", ",", "original_size", ",", "new_size", ")", ":", "\n", "    ", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "new_size", ",", "original_size", ")", ")", "\n", "ratio_h", ",", "ratio_w", "=", "ratios", "\n", "resized_data", "=", "keypoints", ".", "clone", "(", ")", "\n", "resized_data", "[", "...", ",", "0", "]", "*=", "ratio_w", "\n", "resized_data", "[", "...", ",", "1", "]", "*=", "ratio_h", "\n", "return", "resized_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.transform.resize_boxes": [[162, 172], ["tuple", "boxes.unbind", "torch.stack", "float", "float", "zip"], "function", ["None"], ["", "def", "resize_boxes", "(", "boxes", ",", "original_size", ",", "new_size", ")", ":", "\n", "    ", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "new_size", ",", "original_size", ")", ")", "\n", "ratio_height", ",", "ratio_width", "=", "ratios", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "boxes", ".", "unbind", "(", "1", ")", "\n", "\n", "xmin", "=", "xmin", "*", "ratio_width", "\n", "xmax", "=", "xmax", "*", "ratio_width", "\n", "ymin", "=", "ymin", "*", "ratio_height", "\n", "ymax", "=", "ymax", "*", "ratio_height", "\n", "return", "torch", ".", "stack", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ",", "dim", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.BasicBlock.__init__": [[53, 70], ["torch.Module.__init__", "old_lowrank_resnet_jan15.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "old_lowrank_resnet_jan15.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.BasicBlock.forward": [[71, 136], ["logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.conv1", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.bn1", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.relu", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.conv2", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.bn2", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.relu", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "time.time", "time.time", "time.time", "time.time", "time.time", "logger.info", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "old_lowrank_resnet_jan15.BasicBlock.downsample", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "time.time", "time.time", "x.size", "x.size", "time.time", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "logger", ".", "info", "(", "\"@@@ Inside the Blk, x shape1: {}\"", ".", "format", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "conv1_start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "conv1_dur", "=", "time", ".", "time", "(", ")", "-", "conv1_start", "\n", "logger", ".", "info", "(", "\"@@@ Conv 1 Cost: {}\"", ".", "format", "(", "conv1_dur", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "bn1_start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "bn1_dur", "=", "time", ".", "time", "(", ")", "-", "bn1_start", "\n", "logger", ".", "info", "(", "\"@@@ BN 1 Cost: {}\"", ".", "format", "(", "bn1_dur", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "relu1_start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "relu1_dur", "=", "time", ".", "time", "(", ")", "-", "relu1_start", "\n", "logger", ".", "info", "(", "\"@@@ ReLU 1 Cost: {}\"", ".", "format", "(", "relu1_dur", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"@@@ Inside the Blk, x shape2: {}\"", ".", "format", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "conv2_start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "conv2_dur", "=", "time", ".", "time", "(", ")", "-", "conv2_start", "\n", "logger", ".", "info", "(", "\"@@@ Conv 2 Cost: {}\"", ".", "format", "(", "conv2_dur", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "bn2_start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "bn2_dur", "=", "time", ".", "time", "(", ")", "-", "bn2_start", "\n", "logger", ".", "info", "(", "\"@@@ BN 2 Cost: {}\"", ".", "format", "(", "bn2_dur", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"@@@ Inside the Blk, x shape downsample: {}\"", ".", "format", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "downsample_start", "=", "time", ".", "time", "(", ")", "\n", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "downsample_dur", "=", "time", ".", "time", "(", ")", "-", "downsample_start", "\n", "logger", ".", "info", "(", "\"@@@ Downsample Cost: {}\"", ".", "format", "(", "downsample_dur", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "res_start", "=", "time", ".", "time", "(", ")", "\n", "out", "+=", "identity", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "res_dur", "=", "time", ".", "time", "(", ")", "-", "res_start", "\n", "logger", ".", "info", "(", "\"@@@ Residual Cost: {}\"", ".", "format", "(", "res_dur", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "relu2_start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "relu2_dur", "=", "time", ".", "time", "(", ")", "-", "relu2_start", "\n", "logger", ".", "info", "(", "\"@@@ ReLU 2 Cost: {}\"", ".", "format", "(", "relu2_dur", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.__init__": [[162, 181], ["torch.Module.__init__", "old_lowrank_resnet_jan15.conv3x3", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "old_lowrank_resnet_jan15.conv3x3", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "ValueError", "NotImplementedError", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1_u", "=", "conv3x3", "(", "inplanes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "stride", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_u", "=", "conv3x3", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.forward": [[182, 201], ["old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.conv1_u", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.conv1_v", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.bn1", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.relu", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.conv2_u", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.conv2_v", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.bn2", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.relu", "old_lowrank_resnet_jan15.LowRankBasicBlockConv1x1.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1_u", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_u", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.Bottleneck.__init__": [[285, 301], ["torch.Module.__init__", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "old_lowrank_resnet_jan15.conv3x3", "norm_layer", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.Bottleneck.forward": [[302, 323], ["old_lowrank_resnet_jan15.Bottleneck.conv1", "old_lowrank_resnet_jan15.Bottleneck.bn1", "old_lowrank_resnet_jan15.Bottleneck.relu", "old_lowrank_resnet_jan15.Bottleneck.conv2", "old_lowrank_resnet_jan15.Bottleneck.bn2", "old_lowrank_resnet_jan15.Bottleneck.relu", "old_lowrank_resnet_jan15.Bottleneck.conv3", "old_lowrank_resnet_jan15.Bottleneck.bn3", "old_lowrank_resnet_jan15.Bottleneck.relu", "old_lowrank_resnet_jan15.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBottleneck.__init__": [[329, 351], ["torch.Module.__init__", "old_lowrank_resnet_jan15.conv1x1", "torch.Linear", "torch.Linear", "norm_layer", "old_lowrank_resnet_jan15.conv3x3", "torch.Linear", "torch.Linear", "norm_layer", "old_lowrank_resnet_jan15.conv1x1", "torch.Linear", "torch.Linear", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1_u", "=", "conv1x1", "(", "inplanes", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Linear", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv2_u", "=", "conv3x3", "(", "width", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Linear", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv3_u", "=", "conv1x1", "(", "width", ",", "int", "(", "planes", "*", "self", ".", "expansion", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv3_v", "=", "nn", ".", "Linear", "(", "int", "(", "planes", "*", "self", ".", "expansion", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBottleneck.forward": [[352, 382], ["old_lowrank_resnet_jan15.LowRankBottleneck.conv1_u", "old_lowrank_resnet_jan15.LowRankBottleneck._adjust_itermediate_shape", "old_lowrank_resnet_jan15.LowRankBottleneck.conv1_v", "old_lowrank_resnet_jan15.LowRankBottleneck.transpose().view", "old_lowrank_resnet_jan15.LowRankBottleneck.bn1", "old_lowrank_resnet_jan15.LowRankBottleneck.relu", "old_lowrank_resnet_jan15.LowRankBottleneck.conv2_u", "old_lowrank_resnet_jan15.LowRankBottleneck._adjust_itermediate_shape", "old_lowrank_resnet_jan15.LowRankBottleneck.conv2_v", "old_lowrank_resnet_jan15.LowRankBottleneck.transpose().view", "old_lowrank_resnet_jan15.LowRankBottleneck.bn2", "old_lowrank_resnet_jan15.LowRankBottleneck.relu", "old_lowrank_resnet_jan15.LowRankBottleneck.conv3_u", "old_lowrank_resnet_jan15.LowRankBottleneck._adjust_itermediate_shape", "old_lowrank_resnet_jan15.LowRankBottleneck.conv3_v", "old_lowrank_resnet_jan15.LowRankBottleneck.transpose().view", "old_lowrank_resnet_jan15.LowRankBottleneck.bn3", "old_lowrank_resnet_jan15.LowRankBottleneck.relu", "old_lowrank_resnet_jan15.LowRankBottleneck.downsample", "old_lowrank_resnet_jan15.LowRankBottleneck.transpose", "old_lowrank_resnet_jan15.LowRankBottleneck.size", "old_lowrank_resnet_jan15.LowRankBottleneck.transpose", "old_lowrank_resnet_jan15.LowRankBottleneck.size", "old_lowrank_resnet_jan15.LowRankBottleneck.transpose", "old_lowrank_resnet_jan15.LowRankBottleneck.size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1_u", "(", "x", ")", "\n", "adj_out", ",", "o_shape1", "=", "self", ".", "_adjust_itermediate_shape", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_v", "(", "adj_out", ")", "\n", "out", "=", "out", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "out", ".", "size", "(", ")", "[", "-", "1", "]", ",", "o_shape1", "[", "2", "]", ",", "o_shape1", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_u", "(", "out", ")", "\n", "adj_out", ",", "o_shape1", "=", "self", ".", "_adjust_itermediate_shape", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "adj_out", ")", "\n", "out", "=", "out", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "out", ".", "size", "(", ")", "[", "-", "1", "]", ",", "o_shape1", "[", "2", "]", ",", "o_shape1", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3_u", "(", "out", ")", "\n", "adj_out", ",", "o_shape1", "=", "self", ".", "_adjust_itermediate_shape", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_v", "(", "adj_out", ")", "\n", "out", "=", "out", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "out", ".", "size", "(", ")", "[", "-", "1", "]", ",", "o_shape1", "[", "2", "]", ",", "o_shape1", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBottleneck._adjust_itermediate_shape": [[383, 388], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], ["", "def", "_adjust_itermediate_shape", "(", "self", ",", "o", ")", ":", "\n", "        ", "o_shape1", "=", "o", ".", "size", "(", ")", "\n", "o1", "=", "o", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "o_shape1", "[", "1", "]", ",", "o_shape1", "[", "2", "]", "*", "o_shape1", "[", "3", "]", ")", "\n", "o2", "=", "o1", ".", "transpose", "(", "2", ",", "1", ")", "\n", "return", "o2", ",", "o_shape1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.__init__": [[394, 417], ["torch.Module.__init__", "old_lowrank_resnet_jan15.conv1x1", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "old_lowrank_resnet_jan15.conv3x3", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneckConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1_u", "=", "conv1x1", "(", "inplanes", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv2_u", "=", "conv3x3", "(", "width", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "\n", "#self.conv3_u = conv1x1(width, int(planes * self.expansion/(2*CONST_RANK_DENOMINATOR)))", "\n", "#self.conv3_v = conv1x1(int(planes * self.expansion/(2*CONST_RANK_DENOMINATOR)), planes * self.expansion)", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "int", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.forward": [[418, 443], ["old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.conv1_u", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.conv1_v", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.bn1", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.relu", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.conv2_u", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.conv2_v", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.bn2", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.relu", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.conv3", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.bn3", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.relu", "old_lowrank_resnet_jan15.LowRankBottleneckConv1x1.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1_u", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_u", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "#out = self.conv3_u(out)", "\n", "#out = self.conv3_v(out)", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankBottleneckConv1x1._adjust_itermediate_shape": [[505, 510], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], ["", "def", "_adjust_itermediate_shape", "(", "self", ",", "o", ")", ":", "\n", "        ", "o_shape1", "=", "o", ".", "size", "(", ")", "\n", "o1", "=", "o", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "o_shape1", "[", "1", "]", ",", "o_shape1", "[", "2", "]", "*", "o_shape1", "[", "3", "]", ")", "\n", "o2", "=", "o1", ".", "transpose", "(", "2", ",", "1", ")", "\n", "return", "o2", ",", "o_shape1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.ResNet.__init__": [[514, 564], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "old_lowrank_resnet_jan15.ResNet._make_layer", "old_lowrank_resnet_jan15.ResNet._make_layer", "old_lowrank_resnet_jan15.ResNet._make_layer", "old_lowrank_resnet_jan15.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "old_lowrank_resnet_jan15.ResNet.modules", "len", "ValueError", "isinstance", "old_lowrank_resnet_jan15.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.ResNet._make_layer": [[565, 588], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.ResNet._forward": [[589, 609], ["old_lowrank_resnet_jan15.ResNet.conv1", "old_lowrank_resnet_jan15.ResNet.bn1", "old_lowrank_resnet_jan15.ResNet.relu", "old_lowrank_resnet_jan15.ResNet.maxpool", "old_lowrank_resnet_jan15.ResNet.layer1", "old_lowrank_resnet_jan15.ResNet.layer2", "old_lowrank_resnet_jan15.ResNet.layer3", "old_lowrank_resnet_jan15.ResNet.layer4", "old_lowrank_resnet_jan15.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "old_lowrank_resnet_jan15.ResNet.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankResNet.__init__": [[700, 752], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "old_lowrank_resnet_jan15.LowRankResNet._make_layer", "old_lowrank_resnet_jan15.LowRankResNet._make_layer", "old_lowrank_resnet_jan15.LowRankResNet._make_layer", "old_lowrank_resnet_jan15.LowRankResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "old_lowrank_resnet_jan15.LowRankResNet.modules", "len", "ValueError", "int", "int", "isinstance", "old_lowrank_resnet_jan15.LowRankResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "self", ".", "fc_u", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "int", "(", "num_classes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "fc_v", "=", "nn", ".", "Linear", "(", "int", "(", "num_classes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankResNet._make_layer": [[753, 776], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankResNet._forward": [[777, 793], ["old_lowrank_resnet_jan15.LowRankResNet.conv1", "old_lowrank_resnet_jan15.LowRankResNet.bn1", "old_lowrank_resnet_jan15.LowRankResNet.relu", "old_lowrank_resnet_jan15.LowRankResNet.maxpool", "old_lowrank_resnet_jan15.LowRankResNet.layer1", "old_lowrank_resnet_jan15.LowRankResNet.layer2", "old_lowrank_resnet_jan15.LowRankResNet.layer3", "old_lowrank_resnet_jan15.LowRankResNet.layer4", "old_lowrank_resnet_jan15.LowRankResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "old_lowrank_resnet_jan15.LowRankResNet.fc_u", "old_lowrank_resnet_jan15.LowRankResNet.fc_v"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc_u", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_v", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankResNetConv1x1.__init__": [[800, 853], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "old_lowrank_resnet_jan15.LowRankResNetConv1x1._make_layer", "old_lowrank_resnet_jan15.LowRankResNetConv1x1._make_layer", "old_lowrank_resnet_jan15.LowRankResNetConv1x1._make_layer", "old_lowrank_resnet_jan15.LowRankResNetConv1x1._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.modules", "len", "ValueError", "isinstance", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankResNetConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "#self.fc_u = nn.Linear(512 * block.expansion, int(num_classes/CONST_RANK_DENOMINATOR))", "\n", "#self.fc_v = nn.Linear(int(num_classes/CONST_RANK_DENOMINATOR), num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankResNetConv1x1._make_layer": [[854, 877], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.LowRankResNetConv1x1._forward": [[878, 899], ["old_lowrank_resnet_jan15.LowRankResNetConv1x1.conv1", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.bn1", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.relu", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.maxpool", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.layer1", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.layer2", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.layer3", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.layer4", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "old_lowrank_resnet_jan15.LowRankResNetConv1x1.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "#x = self.fc_u(x)", "\n", "#x = self.fc_v(x)        ", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.BaselineResNet.__init__": [[955, 1005], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "old_lowrank_resnet_jan15.BaselineResNet._make_layer", "old_lowrank_resnet_jan15.BaselineResNet._make_layer", "old_lowrank_resnet_jan15.BaselineResNet._make_layer", "old_lowrank_resnet_jan15.BaselineResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "old_lowrank_resnet_jan15.BaselineResNet.modules", "len", "ValueError", "int", "int", "int", "int", "isinstance", "old_lowrank_resnet_jan15.BaselineResNet.modules", "int", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaselineResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "64", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.BaselineResNet._make_layer": [[1006, 1029], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "old_lowrank_resnet_jan15.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.BaselineResNet._forward": [[1030, 1046], ["old_lowrank_resnet_jan15.BaselineResNet.conv1", "old_lowrank_resnet_jan15.BaselineResNet.bn1", "old_lowrank_resnet_jan15.BaselineResNet.relu", "old_lowrank_resnet_jan15.BaselineResNet.maxpool", "old_lowrank_resnet_jan15.BaselineResNet.layer1", "old_lowrank_resnet_jan15.BaselineResNet.layer2", "old_lowrank_resnet_jan15.BaselineResNet.layer3", "old_lowrank_resnet_jan15.BaselineResNet.layer4", "old_lowrank_resnet_jan15.BaselineResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "old_lowrank_resnet_jan15.BaselineResNet.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.conv3x3": [[38, 42], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.conv1x1": [[44, 47], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15._resnet": [[1052, 1055], ["old_lowrank_resnet_jan15.ResNet"], "function", ["None"], ["", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15._baseline_resnet": [[1056, 1059], ["old_lowrank_resnet_jan15.BaselineResNet"], "function", ["None"], ["", "def", "_baseline_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "BaselineResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15._lowrank_resnet": [[1060, 1063], ["old_lowrank_resnet_jan15.LowRankResNet"], "function", ["None"], ["", "def", "_lowrank_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "LowRankResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15._lowrank_resnet_conv1x1": [[1064, 1067], ["old_lowrank_resnet_jan15.LowRankResNetConv1x1"], "function", ["None"], ["", "def", "_lowrank_resnet_conv1x1", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "LowRankResNetConv1x1", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnet18": [[1069, 1078], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.baseline_resnet18": [[1080, 1089], ["old_lowrank_resnet_jan15._baseline_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._baseline_resnet"], ["", "def", "baseline_resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_baseline_resnet", "(", "'baseline_resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.lowrank_resnet18_conv1x1": [[1091, 1100], ["old_lowrank_resnet_jan15._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], ["", "def", "lowrank_resnet18_conv1x1", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_lowrank_resnet_conv1x1", "(", "'lowrank_resnet18_conv1x1'", ",", "LowRankBasicBlockConv1x1", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnet34": [[1102, 1111], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnet50": [[1113, 1122], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.lowrank_resnet50": [[1124, 1133], ["old_lowrank_resnet_jan15._lowrank_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet"], ["", "def", "lowrank_resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_lowrank_resnet", "(", "'resnet50'", ",", "LowRankBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.lowrank_resnet50_conv1x1": [[1135, 1144], ["old_lowrank_resnet_jan15._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], ["", "def", "lowrank_resnet50_conv1x1", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_lowrank_resnet_conv1x1", "(", "'resnet50'", ",", "LowRankBottleneckConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnet101": [[1146, 1155], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnet152": [[1157, 1166], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnext50_32x4d": [[1168, 1179], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.resnext101_32x8d": [[1181, 1192], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.wide_resnet50_2": [[1194, 1208], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.wide_resnet101_2": [[1210, 1224], ["old_lowrank_resnet_jan15._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.old_lowrank_resnet_jan15.count_parameters": [[1226, 1228], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.BasicBlock.__init__": [[53, 70], ["torch.Module.__init__", "clean_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "clean_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.BasicBlock.forward": [[71, 88], ["clean_resnet.BasicBlock.conv1", "clean_resnet.BasicBlock.bn1", "clean_resnet.BasicBlock.relu", "clean_resnet.BasicBlock.conv2", "clean_resnet.BasicBlock.bn2", "clean_resnet.BasicBlock.relu", "clean_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBasicBlockConv1x1.__init__": [[94, 113], ["torch.Module.__init__", "clean_resnet.conv3x3", "clean_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "clean_resnet.conv3x3", "clean_resnet.conv1x1", "norm_layer", "ValueError", "NotImplementedError", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1_u", "=", "conv3x3", "(", "inplanes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "stride", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_u", "=", "conv3x3", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBasicBlockConv1x1.forward": [[114, 133], ["clean_resnet.LowRankBasicBlockConv1x1.conv1_u", "clean_resnet.LowRankBasicBlockConv1x1.conv1_v", "clean_resnet.LowRankBasicBlockConv1x1.bn1", "clean_resnet.LowRankBasicBlockConv1x1.relu", "clean_resnet.LowRankBasicBlockConv1x1.conv2_u", "clean_resnet.LowRankBasicBlockConv1x1.conv2_v", "clean_resnet.LowRankBasicBlockConv1x1.bn2", "clean_resnet.LowRankBasicBlockConv1x1.relu", "clean_resnet.LowRankBasicBlockConv1x1.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1_u", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_u", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.Bottleneck.__init__": [[139, 155], ["torch.Module.__init__", "clean_resnet.conv1x1", "norm_layer", "clean_resnet.conv3x3", "norm_layer", "clean_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.Bottleneck.forward": [[156, 177], ["clean_resnet.Bottleneck.conv1", "clean_resnet.Bottleneck.bn1", "clean_resnet.Bottleneck.relu", "clean_resnet.Bottleneck.conv2", "clean_resnet.Bottleneck.bn2", "clean_resnet.Bottleneck.relu", "clean_resnet.Bottleneck.conv3", "clean_resnet.Bottleneck.bn3", "clean_resnet.Bottleneck.relu", "clean_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneck.__init__": [[183, 205], ["torch.Module.__init__", "clean_resnet.conv1x1", "torch.Linear", "torch.Linear", "norm_layer", "clean_resnet.conv3x3", "torch.Linear", "torch.Linear", "norm_layer", "clean_resnet.conv1x1", "torch.Linear", "torch.Linear", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1_u", "=", "conv1x1", "(", "inplanes", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "nn", ".", "Linear", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv2_u", "=", "conv3x3", "(", "width", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "conv2_v", "=", "nn", ".", "Linear", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv3_u", "=", "conv1x1", "(", "width", ",", "int", "(", "planes", "*", "self", ".", "expansion", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv3_v", "=", "nn", ".", "Linear", "(", "int", "(", "planes", "*", "self", ".", "expansion", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneck.forward": [[206, 236], ["clean_resnet.LowRankBottleneck.conv1_u", "clean_resnet.LowRankBottleneck._adjust_itermediate_shape", "clean_resnet.LowRankBottleneck.conv1_v", "clean_resnet.LowRankBottleneck.transpose().view", "clean_resnet.LowRankBottleneck.bn1", "clean_resnet.LowRankBottleneck.relu", "clean_resnet.LowRankBottleneck.conv2_u", "clean_resnet.LowRankBottleneck._adjust_itermediate_shape", "clean_resnet.LowRankBottleneck.conv2_v", "clean_resnet.LowRankBottleneck.transpose().view", "clean_resnet.LowRankBottleneck.bn2", "clean_resnet.LowRankBottleneck.relu", "clean_resnet.LowRankBottleneck.conv3_u", "clean_resnet.LowRankBottleneck._adjust_itermediate_shape", "clean_resnet.LowRankBottleneck.conv3_v", "clean_resnet.LowRankBottleneck.transpose().view", "clean_resnet.LowRankBottleneck.bn3", "clean_resnet.LowRankBottleneck.relu", "clean_resnet.LowRankBottleneck.downsample", "clean_resnet.LowRankBottleneck.transpose", "clean_resnet.LowRankBottleneck.size", "clean_resnet.LowRankBottleneck.transpose", "clean_resnet.LowRankBottleneck.size", "clean_resnet.LowRankBottleneck.transpose", "clean_resnet.LowRankBottleneck.size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1_u", "(", "x", ")", "\n", "adj_out", ",", "o_shape1", "=", "self", ".", "_adjust_itermediate_shape", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_v", "(", "adj_out", ")", "\n", "out", "=", "out", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "out", ".", "size", "(", ")", "[", "-", "1", "]", ",", "o_shape1", "[", "2", "]", ",", "o_shape1", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_u", "(", "out", ")", "\n", "adj_out", ",", "o_shape1", "=", "self", ".", "_adjust_itermediate_shape", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "adj_out", ")", "\n", "out", "=", "out", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "out", ".", "size", "(", ")", "[", "-", "1", "]", ",", "o_shape1", "[", "2", "]", ",", "o_shape1", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3_u", "(", "out", ")", "\n", "adj_out", ",", "o_shape1", "=", "self", ".", "_adjust_itermediate_shape", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_v", "(", "adj_out", ")", "\n", "out", "=", "out", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "out", ".", "size", "(", ")", "[", "-", "1", "]", ",", "o_shape1", "[", "2", "]", ",", "o_shape1", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneck._adjust_itermediate_shape": [[237, 242], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], ["", "def", "_adjust_itermediate_shape", "(", "self", ",", "o", ")", ":", "\n", "        ", "o_shape1", "=", "o", ".", "size", "(", ")", "\n", "o1", "=", "o", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "o_shape1", "[", "1", "]", ",", "o_shape1", "[", "2", "]", "*", "o_shape1", "[", "3", "]", ")", "\n", "o2", "=", "o1", ".", "transpose", "(", "2", ",", "1", ")", "\n", "return", "o2", ",", "o_shape1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1.__init__": [[248, 270], ["torch.Module.__init__", "clean_resnet.conv1x1", "clean_resnet.conv1x1", "norm_layer", "clean_resnet.conv3x3", "clean_resnet.conv1x1", "norm_layer", "clean_resnet.conv1x1", "clean_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneckConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1_u", "=", "conv1x1", "(", "inplanes", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv2_u", "=", "conv3x3", "(", "width", ",", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "width", "/", "CONST_RANK_DENOMINATOR", ")", ",", "width", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "\n", "self", ".", "conv3_u", "=", "conv1x1", "(", "width", ",", "int", "(", "planes", "*", "self", ".", "expansion", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv3_v", "=", "conv1x1", "(", "int", "(", "planes", "*", "self", ".", "expansion", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1.forward": [[271, 295], ["clean_resnet.LowRankBottleneckConv1x1.conv1_u", "clean_resnet.LowRankBottleneckConv1x1.conv1_v", "clean_resnet.LowRankBottleneckConv1x1.bn1", "clean_resnet.LowRankBottleneckConv1x1.relu", "clean_resnet.LowRankBottleneckConv1x1.conv2_u", "clean_resnet.LowRankBottleneckConv1x1.conv2_v", "clean_resnet.LowRankBottleneckConv1x1.bn2", "clean_resnet.LowRankBottleneckConv1x1.relu", "clean_resnet.LowRankBottleneckConv1x1.conv3_u", "clean_resnet.LowRankBottleneckConv1x1.conv3_v", "clean_resnet.LowRankBottleneckConv1x1.bn3", "clean_resnet.LowRankBottleneckConv1x1.relu", "clean_resnet.LowRankBottleneckConv1x1.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1_u", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_u", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3_u", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_v", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankBottleneckConv1x1._adjust_itermediate_shape": [[296, 301], ["o.size", "o.view", "o.view.transpose"], "methods", ["None"], ["", "def", "_adjust_itermediate_shape", "(", "self", ",", "o", ")", ":", "\n", "        ", "o_shape1", "=", "o", ".", "size", "(", ")", "\n", "o1", "=", "o", ".", "view", "(", "o_shape1", "[", "0", "]", ",", "o_shape1", "[", "1", "]", ",", "o_shape1", "[", "2", "]", "*", "o_shape1", "[", "3", "]", ")", "\n", "o2", "=", "o1", ".", "transpose", "(", "2", ",", "1", ")", "\n", "return", "o2", ",", "o_shape1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.ResNet.__init__": [[305, 355], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "clean_resnet.ResNet._make_layer", "clean_resnet.ResNet._make_layer", "clean_resnet.ResNet._make_layer", "clean_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "clean_resnet.ResNet.modules", "len", "ValueError", "isinstance", "clean_resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.ResNet._make_layer": [[356, 379], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "clean_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.ResNet._forward": [[380, 436], ["clean_resnet.ResNet.conv1", "clean_resnet.ResNet.bn1", "clean_resnet.ResNet.relu", "clean_resnet.ResNet.maxpool", "clean_resnet.ResNet.layer1", "clean_resnet.ResNet.layer2", "clean_resnet.ResNet.layer3", "clean_resnet.ResNet.layer4", "clean_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "clean_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "#print(\"before block1 size: {}\".format(x.size()))", "\n", "#torch.cuda.synchronize()", "\n", "#block1_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block1_dur = time.time() - block1_start", "\n", "#print(\"before block2 size: {}\".format(x.size()))", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block2_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block2_dur = time.time() - block2_start", "\n", "#print(\"before block3 size: {}\".format(x.size()))", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block3_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block3_dur = time.time() - block3_start", "\n", "#print(\"before block4 size: {}\".format(x.size()))", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block4_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block4_dur = time.time() - block4_start", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#fc_start = time.time()", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#fc_dur = time.time() - fc_start          ", "\n", "\n", "#logger.info(\"Vanilla ResNet --- Bck1: {:.6f}, Bck2: {:.6f}, Bck3: {:.6f}, Bck4: {:.6f}, FC: {:.6f}\".format(", "\n", "#    block1_dur, block2_dur, block3_dur, block4_dur, fc_dur))", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankResNet.__init__": [[443, 495], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "clean_resnet.LowRankResNet._make_layer", "clean_resnet.LowRankResNet._make_layer", "clean_resnet.LowRankResNet._make_layer", "clean_resnet.LowRankResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "clean_resnet.LowRankResNet.modules", "len", "ValueError", "int", "int", "isinstance", "clean_resnet.LowRankResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "self", ".", "fc_u", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "int", "(", "num_classes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "fc_v", "=", "nn", ".", "Linear", "(", "int", "(", "num_classes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankResNet._make_layer": [[496, 519], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "clean_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankResNet._forward": [[520, 536], ["clean_resnet.LowRankResNet.conv1", "clean_resnet.LowRankResNet.bn1", "clean_resnet.LowRankResNet.relu", "clean_resnet.LowRankResNet.maxpool", "clean_resnet.LowRankResNet.layer1", "clean_resnet.LowRankResNet.layer2", "clean_resnet.LowRankResNet.layer3", "clean_resnet.LowRankResNet.layer4", "clean_resnet.LowRankResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "clean_resnet.LowRankResNet.fc_u", "clean_resnet.LowRankResNet.fc_v"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc_u", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_v", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankResNetConv1x1.__init__": [[543, 596], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "clean_resnet.LowRankResNetConv1x1._make_layer", "clean_resnet.LowRankResNetConv1x1._make_layer", "clean_resnet.LowRankResNetConv1x1._make_layer", "clean_resnet.LowRankResNetConv1x1._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "clean_resnet.LowRankResNetConv1x1.modules", "len", "ValueError", "isinstance", "clean_resnet.LowRankResNetConv1x1.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "LowRankResNetConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "#self.fc_u = nn.Linear(512 * block.expansion, int(num_classes/CONST_RANK_DENOMINATOR))", "\n", "#self.fc_v = nn.Linear(int(num_classes/CONST_RANK_DENOMINATOR), num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankResNetConv1x1._make_layer": [[597, 620], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "clean_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.LowRankResNetConv1x1._forward": [[621, 677], ["clean_resnet.LowRankResNetConv1x1.conv1", "clean_resnet.LowRankResNetConv1x1.bn1", "clean_resnet.LowRankResNetConv1x1.relu", "clean_resnet.LowRankResNetConv1x1.maxpool", "clean_resnet.LowRankResNetConv1x1.layer1", "clean_resnet.LowRankResNetConv1x1.layer2", "clean_resnet.LowRankResNetConv1x1.layer3", "clean_resnet.LowRankResNetConv1x1.layer4", "clean_resnet.LowRankResNetConv1x1.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "clean_resnet.LowRankResNetConv1x1.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block1_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block1_dur = time.time() - block1_start", "\n", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block2_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#lock2_dur = time.time() - block2_start", "\n", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block3_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block3_dur = time.time() - block3_start", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block4_start = time.time()", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#block4_dur = time.time() - block4_start", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#fc_start = time.time()", "\n", "\n", "#x = self.fc_u(x)", "\n", "#x = self.fc_v(x)", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#fc_dur = time.time() - fc_start        ", "\n", "\n", "#logger.info(\"Low rank ResNet --- Bck1: {:.6f}, Bck2: {:.6f}, Bck3: {:.6f}, Bck4: {:.6f}, FC: {:.6f}\".format(", "\n", "#    block1_dur, block2_dur, block3_dur, block4_dur, fc_dur))", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.BaselineResNet.__init__": [[684, 734], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "clean_resnet.BaselineResNet._make_layer", "clean_resnet.BaselineResNet._make_layer", "clean_resnet.BaselineResNet._make_layer", "clean_resnet.BaselineResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "clean_resnet.BaselineResNet.modules", "len", "ValueError", "int", "int", "int", "int", "isinstance", "clean_resnet.BaselineResNet.modules", "int", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaselineResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "64", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "int", "(", "512", "/", "CONST_RANK_DENOMINATOR", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.BaselineResNet._make_layer": [[735, 758], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "clean_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.BaselineResNet._forward": [[759, 775], ["clean_resnet.BaselineResNet.conv1", "clean_resnet.BaselineResNet.bn1", "clean_resnet.BaselineResNet.relu", "clean_resnet.BaselineResNet.maxpool", "clean_resnet.BaselineResNet.layer1", "clean_resnet.BaselineResNet.layer2", "clean_resnet.BaselineResNet.layer3", "clean_resnet.BaselineResNet.layer4", "clean_resnet.BaselineResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "clean_resnet.BaselineResNet.fc"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv3x3": [[38, 42], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.conv1x1": [[44, 47], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._resnet": [[781, 784], ["clean_resnet.ResNet"], "function", ["None"], ["", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._baseline_resnet": [[785, 788], ["clean_resnet.BaselineResNet"], "function", ["None"], ["", "def", "_baseline_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "BaselineResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet": [[789, 792], ["clean_resnet.LowRankResNet"], "function", ["None"], ["", "def", "_lowrank_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "LowRankResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1": [[793, 796], ["clean_resnet.LowRankResNetConv1x1"], "function", ["None"], ["", "def", "_lowrank_resnet_conv1x1", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "LowRankResNetConv1x1", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnet18": [[798, 807], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.baseline_resnet18": [[809, 818], ["clean_resnet._baseline_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._baseline_resnet"], ["", "def", "baseline_resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_baseline_resnet", "(", "'baseline_resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.lowrank_resnet18_conv1x1": [[820, 829], ["clean_resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], ["", "def", "lowrank_resnet18_conv1x1", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_lowrank_resnet_conv1x1", "(", "'lowrank_resnet18_conv1x1'", ",", "LowRankBasicBlockConv1x1", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnet34": [[831, 840], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnet50": [[842, 851], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.lowrank_resnet50": [[853, 862], ["clean_resnet._lowrank_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet"], ["", "def", "lowrank_resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_lowrank_resnet", "(", "'resnet50'", ",", "LowRankBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.lowrank_resnet50_conv1x1": [[864, 873], ["clean_resnet._lowrank_resnet_conv1x1"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet._lowrank_resnet_conv1x1"], ["", "def", "lowrank_resnet50_conv1x1", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_lowrank_resnet_conv1x1", "(", "'resnet50'", ",", "LowRankBottleneckConv1x1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnet101": [[875, 884], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnet152": [[886, 895], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnext50_32x4d": [[897, 908], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.resnext101_32x8d": [[910, 921], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.wide_resnet50_2": [[923, 937], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup_model.clean_resnet.wide_resnet101_2": [[939, 953], ["clean_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv3DSimple.__init__": [[17, 31], ["torch.Conv3d.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv3DSimple.get_downsample_stride": [[32, 35], ["None"], "methods", ["None"], ["if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv2Plus1D.__init__": [[39, 54], ["torch.Sequential.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv2Plus1D.get_downsample_stride": [[55, 58], ["None"], "methods", ["None"], ["self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv3DNoTemporal.__init__": [[62, 76], ["torch.Conv3d.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowrankBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv3DNoTemporal.get_downsample_stride": [[77, 80], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowrankBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.BasicBlock.__init__": [[87, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "conv_builder", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "conv_builder", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.BasicBlock.forward": [[104, 116], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlock1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Bottleneck.__init__": [[121, 147], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "conv_builder", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(self.expansion*planes)", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlock2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Bottleneck.forward": [[148, 162], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.BasicStem.__init__": [[167, 173], ["torch.Sequential.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1_v", "(", "self", ".", "conv1_v", "(", "self", ".", "bn1_u", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2_v", "(", "self", ".", "conv2_v", "(", "self", ".", "bn2_u", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.R2Plus1dStem.__init__": [[178, 190], ["torch.Sequential.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet.__init__": [[194, 227], ["torch.Module.__init__", "stem", "resnet.VideoResNet._make_layer", "resnet.VideoResNet._make_layer", "resnet.VideoResNet._make_layer", "resnet.VideoResNet._make_layer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "resnet.VideoResNet._initialize_weights", "resnet.VideoResNet.modules", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights"], ["nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlockConcat", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockConcat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_first", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_second", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "*", "3", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_first", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_second", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "*", "3", "/", "4", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet.forward": [[228, 242], ["resnet.VideoResNet.stem", "resnet.VideoResNet.layer1", "resnet.VideoResNet.layer2", "resnet.VideoResNet.layer3", "resnet.VideoResNet.layer4", "resnet.VideoResNet.avgpool", "resnet.VideoResNet.flatten", "resnet.VideoResNet.fc"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "torch", ".", "cat", "(", "(", "self", ".", "conv1_first", "(", "x", ")", ",", "self", ".", "conv1_second", "(", "x", ")", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "torch", ".", "cat", "(", "(", "self", ".", "conv2_first", "(", "out", ")", ",", "self", ".", "conv2_second", "(", "out", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlock4", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._make_layer": [[243, 261], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "conv_builder.get_downsample_stride", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "block"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.Conv3DNoTemporal.get_downsample_stride"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.VideoResNet._initialize_weights": [[262, 275], ["resnet.VideoResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "\n", "", "", "class", "BaselineBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet._video_resnet": [[277, 285], ["resnet.VideoResNet", "utils.load_state_dict_from_url", "VideoResNet.load_state_dict"], "function", ["None"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "# if stride != 1 or in_planes != self.expansion*planes:", "\n", "#     self.shortcut = nn.Sequential(", "\n", "#         nn.Conv2d(in_planes, self.expansion*planes, kernel_size=1, stride=stride, bias=False),", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.r3d_18": [[287, 305], ["resnet._video_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet._video_resnet"], ["#     )", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "#out += self.shortcut(x)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBottleneckConv1x1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBottleneckConv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.mc3_18": [[307, 324], ["resnet._video_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet._video_resnet"], ["self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_v", "=", "conv1x1", "(", "int", "(", "self", ".", "expansion", "*", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3_v", "(", "self", ".", "conv3_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet.r2plus1d_18": [[326, 343], ["resnet._video_resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.video.resnet._video_resnet"], ["\n", "\n", "", "", "class", "LowRankBasicBlockResidual", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlockResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv1_res", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "conv2_res", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.QuantizableInvertedResidual.__init__": [[17, 20], ["torchvision.models.mobilenet.InvertedResidual.__init__", "torch.nn.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.QuantizableInvertedResidual.forward": [[21, 26], ["mobilenet.QuantizableInvertedResidual.skip_add.add", "mobilenet.QuantizableInvertedResidual.conv", "mobilenet.QuantizableInvertedResidual.conv"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.QuantizableInvertedResidual.fuse_model": [[27, 31], ["range", "len", "type", "torch.quantization.fuse_modules", "str", "str"], "methods", ["None"], ["\n", "", "", "class", "MobileNet", "(", "nn", ".", "Module", ")", ":", "\n", "# (128,2) means conv planes=128, conv stride=2, by default conv stride=1", "\n", "    ", "cfg", "=", "[", "64", ",", "(", "128", ",", "2", ")", ",", "128", ",", "(", "256", ",", "2", ")", ",", "256", ",", "(", "512", ",", "2", ")", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "(", "1024", ",", "2", ")", ",", "1024", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.QuantizableMobileNetV2.__init__": [[34, 44], ["torchvision.models.mobilenet.MobileNetV2.__init__", "torch.quantization.QuantStub", "torch.quantization.DeQuantStub"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.QuantizableMobileNetV2.forward": [[45, 50], ["mobilenet.QuantizableMobileNetV2.quant", "mobilenet.QuantizableMobileNetV2._forward", "mobilenet.QuantizableMobileNetV2.dequant"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.QuantizableMobileNetV2.fuse_model": [[51, 57], ["mobilenet.QuantizableMobileNetV2.modules", "type", "torch.quantization.fuse_modules", "type", "m.fuse_model"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.fuse_model"], ["out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "test", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.mobilenet.mobilenet_v2": [[59, 95], ["mobilenet.QuantizableMobileNetV2", "utils._replace_relu", "utils.quantize_model", "torchvision.models.utils.load_state_dict_from_url", "QuantizableMobileNetV2.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils.quantize_model"], ["x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "# test()", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableBasicConv2d.__init__": [[84, 87], ["torchvision.models.inception.BasicConv2d.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "aux_logits", "=", "aux_logits", "\n", "self", ".", "transform_input", "=", "transform_input", "\n", "self", ".", "Conv2d_1a_3x3", "=", "conv_block", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "Conv2d_2a_3x3", "=", "conv_block", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableBasicConv2d.forward": [[88, 93], ["torchvision.models.inception.QuantizableBasicConv2d.conv", "torchvision.models.inception.QuantizableBasicConv2d.bn", "torchvision.models.inception.QuantizableBasicConv2d.relu"], "methods", ["None"], ["self", ".", "Conv2d_2b_3x3", "=", "conv_block", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "Conv2d_3b_1x1", "=", "conv_block", "(", "64", ",", "80", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Conv2d_4a_3x3", "=", "conv_block", "(", "80", ",", "192", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Mixed_5b", "=", "inception_a", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "self", ".", "Mixed_5c", "=", "inception_a", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_5d", "=", "inception_a", "(", "288", ",", "pool_features", "=", "64", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableBasicConv2d.fuse_model": [[94, 96], ["torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules"], "methods", ["None"], ["self", ".", "Mixed_6a", "=", "inception_b", "(", "288", ")", "\n", "self", ".", "Mixed_6b", "=", "inception_c", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "self", ".", "Mixed_6c", "=", "inception_c", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionA.__init__": [[99, 102], ["torchvision.models.inception.InceptionA.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["if", "aux_logits", ":", "\n", "            ", "self", ".", "AuxLogits", "=", "inception_aux", "(", "768", ",", "num_classes", ")", "\n", "", "self", ".", "Mixed_7a", "=", "inception_d", "(", "768", ")", "\n", "self", ".", "Mixed_7b", "=", "inception_e", "(", "1280", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionA.forward": [[103, 106], ["torchvision.models.inception.QuantizableInceptionA._forward", "torchvision.models.inception.QuantizableInceptionA.myop.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["self", ".", "Mixed_7c", "=", "inception_e", "(", "2048", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionB.__init__": [[109, 112], ["torchvision.models.inception.InceptionB.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["stddev", "=", "m", ".", "stddev", "if", "hasattr", "(", "m", ",", "'stddev'", ")", "else", "0.1", "\n", "X", "=", "stats", ".", "truncnorm", "(", "-", "2", ",", "2", ",", "scale", "=", "stddev", ")", "\n", "values", "=", "torch", ".", "as_tensor", "(", "X", ".", "rvs", "(", "m", ".", "weight", ".", "numel", "(", ")", ")", ",", "dtype", "=", "m", ".", "weight", ".", "dtype", ")", "\n", "values", "=", "values", ".", "view", "(", "m", ".", "weight", ".", "size", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionB.forward": [[113, 116], ["torchvision.models.inception.QuantizableInceptionB._forward", "torchvision.models.inception.QuantizableInceptionB.myop.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "copy_", "(", "values", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionC.__init__": [[119, 122], ["torchvision.models.inception.InceptionC.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["", "", "", "def", "_transform_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "transform_input", ":", "\n", "            ", "x_ch0", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "0", "]", ",", "1", ")", "*", "(", "0.229", "/", "0.5", ")", "+", "(", "0.485", "-", "0.5", ")", "/", "0.5", "\n", "x_ch1", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "1", "]", ",", "1", ")", "*", "(", "0.224", "/", "0.5", ")", "+", "(", "0.456", "-", "0.5", ")", "/", "0.5", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionC.forward": [[123, 126], ["torchvision.models.inception.QuantizableInceptionC._forward", "torchvision.models.inception.QuantizableInceptionC.myop.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["x_ch2", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "2", "]", ",", "1", ")", "*", "(", "0.225", "/", "0.5", ")", "+", "(", "0.406", "-", "0.5", ")", "/", "0.5", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_ch0", ",", "x_ch1", ",", "x_ch2", ")", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionD.__init__": [[129, 132], ["torchvision.models.inception.InceptionD.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["        ", "x", "=", "self", ".", "Conv2d_1a_3x3", "(", "x", ")", "\n", "# N x 32 x 149 x 149", "\n", "x", "=", "self", ".", "Conv2d_2a_3x3", "(", "x", ")", "\n", "# N x 32 x 147 x 147", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionD.forward": [[133, 136], ["torchvision.models.inception.QuantizableInceptionD._forward", "torchvision.models.inception.QuantizableInceptionD.myop.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["x", "=", "self", ".", "Conv2d_2b_3x3", "(", "x", ")", "\n", "# N x 64 x 147 x 147", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# N x 64 x 73 x 73", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE.__init__": [[139, 142], ["torchvision.models.inception.InceptionE.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "self", ".", "Conv2d_4a_3x3", "(", "x", ")", "\n", "# N x 192 x 71 x 71", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# N x 192 x 35 x 35", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward": [[143, 163], ["torchvision.models.inception.QuantizableInceptionE.branch1x1", "torchvision.models.inception.QuantizableInceptionE.branch3x3_1", "torchvision.models.inception.QuantizableInceptionE.myop.cat", "torchvision.models.inception.QuantizableInceptionE.branch3x3dbl_1", "torchvision.models.inception.QuantizableInceptionE.branch3x3dbl_2", "torchvision.models.inception.QuantizableInceptionE.myop.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torchvision.models.inception.QuantizableInceptionE.branch_pool", "torchvision.models.inception.QuantizableInceptionE.branch3x3_2a", "torchvision.models.inception.QuantizableInceptionE.branch3x3_2b", "torchvision.models.inception.QuantizableInceptionE.branch3x3dbl_3a", "torchvision.models.inception.QuantizableInceptionE.branch3x3dbl_3b"], "methods", ["None"], ["x", "=", "self", ".", "Mixed_5b", "(", "x", ")", "\n", "# N x 256 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5c", "(", "x", ")", "\n", "# N x 288 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5d", "(", "x", ")", "\n", "# N x 288 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_6a", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6b", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6c", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6d", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6e", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "aux_defined", "=", "self", ".", "training", "and", "self", ".", "aux_logits", "\n", "if", "aux_defined", ":", "\n", "            ", "aux", "=", "self", ".", "AuxLogits", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "aux", "=", "None", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE.forward": [[164, 167], ["torchvision.models.inception.QuantizableInceptionE._forward", "torchvision.models.inception.QuantizableInceptionE.myop.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["# N x 768 x 17 x 17", "\n", "", "x", "=", "self", ".", "Mixed_7a", "(", "x", ")", "\n", "# N x 1280 x 8 x 8", "\n", "x", "=", "self", ".", "Mixed_7b", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionAux.__init__": [[170, 172], ["torchvision.models.inception.InceptionAux.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["# N x 2048 x 8 x 8", "\n", "# Adaptive average pooling", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInception3.__init__": [[175, 192], ["torchvision.models.inception.Inception3.__init__", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["# N x 2048 x 1 x 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# N x 2048", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# N x 1000 (num_classes)", "\n", "return", "x", ",", "aux", "\n", "\n", "", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "eager_outputs", "(", "self", ",", "x", ",", "aux", ")", ":", "\n", "# type: (Tensor, Optional[Tensor]) -> InceptionOutputs", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "aux_logits", ":", "\n", "            ", "return", "InceptionOutputs", "(", "x", ",", "aux", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_transform_input", "(", "x", ")", "\n", "x", ",", "aux", "=", "self", ".", "_forward", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInception3.forward": [[193, 205], ["torchvision.models.inception.QuantizableInception3._transform_input", "torchvision.models.inception.QuantizableInception3.quant", "torchvision.models.inception.QuantizableInception3._forward", "torchvision.models.inception.QuantizableInception3.dequant", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torchvision.models.inception.InceptionOutputs", "torchvision.models.inception.QuantizableInception3.eager_outputs", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._transform_input", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.eager_outputs"], ["aux_defined", "=", "self", ".", "training", "and", "self", ".", "aux_logits", "\n", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "if", "not", "aux_defined", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Scripted Inception3 always returns Inception3 Tuple\"", ")", "\n", "", "return", "InceptionOutputs", "(", "x", ",", "aux", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "eager_outputs", "(", "x", ",", "aux", ")", "\n", "\n", "\n", "", "", "", "class", "InceptionA", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInception3.fuse_model": [[206, 217], ["torchvision.models.inception.QuantizableInception3.modules", "type", "m.fuse_model"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.fuse_model"], ["if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch1x1", "=", "conv_block", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch5x5_1", "=", "conv_block", "(", "in_channels", ",", "48", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch5x5_2", "=", "conv_block", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "conv_block", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "conv_block", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "conv_block", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "branch_pool", "=", "conv_block", "(", "in_channels", ",", "pool_features", ",", "kernel_size", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.inception_v3": [[27, 81], ["inception.QuantizableInception3", "utils._replace_relu", "utils.quantize_model", "torchvision.models.utils.load_state_dict_from_url", "QuantizableInception3.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils.quantize_model"], ["\n", "\n", "def", "inception_v3", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Inception v3 model architecture from\n    `\"Rethinking the Inception Architecture for Computer Vision\" <http://arxiv.org/abs/1512.00567>`_.\n\n    .. note::\n        **Important**: In contrast to the other models the inception_v3 expects tensors with a size of\n        N x 3 x 299 x 299, so ensure your images are sized accordingly.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        aux_logits (bool): If True, add an auxiliary branch that can improve training.\n            Default: *True*\n        transform_input (bool): If True, preprocesses the input according to the method with which it\n            was trained on ImageNet. Default: *False*\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "if", "'transform_input'", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'transform_input'", "]", "=", "True", "\n", "", "if", "'aux_logits'", "in", "kwargs", ":", "\n", "            ", "original_aux_logits", "=", "kwargs", "[", "'aux_logits'", "]", "\n", "kwargs", "[", "'aux_logits'", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "original_aux_logits", "=", "True", "\n", "", "model", "=", "Inception3", "(", "**", "kwargs", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'inception_v3_google'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "not", "original_aux_logits", ":", "\n", "            ", "model", ".", "aux_logits", "=", "False", "\n", "del", "model", ".", "AuxLogits", "\n", "", "return", "model", "\n", "\n", "", "return", "Inception3", "(", "**", "kwargs", ")", "\n", "\n", "\n", "", "class", "Inception3", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "aux_logits", "=", "True", ",", "transform_input", "=", "False", ",", "\n", "inception_blocks", "=", "None", ")", ":", "\n", "        ", "super", "(", "Inception3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "inception_blocks", "is", "None", ":", "\n", "            ", "inception_blocks", "=", "[", "\n", "BasicConv2d", ",", "InceptionA", ",", "InceptionB", ",", "InceptionC", ",", "\n", "InceptionD", ",", "InceptionE", ",", "InceptionAux", "\n", "]", "\n", "", "assert", "len", "(", "inception_blocks", ")", "==", "7", "\n", "conv_block", "=", "inception_blocks", "[", "0", "]", "\n", "inception_a", "=", "inception_blocks", "[", "1", "]", "\n", "inception_b", "=", "inception_blocks", "[", "2", "]", "\n", "inception_c", "=", "inception_blocks", "[", "3", "]", "\n", "inception_d", "=", "inception_blocks", "[", "4", "]", "\n", "inception_e", "=", "inception_blocks", "[", "5", "]", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.QuantizableInvertedResidual.__init__": [[25, 28], ["shufflenetv2.InvertedResidual.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.QuantizableInvertedResidual.forward": [[29, 39], ["shufflenetv2.channel_shuffle", "x.chunk", "shufflenetv2.QuantizableInvertedResidual.cat.cat", "shufflenetv2.QuantizableInvertedResidual.cat.cat", "shufflenetv2.QuantizableInvertedResidual.branch2", "shufflenetv2.QuantizableInvertedResidual.branch1", "shufflenetv2.QuantizableInvertedResidual.branch2"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.shufflenetv2.channel_shuffle"], ["\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "class", "InvertedResidual", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.QuantizableShuffleNetV2.__init__": [[42, 46], ["shufflenetv2.ShuffleNetV2.__init__", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["", "self", ".", "stride", "=", "stride", "\n", "\n", "branch_features", "=", "oup", "//", "2", "\n", "assert", "(", "self", ".", "stride", "!=", "1", ")", "or", "(", "inp", "==", "branch_features", "<<", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.QuantizableShuffleNetV2.forward": [[47, 52], ["shufflenetv2.QuantizableShuffleNetV2.quant", "shufflenetv2.QuantizableShuffleNetV2._forward", "shufflenetv2.QuantizableShuffleNetV2.dequant"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "depthwise_conv", "(", "inp", ",", "inp", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.QuantizableShuffleNetV2.fuse_model": [[53, 74], ["shufflenetv2.QuantizableShuffleNetV2._modules.items", "shufflenetv2.QuantizableShuffleNetV2.modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "type", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "len", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "m.branch1._modules.items"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "self", ".", "depthwise_conv", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "depthwise_conv", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "groups", "=", "i", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2": [[77, 99], ["shufflenetv2.QuantizableShuffleNetV2", "utils._replace_relu", "utils.quantize_model", "torchvision.models.utils.load_state_dict_from_url", "QuantizableShuffleNetV2.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils.quantize_model"], ["out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ShuffleNetV2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "stages_repeats", ",", "stages_out_channels", ",", "num_classes", "=", "1000", ",", "inverted_residual", "=", "InvertedResidual", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "stages_repeats", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_repeats as list of 3 positive ints'", ")", "\n", "", "if", "len", "(", "stages_out_channels", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_out_channels as list of 5 positive ints'", ")", "\n", "", "self", ".", "_stage_out_channels", "=", "stages_out_channels", "\n", "\n", "input_channels", "=", "3", "\n", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.shufflenet_v2_x0_5": [[101, 113], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "stage_names", "=", "[", "'stage{}'", ".", "format", "(", "i", ")", "for", "i", "in", "[", "2", ",", "3", ",", "4", "]", "]", "\n", "for", "name", ",", "repeats", ",", "output_channels", "in", "zip", "(", "\n", "stage_names", ",", "stages_repeats", ",", "self", ".", "_stage_out_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "seq", "=", "[", "inverted_residual", "(", "input_channels", ",", "output_channels", ",", "2", ")", "]", "\n", "for", "i", "in", "range", "(", "repeats", "-", "1", ")", ":", "\n", "                ", "seq", ".", "append", "(", "inverted_residual", "(", "output_channels", ",", "output_channels", ",", "1", ")", ")", "\n", "", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "seq", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.shufflenet_v2_x1_0": [[115, 127], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["\n", "", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "-", "1", "]", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "output_channels", ",", "num_classes", ")", "\n", "\n", "", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.shufflenet_v2_x1_5": [[129, 141], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "# globalpool", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "forward", "=", "_forward", "\n", "\n", "\n", "", "def", "_shufflenetv2", "(", "arch", ",", "pretrained", ",", "progress", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShuffleNetV2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2.shufflenet_v2_x2_0": [[143, 155], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.shufflenetv2._shufflenetv2"], ["        ", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "if", "model_url", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'pretrained {} is not supported as of now'", ".", "format", "(", "arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "", "return", "model", "\n", "\n", "\n", "", "def", "shufflenet_v2_x0_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableBasicBlock.__init__": [[24, 27], ["torchvision.models.resnet.BasicBlock.__init__", "torch.nn.quantized.FloatFunctional", "torch.nn.quantized.FloatFunctional", "torch.nn.quantized.FloatFunctional", "torch.nn.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableBasicBlock.forward": [[28, 44], ["resnet.QuantizableBasicBlock.conv1", "resnet.QuantizableBasicBlock.bn1", "resnet.QuantizableBasicBlock.relu", "resnet.QuantizableBasicBlock.conv2", "resnet.QuantizableBasicBlock.bn2", "resnet.QuantizableBasicBlock.add_relu.add_relu", "resnet.QuantizableBasicBlock.downsample"], "methods", ["None"], ["self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableBasicBlock.fuse_model": [[45, 50], ["torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules"], "methods", ["None"], ["\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableBottleneck.__init__": [[53, 58], ["torchvision.models.resnet.Bottleneck.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableBottleneck.forward": [[59, 76], ["resnet.QuantizableBottleneck.conv1", "resnet.QuantizableBottleneck.bn1", "resnet.QuantizableBottleneck.relu1", "resnet.QuantizableBottleneck.conv2", "resnet.QuantizableBottleneck.bn2", "resnet.QuantizableBottleneck.relu2", "resnet.QuantizableBottleneck.conv3", "resnet.QuantizableBottleneck.bn3", "resnet.QuantizableBottleneck.skip_add_relu.add_relu", "resnet.QuantizableBottleneck.downsample"], "methods", ["None"], ["if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowrankBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableBottleneck.fuse_model": [[77, 83], ["torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowrankBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableResNet.__init__": [[87, 92], ["torchvision.models.resnet.ResNet.__init__", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableResNet.forward": [[93, 101], ["resnet.QuantizableResNet.quant", "resnet.QuantizableResNet._forward", "resnet.QuantizableResNet.dequant"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.QuantizableResNet.fuse_model": [[102, 114], ["torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "resnet.QuantizableResNet.modules", "m.fuse_model", "type", "type"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.fuse_model"], ["        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlock1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet": [[116, 137], ["resnet.QuantizableResNet", "utils._replace_relu", "utils.quantize_model", "torchvision.models.utils.load_state_dict_from_url", "QuantizableResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils.quantize_model"], ["kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(self.expansion*planes)", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.resnet18": [[139, 149], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["\n", "\n", "", "", "class", "LowRankBasicBlock2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.resnet50": [[151, 161], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["self", ".", "bn1_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet.resnext101_32x8d": [[163, 175], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.resnet._resnet"], ["            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1_v", "(", "self", ".", "conv1_v", "(", "self", ".", "bn1_u", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2_v", "(", "self", ".", "conv2_v", "(", "self", ".", "bn2_u", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableBasicConv2d.__init__": [[79, 82], ["torchvision.models.googlenet.BasicConv2d.__init__", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableBasicConv2d.forward": [[83, 88], ["googlenet.QuantizableBasicConv2d.conv", "googlenet.QuantizableBasicConv2d.bn", "googlenet.QuantizableBasicConv2d.relu"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableBasicConv2d.fuse_model": [[89, 91], ["torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules", "torch.quantization.fuse_modules"], "methods", ["None"], ["out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableInception.__init__": [[95, 99], ["torchvision.models.googlenet.Inception.__init__", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableInception.forward": [[100, 103], ["googlenet.QuantizableInception._forward", "googlenet.QuantizableInception.cat.cat"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward"], ["return", "out", "\n", "\n", "# net = GoogLeNet()", "\n", "# x = torch.randn(1,3,32,32)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableInceptionAux.__init__": [[107, 112], ["torchvision.models.googlenet.InceptionAux.__init__", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableInceptionAux.forward": [[113, 129], ["torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "googlenet.QuantizableInceptionAux.conv", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "googlenet.QuantizableInceptionAux.relu", "googlenet.QuantizableInceptionAux.dropout", "googlenet.QuantizableInceptionAux.fc2", "googlenet.QuantizableInceptionAux.fc1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.__init__": [[133, 141], ["torchvision.models.googlenet.GoogLeNet.__init__", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.QuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub", "torch.quantization.DeQuantStub"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.forward": [[142, 154], ["googlenet.QuantizableGoogLeNet._transform_input", "googlenet.QuantizableGoogLeNet.quant", "googlenet.QuantizableGoogLeNet._forward", "googlenet.QuantizableGoogLeNet.dequant", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torchvision.models.googlenet.GoogLeNetOutputs", "googlenet.QuantizableGoogLeNet.eager_outputs", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet._transform_input", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.inception.QuantizableInceptionE._forward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.googlenet.GoogLeNet.eager_outputs"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.fuse_model": [[155, 166], ["googlenet.QuantizableGoogLeNet.modules", "type", "m.fuse_model"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.fuse_model"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.googlenet": [[22, 75], ["googlenet.QuantizableGoogLeNet", "utils._replace_relu", "utils.quantize_model", "torchvision.models.utils.load_state_dict_from_url", "QuantizableGoogLeNet.load_state_dict", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu", "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils.quantize_model"], ["nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n", "\n", "", "", "class", "GoogLeNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu": [[5, 17], ["module.named_children", "reassign.items", "utils._replace_relu", "torch.nn.ReLU", "type", "type"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils._replace_relu"], ["    ", "\"\"\"\n    Says whether this parameter is a conv linear layer that \n    needs a different treatment from the other weights\n    \"\"\"", "\n", "return", "\"conv\"", "in", "parameter_name", "and", "\"weight\"", "in", "parameter_name", "\n", "\n", "\n", "", "def", "is_batchnorm_param", "(", "parameter_name", ")", ":", "\n", "    ", "\"\"\"\n    Is this parameter part of a batchnorm parameter?\n    \"\"\"", "\n", "return", "re", ".", "match", "(", "r\"\"\".*\\.bn\\d+\\.(weight|bias)\"\"\"", ",", "parameter_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.utils.quantize_model": [[19, 41], ["torch.rand", "model.eval", "model.fuse_model", "torch.quantization.prepare", "model", "torch.quantization.convert", "RuntimeError", "torch.quantization.QConfig", "torch.quantization.QConfig"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.quantization.googlenet.QuantizableGoogLeNet.fuse_model"], ["    ", "\"\"\"Take care of differences between weight decay for parameters\"\"\"", "\n", "if", "is_conv_param", "(", "parameter_name", ")", ":", "\n", "#print(\"@@@@@@@ param name: {}, is conv param !!!!!\".format(parameter_name))", "\n", "        ", "return", "config", "[", "\"optimizer_weight_decay_conv\"", "]", "\n", "", "elif", "is_batchnorm_param", "(", "parameter_name", ")", ":", "\n", "#print(\"@@@@@@@ param name: {}, is bn param !!!!!\".format(parameter_name))", "\n", "        ", "return", "config", "[", "\"optimizer_weight_decay_bn\"", "]", "\n", "", "else", ":", "\n", "#print(\"@@@@@@@ param name: {}, is other param !!!!!\".format(parameter_name))", "\n", "        ", "return", "config", "[", "\"optimizer_weight_decay_other\"", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.data.Dictionary.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.data.Dictionary.add_word": [[10, 15], ["data.Dictionary.idx2word.append", "len"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "idx2word", ".", "append", "(", "word", ")", "\n", "self", ".", "word2idx", "[", "word", "]", "=", "len", "(", "self", ".", "idx2word", ")", "-", "1", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.data.Dictionary.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.data.Corpus.__init__": [[21, 26], ["data.Dictionary", "data.Corpus.tokenize", "data.Corpus.tokenize", "data.Corpus.tokenize", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "dictionary", "=", "Dictionary", "(", ")", "\n", "self", ".", "train", "=", "self", ".", "tokenize", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "valid", "=", "self", ".", "tokenize", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "test", "=", "self", ".", "tokenize", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.data.Corpus.tokenize": [[27, 49], ["os.path.exists", "io.open", "io.open", "torch.cat", "idss.append", "line.split", "data.Corpus.dictionary.add_word", "line.split", "torch.cat.append", "torch.tensor().type", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Dictionary.add_word"], ["", "def", "tokenize", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Tokenizes a text file.\"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "# Add words to the dictionary", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "words", "=", "line", ".", "split", "(", ")", "+", "[", "'<eos>'", "]", "\n", "for", "word", "in", "words", ":", "\n", "                    ", "self", ".", "dictionary", ".", "add_word", "(", "word", ")", "\n", "\n", "# Tokenize file content", "\n", "", "", "", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "idss", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "                ", "words", "=", "line", ".", "split", "(", ")", "+", "[", "'<eos>'", "]", "\n", "ids", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "                    ", "ids", ".", "append", "(", "self", ".", "dictionary", ".", "word2idx", "[", "word", "]", ")", "\n", "", "idss", ".", "append", "(", "torch", ".", "tensor", "(", "ids", ")", ".", "type", "(", "torch", ".", "int64", ")", ")", "\n", "", "ids", "=", "torch", ".", "cat", "(", "idss", ")", "\n", "\n", "", "return", "ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.nlp_model.RNNModel.__init__": [[9, 40], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "nlp_model.RNNModel.init_weights", "torch.RNN", "torch.RNN", "torch.RNN", "getattr", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], ["def", "__init__", "(", "self", ",", "rnn_type", ",", "ntoken", ",", "ninp", ",", "nhid", ",", "nlayers", ",", "dropout", "=", "0.5", ",", "tie_weights", "=", "False", ")", ":", "\n", "        ", "super", "(", "RNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Embedding", "(", "ntoken", ",", "ninp", ")", "\n", "if", "rnn_type", "in", "[", "'LSTM'", ",", "'GRU'", "]", ":", "\n", "            ", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "rnn_type", ")", "(", "ninp", ",", "nhid", ",", "nlayers", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "nonlinearity", "=", "{", "'RNN_TANH'", ":", "'tanh'", ",", "'RNN_RELU'", ":", "'relu'", "}", "[", "rnn_type", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "raise", "ValueError", "(", "\"\"\"An invalid option for `--model` was supplied,\n                                 options are ['LSTM', 'GRU', 'RNN_TANH' or 'RNN_RELU']\"\"\"", ")", "\n", "", "self", ".", "rnn", "=", "nn", ".", "RNN", "(", "ninp", ",", "nhid", ",", "nlayers", ",", "nonlinearity", "=", "nonlinearity", ",", "dropout", "=", "dropout", ")", "\n", "", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "nhid", ",", "ntoken", ")", "\n", "\n", "# Optionally tie weights as in:", "\n", "# \"Using the Output Embedding to Improve Language Models\" (Press & Wolf 2016)", "\n", "# https://arxiv.org/abs/1608.05859", "\n", "# and", "\n", "# \"Tying Word Vectors and Word Classifiers: A Loss Framework for Language Modeling\" (Inan et al. 2016)", "\n", "# https://arxiv.org/abs/1611.01462", "\n", "if", "tie_weights", ":", "\n", "            ", "if", "nhid", "!=", "ninp", ":", "\n", "                ", "raise", "ValueError", "(", "'When using the tied flag, nhid must be equal to emsize'", ")", "\n", "", "self", ".", "decoder", ".", "weight", "=", "self", ".", "encoder", ".", "weight", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.nlp_model.RNNModel.init_weights": [[41, 46], ["nlp_model.RNNModel.encoder.weight.data.uniform_", "nlp_model.RNNModel.decoder.bias.data.zero_", "nlp_model.RNNModel.decoder.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.nlp_model.RNNModel.forward": [[47, 53], ["nlp_model.RNNModel.drop", "nlp_model.RNNModel.rnn", "nlp_model.RNNModel.drop", "nlp_model.RNNModel.decoder", "nlp_model.RNNModel.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "emb", "=", "self", ".", "drop", "(", "self", ".", "encoder", "(", "input", ")", ")", "\n", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "emb", ",", "hidden", ")", "\n", "output", "=", "self", ".", "drop", "(", "output", ")", "\n", "decoded", "=", "self", ".", "decoder", "(", "output", ")", "\n", "return", "decoded", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.nlp_model.RNNModel.init_hidden": [[54, 61], ["next", "nlp_model.RNNModel.parameters", "next.new_zeros", "next.new_zeros", "next.new_zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", ",", "\n", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.nlp_model.PositionalEncoding.__init__": [[80, 91], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "nlp_model.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.nlp_model.PositionalEncoding.forward": [[92, 105], ["nlp_model.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"Inputs of forward function\n        Args:\n            x: the sequence fed to the positional encoder model (required).\n        Shape:\n            x: [sequence length, batch size, embed dim]\n            output: [sequence length, batch size, embed dim]\n        Examples:\n            >>> output = pos_encoder(x)\n        \"\"\"", "\n", "\n", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel.__init__": [[13, 33], ["data.Corpus", "language_model.languageModel._batchify", "language_model.languageModel._batchify", "len", "nlp_model.RNNModel().to", "torch.nn.CrossEntropyLoss().to", "nlp_model.RNNModel", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel._batchify", "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel._batchify", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["def", "__init__", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "device", "=", "model_config", "[", "'device'", "]", "\n", "self", ".", "corpus", "=", "data", ".", "Corpus", "(", "model_config", "[", "'data_path'", "]", ")", "\n", "self", ".", "train_data", "=", "self", ".", "_batchify", "(", "self", ".", "corpus", ".", "train", ",", "\n", "model_config", "[", "'batch_size'", "]", ")", "\n", "self", ".", "val_data", "=", "self", ".", "_batchify", "(", "self", ".", "corpus", ".", "test", ",", "\n", "model_config", "[", "'batch_size'", "]", ")", "\n", "self", ".", "ntokens", "=", "len", "(", "self", ".", "corpus", ".", "dictionary", ")", "\n", "self", ".", "model", "=", "nlp_model", ".", "RNNModel", "(", "model_config", "[", "'arch'", "]", ",", "self", ".", "ntokens", ",", "\n", "model_config", "[", "'emsize'", "]", ",", "\n", "model_config", "[", "'nhid'", "]", ",", "\n", "model_config", "[", "'nlayers'", "]", ",", "\n", "model_config", "[", "'dropout'", "]", ",", "\n", "model_config", "[", "'tied'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model_arch", "=", "model_config", "[", "'arch'", "]", "\n", "self", ".", "batch_size", "=", "model_config", "[", "'batch_size'", "]", "\n", "self", ".", "bptt", "=", "model_config", "[", "'bptt'", "]", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "model_config", "[", "'init_lr'", "]", "# doing this so can print, otherwise no use", "\n", "self", ".", "clip", "=", "model_config", "[", "'clip'", "]", "\n", "", "def", "_batchify", "(", "self", ",", "data", ",", "bsz", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel._batchify": [[33, 45], ["data.view().t().contiguous.view().t().contiguous.narrow", "data.view().t().contiguous.view().t().contiguous.view().t().contiguous", "data.view().t().contiguous.view().t().contiguous.to", "data.view().t().contiguous.view().t().contiguous.size", "data.view().t().contiguous.view().t().contiguous.view().t", "data.view().t().contiguous.view().t().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "_batchify", "(", "self", ",", "data", ",", "bsz", ")", ":", "\n", "        ", "\"\"\"\n        Some sort of reaarrangement of the data\n        Well explained in the original pytorch examples\n        \"\"\"", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "nbatch", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "nbatch", "*", "bsz", ")", "\n", "# Evenly divide the data across the bsz batches.", "\n", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel.get_batch": [[46, 51], ["min", "source[].view", "len"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "source", ",", "i", ")", ":", "\n", "        ", "seq_len", "=", "min", "(", "self", ".", "bptt", ",", "len", "(", "source", ")", "-", "1", "-", "i", ")", "\n", "data", "=", "source", "[", "i", ":", "i", "+", "seq_len", "]", "\n", "target", "=", "source", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", ".", "view", "(", "-", "1", ")", "\n", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel.train_single_iter": [[53, 123], ["language_model.languageModel.model.train", "language_model.languageModel.model.init_hidden", "enumerate", "torch.distributed.get_rank", "torch.distributed.get_world_size", "enumerate", "range", "language_model.languageModel.get_batch", "language_model.languageModel.criterion", "language_model.languageModel.backward", "language_model.languageModel.item", "torch.nn.utils.clip_grad_norm_", "language_model.languageModel.train_data.size", "int", "int", "range", "language_model.languageModel.get_batch", "language_model.languageModel.criterion", "language_model.languageModel.backward", "language_model.languageModel.item", "torch.nn.utils.clip_grad_norm_", "language_model.languageModel.model", "language_model.repackage_hidden", "language_model.languageModel.model", "language_model.languageModel.view", "language_model.languageModel.model.parameters", "language_model.languageModel.model", "language_model.repackage_hidden", "language_model.languageModel.model", "language_model.languageModel.view", "language_model.languageModel.model.parameters", "language_model.languageModel.train_data.size", "language_model.languageModel.model.parameters", "logger.info", "len", "len", "language_model.languageModel.model.parameters", "logger.info", "math.exp", "math.exp", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "def", "train_single_iter", "(", "self", ",", "epoch", "=", "None", ",", "logger", "=", "None", ",", "for_autoscale", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "model_arch", "!=", "\"Transformer\"", ":", "\n", "            ", "hidden", "=", "self", ".", "model", ".", "init_hidden", "(", "self", ".", "batch_size", ")", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "if", "for_autoscale", ":", "\n", "            ", "for", "batch_idx", ",", "i", "in", "enumerate", "(", "range", "(", "0", ",", "self", ".", "train_data", ".", "size", "(", "0", ")", "-", "1", ",", "\n", "self", ".", "bptt", ")", ")", ":", "\n", "                ", "data", ",", "target", "=", "self", ".", "get_batch", "(", "self", ".", "train_data", ",", "i", ")", "\n", "if", "self", ".", "model", "==", "'Transformer'", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "output", ",", "hidden", "=", "self", ".", "model", "(", "data", ",", "hidden", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ntokens", ")", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# NOTE: For curiosity", "\n", "# try to see the difference in case of doign this on decoded", "\n", "# gradients", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "clip", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "batch_idx", "%", "200", "==", "0", ":", "\n", "                    ", "cur_loss", "=", "total_loss", "/", "(", "200", ")", "\n", "# break # for speed debugging", "\n", "if", "logger", "is", "not", "None", ":", "\n", "# not to log when doing things for auto scale", "\n", "                        ", "logger", ".", "info", "(", "'| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.2f} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "epoch", ",", "batch_idx", ",", "\n", "len", "(", "self", ".", "train_data", ")", "//", "self", ".", "bptt", ",", "\n", "self", ".", "lr", ",", "cur_loss", ",", "\n", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "total_loss", "=", "0", "\n", "", "", "yield", "grad_array", "\n", "", "", "else", ":", "\n", "            ", "length_train_set", "=", "self", ".", "train_data", ".", "size", "(", "0", ")", "-", "1", "\n", "# TODO: assuming distributed", "\n", "local_rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "num_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n", "start_position", "=", "local_rank", "*", "int", "(", "len", "(", "self", ".", "train_data", ")", "/", "num_workers", ")", "\n", "end_position", "=", "(", "local_rank", "+", "1", ")", "*", "int", "(", "len", "(", "self", ".", "train_data", ")", "/", "num_workers", ")", "\n", "for", "batch_idx", ",", "i", "in", "enumerate", "(", "range", "(", "start_position", ",", "end_position", "-", "1", ",", "\n", "self", ".", "bptt", ")", ")", ":", "\n", "                ", "data", ",", "target", "=", "self", ".", "get_batch", "(", "self", ".", "train_data", ",", "i", ")", "\n", "if", "self", ".", "model", "==", "'Transformer'", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "output", ",", "hidden", "=", "self", ".", "model", "(", "data", ",", "hidden", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ntokens", ")", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# NOTE: For curiosity", "\n", "# try to see the difference in case of doign this on decoded", "\n", "# gradients", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "clip", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "batch_idx", "%", "200", "==", "0", ":", "\n", "                    ", "cur_loss", "=", "total_loss", "/", "(", "200", ")", "\n", "# break # for speed debugging", "\n", "if", "logger", "is", "not", "None", ":", "\n", "# not to log when doing things for auto scale", "\n", "                        ", "logger", ".", "info", "(", "'| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.2f} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "epoch", ",", "batch_idx", ",", "\n", "len", "(", "self", ".", "train_data", ")", "//", "self", ".", "bptt", ",", "\n", "self", ".", "lr", ",", "cur_loss", ",", "\n", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "total_loss", "=", "0", "\n", "", "", "yield", "grad_array", "\n", "", "", "", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.languageModel.validate_model": [[123, 141], ["logger.info", "language_model.languageModel.model.init_hidden", "torch.no_grad", "range", "len", "language_model.languageModel.get_batch", "language_model.languageModel.view", "math.exp", "language_model.languageModel.val_data.size", "language_model.languageModel.model", "language_model.languageModel.model", "language_model.repackage_hidden", "len", "language_model.languageModel.criterion().item", "language_model.languageModel.criterion"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "", "", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "if", "self", ".", "model_arch", "!=", "\"Transformer\"", ":", "\n", "            ", "hidden", "=", "self", ".", "model", ".", "init_hidden", "(", "self", ".", "batch_size", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "val_data", ".", "size", "(", "0", ")", "-", "1", ",", "self", ".", "bptt", ")", ":", "\n", "                ", "data", ",", "target", "=", "self", ".", "get_batch", "(", "self", ".", "val_data", ",", "i", ")", "\n", "if", "self", ".", "model", "==", "'Transformer'", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "output", ",", "hidden", "=", "self", ".", "model", "(", "data", ",", "hidden", ")", "\n", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "", "output_flat", "=", "output", ".", "view", "(", "-", "1", ",", "self", ".", "ntokens", ")", "\n", "total_loss", "+=", "len", "(", "data", ")", "*", "self", ".", "criterion", "(", "output_flat", ",", "target", ")", ".", "item", "(", ")", "\n", "", "", "total_loss", "/=", "(", "len", "(", "self", ".", "val_data", ")", "-", "1", ")", "\n", "logger", ".", "info", "(", "'\\nTest set: Average loss: {:.4f}, PPL: {:.4f}\\n'", ".", "format", "(", "\n", "total_loss", ",", "math", ".", "exp", "(", "total_loss", ")", ")", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.lstm.language_model.repackage_hidden": [[142, 149], ["isinstance", "h.detach", "tuple", "language_model.repackage_hidden"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "", "def", "repackage_hidden", "(", "h", ")", ":", "\n", "    ", "\"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\"", "\n", "\n", "if", "isinstance", "(", "h", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "h", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "repackage_hidden", "(", "v", ")", "for", "v", "in", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.Batch.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ",", "hidden", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "hidden", "=", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.__init__": [[28, 51], ["new_language_model.define_dataset", "new_language_model.lstmModel._create_model", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss", "new_language_model.lstmModel.model.parameters", "new_language_model.lstmModel.model.buffers", "new_language_model.lstmModel.model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.define_dataset", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["    ", "def", "__init__", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "_device", "=", "model_config", "[", "'device'", "]", "\n", "self", ".", "_batch_size", "=", "model_config", "[", "'batch_size'", "]", "\n", "# self._seed = seed", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_data_path", "=", "model_config", "[", "'data_path'", "]", "\n", "\n", "self", ".", "text", ",", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "full_loader", "=", "define_dataset", "(", "\n", "self", ".", "_device", ",", "\"wikitext2\"", ",", "self", ".", "_data_path", ",", "self", ".", "_batch_size", ")", "\n", "\n", "global", "ITOS", "\n", "global", "STOI", "\n", "\n", "ITOS", "=", "self", ".", "text", ".", "vocab", ".", "itos", "\n", "STOI", "=", "self", ".", "text", ".", "vocab", ".", "stoi", "\n", "\n", "self", ".", "model", "=", "self", ".", "_create_model", "(", ")", "\n", "self", ".", "_criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "state", "=", "[", "param", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "self", ".", "buffers", "=", "[", "buffers", "for", "buffers", "in", "self", ".", "model", ".", "buffers", "(", ")", "]", "\n", "self", ".", "parameter_names", "=", "[", "name", "for", "(", "name", ",", "_", ")", "in", "\n", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "self", ".", "_hidden_container", "=", "{", "\"hidden\"", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.train_iterator": [[52, 63], ["new_language_model.lstmModel.model.init_hidden", "new_language_model.SplitBatchLoader", "torch.distributed.is_available", "torch.distributed.get_rank"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden"], ["", "def", "train_iterator", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "_epoch", "+=", "1", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "self", ".", "model", ".", "init_hidden", "(", "batch_size", ")", "\n", "return", "SplitBatchLoader", "(", "\n", "self", ".", "train_loader", ",", "\n", "self", ".", "_device", ",", "\n", "rank", ",", "\n", "batch_size", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "hidden_container", "=", "self", ".", "_hidden_container", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.full_train_iterator": [[65, 76], ["new_language_model.lstmModel.model.init_hidden", "new_language_model.FullSplitBatchLoader", "torch.distributed.is_available", "torch.distributed.get_rank"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden"], ["", "def", "full_train_iterator", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "_epoch", "+=", "1", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "self", ".", "model", ".", "init_hidden", "(", "batch_size", ")", "\n", "return", "FullSplitBatchLoader", "(", "\n", "self", ".", "full_loader", ",", "\n", "self", ".", "_device", ",", "\n", "rank", ",", "\n", "batch_size", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "hidden_container", "=", "self", ".", "_hidden_container", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.train_single_iter": [[79, 129], ["new_language_model.lstmModel.model.train", "new_language_model.lstmModel.model.eval", "new_language_model.lstmModel.full_train_iterator", "enumerate", "new_language_model.lstmModel.train_iterator", "enumerate", "new_language_model.lstmModel.model", "new_language_model.lstmModel._criterion", "new_language_model.lstmModel.backward", "new_language_model.lstmModel.item", "torch.nn.utils.clip_grad_norm_", "new_language_model.lstmModel.model", "new_language_model.lstmModel._criterion", "new_language_model.lstmModel.backward", "new_language_model.lstmModel.item", "torch.nn.utils.clip_grad_norm_", "prediction.view", "batch.y.contiguous().view", "new_language_model.lstmModel.model.parameters", "prediction.view", "batch.y.contiguous().view", "new_language_model.lstmModel.model.parameters", "new_language_model.lstmModel.model.parameters", "logger.info", "new_language_model.lstmModel.model.parameters", "logger.info", "batch.y.contiguous", "batch.y.contiguous", "math.exp", "math.exp"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.full_train_iterator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.train_iterator", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward"], ["", "def", "train_single_iter", "(", "self", ",", "epoch", "=", "None", ",", "logger", "=", "None", ",", "for_autoscale", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "for_autoscale", ":", "\n", "            ", "total_loss", "=", "0", "\n", "# there was a bug here we were only using self._batch_size", "\n", "full_train_loader", "=", "self", ".", "full_train_iterator", "(", "self", ".", "_batch_size", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "full_train_loader", ")", ":", "\n", "                ", "prediction", ",", "hidden", "=", "self", ".", "model", "(", "batch", ".", "x", ",", "batch", ".", "hidden", ")", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "hidden", "\n", "loss", "=", "self", ".", "_criterion", "(", "\n", "prediction", ".", "view", "(", "-", "1", ",", "self", ".", "model", ".", "ntokens", ")", ",", "\n", "batch", ".", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "0.4", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "\n", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                    ", "cur_loss", "=", "total_loss", "/", "(", "200", ")", "\n", "if", "logger", "is", "not", "None", ":", "\n", "                        ", "logger", ".", "info", "(", "'| epoch {:3d} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "epoch", ",", "\n", "cur_loss", ",", "\n", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "", "total_loss", "=", "0", "\n", "", "yield", "grad_array", "\n", "", "", "else", ":", "\n", "            ", "total_loss", "=", "0", "\n", "train_loader", "=", "self", ".", "train_iterator", "(", "self", ".", "_batch_size", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "prediction", ",", "hidden", "=", "self", ".", "model", "(", "batch", ".", "x", ",", "batch", ".", "hidden", ")", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "hidden", "\n", "loss", "=", "self", ".", "_criterion", "(", "\n", "prediction", ".", "view", "(", "-", "1", ",", "self", ".", "model", ".", "ntokens", ")", ",", "\n", "batch", ".", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "0.4", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "\n", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                    ", "cur_loss", "=", "total_loss", "/", "(", "200", ")", "\n", "if", "logger", "is", "not", "None", ":", "\n", "                        ", "logger", ".", "info", "(", "'| epoch {:3d} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "epoch", ",", "\n", "cur_loss", ",", "\n", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "", "total_loss", "=", "0", "\n", "", "yield", "grad_array", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.validate_model": [[159, 185], ["torch.distributed.get_rank", "new_language_model.lstmModel.model.init_hidden", "new_language_model.SplitBatchLoader", "test_model.eval", "mean_accumulator.MeanAccumulator", "mean_accumulator.MeanAccumulator.reduce", "mean_accumulator.MeanAccumulator.value", "logger.info", "mean_accumulator.MeanAccumulator.add", "torch.no_grad", "new_language_model.lstmModel.model", "new_language_model.lstmModel.evaluate_prediction", "val[].item", "val[].item"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.reduce", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.value", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.evaluate_prediction"], ["", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "self", ".", "model", ".", "init_hidden", "(", "\n", "self", ".", "_batch_size", ")", "\n", "test_loader", "=", "SplitBatchLoader", "(", "\n", "self", ".", "val_loader", ",", "\n", "self", ".", "_device", ",", "\n", "rank", ",", "\n", "batch_size", "=", "self", ".", "_batch_size", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "hidden_container", "=", "self", ".", "_hidden_container", "\n", ")", "\n", "\n", "test_model", "=", "self", ".", "model", "\n", "test_model", ".", "eval", "(", ")", "\n", "mean_metrics", "=", "MeanAccumulator", "(", ")", "\n", "for", "batch", "in", "test_loader", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "prediction", ",", "hidden", "=", "self", ".", "model", "(", "batch", ".", "x", ",", "batch", ".", "hidden", ")", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "hidden", "\n", "metrics", "=", "self", ".", "evaluate_prediction", "(", "prediction", ",", "batch", ".", "y", ")", "\n", "", "mean_metrics", ".", "add", "(", "metrics", ")", "\n", "", "mean_metrics", ".", "reduce", "(", ")", "\n", "val", "=", "mean_metrics", ".", "value", "(", ")", "\n", "logger", ".", "info", "(", "'\\nTest set: Average loss: {:.4f}, PPL: {:.4f}\\n'", ".", "format", "(", "\n", "val", "[", "'cross_entropy'", "]", ".", "item", "(", ")", ",", "val", "[", "'perplexity'", "]", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel.evaluate_prediction": [[186, 196], ["torch.no_grad", "new_language_model.lstmModel._criterion", "model_output.view", "reference.contiguous().view", "new_language_model.lstmModel.detach", "torch.exp().detach", "reference.contiguous", "torch.exp"], "methods", ["None"], ["", "def", "evaluate_prediction", "(", "self", ",", "model_output", ",", "reference", ")", ":", "\n", "            ", "\"\"\"\n            Compute a series of scalar loss values for a predicted batch and references\n            \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "cross_entropy", "=", "self", ".", "_criterion", "(", "\n", "model_output", ".", "view", "(", "-", "1", ",", "self", ".", "model", ".", "ntokens", ")", ",", "reference", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "{", "\n", "\"cross_entropy\"", ":", "cross_entropy", ".", "detach", "(", ")", ",", "\n", "\"perplexity\"", ":", "torch", ".", "exp", "(", "cross_entropy", ")", ".", "detach", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.lstmModel._create_model": [[200, 205], ["new_language_model.define_model", "define_model.to", "define_model.train"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.define_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train"], ["", "", "def", "_create_model", "(", "self", ")", ":", "\n", "        ", "model", "=", "define_model", "(", "self", ".", "text", ")", "\n", "model", ".", "to", "(", "self", ".", "_device", ")", "\n", "model", ".", "train", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.SplitBatchLoader.__init__": [[214, 221], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "device", ",", "rank", ",", "batch_size", ",", "model", ",", "hidden_container", ")", ":", "\n", "        ", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_rank", "=", "rank", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "_hidden_container", "=", "hidden_container", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.SplitBatchLoader.__len__": [[222, 224], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.SplitBatchLoader.__iter__": [[225, 233], ["enumerate", "new_language_model.SplitBatchLoader.model.repackage_hidden", "new_language_model.Batch"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "_dataloader", ")", ":", "\n", "# if i == 0:", "\n", "#     print(\"Data signature\", batch.text.view(-1)[0:5].numpy())", "\n", "            ", "x", "=", "batch", ".", "text", "[", ":", ",", "self", ".", "_rank", "*", "self", ".", "_batch_size", ":", "(", "self", ".", "_rank", "+", "1", ")", "*", "self", ".", "_batch_size", "]", "\n", "y", "=", "batch", ".", "target", "[", ":", ",", "self", ".", "_rank", "*", "self", ".", "_batch_size", ":", "(", "self", ".", "_rank", "+", "1", ")", "*", "self", ".", "_batch_size", "]", "\n", "hidden", "=", "self", ".", "model", ".", "repackage_hidden", "(", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", ")", "\n", "yield", "Batch", "(", "x", ",", "y", ",", "hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.FullSplitBatchLoader.__init__": [[241, 248], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "device", ",", "rank", ",", "batch_size", ",", "model", ",", "hidden_container", ")", ":", "\n", "        ", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_rank", "=", "rank", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "_hidden_container", "=", "hidden_container", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.FullSplitBatchLoader.__len__": [[249, 251], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.FullSplitBatchLoader.__iter__": [[252, 260], ["enumerate", "new_language_model.FullSplitBatchLoader.model.repackage_hidden", "new_language_model.Batch"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "_dataloader", ")", ":", "\n", "# if i == 0:", "\n", "#     print(\"Data signature\", batch.text.view(-1)[0:5].numpy())", "\n", "            ", "x", "=", "batch", ".", "text", "[", ":", ",", ":", "]", "\n", "y", "=", "batch", ".", "target", "[", ":", ",", ":", "]", "\n", "hidden", "=", "self", ".", "model", ".", "repackage_hidden", "(", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", ")", "\n", "yield", "Batch", "(", "x", ",", "y", ",", "hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.define_model": [[263, 283], ["model.RNNModel", "model.RNNModel.encoder.weight.data.copy_", "weight_matrix.size", "weight_matrix.size", "len"], "function", ["None"], ["", "", "", "def", "define_model", "(", "TEXT", ",", "rnn_n_hidden", "=", "650", ",", "rnn_n_layers", "=", "3", ",", "rnn_tie_weights", "=", "True", ",", "\n", "drop_rate", "=", "0.4", ")", ":", "\n", "    ", "weight_matrix", "=", "TEXT", ".", "vocab", ".", "vectors", "\n", "if", "weight_matrix", "is", "not", "None", ":", "\n", "        ", "n_tokens", ",", "emb_size", "=", "weight_matrix", ".", "size", "(", "0", ")", ",", "weight_matrix", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "n_tokens", ",", "emb_size", "=", "len", "(", "TEXT", ".", "vocab", ")", ",", "rnn_n_hidden", "\n", "\n", "", "model", "=", "RNNModel", "(", "\n", "rnn_type", "=", "\"LSTM\"", ",", "\n", "ntoken", "=", "n_tokens", ",", "\n", "ninp", "=", "emb_size", ",", "\n", "nhid", "=", "rnn_n_hidden", ",", "\n", "nlayers", "=", "rnn_n_layers", ",", "\n", "tie_weights", "=", "rnn_tie_weights", ",", "\n", "dropout", "=", "drop_rate", ",", "\n", ")", "\n", "if", "weight_matrix", "is", "not", "None", ":", "\n", "        ", "model", ".", "encoder", ".", "weight", ".", "data", ".", "copy_", "(", "weight_matrix", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model.define_dataset": [[285, 365], ["new_language_model._get_dataset", "TEXT.build_vocab", "torchtext.data.BPTTIterator.splits", "torchtext.data.BPTTIterator.splits", "torchtext.data.BPTTIterator.splits", "torch.distributed.is_available", "torch.distributed.get_world_size", "new_language_model..model.eval", "new_language_model..full_train_loader", "enumerate", "os.path.join", "torch.zeros_like", "new_language_model..model.zero_grad", "new_language_model..model", "new_language_model.._criterion", "new_language_model..backward", "new_language_model..item", "torch.nn.utils.clip_grad_norm_", "enumerate", "torch.norm().item", "new_language_model..model.parameters", "prediction.view", "batch.y.contiguous().view", "new_language_model..model.parameters", "new_language_model..model.parameters", "full_rank_accum[].add_", "torch.norm", "batch.y.contiguous"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model._get_dataset", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward"], ["", "def", "define_dataset", "(", "\n", "device", ",", "\n", "dataset_name", ",", "\n", "dataset_path", ",", "\n", "batch_size", ",", "\n", "rnn_use_pretrained_emb", "=", "False", ",", "\n", "rnn_n_hidden", "=", "650", ",", "\n", "reshuffle_per_epoch", "=", "True", ",", "\n", "rnn_bptt_len", "=", "30", ",", "\n", ")", ":", "\n", "# create dataset.", "\n", "    ", "TEXT", ",", "train", ",", "valid", ",", "test", "=", "_get_dataset", "(", "dataset_name", ",", "dataset_path", ")", "\n", "\n", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "\n", "# Build vocb.", "\n", "# we can use some precomputed word embeddings,", "\n", "# e.g., GloVe vectors with 100, 200, and 300.", "\n", "if", "rnn_use_pretrained_emb", ":", "\n", "        ", "try", ":", "\n", "            ", "vectors", "=", "\"glove.6B.{}d\"", ".", "format", "(", "rnn_n_hidden", ")", "\n", "vectors_cache", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\".vector_cache\"", ")", "\n", "", "except", ":", "\n", "            ", "vectors", ",", "vectors_cache", "=", "None", ",", "None", "\n", "", "", "else", ":", "\n", "        ", "vectors", ",", "vectors_cache", "=", "None", ",", "None", "\n", "", "TEXT", ".", "build_vocab", "(", "train", ",", "vectors", "=", "vectors", ",", "vectors_cache", "=", "vectors_cache", ")", "\n", "\n", "# Partition training data.", "\n", "train_loader", ",", "_", "=", "torchtext", ".", "data", ".", "BPTTIterator", ".", "splits", "(", "\n", "(", "train", ",", "valid", ")", ",", "\n", "batch_size", "=", "batch_size", "*", "n_workers", ",", "\n", "bptt_len", "=", "rnn_bptt_len", ",", "\n", "device", "=", "device", ",", "\n", "shuffle", "=", "reshuffle_per_epoch", ",", "\n", ")", "\n", "_", ",", "val_loader", "=", "torchtext", ".", "data", ".", "BPTTIterator", ".", "splits", "(", "\n", "(", "train", ",", "valid", ")", ",", "\n", "batch_size", "=", "batch_size", "*", "n_workers", ",", "\n", "bptt_len", "=", "rnn_bptt_len", ",", "\n", "device", "=", "device", ",", "\n", "shuffle", "=", "reshuffle_per_epoch", ",", "\n", ")", "\n", "\n", "\n", "_", ",", "full_loader", "=", "torchtext", ".", "data", ".", "BPTTIterator", ".", "splits", "(", "\n", "(", "train", ",", "valid", ")", ",", "\n", "batch_size", "=", "batch_size", "*", "1", ",", "# changing n_workers to 1 here", "\n", "# as I want the validation code to run on all the workers", "\n", "bptt_len", "=", "rnn_bptt_len", ",", "\n", "device", "=", "device", ",", "\n", "shuffle", "=", "reshuffle_per_epoch", ",", "\n", ")", "\n", "\n", "# get some stat.", "\n", "return", "TEXT", ",", "train_loader", ",", "val_loader", ",", "full_loader", "\n", "\n", "def", "get_train_norm", "(", "self", ",", "saved_path", ",", "config", ")", ":", "\n", "# here to save memory and despite previous bad experienes ", "\n", "# i am using the same model", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "# shouldn't effect dropout", "\n", "total_loss", "=", "0", "\n", "full_train_loader", "=", "self", ".", "full_train_loader", "(", "self", ".", "_batch_size", ")", "\n", "# data loader is full loader", "\n", "full_rank_accum", "=", "[", "torch", ".", "zeros_like", "(", "d", ")", "for", "d", "in", "\n", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "full_train_loader", ")", ":", "\n", "            ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "prediction", ".", "hidden", "=", "self", ".", "model", "(", "batch", ".", "x", ",", "batch", ".", "hidden", ")", "\n", "self", ".", "_hidden_container", "[", "\"hidden\"", "]", "=", "hidden", "\n", "loss", "=", "self", ".", "_criterion", "(", "\n", "prediction", ".", "view", "(", "-", "1", ",", "self", ".", "model", ".", "n_tokens", ")", ",", "\n", "batch", ".", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "0.4", ")", "\n", "for", "idx", ",", "mdl", "in", "enumerate", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "full_rank_accum", "[", "idx", "]", ".", "add_", "(", "mdl", ".", "grad", ".", "data", ")", "\n", "", "", "norm_val", "=", "[", "torch", ".", "norm", "(", "lval", ")", ".", "item", "(", ")", "for", "lval", "in", "full_rank_accum", "]", "\n", "return", "norm_val", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model._get_text": [[370, 381], ["spacy.load", "spacy.load.tokenizer.add_special_case", "spacy.load.tokenizer.add_special_case", "spacy.load.tokenizer.add_special_case", "torchtext.data.Field", "spacy.load.tokenizer"], "function", ["None"], ["", "", "def", "_get_text", "(", ")", ":", "\n", "    ", "spacy_en", "=", "spacy", ".", "load", "(", "\"en\"", ")", "\n", "spacy_en", ".", "tokenizer", ".", "add_special_case", "(", "\"<eos>\"", ",", "[", "{", "ORTH", ":", "\"<eos>\"", "}", "]", ")", "\n", "spacy_en", ".", "tokenizer", ".", "add_special_case", "(", "\"<bos>\"", ",", "[", "{", "ORTH", ":", "\"<bos>\"", "}", "]", ")", "\n", "spacy_en", ".", "tokenizer", ".", "add_special_case", "(", "\"<unk>\"", ",", "[", "{", "ORTH", ":", "\"<unk>\"", "}", "]", ")", "\n", "\n", "def", "spacy_tok", "(", "text", ")", ":", "\n", "        ", "return", "[", "tok", ".", "text", "for", "tok", "in", "spacy_en", ".", "tokenizer", "(", "text", ")", "]", "\n", "\n", "", "TEXT", "=", "torchtext", ".", "data", ".", "Field", "(", "lower", "=", "True", ",", "tokenize", "=", "spacy_tok", ")", "\n", "return", "TEXT", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model._get_dataset": [[382, 391], ["new_language_model._get_text", "torchtext.datasets.WikiText2.splits", "torchtext.datasets.PennTreebank.splits"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.new_language_model._get_text"], ["", "def", "_get_dataset", "(", "name", ",", "datasets_path", ")", ":", "\n", "    ", "TEXT", "=", "_get_text", "(", ")", "\n", "#TODO: Fix the data path story", "\n", "# Load and split data.", "\n", "if", "\"wikitext2\"", "in", "name", ":", "\n", "        ", "train", ",", "valid", ",", "test", "=", "torchtext", ".", "datasets", ".", "WikiText2", ".", "splits", "(", "TEXT", ",", "root", "=", "datasets_path", ")", "\n", "", "elif", "\"ptb\"", "in", "name", ":", "\n", "        ", "train", ",", "valid", ",", "test", "=", "torchtext", ".", "datasets", ".", "PennTreebank", ".", "splits", "(", "TEXT", ",", "root", "=", "datasets_path", ")", "\n", "", "return", "TEXT", ",", "train", ",", "valid", ",", "test", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.model.RNNModel.__init__": [[8, 42], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "model.RNNModel.init_weights", "torch.RNN", "torch.RNN", "getattr", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], ["def", "__init__", "(", "self", ",", "rnn_type", ",", "ntoken", ",", "ninp", ",", "nhid", ",", "nlayers", ",", "dropout", "=", "0.5", ",", "tie_weights", "=", "False", ")", ":", "\n", "        ", "super", "(", "RNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Embedding", "(", "ntoken", ",", "ninp", ")", "\n", "if", "rnn_type", "in", "[", "\"LSTM\"", ",", "\"GRU\"", "]", ":", "\n", "            ", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "rnn_type", ")", "(", "ninp", ",", "nhid", ",", "nlayers", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "nonlinearity", "=", "{", "\"RNN_TANH\"", ":", "\"tanh\"", ",", "\"RNN_RELU\"", ":", "\"relu\"", "}", "[", "rnn_type", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"\"\"An invalid option for `--model` was supplied,\n                                 options are ['LSTM', 'GRU', 'RNN_TANH' or 'RNN_RELU']\"\"\"", "\n", ")", "\n", "", "self", ".", "rnn", "=", "nn", ".", "RNN", "(", "ninp", ",", "nhid", ",", "nlayers", ",", "nonlinearity", "=", "nonlinearity", ",", "dropout", "=", "dropout", ")", "\n", "", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "nhid", ",", "ntoken", ")", "\n", "\n", "# Optionally tie weights as in:", "\n", "# \"Using the Output Embedding to Improve Language Models\" (Press & Wolf 2016)", "\n", "# https://arxiv.org/abs/1608.05859", "\n", "# and", "\n", "# \"Tying Word Vectors and Word Classifiers: A Loss Framework for Language Modeling\" (Inan et al. 2016)", "\n", "# https://arxiv.org/abs/1611.01462", "\n", "if", "tie_weights", ":", "\n", "            ", "if", "nhid", "!=", "ninp", ":", "\n", "                ", "raise", "ValueError", "(", "\"When using the tied flag, nhid must be equal to emsize\"", ")", "\n", "", "self", ".", "decoder", ".", "weight", "=", "self", ".", "encoder", ".", "weight", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "self", ".", "ntokens", "=", "ntoken", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.model.RNNModel.init_weights": [[43, 48], ["model.RNNModel.encoder.weight.data.uniform_", "model.RNNModel.decoder.bias.data.zero_", "model.RNNModel.decoder.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.model.RNNModel.forward": [[49, 55], ["model.RNNModel.drop", "model.RNNModel.rnn", "model.RNNModel.drop", "model.RNNModel.decoder", "model.RNNModel.encoder", "model.RNNModel.view", "model.RNNModel.view", "model.RNNModel.size", "model.RNNModel.size", "model.RNNModel.size", "model.RNNModel.size", "model.RNNModel.size", "model.RNNModel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "emb", "=", "self", ".", "drop", "(", "self", ".", "encoder", "(", "input", ")", ")", "\n", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "emb", ",", "hidden", ")", "\n", "output", "=", "self", ".", "drop", "(", "output", ")", "\n", "decoded", "=", "self", ".", "decoder", "(", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", "*", "output", ".", "size", "(", "1", ")", ",", "output", ".", "size", "(", "2", ")", ")", ")", "\n", "return", "decoded", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ",", "decoded", ".", "size", "(", "1", ")", ")", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.model.RNNModel.init_hidden": [[56, 65], ["next", "model.RNNModel.parameters", "next.new_zeros", "next.new_zeros", "next.new_zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "rnn_type", "==", "\"LSTM\"", ":", "\n", "            ", "return", "(", "\n", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", ",", "\n", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.new_lstm.model.RNNModel.repackage_hidden": [[66, 72], ["isinstance", "h.detach", "tuple", "model.RNNModel.repackage_hidden"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "", "def", "repackage_hidden", "(", "self", ",", "h", ")", ":", "\n", "        ", "\"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\"", "\n", "if", "isinstance", "(", "h", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "h", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "self", ".", "repackage_hidden", "(", "v", ")", "for", "v", "in", "h", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.__init__": [[7, 17], ["cifar100.cifar100Train._create_model", "cifar100.cifar100Train._create_data_loader", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_data_loader", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["    ", "def", "__init__", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "device", "=", "model_config", "[", "'device'", "]", "\n", "self", ".", "model", "=", "self", ".", "_create_model", "(", "model_config", "[", "'arch'", "]", ")", "\n", "# full train loader doesn't do sampling", "\n", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "full_train_loader", "=", "self", ".", "_create_data_loader", "(", "\n", "model_config", "[", "'data_path'", "]", ",", "model_config", "[", "'num_dataloader_threads'", "]", ",", "\n", "model_config", "[", "'train_batch_size'", "]", ",", "model_config", "[", "'test_batch_size'", "]", ",", "\n", "model_config", "[", "'is_distributed'", "]", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "model_config", "[", "'init_lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_model": [[18, 27], ["model.to", "getattr"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "_create_model", "(", "self", ",", "arch", ")", ":", "\n", "        ", "\"\"\"\n        Returns the model skeleton of the specified architecture\n        arch(string): Model architecture\n        \"\"\"", "\n", "#TODO: Fix this architecture thing", "\n", "model", "=", "getattr", "(", "cifar_architecture", ",", "arch", ")", "(", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train._create_data_loader": [[28, 72], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["", "def", "_create_data_loader", "(", "self", ",", "data_path", ",", "num_workers", ",", "train_batch_size", ",", "\n", "test_batch_size", ",", "is_distributed", ")", ":", "\n", "\n", "        ", "mean", "=", "[", "0.5070751592371323", ",", "0.48654887331495095", ",", "0.4409178433670343", "]", "\n", "std", "=", "[", "0.2673342858792401", ",", "0.2564384629170883", ",", "0.27615047132568404", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "training_set", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "data_path", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform_train", ")", "\n", "sampler", "=", "None", "\n", "is_shuffle", "=", "True", "\n", "if", "is_distributed", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "training_set", ")", "\n", "is_shuffle", "=", "False", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "full_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "sampler", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_set", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "data_path", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "(", "train_loader", ",", "test_loader", ",", "full_train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.train_single_iter": [[73, 95], ["cifar100.cifar100Train.model.train", "enumerate", "cifar100.cifar100Train.model", "cifar100.cifar100Train.criterion", "cifar100.cifar100Train.backward", "data.to", "target.to", "cifar100.cifar100Train.model.parameters", "logger.info", "len", "cifar100.cifar100Train.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train_single_iter", "(", "self", ",", "epoch", "=", "None", ",", "logger", "=", "None", ",", "for_autoscale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Train single iter and pack grads in a list and return that list\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "not", "for_autoscale", ":", "\n", "            ", "train_data_loader", "=", "self", ".", "train_loader", "\n", "", "else", ":", "\n", "            ", "train_data_loader", "=", "self", ".", "full_train_loader", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_array", "=", "[", "param", ".", "grad", ".", "data", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", "\n", "if", "batch_idx", "%", "20", "==", "0", ":", "\n", "                ", "if", "logger", "is", "not", "None", ":", "\n", "# not called by autoscale routine", "\n", "                    ", "logger", ".", "info", "(", "'Train Epoch(cifar100): {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "yield", "grad_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar100.cifar100.cifar100Train.validate_model": [[96, 112], ["cifar100.cifar100Train.model.eval", "len", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "cifar100.cifar100Train.model", "cifar100.cifar100Train.criterion().item", "pred.eq().sum().item", "len", "data.to", "target.to", "cifar100.cifar100Train.max", "len", "cifar100.cifar100Train.criterion", "pred.eq().sum", "pred.eq", "target.view_as"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "validate_model", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.Block.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "torch.autograd.Variable", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.VGG.__init__": [[16, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.VGG.modules", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "'''\n    VGG model \n    '''", "\n", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.VGG.forward": [[37, 42], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers": [[44, 58], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["\n", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg11": [[69, 72], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg11_bn": [[74, 77], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg11_bn", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg13": [[79, 82], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg13_bn": [[84, 87], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg16": [[89, 92], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg16_bn": [[94, 97], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg19": [[99, 102], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.vgg19_bn": [[104, 107], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.vgg.make_layers"], ["\n", "", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.BasicBlock.__init__": [[20, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.BasicBlock.forward": [[43, 45], ["torch.ReLU", "torch.ReLU", "resnet.BasicBlock.residual_function", "resnet.BasicBlock.shortcut"], "methods", ["None"], ["return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.BottleNeck.__init__": [[50, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.BottleNeck.forward": [[71, 73], ["torch.ReLU", "torch.ReLU", "resnet.BottleNeck.residual_function", "resnet.BottleNeck.shortcut"], "methods", ["None"], ["return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet.__init__": [[76, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowrankBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet._make_layer": [[94, 117], ["torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "LowRankBasicBlock1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "LowRankBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.ResNet.forward": [[118, 129], ["resnet.ResNet.conv1", "resnet.ResNet.conv2_x", "resnet.ResNet.conv3_x", "resnet.ResNet.conv4_x", "resnet.ResNet.conv5_x", "resnet.ResNet.avg_pool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["#self.bn1 = nn.BatchNorm2d(planes)", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv2_u", "=", "nn", ".", "Conv2d", "(", "planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "#self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(self.expansion*planes)", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.resnet18": [[130, 134], ["resnet.ResNet"], "function", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = F.relu(self.bn1(self.conv1_v(self.conv1_u(x))))", "\n", "#out = self.bn2(self.conv2_v(self.conv2_u(out)))", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1_v", "(", "self", ".", "conv1_u", "(", "x", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.resnet34": [[135, 139], ["resnet.ResNet"], "function", ["None"], ["out", "=", "self", ".", "conv2_v", "(", "self", ".", "conv2_u", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.resnet50": [[140, 144], ["resnet.ResNet"], "function", ["None"], ["\n", "", "", "class", "LowRankBasicBlock2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.resnet101": [[145, 149], ["resnet.ResNet"], "function", ["None"], ["        ", "super", "(", "LowRankBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "conv1_u", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_u", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.resnet.resnet152": [[150, 154], ["resnet.ResNet"], "function", ["None"], ["self", ".", "conv1_v", "=", "conv1x1", "(", "int", "(", "planes", "/", "CONST_RANK_DENOMINATOR", ")", ",", "planes", ")", "\n", "self", ".", "bn1_v", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "#self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "#self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.BasicResidualSEBlock.__init__": [[9, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["from", "torch", ".", "autograd", "import", "Variable", "\n", "\n", "\n", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.BasicResidualSEBlock.forward": [[37, 49], ["senet.BasicResidualSEBlock.shortcut", "senet.BasicResidualSEBlock.residual", "senet.BasicResidualSEBlock.squeeze", "squeeze.view.view.view", "senet.BasicResidualSEBlock.excitation", "excitation.view.view.view", "torch.relu", "torch.relu", "torch.relu", "squeeze.view.view.size", "senet.BasicResidualSEBlock.size", "senet.BasicResidualSEBlock.size", "excitation.view.view.expand_as"], "methods", ["None"], ["w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "PreActBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.BottleneckResidualSEBlock.__init__": [[54, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "SENet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.BottleneckResidualSEBlock.forward": [[86, 99], ["senet.BottleneckResidualSEBlock.shortcut", "senet.BottleneckResidualSEBlock.residual", "senet.BottleneckResidualSEBlock.squeeze", "squeeze.view.view.view", "senet.BottleneckResidualSEBlock.excitation", "excitation.view.view.view", "torch.relu", "torch.relu", "torch.relu", "squeeze.view.view.size", "senet.BottleneckResidualSEBlock.size", "senet.BottleneckResidualSEBlock.size", "excitation.view.view.expand_as"], "methods", ["None"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet.__init__": [[102, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "senet.SEResNet._make_stage", "senet.SEResNet._make_stage", "senet.SEResNet._make_stage", "senet.SEResNet._make_stage", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "\n", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet.forward": [[120, 134], ["senet.SEResNet.pre", "senet.SEResNet.stage1", "senet.SEResNet.stage2", "senet.SEResNet.stage3", "senet.SEResNet.stage4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "senet.SEResNet.view", "senet.SEResNet.linear", "senet.SEResNet.size"], "methods", ["None"], ["y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "# test()", "\n", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.SEResNet._make_stage": [[136, 147], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.seresnet18": [[148, 150], ["senet.SEResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.seresnet34": [[151, 153], ["senet.SEResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.seresnet50": [[154, 156], ["senet.SEResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.seresnet101": [[157, 159], ["senet.SEResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.senet.seresnet152": [[160, 162], ["senet.SEResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.Bottleneck.__init__": [[12, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet.__init__": [[39, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet._make_dense_layers": [[70, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet.forward": [[77, 87], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet121": [[88, 90], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet169": [[91, 93], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet201": [[94, 96], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.DenseNet161": [[97, 99], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.densenet_cifar": [[100, 102], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.test_densenet": [[103, 108], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.densenet.densenet_cifar"], ["", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.wide_basic.__init__": [[23, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.wide_basic.forward": [[37, 43], ["wresnet.wide_basic.dropout", "wresnet.wide_basic.conv2", "wresnet.wide_basic.shortcut", "wresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wresnet.wide_basic.bn2", "wresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet.__init__": [[45, 62], ["torch.Module.__init__", "print", "wresnet.conv3x3", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet._wide_layer": [[63, 72], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.Wide_ResNet.forward": [[73, 84], ["wresnet.Wide_ResNet.conv1", "wresnet.Wide_ResNet.layer1", "wresnet.Wide_ResNet.layer2", "wresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wresnet.Wide_ResNet.view", "wresnet.Wide_ResNet.linear", "wresnet.Wide_ResNet.bn1", "wresnet.Wide_ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv3x3": [[10, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.cifar_architecture.wresnet.wresnet_cifar100": [[85, 87], ["wresnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wresnet_cifar", "(", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "0", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.__init__": [[9, 17], ["torch.device", "torch.device", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "using_cuda", "=", "False", ",", "local_rank", "=", "0", ")", ":", "\n", "#bit2byte = load(name=\"bit2byte\", sources=[\"bit2byte.cpp\"], verbose=True)", "\n", "        ", "self", ".", "using_cuda", "=", "using_cuda", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "if", "using_cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "local_rank", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.packing": [[18, 33], ["src_tensor.to.to.size", "src_tensor.to.to.view", "len", "torch.zeros", "torch.cat", "src_tensor.to.to.view", "src_tensor.to.to.to", "bit2byte.packing", "dst_tensor.to.to.to"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "packing", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "src_tensor_size", "=", "src_tensor", ".", "size", "(", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "src_len", "=", "len", "(", "src_tensor", ")", "\n", "add_elm", "=", "32", "-", "(", "src_len", "%", "32", ")", "\n", "if", "src_len", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "new_tensor", "=", "torch", ".", "zeros", "(", "[", "add_elm", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "src_tensor", "=", "torch", ".", "cat", "(", "(", "src_tensor", ",", "new_tensor", ")", ",", "0", ")", "# padding", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "\n", "src_tensor", "=", "src_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "dst_tensor", "=", "bit2byte", ".", "packing", "(", "src_tensor", ")", "\n", "dst_tensor", "=", "dst_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "dst_tensor", ",", "src_tensor_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.unpacking": [[34, 49], ["compressor.compressor_modified.element_num", "src_tensor.int.int.int", "torch.ones", "new_tensor.float.float.view", "bit2byte.unpacking", "new_tensor.float.float.view", "new_tensor.float.float.view", "new_tensor.float.float.float", "new_tensor.float.float.add_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.element_num", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking"], ["", "def", "unpacking", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "src_element_num", "=", "self", ".", "element_num", "(", "src_tensor_size", ")", "\n", "add_elm", "=", "32", "-", "(", "src_element_num", "%", "32", ")", "\n", "if", "src_element_num", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "src_tensor", "=", "src_tensor", ".", "int", "(", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "src_element_num", "+", "add_elm", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", "[", ":", "src_element_num", "]", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "src_tensor_size", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", ".", "float", "(", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.majority_vote": [[50, 67], ["len", "torch.stack", "src_tensor.view.view.view", "torch.ones", "new_tensor.to.to.view", "bit2byte.unpacking", "new_tensor.to.to.permute().contiguous().view", "torch.sum", "new_tensor.to.to.view().permute", "torch.sign", "bit2byte.packing", "new_tensor.to.to.to", "len", "new_tensor.to.to.add_", "new_tensor.to.to.permute().contiguous", "new_tensor.to.to.view", "new_tensor.to.to.permute"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "majority_vote", "(", "self", ",", "src_tensor_list", ")", ":", "\n", "        ", "voter_num", "=", "len", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "torch", ".", "stack", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "full_size", "=", "32", "*", "len", "(", "src_tensor", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "full_size", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "#sum", "\n", "new_tensor", "=", "new_tensor", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "voter_num", ",", "-", "1", ")", "\n", "new_tensor", "=", "torch", ".", "sum", "(", "new_tensor", ",", "0", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ",", "32", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "new_tensor", "=", "torch", ".", "sign", "(", "new_tensor", ")", "\n", "new_tensor", "=", "bit2byte", ".", "packing", "(", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.element_num": [[69, 74], ["range", "len"], "methods", ["None"], ["", "def", "element_num", "(", "self", ",", "size", ")", ":", "\n", "        ", "num", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "size", ")", ")", ":", "\n", "            ", "num", "*=", "size", "[", "i", "]", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.compress": [[76, 78], ["compressor.compressor_modified.packing"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing"], ["", "def", "compress", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "return", "self", ".", "packing", "(", "src_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor_modified.uncompress": [[79, 82], ["compressor.compressor_modified.unpacking"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking"], ["", "def", "uncompress", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "dst_tensor", "=", "self", ".", "unpacking", "(", "src_tensor", ",", "src_tensor_size", ")", "\n", "return", "dst_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.__init__": [[85, 93], ["torch.device", "torch.device", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "using_cuda", "=", "False", ",", "local_rank", "=", "0", ")", ":", "\n", "#bit2byte = load(name=\"bit2byte\", sources=[\"bit2byte.cpp\"], verbose=True)", "\n", "        ", "self", ".", "using_cuda", "=", "using_cuda", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "if", "using_cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "local_rank", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing": [[94, 110], ["torch.sign", "src_tensor.to.to.size", "src_tensor.to.to.view", "len", "torch.zeros", "torch.cat", "src_tensor.to.to.view", "src_tensor.to.to.to", "bit2byte.packing", "dst_tensor.to.to.to"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "", "def", "packing", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "src_tensor", "=", "torch", ".", "sign", "(", "src_tensor", ")", "\n", "src_tensor_size", "=", "src_tensor", ".", "size", "(", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "src_len", "=", "len", "(", "src_tensor", ")", "\n", "add_elm", "=", "32", "-", "(", "src_len", "%", "32", ")", "\n", "if", "src_len", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "new_tensor", "=", "torch", ".", "zeros", "(", "[", "add_elm", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "src_tensor", "=", "torch", ".", "cat", "(", "(", "src_tensor", ",", "new_tensor", ")", ",", "0", ")", "# padding", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "\n", "src_tensor", "=", "src_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "dst_tensor", "=", "bit2byte", ".", "packing", "(", "src_tensor", ")", "\n", "dst_tensor", "=", "dst_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "dst_tensor", ",", "src_tensor_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking": [[111, 126], ["compressor.compressor.element_num", "src_tensor.int.int.int", "torch.ones", "new_tensor.float.float.view", "bit2byte.unpacking", "new_tensor.float.float.view", "new_tensor.float.float.view", "new_tensor.float.float.float", "new_tensor.float.float.add_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.element_num", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking"], ["", "def", "unpacking", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "src_element_num", "=", "self", ".", "element_num", "(", "src_tensor_size", ")", "\n", "add_elm", "=", "32", "-", "(", "src_element_num", "%", "32", ")", "\n", "if", "src_element_num", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "src_tensor", "=", "src_tensor", ".", "int", "(", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "src_element_num", "+", "add_elm", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", "[", ":", "src_element_num", "]", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "src_tensor_size", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", ".", "float", "(", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.majority_vote": [[127, 144], ["len", "torch.stack", "src_tensor.view.view.view", "torch.ones", "new_tensor.to.to.view", "bit2byte.unpacking", "new_tensor.to.to.permute().contiguous().view", "torch.sum", "new_tensor.to.to.view().permute", "torch.sign", "bit2byte.packing", "new_tensor.to.to.to", "len", "new_tensor.to.to.add_", "new_tensor.to.to.permute().contiguous", "new_tensor.to.to.view", "new_tensor.to.to.permute"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "majority_vote", "(", "self", ",", "src_tensor_list", ")", ":", "\n", "        ", "voter_num", "=", "len", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "torch", ".", "stack", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "full_size", "=", "32", "*", "len", "(", "src_tensor", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "full_size", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "#sum", "\n", "new_tensor", "=", "new_tensor", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "voter_num", ",", "-", "1", ")", "\n", "new_tensor", "=", "torch", ".", "sum", "(", "new_tensor", ",", "0", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ",", "32", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "new_tensor", "=", "torch", ".", "sign", "(", "new_tensor", ")", "\n", "new_tensor", "=", "bit2byte", ".", "packing", "(", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.element_num": [[146, 151], ["range", "len"], "methods", ["None"], ["", "def", "element_num", "(", "self", ",", "size", ")", ":", "\n", "        ", "num", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "size", ")", ")", ":", "\n", "            ", "num", "*=", "size", "[", "i", "]", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.compress": [[153, 155], ["compressor.compressor.packing"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.packing"], ["", "def", "compress", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "return", "self", ".", "packing", "(", "src_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.uncompress": [[156, 159], ["compressor.compressor.unpacking"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.unpacking"], ["", "def", "uncompress", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "dst_tensor", "=", "self", ".", "unpacking", "(", "src_tensor", ",", "src_tensor_size", ")", "\n", "return", "dst_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits": [[9, 11], ["tensor.element_size", "tensor.nelement"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.element_size", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["def", "n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.quantization_mapper": [[13, 66], ["torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.min", "torch.max", "torch.bernoulli", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "compressor.compressor_modified", "compressor.compressor_modified.compress", "stochastic_binary_quantization.n_bits", "print", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "compressor.compressor_modified.uncompress", "torch.where", "print", "torch.cuda.Event.record", "torch.cuda.synchronize", "print", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.compress", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.stochastic_binary_quantization.n_bits", "home.repos.pwc.inspect_result.hwang595_Pufferfish.extra_exps_rebuttal_mlsys21.compressor.compressor.uncompress"], ["", "def", "quantization_mapper", "(", "grad_vec", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "# quantization described in section 2.1", "\n", "#quantization_start = time.time()", "\n", "    ", "quantization_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "quantization_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "quantization_start", ".", "record", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#quantization_start = time.time()", "\n", "min_val", "=", "torch", ".", "min", "(", "grad_vec", ")", "\n", "max_val", "=", "torch", ".", "max", "(", "grad_vec", ")", "\n", "prob_vector", "=", "(", "grad_vec", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "dices_vector", "=", "torch", ".", "bernoulli", "(", "prob_vector", ")", "# binary", "\n", "dices_vector", "=", "dices_vector", "*", "2", "-", "1", "\n", "quantization_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "#quantization_end = time.time()", "\n", "#quantization_cands = [max_val, min_val]", "\n", "#quantized_grad_vec = np.random.choice(quantization_cands, grad_vec.shape[0], p=prob_vector)", "\n", "#encode_start = time.time()", "\n", "\n", "encode_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "encode_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "#torch.cuda.synchronize()", "\n", "encode_start", ".", "record", "(", ")", "\n", "#encode_start = time.time()", "\n", "compressor", "=", "compressor_modified", "(", "using_cuda", "=", "True", ",", "local_rank", "=", "0", ")", "\n", "compressed_dice", ",", "dice_size", "=", "compressor", ".", "compress", "(", "dices_vector", ")", "\n", "num_bits_comm", "=", "n_bits", "(", "compressed_dice", ")", "\n", "print", "(", "\"n bits comm: {}\"", ".", "format", "(", "num_bits_comm", ")", ")", "\n", "encode_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "#encode_end = time.time()", "\n", "\n", "\n", "decode_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decode_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decode_start", ".", "record", "(", ")", "\n", "recovered_dice", "=", "compressor", ".", "uncompress", "(", "compressed_dice", ",", "dice_size", ")", "\n", "recovered_dice", "=", "(", "recovered_dice", "+", "1", ")", "/", "2", "\n", "quantized_grad_vec", "=", "torch", ".", "where", "(", "recovered_dice", "==", "1", ",", "max_val", ",", "min_val", ")", "\n", "print", "(", "\"dices_vector: {}, recovered_dice: {}\"", ".", "format", "(", "dices_vector", ",", "recovered_dice", ")", ")", "\n", "decode_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "#print(\"##### quant cost: {}, encode cost: {}\".format(quantization_end-quantization_start, encode_end-encode_start))", "\n", "print", "(", "\"##### quant cost: {}, encode cost: {}, decode cost: {}\"", ".", "format", "(", "quantization_start", ".", "elapsed_time", "(", "quantization_end", ")", ",", "\n", "encode_start", ".", "elapsed_time", "(", "encode_end", ")", ",", "decode_start", ".", "elapsed_time", "(", "decode_end", ")", ")", ")", "\n", "\n", "#print(\"dices vector: {}, recovered_dice: {}\".format(dices_vector, recovered_dice))", "\n", "#quantized_grad_vec = torch.where(dices_vector==1, max_val, min_val)", "\n", "#print(\"max:{}, min:{}, quantized:{}\".format(max_val, min_val, quantized_grad_vec))", "\n", "return", "quantized_grad_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.bool_string": [[26, 30], ["ValueError"], "function", ["None"], ["\n", "logging", ".", "basicConfig", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.seed": [[82, 93], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "logger.info"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "# alternative implementation: u_weight_alt = torch.mm(u, torch.diag(torch.sqrt(s)))", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "# alternative implementation: v_weight_alt = torch.mm(torch.diag(torch.sqrt(s)), v.t())", "\n", "#print(\"layer indeix: {}, dist u u_alt:{}, dist v v_alt: {}\".format(item_index, torch.dist(u_weight, u_weight_alt), torch.dist(v_weight.t(), v_weight_alt)))", "\n", "#print(\"layer indeix: {}, dist u u_alt:{}, dist v v_alt: {}\".format(item_index, torch.equal(u_weight, u_weight_alt), torch.equal(v_weight.t(), v_weight_alt)))", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.batchify": [[121, 129], ["data.view().t().contiguous.narrow", "data.view().t().contiguous.view().t().contiguous", "data.view().t().contiguous.to", "data.view().t().contiguous.size", "data.view().t().contiguous.view().t", "data.view().t().contiguous.view"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["                ", "reconstructed_aggregator", ".", "append", "(", "param", ")", "\n", "\n", "\n", "", "", "model_counter", "=", "0", "\n", "reload_state_dict", "=", "{", "}", "\n", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"#### {}, {}, recons agg: {}\uff0c param: {}\".format(item_index, param_name, ", "\n", "#                                                                        reconstructed_aggregator[model_counter].size(),", "\n", "#                                                                       param.size()))", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.decompose_vanilla_model": [[131, 159], ["enumerate", "enumerate", "low_rank_model.load_state_dict", "vanilla_model.state_dict().items", "low_rank_model.state_dict().items", "min", "int", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "collected_weights.append", "collected_weights.append", "collected_weights.append", "param.size", "collected_weights[].size", "vanilla_model.state_dict", "len", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "v_weight_sliced.t", "low_rank_model.state_dict", "param.size", "param.size", "param.size"], "function", ["None"], ["reload_state_dict", "[", "param_name", "]", "=", "reconstructed_aggregator", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "for", "item_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "4", "and", "item_index", "not", "in", "range", "(", "0", ",", "13", ")", "and", "\".shortcut.\"", "not", "in", "param_name", ":", "\n", "# resize --> svd --> two layer", "\n", "                ", "param_reshaped", "=", "param", ".", "view", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "rank", "=", "min", "(", "param_reshaped", ".", "size", "(", ")", "[", "0", "]", ",", "param_reshaped", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param_reshaped", ")", "\n", "\n", "sliced_rank", "=", "int", "(", "rank", "/", "rank_factor", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "\n", "u_weight_sliced_shape", ",", "v_weight_sliced_shape", "=", "u_weight_sliced", ".", "size", "(", ")", ",", "v_weight_sliced", ".", "size", "(", ")", "\n", "\n", "model_weight_v", "=", "u_weight_sliced", ".", "view", "(", "u_weight_sliced_shape", "[", "0", "]", ",", "\n", "u_weight_sliced_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "model_weight_u", "=", "v_weight_sliced", ".", "t", "(", ")", ".", "view", "(", "v_weight_sliced_shape", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "param", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_u", ")", "\n", "reconstructed_aggregator", ".", "append", "(", "model_weight_v", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.param_counter": [[170, 176], ["enumerate", "model.named_parameters", "logger.info", "param.nelement", "param.size"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["model_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported model arch ...\"", ")", "\n", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reload_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.repackage_hidden": [[200, 207], ["isinstance", "h.detach", "tuple", "main.repackage_hidden"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["#backward_start = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "iter_end", ".", "record", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.get_batch": [[219, 224], ["min", "source[].view", "len"], "function", ["None"], ["\n", "", "", "return", "epoch_timer", "\n", "\n", "\n", "", "def", "validate", "(", "test_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ",", "device", ")", ":", "\n", "    ", "global", "best_acc", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.evaluate": [[226, 244], ["low_rank_model.eval", "len", "low_rank_model.init_hidden", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "main.get_batch", "len", "data_source.size", "low_rank_model", "output.view.view", "low_rank_model", "main.repackage_hidden", "len", "criterion().item", "criterion"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "\n", "", "", "assert", "total", "==", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.evaluate_vanilla": [[246, 264], ["vanilla_model.eval", "len", "vanilla_model.init_hidden", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "main.get_batch", "len", "data_source.size", "vanilla_model", "output.view.view", "vanilla_model", "main.repackage_hidden", "len", "criterion().item", "criterion"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "acc", ">", "best_acc", ":", "\n", "            ", "logger", ".", "info", "(", "'###### Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_seed{}_best.pth'", ".", "format", "(", "args", ".", "arch", ",", "args", ".", "seed", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n", "\n", "", "", "", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.train": [[266, 308], ["low_rank_model.train", "time.time", "len", "enumerate", "low_rank_model.init_hidden", "range", "main.get_batch", "low_rank_model.zero_grad", "criterion", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "low_rank_model.parameters", "criterion.item", "low_rank_model", "output.view.view", "main.repackage_hidden", "low_rank_model", "low_rank_model.parameters", "p.data.add_", "logger.info", "time.time", "train_data.size", "time.time", "math.exp", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "#parser.add_argument('-a', '--arch', metavar='ARCH', default='resnet18',", "\n", "#                choices=model_names,", "\n", "#                help='model architecture: ' +", "\n", "#                    ' | '.join(model_names) +", "\n", "#                    ' (default: resnet18)')", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "default", "=", "'resnet18'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "'the random seed to use in the experiment for reproducibility'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-re'", ",", "'--resume'", ",", "default", "=", "False", ",", "type", "=", "bool_string", ",", "\n", "help", "=", "'wether or not to resume from a checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eva'", ",", "'--evaluate'", ",", "type", "=", "bool_string", ",", "default", "=", "False", ",", "\n", "help", "=", "'wether or not to evaluate the model after loading the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'the rank factor that is going to use in the low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'-cp'", ",", "'--ckpt_path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint/vgg19_best.pth\"", ",", "\n", "help", "=", "'path to the checkpoint to resume.'", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.train_vanilla": [[310, 352], ["vanilla_model.train", "time.time", "len", "enumerate", "vanilla_model.init_hidden", "range", "main.get_batch", "vanilla_model.zero_grad", "criterion", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "vanilla_model.parameters", "criterion.item", "vanilla_model", "output.view.view", "main.repackage_hidden", "vanilla_model", "vanilla_model.parameters", "p.data.add_", "logger.info", "time.time", "train_data.size", "time.time", "math.exp", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "\n", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "        ", "args", ".", "fr_warmup_epoch", "=", "args", ".", "epochs", "\n", "\n", "# let's enable cudnn benchmark", "\n", "", "seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.main.export_onnx": [[354, 361], ["logger.info", "model.eval", "torch.LongTensor().zero_().view().to", "torch.LongTensor().zero_().view().to", "torch.LongTensor().zero_().view().to", "torch.LongTensor().zero_().view().to", "model.init_hidden", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "os.path.realpath", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden"], ["#model = vgg11_bn().to(device)", "\n", "#model = LowRankVGG().to(device)", "\n", "#model = models.resnet50(num_classes=10).to(device)", "\n", "#model = models.__dict__[args.arch](num_classes=10).to(device)", "\n", "#model = LowRankResNet18().to(device)", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Dictionary.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Dictionary.add_word": [[10, 15], ["data.Dictionary.idx2word.append", "len"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "idx2word", ".", "append", "(", "word", ")", "\n", "self", ".", "word2idx", "[", "word", "]", "=", "len", "(", "self", ".", "idx2word", ")", "-", "1", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Dictionary.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.__init__": [[21, 26], ["data.Dictionary", "data.Corpus.tokenize", "data.Corpus.tokenize", "data.Corpus.tokenize", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "dictionary", "=", "Dictionary", "(", ")", "\n", "self", ".", "train", "=", "self", ".", "tokenize", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "valid", "=", "self", ".", "tokenize", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "test", "=", "self", ".", "tokenize", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Corpus.tokenize": [[27, 49], ["os.path.exists", "io.open", "io.open", "torch.cat", "idss.append", "line.split", "data.Corpus.dictionary.add_word", "line.split", "torch.cat.append", "torch.tensor().type", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.data.Dictionary.add_word"], ["", "def", "tokenize", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Tokenizes a text file.\"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "# Add words to the dictionary", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "words", "=", "line", ".", "split", "(", ")", "+", "[", "'<eos>'", "]", "\n", "for", "word", "in", "words", ":", "\n", "                    ", "self", ".", "dictionary", ".", "add_word", "(", "word", ")", "\n", "\n", "# Tokenize file content", "\n", "", "", "", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "idss", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "                ", "words", "=", "line", ".", "split", "(", ")", "+", "[", "'<eos>'", "]", "\n", "ids", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "                    ", "ids", ".", "append", "(", "self", ".", "dictionary", ".", "word2idx", "[", "word", "]", ")", "\n", "", "idss", ".", "append", "(", "torch", ".", "tensor", "(", "ids", ")", ".", "type", "(", "torch", ".", "int64", ")", ")", "\n", "", "ids", "=", "torch", ".", "cat", "(", "idss", ")", "\n", "\n", "", "return", "ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.NaiveLSTM.__init__": [[19, 47], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "print", "model.NaiveLSTM.init_weights", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model.NaiveLSTM.W_ii.size", "model.NaiveLSTM.W_hi.size", "model.NaiveLSTM.W_if.size", "model.NaiveLSTM.W_hf.size", "model.NaiveLSTM.W_ig.size", "model.NaiveLSTM.W_hg.size", "model.NaiveLSTM.W_io.size", "model.NaiveLSTM.W_ho.size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], ["\"\"\"An invalid option for `--model` was supplied,\n                                 options are ['LSTM', 'GRU', 'RNN_TANH' or 'RNN_RELU']\"\"\"", "\n", ")", "\n", "", "self", ".", "rnn", "=", "nn", ".", "RNN", "(", "ninp", ",", "nhid", ",", "nlayers", ",", "nonlinearity", "=", "nonlinearity", ",", "dropout", "=", "dropout", ")", "\n", "", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "nhid", ",", "ntoken", ")", "\n", "\n", "# Optionally tie weights as in:", "\n", "# \"Using the Output Embedding to Improve Language Models\" (Press & Wolf 2016)", "\n", "# https://arxiv.org/abs/1608.05859", "\n", "# and", "\n", "# \"Tying Word Vectors and Word Classifiers: A Loss Framework for Language Modeling\" (Inan et al. 2016)", "\n", "# https://arxiv.org/abs/1611.01462", "\n", "if", "tie_weights", ":", "\n", "            ", "if", "nhid", "!=", "ninp", ":", "\n", "                ", "raise", "ValueError", "(", "\"When using the tied flag, nhid must be equal to emsize\"", ")", "\n", "", "self", ".", "decoder", ".", "weight", "=", "self", ".", "encoder", ".", "weight", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "self", ".", "ntokens", "=", "ntoken", "\n", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "self", ".", "encoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.NaiveLSTM.init_weights": [[48, 54], ["model.NaiveLSTM.parameters", "p.data.ndimension", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "emb", "=", "self", ".", "drop", "(", "self", ".", "encoder", "(", "input", ")", ")", "\n", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "emb", ",", "hidden", ")", "\n", "output", "=", "self", ".", "drop", "(", "output", ")", "\n", "decoded", "=", "self", ".", "decoder", "(", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", "*", "output", ".", "size", "(", "1", ")", ",", "output", ".", "size", "(", "2", ")", ")", ")", "\n", "return", "decoded", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ",", "decoded", ".", "size", "(", "1", ")", ")", ",", "hidden", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.NaiveLSTM.forward": [[55, 80], ["x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "h_t.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["\n", "", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "rnn_type", "==", "\"LSTM\"", ":", "\n", "            ", "return", "(", "\n", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", ",", "\n", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "weight", ".", "new_zeros", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "nhid", ")", "\n", "\n", "", "", "def", "repackage_hidden", "(", "self", ",", "h", ")", ":", "\n", "        ", "\"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\"", "\n", "if", "isinstance", "(", "h", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "h", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "self", ".", "repackage_hidden", "(", "v", ")", "for", "v", "in", "h", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.OptimizedLSTM.__init__": [[83, 91], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.OptimizedLSTM.init_weights", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.OptimizedLSTM.init_weights": [[92, 98], ["model.OptimizedLSTM.parameters", "p.data.ndimension", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.OptimizedLSTM.forward": [[99, 129], ["x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_seq.transpose().contiguous.transpose().contiguous.transpose().contiguous", "hidden_seq.transpose().contiguous.transpose().contiguous.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "h_t.unsqueeze", "hidden_seq.transpose().contiguous.transpose().contiguous.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankLSTM.__init__": [[132, 165], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.LowRankLSTM.init_weights", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankLSTM.init_weights": [[166, 172], ["model.LowRankLSTM.parameters", "p.data.ndimension", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankLSTM.forward": [[173, 196], ["x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "h_t.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.StackedLSTM.__init__": [[199, 210], ["torch.Module.__init__", "model.NaiveLSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model.NaiveLSTM", "model.NaiveLSTM"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.StackedLSTM.forward": [[211, 221], ["model.StackedLSTM.lstm1", "model.StackedLSTM.dropout", "model.StackedLSTM.lstm2", "model.StackedLSTM.lstm1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankStackedLSTM.__init__": [[224, 238], ["torch.Module.__init__", "model.LowRankLSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model.LowRankLSTM", "model.LowRankLSTM"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankStackedLSTM.forward": [[239, 249], ["model.LowRankStackedLSTM.lstm1", "model.LowRankStackedLSTM.dropout", "model.LowRankStackedLSTM.lstm2", "model.LowRankStackedLSTM.lstm1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankRNNModel.__init__": [[253, 287], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "model.LowRankRNNModel.init_weights", "model.LowRankStackedLSTM", "torch.RNN", "torch.RNN", "torch.RNN", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankRNNModel.init_weights": [[288, 293], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankRNNModel.forward": [[294, 301], ["model.LowRankRNNModel.drop", "model.LowRankRNNModel.rnn", "model.LowRankRNNModel.drop", "model.LowRankRNNModel.decoder", "decoded.view.view.view", "model.LowRankRNNModel.encoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.LowRankRNNModel.init_hidden": [[302, 309], ["next", "model.LowRankRNNModel.parameters", "next.new_zeros", "next.new_zeros", "next.new_zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.__init__": [[314, 347], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "model.RNNModel.init_weights", "model.StackedLSTM", "torch.RNN", "torch.RNN", "torch.RNN", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_weights": [[348, 353], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.forward": [[354, 361], ["model.RNNModel.drop", "model.RNNModel.rnn", "model.RNNModel.drop", "model.RNNModel.decoder", "decoded.view.view.view", "model.RNNModel.encoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden": [[362, 375], ["next", "model.RNNModel.parameters", "next.new_zeros", "next.new_zeros", "next.new_zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.PositionalEncoding.__init__": [[454, 465], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "model.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.PositionalEncoding.forward": [[466, 479], ["model.PositionalEncoding.dropout", "x.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.__init__": [[483, 499], ["torch.Module.__init__", "model.PositionalEncoding", "TransformerEncoderLayer", "TransformerEncoder", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "model.TransformerModel.init_weights", "ImportError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel._generate_square_subsequent_mask": [[500, 504], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.init_weights": [[505, 510], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel.forward": [[511, 525], ["model.TransformerModel.pos_encoder", "model.TransformerModel.transformer_encoder", "model.TransformerModel.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model.TransformerModel.encoder", "math.sqrt", "model.TransformerModel._generate_square_subsequent_mask().to", "model.TransformerModel.src_mask.size", "len", "model.TransformerModel._generate_square_subsequent_mask", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.TransformerModel._generate_square_subsequent_mask"], []], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.bool_string": [[23, 27], ["ValueError"], "function", ["None"], ["def", "bool_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.batchify": [[98, 106], ["data.view().t().contiguous.narrow", "data.view().t().contiguous.view().t().contiguous", "data.view().t().contiguous.to", "data.view().t().contiguous.size", "data.view().t().contiguous.view().t", "data.view().t().contiguous.view"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["def", "batchify", "(", "data", ",", "bsz", ")", ":", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "    ", "nbatch", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "nbatch", "*", "bsz", ")", "\n", "# Evenly divide the data across the bsz batches.", "\n", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "data", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden": [[132, 139], ["isinstance", "h.detach", "tuple", "language_main_backup.repackage_hidden"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["def", "repackage_hidden", "(", "h", ")", ":", "\n", "    ", "\"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\"", "\n", "\n", "if", "isinstance", "(", "h", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "h", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "repackage_hidden", "(", "v", ")", "for", "v", "in", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch": [[151, 156], ["min", "source[].view", "len"], "function", ["None"], ["", "", "def", "get_batch", "(", "source", ",", "i", ")", ":", "\n", "    ", "seq_len", "=", "min", "(", "args", ".", "bptt", ",", "len", "(", "source", ")", "-", "1", "-", "i", ")", "\n", "data", "=", "source", "[", "i", ":", "i", "+", "seq_len", "]", "\n", "target", "=", "source", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", ".", "view", "(", "-", "1", ")", "\n", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.evaluate": [[158, 176], ["model.eval", "len", "model.init_hidden", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "language_main_backup.get_batch", "len", "data_source.size", "model", "output.view.view", "model", "language_main_backup.repackage_hidden", "len", "criterion().item", "criterion"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "def", "evaluate", "(", "data_source", ")", ":", "\n", "# Turn on evaluation mode which disables dropout.", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0.", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "if", "args", ".", "model", "!=", "'Transformer'", ":", "\n", "        ", "hidden", "=", "model", ".", "init_hidden", "(", "eval_batch_size", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "data_source", ".", "size", "(", "0", ")", "-", "1", ",", "args", ".", "bptt", ")", ":", "\n", "            ", "data", ",", "targets", "=", "get_batch", "(", "data_source", ",", "i", ")", "\n", "if", "args", ".", "model", "==", "'Transformer'", ":", "\n", "                ", "output", "=", "model", "(", "data", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "ntokens", ")", "\n", "", "else", ":", "\n", "                ", "output", ",", "hidden", "=", "model", "(", "data", ",", "hidden", ")", "\n", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "", "total_loss", "+=", "len", "(", "data", ")", "*", "criterion", "(", "output", ",", "targets", ")", ".", "item", "(", ")", "\n", "", "", "return", "total_loss", "/", "(", "len", "(", "data_source", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.train": [[178, 220], ["model.train", "time.time", "len", "enumerate", "model.init_hidden", "range", "language_main_backup.get_batch", "model.zero_grad", "criterion", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.parameters", "criterion.item", "model", "output.view.view", "language_main_backup.repackage_hidden", "model", "model.parameters", "p.data.add_", "logger.info", "time.time", "train_data.size", "time.time", "math.exp", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.get_batch", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.repackage_hidden"], ["", "def", "train", "(", ")", ":", "\n", "# Turn on training mode which enables dropout.", "\n", "    ", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ntokens", "=", "len", "(", "corpus", ".", "dictionary", ")", "\n", "if", "args", ".", "model", "!=", "'Transformer'", ":", "\n", "        ", "hidden", "=", "model", ".", "init_hidden", "(", "args", ".", "batch_size", ")", "\n", "\n", "", "for", "batch", ",", "i", "in", "enumerate", "(", "range", "(", "0", ",", "train_data", ".", "size", "(", "0", ")", "-", "1", ",", "args", ".", "bptt", ")", ")", ":", "\n", "        ", "data", ",", "targets", "=", "get_batch", "(", "train_data", ",", "i", ")", "\n", "# Starting each batch, we detach the hidden state from how it was previously produced.", "\n", "# If we didn't, the model would try backpropagating all the way to start of the dataset.", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "model", "==", "'Transformer'", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "ntokens", ")", "\n", "", "else", ":", "\n", "            ", "hidden", "=", "repackage_hidden", "(", "hidden", ")", "\n", "output", ",", "hidden", "=", "model", "(", "data", ",", "hidden", ")", "\n", "", "loss", "=", "criterion", "(", "output", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# `clip_grad_norm` helps prevent the exploding gradient problem in RNNs / LSTMs.", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "           ", "p", ".", "data", ".", "add_", "(", "p", ".", "grad", ",", "alpha", "=", "-", "lr", ")", "\n", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "batch", "%", "args", ".", "log_interval", "==", "0", "and", "batch", ">", "0", ":", "\n", "            ", "cur_loss", "=", "total_loss", "/", "args", ".", "log_interval", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "info", "(", "'| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.2f} | ms/batch {:5.2f} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch", ",", "len", "(", "train_data", ")", "//", "args", ".", "bptt", ",", "lr", ",", "\n", "elapsed", "*", "1000", "/", "args", ".", "log_interval", ",", "cur_loss", ",", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "total_loss", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "if", "args", ".", "dry_run", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.backup.language_main_backup.export_onnx": [[222, 229], ["logger.info", "model.eval", "torch.LongTensor().zero_().view().to", "torch.LongTensor().zero_().view().to", "torch.LongTensor().zero_().view().to", "torch.LongTensor().zero_().view().to", "model.init_hidden", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "os.path.realpath", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_().view", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.word_language_model.model.RNNModel.init_hidden"], ["", "", "", "def", "export_onnx", "(", "path", ",", "batch_size", ",", "seq_len", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'The model is also exported in ONNX format at {}'", ".", "\n", "format", "(", "os", ".", "path", ".", "realpath", "(", "args", ".", "onnx_export", ")", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "dummy_input", "=", "torch", ".", "LongTensor", "(", "seq_len", "*", "batch_size", ")", ".", "zero_", "(", ")", ".", "view", "(", "-", "1", ",", "batch_size", ")", ".", "to", "(", "device", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "batch_size", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ",", "(", "dummy_input", ",", "hidden", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_complexity_info": [[17, 54], ["isinstance", "flops_counter.add_flops_counting_methods", "add_flops_counting_methods.eval", "add_flops_counting_methods.start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "add_flops_counting_methods.", "flops_counter.print_model_with_flops", "torch.ones().new_empty", "torch.ones().new_empty", "flops_counter.flops_to_string", "flops_counter.params_to_string", "torch.ones().new_empty", "torch.ones().new_empty", "torch.ones", "torch.ones", "next", "next", "torch.ones", "torch.ones", "add_flops_counting_methods.parameters", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_flops_counting_methods", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.start_flops_count", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.stop_flops_count", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.print_model_with_flops", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.params_to_string"], ["def", "get_model_complexity_info", "(", "model", ",", "input_res", ",", "\n", "print_per_layer_stat", "=", "True", ",", "\n", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ",", "ost", "=", "sys", ".", "stdout", ",", "\n", "verbose", "=", "False", ",", "ignore_modules", "=", "[", "]", ",", "\n", "custom_modules_hooks", "=", "{", "}", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "1", "\n", "assert", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", "\n", "global", "CUSTOM_MODULES_MAPPING", "\n", "CUSTOM_MODULES_MAPPING", "=", "custom_modules_hooks", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", "\n", "flops_model", ".", "start_flops_count", "(", "ost", "=", "ost", ",", "verbose", "=", "verbose", ",", "ignore_list", "=", "ignore_modules", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "(", "1", ",", "*", "input_res", ")", ",", "\n", "dtype", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "(", "1", ",", "*", "input_res", ")", ")", "\n", "\n", "", "_", "=", "flops_model", "(", "batch", ")", "\n", "\n", "", "flops_count", ",", "params_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ",", "flops_count", ",", "params_count", ",", "ost", "=", "ost", ")", "\n", "", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "CUSTOM_MODULES_MAPPING", "=", "{", "}", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.flops_to_string": [[56, 75], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.params_to_string": [[77, 92], ["str", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ",", "units", "=", "None", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "params_num", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'M'", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'K'", ":", "\n", "            ", "return", "str", "(", "round", "(", "params_num", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.print_model_with_flops": [[94, 143], ["model.apply", "print", "model.apply", "flops_counter.is_supported_instance", "flops_counter.is_supported_instance", "flops_counter..accumulate_params", "flops_counter..accumulate_flops", "accumulate_flops.__get__", "accumulate_params.__get__", "flops_repr.__get__", "hasattr", "hasattr", "flops_counter..children", "flops_counter..children", "m.accumulate_params", "m.accumulate_flops", "flops_counter.params_to_string", "flops_counter.flops_to_string", "flops_counter..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.params_to_string", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.flops_to_string"], ["", "", "", "def", "print_model_with_flops", "(", "model", ",", "total_flops", ",", "total_params", ",", "units", "=", "'GMac'", ",", "\n", "precision", "=", "3", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "\n", "    ", "def", "accumulate_params", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__params__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_params", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_params_num", "=", "self", ".", "accumulate_params", "(", ")", "\n", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "', '", ".", "join", "(", "[", "params_to_string", "(", "accumulated_params_num", ",", "units", "=", "'M'", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} Params'", ".", "format", "(", "accumulated_params_num", "/", "total_params", ")", ",", "\n", "flops_to_string", "(", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "]", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "m", ".", "accumulate_params", "=", "accumulate_params", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ",", "file", "=", "ost", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_parameters_number": [[145, 148], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_flops_counting_methods": [[150, 161], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.compute_average_flops_cost": [[163, 180], ["flops_counter..modules", "flops_counter.get_model_parameters_number", "flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean flops consumption per image.\n\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "params_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "", "", "params_sum", "=", "get_model_parameters_number", "(", "self", ")", "\n", "return", "flops_sum", "/", "batches_count", ",", "params_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.start_flops_count": [[182, 214], ["flops_counter.add_batch_counter_hook_function", "set", "flops_counter..apply", "functools.partial", "type", "set.add", "flops_counter.is_supported_instance", "flops_counter.is_supported_instance", "type", "hasattr", "set.add", "set.add", "type", "module.register_forward_hook", "module.register_forward_hook", "type", "print", "type", "type", "type", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_batch_counter_hook_function", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["", "def", "start_flops_count", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "seen_types", "=", "set", "(", ")", "\n", "def", "add_flops_counter_hook_function", "(", "module", ",", "ost", ",", "verbose", ",", "ignore_list", ")", ":", "\n", "        ", "if", "type", "(", "module", ")", "in", "ignore_list", ":", "\n", "            ", "seen_types", ".", "add", "(", "type", "(", "module", ")", ")", "\n", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "                ", "module", ".", "__params__", "=", "0", "\n", "", "", "elif", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "                ", "return", "\n", "", "if", "type", "(", "module", ")", "in", "CUSTOM_MODULES_MAPPING", ":", "\n", "                ", "handle", "=", "module", ".", "register_forward_hook", "(", "CUSTOM_MODULES_MAPPING", "[", "type", "(", "module", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "handle", "=", "module", ".", "register_forward_hook", "(", "MODULES_MAPPING", "[", "type", "(", "module", ")", "]", ")", "\n", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "seen_types", ".", "add", "(", "type", "(", "module", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "verbose", "and", "not", "type", "(", "module", ")", "in", "(", "nn", ".", "Sequential", ",", "nn", ".", "ModuleList", ")", "and", "not", "type", "(", "module", ")", "in", "seen_types", ":", "\n", "                ", "print", "(", "'Warning: module '", "+", "type", "(", "module", ")", ".", "__name__", "+", "' is treated as a zero-op.'", ",", "file", "=", "ost", ")", "\n", "", "seen_types", ".", "add", "(", "type", "(", "module", ")", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "partial", "(", "add_flops_counter_hook_function", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.stop_flops_count": [[216, 227], ["flops_counter.remove_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.reset_flops_count": [[229, 239], ["flops_counter.add_batch_counter_variables_or_reset", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.empty_flops_counter_hook": [[242, 244], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.upsample_flops_counter_hook": [[246, 253], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.relu_flops_counter_hook": [[255, 258], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.linear_flops_counter_hook": [[260, 264], ["int", "numpy.prod"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "output_last_dim", "=", "output", ".", "shape", "[", "-", "1", "]", "# pytorch checks dimensions, so here we don't care much", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", "*", "output_last_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.pool_flops_counter_hook": [[266, 269], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.bn_flops_counter_hook": [[271, 279], ["numpy.prod", "int"], "function", ["None"], ["", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "affine", "\n", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.deconv_flops_counter_hook": [[281, 305], ["int"], "function", ["None"], ["", "def", "deconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", ",", "input_width", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "input_height", "*", "input_width", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "bias_flops", "=", "out_channels", "*", "batch_size", "*", "output_height", "*", "output_height", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.conv_flops_counter_hook": [[307, 335], ["list", "list", "int", "int", "int", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "int", "(", "np", ".", "prod", "(", "kernel_dims", ")", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "int", "(", "np", ".", "prod", "(", "output_dims", ")", ")", "\n", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.batch_counter_hook": [[337, 347], ["len", "len", "print"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "if", "len", "(", "input", ")", ">", "0", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "        ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "print", "(", "'Warning! No positional inputs found for a module, assuming batch size is 1.'", ")", "\n", "", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.rnn_flops": [[349, 372], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "rnn_flops", "(", "flops", ",", "rnn_module", ",", "w_ih", ",", "w_hh", ",", "input_size", ")", ":", "\n", "# matrix matrix mult ih state and internal state", "\n", "    ", "flops", "+=", "w_ih", ".", "shape", "[", "0", "]", "*", "w_ih", ".", "shape", "[", "1", "]", "\n", "# matrix matrix mult hh state and internal state", "\n", "flops", "+=", "w_hh", ".", "shape", "[", "0", "]", "*", "w_hh", ".", "shape", "[", "1", "]", "\n", "if", "isinstance", "(", "rnn_module", ",", "(", "nn", ".", "RNN", ",", "nn", ".", "RNNCell", ")", ")", ":", "\n", "# add both operations", "\n", "        ", "flops", "+=", "rnn_module", ".", "hidden_size", "\n", "", "elif", "isinstance", "(", "rnn_module", ",", "(", "nn", ".", "GRU", ",", "nn", ".", "GRUCell", ")", ")", ":", "\n", "# hadamard of r", "\n", "        ", "flops", "+=", "rnn_module", ".", "hidden_size", "\n", "# adding operations from both states", "\n", "flops", "+=", "rnn_module", ".", "hidden_size", "*", "3", "\n", "# last two hadamard product and add", "\n", "flops", "+=", "rnn_module", ".", "hidden_size", "*", "3", "\n", "", "elif", "isinstance", "(", "rnn_module", ",", "(", "nn", ".", "LSTM", ",", "nn", ".", "LSTMCell", ")", ")", ":", "\n", "# adding operations from both states", "\n", "        ", "flops", "+=", "rnn_module", ".", "hidden_size", "*", "4", "\n", "# two hadamard product and add for C state", "\n", "flops", "+=", "rnn_module", ".", "hidden_size", "+", "rnn_module", ".", "hidden_size", "+", "rnn_module", ".", "hidden_size", "\n", "# final hadamard", "\n", "flops", "+=", "rnn_module", ".", "hidden_size", "+", "rnn_module", ".", "hidden_size", "+", "rnn_module", ".", "hidden_size", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.rnn_flops_counter_hook": [[374, 404], ["range", "int", "rnn_module.__getattr__", "rnn_module.__getattr__", "flops_counter.rnn_flops", "rnn_module.__getattr__", "rnn_module.__getattr__", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.rnn_flops"], ["", "def", "rnn_flops_counter_hook", "(", "rnn_module", ",", "input", ",", "output", ")", ":", "\n", "    ", "\"\"\"\n    Takes into account batch goes at first position, contrary\n    to pytorch common rule (but actually it doesn't matter).\n    IF sigmoid and tanh are made hard, only a comparison FLOPS should be accurate\n    \"\"\"", "\n", "flops", "=", "0", "\n", "inp", "=", "input", "[", "0", "]", "# input is a tuble containing a sequence to process and (optionally) hidden state", "\n", "batch_size", "=", "inp", ".", "shape", "[", "0", "]", "\n", "seq_length", "=", "inp", ".", "shape", "[", "1", "]", "\n", "num_layers", "=", "rnn_module", ".", "num_layers", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "w_ih", "=", "rnn_module", ".", "__getattr__", "(", "'weight_ih_l'", "+", "str", "(", "i", ")", ")", "\n", "w_hh", "=", "rnn_module", ".", "__getattr__", "(", "'weight_hh_l'", "+", "str", "(", "i", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "input_size", "=", "rnn_module", ".", "input_size", "\n", "", "else", ":", "\n", "            ", "input_size", "=", "rnn_module", ".", "hidden_size", "\n", "", "flops", "=", "rnn_flops", "(", "flops", ",", "rnn_module", ",", "w_ih", ",", "w_hh", ",", "input_size", ")", "\n", "if", "rnn_module", ".", "bias", ":", "\n", "            ", "b_ih", "=", "rnn_module", ".", "__getattr__", "(", "'bias_ih_l'", "+", "str", "(", "i", ")", ")", "\n", "b_hh", "=", "rnn_module", ".", "__getattr__", "(", "'bias_hh_l'", "+", "str", "(", "i", ")", ")", "\n", "flops", "+=", "b_ih", ".", "shape", "[", "0", "]", "+", "b_hh", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "flops", "*=", "batch_size", "\n", "flops", "*=", "seq_length", "\n", "if", "rnn_module", ".", "bidirectional", ":", "\n", "        ", "flops", "*=", "2", "\n", "", "rnn_module", ".", "__flops__", "+=", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.rnn_cell_flops_counter_hook": [[406, 421], ["rnn_cell_module.__getattr__", "rnn_cell_module.__getattr__", "flops_counter.rnn_flops", "int", "rnn_cell_module.__getattr__", "rnn_cell_module.__getattr__"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.rnn_flops"], ["", "def", "rnn_cell_flops_counter_hook", "(", "rnn_cell_module", ",", "input", ",", "output", ")", ":", "\n", "    ", "flops", "=", "0", "\n", "inp", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "inp", ".", "shape", "[", "0", "]", "\n", "w_ih", "=", "rnn_cell_module", ".", "__getattr__", "(", "'weight_ih'", ")", "\n", "w_hh", "=", "rnn_cell_module", ".", "__getattr__", "(", "'weight_hh'", ")", "\n", "input_size", "=", "inp", ".", "shape", "[", "1", "]", "\n", "flops", "=", "rnn_flops", "(", "flops", ",", "rnn_cell_module", ",", "w_ih", ",", "w_hh", ",", "input_size", ")", "\n", "if", "rnn_cell_module", ".", "bias", ":", "\n", "        ", "b_ih", "=", "rnn_cell_module", ".", "__getattr__", "(", "'bias_ih'", ")", "\n", "b_hh", "=", "rnn_cell_module", ".", "__getattr__", "(", "'bias_hh'", ")", "\n", "flops", "+=", "b_ih", ".", "shape", "[", "0", "]", "+", "b_hh", ".", "shape", "[", "0", "]", "\n", "\n", "", "flops", "*=", "batch_size", "\n", "rnn_cell_module", ".", "__flops__", "+=", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_batch_counter_variables_or_reset": [[423, 426], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_batch_counter_hook_function": [[428, 434], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.remove_batch_counter_hook_function": [[436, 440], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.add_flops_counter_variable_or_reset": [[442, 450], ["flops_counter.is_supported_instance", "flops_counter.get_model_parameters_number", "hasattr", "hasattr", "print", "type"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.get_model_parameters_number"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops__'", ")", "or", "hasattr", "(", "module", ",", "'__params__'", ")", ":", "\n", "            ", "print", "(", "'Warning: variables __flops__ or __params__ are already '", "\n", "'defined for the module'", "+", "type", "(", "module", ")", ".", "__name__", "+", "\n", "' ptflops can affect your code!'", ")", "\n", "", "module", ".", "__flops__", "=", "0", "\n", "module", ".", "__params__", "=", "get_model_parameters_number", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance": [[497, 501], ["type", "type"], "function", ["None"], ["def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "if", "type", "(", "module", ")", "in", "MODULES_MAPPING", "or", "type", "(", "module", ")", "in", "CUSTOM_MODULES_MAPPING", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.remove_flops_counter_hook_function": [[503, 508], ["flops_counter.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.ptflops.flops_counter.is_supported_instance"], ["", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c.updateBN": [[187, 191], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c.accuracy": [[192, 206], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c.train": [[207, 232], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "main_c.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main_c.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c.test": [[233, 252], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "main_c.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c.save_checkpoint": [[253, 257], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch.updateBN": [[155, 159], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch.accuracy": [[160, 174], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch.train": [[175, 200], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "main_scratch.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main_scratch.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch.test": [[201, 220], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "main_scratch.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch.save_checkpoint": [[221, 225], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.vggprune.accuracy": [[143, 157], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.vggprune.test": [[158, 205], ["model.eval", "print", "numpy.round", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model", "vggprune.accuracy", "prec1.item", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "torchvision.datasets.CIFAR100", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "data.cuda", "target.cuda", "len", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "'./data.cifar10'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "'./data.cifar100'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "# Data loading code", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No valid dataset is given.\"", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.LabelSmoothingLoss.__init__": [[349, 355], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "smoothing", "=", "0.0", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "cls", "=", "classes", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.LabelSmoothingLoss.forward": [[356, 364], ["pred.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "log_softmax", "(", "dim", "=", "self", ".", "dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# true_dist = pred.data.clone()", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "smoothing", "/", "(", "self", ".", "cls", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "pred", ",", "dim", "=", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.EarlyBird.__init__": [[367, 372], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "percent", ",", "epoch_keep", "=", "5", ")", ":", "\n", "        ", "self", ".", "percent", "=", "percent", "\n", "self", ".", "epoch_keep", "=", "epoch_keep", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "dists", "=", "[", "1", "for", "i", "in", "range", "(", "1", ",", "self", ".", "epoch_keep", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.EarlyBird.pruning": [[373, 405], ["model.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "isinstance", "isinstance", "model.modules", "isinstance", "m.weight.data.abs().clone", "m.weight.data.numel", "m.weight.data.abs().clone", "m.weight.data.abs().clone.gt().float().cuda", "m.weight.data.abs().clone.gt().float().cuda.view", "m.weight.data.abs", "m.weight.data.abs", "m.weight.data.abs().clone.gt().float", "m.weight.data.abs().clone.gt", "thre.cuda"], "methods", ["None"], ["", "def", "pruning", "(", "self", ",", "model", ",", "percent", ")", ":", "\n", "        ", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "total", "+=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "bn", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "size", "=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "bn", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "y", ",", "i", "=", "torch", ".", "sort", "(", "bn", ")", "\n", "thre_index", "=", "int", "(", "total", "*", "percent", ")", "\n", "thre", "=", "y", "[", "thre_index", "]", "\n", "# print('Pruning threshold: {}'.format(thre))", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "k", ",", "m", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "size", "=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "weight_copy", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "_mask", "=", "weight_copy", ".", "gt", "(", "thre", ".", "cuda", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "mask", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "_mask", ".", "view", "(", "-", "1", ")", "\n", "# print('layer index: {:d} \\t total channel: {:d} \\t remaining channel: {:d}'.format(k, _mask.shape[0], int(torch.sum(_mask))))", "\n", "index", "+=", "size", "\n", "\n", "# print('Pre-processing Successful!')", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.EarlyBird.put": [[406, 412], ["len", "main_resnet50.EarlyBird.masks.append", "main_resnet50.EarlyBird.masks.pop", "main_resnet50.EarlyBird.masks.append"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "mask", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "masks", ")", "<", "self", ".", "epoch_keep", ":", "\n", "            ", "self", ".", "masks", ".", "append", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "masks", ".", "pop", "(", "0", ")", "\n", "self", ".", "masks", ".", "append", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.EarlyBird.cal_dist": [[413, 422], ["len", "range", "len", "float", "mask_j.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "cal_dist", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "masks", ")", "==", "self", ".", "epoch_keep", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "masks", ")", "-", "1", ")", ":", "\n", "                ", "mask_i", "=", "self", ".", "masks", "[", "-", "1", "]", "\n", "mask_j", "=", "self", ".", "masks", "[", "i", "]", "\n", "self", ".", "dists", "[", "i", "]", "=", "1", "-", "float", "(", "torch", ".", "sum", "(", "mask_i", "==", "mask_j", ")", ")", "/", "mask_j", ".", "size", "(", "0", ")", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.EarlyBird.early_bird_emerge": [[423, 435], ["main_resnet50.EarlyBird.pruning", "main_resnet50.EarlyBird.put", "main_resnet50.EarlyBird.cal_dist", "logger.info", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.mask_cr.pruning", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.put", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.cal_dist"], ["", "", "def", "early_bird_emerge", "(", "self", ",", "model", ")", ":", "\n", "        ", "mask", "=", "self", ".", "pruning", "(", "model", ",", "self", ".", "percent", ")", "\n", "self", ".", "put", "(", "mask", ")", "\n", "flag", "=", "self", ".", "cal_dist", "(", ")", "\n", "if", "flag", "==", "True", ":", "\n", "            ", "logger", ".", "info", "(", "\"self.dists: {}\"", ".", "format", "(", "self", ".", "dists", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dists", ")", ")", ":", "\n", "                ", "if", "self", ".", "dists", "[", "i", "]", ">", "0.1", ":", "\n", "                    ", "return", "False", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.param_counter": [[186, 191], ["enumerate", "model.named_parameters", "param.numel"], "function", ["None"], ["", "def", "param_counter", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param_index", ",", "(", "param_name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.save_checkpoint": [[235, 252], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "str", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join", "str"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ",", "is_swa", ")", ":", "\n", "    ", "if", "is_swa", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'swa.pth.tar'", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "epoch", "==", "'init'", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "elif", "'EB'", "in", "str", "(", "epoch", ")", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "epoch", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt'", "+", "str", "(", "epoch", ")", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "# filename = os.path.join(filepath, 'ckpt.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "if", "is_best", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.updateBN": [[273, 278], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "if", "m", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.accuracy": [[279, 293], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.train": [[294, 326], ["model.train", "time.time", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "criterion", "criterion.item", "main_resnet50.accuracy", "prec1.item", "criterion.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main_resnet50.updateBN", "logger.info", "len", "data.cuda", "target.cuda", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "# start_time = time.time()", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# print('data load time: ', time.time()-end_time)", "\n", "# data_time = time.time()", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "#loss = F.cross_entropy(output, target)", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "# print('process time: ', time.time() - end_time)", "\n", "# end_time = time.time()", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_resnet50.test": [[327, 346], ["model.eval", "len", "logger.info", "numpy.round", "model", "torch.cross_entropy().item", "main_resnet50.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.EarlyBird.__init__": [[88, 93], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "percent", ",", "epoch_keep", "=", "5", ")", ":", "\n", "        ", "self", ".", "percent", "=", "percent", "\n", "self", ".", "epoch_keep", "=", "epoch_keep", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "dists", "=", "[", "1", "for", "i", "in", "range", "(", "1", ",", "self", ".", "epoch_keep", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.EarlyBird.pruning": [[94, 126], ["model.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "isinstance", "isinstance", "model.modules", "isinstance", "m.weight.data.abs().clone", "m.weight.data.numel", "m.weight.data.abs().clone", "m.weight.data.abs().clone.gt().float().cuda", "m.weight.data.abs().clone.gt().float().cuda.view", "m.weight.data.abs", "m.weight.data.abs", "m.weight.data.abs().clone.gt().float", "m.weight.data.abs().clone.gt", "thre.cuda"], "methods", ["None"], ["", "def", "pruning", "(", "self", ",", "model", ",", "percent", ")", ":", "\n", "        ", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "total", "+=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "bn", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "size", "=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "bn", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "y", ",", "i", "=", "torch", ".", "sort", "(", "bn", ")", "\n", "thre_index", "=", "int", "(", "total", "*", "percent", ")", "\n", "thre", "=", "y", "[", "thre_index", "]", "\n", "# print('Pruning threshold: {}'.format(thre))", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "k", ",", "m", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "size", "=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "weight_copy", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "_mask", "=", "weight_copy", ".", "gt", "(", "thre", ".", "cuda", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "mask", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "_mask", ".", "view", "(", "-", "1", ")", "\n", "# print('layer index: {:d} \\t total channel: {:d} \\t remaining channel: {:d}'.format(k, _mask.shape[0], int(torch.sum(_mask))))", "\n", "index", "+=", "size", "\n", "\n", "# print('Pre-processing Successful!')", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.EarlyBird.put": [[127, 133], ["len", "main_lp.EarlyBird.masks.append", "main_lp.EarlyBird.masks.pop", "main_lp.EarlyBird.masks.append"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "mask", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "masks", ")", "<", "self", ".", "epoch_keep", ":", "\n", "            ", "self", ".", "masks", ".", "append", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "masks", ".", "pop", "(", "0", ")", "\n", "self", ".", "masks", ".", "append", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.EarlyBird.cal_dist": [[134, 143], ["len", "range", "len", "float", "mask_j.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "cal_dist", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "masks", ")", "==", "self", ".", "epoch_keep", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "masks", ")", "-", "1", ")", ":", "\n", "                ", "mask_i", "=", "self", ".", "masks", "[", "-", "1", "]", "\n", "mask_j", "=", "self", ".", "masks", "[", "i", "]", "\n", "self", ".", "dists", "[", "i", "]", "=", "1", "-", "float", "(", "torch", ".", "sum", "(", "mask_i", "==", "mask_j", ")", ")", "/", "mask_j", ".", "size", "(", "0", ")", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.EarlyBird.early_bird_emerge": [[144, 156], ["main_lp.EarlyBird.pruning", "main_lp.EarlyBird.put", "main_lp.EarlyBird.cal_dist", "print", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.mask_cr.pruning", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.put", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.cal_dist"], ["", "", "def", "early_bird_emerge", "(", "self", ",", "model", ")", ":", "\n", "        ", "mask", "=", "self", ".", "pruning", "(", "model", ",", "self", ".", "percent", ")", "\n", "self", ".", "put", "(", "mask", ")", "\n", "flag", "=", "self", ".", "cal_dist", "(", ")", "\n", "if", "flag", "==", "True", ":", "\n", "            ", "print", "(", "self", ".", "dists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dists", ")", ")", ":", "\n", "                ", "if", "self", ".", "dists", "[", "i", "]", ">", "0.1", ":", "\n", "                    ", "return", "False", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.save_checkpoint": [[232, 248], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "str", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join", "str"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ",", "is_swa", ")", ":", "\n", "    ", "if", "is_swa", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'swa.pth.tar'", ")", ")", "\n", "", "elif", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "elif", "'EB'", "in", "str", "(", "epoch", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "epoch", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt'", "+", "str", "(", "epoch", ")", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "# filename = os.path.join(filepath, 'ckpt.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.updateBN": [[267, 271], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.accuracy": [[272, 286], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.train": [[287, 312], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "main_lp.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main_lp.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.test": [[313, 332], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "main_lp.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.moving_average": [[333, 337], ["zip", "net1.parameters", "net2.parameters"], "function", ["None"], ["", "def", "moving_average", "(", "net1", ",", "net2", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "for", "param1", ",", "param2", "in", "zip", "(", "net1", ".", "parameters", "(", ")", ",", "net2", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param1", ".", "data", "*=", "(", "1.0", "-", "alpha", ")", "\n", "param1", ".", "data", "+=", "param2", ".", "data", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp._check_bn": [[338, 341], ["issubclass"], "function", ["None"], ["", "", "def", "_check_bn", "(", "module", ",", "flag", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "flag", "[", "0", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.check_bn": [[342, 346], ["model.apply", "main_lp._check_bn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._check_bn"], ["", "", "def", "check_bn", "(", "model", ")", ":", "\n", "    ", "flag", "=", "[", "False", "]", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_check_bn", "(", "module", ",", "flag", ")", ")", "\n", "return", "flag", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.reset_bn": [[347, 351], ["issubclass", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "reset_bn", "(", "module", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "module", ".", "running_mean", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "module", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp._get_momenta": [[352, 355], ["issubclass"], "function", ["None"], ["", "", "def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp._set_momenta": [[356, 359], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_lp.bn_update": [[360, 388], ["model.train", "model.apply", "model.apply", "model.apply", "main_lp.check_bn", "input.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.data.size", "momenta.keys", "model", "main_lp._get_momenta", "main_lp._set_momenta"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.check_bn", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._get_momenta", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._set_momenta"], ["", "", "def", "bn_update", "(", "loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n        BatchNorm buffers update (if any).\n        Performs 1 epochs to estimate buffers average using train dataset.\n        :param loader: train dataset loader for buffers average estimation.\n        :param model: model being update\n        :return: None\n    \"\"\"", "\n", "if", "not", "check_bn", "(", "model", ")", ":", "\n", "        ", "return", "\n", "", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "reset_bn", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "n", "=", "0", "\n", "for", "input", ",", "_", "in", "loader", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "b", "=", "input_var", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "momentum", "=", "b", "/", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "", "model", "(", "input_var", ")", "\n", "n", "+=", "b", "\n", "\n", "", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.__init__": [[307, 312], ["range"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'-cp'", ",", "'--ckpt_path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint/vgg19_best.pth\"", ",", "\n", "help", "=", "'path to the checkpoint to resume.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.pruning": [[313, 345], ["model.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "isinstance", "isinstance", "model.modules", "isinstance", "m.weight.data.abs().clone", "m.weight.data.numel", "m.weight.data.abs().clone", "m.weight.data.abs().clone.gt().float().cuda", "m.weight.data.abs().clone.gt().float().cuda.view", "m.weight.data.abs", "m.weight.data.abs", "m.weight.data.abs().clone.gt().float", "m.weight.data.abs().clone.gt", "thre.cuda"], "methods", ["None"], ["device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"Benchmarking over device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "\n", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "        ", "args", ".", "fr_warmup_epoch", "=", "args", ".", "epochs", "\n", "\n", "# let's enable cudnn benchmark", "\n", "", "seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# data prep for test set", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "# load training and test set here:", "\n", "training_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "training_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.put": [[346, 352], ["len", "main.EarlyBird.masks.append", "main.EarlyBird.masks.pop", "main.EarlyBird.masks.append"], "methods", ["None"], ["pin_memory", "=", "True", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./cifar10_data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.cal_dist": [[353, 362], ["len", "range", "len", "float", "mask_j.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["\n", "#model = vgg11_bn().to(device)", "\n", "#model = LowRankVGG().to(device)", "\n", "#model = models.resnet50(num_classes=10).to(device)", "\n", "#model = models.__dict__[args.arch](num_classes=10).to(device)", "\n", "#model = LowRankResNet18().to(device)", "\n", "if", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.early_bird_emerge": [[363, 375], ["main.EarlyBird.pruning", "main.EarlyBird.put", "main.EarlyBird.cal_dist", "print", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.mask_cr.pruning", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.put", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.EarlyBird.cal_dist"], ["            ", "model", "=", "LowrankResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "", "", "elif", "args", ".", "arch", "==", "\"vgg19\"", ":", "\n", "        ", "if", "args", ".", "mode", "==", "\"vanilla\"", ":", "\n", "            ", "model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"lowrank\"", ":", "\n", "            ", "model", "=", "LowRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "vanilla_model", "=", "FullRankVGG19", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"unsupported mode ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.save_checkpoint": [[201, 215], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "str", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join", "str"], "function", ["None"], ["loss", ".", "backward", "(", ")", "\n", "#torch.cuda.synchronize()", "\n", "#backward_dur = time.time() - backward_start", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "iter_end", ".", "record", "(", ")", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#iter_comp_dur = time.time() - iter_comp_start", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "iter_comp_dur", "=", "float", "(", "iter_start", ".", "elapsed_time", "(", "iter_end", ")", ")", "/", "1000.0", "\n", "\n", "epoch_timer", "+=", "iter_comp_dur", "\n", "\n", "if", "batch_idx", "%", "40", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.updateBN": [[234, 238], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["test_loss", "+=", "F", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "output", ")", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.accuracy": [[239, 253], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "assert", "total", "==", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'\\nEpoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "epoch", ",", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "acc", ">", "best_acc", ":", "\n", "            ", "logger", ".", "info", "(", "'###### Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.train": [[254, 285], ["model.train", "time.time", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "main.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_seed{}_best.pth'", ".", "format", "(", "args", ".", "arch", ",", "args", ".", "seed", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n", "\n", "", "", "", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "#parser.add_argument('-a', '--arch', metavar='ARCH', default='resnet18',", "\n", "#                choices=model_names,", "\n", "#                help='model architecture: ' +", "\n", "#                    ' | '.join(model_names) +", "\n", "#                    ' (default: resnet18)')", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--arch'", ",", "default", "=", "'resnet18'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'vanilla'", ",", "\n", "help", "=", "'use full rank or low rank models'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main.test": [[286, 305], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "main.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "'the random seed to use in the experiment for reproducibility'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-rank-warmup'", ",", "type", "=", "bool_string", ",", "default", "=", "True", ",", "\n", "help", "=", "'if or not to use full-rank warmup'", ")", "\n", "parser", ".", "add_argument", "(", "'--fr-warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of full rank epochs to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-re'", ",", "'--resume'", ",", "default", "=", "False", ",", "type", "=", "bool_string", ",", "\n", "help", "=", "'wether or not to resume from a checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eva'", ",", "'--evaluate'", ",", "type", "=", "bool_string", ",", "default", "=", "False", ",", "\n", "help", "=", "'wether or not to evaluate the model after loading the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'-rf'", ",", "'--rank-factor'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet50_ImageNet.save_checkpoint": [[184, 198], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "str", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join", "str"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "elif", "'EB'", "in", "str", "(", "epoch", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "epoch", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt'", "+", "str", "(", "epoch", ")", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "# filename = os.path.join(filepath, 'ckpt.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet50_ImageNet.updateBN": [[218, 222], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet50_ImageNet.accuracy": [[223, 237], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet50_ImageNet.train": [[238, 263], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "EVAL_ResNet50_ImageNet.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "EVAL_ResNet50_ImageNet.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet50_ImageNet.test": [[264, 287], ["model.eval", "len", "print", "print", "model", "torch.cross_entropy().item", "EVAL_ResNet50_ImageNet.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy (Top-1): {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy (Top-5): {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc_5", ",", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet18_ImageNet.save_checkpoint": [[178, 192], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "str", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join", "str"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "elif", "'EB'", "in", "str", "(", "epoch", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "epoch", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt'", "+", "str", "(", "epoch", ")", "+", "'.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "# filename = os.path.join(filepath, 'ckpt.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet18_ImageNet.updateBN": [[214, 218], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet18_ImageNet.accuracy": [[219, 233], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet18_ImageNet.train": [[234, 259], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "EVAL_ResNet18_ImageNet.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "EVAL_ResNet18_ImageNet.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.EVAL_ResNet18_ImageNet.test": [[260, 283], ["model.eval", "len", "print", "print", "model", "torch.cross_entropy().item", "EVAL_ResNet18_ImageNet.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy (Top-1): {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy (Top-5): {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc_5", ",", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.load_checkpoint": [[195, 207], ["torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.keys", "print", "model.load_state_dict", "print", "len", "len"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "checkpoint_path", ")", ":", "\n", "   ", "model_ckpt", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "pretrained_dict", "=", "model_ckpt", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "new_dict", "=", "{", "}", "\n", "for", "k", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "       ", "pre_k", "=", "'module.'", "+", "k", "\n", "new_dict", "[", "k", "]", "=", "pretrained_dict", "[", "pre_k", "]", "\n", "", "print", "(", "'Total : {}, update: {}'", ".", "format", "(", "len", "(", "pretrained_dict", ")", ",", "len", "(", "new_dict", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "new_dict", ")", "\n", "print", "(", "'load checkpoint!'", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.updateBN": [[275, 279], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.accuracy": [[280, 294], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.train": [[295, 320], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "main_scratch_lp.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main_scratch_lp.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.test": [[321, 340], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "main_scratch_lp.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.save_checkpoint": [[341, 348], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", ",", "is_swa", ")", ":", "\n", "    ", "if", "is_swa", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'swa.pth.tar'", ")", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.moving_average": [[349, 353], ["zip", "net1.parameters", "net2.parameters"], "function", ["None"], ["", "", "", "def", "moving_average", "(", "net1", ",", "net2", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "for", "param1", ",", "param2", "in", "zip", "(", "net1", ".", "parameters", "(", ")", ",", "net2", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param1", ".", "data", "*=", "(", "1.0", "-", "alpha", ")", "\n", "param1", ".", "data", "+=", "param2", ".", "data", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp._check_bn": [[354, 357], ["issubclass"], "function", ["None"], ["", "", "def", "_check_bn", "(", "module", ",", "flag", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "flag", "[", "0", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.check_bn": [[358, 362], ["model.apply", "main_scratch_lp._check_bn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._check_bn"], ["", "", "def", "check_bn", "(", "model", ")", ":", "\n", "    ", "flag", "=", "[", "False", "]", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_check_bn", "(", "module", ",", "flag", ")", ")", "\n", "return", "flag", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.reset_bn": [[363, 367], ["issubclass", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "reset_bn", "(", "module", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "module", ".", "running_mean", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "module", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp._get_momenta": [[368, 371], ["issubclass"], "function", ["None"], ["", "", "def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp._set_momenta": [[372, 375], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_scratch_lp.bn_update": [[376, 404], ["model.train", "model.apply", "model.apply", "model.apply", "main_scratch_lp.check_bn", "input.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.data.size", "momenta.keys", "model", "main_scratch_lp._get_momenta", "main_scratch_lp._set_momenta"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.check_bn", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._get_momenta", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._set_momenta"], ["", "", "def", "bn_update", "(", "loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n        BatchNorm buffers update (if any).\n        Performs 1 epochs to estimate buffers average using train dataset.\n        :param loader: train dataset loader for buffers average estimation.\n        :param model: model being update\n        :return: None\n    \"\"\"", "\n", "if", "not", "check_bn", "(", "model", ")", ":", "\n", "        ", "return", "\n", "", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "reset_bn", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "n", "=", "0", "\n", "for", "input", ",", "_", "in", "loader", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "b", "=", "input_var", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "momentum", "=", "b", "/", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "", "model", "(", "input_var", ")", "\n", "n", "+=", "b", "\n", "\n", "", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.mask_cr.pruning": [[79, 111], ["model.modules", "torch.zeros", "torch.zeros", "model.modules", "torch.sort", "torch.sort", "int", "torch.zeros", "torch.zeros", "enumerate", "isinstance", "isinstance", "model.modules", "isinstance", "m.weight.data.abs().clone", "m.weight.data.numel", "m.weight.data.abs().clone", "m.weight.data.abs().clone.gt().float().cuda", "weight_copy.gt().float().cuda.view", "m.weight.data.abs", "m.weight.data.abs", "m.weight.data.abs().clone.gt().float", "m.weight.data.abs().clone.gt", "thre.cuda"], "function", ["None"], ["", "def", "pruning", "(", "model", ")", ":", "\n", "    ", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "total", "+=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "bn", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "size", "=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "bn", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "y", ",", "i", "=", "torch", ".", "sort", "(", "bn", ")", "\n", "thre_index", "=", "int", "(", "total", "*", "args", ".", "percent", ")", "\n", "thre", "=", "y", "[", "thre_index", "]", "\n", "# print('Pruning threshold: {}'.format(thre))", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "k", ",", "m", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "size", "=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "weight_copy", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "_mask", "=", "weight_copy", ".", "gt", "(", "thre", ".", "cuda", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "mask", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "_mask", ".", "view", "(", "-", "1", ")", "\n", "# print('layer index: {:d} \\t total channel: {:d} \\t remaining channel: {:d}'.format(k, _mask.shape[0], int(torch.sum(_mask))))", "\n", "index", "+=", "size", "\n", "\n", "# print('Pre-processing Successful!')", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.resprune_50.accuracy": [[139, 153], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.resprune_50.test": [[154, 198], ["model.eval", "print", "numpy.round", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model", "resprune_50.accuracy", "prec1.item", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.autograd.Variable", "torch.autograd.Variable", "model.data.max", "len", "len", "torchvision.datasets.CIFAR100", "os.path.join", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "data.cuda", "target.cuda", "len", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "'./data.cifar10'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "'./data.cifar100'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "# Data loading code", "\n", "        ", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No valid dataset is given.\"", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.compute_flops.print_model_param_nums": [[10, 16], ["sum", "print", "torchvision.models.alexnet", "param.nelement", "torchvision.models.alexnet.parameters"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.models.alexnet.alexnet", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.powersgd_grad.TensorBuffer.nelement"], ["def", "print_model_param_nums", "(", "model", "=", "None", ")", ":", "\n", "    ", "if", "model", "==", "None", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "alexnet", "(", ")", "\n", "", "total", "=", "sum", "(", "[", "param", ".", "nelement", "(", ")", "if", "param", ".", "requires_grad", "else", "0", "for", "param", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "'  + Number of params: %.2fM'", "%", "(", "total", "/", "1e6", ")", ")", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.compute_flops.print_model_param_flops": [[17, 115], ["compute_flops.print_model_param_flops.foo"], "function", ["None"], ["", "def", "print_model_param_flops", "(", "model", "=", "None", ",", "input_res", "=", "224", ",", "multiply_adds", "=", "True", ")", ":", "\n", "\n", "    ", "prods", "=", "{", "}", "\n", "def", "save_hook", "(", "name", ")", ":", "\n", "        ", "def", "hook_per", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "            ", "prods", "[", "name", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "", "return", "hook_per", "\n", "\n", "", "list_1", "=", "[", "]", "\n", "def", "simple_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_1", ".", "append", "(", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", ")", "\n", "\n", "", "list_2", "=", "{", "}", "\n", "def", "simple_hook2", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_2", "[", "'names'", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "\n", "", "list_conv", "=", "[", "]", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "(", "kernel_ops", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "\n", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", "*", "2", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "0", "\n", "flops", "=", "(", "kernel_ops", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_upsample", "=", "[", "]", "\n", "# For bilinear upsample", "\n", "def", "upsample_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "flops", "=", "output_height", "*", "output_width", "*", "output_channels", "*", "batch_size", "*", "12", "\n", "list_upsample", ".", "append", "(", "flops", ")", "\n", "\n", "", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "conv_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "linear_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "bn_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ReLU", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "relu_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "pooling_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Upsample", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "upsample_hook", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "if", "model", "==", "None", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "alexnet", "(", ")", "\n", "", "foo", "(", "model", ")", "\n", "input", "=", "Variable", "(", "torch", ".", "rand", "(", "3", ",", "input_res", ",", "input_res", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "out", "=", "model", "(", "input", ")", "\n", "\n", "total_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", "+", "sum", "(", "list_upsample", ")", ")", "\n", "\n", "print", "(", "'  + Number of FLOPs: %.2fG'", "%", "(", "total_flops", "/", "1e9", ")", ")", "\n", "\n", "return", "total_flops", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.resprune_lp.accuracy": [[172, 186], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.resprune_lp.test": [[187, 233], ["model.eval", "print", "numpy.round", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model", "resprune_lp.accuracy", "prec1.item", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.autograd.Variable", "torch.autograd.Variable", "model.data.max", "len", "len", "torchvision.datasets.CIFAR100", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "data.cuda", "target.cuda", "len", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "'./data.cifar10'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "'./data.cifar100'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "# Data loading code", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No valid dataset is given.\"", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.vggprune_lp_protective.accuracy": [[178, 192], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.vggprune_lp_protective.test": [[193, 240], ["model.eval", "print", "numpy.round", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model", "vggprune_lp_protective.accuracy", "prec1.item", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "torchvision.datasets.CIFAR100", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "data.cuda", "target.cuda", "len", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "'./data.cifar10'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "'./data.cifar100'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "# Data loading code", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No valid dataset is given.\"", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.resprune.accuracy": [[134, 148], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.resprune.test": [[149, 193], ["model.eval", "print", "numpy.round", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model", "resprune.accuracy", "prec1.item", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.autograd.Variable", "torch.autograd.Variable", "model.data.max", "len", "len", "torchvision.datasets.CIFAR100", "os.path.join", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "data.cuda", "target.cuda", "len", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "'./data.cifar10'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "'./data.cifar100'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "# Data loading code", "\n", "        ", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No valid dataset is given.\"", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.vggprune_lp.accuracy": [[160, 174], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.vggprune_lp.test": [[175, 222], ["model.eval", "print", "numpy.round", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model", "vggprune_lp.accuracy", "prec1.item", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "torchvision.datasets.CIFAR100", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "data.cuda", "target.cuda", "len", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "'./data.cifar10'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "'./data.cifar100'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "# Data loading code", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No valid dataset is given.\"", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.load_checkpoint": [[195, 207], ["torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.keys", "print", "model.load_state_dict", "print", "len", "len"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "checkpoint_path", ")", ":", "\n", "   ", "model_ckpt", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "pretrained_dict", "=", "model_ckpt", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "new_dict", "=", "{", "}", "\n", "for", "k", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "       ", "pre_k", "=", "'module.'", "+", "k", "\n", "new_dict", "[", "k", "]", "=", "pretrained_dict", "[", "pre_k", "]", "\n", "", "print", "(", "'Total : {}, update: {}'", ".", "format", "(", "len", "(", "pretrained_dict", ")", ",", "len", "(", "new_dict", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "new_dict", ")", "\n", "print", "(", "'load checkpoint!'", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN": [[273, 277], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "args", ".", "s", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy": [[278, 292], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.train": [[293, 318], ["model.train", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "main_c_lp.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "main_c_lp.updateBN", "print", "len", "data.cuda", "target.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.updateBN"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# pred = output.data.max(1, keepdim=True)[1]", "\n", "# train_acc += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "sr", ":", "\n", "            ", "updateBN", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.test": [[319, 338], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "main_c_lp.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "# pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability", "\n", "# correct += pred.eq(target.data.view_as(pred)).cpu().sum()", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.1f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.save_checkpoint": [[339, 346], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", ",", "is_swa", ")", ":", "\n", "    ", "if", "is_swa", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'swa.pth.tar'", ")", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'checkpoint.pth.tar'", ")", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.moving_average": [[347, 351], ["zip", "net1.parameters", "net2.parameters"], "function", ["None"], ["", "", "", "def", "moving_average", "(", "net1", ",", "net2", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "for", "param1", ",", "param2", "in", "zip", "(", "net1", ".", "parameters", "(", ")", ",", "net2", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param1", ".", "data", "*=", "(", "1.0", "-", "alpha", ")", "\n", "param1", ".", "data", "+=", "param2", ".", "data", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._check_bn": [[352, 355], ["issubclass"], "function", ["None"], ["", "", "def", "_check_bn", "(", "module", ",", "flag", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "flag", "[", "0", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.check_bn": [[356, 360], ["model.apply", "main_c_lp._check_bn"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._check_bn"], ["", "", "def", "check_bn", "(", "model", ")", ":", "\n", "    ", "flag", "=", "[", "False", "]", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_check_bn", "(", "module", ",", "flag", ")", ")", "\n", "return", "flag", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.reset_bn": [[361, 365], ["issubclass", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "reset_bn", "(", "module", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "module", ".", "running_mean", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "module", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._get_momenta": [[366, 369], ["issubclass"], "function", ["None"], ["", "", "def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._set_momenta": [[370, 373], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.bn_update": [[374, 402], ["model.train", "model.apply", "model.apply", "model.apply", "main_c_lp.check_bn", "input.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.data.size", "momenta.keys", "model", "main_c_lp._get_momenta", "main_c_lp._set_momenta"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp.check_bn", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._get_momenta", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.main_c_lp._set_momenta"], ["", "", "def", "bn_update", "(", "loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n        BatchNorm buffers update (if any).\n        Performs 1 epochs to estimate buffers average using train dataset.\n        :param loader: train dataset loader for buffers average estimation.\n        :param model: model being update\n        :return: None\n    \"\"\"", "\n", "if", "not", "check_bn", "(", "model", ")", ":", "\n", "        ", "return", "\n", "", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "reset_bn", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "n", "=", "0", "\n", "for", "input", ",", "_", "in", "loader", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "b", "=", "input_var", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "momentum", "=", "b", "/", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "", "model", "(", "input_var", ")", "\n", "n", "+=", "b", "\n", "\n", "", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.Gaussian": [[12, 23], ["numpy.zeros", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "Gaussian", "(", "src", ",", "sigma", ",", "ftype", ")", ":", "\n", "    ", "h", ",", "w", "=", "src", ".", "shape", "\n", "template", "=", "np", ".", "zeros", "(", "src", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "d0", "=", "1", "/", "(", "2", "*", "np", ".", "pi", "*", "sigma", ")", "*", "h", "\n", "for", "i", "in", "np", ".", "arange", "(", "h", ")", ":", "\n", "        ", "for", "j", "in", "np", ".", "arange", "(", "w", ")", ":", "\n", "            ", "distance2", "=", "(", "i", "-", "h", "/", "2", ")", "**", "2", "+", "(", "j", "-", "w", "/", "2", ")", "**", "2", "\n", "template", "[", "i", ",", "j", "]", "=", "np", ".", "e", "**", "(", "-", "1", "*", "(", "distance2", "/", "(", "2", "*", "d0", "**", "2", ")", ")", ")", "\n", "", "", "if", "ftype", "==", "'highpass'", ":", "\n", "        ", "template", "=", "1", "-", "template", "\n", "", "return", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.rescale": [[24, 39], ["float", "numpy.max", "numpy.min", "numpy.min"], "function", ["None"], ["", "def", "rescale", "(", "x", ",", "lo", ",", "hi", ")", ":", "\n", "    ", "\"\"\"Rescale a tensor to [lo,hi].\"\"\"", "\n", "assert", "(", "lo", "<", "hi", ")", ",", "\"[rescale] lo={0} must be smaller than hi={1}\"", ".", "format", "(", "lo", ",", "hi", ")", "\n", "old_width", "=", "np", ".", "max", "(", "x", ")", "-", "np", ".", "min", "(", "x", ")", "\n", "old_center", "=", "np", ".", "min", "(", "x", ")", "+", "(", "old_width", "/", "2.", ")", "\n", "new_width", "=", "float", "(", "hi", "-", "lo", ")", "\n", "new_center", "=", "lo", "+", "(", "new_width", "/", "2.", ")", "\n", "# shift everything back to zero:", "\n", "x", "=", "x", "-", "old_center", "\n", "# rescale to correct width:", "\n", "x", "=", "x", "*", "(", "new_width", "/", "old_width", ")", "\n", "# shift everything to the new center:", "\n", "x", "=", "x", "+", "new_center", "\n", "# return:", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.filter": [[40, 49], ["filter.Gaussian", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.multiply", "numpy.fft.ifftshift", "numpy.real", "filter.rescale", "numpy.fft.ifft2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.Gaussian", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.rescale"], ["", "def", "filter", "(", "img", ",", "sigma", ",", "mode", "=", "'highpass'", ")", ":", "\n", "# only support single-channel images", "\n", "    ", "template", "=", "Gaussian", "(", "img", ",", "sigma", ",", "mode", ")", "\n", "img_fft", "=", "np", ".", "fft", ".", "fft2", "(", "img", ")", "\n", "img_fft", "=", "np", ".", "fft", ".", "fftshift", "(", "img_fft", ")", "\n", "img_hp_fft", "=", "np", ".", "multiply", "(", "img_fft", ",", "template", ")", "\n", "img_hp_fft", "=", "np", ".", "fft", ".", "ifftshift", "(", "img_hp_fft", ")", "\n", "img_hp", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft2", "(", "img_hp_fft", ")", ")", "\n", "return", "rescale", "(", "img_hp", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.rgb2gray": [[50, 54], ["None"], "function", ["None"], ["", "def", "rgb2gray", "(", "img", ")", ":", "\n", "    ", "r", ",", "g", ",", "b", "=", "img", "[", ":", ",", ":", ",", "0", "]", ",", "img", "[", ":", ",", ":", ",", "1", "]", ",", "img", "[", ":", ",", ":", ",", "2", "]", "\n", "gray", "=", "0.2989", "*", "r", "+", "0.5870", "*", "g", "+", "0.1140", "*", "b", "\n", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.my_gaussian_filter": [[56, 64], ["numpy.asarray", "filter.rgb2gray", "filter.filter", "numpy.stack", "PIL.Image.fromarray", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.rgb2gray", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.filter"], ["", "def", "my_gaussian_filter", "(", "img", ",", "sigma", ",", "mode", "=", "'highpass'", ")", ":", "\n", "    ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "# img = img.convert('L')", "\n", "gray", "=", "rgb2gray", "(", "img", ")", "\n", "img_hp", "=", "filter", "(", "gray", ",", "sigma", ",", "mode", ")", "\n", "img_hp", "=", "np", ".", "stack", "(", "(", "img_hp", ",", ")", "*", "3", ",", "axis", "=", "-", "1", ")", "\n", "# return img_hp", "\n", "return", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_hp", "*", "255", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.my_gaussian_filter_2": [[66, 79], ["numpy.asarray", "numpy.fft.fft2", "scipy.ndimage.fourier_gaussian", "numpy.stack", "PIL.Image.fromarray", "np.asarray.convert", "filter.rescale", "numpy.uint8", "numpy.real", "filter.rescale", "print", "numpy.fft.ifft2", "numpy.real", "numpy.fft.ifft2"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.rescale", "home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.rescale"], ["", "def", "my_gaussian_filter_2", "(", "img", ",", "sigma", ",", "mode", "=", "'highpass'", ")", ":", "\n", "    ", "img", "=", "np", ".", "asarray", "(", "img", ".", "convert", "(", "'L'", ")", ")", "\n", "img_fft", "=", "np", ".", "fft", ".", "fft2", "(", "img", ")", "\n", "G", "=", "fourier_gaussian", "(", "img_fft", ",", "sigma", ")", "\n", "if", "mode", "==", "'highpass'", ":", "\n", "        ", "img_g", "=", "rescale", "(", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft2", "(", "img_fft", "-", "G", ")", ")", ",", "0", ",", "1", ")", "\n", "", "elif", "mode", "==", "'lowpass'", ":", "\n", "        ", "img_g", "=", "rescale", "(", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft2", "(", "G", ")", ")", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such mode!'", ")", "\n", "return", "None", "\n", "", "img_g", "=", "np", ".", "stack", "(", "(", "img_g", ",", ")", "*", "3", ",", "axis", "=", "-", "1", ")", "\n", "return", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_g", "*", "255", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.rmsprop.RMSprop.__init__": [[24, 38], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-2", ",", "alpha", "=", "0.99", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0", ",", "centered", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "momentum", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "not", "0.0", "<=", "weight_decay", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "", "if", "not", "0.0", "<=", "alpha", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid alpha value: {}\"", ".", "format", "(", "alpha", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "alpha", "=", "alpha", ",", "eps", "=", "eps", ",", "centered", "=", "centered", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", "RMSprop", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.rmsprop.RMSprop.__setstate__": [[39, 44], ["super().__setstate__", "group.setdefault", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RMSprop", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'momentum'", ",", "0", ")", "\n", "group", ".", "setdefault", "(", "'centered'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.rmsprop.RMSprop.step": [[45, 104], ["closure", "grad_quantizer", "square_avg.mul_().addcmul_", "grad_clip", "RuntimeError", "len", "torch.zeros_like", "grad.add.add.add", "grad_avg.mul_().add_", "square_avg.addcmul().sqrt().add_", "square_avg.sqrt().add_", "buf.mul_().addcdiv_", "p.data.add_", "p.data.addcdiv_", "torch.zeros_like", "torch.zeros_like", "square_avg.mul_", "grad_avg.mul_", "square_avg.addcmul().sqrt", "square_avg.sqrt", "buf.mul_", "square_avg.addcmul"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["", "", "def", "step", "(", "self", ",", "grad_quantizer", ",", "grad_clip", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "\n", "# quantize gradient for both weights and biases", "\n", "grad", "=", "grad_quantizer", "(", "grad", ",", "1.", ")", "\n", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RMSprop does not support sparse gradients'", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'square_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "group", "[", "'momentum'", "]", ">", "0", ":", "\n", "                        ", "state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "if", "group", "[", "'centered'", "]", ":", "\n", "                        ", "state", "[", "'grad_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "square_avg", "=", "state", "[", "'square_avg'", "]", "\n", "alpha", "=", "group", "[", "'alpha'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "square_avg", ".", "mul_", "(", "alpha", ")", ".", "addcmul_", "(", "1", "-", "alpha", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "group", "[", "'centered'", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "'grad_avg'", "]", "\n", "grad_avg", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "grad", ")", "\n", "avg", "=", "square_avg", ".", "addcmul", "(", "-", "1", ",", "grad_avg", ",", "grad_avg", ")", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "avg", "=", "square_avg", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "if", "group", "[", "'momentum'", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "group", "[", "'momentum'", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "buf", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "'lr'", "]", ",", "grad", ",", "avg", ")", "\n", "\n", "", "p", ".", "data", "=", "grad_clip", "(", "p", ".", "data", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.adam.Adam.__init__": [[27, 40], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.adam.Adam.__setstate__": [[41, 45], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Adam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.adam.Adam.step": [[46, 111], ["closure", "grad_quantizer", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "grad_clip", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad_quantizer.add_", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "grad_quantizer", ",", "grad_clip", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "\n", "# quantize gradient for both weights and biases", "\n", "grad", "=", "grad_quantizer", "(", "grad", ",", "1.", ")", "\n", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", "=", "grad_clip", "(", "p", ".", "data", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.__init__": [[40, 54], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.__setstate__": [[55, 59], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step": [[60, 102], ["closure", "grad_quantizer", "p.data.add_", "grad_clip", "d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone().detach.mul_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["", "", "def", "step", "(", "self", ",", "grad_quantizer", ",", "grad_clip", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "# quantize gradient for both weights and biases", "\n", "", "", "d_p", "=", "grad_quantizer", "(", "d_p", ",", "group", "[", "'lr'", "]", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "d_p", ")", "\n", "p", ".", "data", "=", "grad_clip", "(", "p", ".", "data", ")", "\n", "# p.data.add_(-group['lr'], d_p)", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.translate.load_model": [[14, 61], ["torch.load", "LowRankTransformer().to.load_state_dict", "print", "transformer.Models.Transformer().to", "transformer.Models.LowRankTransformer().to", "NotImplementedError", "transformer.Models.Transformer", "transformer.Models.LowRankTransformer"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["def", "load_model", "(", "opt", ",", "device", ")", ":", "\n", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "model", ",", "map_location", "=", "device", ")", "\n", "model_opt", "=", "checkpoint", "[", "'settings'", "]", "\n", "\n", "if", "opt", ".", "mode", "==", "\"vanilla\"", ":", "\n", "        ", "model", "=", "Transformer", "(", "\n", "model_opt", ".", "src_vocab_size", ",", "\n", "model_opt", ".", "trg_vocab_size", ",", "\n", "\n", "model_opt", ".", "src_pad_idx", ",", "\n", "model_opt", ".", "trg_pad_idx", ",", "\n", "\n", "trg_emb_prj_weight_sharing", "=", "model_opt", ".", "proj_share_weight", ",", "\n", "emb_src_trg_weight_sharing", "=", "model_opt", ".", "embs_share_weight", ",", "\n", "d_k", "=", "model_opt", ".", "d_k", ",", "\n", "d_v", "=", "model_opt", ".", "d_v", ",", "\n", "d_model", "=", "model_opt", ".", "d_model", ",", "\n", "d_word_vec", "=", "model_opt", ".", "d_word_vec", ",", "\n", "d_inner", "=", "model_opt", ".", "d_inner_hid", ",", "\n", "n_layers", "=", "model_opt", ".", "n_layers", ",", "\n", "n_head", "=", "model_opt", ".", "n_head", ",", "\n", "dropout", "=", "model_opt", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "opt", ".", "mode", "==", "\"pufferfish\"", ":", "\n", "        ", "model", "=", "LowRankTransformer", "(", "\n", "model_opt", ".", "src_vocab_size", ",", "\n", "model_opt", ".", "trg_vocab_size", ",", "\n", "\n", "model_opt", ".", "src_pad_idx", ",", "\n", "model_opt", ".", "trg_pad_idx", ",", "\n", "\n", "trg_emb_prj_weight_sharing", "=", "model_opt", ".", "proj_share_weight", ",", "\n", "emb_src_trg_weight_sharing", "=", "model_opt", ".", "embs_share_weight", ",", "\n", "d_k", "=", "model_opt", ".", "d_k", ",", "\n", "d_v", "=", "model_opt", ".", "d_v", ",", "\n", "d_model", "=", "model_opt", ".", "d_model", ",", "\n", "d_word_vec", "=", "model_opt", ".", "d_word_vec", ",", "\n", "d_inner", "=", "model_opt", ".", "d_inner_hid", ",", "\n", "n_layers", "=", "model_opt", ".", "n_layers", ",", "\n", "n_head", "=", "model_opt", ".", "n_head", ",", "\n", "dropout", "=", "model_opt", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported mode ...\"", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "print", "(", "'[Info] Trained model state loaded.'", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.translate.main": [[63, 127], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "dill.load", "torchtext.data.Dataset", "torch.device", "transformer.Translator.Translator().to", "print", "open", "open", "tqdm.tqdm", "transformer.Translator.Translator", "Translator().to.translate_sentence", "pred_line.replace().replace.replace().replace", "f.write", "SRC.vocab.stoi.get", "torch.LongTensor().to", "translate.load_model", "pred_line.replace().replace.replace", "pred_line.replace().replace.strip", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator.translate_sentence", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.translate.load_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "'''Main Function'''", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'translate.py'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-model'", ",", "required", "=", "True", ",", "\n", "help", "=", "'Path to model weight file'", ")", "\n", "parser", ".", "add_argument", "(", "'-data_pkl'", ",", "required", "=", "True", ",", "\n", "help", "=", "'Pickle file with both instances and vocabulary.'", ")", "\n", "parser", ".", "add_argument", "(", "'-output'", ",", "default", "=", "'pred.txt'", ",", "\n", "help", "=", "\"\"\"Path to output the predictions (each line will\n                        be the decoded sequence\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-beam_size'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'-max_seq_len'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'-mode'", ",", "type", "=", "str", ",", "default", "=", "\"vanilla\"", ")", "\n", "parser", ".", "add_argument", "(", "'-no_cuda'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# TODO: Translate bpe encoded files ", "\n", "#parser.add_argument('-src', required=True,", "\n", "#                    help='Source sequence to decode (one line per sequence)')", "\n", "#parser.add_argument('-vocab', required=True,", "\n", "#                    help='Source sequence to decode (one line per sequence)')", "\n", "# TODO: Batch translation", "\n", "#parser.add_argument('-batch_size', type=int, default=30,", "\n", "#                    help='Batch size')", "\n", "#parser.add_argument('-n_best', type=int, default=1,", "\n", "#                    help=\"\"\"If verbose is set, will output the n_best", "\n", "#                    decoded sentences\"\"\")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "cuda", "=", "not", "opt", ".", "no_cuda", "\n", "\n", "data", "=", "pickle", ".", "load", "(", "open", "(", "opt", ".", "data_pkl", ",", "'rb'", ")", ")", "\n", "SRC", ",", "TRG", "=", "data", "[", "'vocab'", "]", "[", "'src'", "]", ",", "data", "[", "'vocab'", "]", "[", "'trg'", "]", "\n", "opt", ".", "src_pad_idx", "=", "SRC", ".", "vocab", ".", "stoi", "[", "Constants", ".", "PAD_WORD", "]", "\n", "opt", ".", "trg_pad_idx", "=", "TRG", ".", "vocab", ".", "stoi", "[", "Constants", ".", "PAD_WORD", "]", "\n", "opt", ".", "trg_bos_idx", "=", "TRG", ".", "vocab", ".", "stoi", "[", "Constants", ".", "BOS_WORD", "]", "\n", "opt", ".", "trg_eos_idx", "=", "TRG", ".", "vocab", ".", "stoi", "[", "Constants", ".", "EOS_WORD", "]", "\n", "\n", "test_loader", "=", "Dataset", "(", "examples", "=", "data", "[", "'test'", "]", ",", "fields", "=", "{", "'src'", ":", "SRC", ",", "'trg'", ":", "TRG", "}", ")", "\n", "#test_loader = Dataset(examples=data['valid'], fields={'src': SRC, 'trg': TRG})", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", ".", "cuda", "else", "'cpu'", ")", "\n", "translator", "=", "Translator", "(", "\n", "model", "=", "load_model", "(", "opt", ",", "device", ")", ",", "\n", "beam_size", "=", "opt", ".", "beam_size", ",", "\n", "max_seq_len", "=", "opt", ".", "max_seq_len", ",", "\n", "src_pad_idx", "=", "opt", ".", "src_pad_idx", ",", "\n", "trg_pad_idx", "=", "opt", ".", "trg_pad_idx", ",", "\n", "trg_bos_idx", "=", "opt", ".", "trg_bos_idx", ",", "\n", "trg_eos_idx", "=", "opt", ".", "trg_eos_idx", ")", ".", "to", "(", "device", ")", "\n", "\n", "unk_idx", "=", "SRC", ".", "vocab", ".", "stoi", "[", "SRC", ".", "unk_token", "]", "\n", "with", "open", "(", "opt", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "example", "in", "tqdm", "(", "test_loader", ",", "mininterval", "=", "2", ",", "desc", "=", "'  - (Test)'", ",", "leave", "=", "False", ")", ":", "\n", "#print(' '.join(example.src))", "\n", "            ", "src_seq", "=", "[", "SRC", ".", "vocab", ".", "stoi", ".", "get", "(", "word", ",", "unk_idx", ")", "for", "word", "in", "example", ".", "src", "]", "\n", "pred_seq", "=", "translator", ".", "translate_sentence", "(", "torch", ".", "LongTensor", "(", "[", "src_seq", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "pred_line", "=", "' '", ".", "join", "(", "TRG", ".", "vocab", ".", "itos", "[", "idx", "]", "for", "idx", "in", "pred_seq", ")", "\n", "pred_line", "=", "pred_line", ".", "replace", "(", "Constants", ".", "BOS_WORD", ",", "''", ")", ".", "replace", "(", "Constants", ".", "EOS_WORD", ",", "''", ")", "\n", "#print(pred_line)", "\n", "f", ".", "write", "(", "pred_line", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "print", "(", "'[Info] Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.update_vocabulary": [[26, 45], ["codecs.open", "enumerate", "int", "line.strip().split", "line.strip().split", "print", "sys.exit", "line.strip", "line.strip"], "function", ["None"], ["def", "update_vocabulary", "(", "vocab", ",", "file_name", ",", "is_dict", "=", "False", ")", ":", "\n", "    ", "\"\"\"Read text and return dictionary that encodes vocabulary\n    \"\"\"", "\n", "\n", "#vocab = Counter()", "\n", "with", "codecs", ".", "open", "(", "file_name", ",", "encoding", "=", "'utf-8'", ")", "as", "fobj", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "fobj", ")", ":", "\n", "            ", "if", "is_dict", ":", "\n", "                ", "try", ":", "\n", "                    ", "word", ",", "count", "=", "line", ".", "strip", "(", "'\\r\\n '", ")", ".", "split", "(", "' '", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'Failed reading vocabulary file at line {0}: {1}'", ".", "format", "(", "i", ",", "line", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "vocab", "[", "word", "]", "+=", "int", "(", "count", ")", "\n", "", "else", ":", "\n", "                ", "for", "word", "in", "line", ".", "strip", "(", "'\\r\\n '", ")", ".", "split", "(", "' '", ")", ":", "\n", "                    ", "if", "word", ":", "\n", "                        ", "vocab", "[", "word", "]", "+=", "1", "\n", "", "", "", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.update_pair_statistics": [[47, 104], ["collections.defaultdict", "old_word.index", "word.index", "len", "len", "len", "len"], "function", ["None"], ["", "def", "update_pair_statistics", "(", "pair", ",", "changed", ",", "stats", ",", "indices", ")", ":", "\n", "    ", "\"\"\"Minimally update the indices and frequency of symbol pairs\n\n    if we merge a pair of symbols, only pairs that overlap with occurrences\n    of this pair are affected, and need to be updated.\n    \"\"\"", "\n", "stats", "[", "pair", "]", "=", "0", "\n", "indices", "[", "pair", "]", "=", "defaultdict", "(", "int", ")", "\n", "first", ",", "second", "=", "pair", "\n", "new_pair", "=", "first", "+", "second", "\n", "for", "j", ",", "word", ",", "old_word", ",", "freq", "in", "changed", ":", "\n", "\n", "# find all instances of pair, and update frequency/indices around it", "\n", "        ", "i", "=", "0", "\n", "while", "True", ":", "\n", "# find first symbol", "\n", "            ", "try", ":", "\n", "                ", "i", "=", "old_word", ".", "index", "(", "first", ",", "i", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "break", "\n", "# if first symbol is followed by second symbol, we've found an occurrence of pair (old_word[i:i+2])", "\n", "", "if", "i", "<", "len", "(", "old_word", ")", "-", "1", "and", "old_word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "# assuming a symbol sequence \"A B C\", if \"B C\" is merged, reduce the frequency of \"A B\"", "\n", "                ", "if", "i", ":", "\n", "                    ", "prev", "=", "old_word", "[", "i", "-", "1", ":", "i", "+", "1", "]", "\n", "stats", "[", "prev", "]", "-=", "freq", "\n", "indices", "[", "prev", "]", "[", "j", "]", "-=", "1", "\n", "", "if", "i", "<", "len", "(", "old_word", ")", "-", "2", ":", "\n", "# assuming a symbol sequence \"A B C B\", if \"B C\" is merged, reduce the frequency of \"C B\".", "\n", "# however, skip this if the sequence is A B C B C, because the frequency of \"C B\" will be reduced by the previous code block", "\n", "                    ", "if", "old_word", "[", "i", "+", "2", "]", "!=", "first", "or", "i", ">=", "len", "(", "old_word", ")", "-", "3", "or", "old_word", "[", "i", "+", "3", "]", "!=", "second", ":", "\n", "                        ", "nex", "=", "old_word", "[", "i", "+", "1", ":", "i", "+", "3", "]", "\n", "stats", "[", "nex", "]", "-=", "freq", "\n", "indices", "[", "nex", "]", "[", "j", "]", "-=", "1", "\n", "", "", "i", "+=", "2", "\n", "", "else", ":", "\n", "                ", "i", "+=", "1", "\n", "\n", "", "", "i", "=", "0", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "# find new pair", "\n", "                ", "i", "=", "word", ".", "index", "(", "new_pair", ",", "i", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "break", "\n", "# assuming a symbol sequence \"A BC D\", if \"B C\" is merged, increase the frequency of \"A BC\"", "\n", "", "if", "i", ":", "\n", "                ", "prev", "=", "word", "[", "i", "-", "1", ":", "i", "+", "1", "]", "\n", "stats", "[", "prev", "]", "+=", "freq", "\n", "indices", "[", "prev", "]", "[", "j", "]", "+=", "1", "\n", "# assuming a symbol sequence \"A BC B\", if \"B C\" is merged, increase the frequency of \"BC B\"", "\n", "# however, if the sequence is A BC BC, skip this step because the count of \"BC BC\" will be incremented by the previous code block", "\n", "", "if", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "!=", "new_pair", ":", "\n", "                ", "nex", "=", "word", "[", "i", ":", "i", "+", "2", "]", "\n", "stats", "[", "nex", "]", "+=", "freq", "\n", "indices", "[", "nex", "]", "[", "j", "]", "+=", "1", "\n", "", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.get_pair_statistics": [[106, 123], ["collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict"], "function", ["None"], ["", "", "", "def", "get_pair_statistics", "(", "vocab", ")", ":", "\n", "    ", "\"\"\"Count frequency of all symbol pairs, and create index\"\"\"", "\n", "\n", "# data structure of pair frequencies", "\n", "stats", "=", "defaultdict", "(", "int", ")", "\n", "\n", "#index from pairs to words", "\n", "indices", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", "\n", "\n", "for", "i", ",", "(", "word", ",", "freq", ")", "in", "enumerate", "(", "vocab", ")", ":", "\n", "        ", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "            ", "stats", "[", "prev_char", ",", "char", "]", "+=", "freq", "\n", "indices", "[", "prev_char", ",", "char", "]", "[", "i", "]", "+=", "1", "\n", "prev_char", "=", "char", "\n", "\n", "", "", "return", "stats", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.replace_pair": [[125, 148], ["pair_str.replace.replace", "re.compile", "indices[].iteritems", "indices[].items", "re.compile.sub", "tuple", "changes.append", "tuple.split", "re.escape"], "function", ["None"], ["", "def", "replace_pair", "(", "pair", ",", "vocab", ",", "indices", ")", ":", "\n", "    ", "\"\"\"Replace all occurrences of a symbol pair ('A', 'B') with a new symbol 'AB'\"\"\"", "\n", "first", ",", "second", "=", "pair", "\n", "pair_str", "=", "''", ".", "join", "(", "pair", ")", "\n", "pair_str", "=", "pair_str", ".", "replace", "(", "'\\\\'", ",", "'\\\\\\\\'", ")", "\n", "changes", "=", "[", "]", "\n", "pattern", "=", "re", ".", "compile", "(", "r'(?<!\\S)'", "+", "re", ".", "escape", "(", "first", "+", "' '", "+", "second", ")", "+", "r'(?!\\S)'", ")", "\n", "if", "sys", ".", "version_info", "<", "(", "3", ",", "0", ")", ":", "\n", "        ", "iterator", "=", "indices", "[", "pair", "]", ".", "iteritems", "(", ")", "\n", "", "else", ":", "\n", "        ", "iterator", "=", "indices", "[", "pair", "]", ".", "items", "(", ")", "\n", "", "for", "j", ",", "freq", "in", "iterator", ":", "\n", "        ", "if", "freq", "<", "1", ":", "\n", "            ", "continue", "\n", "", "word", ",", "freq", "=", "vocab", "[", "j", "]", "\n", "new_word", "=", "' '", ".", "join", "(", "word", ")", "\n", "new_word", "=", "pattern", ".", "sub", "(", "pair_str", ",", "new_word", ")", "\n", "new_word", "=", "tuple", "(", "new_word", ".", "split", "(", "' '", ")", ")", "\n", "\n", "vocab", "[", "j", "]", "=", "(", "new_word", ",", "freq", ")", "\n", "changes", ".", "append", "(", "(", "j", ",", "new_word", ",", "word", ",", "freq", ")", ")", "\n", "\n", "", "return", "changes", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.prune_stats": [[149, 163], ["list", "stats.items"], "function", ["None"], ["", "def", "prune_stats", "(", "stats", ",", "big_stats", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"Prune statistics dict for efficiency of max()\n\n    The frequency of a symbol pair never increases, so pruning is generally safe\n    (until we the most frequent pair is less frequent than a pair we previously pruned)\n    big_stats keeps full statistics for when we need to access pruned items\n    \"\"\"", "\n", "for", "item", ",", "freq", "in", "list", "(", "stats", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "freq", "<", "threshold", ":", "\n", "            ", "del", "stats", "[", "item", "]", "\n", "if", "freq", "<", "0", ":", "\n", "                ", "big_stats", "[", "item", "]", "+=", "freq", "\n", "", "else", ":", "\n", "                ", "big_stats", "[", "item", "]", "=", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.learn_bpe": [[165, 231], ["collections.Counter", "dict", "sorted", "learn_bpe.get_pair_statistics", "copy.deepcopy", "sys.stderr.write", "codecs.getwriter", "codecs.getwriter", "codecs.getreader", "sys.stderr.write", "learn_bpe.update_vocabulary", "update_vocabulary.items", "set", "set", "sys.stderr.write", "sys.stderr.write", "sys.stderr.write", "codecs.open", "outfile.write", "range", "set.add", "len", "len", "max", "outfile.write", "learn_bpe.replace_pair", "learn_bpe.update_pair_statistics", "update_vocabulary.items", "set.add", "len", "len", "copy.deepcopy.values", "max", "learn_bpe.prune_stats", "copy.deepcopy", "max", "learn_bpe.prune_stats", "sys.stderr.write", "sys.stderr.write", "learn_bpe.prune_stats", "tuple", "len", "len"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.get_pair_statistics", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.update_vocabulary", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.replace_pair", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.update_pair_statistics", "home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.prune_stats", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.prune_stats", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.prune_stats"], ["", "", "", "", "def", "learn_bpe", "(", "infile_names", ",", "outfile_name", ",", "num_symbols", ",", "min_frequency", "=", "2", ",", "verbose", "=", "False", ",", "is_dict", "=", "False", ",", "total_symbols", "=", "False", ")", ":", "\n", "    ", "\"\"\"Learn num_symbols BPE operations from vocabulary, and write to outfile.\n    \"\"\"", "\n", "sys", ".", "stderr", "=", "codecs", ".", "getwriter", "(", "'UTF-8'", ")", "(", "sys", ".", "stderr", ".", "buffer", ")", "\n", "sys", ".", "stdout", "=", "codecs", ".", "getwriter", "(", "'UTF-8'", ")", "(", "sys", ".", "stdout", ".", "buffer", ")", "\n", "sys", ".", "stdin", "=", "codecs", ".", "getreader", "(", "'UTF-8'", ")", "(", "sys", ".", "stdin", ".", "buffer", ")", "\n", "\n", "#vocab = get_vocabulary(infile, is_dict)", "\n", "vocab", "=", "Counter", "(", ")", "\n", "for", "f", "in", "infile_names", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f'Collecting vocab from {f}\\n'", ")", "\n", "vocab", "=", "update_vocabulary", "(", "vocab", ",", "f", ",", "is_dict", ")", "\n", "\n", "", "vocab", "=", "dict", "(", "[", "(", "tuple", "(", "x", "[", ":", "-", "1", "]", ")", "+", "(", "x", "[", "-", "1", "]", "+", "'</w>'", ",", ")", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "vocab", ".", "items", "(", ")", "]", ")", "\n", "sorted_vocab", "=", "sorted", "(", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "stats", ",", "indices", "=", "get_pair_statistics", "(", "sorted_vocab", ")", "\n", "big_stats", "=", "copy", ".", "deepcopy", "(", "stats", ")", "\n", "\n", "if", "total_symbols", ":", "\n", "        ", "uniq_char_internal", "=", "set", "(", ")", "\n", "uniq_char_final", "=", "set", "(", ")", "\n", "for", "word", "in", "vocab", ":", "\n", "            ", "for", "char", "in", "word", "[", ":", "-", "1", "]", ":", "\n", "                ", "uniq_char_internal", ".", "add", "(", "char", ")", "\n", "", "uniq_char_final", ".", "add", "(", "word", "[", "-", "1", "]", ")", "\n", "", "sys", ".", "stderr", ".", "write", "(", "'Number of word-internal characters: {0}\\n'", ".", "format", "(", "len", "(", "uniq_char_internal", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "'Number of word-final characters: {0}\\n'", ".", "format", "(", "len", "(", "uniq_char_final", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "'Reducing number of merge operations by {0}\\n'", ".", "format", "(", "len", "(", "uniq_char_internal", ")", "+", "len", "(", "uniq_char_final", ")", ")", ")", "\n", "num_symbols", "-=", "len", "(", "uniq_char_internal", ")", "+", "len", "(", "uniq_char_final", ")", "\n", "\n", "\n", "", "sys", ".", "stderr", ".", "write", "(", "f'Write vocab file to {outfile_name}'", ")", "\n", "with", "codecs", ".", "open", "(", "outfile_name", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "outfile", ":", "\n", "# version 0.2 changes the handling of the end-of-word token ('</w>');", "\n", "# version numbering allows bckward compatibility", "\n", "\n", "        ", "outfile", ".", "write", "(", "'#version: 0.2\\n'", ")", "\n", "# threshold is inspired by Zipfian assumption, but should only affect speed", "\n", "threshold", "=", "max", "(", "stats", ".", "values", "(", ")", ")", "/", "10", "\n", "for", "i", "in", "range", "(", "num_symbols", ")", ":", "\n", "            ", "if", "stats", ":", "\n", "                ", "most_frequent", "=", "max", "(", "stats", ",", "key", "=", "lambda", "x", ":", "(", "stats", "[", "x", "]", ",", "x", ")", ")", "\n", "\n", "# we probably missed the best pair because of pruning; go back to full statistics", "\n", "", "if", "not", "stats", "or", "(", "i", "and", "stats", "[", "most_frequent", "]", "<", "threshold", ")", ":", "\n", "                ", "prune_stats", "(", "stats", ",", "big_stats", ",", "threshold", ")", "\n", "stats", "=", "copy", ".", "deepcopy", "(", "big_stats", ")", "\n", "most_frequent", "=", "max", "(", "stats", ",", "key", "=", "lambda", "x", ":", "(", "stats", "[", "x", "]", ",", "x", ")", ")", "\n", "# threshold is inspired by Zipfian assumption, but should only affect speed", "\n", "threshold", "=", "stats", "[", "most_frequent", "]", "*", "i", "/", "(", "i", "+", "10000.0", ")", "\n", "prune_stats", "(", "stats", ",", "big_stats", ",", "threshold", ")", "\n", "\n", "", "if", "stats", "[", "most_frequent", "]", "<", "min_frequency", ":", "\n", "                ", "sys", ".", "stderr", ".", "write", "(", "f'no pair has frequency >= {min_frequency}. Stopping\\n'", ")", "\n", "break", "\n", "\n", "", "if", "verbose", ":", "\n", "                ", "sys", ".", "stderr", ".", "write", "(", "'pair {0}: {1} {2} -> {1}{2} (frequency {3})\\n'", ".", "format", "(", "\n", "i", ",", "most_frequent", "[", "0", "]", ",", "most_frequent", "[", "1", "]", ",", "stats", "[", "most_frequent", "]", ")", ")", "\n", "", "outfile", ".", "write", "(", "'{0} {1}\\n'", ".", "format", "(", "*", "most_frequent", ")", ")", "\n", "changes", "=", "replace_pair", "(", "most_frequent", ",", "sorted_vocab", ",", "indices", ")", "\n", "update_pair_statistics", "(", "most_frequent", ",", "changes", ",", "stats", ",", "indices", ")", "\n", "stats", "[", "most_frequent", "]", "=", "0", "\n", "if", "not", "i", "%", "100", ":", "\n", "                ", "prune_stats", "(", "stats", ",", "big_stats", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.cal_performance": [[33, 45], ["train.cal_loss", "gold.contiguous().view.contiguous().view", "gold.contiguous().view.ne", "pred.eq().masked_select().sum().item", "gold.ne.sum().item", "pred.max", "gold.contiguous().view.contiguous", "pred.eq().masked_select().sum", "gold.ne.sum", "pred.eq().masked_select", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.cal_loss"], ["def", "cal_performance", "(", "pred", ",", "gold", ",", "trg_pad_idx", ",", "smoothing", "=", "False", ")", ":", "\n", "    ", "''' Apply label smoothing if needed '''", "\n", "\n", "loss", "=", "cal_loss", "(", "pred", ",", "gold", ",", "trg_pad_idx", ",", "smoothing", "=", "smoothing", ")", "\n", "\n", "pred", "=", "pred", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "gold", "=", "gold", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "non_pad_mask", "=", "gold", ".", "ne", "(", "trg_pad_idx", ")", "\n", "n_correct", "=", "pred", ".", "eq", "(", "gold", ")", ".", "masked_select", "(", "non_pad_mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_word", "=", "non_pad_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "return", "loss", ",", "n_correct", ",", "n_word", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.cal_loss": [[47, 66], ["gold.contiguous().view.contiguous().view", "pred.size", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.log_softmax", "gold.contiguous().view.ne", "F.cross_entropy.masked_select().sum", "torch.cross_entropy", "gold.contiguous().view.contiguous", "gold.contiguous().view.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "F.cross_entropy.masked_select"], "function", ["None"], ["", "def", "cal_loss", "(", "pred", ",", "gold", ",", "trg_pad_idx", ",", "smoothing", "=", "False", ")", ":", "\n", "    ", "''' Calculate cross entropy loss, apply label smoothing if needed. '''", "\n", "\n", "gold", "=", "gold", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "smoothing", ":", "\n", "        ", "eps", "=", "0.1", "\n", "n_class", "=", "pred", ".", "size", "(", "1", ")", "\n", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "pred", ")", ".", "scatter", "(", "1", ",", "gold", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "one_hot", "=", "one_hot", "*", "(", "1", "-", "eps", ")", "+", "(", "1", "-", "one_hot", ")", "*", "eps", "/", "(", "n_class", "-", "1", ")", "\n", "log_prb", "=", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "\n", "non_pad_mask", "=", "gold", ".", "ne", "(", "trg_pad_idx", ")", "\n", "loss", "=", "-", "(", "one_hot", "*", "log_prb", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "loss", "=", "loss", ".", "masked_select", "(", "non_pad_mask", ")", ".", "sum", "(", ")", "# average later", "\n", "", "else", ":", "\n", "        ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "gold", ",", "ignore_index", "=", "trg_pad_idx", ",", "reduction", "=", "'sum'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.patch_src": [[68, 71], ["src.transpose.transpose"], "function", ["None"], ["", "def", "patch_src", "(", "src", ",", "pad_idx", ")", ":", "\n", "    ", "src", "=", "src", ".", "transpose", "(", "0", ",", "1", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.patch_trg": [[73, 77], ["trg.transpose.transpose", "trg[].contiguous().view", "trg[].contiguous"], "function", ["None"], ["", "def", "patch_trg", "(", "trg", ",", "pad_idx", ")", ":", "\n", "    ", "trg", "=", "trg", ".", "transpose", "(", "0", ",", "1", ")", "\n", "trg", ",", "gold", "=", "trg", "[", ":", ",", ":", "-", "1", "]", ",", "trg", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "trg", ",", "gold", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train_epoch": [[79, 110], ["model.train", "tqdm.tqdm", "patch_src().to", "map", "optimizer.zero_grad", "model", "train.cal_performance", "loss.backward", "optimizer.step_and_update_lr", "loss.item", "train.patch_trg", "train.patch_src", "x.to"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.cal_performance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.models.quantize.WAGERounding.backward", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.step_and_update_lr", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.patch_trg", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.patch_src", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "train_epoch", "(", "model", ",", "training_data", ",", "optimizer", ",", "opt", ",", "device", ",", "smoothing", ")", ":", "\n", "    ", "''' Epoch operation in training phase'''", "\n", "\n", "model", ".", "train", "(", ")", "\n", "total_loss", ",", "n_word_total", ",", "n_word_correct", "=", "0", ",", "0", ",", "0", "\n", "\n", "desc", "=", "'  - (Training)   '", "\n", "for", "batch", "in", "tqdm", "(", "training_data", ",", "mininterval", "=", "2", ",", "desc", "=", "desc", ",", "leave", "=", "False", ")", ":", "\n", "\n", "# prepare data", "\n", "        ", "src_seq", "=", "patch_src", "(", "batch", ".", "src", ",", "opt", ".", "src_pad_idx", ")", ".", "to", "(", "device", ")", "\n", "trg_seq", ",", "gold", "=", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "patch_trg", "(", "batch", ".", "trg", ",", "opt", ".", "trg_pad_idx", ")", ")", "\n", "\n", "# forward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pred", "=", "model", "(", "src_seq", ",", "trg_seq", ")", "\n", "\n", "# backward and update parameters", "\n", "loss", ",", "n_correct", ",", "n_word", "=", "cal_performance", "(", "\n", "pred", ",", "gold", ",", "opt", ".", "trg_pad_idx", ",", "smoothing", "=", "smoothing", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step_and_update_lr", "(", ")", "\n", "\n", "# note keeping", "\n", "n_word_total", "+=", "n_word", "\n", "n_word_correct", "+=", "n_correct", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "loss_per_word", "=", "total_loss", "/", "n_word_total", "\n", "accuracy", "=", "n_word_correct", "/", "n_word_total", "\n", "return", "loss_per_word", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.eval_epoch": [[112, 139], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "patch_src().to", "map", "model", "train.cal_performance", "loss.item", "train.patch_trg", "train.patch_src", "x.to"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.cal_performance", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.patch_trg", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.patch_src", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to"], ["", "def", "eval_epoch", "(", "model", ",", "validation_data", ",", "device", ",", "opt", ")", ":", "\n", "    ", "''' Epoch operation in evaluation phase '''", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_loss", ",", "n_word_total", ",", "n_word_correct", "=", "0", ",", "0", ",", "0", "\n", "\n", "desc", "=", "'  - (Validation) '", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "tqdm", "(", "validation_data", ",", "mininterval", "=", "2", ",", "desc", "=", "desc", ",", "leave", "=", "False", ")", ":", "\n", "\n", "# prepare data", "\n", "            ", "src_seq", "=", "patch_src", "(", "batch", ".", "src", ",", "opt", ".", "src_pad_idx", ")", ".", "to", "(", "device", ")", "\n", "trg_seq", ",", "gold", "=", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "patch_trg", "(", "batch", ".", "trg", ",", "opt", ".", "trg_pad_idx", ")", ")", "\n", "\n", "# forward", "\n", "pred", "=", "model", "(", "src_seq", ",", "trg_seq", ")", "\n", "loss", ",", "n_correct", ",", "n_word", "=", "cal_performance", "(", "\n", "pred", ",", "gold", ",", "opt", ".", "trg_pad_idx", ",", "smoothing", "=", "False", ")", "\n", "\n", "# note keeping", "\n", "n_word_total", "+=", "n_word", "\n", "n_word_correct", "+=", "n_correct", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "", "loss_per_word", "=", "total_loss", "/", "n_word_total", "\n", "accuracy", "=", "n_word_correct", "/", "n_word_total", "\n", "return", "loss_per_word", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train": [[141, 236], ["range", "logger.info", "logger.info", "logger.info", "time.time", "train.train.print_performances"], "function", ["None"], ["", "def", "train", "(", "vanilla_model", ",", "lowrank_model", ",", "training_data", ",", "validation_data", ",", "vanilla_optimizer", ",", "device", ",", "opt", ")", ":", "\n", "    ", "''' Start training '''", "\n", "\n", "log_train_file", ",", "log_valid_file", "=", "None", ",", "None", "\n", "\n", "if", "opt", ".", "log", ":", "\n", "        ", "log_train_file", "=", "opt", ".", "log", "+", "'.train.log'", "\n", "log_valid_file", "=", "opt", ".", "log", "+", "'.valid.log'", "\n", "\n", "logger", ".", "info", "(", "'[Info] Training performance will be written to file: {} and {}'", ".", "format", "(", "\n", "log_train_file", ",", "log_valid_file", ")", ")", "\n", "\n", "with", "open", "(", "log_train_file", ",", "'w'", ")", "as", "log_tf", ",", "open", "(", "log_valid_file", ",", "'w'", ")", "as", "log_vf", ":", "\n", "            ", "log_tf", ".", "write", "(", "'epoch,loss,ppl,accuracy\\n'", ")", "\n", "log_vf", ".", "write", "(", "'epoch,loss,ppl,accuracy\\n'", ")", "\n", "\n", "", "", "def", "print_performances", "(", "header", ",", "loss", ",", "accu", ",", "start_time", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'  - {header:12} ppl: {ppl: 8.5f}, accuracy: {accu:3.3f} %, '", "'elapse: {elapse:3.3f} min'", ".", "format", "(", "\n", "header", "=", "f\"({header})\"", ",", "ppl", "=", "math", ".", "exp", "(", "min", "(", "loss", ",", "100", ")", ")", ",", "\n", "accu", "=", "100", "*", "accu", ",", "elapse", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", ")", ")", "\n", "\n", "#valid_accus = []", "\n", "", "valid_losses", "=", "[", "]", "\n", "for", "epoch_i", "in", "range", "(", "opt", ".", "epoch", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'[ Epoch {} ]'", ".", "format", "(", "epoch_i", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch_i", "in", "range", "(", "opt", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Warming up Training, epoch: {}\"", ".", "format", "(", "epoch_i", ")", ")", "\n", "train_loss", ",", "train_accu", "=", "train_epoch", "(", "\n", "vanilla_model", ",", "training_data", ",", "vanilla_optimizer", ",", "opt", ",", "device", ",", "smoothing", "=", "opt", ".", "label_smoothing", ")", "\n", "", "elif", "epoch_i", "==", "opt", ".", "fr_warmup_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Switching to low-rank Training, epoch: {}\"", ".", "format", "(", "epoch_i", ")", ")", "\n", "\n", "decompose_start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "decompose_end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "decompose_start", ".", "record", "(", ")", "\n", "lowrank_model", "=", "decompose_vanilla_model", "(", "vanilla_model", "=", "vanilla_model", ",", "\n", "low_rank_model", "=", "lowrank_model", ",", "\n", "rank_ratio", "=", "0.25", ")", "\n", "decompose_end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "decompose_dur", "=", "float", "(", "decompose_start", ".", "elapsed_time", "(", "decompose_end", ")", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "\"#### Cost for decomposing the weights: {} ....\"", ".", "format", "(", "decompose_dur", ")", ")", "\n", "\n", "lowrank_optimizer", "=", "ScheduledOptim", "(", "\n", "optim", ".", "Adam", "(", "lowrank_model", ".", "parameters", "(", ")", ",", "betas", "=", "(", "0.9", ",", "0.98", ")", ",", "eps", "=", "1e-09", ")", ",", "\n", "2.0", ",", "opt", ".", "d_model", ",", "opt", ".", "n_warmup_steps", ")", "\n", "train_loss", ",", "train_accu", "=", "train_epoch", "(", "\n", "lowrank_model", ",", "training_data", ",", "lowrank_optimizer", ",", "opt", ",", "device", ",", "smoothing", "=", "opt", ".", "label_smoothing", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"### Low-rank Training, epoch: {}\"", ".", "format", "(", "epoch_i", ")", ")", "\n", "train_loss", ",", "train_accu", "=", "train_epoch", "(", "\n", "lowrank_model", ",", "training_data", ",", "lowrank_optimizer", ",", "opt", ",", "device", ",", "smoothing", "=", "opt", ".", "label_smoothing", ")", "\n", "\n", "", "print_performances", "(", "'Training'", ",", "train_loss", ",", "train_accu", ",", "start", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch_i", "in", "range", "(", "opt", ".", "fr_warmup_epoch", ")", ":", "\n", "            ", "valid_loss", ",", "valid_accu", "=", "eval_epoch", "(", "vanilla_model", ",", "validation_data", ",", "device", ",", "opt", ")", "\n", "", "else", ":", "\n", "            ", "valid_loss", ",", "valid_accu", "=", "eval_epoch", "(", "lowrank_model", ",", "validation_data", ",", "device", ",", "opt", ")", "\n", "", "print_performances", "(", "'Validation'", ",", "valid_loss", ",", "valid_accu", ",", "start", ")", "\n", "\n", "valid_losses", "+=", "[", "valid_loss", "]", "\n", "\n", "if", "opt", ".", "fr_warmup_epoch", ">=", "opt", ".", "epoch", ":", "# vanilla ", "\n", "            ", "checkpoint", "=", "{", "'epoch'", ":", "epoch_i", ",", "'settings'", ":", "opt", ",", "'model'", ":", "vanilla_model", ".", "state_dict", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "{", "'epoch'", ":", "epoch_i", ",", "'settings'", ":", "opt", ",", "'model'", ":", "lowrank_model", ".", "state_dict", "(", ")", "}", "\n", "\n", "", "if", "opt", ".", "save_model", ":", "\n", "            ", "if", "opt", ".", "save_mode", "==", "'all'", ":", "\n", "                ", "model_name", "=", "opt", ".", "save_model", "+", "'_accu_{accu:3.3f}.chkpt'", ".", "format", "(", "accu", "=", "100", "*", "valid_accu", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "model_name", ")", "\n", "", "elif", "opt", ".", "save_mode", "==", "'best'", ":", "\n", "                ", "if", "opt", ".", "fr_warmup_epoch", ">=", "opt", ".", "epoch", ":", "# vanilla", "\n", "                    ", "model_name", "=", "opt", ".", "save_model", "+", "'_vanilla_seed{}.chkpt'", ".", "format", "(", "opt", ".", "seed", ")", "\n", "", "else", ":", "\n", "                    ", "model_name", "=", "opt", ".", "save_model", "+", "'_pufferfish_seed{}.chkpt'", ".", "format", "(", "opt", ".", "seed", ")", "\n", "\n", "", "if", "valid_loss", "<=", "min", "(", "valid_losses", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "checkpoint", ",", "model_name", ")", "\n", "logger", ".", "info", "(", "'    - [Info] The checkpoint file has been updated.'", ")", "\n", "\n", "", "", "", "if", "log_train_file", "and", "log_valid_file", ":", "\n", "            ", "with", "open", "(", "log_train_file", ",", "'a'", ")", "as", "log_tf", ",", "open", "(", "log_valid_file", ",", "'a'", ")", "as", "log_vf", ":", "\n", "                ", "log_tf", ".", "write", "(", "'{epoch},{loss: 8.5f},{ppl: 8.5f},{accu:3.3f}\\n'", ".", "format", "(", "\n", "epoch", "=", "epoch_i", ",", "loss", "=", "train_loss", ",", "\n", "ppl", "=", "math", ".", "exp", "(", "min", "(", "train_loss", ",", "100", ")", ")", ",", "accu", "=", "100", "*", "train_accu", ")", ")", "\n", "log_vf", ".", "write", "(", "'{epoch},{loss: 8.5f},{ppl: 8.5f},{accu:3.3f}\\n'", ".", "format", "(", "\n", "epoch", "=", "epoch_i", ",", "loss", "=", "valid_loss", ",", "\n", "ppl", "=", "math", ".", "exp", "(", "min", "(", "valid_loss", ",", "100", ")", ")", ",", "accu", "=", "100", "*", "valid_accu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.decompose_vanilla_model": [[239, 269], ["enumerate", "enumerate", "low_rank_model.load_state_dict", "vanilla_model.state_dict().items", "low_rank_model.state_dict().items", "min", "int", "torch.svd", "torch.svd", "torch.svd", "collected_weights.append", "collected_weights.append", "collected_weights.append", "param.size", "collected_weights[].size", "vanilla_model.state_dict", "len", "range", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "v_weight_sliced.t", "low_rank_model.state_dict", "param.size", "param.size", "param.size"], "function", ["None"], ["", "", "", "", "def", "decompose_vanilla_model", "(", "vanilla_model", ",", "low_rank_model", ",", "rank_ratio", "=", "0.25", ")", ":", "\n", "    ", "collected_weights", "=", "[", "]", "\n", "for", "p_index", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "vanilla_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", "and", "p_index", "not", "in", "range", "(", "0", ",", "14", ")", "and", "p_index", "not", "in", "range", "(", "76", ",", "96", ")", "and", "p_index", "!=", "188", ":", "\n", "            ", "rank", "=", "min", "(", "param", ".", "size", "(", ")", "[", "0", "]", ",", "param", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "sliced_rank", "=", "int", "(", "rank", "*", "rank_ratio", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "param", ")", "\n", "u_weight", "=", "u", "*", "torch", ".", "sqrt", "(", "s", ")", "\n", "v_weight", "=", "torch", ".", "sqrt", "(", "s", ")", "*", "v", "\n", "u_weight_sliced", ",", "v_weight_sliced", "=", "u_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", ",", "v_weight", "[", ":", ",", "0", ":", "sliced_rank", "]", "\n", "#collected_weights.append(u_weight_sliced)", "\n", "collected_weights", ".", "append", "(", "v_weight_sliced", ".", "t", "(", ")", ")", "\n", "collected_weights", ".", "append", "(", "u_weight_sliced", ")", "\n", "", "else", ":", "\n", "            ", "collected_weights", ".", "append", "(", "param", ")", "\n", "\n", "#for cw_index, cw in enumerate(collected_weights):", "\n", "#     print(\"cw_index: {}, cw: {}\".format(cw_index, cw.size()))", "\n", "\n", "", "", "reconstructed_state_dict", "=", "{", "}", "\n", "model_counter", "=", "0", "\n", "for", "p_index", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "low_rank_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "#print(\"p_index: {}, name: {}, param size: {}, collected weight size: {}\".format(p_index,", "\n", "#                                                                                name,", "\n", "#                                                                                param.size(), collected_weights[model_counter].size()))", "\n", "        ", "assert", "param", ".", "size", "(", ")", "==", "collected_weights", "[", "model_counter", "]", ".", "size", "(", ")", "\n", "reconstructed_state_dict", "[", "name", "]", "=", "collected_weights", "[", "model_counter", "]", "\n", "model_counter", "+=", "1", "\n", "", "low_rank_model", ".", "load_state_dict", "(", "reconstructed_state_dict", ")", "\n", "return", "low_rank_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.num_params_counter": [[271, 276], ["enumerate", "model.named_parameters", "p.numel"], "function", ["None"], ["", "def", "num_params_counter", "(", "model", ")", ":", "\n", "    ", "num_elems", "=", "0", "\n", "for", "p_index", ",", "(", "p_name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "num_elems", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "num_elems", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed": [[278, 289], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str", "logger.info"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed"], ["", "def", "seed", "(", "seed", ")", ":", "\n", "# seed = 1234", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "#TODO: Do we need deterministic in cudnn ? Double check", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "logger", ".", "info", "(", "\"Seeded everything\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.main": [[291, 403], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "torch.device", "torch.device", "train.seed", "all", "logger.info", "transformer.Models.Transformer().to", "transformer.Models.LowRankTransformer().to", "logger.info", "logger.info", "transformer.Optim.ScheduledOptim", "train.train", "logger.info", "logger.info", "train.prepare_dataloaders_from_bpe_files", "torch.Adam", "train.prepare_dataloaders", "transformer.Models.Transformer", "transformer.Models.LowRankTransformer", "train.num_params_counter", "train.num_params_counter", "Transformer().to.parameters"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.seed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.detection.image_list.ImageList.to", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.train", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.prepare_dataloaders_from_bpe_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.prepare_dataloaders", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.num_params_counter", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.num_params_counter"], ["", "def", "main", "(", ")", ":", "\n", "    ", "''' \n    Usage:\n    python train.py -data_pkl m30k_deen_shr.pkl -log m30k_deen_shr -embs_share_weight -proj_share_weight -label_smoothing -save_model trained -b 256 -warmup 128000\n    '''", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-data_pkl'", ",", "default", "=", "None", ")", "# all-in-1 data pickle or bpe field", "\n", "\n", "parser", ".", "add_argument", "(", "'-train_path'", ",", "default", "=", "None", ")", "# bpe encoded data", "\n", "parser", ".", "add_argument", "(", "'-val_path'", ",", "default", "=", "None", ")", "# bpe encoded data", "\n", "\n", "parser", ".", "add_argument", "(", "'-epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2048", ")", "\n", "parser", ".", "add_argument", "(", "'-seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'the random seed to use for the experiment.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-d_model'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'-d_inner_hid'", ",", "type", "=", "int", ",", "default", "=", "2048", ")", "\n", "parser", ".", "add_argument", "(", "'-d_k'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'-d_v'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-n_head'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-n_layers'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "'-warmup'", ",", "'--n_warmup_steps'", ",", "type", "=", "int", ",", "default", "=", "4000", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'-embs_share_weight'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-proj_share_weight'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-log'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-save_model'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-save_mode'", ",", "type", "=", "str", ",", "choices", "=", "[", "'all'", ",", "'best'", "]", ",", "default", "=", "'best'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-no_cuda'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-label_smoothing'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-fr_warmup_epoch'", ",", "type", "=", "int", ",", "default", "=", "150", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "cuda", "=", "not", "opt", ".", "no_cuda", "\n", "opt", ".", "d_word_vec", "=", "opt", ".", "d_model", "\n", "\n", "if", "not", "opt", ".", "log", "and", "not", "opt", ".", "save_model", ":", "\n", "        ", "logger", ".", "info", "(", "'No experiment result will be saved.'", ")", "\n", "raise", "\n", "\n", "", "if", "opt", ".", "batch_size", "<", "2048", "and", "opt", ".", "n_warmup_steps", "<=", "4000", ":", "\n", "        ", "logger", ".", "info", "(", "'[Warning] The warmup steps may be not enough.\\n'", "'(sz_b, warmup) = (2048, 4000) is the official setting.\\n'", "'Using smaller batch w/o longer warmup may cause '", "'the warmup stage ends with only little data trained.'", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", ".", "cuda", "else", "'cpu'", ")", "\n", "seed", "(", "seed", "=", "opt", ".", "seed", ")", "\n", "\n", "#========= Loading Dataset =========#", "\n", "\n", "if", "all", "(", "(", "opt", ".", "train_path", ",", "opt", ".", "val_path", ")", ")", ":", "\n", "        ", "training_data", ",", "validation_data", "=", "prepare_dataloaders_from_bpe_files", "(", "opt", ",", "device", ")", "\n", "", "elif", "opt", ".", "data_pkl", ":", "\n", "        ", "training_data", ",", "validation_data", "=", "prepare_dataloaders", "(", "opt", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "\n", "", "logger", ".", "info", "(", "opt", ")", "\n", "\n", "vanilla_transformer", "=", "Transformer", "(", "\n", "opt", ".", "src_vocab_size", ",", "\n", "opt", ".", "trg_vocab_size", ",", "\n", "src_pad_idx", "=", "opt", ".", "src_pad_idx", ",", "\n", "trg_pad_idx", "=", "opt", ".", "trg_pad_idx", ",", "\n", "trg_emb_prj_weight_sharing", "=", "opt", ".", "proj_share_weight", ",", "\n", "emb_src_trg_weight_sharing", "=", "opt", ".", "embs_share_weight", ",", "\n", "d_k", "=", "opt", ".", "d_k", ",", "\n", "d_v", "=", "opt", ".", "d_v", ",", "\n", "d_model", "=", "opt", ".", "d_model", ",", "\n", "d_word_vec", "=", "opt", ".", "d_word_vec", ",", "\n", "d_inner", "=", "opt", ".", "d_inner_hid", ",", "\n", "n_layers", "=", "opt", ".", "n_layers", ",", "\n", "n_head", "=", "opt", ".", "n_head", ",", "\n", "dropout", "=", "opt", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "lowrank_transformer", "=", "LowRankTransformer", "(", "\n", "opt", ".", "src_vocab_size", ",", "\n", "opt", ".", "trg_vocab_size", ",", "\n", "src_pad_idx", "=", "opt", ".", "src_pad_idx", ",", "\n", "trg_pad_idx", "=", "opt", ".", "trg_pad_idx", ",", "\n", "trg_emb_prj_weight_sharing", "=", "opt", ".", "proj_share_weight", ",", "\n", "emb_src_trg_weight_sharing", "=", "opt", ".", "embs_share_weight", ",", "\n", "d_k", "=", "opt", ".", "d_k", ",", "\n", "d_v", "=", "opt", ".", "d_v", ",", "\n", "d_model", "=", "opt", ".", "d_model", ",", "\n", "d_word_vec", "=", "opt", ".", "d_word_vec", ",", "\n", "d_inner", "=", "opt", ".", "d_inner_hid", ",", "\n", "n_layers", "=", "opt", ".", "n_layers", ",", "\n", "n_head", "=", "opt", ".", "n_head", ",", "\n", "dropout", "=", "opt", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "\"Full rank Transformer: Number of Parameters: {}\"", ".", "format", "(", "num_params_counter", "(", "vanilla_transformer", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Low rank Transformer: Number of Parameters: {}\"", ".", "format", "(", "num_params_counter", "(", "lowrank_transformer", ")", ")", ")", "\n", "\n", "\n", "# optimizer", "\n", "vanilla_optimizer", "=", "ScheduledOptim", "(", "\n", "optim", ".", "Adam", "(", "vanilla_transformer", ".", "parameters", "(", ")", ",", "betas", "=", "(", "0.9", ",", "0.98", ")", ",", "eps", "=", "1e-09", ")", ",", "\n", "2.0", ",", "opt", ".", "d_model", ",", "opt", ".", "n_warmup_steps", ")", "\n", "#lowrank_optimizer = ScheduledOptim(", "\n", "#    optim.Adam(lowrank_transformer.parameters(), betas=(0.9, 0.98), eps=1e-09),", "\n", "#    2.0, opt.d_model, opt.n_warmup_steps)", "\n", "\n", "train", "(", "vanilla_transformer", ",", "lowrank_transformer", ",", "training_data", ",", "validation_data", ",", "vanilla_optimizer", ",", "device", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.prepare_dataloaders_from_bpe_files": [[405, 437], ["dill.load", "torchtext.datasets.TranslationDataset", "torchtext.datasets.TranslationDataset", "len", "torchtext.data.BucketIterator", "torchtext.data.BucketIterator", "open", "len", "len", "vars", "vars"], "function", ["None"], ["", "def", "prepare_dataloaders_from_bpe_files", "(", "opt", ",", "device", ")", ":", "\n", "    ", "batch_size", "=", "opt", ".", "batch_size", "\n", "MIN_FREQ", "=", "2", "\n", "if", "not", "opt", ".", "embs_share_weight", ":", "\n", "        ", "raise", "\n", "\n", "", "data", "=", "pickle", ".", "load", "(", "open", "(", "opt", ".", "data_pkl", ",", "'rb'", ")", ")", "\n", "MAX_LEN", "=", "data", "[", "'settings'", "]", ".", "max_len", "\n", "field", "=", "data", "[", "'vocab'", "]", "\n", "fields", "=", "(", "field", ",", "field", ")", "\n", "\n", "def", "filter_examples_with_length", "(", "x", ")", ":", "\n", "        ", "return", "len", "(", "vars", "(", "x", ")", "[", "'src'", "]", ")", "<=", "MAX_LEN", "and", "len", "(", "vars", "(", "x", ")", "[", "'trg'", "]", ")", "<=", "MAX_LEN", "\n", "\n", "", "train", "=", "TranslationDataset", "(", "\n", "fields", "=", "fields", ",", "\n", "path", "=", "opt", ".", "train_path", ",", "\n", "exts", "=", "(", "'.src'", ",", "'.trg'", ")", ",", "\n", "filter_pred", "=", "filter_examples_with_length", ")", "\n", "val", "=", "TranslationDataset", "(", "\n", "fields", "=", "fields", ",", "\n", "path", "=", "opt", ".", "val_path", ",", "\n", "exts", "=", "(", "'.src'", ",", "'.trg'", ")", ",", "\n", "filter_pred", "=", "filter_examples_with_length", ")", "\n", "\n", "opt", ".", "max_token_seq_len", "=", "MAX_LEN", "+", "2", "\n", "opt", ".", "src_pad_idx", "=", "opt", ".", "trg_pad_idx", "=", "field", ".", "vocab", ".", "stoi", "[", "Constants", ".", "PAD_WORD", "]", "\n", "opt", ".", "src_vocab_size", "=", "opt", ".", "trg_vocab_size", "=", "len", "(", "field", ".", "vocab", ")", "\n", "\n", "train_iterator", "=", "BucketIterator", "(", "train", ",", "batch_size", "=", "batch_size", ",", "device", "=", "device", ",", "train", "=", "True", ")", "\n", "val_iterator", "=", "BucketIterator", "(", "val", ",", "batch_size", "=", "batch_size", ",", "device", "=", "device", ")", "\n", "return", "train_iterator", ",", "val_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.train.prepare_dataloaders": [[439, 467], ["dill.load", "len", "len", "print", "torchtext.data.Dataset", "print", "torchtext.data.Dataset", "torchtext.data.BucketIterator", "torchtext.data.BucketIterator", "open", "len"], "function", ["None"], ["", "def", "prepare_dataloaders", "(", "opt", ",", "device", ")", ":", "\n", "    ", "batch_size", "=", "opt", ".", "batch_size", "\n", "data", "=", "pickle", ".", "load", "(", "open", "(", "opt", ".", "data_pkl", ",", "'rb'", ")", ")", "\n", "\n", "opt", ".", "max_token_seq_len", "=", "data", "[", "'settings'", "]", ".", "max_len", "\n", "opt", ".", "src_pad_idx", "=", "data", "[", "'vocab'", "]", "[", "'src'", "]", ".", "vocab", ".", "stoi", "[", "Constants", ".", "PAD_WORD", "]", "\n", "opt", ".", "trg_pad_idx", "=", "data", "[", "'vocab'", "]", "[", "'trg'", "]", ".", "vocab", ".", "stoi", "[", "Constants", ".", "PAD_WORD", "]", "\n", "\n", "opt", ".", "src_vocab_size", "=", "len", "(", "data", "[", "'vocab'", "]", "[", "'src'", "]", ".", "vocab", ")", "\n", "opt", ".", "trg_vocab_size", "=", "len", "(", "data", "[", "'vocab'", "]", "[", "'trg'", "]", ".", "vocab", ")", "\n", "\n", "print", "(", "\"@@@@ vocab size: {}\"", ".", "format", "(", "opt", ".", "src_vocab_size", ")", ")", "\n", "\n", "#========= Preparing Model =========#", "\n", "if", "opt", ".", "embs_share_weight", ":", "\n", "        ", "assert", "data", "[", "'vocab'", "]", "[", "'src'", "]", ".", "vocab", ".", "stoi", "==", "data", "[", "'vocab'", "]", "[", "'trg'", "]", ".", "vocab", ".", "stoi", ",", "'To sharing word embedding the src/trg word2idx table shall be the same.'", "\n", "\n", "", "fields", "=", "{", "'src'", ":", "data", "[", "'vocab'", "]", "[", "'src'", "]", ",", "'trg'", ":", "data", "[", "'vocab'", "]", "[", "'trg'", "]", "}", "\n", "\n", "train", "=", "Dataset", "(", "examples", "=", "data", "[", "'train'", "]", ",", "fields", "=", "fields", ")", "\n", "print", "(", "\"@@@@ train set examples: {}\"", ".", "format", "(", "len", "(", "train", ".", "examples", ")", ")", ")", "\n", "val", "=", "Dataset", "(", "examples", "=", "data", "[", "'valid'", "]", ",", "fields", "=", "fields", ")", "\n", "\n", "train_iterator", "=", "BucketIterator", "(", "train", ",", "batch_size", "=", "batch_size", ",", "device", "=", "device", ",", "train", "=", "True", ")", "\n", "val_iterator", "=", "BucketIterator", "(", "val", ",", "batch_size", "=", "batch_size", ",", "device", "=", "device", ")", "\n", "\n", "return", "train_iterator", ",", "val_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.TqdmUpTo.update_to": [[50, 54], ["preprocess.TqdmUpTo.update"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.None.amp_imagenet_training.AverageMeter.update"], ["    ", "def", "update_to", "(", "self", ",", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "self", ".", "total", "=", "tsize", "\n", "", "self", ".", "update", "(", "b", "*", "bsize", "-", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.file_exist": [[56, 61], ["os.walk", "os.path.join"], "function", ["None"], ["", "", "def", "file_exist", "(", "dir_name", ",", "file_name", ")", ":", "\n", "    ", "for", "sub_dir", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "dir_name", ")", ":", "\n", "        ", "if", "file_name", "in", "files", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "sub_dir", ",", "file_name", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.download_and_extract": [[63, 84], ["preprocess.file_exist", "preprocess.file_exist", "preprocess._download_file", "sys.stderr.write", "preprocess.file_exist", "preprocess.file_exist", "OSError", "sys.stderr.write", "tarfile.open", "corpus_tar.extractall"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.file_exist", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.file_exist", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess._download_file", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.file_exist", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.file_exist"], ["", "def", "download_and_extract", "(", "download_dir", ",", "url", ",", "src_filename", ",", "trg_filename", ")", ":", "\n", "    ", "src_path", "=", "file_exist", "(", "download_dir", ",", "src_filename", ")", "\n", "trg_path", "=", "file_exist", "(", "download_dir", ",", "trg_filename", ")", "\n", "\n", "if", "src_path", "and", "trg_path", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f\"Already downloaded and extracted {url}.\\n\"", ")", "\n", "return", "src_path", ",", "trg_path", "\n", "\n", "", "compressed_file", "=", "_download_file", "(", "download_dir", ",", "url", ")", "\n", "\n", "sys", ".", "stderr", ".", "write", "(", "f\"Extracting {compressed_file}.\\n\"", ")", "\n", "with", "tarfile", ".", "open", "(", "compressed_file", ",", "\"r:gz\"", ")", "as", "corpus_tar", ":", "\n", "        ", "corpus_tar", ".", "extractall", "(", "download_dir", ")", "\n", "\n", "", "src_path", "=", "file_exist", "(", "download_dir", ",", "src_filename", ")", "\n", "trg_path", "=", "file_exist", "(", "download_dir", ",", "trg_filename", ")", "\n", "\n", "if", "src_path", "and", "trg_path", ":", "\n", "        ", "return", "src_path", ",", "trg_path", "\n", "\n", "", "raise", "OSError", "(", "f\"Download/extraction failed for url {url} to path {download_dir}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess._download_file": [[86, 95], ["preprocess.file_exist", "url.split", "sys.stderr.write", "sys.stderr.write", "preprocess.TqdmUpTo", "urllib.request.urlretrieve"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.file_exist"], ["", "def", "_download_file", "(", "download_dir", ",", "url", ")", ":", "\n", "    ", "filename", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "if", "file_exist", "(", "download_dir", ",", "filename", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f\"Already downloaded: {url} (at {filename}).\\n\"", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f\"Downloading from {url} to {filename}.\\n\"", ")", "\n", "with", "TqdmUpTo", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "filename", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "filename", "=", "filename", ",", "reporthook", "=", "t", ".", "update_to", ")", "\n", "", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.get_raw_files": [[97, 104], ["preprocess.download_and_extract", "raw_files[].append", "raw_files[].append"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.download_and_extract"], ["", "def", "get_raw_files", "(", "raw_dir", ",", "sources", ")", ":", "\n", "    ", "raw_files", "=", "{", "\"src\"", ":", "[", "]", ",", "\"trg\"", ":", "[", "]", ",", "}", "\n", "for", "d", "in", "sources", ":", "\n", "        ", "src_file", ",", "trg_file", "=", "download_and_extract", "(", "raw_dir", ",", "d", "[", "\"url\"", "]", ",", "d", "[", "\"src\"", "]", ",", "d", "[", "\"trg\"", "]", ")", "\n", "raw_files", "[", "\"src\"", "]", ".", "append", "(", "src_file", ")", "\n", "raw_files", "[", "\"trg\"", "]", ".", "append", "(", "trg_file", ")", "\n", "", "return", "raw_files", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.mkdir_if_needed": [[106, 109], ["os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "mkdir_if_needed", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.compile_files": [[111, 136], ["os.path.join", "os.path.join", "sys.stderr.write", "os.path.isfile", "os.path.isfile", "sys.stderr.write", "open", "open", "zip", "sys.stderr.write", "open", "open", "enumerate", "enumerate", "src_outf.write", "trg_outf.write", "line.replace().strip", "line.replace().strip", "line.replace", "line.replace"], "function", ["None"], ["", "", "def", "compile_files", "(", "raw_dir", ",", "raw_files", ",", "prefix", ")", ":", "\n", "    ", "src_fpath", "=", "os", ".", "path", ".", "join", "(", "raw_dir", ",", "f\"raw-{prefix}.src\"", ")", "\n", "trg_fpath", "=", "os", ".", "path", ".", "join", "(", "raw_dir", ",", "f\"raw-{prefix}.trg\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "src_fpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "trg_fpath", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f\"Merged files found, skip the merging process.\\n\"", ")", "\n", "return", "src_fpath", ",", "trg_fpath", "\n", "\n", "", "sys", ".", "stderr", ".", "write", "(", "f\"Merge files into two files: {src_fpath} and {trg_fpath}.\\n\"", ")", "\n", "\n", "with", "open", "(", "src_fpath", ",", "'w'", ")", "as", "src_outf", ",", "open", "(", "trg_fpath", ",", "'w'", ")", "as", "trg_outf", ":", "\n", "        ", "for", "src_inf", ",", "trg_inf", "in", "zip", "(", "raw_files", "[", "'src'", "]", ",", "raw_files", "[", "'trg'", "]", ")", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "f'  Input files: \\n'", "f'    - SRC: {src_inf}, and\\n'", "f'    - TRG: {trg_inf}.\\n'", ")", "\n", "with", "open", "(", "src_inf", ",", "newline", "=", "'\\n'", ")", "as", "src_inf", ",", "open", "(", "trg_inf", ",", "newline", "=", "'\\n'", ")", "as", "trg_inf", ":", "\n", "                ", "cntr", "=", "0", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "src_inf", ")", ":", "\n", "                    ", "cntr", "+=", "1", "\n", "src_outf", ".", "write", "(", "line", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "for", "j", ",", "line", "in", "enumerate", "(", "trg_inf", ")", ":", "\n", "                    ", "cntr", "-=", "1", "\n", "trg_outf", ".", "write", "(", "line", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "assert", "cntr", "==", "0", ",", "'Number of lines in two files are inconsistent.'", "\n", "", "", "", "return", "src_fpath", ",", "trg_fpath", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_file": [[138, 146], ["sys.stderr.write", "codecs.open", "codecs.open", "out_f.write", "bpe.process_line"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.process_line"], ["", "def", "encode_file", "(", "bpe", ",", "in_file", ",", "out_file", ")", ":", "\n", "    ", "sys", ".", "stderr", ".", "write", "(", "f\"Read raw content from {in_file} and \\n\"", "f\"Write encoded content to {out_file}\\n\"", ")", "\n", "\n", "with", "codecs", ".", "open", "(", "in_file", ",", "encoding", "=", "'utf-8'", ")", "as", "in_f", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "out_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "out_f", ":", "\n", "            ", "for", "line", "in", "in_f", ":", "\n", "                ", "out_f", ".", "write", "(", "bpe", ".", "process_line", "(", "line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_files": [[148, 158], ["os.path.join", "os.path.join", "preprocess.encode_file", "preprocess.encode_file", "os.path.isfile", "os.path.isfile", "sys.stderr.write"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_file", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_file"], ["", "", "", "", "def", "encode_files", "(", "bpe", ",", "src_in_file", ",", "trg_in_file", ",", "data_dir", ",", "prefix", ")", ":", "\n", "    ", "src_out_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f\"{prefix}.src\"", ")", "\n", "trg_out_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f\"{prefix}.trg\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "src_out_file", ")", "and", "os", ".", "path", ".", "isfile", "(", "trg_out_file", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f\"Encoded files found, skip the encoding process ...\\n\"", ")", "\n", "\n", "", "encode_file", "(", "bpe", ",", "src_in_file", ",", "src_out_file", ")", "\n", "encode_file", "(", "bpe", ",", "trg_in_file", ",", "trg_out_file", ")", "\n", "return", "src_out_file", ",", "trg_out_file", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.main": [[160, 241], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "preprocess.mkdir_if_needed", "preprocess.mkdir_if_needed", "preprocess.get_raw_files", "preprocess.get_raw_files", "preprocess.get_raw_files", "preprocess.compile_files", "preprocess.compile_files", "preprocess.compile_files", "os.path.join", "sys.stderr.write", "sys.stderr.write", "sys.stderr.write", "preprocess.encode_files", "preprocess.encode_files", "preprocess.encode_files", "sys.stderr.write", "torchtext.data.Field", "torchtext.data.Field", "torchtext.datasets.TranslationDataset", "torchtext.data.Field.build_vocab", "os.path.join", "print", "dill.dump", "os.path.isfile", "sys.stderr.write", "learn_bpe.learn_bpe", "codecs.open", "apply_bpe.BPE", "chain", "open", "os.path.join", "len", "len", "vars", "vars"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.mkdir_if_needed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.mkdir_if_needed", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.get_raw_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.get_raw_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.get_raw_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.compile_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.compile_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.compile_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.encode_files", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.learn_bpe.learn_bpe"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-raw_dir'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-data_dir'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-codes'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-save_data'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-prefix'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-max_len'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--symbols'", ",", "'-s'", ",", "type", "=", "int", ",", "default", "=", "32000", ",", "help", "=", "\"Vocabulary size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--min-frequency'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "metavar", "=", "'FREQ'", ",", "\n", "help", "=", "'Stop if no symbol pair has frequency >= FREQ (default: %(default)s))'", ")", "\n", "parser", ".", "add_argument", "(", "'--dict-input'", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set, input file is interpreted as a dictionary where each line contains a word-count pair\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--separator'", ",", "type", "=", "str", ",", "default", "=", "'@@'", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "\"Separator between non-final subword units (default: '%(default)s'))\"", ")", "\n", "parser", ".", "add_argument", "(", "'--total-symbols'", ",", "'-t'", ",", "action", "=", "\"store_true\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Create folder if needed.", "\n", "mkdir_if_needed", "(", "opt", ".", "raw_dir", ")", "\n", "mkdir_if_needed", "(", "opt", ".", "data_dir", ")", "\n", "\n", "# Download and extract raw data.", "\n", "raw_train", "=", "get_raw_files", "(", "opt", ".", "raw_dir", ",", "_TRAIN_DATA_SOURCES", ")", "\n", "raw_val", "=", "get_raw_files", "(", "opt", ".", "raw_dir", ",", "_VAL_DATA_SOURCES", ")", "\n", "raw_test", "=", "get_raw_files", "(", "opt", ".", "raw_dir", ",", "_TEST_DATA_SOURCES", ")", "\n", "\n", "# Merge files into one.", "\n", "train_src", ",", "train_trg", "=", "compile_files", "(", "opt", ".", "raw_dir", ",", "raw_train", ",", "opt", ".", "prefix", "+", "'-train'", ")", "\n", "val_src", ",", "val_trg", "=", "compile_files", "(", "opt", ".", "raw_dir", ",", "raw_val", ",", "opt", ".", "prefix", "+", "'-val'", ")", "\n", "test_src", ",", "test_trg", "=", "compile_files", "(", "opt", ".", "raw_dir", ",", "raw_test", ",", "opt", ".", "prefix", "+", "'-test'", ")", "\n", "\n", "# Build up the code from training files if not exist", "\n", "opt", ".", "codes", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "opt", ".", "codes", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "opt", ".", "codes", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "f\"Collect codes from training data and save to {opt.codes}.\\n\"", ")", "\n", "learn_bpe", "(", "raw_train", "[", "'src'", "]", "+", "raw_train", "[", "'trg'", "]", ",", "opt", ".", "codes", ",", "opt", ".", "symbols", ",", "opt", ".", "min_frequency", ",", "True", ")", "\n", "", "sys", ".", "stderr", ".", "write", "(", "f\"BPE codes prepared.\\n\"", ")", "\n", "\n", "sys", ".", "stderr", ".", "write", "(", "f\"Build up the tokenizer.\\n\"", ")", "\n", "with", "codecs", ".", "open", "(", "opt", ".", "codes", ",", "encoding", "=", "'utf-8'", ")", "as", "codes", ":", "\n", "        ", "bpe", "=", "BPE", "(", "codes", ",", "separator", "=", "opt", ".", "separator", ")", "\n", "\n", "", "sys", ".", "stderr", ".", "write", "(", "f\"Encoding ...\\n\"", ")", "\n", "encode_files", "(", "bpe", ",", "train_src", ",", "train_trg", ",", "opt", ".", "data_dir", ",", "opt", ".", "prefix", "+", "'-train'", ")", "\n", "encode_files", "(", "bpe", ",", "val_src", ",", "val_trg", ",", "opt", ".", "data_dir", ",", "opt", ".", "prefix", "+", "'-val'", ")", "\n", "encode_files", "(", "bpe", ",", "test_src", ",", "test_trg", ",", "opt", ".", "data_dir", ",", "opt", ".", "prefix", "+", "'-test'", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "f\"Done.\\n\"", ")", "\n", "\n", "\n", "field", "=", "torchtext", ".", "data", ".", "Field", "(", "\n", "tokenize", "=", "str", ".", "split", ",", "\n", "lower", "=", "True", ",", "\n", "pad_token", "=", "Constants", ".", "PAD_WORD", ",", "\n", "init_token", "=", "Constants", ".", "BOS_WORD", ",", "\n", "eos_token", "=", "Constants", ".", "EOS_WORD", ")", "\n", "\n", "fields", "=", "(", "field", ",", "field", ")", "\n", "\n", "MAX_LEN", "=", "opt", ".", "max_len", "\n", "\n", "def", "filter_examples_with_length", "(", "x", ")", ":", "\n", "        ", "return", "len", "(", "vars", "(", "x", ")", "[", "'src'", "]", ")", "<=", "MAX_LEN", "and", "len", "(", "vars", "(", "x", ")", "[", "'trg'", "]", ")", "<=", "MAX_LEN", "\n", "\n", "", "enc_train_files_prefix", "=", "opt", ".", "prefix", "+", "'-train'", "\n", "train", "=", "TranslationDataset", "(", "\n", "fields", "=", "fields", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "enc_train_files_prefix", ")", ",", "\n", "exts", "=", "(", "'.src'", ",", "'.trg'", ")", ",", "\n", "filter_pred", "=", "filter_examples_with_length", ")", "\n", "\n", "from", "itertools", "import", "chain", "\n", "field", ".", "build_vocab", "(", "chain", "(", "train", ".", "src", ",", "train", ".", "trg", ")", ",", "min_freq", "=", "2", ")", "\n", "\n", "data", "=", "{", "'settings'", ":", "opt", ",", "'vocab'", ":", "field", ",", "}", "\n", "opt", ".", "save_data", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "opt", ".", "save_data", ")", "\n", "\n", "print", "(", "'[Info] Dumping the processed data to pickle file'", ",", "opt", ".", "save_data", ")", "\n", "pickle", ".", "dump", "(", "data", ",", "open", "(", "opt", ".", "save_data", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.preprocess.main_wo_bpe": [[244, 332], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "spacy.load", "spacy.load", "torchtext.data.Field", "torchtext.data.Field", "torchtext.data.Field", "torchtext.data.Field", "torchtext.datasets.Multi30k.splits", "torchtext.datasets.Multi30k.splits", "torchtext.data.Field.build_vocab", "print", "torchtext.data.Field.build_vocab", "print", "print", "dill.dump", "any", "all", "all", "len", "len", "print", "torchtext.data.Field.vocab.stoi.items", "torchtext.data.Field.vocab.stoi.items", "print", "open", "any", "len", "len", "spacy.load.tokenizer", "spacy.load.tokenizer", "len", "len", "len", "vars", "vars"], "function", ["None"], ["", "def", "main_wo_bpe", "(", ")", ":", "\n", "    ", "'''\n    Usage: python preprocess.py -lang_src de -lang_trg en -save_data multi30k_de_en.pkl -share_vocab\n    '''", "\n", "\n", "spacy_support_langs", "=", "[", "'de'", ",", "'el'", ",", "'en'", ",", "'es'", ",", "'fr'", ",", "'it'", ",", "'lt'", ",", "'nb'", ",", "'nl'", ",", "'pt'", "]", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-lang_src'", ",", "required", "=", "True", ",", "choices", "=", "spacy_support_langs", ")", "\n", "parser", ".", "add_argument", "(", "'-lang_trg'", ",", "required", "=", "True", ",", "choices", "=", "spacy_support_langs", ")", "\n", "parser", ".", "add_argument", "(", "'-save_data'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-data_src'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-data_trg'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-max_len'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'-min_word_count'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'-keep_case'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-share_vocab'", ",", "action", "=", "'store_true'", ")", "\n", "#parser.add_argument('-ratio', '--train_valid_test_ratio', type=int, nargs=3, metavar=(8,1,1))", "\n", "#parser.add_argument('-vocab', default=None)", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "assert", "not", "any", "(", "[", "opt", ".", "data_src", ",", "opt", ".", "data_trg", "]", ")", ",", "'Custom data input is not support now.'", "\n", "assert", "not", "any", "(", "[", "opt", ".", "data_src", ",", "opt", ".", "data_trg", "]", ")", "or", "all", "(", "[", "opt", ".", "data_src", ",", "opt", ".", "data_trg", "]", ")", "\n", "print", "(", "opt", ")", "\n", "\n", "src_lang_model", "=", "spacy", ".", "load", "(", "opt", ".", "lang_src", ")", "\n", "trg_lang_model", "=", "spacy", ".", "load", "(", "opt", ".", "lang_trg", ")", "\n", "\n", "def", "tokenize_src", "(", "text", ")", ":", "\n", "        ", "return", "[", "tok", ".", "text", "for", "tok", "in", "src_lang_model", ".", "tokenizer", "(", "text", ")", "]", "\n", "\n", "", "def", "tokenize_trg", "(", "text", ")", ":", "\n", "        ", "return", "[", "tok", ".", "text", "for", "tok", "in", "trg_lang_model", ".", "tokenizer", "(", "text", ")", "]", "\n", "\n", "", "SRC", "=", "torchtext", ".", "data", ".", "Field", "(", "\n", "tokenize", "=", "tokenize_src", ",", "lower", "=", "not", "opt", ".", "keep_case", ",", "\n", "pad_token", "=", "Constants", ".", "PAD_WORD", ",", "init_token", "=", "Constants", ".", "BOS_WORD", ",", "eos_token", "=", "Constants", ".", "EOS_WORD", ")", "\n", "\n", "TRG", "=", "torchtext", ".", "data", ".", "Field", "(", "\n", "tokenize", "=", "tokenize_trg", ",", "lower", "=", "not", "opt", ".", "keep_case", ",", "\n", "pad_token", "=", "Constants", ".", "PAD_WORD", ",", "init_token", "=", "Constants", ".", "BOS_WORD", ",", "eos_token", "=", "Constants", ".", "EOS_WORD", ")", "\n", "\n", "MAX_LEN", "=", "opt", ".", "max_len", "\n", "MIN_FREQ", "=", "opt", ".", "min_word_count", "\n", "\n", "if", "not", "all", "(", "[", "opt", ".", "data_src", ",", "opt", ".", "data_trg", "]", ")", ":", "\n", "        ", "assert", "{", "opt", ".", "lang_src", ",", "opt", ".", "lang_trg", "}", "==", "{", "'de'", ",", "'en'", "}", "\n", "", "else", ":", "\n", "# Pack custom txt file into example datasets", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "filter_examples_with_length", "(", "x", ")", ":", "\n", "        ", "return", "len", "(", "vars", "(", "x", ")", "[", "'src'", "]", ")", "<=", "MAX_LEN", "and", "len", "(", "vars", "(", "x", ")", "[", "'trg'", "]", ")", "<=", "MAX_LEN", "\n", "\n", "", "train", ",", "val", ",", "test", "=", "torchtext", ".", "datasets", ".", "Multi30k", ".", "splits", "(", "\n", "exts", "=", "(", "'.'", "+", "opt", ".", "lang_src", ",", "'.'", "+", "opt", ".", "lang_trg", ")", ",", "\n", "fields", "=", "(", "SRC", ",", "TRG", ")", ",", "\n", "filter_pred", "=", "filter_examples_with_length", ")", "\n", "\n", "SRC", ".", "build_vocab", "(", "train", ".", "src", ",", "min_freq", "=", "MIN_FREQ", ")", "\n", "print", "(", "'[Info] Get source language vocabulary size:'", ",", "len", "(", "SRC", ".", "vocab", ")", ")", "\n", "TRG", ".", "build_vocab", "(", "train", ".", "trg", ",", "min_freq", "=", "MIN_FREQ", ")", "\n", "print", "(", "'[Info] Get target language vocabulary size:'", ",", "len", "(", "TRG", ".", "vocab", ")", ")", "\n", "\n", "if", "opt", ".", "share_vocab", ":", "\n", "        ", "print", "(", "'[Info] Merging two vocabulary ...'", ")", "\n", "for", "w", ",", "_", "in", "SRC", ".", "vocab", ".", "stoi", ".", "items", "(", ")", ":", "\n", "# TODO: Also update the `freq`, although it is not likely to be used.", "\n", "            ", "if", "w", "not", "in", "TRG", ".", "vocab", ".", "stoi", ":", "\n", "                ", "TRG", ".", "vocab", ".", "stoi", "[", "w", "]", "=", "len", "(", "TRG", ".", "vocab", ".", "stoi", ")", "\n", "", "", "TRG", ".", "vocab", ".", "itos", "=", "[", "None", "]", "*", "len", "(", "TRG", ".", "vocab", ".", "stoi", ")", "\n", "for", "w", ",", "i", "in", "TRG", ".", "vocab", ".", "stoi", ".", "items", "(", ")", ":", "\n", "            ", "TRG", ".", "vocab", ".", "itos", "[", "i", "]", "=", "w", "\n", "", "SRC", ".", "vocab", ".", "stoi", "=", "TRG", ".", "vocab", ".", "stoi", "\n", "SRC", ".", "vocab", ".", "itos", "=", "TRG", ".", "vocab", ".", "itos", "\n", "print", "(", "'[Info] Get merged vocabulary size:'", ",", "len", "(", "TRG", ".", "vocab", ")", ")", "\n", "\n", "\n", "", "data", "=", "{", "\n", "'settings'", ":", "opt", ",", "\n", "'vocab'", ":", "{", "'src'", ":", "SRC", ",", "'trg'", ":", "TRG", "}", ",", "\n", "'train'", ":", "train", ".", "examples", ",", "\n", "'valid'", ":", "val", ".", "examples", ",", "\n", "'test'", ":", "test", ".", "examples", "}", "\n", "\n", "print", "(", "'[Info] Dumping the processed data to pickle file'", ",", "opt", ".", "save_data", ")", "\n", "pickle", ".", "dump", "(", "data", ",", "open", "(", "opt", ".", "save_data", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.__init__": [[28, 64], ["codes.seek", "codes.readline", "codes.readline.startswith", "enumerate", "dict", "dict", "tuple", "codes.seek", "tuple", "re.compile", "item.strip().split", "enumerate", "len", "sys.stderr.write", "sys.stderr.write", "sys.exit", "int", "reversed", "apply_bpe.BPE.bpe_codes.items", "re.sub().split", "item.strip", "list", "enumerate", "re.sub", "codes.readline.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "codes", ",", "merges", "=", "-", "1", ",", "separator", "=", "'@@'", ",", "vocab", "=", "None", ",", "glossaries", "=", "None", ")", ":", "\n", "\n", "        ", "codes", ".", "seek", "(", "0", ")", "\n", "offset", "=", "1", "\n", "\n", "# check version information", "\n", "firstline", "=", "codes", ".", "readline", "(", ")", "\n", "if", "firstline", ".", "startswith", "(", "'#version:'", ")", ":", "\n", "            ", "self", ".", "version", "=", "tuple", "(", "[", "int", "(", "x", ")", "for", "x", "in", "re", ".", "sub", "(", "r'(\\.0+)*$'", ",", "''", ",", "firstline", ".", "split", "(", ")", "[", "-", "1", "]", ")", ".", "split", "(", "\".\"", ")", "]", ")", "\n", "offset", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "version", "=", "(", "0", ",", "1", ")", "\n", "codes", ".", "seek", "(", "0", ")", "\n", "\n", "", "self", ".", "bpe_codes", "=", "[", "tuple", "(", "item", ".", "strip", "(", "'\\r\\n '", ")", ".", "split", "(", "' '", ")", ")", "for", "(", "n", ",", "item", ")", "in", "enumerate", "(", "codes", ")", "if", "(", "n", "<", "merges", "or", "merges", "==", "-", "1", ")", "]", "\n", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "bpe_codes", ")", ":", "\n", "            ", "if", "len", "(", "item", ")", "!=", "2", ":", "\n", "                ", "sys", ".", "stderr", ".", "write", "(", "'Error: invalid line {0} in BPE codes file: {1}\\n'", ".", "format", "(", "i", "+", "offset", ",", "' '", ".", "join", "(", "item", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "'The line should exist of exactly two subword units, separated by whitespace\\n'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# some hacking to deal with duplicates (only consider first instance)", "\n", "", "", "self", ".", "bpe_codes", "=", "dict", "(", "[", "(", "code", ",", "i", ")", "for", "(", "i", ",", "code", ")", "in", "reversed", "(", "list", "(", "enumerate", "(", "self", ".", "bpe_codes", ")", ")", ")", "]", ")", "\n", "\n", "self", ".", "bpe_codes_reverse", "=", "dict", "(", "[", "(", "pair", "[", "0", "]", "+", "pair", "[", "1", "]", ",", "pair", ")", "for", "pair", ",", "i", "in", "self", ".", "bpe_codes", ".", "items", "(", ")", "]", ")", "\n", "\n", "self", ".", "separator", "=", "separator", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "self", ".", "glossaries", "=", "glossaries", "if", "glossaries", "else", "[", "]", "\n", "\n", "self", ".", "glossaries_regex", "=", "re", ".", "compile", "(", "'^({})$'", ".", "format", "(", "'|'", ".", "join", "(", "glossaries", ")", ")", ")", "if", "glossaries", "else", "None", "\n", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.process_line": [[65, 81], ["apply_bpe.BPE.segment", "len", "len", "len", "len", "line.lstrip", "line.rstrip", "len"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.segment"], ["", "def", "process_line", "(", "self", ",", "line", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "\"\"\"segment line, dealing with leading and trailing whitespace\"\"\"", "\n", "\n", "out", "=", "\"\"", "\n", "\n", "leading_whitespace", "=", "len", "(", "line", ")", "-", "len", "(", "line", ".", "lstrip", "(", "'\\r\\n '", ")", ")", "\n", "if", "leading_whitespace", ":", "\n", "            ", "out", "+=", "line", "[", ":", "leading_whitespace", "]", "\n", "\n", "", "out", "+=", "self", ".", "segment", "(", "line", ",", "dropout", ")", "\n", "\n", "trailing_whitespace", "=", "len", "(", "line", ")", "-", "len", "(", "line", ".", "rstrip", "(", "'\\r\\n '", ")", ")", "\n", "if", "trailing_whitespace", "and", "trailing_whitespace", "!=", "len", "(", "line", ")", ":", "\n", "            ", "out", "+=", "line", "[", "-", "trailing_whitespace", ":", "]", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.segment": [[82, 86], ["apply_bpe.BPE.segment_tokens", "sentence.strip().split", "sentence.strip"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.segment_tokens"], ["", "def", "segment", "(", "self", ",", "sentence", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "\"\"\"segment single sentence (whitespace-tokenized string) with BPE encoding\"\"\"", "\n", "segments", "=", "self", ".", "segment_tokens", "(", "sentence", ".", "strip", "(", "'\\r\\n '", ")", ".", "split", "(", "' '", ")", ",", "dropout", ")", "\n", "return", "' '", ".", "join", "(", "segments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE.segment_tokens": [[87, 110], ["output.append", "output.append", "apply_bpe.BPE._isolate_glossaries", "apply_bpe.encode"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE._isolate_glossaries", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.encode"], ["", "def", "segment_tokens", "(", "self", ",", "tokens", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "\"\"\"segment a sequence of tokens with BPE encoding\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "word", "in", "tokens", ":", "\n", "# eliminate double spaces", "\n", "            ", "if", "not", "word", ":", "\n", "                ", "continue", "\n", "", "new_word", "=", "[", "out", "for", "segment", "in", "self", ".", "_isolate_glossaries", "(", "word", ")", "\n", "for", "out", "in", "encode", "(", "segment", ",", "\n", "self", ".", "bpe_codes", ",", "\n", "self", ".", "bpe_codes_reverse", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "separator", ",", "\n", "self", ".", "version", ",", "\n", "self", ".", "cache", ",", "\n", "self", ".", "glossaries_regex", ",", "\n", "dropout", ")", "]", "\n", "\n", "for", "item", "in", "new_word", "[", ":", "-", "1", "]", ":", "\n", "                ", "output", ".", "append", "(", "item", "+", "self", ".", "separator", ")", "\n", "", "output", ".", "append", "(", "new_word", "[", "-", "1", "]", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.BPE._isolate_glossaries": [[111, 117], ["apply_bpe.isolate_glossary"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.isolate_glossary"], ["", "def", "_isolate_glossaries", "(", "self", ",", "word", ")", ":", "\n", "        ", "word_segments", "=", "[", "word", "]", "\n", "for", "gloss", "in", "self", ".", "glossaries", ":", "\n", "            ", "word_segments", "=", "[", "out_segments", "for", "segment", "in", "word_segments", "\n", "for", "out_segments", "in", "isolate_glossary", "(", "segment", ",", "gloss", ")", "]", "\n", "", "return", "word_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.encode": [[118, 178], ["tuple", "glossaries_regex.match", "len", "len", "new_word.extend", "word[].endswith", "apply_bpe.check_vocab_and_split", "list", "min", "new_word.extend", "new_word.append", "list", "enumerate", "zip", "random.random"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.check_vocab_and_split"], ["", "", "def", "encode", "(", "orig", ",", "bpe_codes", ",", "bpe_codes_reverse", ",", "vocab", ",", "separator", ",", "version", ",", "cache", ",", "glossaries_regex", "=", "None", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "\"\"\"Encode word based on list of BPE merge operations, which are applied consecutively\n    \"\"\"", "\n", "\n", "if", "not", "dropout", "and", "orig", "in", "cache", ":", "\n", "        ", "return", "cache", "[", "orig", "]", "\n", "\n", "", "if", "glossaries_regex", "and", "glossaries_regex", ".", "match", "(", "orig", ")", ":", "\n", "        ", "cache", "[", "orig", "]", "=", "(", "orig", ",", ")", "\n", "return", "(", "orig", ",", ")", "\n", "\n", "", "if", "len", "(", "orig", ")", "==", "1", ":", "\n", "        ", "return", "orig", "\n", "\n", "", "if", "version", "==", "(", "0", ",", "1", ")", ":", "\n", "        ", "word", "=", "list", "(", "orig", ")", "+", "[", "'</w>'", "]", "\n", "", "elif", "version", "==", "(", "0", ",", "2", ")", ":", "# more consistent handling of word-final segments", "\n", "        ", "word", "=", "list", "(", "orig", "[", ":", "-", "1", "]", ")", "+", "[", "orig", "[", "-", "1", "]", "+", "'</w>'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "while", "len", "(", "word", ")", ">", "1", ":", "\n", "\n", "# get list of symbol pairs; optionally apply dropout", "\n", "        ", "pairs", "=", "[", "(", "bpe_codes", "[", "pair", "]", ",", "i", ",", "pair", ")", "for", "(", "i", ",", "pair", ")", "in", "enumerate", "(", "zip", "(", "word", ",", "word", "[", "1", ":", "]", ")", ")", "if", "(", "not", "dropout", "or", "random", ".", "random", "(", ")", ">", "dropout", ")", "and", "pair", "in", "bpe_codes", "]", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "break", "\n", "\n", "#get first merge operation in list of BPE codes", "\n", "", "bigram", "=", "min", "(", "pairs", ")", "[", "2", "]", "\n", "\n", "# find start position of all pairs that we want to merge", "\n", "positions", "=", "[", "i", "for", "(", "rank", ",", "i", ",", "pair", ")", "in", "pairs", "if", "pair", "==", "bigram", "]", "\n", "\n", "i", "=", "0", "\n", "new_word", "=", "[", "]", "\n", "bigram", "=", "''", ".", "join", "(", "bigram", ")", "\n", "for", "j", "in", "positions", ":", "\n", "# merges are invalid if they start before current position. This can happen if there are overlapping pairs: (x x x -> xx x)", "\n", "            ", "if", "j", "<", "i", ":", "\n", "                ", "continue", "\n", "", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "# all symbols before merged pair", "\n", "new_word", ".", "append", "(", "bigram", ")", "# merged pair", "\n", "i", "=", "j", "+", "2", "# continue after merged pair", "\n", "", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "# add all symbols until end of word", "\n", "word", "=", "new_word", "\n", "\n", "# don't print end-of-word symbols", "\n", "", "if", "word", "[", "-", "1", "]", "==", "'</w>'", ":", "\n", "        ", "word", "=", "word", "[", ":", "-", "1", "]", "\n", "", "elif", "word", "[", "-", "1", "]", ".", "endswith", "(", "'</w>'", ")", ":", "\n", "        ", "word", "[", "-", "1", "]", "=", "word", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n", "", "word", "=", "tuple", "(", "word", ")", "\n", "if", "vocab", ":", "\n", "        ", "word", "=", "check_vocab_and_split", "(", "word", ",", "bpe_codes_reverse", ",", "vocab", ",", "separator", ")", "\n", "\n", "", "cache", "[", "orig", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.recursive_split": [[179, 205], ["apply_bpe.recursive_split", "apply_bpe.recursive_split"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.recursive_split", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.recursive_split"], ["", "def", "recursive_split", "(", "segment", ",", "bpe_codes", ",", "vocab", ",", "separator", ",", "final", "=", "False", ")", ":", "\n", "    ", "\"\"\"Recursively split segment into smaller units (by reversing BPE merges)\n    until all units are either in-vocabulary, or cannot be split futher.\"\"\"", "\n", "\n", "try", ":", "\n", "        ", "if", "final", ":", "\n", "            ", "left", ",", "right", "=", "bpe_codes", "[", "segment", "+", "'</w>'", "]", "\n", "right", "=", "right", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "            ", "left", ",", "right", "=", "bpe_codes", "[", "segment", "]", "\n", "", "", "except", ":", "\n", "#sys.stderr.write('cannot split {0} further.\\n'.format(segment))", "\n", "        ", "yield", "segment", "\n", "return", "\n", "\n", "", "if", "left", "+", "separator", "in", "vocab", ":", "\n", "        ", "yield", "left", "\n", "", "else", ":", "\n", "        ", "for", "item", "in", "recursive_split", "(", "left", ",", "bpe_codes", ",", "vocab", ",", "separator", ",", "False", ")", ":", "\n", "            ", "yield", "item", "\n", "\n", "", "", "if", "(", "final", "and", "right", "in", "vocab", ")", "or", "(", "not", "final", "and", "right", "+", "separator", "in", "vocab", ")", ":", "\n", "        ", "yield", "right", "\n", "", "else", ":", "\n", "        ", "for", "item", "in", "recursive_split", "(", "right", ",", "bpe_codes", ",", "vocab", ",", "separator", ",", "final", ")", ":", "\n", "            ", "yield", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.check_vocab_and_split": [[206, 229], ["out.append", "apply_bpe.recursive_split", "out.append", "apply_bpe.recursive_split", "out.append", "out.append"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.recursive_split", "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.recursive_split"], ["", "", "", "def", "check_vocab_and_split", "(", "orig", ",", "bpe_codes", ",", "vocab", ",", "separator", ")", ":", "\n", "    ", "\"\"\"Check for each segment in word if it is in-vocabulary,\n    and segment OOV segments into smaller units by reversing the BPE merge operations\"\"\"", "\n", "\n", "out", "=", "[", "]", "\n", "\n", "for", "segment", "in", "orig", "[", ":", "-", "1", "]", ":", "\n", "        ", "if", "segment", "+", "separator", "in", "vocab", ":", "\n", "            ", "out", ".", "append", "(", "segment", ")", "\n", "", "else", ":", "\n", "#sys.stderr.write('OOV: {0}\\n'.format(segment))", "\n", "            ", "for", "item", "in", "recursive_split", "(", "segment", ",", "bpe_codes", ",", "vocab", ",", "separator", ",", "False", ")", ":", "\n", "                ", "out", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "segment", "=", "orig", "[", "-", "1", "]", "\n", "if", "segment", "in", "vocab", ":", "\n", "        ", "out", ".", "append", "(", "segment", ")", "\n", "", "else", ":", "\n", "#sys.stderr.write('OOV: {0}\\n'.format(segment))", "\n", "        ", "for", "item", "in", "recursive_split", "(", "segment", ",", "bpe_codes", ",", "vocab", ",", "separator", ",", "True", ")", ":", "\n", "            ", "out", ".", "append", "(", "item", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.read_vocabulary": [[231, 244], ["set", "line.strip().split", "int", "set.add", "line.strip"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.dist_experiments.mean_accumulator.MeanAccumulator.add"], ["", "def", "read_vocabulary", "(", "vocab_file", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"read vocabulary file produced by get_vocab.py, and filter according to frequency threshold.\n    \"\"\"", "\n", "\n", "vocabulary", "=", "set", "(", ")", "\n", "\n", "for", "line", "in", "vocab_file", ":", "\n", "        ", "word", ",", "freq", "=", "line", ".", "strip", "(", "'\\r\\n '", ")", ".", "split", "(", "' '", ")", "\n", "freq", "=", "int", "(", "freq", ")", "\n", "if", "threshold", "==", "None", "or", "freq", ">=", "threshold", ":", "\n", "            ", "vocabulary", ".", "add", "(", "word", ")", "\n", "\n", "", "", "return", "vocabulary", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.low_rank_transformer.apply_bpe.isolate_glossary": [[245, 262], ["re.match", "re.split", "list", "re.search", "filter", "ending.strip"], "function", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.early_bird_ticket.filter.filter"], ["", "def", "isolate_glossary", "(", "word", ",", "glossary", ")", ":", "\n", "    ", "\"\"\"\n    Isolate a glossary present inside a word.\n\n    Returns a list of subwords. In which all 'glossary' glossaries are isolated \n\n    For example, if 'USA' is the glossary and '1934USABUSA' the word, the return value is:\n        ['1934', 'USA', 'B', 'USA']\n    \"\"\"", "\n", "# regex equivalent of (if word == glossary or glossary not in word)", "\n", "if", "re", ".", "match", "(", "'^'", "+", "glossary", "+", "'$'", ",", "word", ")", "or", "not", "re", ".", "search", "(", "glossary", ",", "word", ")", ":", "\n", "        ", "return", "[", "word", "]", "\n", "", "else", ":", "\n", "        ", "segments", "=", "re", ".", "split", "(", "r'({})'", ".", "format", "(", "glossary", ")", ",", "word", ")", "\n", "segments", ",", "ending", "=", "segments", "[", ":", "-", "1", "]", ",", "segments", "[", "-", "1", "]", "\n", "segments", "=", "list", "(", "filter", "(", "None", ",", "segments", ")", ")", "# Remove empty strings in regex group.", "\n", "return", "segments", "+", "[", "ending", ".", "strip", "(", "'\\r\\n '", ")", "]", "if", "ending", "!=", "''", "else", "segments", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Modules.ScaledDotProductAttention.__init__": [[10, 14], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Modules.ScaledDotProductAttention.forward": [[15, 26], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Modules.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.transpose", "attn.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "matmul", "(", "q", "/", "self", ".", "temperature", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "attn", "=", "self", ".", "dropout", "(", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.EncoderLayer.__init__": [[13, 17], ["torch.Module.__init__", "transformer.SubLayers.MultiHeadAttention", "transformer.SubLayers.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.EncoderLayer.forward": [[18, 23], ["Layers.EncoderLayer.slf_attn", "Layers.EncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.DecoderLayer.__init__": [[28, 33], ["torch.Module.__init__", "transformer.SubLayers.MultiHeadAttention", "transformer.SubLayers.MultiHeadAttention", "transformer.SubLayers.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "enc_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.DecoderLayer.forward": [[34, 43], ["Layers.DecoderLayer.slf_attn", "Layers.DecoderLayer.enc_attn", "Layers.DecoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "dec_input", ",", "enc_output", ",", "\n", "slf_attn_mask", "=", "None", ",", "dec_enc_attn_mask", "=", "None", ")", ":", "\n", "        ", "dec_output", ",", "dec_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "dec_input", ",", "dec_input", ",", "dec_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "dec_output", ",", "dec_enc_attn", "=", "self", ".", "enc_attn", "(", "\n", "dec_output", ",", "enc_output", ",", "enc_output", ",", "mask", "=", "dec_enc_attn_mask", ")", "\n", "dec_output", "=", "self", ".", "pos_ffn", "(", "dec_output", ")", "\n", "return", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.LowRankEncoderLayer.__init__": [[48, 52], ["torch.Module.__init__", "transformer.SubLayers.LowRankMultiHeadAttention", "transformer.SubLayers.LowRankPositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "LowRankEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "LowRankMultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "LowRankPositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.LowRankEncoderLayer.forward": [[53, 58], ["Layers.LowRankEncoderLayer.slf_attn", "Layers.LowRankEncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.LowRankDecoderLayer.__init__": [[63, 68], ["torch.Module.__init__", "transformer.SubLayers.LowRankMultiHeadAttention", "transformer.SubLayers.LowRankMultiHeadAttention", "transformer.SubLayers.LowRankPositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "LowRankDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "LowRankMultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "enc_attn", "=", "LowRankMultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "LowRankPositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Layers.LowRankDecoderLayer.forward": [[69, 78], ["Layers.LowRankDecoderLayer.slf_attn", "Layers.LowRankDecoderLayer.enc_attn", "Layers.LowRankDecoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "dec_input", ",", "enc_output", ",", "\n", "slf_attn_mask", "=", "None", ",", "dec_enc_attn_mask", "=", "None", ")", ":", "\n", "        ", "dec_output", ",", "dec_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "dec_input", ",", "dec_input", ",", "dec_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "dec_output", ",", "dec_enc_attn", "=", "self", ".", "enc_attn", "(", "\n", "dec_output", ",", "enc_output", ",", "enc_output", ",", "mask", "=", "dec_enc_attn_mask", ")", "\n", "dec_output", "=", "self", ".", "pos_ffn", "(", "dec_output", ")", "\n", "return", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.PositionalEncoding.__init__": [[25, 30], ["torch.Module.__init__", "Models.PositionalEncoding.register_buffer", "Models.PositionalEncoding._get_sinusoid_encoding_table"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.PositionalEncoding._get_sinusoid_encoding_table"], ["    ", "def", "__init__", "(", "self", ",", "d_hid", ",", "n_position", "=", "200", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Not a parameter", "\n", "self", ".", "register_buffer", "(", "'pos_table'", ",", "self", ".", "_get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.PositionalEncoding._get_sinusoid_encoding_table": [[31, 43], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "Models.PositionalEncoding._get_sinusoid_encoding_table.get_position_angle_vec"], "methods", ["None"], ["", "def", "_get_sinusoid_encoding_table", "(", "self", ",", "n_position", ",", "d_hid", ")", ":", "\n", "        ", "''' Sinusoid position encoding table '''", "\n", "# TODO: make it with torch instead of numpy", "\n", "\n", "def", "get_position_angle_vec", "(", "position", ")", ":", "\n", "            ", "return", "[", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_j", "//", "2", ")", "/", "d_hid", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_position_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.PositionalEncoding.forward": [[44, 46], ["Models.PositionalEncoding.pos_table[].clone().detach", "Models.PositionalEncoding.pos_table[].clone", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "pos_table", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.Encoder.__init__": [[51, 64], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "Models.PositionalEncoding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "transformer.Layers.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_src_vocab", ",", "d_word_vec", ",", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "pad_idx", ",", "dropout", "=", "0.1", ",", "n_position", "=", "200", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "src_word_emb", "=", "nn", ".", "Embedding", "(", "n_src_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "pad_idx", ")", "\n", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "d_word_vec", ",", "n_position", "=", "n_position", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EncoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.Encoder.forward": [[65, 81], ["Models.Encoder.dropout", "Models.Encoder.layer_norm", "Models.Encoder.position_enc", "enc_layer", "Models.Encoder.src_word_emb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_seq", ",", "src_mask", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "enc_slf_attn_list", "=", "[", "]", "\n", "\n", "# -- Forward", "\n", "\n", "enc_output", "=", "self", ".", "dropout", "(", "self", ".", "position_enc", "(", "self", ".", "src_word_emb", "(", "src_seq", ")", ")", ")", "\n", "enc_output", "=", "self", ".", "layer_norm", "(", "enc_output", ")", "\n", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "enc_output", ",", "enc_slf_attn", "=", "enc_layer", "(", "enc_output", ",", "slf_attn_mask", "=", "src_mask", ")", "\n", "enc_slf_attn_list", "+=", "[", "enc_slf_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "\n", "", "if", "return_attns", ":", "\n", "            ", "return", "enc_output", ",", "enc_slf_attn_list", "\n", "", "return", "enc_output", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.LowRankEncoder.__init__": [[86, 107], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "Models.PositionalEncoding", "torch.Dropout", "torch.Dropout", "range", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "layer_stack.append", "layer_stack.append", "transformer.Layers.EncoderLayer", "transformer.Layers.LowRankEncoderLayer"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_src_vocab", ",", "d_word_vec", ",", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "pad_idx", ",", "dropout", "=", "0.1", ",", "n_position", "=", "200", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "src_word_emb", "=", "nn", ".", "Embedding", "(", "n_src_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "pad_idx", ")", "\n", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "d_word_vec", ",", "n_position", "=", "n_position", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "#self.layer_stack = nn.ModuleList([", "\n", "#    LowRankEncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout)", "\n", "#    for _ in range(n_layers)])", "\n", "layer_stack", "=", "[", "]", "\n", "for", "layer_index", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "if", "layer_index", "<", "1", ":", "\n", "                ", "layer_stack", ".", "append", "(", "EncoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "else", ":", "\n", "                ", "layer_stack", ".", "append", "(", "LowRankEncoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "layer_stack", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.LowRankEncoder.forward": [[109, 125], ["Models.LowRankEncoder.dropout", "Models.LowRankEncoder.layer_norm", "Models.LowRankEncoder.position_enc", "enc_layer", "Models.LowRankEncoder.src_word_emb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_seq", ",", "src_mask", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "enc_slf_attn_list", "=", "[", "]", "\n", "\n", "# -- Forward", "\n", "\n", "enc_output", "=", "self", ".", "dropout", "(", "self", ".", "position_enc", "(", "self", ".", "src_word_emb", "(", "src_seq", ")", ")", ")", "\n", "enc_output", "=", "self", ".", "layer_norm", "(", "enc_output", ")", "\n", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "enc_output", ",", "enc_slf_attn", "=", "enc_layer", "(", "enc_output", ",", "slf_attn_mask", "=", "src_mask", ")", "\n", "enc_slf_attn_list", "+=", "[", "enc_slf_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "\n", "", "if", "return_attns", ":", "\n", "            ", "return", "enc_output", ",", "enc_slf_attn_list", "\n", "", "return", "enc_output", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.Decoder.__init__": [[130, 143], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "Models.PositionalEncoding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "transformer.Layers.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_trg_vocab", ",", "d_word_vec", ",", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "pad_idx", ",", "n_position", "=", "200", ",", "dropout", "=", "0.1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "trg_word_emb", "=", "nn", ".", "Embedding", "(", "n_trg_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "pad_idx", ")", "\n", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "d_word_vec", ",", "n_position", "=", "n_position", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DecoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.Decoder.forward": [[144, 161], ["Models.Decoder.dropout", "Models.Decoder.layer_norm", "Models.Decoder.position_enc", "dec_layer", "Models.Decoder.trg_word_emb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "trg_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "dec_slf_attn_list", ",", "dec_enc_attn_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "# -- Forward", "\n", "dec_output", "=", "self", ".", "dropout", "(", "self", ".", "position_enc", "(", "self", ".", "trg_word_emb", "(", "trg_seq", ")", ")", ")", "\n", "dec_output", "=", "self", ".", "layer_norm", "(", "dec_output", ")", "\n", "\n", "for", "dec_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "=", "dec_layer", "(", "\n", "dec_output", ",", "enc_output", ",", "slf_attn_mask", "=", "trg_mask", ",", "dec_enc_attn_mask", "=", "src_mask", ")", "\n", "dec_slf_attn_list", "+=", "[", "dec_slf_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "dec_enc_attn_list", "+=", "[", "dec_enc_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "\n", "", "if", "return_attns", ":", "\n", "            ", "return", "dec_output", ",", "dec_slf_attn_list", ",", "dec_enc_attn_list", "\n", "", "return", "dec_output", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.LowRankDecoder.__init__": [[166, 188], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "Models.PositionalEncoding", "torch.Dropout", "torch.Dropout", "range", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "layer_stack.append", "layer_stack.append", "transformer.Layers.DecoderLayer", "transformer.Layers.LowRankDecoderLayer"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_trg_vocab", ",", "d_word_vec", ",", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "pad_idx", ",", "n_position", "=", "200", ",", "dropout", "=", "0.1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "trg_word_emb", "=", "nn", ".", "Embedding", "(", "n_trg_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "pad_idx", ")", "\n", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "d_word_vec", ",", "n_position", "=", "n_position", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "#self.layer_stack = nn.ModuleList([", "\n", "#    LowRankDecoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout)", "\n", "#    for _ in range(n_layers)])", "\n", "\n", "layer_stack", "=", "[", "]", "\n", "for", "layer_index", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "if", "layer_index", "<", "1", ":", "\n", "                ", "layer_stack", ".", "append", "(", "DecoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "else", ":", "\n", "                ", "layer_stack", ".", "append", "(", "LowRankDecoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "layer_stack", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.LowRankDecoder.forward": [[189, 206], ["Models.LowRankDecoder.dropout", "Models.LowRankDecoder.layer_norm", "Models.LowRankDecoder.position_enc", "dec_layer", "Models.LowRankDecoder.trg_word_emb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "trg_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "dec_slf_attn_list", ",", "dec_enc_attn_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "# -- Forward", "\n", "dec_output", "=", "self", ".", "dropout", "(", "self", ".", "position_enc", "(", "self", ".", "trg_word_emb", "(", "trg_seq", ")", ")", ")", "\n", "dec_output", "=", "self", ".", "layer_norm", "(", "dec_output", ")", "\n", "\n", "for", "dec_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "=", "dec_layer", "(", "\n", "dec_output", ",", "enc_output", ",", "slf_attn_mask", "=", "trg_mask", ",", "dec_enc_attn_mask", "=", "src_mask", ")", "\n", "dec_slf_attn_list", "+=", "[", "dec_slf_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "dec_enc_attn_list", "+=", "[", "dec_enc_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "\n", "", "if", "return_attns", ":", "\n", "            ", "return", "dec_output", ",", "dec_slf_attn_list", ",", "dec_enc_attn_list", "\n", "", "return", "dec_output", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.Transformer.__init__": [[211, 251], ["torch.Module.__init__", "Models.Encoder", "Models.Decoder", "torch.Linear", "torch.Linear", "Models.Transformer.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_src_vocab", ",", "n_trg_vocab", ",", "src_pad_idx", ",", "trg_pad_idx", ",", "\n", "d_word_vec", "=", "512", ",", "d_model", "=", "512", ",", "d_inner", "=", "2048", ",", "\n", "n_layers", "=", "6", ",", "n_head", "=", "8", ",", "d_k", "=", "64", ",", "d_v", "=", "64", ",", "dropout", "=", "0.1", ",", "n_position", "=", "200", ",", "\n", "trg_emb_prj_weight_sharing", "=", "True", ",", "emb_src_trg_weight_sharing", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "src_pad_idx", ",", "self", ".", "trg_pad_idx", "=", "src_pad_idx", ",", "trg_pad_idx", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "n_src_vocab", "=", "n_src_vocab", ",", "n_position", "=", "n_position", ",", "\n", "d_word_vec", "=", "d_word_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "\n", "pad_idx", "=", "src_pad_idx", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "n_trg_vocab", "=", "n_trg_vocab", ",", "n_position", "=", "n_position", ",", "\n", "d_word_vec", "=", "d_word_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "\n", "pad_idx", "=", "trg_pad_idx", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "trg_word_prj", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_trg_vocab", ",", "bias", "=", "False", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "assert", "d_model", "==", "d_word_vec", ",", "'To facilitate the residual connections, \\\n         the dimensions of all module outputs shall be the same.'", "\n", "\n", "self", ".", "x_logit_scale", "=", "1.", "\n", "if", "trg_emb_prj_weight_sharing", ":", "\n", "# Share the weight between target word embedding & last dense layer", "\n", "            ", "self", ".", "trg_word_prj", ".", "weight", "=", "self", ".", "decoder", ".", "trg_word_emb", ".", "weight", "\n", "self", ".", "x_logit_scale", "=", "(", "d_model", "**", "-", "0.5", ")", "\n", "\n", "", "if", "emb_src_trg_weight_sharing", ":", "\n", "            ", "self", ".", "encoder", ".", "src_word_emb", ".", "weight", "=", "self", ".", "decoder", ".", "trg_word_emb", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.Transformer.forward": [[253, 263], ["Models.get_pad_mask", "Models.Transformer.encoder", "Models.Transformer.decoder", "seq_logit.view", "Models.get_pad_mask", "Models.get_subsequent_mask", "Models.Transformer.trg_word_prj", "seq_logit.size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_pad_mask", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_pad_mask", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_subsequent_mask"], ["", "", "def", "forward", "(", "self", ",", "src_seq", ",", "trg_seq", ")", ":", "\n", "\n", "        ", "src_mask", "=", "get_pad_mask", "(", "src_seq", ",", "self", ".", "src_pad_idx", ")", "\n", "trg_mask", "=", "get_pad_mask", "(", "trg_seq", ",", "self", ".", "trg_pad_idx", ")", "&", "get_subsequent_mask", "(", "trg_seq", ")", "\n", "\n", "enc_output", ",", "*", "_", "=", "self", ".", "encoder", "(", "src_seq", ",", "src_mask", ")", "\n", "dec_output", ",", "*", "_", "=", "self", ".", "decoder", "(", "trg_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ")", "\n", "seq_logit", "=", "self", ".", "trg_word_prj", "(", "dec_output", ")", "*", "self", ".", "x_logit_scale", "\n", "\n", "return", "seq_logit", ".", "view", "(", "-", "1", ",", "seq_logit", ".", "size", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.LowRankTransformer.__init__": [[269, 309], ["torch.Module.__init__", "Models.LowRankEncoder", "Models.LowRankDecoder", "torch.Linear", "torch.Linear", "Models.LowRankTransformer.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_src_vocab", ",", "n_trg_vocab", ",", "src_pad_idx", ",", "trg_pad_idx", ",", "\n", "d_word_vec", "=", "512", ",", "d_model", "=", "512", ",", "d_inner", "=", "2048", ",", "\n", "n_layers", "=", "6", ",", "n_head", "=", "8", ",", "d_k", "=", "64", ",", "d_v", "=", "64", ",", "dropout", "=", "0.1", ",", "n_position", "=", "200", ",", "\n", "trg_emb_prj_weight_sharing", "=", "True", ",", "emb_src_trg_weight_sharing", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "src_pad_idx", ",", "self", ".", "trg_pad_idx", "=", "src_pad_idx", ",", "trg_pad_idx", "\n", "\n", "self", ".", "encoder", "=", "LowRankEncoder", "(", "\n", "n_src_vocab", "=", "n_src_vocab", ",", "n_position", "=", "n_position", ",", "\n", "d_word_vec", "=", "d_word_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "\n", "pad_idx", "=", "src_pad_idx", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "decoder", "=", "LowRankDecoder", "(", "\n", "n_trg_vocab", "=", "n_trg_vocab", ",", "n_position", "=", "n_position", ",", "\n", "d_word_vec", "=", "d_word_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "\n", "pad_idx", "=", "trg_pad_idx", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "trg_word_prj", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_trg_vocab", ",", "bias", "=", "False", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "assert", "d_model", "==", "d_word_vec", ",", "'To facilitate the residual connections, \\\n         the dimensions of all module outputs shall be the same.'", "\n", "\n", "self", ".", "x_logit_scale", "=", "1.", "\n", "if", "trg_emb_prj_weight_sharing", ":", "\n", "# Share the weight between target word embedding & last dense layer", "\n", "            ", "self", ".", "trg_word_prj", ".", "weight", "=", "self", ".", "decoder", ".", "trg_word_emb", ".", "weight", "\n", "self", ".", "x_logit_scale", "=", "(", "d_model", "**", "-", "0.5", ")", "\n", "\n", "", "if", "emb_src_trg_weight_sharing", ":", "\n", "            ", "self", ".", "encoder", ".", "src_word_emb", ".", "weight", "=", "self", ".", "decoder", ".", "trg_word_emb", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.LowRankTransformer.forward": [[311, 321], ["Models.get_pad_mask", "Models.LowRankTransformer.encoder", "Models.LowRankTransformer.decoder", "seq_logit.view", "Models.get_pad_mask", "Models.get_subsequent_mask", "Models.LowRankTransformer.trg_word_prj", "seq_logit.size"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_pad_mask", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_pad_mask", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_subsequent_mask"], ["", "", "def", "forward", "(", "self", ",", "src_seq", ",", "trg_seq", ")", ":", "\n", "\n", "        ", "src_mask", "=", "get_pad_mask", "(", "src_seq", ",", "self", ".", "src_pad_idx", ")", "\n", "trg_mask", "=", "get_pad_mask", "(", "trg_seq", ",", "self", ".", "trg_pad_idx", ")", "&", "get_subsequent_mask", "(", "trg_seq", ")", "\n", "\n", "enc_output", ",", "*", "_", "=", "self", ".", "encoder", "(", "src_seq", ",", "src_mask", ")", "\n", "dec_output", ",", "*", "_", "=", "self", ".", "decoder", "(", "trg_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ")", "\n", "seq_logit", "=", "self", ".", "trg_word_prj", "(", "dec_output", ")", "*", "self", ".", "x_logit_scale", "\n", "\n", "return", "seq_logit", ".", "view", "(", "-", "1", ",", "seq_logit", ".", "size", "(", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_pad_mask": [[11, 13], ["None"], "function", ["None"], ["def", "get_pad_mask", "(", "seq", ",", "pad_idx", ")", ":", "\n", "    ", "return", "(", "seq", "!=", "pad_idx", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_subsequent_mask": [[15, 21], ["seq.size", "torch.triu", "torch.triu", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "get_subsequent_mask", "(", "seq", ")", ":", "\n", "    ", "''' For masking out the subsequent info. '''", "\n", "sz_b", ",", "len_s", "=", "seq", ".", "size", "(", ")", "\n", "subsequent_mask", "=", "(", "1", "-", "torch", ".", "triu", "(", "\n", "torch", ".", "ones", "(", "(", "1", ",", "len_s", ",", "len_s", ")", ",", "device", "=", "seq", ".", "device", ")", ",", "diagonal", "=", "1", ")", ")", ".", "bool", "(", ")", "\n", "return", "subsequent_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator.__init__": [[12, 37], ["torch.Module.__init__", "Translator.Translator.model.eval", "Translator.Translator.register_buffer", "Translator.Translator.register_buffer", "Translator.Translator.register_buffer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "\n", "self", ",", "model", ",", "beam_size", ",", "max_seq_len", ",", "\n", "src_pad_idx", ",", "trg_pad_idx", ",", "trg_bos_idx", ",", "trg_eos_idx", ")", ":", "\n", "\n", "\n", "        ", "super", "(", "Translator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "0.7", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "src_pad_idx", "=", "src_pad_idx", "\n", "self", ".", "trg_bos_idx", "=", "trg_bos_idx", "\n", "self", ".", "trg_eos_idx", "=", "trg_eos_idx", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'init_seq'", ",", "torch", ".", "LongTensor", "(", "[", "[", "trg_bos_idx", "]", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'blank_seqs'", ",", "\n", "torch", ".", "full", "(", "(", "beam_size", ",", "max_seq_len", ")", ",", "trg_pad_idx", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "self", ".", "blank_seqs", "[", ":", ",", "0", "]", "=", "self", ".", "trg_bos_idx", "\n", "self", ".", "register_buffer", "(", "\n", "'len_map'", ",", "\n", "torch", ".", "arange", "(", "1", ",", "max_seq_len", "+", "1", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._model_decode": [[39, 43], ["transformer.Models.get_subsequent_mask", "Translator.Translator.model.decoder", "torch.softmax", "torch.softmax", "torch.softmax", "Translator.Translator.model.trg_word_prj"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_subsequent_mask"], ["", "def", "_model_decode", "(", "self", ",", "trg_seq", ",", "enc_output", ",", "src_mask", ")", ":", "\n", "        ", "trg_mask", "=", "get_subsequent_mask", "(", "trg_seq", ")", "\n", "dec_output", ",", "*", "_", "=", "self", ".", "model", ".", "decoder", "(", "trg_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ")", "\n", "return", "F", ".", "softmax", "(", "self", ".", "model", ".", "trg_word_prj", "(", "dec_output", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._get_init_state": [[45, 58], ["Translator.Translator.model.encoder", "Translator.Translator._model_decode", "dec_output[].topk", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "Translator.Translator.blank_seqs.clone().detach", "enc_output.repeat.repeat.repeat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "Translator.Translator.blank_seqs.clone"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._model_decode"], ["", "def", "_get_init_state", "(", "self", ",", "src_seq", ",", "src_mask", ")", ":", "\n", "        ", "beam_size", "=", "self", ".", "beam_size", "\n", "\n", "enc_output", ",", "*", "_", "=", "self", ".", "model", ".", "encoder", "(", "src_seq", ",", "src_mask", ")", "\n", "dec_output", "=", "self", ".", "_model_decode", "(", "self", ".", "init_seq", ",", "enc_output", ",", "src_mask", ")", "\n", "\n", "best_k_probs", ",", "best_k_idx", "=", "dec_output", "[", ":", ",", "-", "1", ",", ":", "]", ".", "topk", "(", "beam_size", ")", "\n", "\n", "scores", "=", "torch", ".", "log", "(", "best_k_probs", ")", ".", "view", "(", "beam_size", ")", "\n", "gen_seq", "=", "self", ".", "blank_seqs", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "gen_seq", "[", ":", ",", "1", "]", "=", "best_k_idx", "[", "0", "]", "\n", "enc_output", "=", "enc_output", ".", "repeat", "(", "beam_size", ",", "1", ",", "1", ")", "\n", "return", "enc_output", ",", "gen_seq", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._get_the_best_score_and_idx": [[60, 84], ["dec_output[].topk", "scores.view().topk", "len", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "torch.log().view", "scores.view", "scores.size", "scores.view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "_get_the_best_score_and_idx", "(", "self", ",", "gen_seq", ",", "dec_output", ",", "scores", ",", "step", ")", ":", "\n", "        ", "assert", "len", "(", "scores", ".", "size", "(", ")", ")", "==", "1", "\n", "\n", "beam_size", "=", "self", ".", "beam_size", "\n", "\n", "# Get k candidates for each beam, k^2 candidates in total.", "\n", "best_k2_probs", ",", "best_k2_idx", "=", "dec_output", "[", ":", ",", "-", "1", ",", ":", "]", ".", "topk", "(", "beam_size", ")", "\n", "\n", "# Include the previous scores.", "\n", "scores", "=", "torch", ".", "log", "(", "best_k2_probs", ")", ".", "view", "(", "beam_size", ",", "-", "1", ")", "+", "scores", ".", "view", "(", "beam_size", ",", "1", ")", "\n", "\n", "# Get the best k candidates from k^2 candidates.", "\n", "scores", ",", "best_k_idx_in_k2", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "topk", "(", "beam_size", ")", "\n", "\n", "# Get the corresponding positions of the best k candidiates.", "\n", "best_k_r_idxs", ",", "best_k_c_idxs", "=", "best_k_idx_in_k2", "//", "beam_size", ",", "best_k_idx_in_k2", "%", "beam_size", "\n", "best_k_idx", "=", "best_k2_idx", "[", "best_k_r_idxs", ",", "best_k_c_idxs", "]", "\n", "\n", "# Copy the corresponding previous tokens.", "\n", "gen_seq", "[", ":", ",", ":", "step", "]", "=", "gen_seq", "[", "best_k_r_idxs", ",", ":", "step", "]", "\n", "# Set the best tokens in this beam search step", "\n", "gen_seq", "[", ":", ",", "step", "]", "=", "best_k_idx", "\n", "\n", "return", "gen_seq", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator.translate_sentence": [[86, 115], ["[].tolist", "src_seq.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "transformer.Models.get_pad_mask", "Translator.Translator._get_init_state", "range", "Translator.Translator._model_decode", "Translator.Translator._get_the_best_score_and_idx", "Translator.Translator.len_map.masked_fill().min", "scores.div().max", "ans_idx.item.item.item", "Translator.Translator.len_map.masked_fill", "scores.div", "seq_lens.float", "eos_locs.sum"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Models.get_pad_mask", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._get_init_state", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._model_decode", "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Translator.Translator._get_the_best_score_and_idx"], ["", "def", "translate_sentence", "(", "self", ",", "src_seq", ")", ":", "\n", "# Only accept batch size equals to 1 in this function.", "\n", "# TODO: expand to batch operation.", "\n", "        ", "assert", "src_seq", ".", "size", "(", "0", ")", "==", "1", "\n", "\n", "src_pad_idx", ",", "trg_eos_idx", "=", "self", ".", "src_pad_idx", ",", "self", ".", "trg_eos_idx", "\n", "max_seq_len", ",", "beam_size", ",", "alpha", "=", "self", ".", "max_seq_len", ",", "self", ".", "beam_size", ",", "self", ".", "alpha", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "src_mask", "=", "get_pad_mask", "(", "src_seq", ",", "src_pad_idx", ")", "\n", "enc_output", ",", "gen_seq", ",", "scores", "=", "self", ".", "_get_init_state", "(", "src_seq", ",", "src_mask", ")", "\n", "\n", "ans_idx", "=", "0", "# default", "\n", "for", "step", "in", "range", "(", "2", ",", "max_seq_len", ")", ":", "# decode up to max length", "\n", "                ", "dec_output", "=", "self", ".", "_model_decode", "(", "gen_seq", "[", ":", ",", ":", "step", "]", ",", "enc_output", ",", "src_mask", ")", "\n", "gen_seq", ",", "scores", "=", "self", ".", "_get_the_best_score_and_idx", "(", "gen_seq", ",", "dec_output", ",", "scores", ",", "step", ")", "\n", "\n", "# Check if all path finished", "\n", "# -- locate the eos in the generated sequences", "\n", "eos_locs", "=", "gen_seq", "==", "trg_eos_idx", "\n", "# -- replace the eos with its position for the length penalty use", "\n", "seq_lens", ",", "_", "=", "self", ".", "len_map", ".", "masked_fill", "(", "~", "eos_locs", ",", "max_seq_len", ")", ".", "min", "(", "1", ")", "\n", "# -- check if all beams contain eos", "\n", "if", "(", "eos_locs", ".", "sum", "(", "1", ")", ">", "0", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "==", "beam_size", ":", "\n", "# TODO: Try different terminate conditions.", "\n", "                    ", "_", ",", "ans_idx", "=", "scores", ".", "div", "(", "seq_lens", ".", "float", "(", ")", "**", "alpha", ")", ".", "max", "(", "0", ")", "\n", "ans_idx", "=", "ans_idx", ".", "item", "(", ")", "\n", "break", "\n", "", "", "", "return", "gen_seq", "[", "ans_idx", "]", "[", ":", "seq_lens", "[", "ans_idx", "]", "]", ".", "tolist", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.__init__": [[7, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "init_lr", ",", "d_model", ",", "n_warmup_steps", ")", ":", "\n", "        ", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "init_lr", "=", "init_lr", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_warmup_steps", "=", "n_warmup_steps", "\n", "self", ".", "n_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.step_and_update_lr": [[15, 19], ["Optim.ScheduledOptim._update_learning_rate", "Optim.ScheduledOptim._optimizer.step"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim._update_learning_rate", "home.repos.pwc.inspect_result.hwang595_Pufferfish.optim.sgd.SGD.step"], ["", "def", "step_and_update_lr", "(", "self", ")", ":", "\n", "        ", "\"Step with the inner optimizer\"", "\n", "self", ".", "_update_learning_rate", "(", ")", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad": [[21, 24], ["Optim.ScheduledOptim._optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"Zero out the gradients with the inner optimizer\"", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim._get_lr_scale": [[26, 30], ["min"], "methods", ["None"], ["", "def", "_get_lr_scale", "(", "self", ")", ":", "\n", "        ", "d_model", "=", "self", ".", "d_model", "\n", "n_steps", ",", "n_warmup_steps", "=", "self", ".", "n_steps", ",", "self", ".", "n_warmup_steps", "\n", "return", "(", "d_model", "**", "-", "0.5", ")", "*", "min", "(", "n_steps", "**", "(", "-", "0.5", ")", ",", "n_steps", "*", "n_warmup_steps", "**", "(", "-", "1.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim._update_learning_rate": [[32, 40], ["Optim.ScheduledOptim._get_lr_scale"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.Optim.ScheduledOptim._get_lr_scale"], ["", "def", "_update_learning_rate", "(", "self", ")", ":", "\n", "        ", "''' Learning rate scheduling per step '''", "\n", "\n", "self", ".", "n_steps", "+=", "1", "\n", "lr", "=", "self", ".", "init_lr", "*", "self", ".", "_get_lr_scale", "(", ")", "\n", "\n", "for", "param_group", "in", "self", ".", "_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.MultiHeadAttention.__init__": [[12, 28], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "transformer.Modules.ScaledDotProductAttention", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.MultiHeadAttention.forward": [[30, 60], ["SubLayers.MultiHeadAttention.w_qs().view", "SubLayers.MultiHeadAttention.w_ks().view", "SubLayers.MultiHeadAttention.w_vs().view", "SubLayers.MultiHeadAttention.attention", "SubLayers.MultiHeadAttention.transpose().contiguous().view", "SubLayers.MultiHeadAttention.dropout", "SubLayers.MultiHeadAttention.layer_norm", "SubLayers.MultiHeadAttention.size", "SubLayers.MultiHeadAttention.size", "SubLayers.MultiHeadAttention.size", "SubLayers.MultiHeadAttention.size", "SubLayers.MultiHeadAttention.transpose", "SubLayers.MultiHeadAttention.transpose", "SubLayers.MultiHeadAttention.transpose", "mask.unsqueeze.unsqueeze.unsqueeze", "SubLayers.MultiHeadAttention.fc", "SubLayers.MultiHeadAttention.w_qs", "SubLayers.MultiHeadAttention.w_ks", "SubLayers.MultiHeadAttention.w_vs", "SubLayers.MultiHeadAttention.transpose().contiguous", "SubLayers.MultiHeadAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "len_k", ",", "len_v", "=", "q", ".", "size", "(", "0", ")", ",", "q", ".", "size", "(", "1", ")", ",", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "# Pass through the pre-attention projection: b x lq x (n*dv)", "\n", "# Separate different heads: b x lq x n x dv", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "# Transpose for attention dot product: b x n x lq x dv", "\n", "q", ",", "k", ",", "v", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# For head axis broadcasting.", "\n", "\n", "", "q", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "# Transpose to move the head dimension back: b x lq x n x dv", "\n", "# Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)", "\n", "q", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "\n", "q", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "q", ")", ")", "\n", "q", "+=", "residual", "\n", "\n", "q", "=", "self", ".", "layer_norm", "(", "q", ")", "\n", "\n", "return", "q", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankMultiHeadAttention.__init__": [[65, 89], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "transformer.Modules.ScaledDotProductAttention", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "#self.w_qs = nn.Linear(d_model, n_head * d_k, bias=False)", "\n", "#self.w_ks = nn.Linear(d_model, n_head * d_k, bias=False)", "\n", "#self.w_vs = nn.Linear(d_model, n_head * d_v, bias=False)", "\n", "#self.fc = nn.Linear(n_head * d_v, d_model, bias=False)", "\n", "self", ".", "w_qs_u", "=", "nn", ".", "Linear", "(", "d_model", ",", "int", "(", "n_head", "*", "d_k", "/", "4", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_qs_v", "=", "nn", ".", "Linear", "(", "int", "(", "n_head", "*", "d_k", "/", "4", ")", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks_u", "=", "nn", ".", "Linear", "(", "d_model", ",", "int", "(", "n_head", "*", "d_k", "/", "4", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks_v", "=", "nn", ".", "Linear", "(", "int", "(", "n_head", "*", "d_k", "/", "4", ")", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs_u", "=", "nn", ".", "Linear", "(", "d_model", ",", "int", "(", "n_head", "*", "d_k", "/", "4", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs_v", "=", "nn", ".", "Linear", "(", "int", "(", "n_head", "*", "d_k", "/", "4", ")", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_u", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "int", "(", "d_model", "/", "4", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_v", "=", "nn", ".", "Linear", "(", "int", "(", "d_model", "/", "4", ")", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankMultiHeadAttention.forward": [[91, 124], ["SubLayers.LowRankMultiHeadAttention.w_qs_v().view", "SubLayers.LowRankMultiHeadAttention.w_ks_v().view", "SubLayers.LowRankMultiHeadAttention.w_vs_v().view", "SubLayers.LowRankMultiHeadAttention.attention", "SubLayers.LowRankMultiHeadAttention.transpose().contiguous().view", "SubLayers.LowRankMultiHeadAttention.dropout", "SubLayers.LowRankMultiHeadAttention.layer_norm", "SubLayers.LowRankMultiHeadAttention.size", "SubLayers.LowRankMultiHeadAttention.size", "SubLayers.LowRankMultiHeadAttention.size", "SubLayers.LowRankMultiHeadAttention.size", "SubLayers.LowRankMultiHeadAttention.transpose", "SubLayers.LowRankMultiHeadAttention.transpose", "SubLayers.LowRankMultiHeadAttention.transpose", "mask.unsqueeze.unsqueeze.unsqueeze", "SubLayers.LowRankMultiHeadAttention.fc_v", "SubLayers.LowRankMultiHeadAttention.w_qs_v", "SubLayers.LowRankMultiHeadAttention.w_ks_v", "SubLayers.LowRankMultiHeadAttention.w_vs_v", "SubLayers.LowRankMultiHeadAttention.transpose().contiguous", "SubLayers.LowRankMultiHeadAttention.fc_u", "SubLayers.LowRankMultiHeadAttention.w_qs_u", "SubLayers.LowRankMultiHeadAttention.w_ks_u", "SubLayers.LowRankMultiHeadAttention.w_vs_u", "SubLayers.LowRankMultiHeadAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "len_k", ",", "len_v", "=", "q", ".", "size", "(", "0", ")", ",", "q", ".", "size", "(", "1", ")", ",", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "# Pass through the pre-attention projection: b x lq x (n*dv)", "\n", "# Separate different heads: b x lq x n x dv", "\n", "#q = self.w_qs(q).view(sz_b, len_q, n_head, d_k)", "\n", "#k = self.w_ks(k).view(sz_b, len_k, n_head, d_k)", "\n", "#v = self.w_vs(v).view(sz_b, len_v, n_head, d_v)", "\n", "q", "=", "self", ".", "w_qs_v", "(", "self", ".", "w_qs_u", "(", "q", ")", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks_v", "(", "self", ".", "w_ks_u", "(", "k", ")", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs_v", "(", "self", ".", "w_vs_u", "(", "v", ")", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "\n", "# Transpose for attention dot product: b x n x lq x dv", "\n", "q", ",", "k", ",", "v", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# For head axis broadcasting.", "\n", "\n", "", "q", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "# Transpose to move the head dimension back: b x lq x n x dv", "\n", "# Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)", "\n", "q", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "\n", "q", "=", "self", ".", "dropout", "(", "self", ".", "fc_v", "(", "self", ".", "fc_u", "(", "q", ")", ")", ")", "\n", "q", "+=", "residual", "\n", "\n", "q", "=", "self", ".", "layer_norm", "(", "q", ")", "\n", "\n", "return", "q", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.PositionwiseFeedForward.__init__": [[129, 135], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_in", ",", "d_hid", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_hid", ",", "d_in", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.PositionwiseFeedForward.forward": [[136, 147], ["SubLayers.PositionwiseFeedForward.w_2", "SubLayers.PositionwiseFeedForward.dropout", "SubLayers.PositionwiseFeedForward.layer_norm", "torch.relu", "torch.relu", "SubLayers.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "\n", "x", "=", "self", ".", "w_2", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "+=", "residual", "\n", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__": [[152, 165], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# d_hid = 4 * d_in: then the rank is determined by d_in", "\n", "#self.w_1 = nn.Linear(d_in, d_hid) # position-wise", "\n", "#self.w_2 = nn.Linear(d_hid, d_in) # position-wise", "\n", "self", ".", "w_1_u", "=", "nn", ".", "Linear", "(", "d_in", ",", "int", "(", "d_in", "/", "4", ")", ",", "bias", "=", "False", ")", "# position-wise", "\n", "self", ".", "w_1_v", "=", "nn", ".", "Linear", "(", "int", "(", "d_in", "/", "4", ")", ",", "d_hid", ")", "# position-wise", "\n", "\n", "self", ".", "w_2_u", "=", "nn", ".", "Linear", "(", "d_hid", ",", "int", "(", "d_in", "/", "4", ")", ",", "bias", "=", "False", ")", "# position-wise", "\n", "self", ".", "w_2_v", "=", "nn", ".", "Linear", "(", "int", "(", "d_in", "/", "4", ")", ",", "d_in", ")", "# position-wise", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hwang595_Pufferfish.transformer.SubLayers.LowRankPositionwiseFeedForward.forward": [[166, 177], ["SubLayers.LowRankPositionwiseFeedForward.w_2_v", "SubLayers.LowRankPositionwiseFeedForward.dropout", "SubLayers.LowRankPositionwiseFeedForward.layer_norm", "SubLayers.LowRankPositionwiseFeedForward.w_2_u", "torch.relu", "torch.relu", "SubLayers.LowRankPositionwiseFeedForward.w_1_v", "SubLayers.LowRankPositionwiseFeedForward.w_1_u"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "\n", "x", "=", "self", ".", "w_2_v", "(", "self", ".", "w_2_u", "(", "F", ".", "relu", "(", "self", ".", "w_1_v", "(", "self", ".", "w_1_u", "(", "x", ")", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "+=", "residual", "\n", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]]}