{"home.repos.pwc.inspect_result.azadef_ynet.None.networks.UNet.__init__": [[40, 76], ["torch.Module.__init__", "networks.UNet._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.UNet._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.UNet._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.UNet._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.UNet._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.UNet._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.UNet._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.UNet._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.UNet._block", "torch.Conv2d", "torch.Conv2d", "torch.Softmax2d", "torch.Softmax2d"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "out_channels", "=", "1", ",", "init_features", "=", "32", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "features", "=", "init_features", "\n", "self", ".", "encoder1", "=", "UNet", ".", "_block", "(", "in_channels", ",", "features", ",", "name", "=", "\"enc1\"", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder2", "=", "UNet", ".", "_block", "(", "features", ",", "features", "*", "2", ",", "name", "=", "\"enc2\"", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder3", "=", "UNet", ".", "_block", "(", "features", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"enc3\"", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder4", "=", "UNet", ".", "_block", "(", "features", "*", "4", ",", "features", "*", "8", ",", "name", "=", "\"enc4\"", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "bottleneck", "=", "UNet", ".", "_block", "(", "features", "*", "8", ",", "features", "*", "16", ",", "name", "=", "\"bottleneck\"", ")", "\n", "\n", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "16", ",", "features", "*", "8", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder4", "=", "UNet", ".", "_block", "(", "(", "features", "*", "8", ")", "*", "2", ",", "features", "*", "8", ",", "name", "=", "\"dec4\"", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "8", ",", "features", "*", "4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder3", "=", "UNet", ".", "_block", "(", "(", "features", "*", "4", ")", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"dec3\"", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "4", ",", "features", "*", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder2", "=", "UNet", ".", "_block", "(", "(", "features", "*", "2", ")", "*", "2", ",", "features", "*", "2", ",", "name", "=", "\"dec2\"", ")", "\n", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder1", "=", "UNet", ".", "_block", "(", "features", "*", "2", ",", "features", ",", "name", "=", "\"dec1\"", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "features", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax2d", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.UNet.forward": [[77, 99], ["networks.UNet.encoder1", "networks.UNet.encoder2", "networks.UNet.encoder3", "networks.UNet.encoder4", "networks.UNet.bottleneck", "networks.UNet.upconv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNet.decoder4", "networks.UNet.upconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNet.decoder3", "networks.UNet.upconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNet.decoder2", "networks.UNet.upconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UNet.decoder1", "networks.UNet.softmax", "networks.UNet.pool1", "networks.UNet.pool2", "networks.UNet.pool3", "networks.UNet.pool4", "networks.UNet.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc1", "=", "self", ".", "encoder1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "encoder2", "(", "self", ".", "pool1", "(", "enc1", ")", ")", "\n", "enc3", "=", "self", ".", "encoder3", "(", "self", ".", "pool2", "(", "enc2", ")", ")", "\n", "enc4", "=", "self", ".", "encoder4", "(", "self", ".", "pool3", "(", "enc3", ")", ")", "\n", "\n", "bottleneck", "=", "self", ".", "bottleneck", "(", "self", ".", "pool4", "(", "enc4", ")", ")", "\n", "\n", "dec4", "=", "self", ".", "upconv4", "(", "bottleneck", ")", "\n", "dec4", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc4", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "decoder4", "(", "dec4", ")", "\n", "dec3", "=", "self", ".", "upconv3", "(", "dec4", ")", "\n", "dec3", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "decoder3", "(", "dec3", ")", "\n", "dec2", "=", "self", ".", "upconv2", "(", "dec3", ")", "\n", "dec2", "=", "torch", ".", "cat", "(", "(", "dec2", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "decoder2", "(", "dec2", ")", "\n", "dec1", "=", "self", ".", "upconv1", "(", "dec2", ")", "\n", "dec1", "=", "torch", ".", "cat", "(", "(", "dec1", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "dec1", "=", "self", ".", "decoder1", "(", "dec1", ")", "\n", "\n", "return", "self", ".", "softmax", "(", "self", ".", "conv", "(", "dec1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.UNet._block": [[100, 129], ["torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_block", "(", "in_channels", ",", "features", ",", "name", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "name", "+", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "name", "+", "\"norm1\"", ",", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "features", ")", ")", ",", "\n", "(", "name", "+", "\"relu1\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\n", "name", "+", "\"conv2\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "features", ",", "\n", "out_channels", "=", "features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "name", "+", "\"norm2\"", ",", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "features", ")", ")", ",", "\n", "(", "name", "+", "\"relu2\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general.__init__": [[136, 242], ["torch.Module.__init__", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.Conv2d", "torch.Conv2d", "torch.Softmax2d", "torch.Softmax2d", "ffc.ConcatTupleLayer", "ffc.FFC_BN_ACT", "torch.MaxPool2d", "torch.MaxPool2d", "ffc.FFC_BN_ACT", "torch.MaxPool2d", "torch.MaxPool2d", "ffc.FFC_BN_ACT", "torch.MaxPool2d", "torch.MaxPool2d", "ffc.FFC_BN_ACT", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "networks.YNet_general._block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.YNet_general._block"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "out_channels", "=", "1", ",", "init_features", "=", "32", ",", "ratio_in", "=", "0.5", ",", "ffc", "=", "True", ",", "skip_ffc", "=", "False", ",", "\n", "cat_merge", "=", "True", ")", ":", "\n", "        ", "super", "(", "YNet_general", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ffc", "=", "ffc", "\n", "self", ".", "skip_ffc", "=", "skip_ffc", "\n", "self", ".", "ratio_in", "=", "ratio_in", "\n", "self", ".", "cat_merge", "=", "cat_merge", "\n", "\n", "features", "=", "init_features", "\n", "############### Regular ##################################", "\n", "self", ".", "encoder1", "=", "YNet_general", ".", "_block", "(", "in_channels", ",", "features", ",", "name", "=", "\"enc1\"", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder2", "=", "YNet_general", ".", "_block", "(", "features", ",", "features", "*", "2", ",", "name", "=", "\"enc2\"", ")", "# was 1,2", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder3", "=", "YNet_general", ".", "_block", "(", "features", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"enc3\"", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder4", "=", "YNet_general", ".", "_block", "(", "features", "*", "4", ",", "features", "*", "4", ",", "name", "=", "\"enc4\"", ")", "# was 8", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "if", "ffc", ":", "\n", "################ FFC #######################################", "\n", "            ", "self", ".", "encoder1_f", "=", "FFC_BN_ACT", "(", "in_channels", ",", "features", ",", "kernel_size", "=", "1", ",", "ratio_gin", "=", "0", ",", "ratio_gout", "=", "ratio_in", ")", "\n", "self", ".", "pool1_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder2_f", "=", "FFC_BN_ACT", "(", "features", ",", "features", "*", "2", ",", "kernel_size", "=", "1", ",", "ratio_gin", "=", "ratio_in", ",", "\n", "ratio_gout", "=", "ratio_in", ")", "# was 1,2", "\n", "self", ".", "pool2_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder3_f", "=", "FFC_BN_ACT", "(", "features", "*", "2", ",", "features", "*", "4", ",", "kernel_size", "=", "1", ",", "ratio_gin", "=", "ratio_in", ",", "\n", "ratio_gout", "=", "ratio_in", ")", "\n", "self", ".", "pool3_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder4_f", "=", "FFC_BN_ACT", "(", "features", "*", "4", ",", "features", "*", "4", ",", "kernel_size", "=", "1", ",", "ratio_gin", "=", "ratio_in", ",", "\n", "ratio_gout", "=", "ratio_in", ")", "# was 8", "\n", "self", ".", "pool4_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "else", ":", "\n", "############### Regular ##################################", "\n", "            ", "self", ".", "encoder1_f", "=", "YNet_general", ".", "_block", "(", "in_channels", ",", "features", ",", "name", "=", "\"enc1_2\"", ")", "\n", "self", ".", "pool1_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder2_f", "=", "YNet_general", ".", "_block", "(", "features", ",", "features", "*", "2", ",", "name", "=", "\"enc2_2\"", ")", "# was 1,2", "\n", "self", ".", "pool2_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder3_f", "=", "YNet_general", ".", "_block", "(", "features", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"enc3_2\"", ")", "#", "\n", "self", ".", "pool3_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "encoder4_f", "=", "YNet_general", ".", "_block", "(", "features", "*", "4", ",", "features", "*", "4", ",", "name", "=", "\"enc4_2\"", ")", "# was 8", "\n", "self", ".", "pool4_f", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "bottleneck", "=", "YNet_general", ".", "_block", "(", "features", "*", "8", ",", "features", "*", "16", ",", "name", "=", "\"bottleneck\"", ")", "# 8, 16", "\n", "\n", "if", "skip_ffc", "and", "not", "ffc", ":", "\n", "            ", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "16", ",", "features", "*", "8", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "# 16", "\n", ")", "\n", "self", ".", "decoder4", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "8", ")", "*", "2", ",", "features", "*", "8", ",", "name", "=", "\"dec4\"", ")", "# 8, 12", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "8", ",", "features", "*", "4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder3", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "6", ")", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"dec3\"", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "4", ",", "features", "*", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder2", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "3", ")", "*", "2", ",", "features", "*", "2", ",", "name", "=", "\"dec2\"", ")", "\n", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder1", "=", "YNet_general", ".", "_block", "(", "features", "*", "3", ",", "features", ",", "name", "=", "\"dec1\"", ")", "# 2,3", "\n", "\n", "", "elif", "skip_ffc", "and", "ffc", ":", "\n", "            ", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "16", ",", "features", "*", "8", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "# 16", "\n", ")", "\n", "self", ".", "decoder4", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "8", ")", "*", "2", ",", "features", "*", "8", ",", "name", "=", "\"dec4\"", ")", "# 8, 12", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "8", ",", "features", "*", "4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder3", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "6", ")", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"dec3\"", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "4", ",", "features", "*", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder2", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "3", ")", "*", "2", ",", "features", "*", "2", ",", "name", "=", "\"dec2\"", ")", "\n", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder1", "=", "YNet_general", ".", "_block", "(", "features", "*", "3", ",", "features", ",", "name", "=", "\"dec1\"", ")", "# 2,3", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "16", ",", "features", "*", "8", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "# 16", "\n", ")", "\n", "self", ".", "decoder4", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "6", ")", "*", "2", ",", "features", "*", "8", ",", "name", "=", "\"dec4\"", ")", "# 8, 12", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "8", ",", "features", "*", "4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder3", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "4", ")", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"dec3\"", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "4", ",", "features", "*", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder2", "=", "YNet_general", ".", "_block", "(", "(", "features", "*", "2", ")", "*", "2", ",", "features", "*", "2", ",", "name", "=", "\"dec2\"", ")", "\n", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "decoder1", "=", "YNet_general", ".", "_block", "(", "features", "*", "2", ",", "features", ",", "name", "=", "\"dec1\"", ")", "# 2,3", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "features", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax2d", "(", ")", "\n", "self", ".", "catLayer", "=", "ConcatTupleLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general.apply_fft": [[243, 250], ["torch.fft.fftn", "torch.fft.fftn", "torch.fft.fftn", "torch.fft.fftn", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ffted.view.view.permute().contiguous", "ffted.view.view.view", "ffted.view.view.permute", "ffted.view.view.size"], "methods", ["None"], ["", "def", "apply_fft", "(", "self", ",", "inp", ",", "batch", ")", ":", "\n", "        ", "ffted", "=", "torch", ".", "fft", ".", "fftn", "(", "inp", ")", "\n", "ffted", "=", "torch", ".", "stack", "(", "(", "ffted", ".", "real", ",", "ffted", ".", "imag", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "ffted", "=", "ffted", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ffted", "=", "ffted", ".", "view", "(", "(", "batch", ",", "-", "1", ",", ")", "+", "ffted", ".", "size", "(", ")", "[", "3", ":", "]", ")", "\n", "return", "ffted", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general.forward": [[251, 372], ["networks.YNet_general.encoder1", "networks.YNet_general.encoder2", "networks.YNet_general.encoder3", "networks.YNet_general.encoder4", "networks.YNet_general.pool4", "networks.YNet_general.bottleneck", "networks.YNet_general.upconv4", "networks.YNet_general.decoder1", "networks.YNet_general.softmax", "networks.YNet_general.pool1", "networks.YNet_general.pool2", "networks.YNet_general.pool3", "networks.YNet_general.encoder1_f", "networks.YNet_general.encoder1_f", "networks.YNet_general.encoder2_f", "networks.YNet_general.encoder3_f", "networks.YNet_general.encoder4_f", "networks.YNet_general.pool4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enc4_2.view.view.view", "networks.YNet_general.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view_as", "torch.cat.view_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder4", "networks.YNet_general.upconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder3", "networks.YNet_general.upconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder2", "networks.YNet_general.upconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.conv", "networks.YNet_general.encoder2_f", "networks.YNet_general.encoder3_f", "networks.YNet_general.encoder4_f", "networks.YNet_general.pool1_f", "networks.YNet_general.pool1_f", "networks.YNet_general.pool2_f", "networks.YNet_general.pool3_f", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder4", "networks.YNet_general.upconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder3", "networks.YNet_general.upconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder2", "networks.YNet_general.upconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder4", "networks.YNet_general.upconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder3", "networks.YNet_general.upconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.decoder2", "networks.YNet_general.upconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.YNet_general.encoder2_f", "networks.YNet_general.encoder2_f", "networks.YNet_general.encoder3_f", "networks.YNet_general.encoder3_f", "networks.YNet_general.encoder4_f", "networks.YNet_general.encoder4_f", "networks.YNet_general.pool1_f", "networks.YNet_general.catLayer", "networks.YNet_general.catLayer", "networks.YNet_general.catLayer", "networks.YNet_general.catLayer", "networks.YNet_general.catLayer", "networks.YNet_general.pool1_f", "networks.YNet_general.pool2_f", "networks.YNet_general.pool3_f", "networks.YNet_general.pool1_f", "networks.YNet_general.pool1_f", "networks.YNet_general.pool1_f", "networks.YNet_general.pool2_f", "networks.YNet_general.pool2_f", "networks.YNet_general.pool2_f", "networks.YNet_general.pool3_f", "networks.YNet_general.pool3_f", "networks.YNet_general.pool3_f", "networks.YNet_general.pool4_f", "networks.YNet_general.pool4_f"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "shape", "[", "0", "]", "\n", "enc1", "=", "self", ".", "encoder1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "encoder2", "(", "self", ".", "pool1", "(", "enc1", ")", ")", "\n", "\n", "enc3", "=", "self", ".", "encoder3", "(", "self", ".", "pool2", "(", "enc2", ")", ")", "\n", "\n", "enc4", "=", "self", ".", "encoder4", "(", "self", ".", "pool3", "(", "enc3", ")", ")", "\n", "enc4_2", "=", "self", ".", "pool4", "(", "enc4", ")", "\n", "\n", "if", "self", ".", "ffc", ":", "\n", "            ", "enc1_f", "=", "self", ".", "encoder1_f", "(", "x", ")", "\n", "enc1_l", ",", "enc1_g", "=", "enc1_f", "\n", "if", "self", ".", "ratio_in", "==", "0", ":", "\n", "                ", "enc2_f", "=", "self", ".", "encoder2_f", "(", "(", "self", ".", "pool1_f", "(", "enc1_l", ")", ",", "enc1_g", ")", ")", "\n", "", "elif", "self", ".", "ratio_in", "==", "1", ":", "\n", "                ", "enc2_f", "=", "self", ".", "encoder2_f", "(", "(", "enc1_l", ",", "self", ".", "pool1_f", "(", "enc1_g", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "enc2_f", "=", "self", ".", "encoder2_f", "(", "(", "self", ".", "pool1_f", "(", "enc1_l", ")", ",", "self", ".", "pool1_f", "(", "enc1_g", ")", ")", ")", "\n", "\n", "", "enc2_l", ",", "enc2_g", "=", "enc2_f", "\n", "if", "self", ".", "ratio_in", "==", "0", ":", "\n", "                ", "enc3_f", "=", "self", ".", "encoder3_f", "(", "(", "self", ".", "pool2_f", "(", "enc2_l", ")", ",", "enc2_g", ")", ")", "\n", "", "elif", "self", ".", "ratio_in", "==", "1", ":", "\n", "                ", "enc3_f", "=", "self", ".", "encoder3_f", "(", "(", "enc2_l", ",", "self", ".", "pool2_f", "(", "enc2_g", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "enc3_f", "=", "self", ".", "encoder3_f", "(", "(", "self", ".", "pool2_f", "(", "enc2_l", ")", ",", "self", ".", "pool2_f", "(", "enc2_g", ")", ")", ")", "\n", "\n", "", "enc3_l", ",", "enc3_g", "=", "enc3_f", "\n", "if", "self", ".", "ratio_in", "==", "0", ":", "\n", "                ", "enc4_f", "=", "self", ".", "encoder4_f", "(", "(", "self", ".", "pool3_f", "(", "enc3_l", ")", ",", "enc3_g", ")", ")", "\n", "", "elif", "self", ".", "ratio_in", "==", "1", ":", "\n", "                ", "enc4_f", "=", "self", ".", "encoder4_f", "(", "(", "enc3_l", ",", "self", ".", "pool3_f", "(", "enc3_g", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "enc4_f", "=", "self", ".", "encoder4_f", "(", "(", "self", ".", "pool3_f", "(", "enc3_l", ")", ",", "self", ".", "pool3_f", "(", "enc3_g", ")", ")", ")", "\n", "\n", "", "enc4_l", ",", "enc4_g", "=", "enc4_f", "\n", "if", "self", ".", "ratio_in", "==", "0", ":", "\n", "                ", "enc4_f2", "=", "self", ".", "pool1_f", "(", "enc4_l", ")", "\n", "", "elif", "self", ".", "ratio_in", "==", "1", ":", "\n", "                ", "enc4_f2", "=", "self", ".", "pool1_f", "(", "enc4_g", ")", "\n", "", "else", ":", "\n", "                ", "enc4_f2", "=", "self", ".", "catLayer", "(", "(", "self", ".", "pool4_f", "(", "enc4_l", ")", ",", "self", ".", "pool4_f", "(", "enc4_g", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "enc1_f", "=", "self", ".", "encoder1_f", "(", "x", ")", "\n", "enc2_f", "=", "self", ".", "encoder2_f", "(", "self", ".", "pool1_f", "(", "enc1_f", ")", ")", "\n", "enc3_f", "=", "self", ".", "encoder3_f", "(", "self", ".", "pool2_f", "(", "enc2_f", ")", ")", "\n", "enc4_f", "=", "self", ".", "encoder4_f", "(", "self", ".", "pool3_f", "(", "enc3_f", ")", ")", "\n", "enc4_f2", "=", "self", ".", "pool4", "(", "enc4_f", ")", "\n", "\n", "", "if", "self", ".", "cat_merge", ":", "\n", "            ", "a", "=", "torch", ".", "zeros_like", "(", "enc4_2", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "enc4_f2", ")", "\n", "\n", "enc4_2", "=", "enc4_2", ".", "view", "(", "torch", ".", "numel", "(", "enc4_2", ")", ",", "1", ")", "\n", "enc4_f2", "=", "enc4_f2", ".", "view", "(", "torch", ".", "numel", "(", "enc4_f2", ")", ",", "1", ")", "\n", "\n", "bottleneck", "=", "torch", ".", "cat", "(", "(", "enc4_2", ",", "enc4_f2", ")", ",", "1", ")", "\n", "bottleneck", "=", "bottleneck", ".", "view_as", "(", "torch", ".", "cat", "(", "(", "a", ",", "b", ")", ",", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "bottleneck", "=", "torch", ".", "cat", "(", "(", "enc4_2", ",", "enc4_f2", ")", ",", "1", ")", "\n", "\n", "", "bottleneck", "=", "self", ".", "bottleneck", "(", "bottleneck", ")", "\n", "\n", "dec4", "=", "self", ".", "upconv4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "ffc", "and", "self", ".", "skip_ffc", ":", "\n", "            ", "enc4_in", "=", "torch", ".", "cat", "(", "(", "enc4", ",", "self", ".", "catLayer", "(", "(", "enc4_f", "[", "0", "]", ",", "enc4_f", "[", "1", "]", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "dec4", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc4_in", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "decoder4", "(", "dec4", ")", "\n", "dec3", "=", "self", ".", "upconv3", "(", "dec4", ")", "\n", "\n", "enc3_in", "=", "torch", ".", "cat", "(", "(", "enc3", ",", "self", ".", "catLayer", "(", "(", "enc3_f", "[", "0", "]", ",", "enc3_f", "[", "1", "]", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3_in", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "decoder3", "(", "dec3", ")", "\n", "\n", "dec2", "=", "self", ".", "upconv2", "(", "dec3", ")", "\n", "enc2_in", "=", "torch", ".", "cat", "(", "(", "enc2", ",", "self", ".", "catLayer", "(", "(", "enc2_f", "[", "0", "]", ",", "enc2_f", "[", "1", "]", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "torch", ".", "cat", "(", "(", "dec2", ",", "enc2_in", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "decoder2", "(", "dec2", ")", "\n", "dec1", "=", "self", ".", "upconv1", "(", "dec2", ")", "\n", "enc1_in", "=", "torch", ".", "cat", "(", "(", "enc1", ",", "self", ".", "catLayer", "(", "(", "enc1_f", "[", "0", "]", ",", "enc1_f", "[", "1", "]", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "dec1", "=", "torch", ".", "cat", "(", "(", "dec1", ",", "enc1_in", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "skip_ffc", ":", "\n", "            ", "enc4_in", "=", "torch", ".", "cat", "(", "(", "enc4", ",", "enc4_f", ")", ",", "dim", "=", "1", ")", "\n", "\n", "dec4", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc4_in", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "decoder4", "(", "dec4", ")", "\n", "dec3", "=", "self", ".", "upconv3", "(", "dec4", ")", "\n", "\n", "enc3_in", "=", "torch", ".", "cat", "(", "(", "enc3", ",", "enc3_f", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3_in", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "decoder3", "(", "dec3", ")", "\n", "\n", "dec2", "=", "self", ".", "upconv2", "(", "dec3", ")", "\n", "enc2_in", "=", "torch", ".", "cat", "(", "(", "enc2", ",", "enc2_f", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "torch", ".", "cat", "(", "(", "dec2", ",", "enc2_in", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "decoder2", "(", "dec2", ")", "\n", "dec1", "=", "self", ".", "upconv1", "(", "dec2", ")", "\n", "enc1_in", "=", "torch", ".", "cat", "(", "(", "enc1", ",", "enc1_f", ")", ",", "dim", "=", "1", ")", "\n", "dec1", "=", "torch", ".", "cat", "(", "(", "dec1", ",", "enc1_in", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "dec4", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc4", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "decoder4", "(", "dec4", ")", "\n", "dec3", "=", "self", ".", "upconv3", "(", "dec4", ")", "\n", "dec3", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "decoder3", "(", "dec3", ")", "\n", "dec2", "=", "self", ".", "upconv2", "(", "dec3", ")", "\n", "dec2", "=", "torch", ".", "cat", "(", "(", "dec2", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "decoder2", "(", "dec2", ")", "\n", "dec1", "=", "self", ".", "upconv1", "(", "dec2", ")", "\n", "dec1", "=", "torch", ".", "cat", "(", "(", "dec1", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "dec1", "=", "self", ".", "decoder1", "(", "dec1", ")", "\n", "\n", "return", "self", ".", "softmax", "(", "self", ".", "conv", "(", "dec1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.YNet_general._block": [[373, 402], ["torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_block", "(", "in_channels", ",", "features", ",", "name", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "name", "+", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "name", "+", "\"norm1\"", ",", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "features", ")", ")", ",", "\n", "(", "name", "+", "\"relu1\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\n", "name", "+", "\"conv2\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "features", ",", "\n", "out_channels", "=", "features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "name", "+", "\"norm2\"", ",", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "features", ")", ")", ",", "\n", "(", "name", "+", "\"relu2\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.networks.get_model": [[25, 37], ["networks.UNet", "networks.YNet_general", "networks.YNet_general", "print"], "function", ["None"], ["def", "get_model", "(", "model_name", ",", "in_channels", "=", "1", ",", "num_classes", "=", "9", ",", "ratio", "=", "0.5", ")", ":", "\n", "    ", "if", "model_name", "==", "\"unet\"", ":", "\n", "        ", "model", "=", "UNet", "(", "in_channels", ",", "num_classes", ")", "\n", "", "elif", "model_name", "==", "\"y_net_gen\"", ":", "\n", "        ", "model", "=", "YNet_general", "(", "in_channels", ",", "num_classes", ",", "ffc", "=", "False", ")", "\n", "", "elif", "model_name", "==", "\"y_net_gen_ffc\"", ":", "\n", "        ", "model", "=", "YNet_general", "(", "in_channels", ",", "num_classes", ",", "ffc", "=", "True", ",", "ratio_in", "=", "ratio", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Model name not found\"", ")", "\n", "assert", "False", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.eval.argument_parser": [[31, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "argument_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Optimization hyperparameters", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "9", ",", "type", "=", "int", ")", "\n", "\n", "# Dataset options", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'Duke'", ",", "choices", "=", "[", "\"Duke\"", ",", "\"UMN\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "default", "=", "'224'", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "default", "=", "\"./DukeData/\"", ")", "\n", "\n", "# Network options", "\n", "parser", ".", "add_argument", "(", "'--g_ratio'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "\n", "# Other options", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "\"cuda\"", ",", "choices", "=", "[", "\"cuda\"", ",", "\"cpu\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "7", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--print_params'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_path'", ",", "default", "=", "\"./pretrained_models/\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.eval.plot_samples_2mod": [[56, 84], ["model1.eval", "model2.eval", "matplotlib.axis", "testset.__getitem__", "img.unsqueeze().to.unsqueeze().to", "label.unsqueeze().to", "model1", "model2", "torch.max", "torch.max", "[].cpu().numpy", "[].cpu().numpy", "idx1[].detach().cpu().numpy", "idx2[].detach().cpu().numpy", "utils.plot_mult", "numpy.random.randint", "len", "img.unsqueeze().to.unsqueeze", "label.unsqueeze", "[].cpu", "[].cpu", "idx1[].detach().cpu", "idx2[].detach().cpu", "idx1[].detach", "idx2[].detach"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.data.DatasetOct.__getitem__", "home.repos.pwc.inspect_result.azadef_ynet.None.utils.plot_mult"], ["", "def", "plot_samples_2mod", "(", "model1", ",", "model2", ",", "testset", ",", "idx_", "=", "None", ")", ":", "\n", "    ", "model1", ".", "eval", "(", ")", "\n", "model2", ".", "eval", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "rcParams", "[", "\"text.usetex\"", "]", "=", "True", "\n", "\n", "if", "idx_", "is", "None", ":", "\n", "        ", "idx_", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "testset", ")", ")", "\n", "\n", "", "img", ",", "label", "=", "testset", ".", "__getitem__", "(", "idx_", ")", "\n", "\n", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "label_e1", "=", "label", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "\n", "pred1", "=", "model1", "(", "img", ")", "\n", "pred2", "=", "model2", "(", "img", ")", "\n", "_", ",", "idx1", "=", "torch", ".", "max", "(", "pred1", ",", "1", ")", "\n", "_", ",", "idx2", "=", "torch", ".", "max", "(", "pred2", ",", "1", ")", "\n", "\n", "im_out", "=", "img", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lb_np_e1", "=", "label_e1", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred1_np", "=", "idx1", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred2_np", "=", "idx2", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "labels", "=", "[", "im_out", ",", "lb_np_e1", ",", "pred1_np", ",", "pred2_np", "]", "\n", "names", "=", "[", "\"Input Image\"", ",", "\"Expert 1\"", ",", "\"U-Net\"", ",", "r'$\\Upsilon$'", "\"-Net (Ours)\"", "]", "\n", "\n", "plot_mult", "(", "labels", ",", "names", ",", "True", ",", "idx_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.eval.qual_eval": [[86, 89], ["range", "len", "eval.plot_samples_2mod"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.eval.plot_samples_2mod"], ["", "def", "qual_eval", "(", "testset", ",", "model", ",", "model_2", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "testset", ")", ")", ":", "\n", "        ", "plot_samples_2mod", "(", "model", ",", "model_2", ",", "testset", ",", "idx_", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.eval.quant_eval": [[91, 119], ["numpy.zeros", "tqdm.tqdm", "numpy.mean", "print", "img.to.to", "label.to.to", "torch.nn.functional.one_hot", "model", "torch.max", "torch.nn.functional.one_hot", "utils.per_class_dice", "utils.mIOU", "round"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.utils.per_class_dice", "home.repos.pwc.inspect_result.azadef_ynet.None.utils.mIOU"], ["", "", "def", "quant_eval", "(", "model", ",", "test_loader", ",", "n_classes", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "    ", "dice", "=", "0", "\n", "dice_all", "=", "np", ".", "zeros", "(", "n_classes", ")", "\n", "iou_all", "=", "0", "\n", "counter", "=", "0", "\n", "\n", "for", "img", ",", "label", "in", "tqdm", ".", "tqdm", "(", "test_loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", "=", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ")", "\n", "label_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "label", ",", "num_classes", "=", "n_classes", ")", "\n", "\n", "pred", "=", "model", "(", "img", ")", "\n", "max_val", ",", "idx", "=", "torch", ".", "max", "(", "pred", ",", "1", ")", "\n", "pred_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "idx", ",", "num_classes", "=", "n_classes", ")", "\n", "\n", "d1", ",", "d2", "=", "per_class_dice", "(", "pred_oh", ",", "label_oh", ",", "n_classes", ")", "\n", "iou", "=", "mIOU", "(", "label", ",", "pred", ",", "n_classes", ")", "\n", "iou_all", "+=", "iou", "\n", "dice", "+=", "d1", "\n", "dice_all", "+=", "d2", "\n", "\n", "counter", "+=", "1", "\n", "\n", "", "dice_all", "=", "dice_all", "/", "counter", "\n", "iou_all", "=", "iou_all", "/", "counter", "\n", "dice_all", "=", "[", "round", "(", "x", ",", "2", ")", "for", "x", "in", "dice_all", "]", "\n", "dice", "=", "np", ".", "mean", "(", "dice_all", "[", "1", ":", "]", ")", "\n", "print", "(", "\" Mean Dice: \"", ",", "dice", ",", "\"Dice All:\"", ",", "dice_all", ",", "\"mIoU All: \"", ",", "iou_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.eval.eval_unet_vs_ynet": [[121, 143], ["networks.UNet().to", "os.path.join", "UNet().to.load_state_dict", "networks.get_model().to", "os.path.join", "get_model().to.load_state_dict", "UNet().to.eval", "get_model().to.eval", "print", "eval.quant_eval", "print", "eval.quant_eval", "print", "eval.qual_eval", "torch.load", "torch.load", "os.path.exists", "os.makedirs", "networks.UNet", "networks.get_model"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.eval.quant_eval", "home.repos.pwc.inspect_result.azadef_ynet.None.eval.quant_eval", "home.repos.pwc.inspect_result.azadef_ynet.None.eval.qual_eval", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.get_model"], ["", "def", "eval_unet_vs_ynet", "(", "testloader", ",", "testset", ",", "args", ")", ":", "\n", "    ", "n_classes", "=", "args", ".", "n_classes", "\n", "\n", "unet_model", "=", "UNet", "(", "1", ",", "n_classes", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "unet_path", "=", "path", ".", "join", "(", "args", ".", "pretrained_path", ",", "\"unet.pt\"", ")", "\n", "unet_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "unet_path", ")", ")", "\n", "\n", "ynet_model", "=", "get_model", "(", "\"y_net_gen_ffc\"", ",", "ratio", "=", "args", ".", "g_ratio", ",", "num_classes", "=", "n_classes", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "ynet_path", "=", "path", ".", "join", "(", "args", ".", "pretrained_path", ",", "\"y_net_gen_ffc.pt\"", ")", "\n", "ynet_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ynet_path", ")", ")", "\n", "\n", "unet_model", ".", "eval", "(", ")", "\n", "ynet_model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"UNet Dice Score:\"", ")", "\n", "quant_eval", "(", "unet_model", ",", "testloader", ",", "n_classes", "=", "n_classes", ")", "\n", "print", "(", "\"YNet Dice Score:\"", ")", "\n", "quant_eval", "(", "ynet_model", ",", "testloader", ",", "n_classes", "=", "n_classes", ")", "\n", "print", "(", "\"Generating Qualitative Results\"", ")", "\n", "if", "not", "path", ".", "exists", "(", "\"./figs\"", ")", ":", "\n", "        ", "makedirs", "(", "\"./figs\"", ")", "\n", "", "qual_eval", "(", "testset", ",", "unet_model", ",", "ynet_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.eval.print_params": [[145, 156], ["networks.UNet().cuda", "networks.get_model().cuda", "print", "torchinfo.summary", "print", "torchinfo.summary", "networks.UNet", "networks.get_model"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.networks.get_model"], ["", "def", "print_params", "(", "n_classes", ")", ":", "\n", "    ", "input_shape", "=", "(", "1", ",", "1", ",", "224", ",", "224", ")", "\n", "\n", "unet_model", "=", "UNet", "(", "1", ",", "n_classes", ")", ".", "cuda", "(", ")", "\n", "ynet_model", "=", "get_model", "(", "\"y_net_gen\"", ",", "ratio", "=", "0.5", ")", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "\"UNet\"", ")", "\n", "summary", "(", "unet_model", ",", "input_shape", ")", "\n", "\n", "print", "(", "\"YNet\"", ")", "\n", "summary", "(", "ynet_model", ",", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.train.argument_parser": [[30, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "argument_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Optimization hyperparameters", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iterations'", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "9", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--ffc_lambda'", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "\n", "# Dataset options", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'Duke'", ",", "choices", "=", "[", "\"Duke\"", ",", "\"UMN\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "default", "=", "'224'", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "default", "=", "\"./DukeData/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "\"y_net_gen_ffc\"", ",", "choices", "=", "[", "\"unet\"", ",", "\"y_net_gen\"", ",", "\"y_net_gen_ffc\"", "]", ")", "\n", "\n", "# Network options", "\n", "parser", ".", "add_argument", "(", "'--g_ratio'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "\n", "# Other options", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "\"cuda\"", ",", "choices", "=", "[", "\"cuda\"", ",", "\"cpu\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "7", ",", "type", "=", "int", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.train.colored_text": [[58, 60], ["None"], "function", ["None"], ["", "def", "colored_text", "(", "st", ")", ":", "\n", "    ", "return", "'\\033[91m'", "+", "st", "+", "'\\033[0m'", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.train.set_seed": [[62, 68], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.train.eval": [[70, 101], ["model.eval", "numpy.zeros", "tqdm.tqdm", "print", "img.to.to", "label.to.to", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "model", "torch.max", "torch.max", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "criterion().item", "dice.item", "utils.per_class_dice", "criterion", "label.to.squeeze"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.utils.per_class_dice"], ["", "def", "eval", "(", "val_loader", ",", "criterion", ",", "model", ",", "n_classes", ",", "dice_s", "=", "True", ",", "device", "=", "\"cuda\"", ",", "im_save", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss", "=", "0", "\n", "counter", "=", "0", "\n", "dice", "=", "0", "\n", "\n", "dice_all", "=", "np", ".", "zeros", "(", "n_classes", ")", "\n", "\n", "for", "img", ",", "label", "in", "tqdm", ".", "tqdm", "(", "val_loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "label_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "label", ",", "num_classes", "=", "n_classes", ")", "\n", "\n", "pred", "=", "model", "(", "img", ")", "\n", "max_val", ",", "idx", "=", "torch", ".", "max", "(", "pred", ",", "1", ")", "\n", "pred_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "idx", ",", "num_classes", "=", "n_classes", ")", "\n", "\n", "if", "dice_s", ":", "\n", "            ", "d1", ",", "d2", "=", "per_class_dice", "(", "pred_oh", ",", "label_oh", ",", "n_classes", ")", "\n", "dice", "+=", "d1", "\n", "dice_all", "+=", "d2", "\n", "\n", "", "loss", "+=", "criterion", "(", "pred", ",", "label", ".", "squeeze", "(", "1", ")", ",", "device", "=", "device", ")", ".", "item", "(", ")", "\n", "\n", "counter", "+=", "1", "\n", "\n", "", "loss", "=", "loss", "/", "counter", "\n", "dice", "=", "dice", "/", "counter", "\n", "dice_all", "=", "dice_all", "/", "counter", "\n", "print", "(", "\"Validation loss: \"", ",", "loss", ",", "\" Mean Dice: \"", ",", "dice", ".", "item", "(", ")", ",", "\"Dice All:\"", ",", "dice_all", ")", "\n", "return", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.train.train": [[103, 168], ["losses.CombinedLoss", "losses.FocalFrequencyLoss", "networks.get_model().to", "get_model().to.train", "torch.optim.Adam", "torch.optim.Adam", "data.get_data", "range", "print", "list", "tqdm.tqdm", "networks.get_model", "get_model().to.parameters", "img.to.to", "label.to.to", "torch.nn.functional.one_hot().squeeze", "torch.nn.functional.one_hot().squeeze", "get_model().to.", "torch.max", "torch.max", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "pred_oh.permute.permute", "label_oh.permute.permute", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "print", "print", "print", "train.eval", "print", "train.eval", "get_model().to.train", "losses.CombinedLoss.", "loss.item", "print", "torch.save", "torch.save", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "label.to.squeeze", "losses.FocalFrequencyLoss.", "train.colored_text", "get_model().to.state_dict"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.train.train", "home.repos.pwc.inspect_result.azadef_ynet.None.data.get_data", "home.repos.pwc.inspect_result.azadef_ynet.None.networks.get_model", "home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.train.eval", "home.repos.pwc.inspect_result.azadef_ynet.None.train.train", "home.repos.pwc.inspect_result.azadef_ynet.None.train.colored_text"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "device", "=", "args", ".", "device", "\n", "n_classes", "=", "args", ".", "n_classes", "\n", "model_name", "=", "args", ".", "model_name", "\n", "learning_rate", "=", "args", ".", "learning_rate", "\n", "ratio", "=", "args", ".", "g_ratio", "\n", "data_path", "=", "args", ".", "image_dir", "\n", "iterations", "=", "args", ".", "num_iterations", "\n", "img_size", "=", "args", ".", "image_size", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "criterion_seg", "=", "CombinedLoss", "(", ")", "\n", "criterion_ffc", "=", "FocalFrequencyLoss", "(", ")", "\n", "\n", "save_name", "=", "model_name", "+", "\".pt\"", "\n", "\n", "max_dice", "=", "0", "\n", "best_test_dice", "=", "0", "\n", "best_iter", "=", "0", "\n", "\n", "model", "=", "get_model", "(", "model_name", ",", "ratio", "=", "ratio", ",", "num_classes", "=", "n_classes", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "learning_rate", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_loader", ",", "val_loader", ",", "test_loader", ",", "_", ",", "_", ",", "_", "=", "get_data", "(", "data_path", ",", "img_size", ",", "batch_size", ")", "\n", "\n", "for", "t", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "for", "img", ",", "label", "in", "tqdm", ".", "tqdm", "(", "train_loader", ")", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "label_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "label", ",", "num_classes", "=", "n_classes", ")", ".", "squeeze", "(", ")", "\n", "\n", "pred", "=", "model", "(", "img", ")", "\n", "max_val", ",", "idx", "=", "torch", ".", "max", "(", "pred", ",", "1", ")", "\n", "pred_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "idx", ",", "num_classes", "=", "n_classes", ")", "\n", "pred_oh", "=", "pred_oh", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "label_oh", "=", "label_oh", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "loss", "=", "criterion_seg", "(", "pred", ",", "label", ".", "squeeze", "(", "1", ")", ",", "device", "=", "device", ")", "+", "args", ".", "ffc_lambda", "*", "criterion_ffc", "(", "pred_oh", ",", "\n", "label_oh", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "t", "%", "2", "==", "0", ":", "\n", "            ", "print", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "t", "%", "10", "==", "0", "or", "t", ">", "45", ":", "\n", "            ", "print", "(", "\"Epoch\"", ",", "t", ",", "\"/\"", ",", "iterations", ")", "\n", "print", "(", "\"Validation\"", ")", "\n", "dice", "=", "eval", "(", "val_loader", ",", "criterion_seg", ",", "model", ",", "dice_s", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "print", "(", "\"Expert 1 - Test\"", ")", "\n", "dice_test", "=", "eval", "(", "test_loader", ",", "criterion_seg", ",", "model", ",", "n_classes", "=", "n_classes", ")", "\n", "\n", "if", "dice", ">", "max_dice", ":", "\n", "                ", "max_dice", "=", "dice", "\n", "best_iter", "=", "t", "\n", "best_test_dice", "=", "dice_test", "\n", "print", "(", "colored_text", "(", "\"Updating model, epoch: \"", ")", ",", "t", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_name", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "", "", "print", "(", "\"Best iteration: \"", ",", "best_iter", ",", "\"Best val dice: \"", ",", "max_dice", ",", "\"Best test dice: \"", ",", "best_test_dice", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.TransformOCTBilinear.__new__": [[31, 34], ["torchvision.Compose", "torchvision.Resize"], "methods", ["None"], ["    ", "def", "__new__", "(", "cls", ",", "img_size", "=", "(", "128", ",", "128", ")", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "tf", ".", "Compose", "(", "[", "\n", "tf", ".", "Resize", "(", "img_size", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.TransformStandardization.__init__": [[61, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.TransformStandardization.__call__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "(", "image", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.TransformStandardization.__repr__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f\": mean {self.mean}, std {self.std}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.TransformOCTMaskAdjustment.__call__": [[78, 82], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "[", "mask", "==", "8", "]", "=", "0", "\n", "mask", "[", "mask", "==", "9", "]", "=", "8", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.DatasetOct.__init__": [[99, 120], ["os.path.join", "os.path.join", "data.get_files", "data.TransformOCTMaskAdjustment", "data.TransformStandardization"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.data.get_files"], ["def", "__init__", "(", "self", ",", "dataset_path", ":", "str", ",", "joint_transform", ":", "Callable", "=", "None", ",", "size_transform", ":", "Callable", "=", "None", ",", "\n", "image_transform", ":", "Callable", "=", "None", ",", "normalized", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "input_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'images'", ")", "\n", "self", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'masks'", ")", "\n", "self", ".", "images_list", "=", "get_files", "(", "self", ".", "input_path", ",", "\".npy\"", ")", "\n", "\n", "# size transform", "\n", "self", ".", "size_transform", "=", "size_transform", "\n", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "\n", "self", ".", "mask_adjust", "=", "TransformOCTMaskAdjustment", "(", ")", "\n", "\n", "self", ".", "image_transform", "=", "image_transform", "\n", "\n", "self", ".", "normalized", "=", "normalized", "\n", "# gray scale oct 2015: calculated with full tensor in memory {'mean': tensor([46.3758]), 'std': tensor([53.9434])}", "\n", "# calculated with batched method {'mean': tensor([46.3756]), 'std': tensor([53.9204])}", "\n", "self", ".", "normalize", "=", "TransformStandardization", "(", "(", "46.3758", ")", ",", "\n", "(", "53.9434", ")", ")", "# torchvision.transforms.Normalize((46.3758), (53.9434))", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.DatasetOct.__len__": [[121, 123], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.DatasetOct.__getitem__": [[124, 165], ["numpy.load", "numpy.load", "data.DatasetOct.squeeze", "data.DatasetOct.squeeze", "torch.Tensor().reshape", "torch.Tensor().reshape().int", "data.DatasetOct.mask_adjust", "data.DatasetOct.squeeze", "data.DatasetOct.reshape", "data.DatasetOct.squeeze().long", "os.path.join", "os.path.join", "data.DatasetOct.size_transform", "data.DatasetOct.size_transform", "data.DatasetOct.normalize", "data.DatasetOct.joint_transform", "data.DatasetOct.image_transform", "torch.Tensor", "torch.Tensor().reshape", "data.DatasetOct.squeeze", "torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_filename", "=", "self", ".", "images_list", "[", "idx", "]", "\n", "\n", "img", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_path", ",", "image_filename", ")", ")", "\n", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "image_filename", ")", ")", "\n", "\n", "# img_size 128 works - general transforms require (N,C,H,W) dims", "\n", "img", "=", "img", ".", "squeeze", "(", ")", "\n", "mask", "=", "mask", ".", "squeeze", "(", ")", "\n", "\n", "img", "=", "torch", ".", "Tensor", "(", "img", ")", ".", "reshape", "(", "1", ",", "1", ",", "*", "img", ".", "shape", ")", "\n", "mask", "=", "torch", ".", "Tensor", "(", "mask", ")", ".", "reshape", "(", "1", ",", "1", ",", "*", "mask", ".", "shape", ")", ".", "int", "(", ")", "\n", "\n", "# adjust mask classes", "\n", "mask", "=", "self", ".", "mask_adjust", "(", "mask", ")", "\n", "\n", "# note for some reason some masks differ in size from the actual image (dims)", "\n", "if", "self", ".", "size_transform", ":", "\n", "            ", "img", "=", "self", ".", "size_transform", "(", "img", ")", "\n", "mask", "=", "self", ".", "size_transform", "(", "mask", ")", "\n", "\n", "# normalize after size_transform", "\n", "", "if", "self", ".", "normalized", ":", "\n", "            ", "img", "=", "self", ".", "normalize", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "joint_transform", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "[", "img", ",", "mask", "]", ")", "\n", "\n", "#img = img.reshape(1, img.shape[2], img.shape[3])", "\n", "", "if", "self", ".", "image_transform", ":", "\n", "            ", "img", "=", "self", ".", "image_transform", "(", "img", ")", "\n", "\n", "#img = img.reshape(1, *img.shape)", "\n", "\n", "# set image dim to (C,H,W)", "\n", "", "img", "=", "img", ".", "squeeze", "(", ")", "\n", "img", "=", "img", ".", "reshape", "(", "1", ",", "*", "img", ".", "shape", ")", "\n", "# set mask dim to (H,W)  where value at (h,w) maps to class of corresponding pixel", "\n", "mask", "=", "mask", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.get_files": [[26, 28], ["os.listdir", "os.path.isfile", "f.endswith", "os.path.join"], "function", ["None"], ["def", "get_files", "(", "path", ",", "ext", ")", ":", "\n", "    ", "return", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", ")", "and", "f", ".", "endswith", "(", "ext", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.data.get_data": [[37, 55], ["os.path.join", "os.path.join", "os.path.join", "data.TransformOCTBilinear", "data.DatasetOct", "data.DatasetOct", "data.DatasetOct", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_data", "(", "data_path", ",", "img_size", ",", "batch_size", ",", "val_batch_size", "=", "1", ")", ":", "\n", "    ", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"train\"", ")", "\n", "val_dataset_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"val\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"test\"", ")", "\n", "\n", "size_transform", "=", "TransformOCTBilinear", "(", "img_size", "=", "(", "img_size", ",", "img_size", ")", ")", "\n", "\n", "img_transform", "=", "None", "\n", "\n", "train_dataset", "=", "DatasetOct", "(", "train_dataset_path", ",", "size_transform", "=", "size_transform", ",", "normalized", "=", "True", ",", "image_transform", "=", "img_transform", ")", "\n", "val_dataset", "=", "DatasetOct", "(", "val_dataset_path", ",", "size_transform", "=", "size_transform", ",", "normalized", "=", "True", ")", "\n", "test_dataset", "=", "DatasetOct", "(", "test_dataset_path", ",", "size_transform", "=", "size_transform", ",", "normalized", "=", "True", ")", "\n", "\n", "trainloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "valloader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ")", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "trainloader", ",", "valloader", ",", "testloader", ",", "train_dataset", ",", "val_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.__init__": [[23, 30], ["torch.Module.__init__", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Parameter", "torch.Parameter", "torch.Parameter"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "impl", ",", "pad_coef", "=", "0.5", ",", "angle_init_range", "=", "80", ",", "train_angle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "impl", "=", "impl", "\n", "self", ".", "angle", "=", "torch", ".", "rand", "(", "1", ")", "*", "angle_init_range", "\n", "if", "train_angle", ":", "\n", "            ", "self", ".", "angle", "=", "nn", ".", "Parameter", "(", "self", ".", "angle", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "pad_coef", "=", "pad_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.forward": [[31, 40], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "ffc.LearnableSpatialTransformWrapper.inverse_transform", "isinstance", "ffc.LearnableSpatialTransformWrapper.impl", "tuple", "ffc.LearnableSpatialTransformWrapper.impl", "tuple", "ValueError", "ffc.LearnableSpatialTransformWrapper.transform", "ffc.LearnableSpatialTransformWrapper.transform", "ffc.LearnableSpatialTransformWrapper.inverse_transform", "zip", "type"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.inverse_transform", "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.transform", "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.transform", "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.inverse_transform"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "return", "self", ".", "inverse_transform", "(", "self", ".", "impl", "(", "self", ".", "transform", "(", "x", ")", ")", ",", "x", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "x_trans", "=", "tuple", "(", "self", ".", "transform", "(", "elem", ")", "for", "elem", "in", "x", ")", "\n", "y_trans", "=", "self", ".", "impl", "(", "x_trans", ")", "\n", "return", "tuple", "(", "self", ".", "inverse_transform", "(", "elem", ",", "orig_x", ")", "for", "elem", ",", "orig_x", "in", "zip", "(", "y_trans", ",", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unexpected input type {type(x)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.transform": [[41, 47], ["torch.pad", "torch.pad", "torch.pad", "kornia.geometry.transform.rotate", "int", "int", "ffc.LearnableSpatialTransformWrapper.angle.to"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "height", ",", "width", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "pad_h", ",", "pad_w", "=", "int", "(", "height", "*", "self", ".", "pad_coef", ")", ",", "int", "(", "width", "*", "self", ".", "pad_coef", ")", "\n", "x_padded", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", ",", "pad_w", ",", "pad_h", ",", "pad_h", "]", ",", "mode", "=", "'reflect'", ")", "\n", "x_padded_rotated", "=", "rotate", "(", "x_padded", ",", "angle", "=", "self", ".", "angle", ".", "to", "(", "x_padded", ")", ")", "\n", "return", "x_padded_rotated", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.LearnableSpatialTransformWrapper.inverse_transform": [[48, 56], ["kornia.geometry.transform.rotate", "int", "int", "ffc.LearnableSpatialTransformWrapper.angle.to"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "y_padded_rotated", ",", "orig_x", ")", ":", "\n", "        ", "height", ",", "width", "=", "orig_x", ".", "shape", "[", "2", ":", "]", "\n", "pad_h", ",", "pad_w", "=", "int", "(", "height", "*", "self", ".", "pad_coef", ")", ",", "int", "(", "width", "*", "self", ".", "pad_coef", ")", "\n", "\n", "y_padded", "=", "rotate", "(", "y_padded_rotated", ",", "angle", "=", "-", "self", ".", "angle", ".", "to", "(", "y_padded_rotated", ")", ")", "\n", "y_height", ",", "y_width", "=", "y_padded", ".", "shape", "[", "2", ":", "]", "\n", "y", "=", "y_padded", "[", ":", ",", ":", ",", "pad_h", ":", "y_height", "-", "pad_h", ",", "pad_w", ":", "y_width", "-", "pad_w", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFCSE_block.__init__": [[61, 76], ["torch.Module.__init__", "int", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ratio_g", ")", ":", "\n", "        ", "super", "(", "FFCSE_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_cg", "=", "int", "(", "channels", "*", "ratio_g", ")", "\n", "in_cl", "=", "channels", "-", "in_cg", "\n", "r", "=", "16", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "r", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv_a2l", "=", "None", "if", "in_cl", "==", "0", "else", "nn", ".", "Conv2d", "(", "\n", "channels", "//", "r", ",", "in_cl", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_a2g", "=", "None", "if", "in_cg", "==", "0", "else", "nn", ".", "Conv2d", "(", "\n", "channels", "//", "r", ",", "in_cg", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFCSE_block.forward": [[77, 90], ["ffc.FFCSE_block.avgpool", "ffc.FFCSE_block.relu1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ffc.FFCSE_block.conv1", "type", "type", "ffc.FFCSE_block.sigmoid", "ffc.FFCSE_block.sigmoid", "ffc.FFCSE_block.conv_a2l", "ffc.FFCSE_block.conv_a2g"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "if", "type", "(", "x", ")", "is", "tuple", "else", "(", "x", ",", "0", ")", "\n", "id_l", ",", "id_g", "=", "x", "\n", "\n", "x", "=", "id_l", "if", "type", "(", "id_g", ")", "is", "int", "else", "torch", ".", "cat", "(", "[", "id_l", ",", "id_g", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "x_l", "=", "0", "if", "self", ".", "conv_a2l", "is", "None", "else", "id_l", "*", "self", ".", "sigmoid", "(", "self", ".", "conv_a2l", "(", "x", ")", ")", "\n", "x_g", "=", "0", "if", "self", ".", "conv_a2g", "is", "None", "else", "id_g", "*", "self", ".", "sigmoid", "(", "self", ".", "conv_a2g", "(", "x", ")", ")", "\n", "return", "x_l", ",", "x_g", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FourierUnit.__init__": [[94, 118], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "groups", "=", "1", ",", "spatial_scale_factor", "=", "None", ",", "spatial_scale_mode", "=", "'bilinear'", ",", "\n", "spectral_pos_encoding", "=", "False", ",", "use_se", "=", "False", ",", "se_kwargs", "=", "None", ",", "ffc3d", "=", "False", ",", "fft_norm", "=", "'ortho'", ")", ":", "\n", "# bn_layer not used", "\n", "        ", "super", "(", "FourierUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "self", ".", "conv_layer", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", "*", "2", "+", "(", "2", "if", "spectral_pos_encoding", "else", "0", ")", ",", "\n", "out_channels", "=", "out_channels", "*", "2", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "2", ")", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# squeeze and excitation block", "\n", "self", ".", "use_se", "=", "use_se", "\n", "#if use_se:", "\n", "#    if se_kwargs is None:", "\n", "#        se_kwargs = {}", "\n", "#    self.se = SELayer(self.conv_layer.in_channels, **se_kwargs)", "\n", "\n", "self", ".", "spatial_scale_factor", "=", "spatial_scale_factor", "\n", "self", ".", "spatial_scale_mode", "=", "spatial_scale_mode", "\n", "self", ".", "spectral_pos_encoding", "=", "spectral_pos_encoding", "\n", "self", ".", "ffc3d", "=", "ffc3d", "\n", "self", ".", "fft_norm", "=", "fft_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FourierUnit.forward": [[119, 166], ["torch.interpolate.size", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.fft.rfftn", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.view", "torch.cat.view", "torch.cat.view", "ffc.FourierUnit.conv_layer", "ffc.FourierUnit.relu", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.complex", "torch.complex", "torch.complex", "torch.complex", "torch.complex", "torch.complex", "torch.complex", "torch.complex", "torch.complex", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.fft.irfftn", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "[].expand().to", "[].expand().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ffc.FourierUnit.bn", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.size", "torch.cat.size", "torch.cat.size", "[].expand", "[].expand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "spatial_scale_factor", "is", "not", "None", ":", "\n", "            ", "orig_size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "spatial_scale_factor", ",", "mode", "=", "self", ".", "spatial_scale_mode", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "r_size", "=", "x", ".", "size", "(", ")", "\n", "# (batch, c, h, w/2+1, 2)", "\n", "fft_dim", "=", "(", "-", "3", ",", "-", "2", ",", "-", "1", ")", "if", "self", ".", "ffc3d", "else", "(", "-", "2", ",", "-", "1", ")", "\n", "ffted", "=", "torch", ".", "fft", ".", "rfftn", "(", "x", ",", "dim", "=", "fft_dim", ",", "norm", "=", "self", ".", "fft_norm", ")", "\n", "ffted", "=", "torch", ".", "stack", "(", "(", "ffted", ".", "real", ",", "ffted", ".", "imag", ")", ",", "dim", "=", "-", "1", ")", "\n", "clamp", "=", "False", "\n", "remove", "=", "False", "\n", "if", "clamp", ":", "\n", "            ", "ffted", "=", "torch", ".", "clamp", "(", "ffted", ",", "min", "=", "-", "10", ",", "max", "=", "10", ")", "\n", "", "if", "remove", ":", "\n", "            ", "fftedmin10", "=", "torch", ".", "clamp", "(", "ffted", ",", "min", "=", "10", ")", "\n", "fftedmax10", "=", "torch", ".", "clamp", "(", "ffted", ",", "max", "=", "-", "10", ")", "\n", "ffted", "=", "torch", ".", "where", "(", "ffted", ">", "0", ",", "fftedmax10", ",", "fftedmin10", ")", "\n", "\n", "", "ffted", "=", "ffted", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "# (batch, c, 2, h, w/2+1)", "\n", "ffted", "=", "ffted", ".", "view", "(", "(", "batch", ",", "-", "1", ",", ")", "+", "ffted", ".", "size", "(", ")", "[", "3", ":", "]", ")", "\n", "\n", "if", "self", ".", "spectral_pos_encoding", ":", "\n", "            ", "height", ",", "width", "=", "ffted", ".", "shape", "[", "-", "2", ":", "]", "\n", "coords_vert", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "height", ")", "[", "None", ",", "None", ",", ":", ",", "None", "]", ".", "expand", "(", "batch", ",", "1", ",", "height", ",", "width", ")", ".", "to", "(", "ffted", ")", "\n", "coords_hor", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "width", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", ".", "expand", "(", "batch", ",", "1", ",", "height", ",", "width", ")", ".", "to", "(", "ffted", ")", "\n", "ffted", "=", "torch", ".", "cat", "(", "(", "coords_vert", ",", "coords_hor", ",", "ffted", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#if self.use_se:", "\n", "#    ffted = self.se(ffted)", "\n", "\n", "", "ffted", "=", "self", ".", "conv_layer", "(", "ffted", ")", "# (batch, c*2, h, w/2+1)", "\n", "ffted", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "ffted", ")", ")", "\n", "\n", "ffted", "=", "ffted", ".", "view", "(", "(", "batch", ",", "-", "1", ",", "2", ",", ")", "+", "ffted", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "permute", "(", "\n", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "# (batch,c, t, h, w/2+1, 2)", "\n", "ffted", "=", "torch", ".", "complex", "(", "ffted", "[", "...", ",", "0", "]", ",", "ffted", "[", "...", ",", "1", "]", ")", "\n", "\n", "ifft_shape_slice", "=", "x", ".", "shape", "[", "-", "3", ":", "]", "if", "self", ".", "ffc3d", "else", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "output", "=", "torch", ".", "fft", ".", "irfftn", "(", "ffted", ",", "s", "=", "ifft_shape_slice", ",", "dim", "=", "fft_dim", ",", "norm", "=", "self", ".", "fft_norm", ")", "\n", "\n", "if", "self", ".", "spatial_scale_factor", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "interpolate", "(", "output", ",", "size", "=", "orig_size", ",", "mode", "=", "self", ".", "spatial_scale_mode", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.SpectralTransform.__init__": [[170, 193], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ffc.FourierUnit", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ffc.FourierUnit"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "enable_lfu", "=", "True", ",", "**", "fu_kwargs", ")", ":", "\n", "# bn_layer not used", "\n", "        ", "super", "(", "SpectralTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enable_lfu", "=", "enable_lfu", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "stride", "=", "stride", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "//", "\n", "2", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "fu", "=", "FourierUnit", "(", "\n", "out_channels", "//", "2", ",", "out_channels", "//", "2", ",", "groups", ",", "**", "fu_kwargs", ")", "\n", "if", "self", ".", "enable_lfu", ":", "\n", "            ", "self", ".", "lfu", "=", "FourierUnit", "(", "\n", "out_channels", "//", "2", ",", "out_channels", "//", "2", ",", "groups", ")", "\n", "", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "out_channels", "//", "2", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.SpectralTransform.forward": [[194, 216], ["ffc.SpectralTransform.downsample", "ffc.SpectralTransform.conv1", "ffc.SpectralTransform.fu", "ffc.SpectralTransform.conv2", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "ffc.SpectralTransform.lfu", "xs.repeat().contiguous.repeat().contiguous.repeat().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xs.repeat().contiguous.repeat().contiguous.repeat", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output", "=", "self", ".", "fu", "(", "x", ")", "\n", "\n", "if", "self", ".", "enable_lfu", ":", "\n", "            ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "split_no", "=", "2", "\n", "split_s", "=", "h", "//", "split_no", "\n", "xs", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "\n", "x", "[", ":", ",", ":", "c", "//", "4", "]", ",", "split_s", ",", "dim", "=", "-", "2", ")", ",", "dim", "=", "1", ")", ".", "contiguous", "(", ")", "\n", "xs", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "xs", ",", "split_s", ",", "dim", "=", "-", "1", ")", ",", "\n", "dim", "=", "1", ")", ".", "contiguous", "(", ")", "\n", "xs", "=", "self", ".", "lfu", "(", "xs", ")", "\n", "xs", "=", "xs", ".", "repeat", "(", "1", ",", "1", ",", "split_no", ",", "split_no", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "xs", "=", "0", "\n", "\n", "", "output", "=", "self", ".", "conv2", "(", "x", "+", "output", "+", "xs", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFC.__init__": [[220, 256], ["torch.Module.__init__", "int", "int", "module", "module", "module", "module", "module"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "ratio_gin", ",", "ratio_gout", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "enable_lfu", "=", "True", ",", "\n", "padding_type", "=", "'reflect'", ",", "gated", "=", "False", ",", "**", "spectral_kwargs", ")", ":", "\n", "        ", "super", "(", "FFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "\"Stride should be 1 or 2.\"", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "in_cg", "=", "int", "(", "in_channels", "*", "ratio_gin", ")", "\n", "in_cl", "=", "in_channels", "-", "in_cg", "\n", "out_cg", "=", "int", "(", "out_channels", "*", "ratio_gout", ")", "\n", "out_cl", "=", "out_channels", "-", "out_cg", "\n", "#groups_g = 1 if groups == 1 else int(groups * ratio_gout)", "\n", "#groups_l = 1 if groups == 1 else groups - groups_g", "\n", "\n", "self", ".", "ratio_gin", "=", "ratio_gin", "\n", "self", ".", "ratio_gout", "=", "ratio_gout", "\n", "self", ".", "global_in_num", "=", "in_cg", "\n", "\n", "module", "=", "nn", ".", "Identity", "if", "in_cl", "==", "0", "or", "out_cl", "==", "0", "else", "nn", ".", "Conv2d", "\n", "self", ".", "convl2l", "=", "module", "(", "in_cl", ",", "out_cl", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "padding_mode", "=", "padding_type", ")", "\n", "module", "=", "nn", ".", "Identity", "if", "in_cl", "==", "0", "or", "out_cg", "==", "0", "else", "nn", ".", "Conv2d", "\n", "self", ".", "convl2g", "=", "module", "(", "in_cl", ",", "out_cg", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "padding_mode", "=", "padding_type", ")", "\n", "module", "=", "nn", ".", "Identity", "if", "in_cg", "==", "0", "or", "out_cl", "==", "0", "else", "nn", ".", "Conv2d", "\n", "self", ".", "convg2l", "=", "module", "(", "in_cg", ",", "out_cl", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "padding_mode", "=", "padding_type", ")", "\n", "module", "=", "nn", ".", "Identity", "if", "in_cg", "==", "0", "or", "out_cg", "==", "0", "else", "SpectralTransform", "\n", "self", ".", "convg2g", "=", "module", "(", "\n", "in_cg", ",", "out_cg", ",", "stride", ",", "1", "if", "groups", "==", "1", "else", "groups", "//", "2", ",", "enable_lfu", ",", "**", "spectral_kwargs", ")", "\n", "\n", "self", ".", "gated", "=", "gated", "\n", "module", "=", "nn", ".", "Identity", "if", "in_cg", "==", "0", "or", "out_cl", "==", "0", "or", "not", "self", ".", "gated", "else", "nn", ".", "Conv2d", "\n", "self", ".", "gate", "=", "module", "(", "in_channels", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFC.forward": [[257, 281], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.chunk", "torch.sigmoid.chunk", "torch.sigmoid.chunk", "type", "total_input_parts.append", "ffc.FFC.gate", "ffc.FFC.convl2l", "ffc.FFC.convg2g", "ffc.FFC.convl2l", "ffc.FFC.convl2g", "ffc.FFC.convg2l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_l", ",", "x_g", "=", "x", "if", "type", "(", "x", ")", "is", "tuple", "else", "(", "x", ",", "0", ")", "\n", "out_xl", ",", "out_xg", "=", "0", ",", "0", "\n", "\n", "if", "self", ".", "gated", ":", "\n", "            ", "total_input_parts", "=", "[", "x_l", "]", "\n", "if", "torch", ".", "is_tensor", "(", "x_g", ")", ":", "\n", "                ", "total_input_parts", ".", "append", "(", "x_g", ")", "\n", "", "total_input", "=", "torch", ".", "cat", "(", "total_input_parts", ",", "dim", "=", "1", ")", "\n", "\n", "gates", "=", "torch", ".", "sigmoid", "(", "self", ".", "gate", "(", "total_input", ")", ")", "\n", "g2l_gate", ",", "l2g_gate", "=", "gates", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "g2l_gate", ",", "l2g_gate", "=", "1", ",", "1", "\n", "\n", "", "if", "self", ".", "ratio_gout", "!=", "1", ":", "\n", "            ", "if", "g2l_gate", "==", "0", ":", "\n", "                ", "out_xl", "=", "self", ".", "convl2l", "(", "x_l", ")", "#+ self.convg2l(x_g) * g2l_gate", "\n", "", "else", ":", "\n", "                ", "out_xl", "=", "self", ".", "convl2l", "(", "x_l", ")", "+", "self", ".", "convg2l", "(", "x_g", ")", "*", "g2l_gate", "\n", "", "", "if", "self", ".", "ratio_gout", "!=", "0", ":", "\n", "            ", "out_xg", "=", "self", ".", "convl2g", "(", "x_l", ")", "*", "l2g_gate", "+", "self", ".", "convg2g", "(", "x_g", ")", "\n", "\n", "", "return", "out_xl", ",", "out_xg", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFC_BN_ACT.__init__": [[285, 305], ["torch.Module.__init__", "ffc.FFC", "int", "lnorm", "gnorm", "lact", "gact"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "ratio_gin", ",", "ratio_gout", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "activation_layer", "=", "nn", ".", "Identity", ",", "\n", "padding_type", "=", "'reflect'", ",", "\n", "enable_lfu", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FFC_BN_ACT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ffc", "=", "FFC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "ratio_gin", ",", "ratio_gout", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", ",", "bias", ",", "enable_lfu", ",", "padding_type", "=", "padding_type", ",", "**", "kwargs", ")", "\n", "lnorm", "=", "nn", ".", "Identity", "if", "ratio_gout", "==", "1", "else", "norm_layer", "\n", "gnorm", "=", "nn", ".", "Identity", "if", "ratio_gout", "==", "0", "else", "norm_layer", "\n", "global_channels", "=", "int", "(", "out_channels", "*", "ratio_gout", ")", "\n", "self", ".", "bn_l", "=", "lnorm", "(", "out_channels", "-", "global_channels", ")", "\n", "self", ".", "bn_g", "=", "gnorm", "(", "global_channels", ")", "\n", "\n", "lact", "=", "nn", ".", "Identity", "if", "ratio_gout", "==", "1", "else", "activation_layer", "\n", "gact", "=", "nn", ".", "Identity", "if", "ratio_gout", "==", "0", "else", "activation_layer", "\n", "self", ".", "act_l", "=", "lact", "(", "inplace", "=", "True", ")", "\n", "self", ".", "act_g", "=", "gact", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFC_BN_ACT.forward": [[306, 311], ["ffc.FFC_BN_ACT.ffc", "ffc.FFC_BN_ACT.act_l", "ffc.FFC_BN_ACT.act_g", "ffc.FFC_BN_ACT.bn_l", "ffc.FFC_BN_ACT.bn_g"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_l", ",", "x_g", "=", "self", ".", "ffc", "(", "x", ")", "\n", "x_l", "=", "self", ".", "act_l", "(", "self", ".", "bn_l", "(", "x_l", ")", ")", "\n", "x_g", "=", "self", ".", "act_g", "(", "self", ".", "bn_g", "(", "x_g", ")", ")", "\n", "return", "x_l", ",", "x_g", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFCResnetBlock.__init__": [[314, 331], ["torch.Module.__init__", "ffc.FFC_BN_ACT", "ffc.FFC_BN_ACT", "ffc.LearnableSpatialTransformWrapper", "ffc.LearnableSpatialTransformWrapper"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation_layer", "=", "nn", ".", "ReLU", ",", "dilation", "=", "1", ",", "\n", "spatial_transform_kwargs", "=", "None", ",", "inline", "=", "False", ",", "**", "conv_kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "FFC_BN_ACT", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "activation_layer", "=", "activation_layer", ",", "\n", "padding_type", "=", "padding_type", ",", "\n", "**", "conv_kwargs", ")", "\n", "self", ".", "conv2", "=", "FFC_BN_ACT", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "activation_layer", "=", "activation_layer", ",", "\n", "padding_type", "=", "padding_type", ",", "\n", "**", "conv_kwargs", ")", "\n", "if", "spatial_transform_kwargs", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv1", "=", "LearnableSpatialTransformWrapper", "(", "self", ".", "conv1", ",", "**", "spatial_transform_kwargs", ")", "\n", "self", ".", "conv2", "=", "LearnableSpatialTransformWrapper", "(", "self", ".", "conv2", ",", "**", "spatial_transform_kwargs", ")", "\n", "", "self", ".", "inline", "=", "inline", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFCResnetBlock.forward": [[332, 348], ["ffc.FFCResnetBlock.conv1", "ffc.FFCResnetBlock.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "inline", ":", "\n", "            ", "x_l", ",", "x_g", "=", "x", "[", ":", ",", ":", "-", "self", ".", "conv1", ".", "ffc", ".", "global_in_num", "]", ",", "x", "[", ":", ",", "-", "self", ".", "conv1", ".", "ffc", ".", "global_in_num", ":", "]", "\n", "", "else", ":", "\n", "            ", "x_l", ",", "x_g", "=", "x", "if", "type", "(", "x", ")", "is", "tuple", "else", "(", "x", ",", "0", ")", "\n", "\n", "", "id_l", ",", "id_g", "=", "x_l", ",", "x_g", "\n", "\n", "x_l", ",", "x_g", "=", "self", ".", "conv1", "(", "(", "x_l", ",", "x_g", ")", ")", "\n", "x_l", ",", "x_g", "=", "self", ".", "conv2", "(", "(", "x_l", ",", "x_g", ")", ")", "\n", "\n", "x_l", ",", "x_g", "=", "id_l", "+", "x_l", ",", "id_g", "+", "x_g", "\n", "out", "=", "x_l", ",", "x_g", "\n", "if", "self", ".", "inline", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.ConcatTupleLayer.forward": [[351, 358], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "tuple", ")", "\n", "x_l", ",", "x_g", "=", "x", "\n", "assert", "torch", ".", "is_tensor", "(", "x_l", ")", "or", "torch", ".", "is_tensor", "(", "x_g", ")", "\n", "if", "not", "torch", ".", "is_tensor", "(", "x_g", ")", ":", "\n", "            ", "return", "x_l", "\n", "", "return", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFCResNetGenerator.__init__": [[361, 420], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "ffc.FFC_BN_ACT", "ffc.FFCResnetBlock", "ffc.ConcatTupleLayer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.append", "dict", "resnet_conv_kwargs.get", "ffc.FFC_BN_ACT", "ffc.LearnableSpatialTransformWrapper", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "up_norm_layer", "ffc.FFCResnetBlock", "ffc.get_activation", "min", "min", "min", "min", "min", "int", "int"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__", "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ",", "activation_layer", "=", "nn", ".", "ReLU", ",", "\n", "up_norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "up_activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "init_conv_kwargs", "=", "{", "}", ",", "downsample_conv_kwargs", "=", "{", "}", ",", "resnet_conv_kwargs", "=", "{", "}", ",", "\n", "spatial_transform_layers", "=", "None", ",", "spatial_transform_kwargs", "=", "{", "}", ",", "\n", "add_out_act", "=", "True", ",", "max_features", "=", "1024", ",", "out_ffc", "=", "False", ",", "out_ffc_kwargs", "=", "{", "}", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "FFC_BN_ACT", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "norm_layer", "=", "norm_layer", ",", "\n", "activation_layer", "=", "activation_layer", ",", "**", "init_conv_kwargs", ")", "]", "\n", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "if", "i", "==", "n_downsampling", "-", "1", ":", "\n", "                ", "cur_conv_kwargs", "=", "dict", "(", "downsample_conv_kwargs", ")", "\n", "cur_conv_kwargs", "[", "'ratio_gout'", "]", "=", "resnet_conv_kwargs", ".", "get", "(", "'ratio_gin'", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "cur_conv_kwargs", "=", "downsample_conv_kwargs", "\n", "", "model", "+=", "[", "FFC_BN_ACT", "(", "min", "(", "max_features", ",", "ngf", "*", "mult", ")", ",", "\n", "min", "(", "max_features", ",", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "activation_layer", "=", "activation_layer", ",", "\n", "**", "cur_conv_kwargs", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "feats_num_bottleneck", "=", "min", "(", "max_features", ",", "ngf", "*", "mult", ")", "\n", "\n", "### resnet blocks", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "cur_resblock", "=", "FFCResnetBlock", "(", "feats_num_bottleneck", ",", "padding_type", "=", "padding_type", ",", "activation_layer", "=", "activation_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "**", "resnet_conv_kwargs", ")", "\n", "if", "spatial_transform_layers", "is", "not", "None", "and", "i", "in", "spatial_transform_layers", ":", "\n", "                ", "cur_resblock", "=", "LearnableSpatialTransformWrapper", "(", "cur_resblock", ",", "**", "spatial_transform_kwargs", ")", "\n", "", "model", "+=", "[", "cur_resblock", "]", "\n", "\n", "", "model", "+=", "[", "ConcatTupleLayer", "(", ")", "]", "\n", "\n", "### upsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "min", "(", "max_features", ",", "ngf", "*", "mult", ")", ",", "\n", "min", "(", "max_features", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "up_norm_layer", "(", "min", "(", "max_features", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ")", ",", "\n", "up_activation", "]", "\n", "\n", "", "if", "out_ffc", ":", "\n", "            ", "model", "+=", "[", "FFCResnetBlock", "(", "ngf", ",", "padding_type", "=", "padding_type", ",", "activation_layer", "=", "activation_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "inline", "=", "True", ",", "**", "out_ffc_kwargs", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "if", "add_out_act", ":", "\n", "            ", "model", ".", "append", "(", "get_activation", "(", "'tanh'", "if", "add_out_act", "is", "True", "else", "add_out_act", ")", ")", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.FFCResNetGenerator.forward": [[421, 423], ["ffc.FFCResNetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.ffc.get_activation": [[12, 20], ["ValueError", "torch.Tanh", "torch.Sigmoid", "torch.Identity"], "function", ["None"], ["def", "get_activation", "(", "kind", "=", "'tanh'", ")", ":", "\n", "    ", "if", "kind", "==", "'tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "if", "kind", "==", "'sigmoid'", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "if", "kind", "is", "False", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", "\n", "", "raise", "ValueError", "(", "f'Unknown activation kind {kind}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.DataPreprocessor.__init__": [[151, 197], ["super().__init__", "os.path.abspath", "len", "set", "set", "os.scandir", "scipy.loadmat", "numpy.load().item", "octprocessing.get_valid_img_seg_reimpl", "len", "octprocessing.get_unlabelled_bscans", "torch.Tensor", "len", "os.path.join", "e.is_file", "torch.Tensor", "torch.Tensor", "preprocessing.slicing", "len", "preprocessing.slicing", "os.path.isdir", "os.makedirs", "preprocessing.DataPreprocessor.ft_mat[].lstrip", "numpy.load", "preprocessing.slicing", "e.name.split"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__", "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_img_seg_reimpl", "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_unlabelled_bscans", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing"], ["def", "__init__", "(", "self", ",", "data_path", ",", "dest_path", ",", "slicing", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "list", "]", ",", "is_mat", "=", "False", ",", "labelled_dataset", "=", "True", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "ft_mat", "=", "{", "True", ":", "\".mat\"", ",", "False", ":", "\".npy\"", "}", "\n", "self", ".", "labelled_dataset", "=", "labelled_dataset", "\n", "self", ".", "img_files", "=", "[", "os", ".", "path", ".", "abspath", "(", "e", ".", "path", ")", "for", "e", "in", "os", ".", "scandir", "(", "data_path", ")", "if", "e", ".", "is_file", "(", ")", "\n", "and", "self", ".", "ft_mat", "[", "is_mat", "]", ".", "lstrip", "(", "\".\"", ")", "==", "e", ".", "name", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "]", "\n", "assert", "len", "(", "self", ".", "img_files", ")", ">", "0", ",", "f\"no such {self.ft_mat[is_mat]} file types found in {data_path}\"", "\n", "self", ".", "dest_path", "=", "dest_path", "\n", "assert", "data_path", "!=", "dest_path", ",", "\"Please provide a dest_path different from data_path\"", "\n", "self", ".", "slicing", "=", "slicing", "\n", "self", ".", "is_mat", "=", "is_mat", "\n", "self", ".", "img_slice_nums", "=", "{", "}", "\n", "#determine samples_per_file", "\n", "for", "f", "in", "self", ".", "img_files", ":", "\n", "            ", "if", "is_mat", ":", "\n", "                ", "obj", "=", "sio", ".", "loadmat", "(", "f", ")", "\n", "", "else", ":", "\n", "                ", "obj", "=", "np", ".", "load", "(", "f", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "# setting num slices and checks for labelled and unlabelled dataset", "\n", "", "if", "labelled_dataset", ":", "\n", "                ", "img", ",", "mask", "=", "get_valid_img_seg_reimpl", "(", "obj", ")", "\n", "img", ",", "mask", "=", "torch", ".", "Tensor", "(", "img", ")", ",", "torch", ".", "Tensor", "(", "mask", ")", "\n", "\n", "self", ".", "img_slice_nums", "[", "f", "]", "=", "len", "(", "slicing", "(", "img", ")", ")", "\n", "assert", "self", ".", "img_slice_nums", "[", "f", "]", "==", "len", "(", "slicing", "(", "mask", ")", ")", ",", "f\"num slices of image: {f}\"", "+", "\"  must equal the num slices of corresponding mask\"", "\n", "", "else", ":", "\n", "                ", "img", "=", "get_unlabelled_bscans", "(", "obj", ")", "\n", "img", "=", "torch", ".", "Tensor", "(", "img", ")", "\n", "self", ".", "img_slice_nums", "[", "f", "]", "=", "len", "(", "slicing", "(", "img", ")", ")", "\n", "#labels", "\n", "", "", "if", "labelled_dataset", ":", "\n", "            ", "self", ".", "labels", "=", "set", "(", "[", "\"images\"", ",", "\"masks\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "set", "(", "[", "\"images\"", "]", ")", "\n", "#create paths", "\n", "", "splits", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "for", "lbl", "in", "self", ".", "labels", ":", "\n", "            ", "for", "sp", "in", "splits", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dest_path", ",", "sp", ",", "lbl", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.DataPreprocessor.preprocess": [[198, 245], ["print", "range", "len", "print", "int", "print", "tqdm.tqdm.tqdm", "print", "tqdm.tqdm.tqdm", "scipy.loadmat", "numpy.load().item", "octprocessing.get_valid_img_seg_reimpl", "octprocessing.get_unlabelled_bscans", "torch.Tensor", "obj.keys", "range", "[].split", "torch.Tensor", "torch.Tensor", "preprocessing.DataPreprocessor.slicing", "os.path.join", "numpy.save", "len", "print", "numpy.load", "os.path.join", "preprocessing.DataPreprocessor.img_files[].replace", "preprocessing.pad_to_max_num", "os.path.basename", "[].split", "preprocessing.DataPreprocessor.img_files[].split"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_img_seg_reimpl", "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_unlabelled_bscans", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.pad_to_max_num"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Starting preprocessing:\"", ")", "\n", "for", "img_num", "in", "range", "(", "len", "(", "self", ".", "img_files", ")", ")", ":", "\n", "            ", "print", "(", "f\"pre-processing img {img_num +1}/{len(self.img_files)}:{self.img_files[img_num]}\"", ")", "\n", "split_path", "=", "\"\"", "\n", "subject_num", "=", "int", "(", "self", ".", "img_files", "[", "img_num", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "if", "subject_num", "<", "7", ":", "\n", "                ", "split_path", "=", "\"train\"", "\n", "", "elif", "subject_num", "==", "7", "or", "subject_num", "==", "8", ":", "\n", "                ", "split_path", "=", "\"val\"", "\n", "", "elif", "subject_num", "==", "9", "or", "subject_num", "==", "10", ":", "\n", "                ", "split_path", "=", "\"test\"", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"wrong subject number\"", ")", "\n", "assert", "False", "\n", "\n", "", "if", "self", ".", "is_mat", ":", "\n", "                ", "scan_obj", "=", "sio", ".", "loadmat", "(", "self", ".", "img_files", "[", "img_num", "]", ")", "\n", "", "else", ":", "\n", "                ", "scan_obj", "=", "np", ".", "load", "(", "self", ".", "img_files", "[", "img_num", "]", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "# extract labelled or unlabelled bscans", "\n", "", "if", "self", ".", "labelled_dataset", ":", "\n", "                ", "img", ",", "mask", "=", "get_valid_img_seg_reimpl", "(", "scan_obj", ")", "\n", "img", ",", "mask", "=", "torch", ".", "Tensor", "(", "img", ")", ",", "torch", ".", "Tensor", "(", "mask", ")", "\n", "obj", "=", "{", "\"images\"", ":", "img", ",", "\"masks\"", ":", "mask", "}", "\n", "", "else", ":", "\n", "                ", "img", "=", "get_unlabelled_bscans", "(", "scan_obj", ")", "\n", "img", "=", "torch", ".", "Tensor", "(", "img", ")", "\n", "obj", "=", "{", "\"images\"", ":", "img", "}", "\n", "\n", "", "slices", "=", "{", "}", "\n", "# convert and slice images and masks", "\n", "print", "(", "\">>> slicing\"", ")", "\n", "for", "k", "in", "tqdm", "(", "obj", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "k", "in", "self", ".", "labels", ":", "\n", "                    ", "slices", "[", "k", "]", "=", "self", ".", "slicing", "(", "obj", "[", "k", "]", ")", "\n", "# rearrange into img slice, mask slice tuples and  add slices to buffer", "\n", "", "", "print", "(", "\">>> saving\"", ")", "\n", "total_slices", "=", "self", ".", "img_slice_nums", "[", "self", ".", "img_files", "[", "img_num", "]", "]", "\n", "for", "slice_num", "in", "tqdm", "(", "range", "(", "total_slices", ")", ")", ":", "\n", "                ", "for", "k", "in", "self", ".", "labels", ":", "\n", "                    ", "sample", "=", "slices", "[", "k", "]", "[", "slice_num", "]", "\n", "#print(sample.shape)", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dest_path", ",", "split_path", ",", "k", ")", "\n", "fname", "=", "f\"{self.img_files[img_num].replace(self.ft_mat[self.is_mat], '')}_{pad_to_max_num(slice_num, total_slices)}.npy\"", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ",", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.DataPreprocessorUMN.__init__": [[271, 305], ["scipy.loadmat", "range", "set", "super().__init__", "len", "torch.Tensor", "torch.Tensor", "preprocessing.slicing", "len", "os.path.join", "str", "preprocessing.slicing", "os.path.isdir", "os.makedirs", "str"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing"], ["def", "__init__", "(", "self", ",", "data_path", ",", "dest_path", ",", "slicing", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "list", "]", ",", "is_mat", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "ft_mat", "=", "True", "\n", "self", ".", "labelled_dataset", "=", "True", "\n", "self", ".", "dataset", "=", "sio", ".", "loadmat", "(", "data_path", ")", "\n", "self", ".", "images", "=", "self", ".", "dataset", "[", "'AllSubjects'", "]", "[", "0", "]", "[", ":", "29", "]", "\n", "self", ".", "masks", "=", "self", ".", "dataset", "[", "'ManualFluid1'", "]", "[", "0", "]", "\n", "\n", "self", ".", "dest_path", "=", "dest_path", "\n", "assert", "data_path", "!=", "dest_path", ",", "\"Please provide a dest_path different from data_path\"", "\n", "\n", "self", ".", "slicing", "=", "slicing", "\n", "self", ".", "is_mat", "=", "is_mat", "\n", "self", ".", "img_slice_nums", "=", "{", "}", "\n", "# determine samples_per_file", "\n", "for", "i", "in", "range", "(", "29", ")", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "images", "[", "i", "]", ",", "self", ".", "masks", "[", "i", "]", "\n", "img", ",", "mask", "=", "torch", ".", "Tensor", "(", "img", ")", ",", "torch", ".", "Tensor", "(", "mask", ")", "\n", "\n", "self", ".", "img_slice_nums", "[", "str", "(", "i", ")", "]", "=", "len", "(", "slicing", "(", "img", ")", ")", "\n", "assert", "self", ".", "img_slice_nums", "[", "str", "(", "i", ")", "]", "==", "len", "(", "slicing", "(", "mask", ")", ")", ",", "f\"num slices of image: {f}\"", "+", "\"  must equal the num slices of corresponding mask\"", "\n", "\n", "# labels", "\n", "", "self", ".", "labels", "=", "set", "(", "[", "\"images\"", ",", "\"masks\"", "]", ")", "\n", "# create paths", "\n", "splits", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "for", "lbl", "in", "self", ".", "labels", ":", "\n", "            ", "for", "sp", "in", "splits", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dest_path", ",", "sp", ",", "lbl", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.DataPreprocessorUMN.preprocess": [[306, 344], ["print", "range", "len", "print", "print", "tqdm.tqdm.tqdm", "print", "tqdm.tqdm.tqdm", "torch.Tensor", "torch.Tensor", "obj.keys", "range", "preprocessing.DataPreprocessorUMN.slicing", "str", "os.path.join", "numpy.save", "len", "print", "os.path.join", "str", "preprocessing.pad_to_max_num", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.pad_to_max_num"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Starting preprocessing:\"", ")", "\n", "for", "img_num", "in", "range", "(", "len", "(", "self", ".", "images", ")", ")", ":", "\n", "            ", "print", "(", "f\"pre-processing img {img_num + 1}/{len(self.images)}\"", ")", "\n", "split_path", "=", "\"\"", "\n", "subject_num", "=", "img_num", "\n", "if", "subject_num", "<", "19", ":", "\n", "                ", "split_path", "=", "\"train\"", "\n", "", "elif", "subject_num", ">=", "19", "and", "subject_num", "<", "24", ":", "\n", "                ", "split_path", "=", "\"val\"", "\n", "", "elif", "subject_num", ">=", "24", ":", "\n", "                ", "split_path", "=", "\"test\"", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"wrong subject number\"", ")", "\n", "assert", "False", "\n", "\n", "", "img", ",", "mask", "=", "self", ".", "images", "[", "img_num", "]", ",", "self", ".", "masks", "[", "img_num", "]", "\n", "# extract labelled or unlabelled bscans", "\n", "\n", "img", ",", "mask", "=", "torch", ".", "Tensor", "(", "img", ")", ",", "torch", ".", "Tensor", "(", "mask", ")", "\n", "obj", "=", "{", "\"images\"", ":", "img", ",", "\"masks\"", ":", "mask", "}", "\n", "\n", "slices", "=", "{", "}", "\n", "# convert and slice images and masks", "\n", "print", "(", "\">>> slicing\"", ")", "\n", "for", "k", "in", "tqdm", "(", "obj", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "k", "in", "self", ".", "labels", ":", "\n", "                    ", "slices", "[", "k", "]", "=", "self", ".", "slicing", "(", "obj", "[", "k", "]", ")", "\n", "# rearrange into img slice, mask slice tuples and  add slices to buffer", "\n", "", "", "print", "(", "\">>> saving\"", ")", "\n", "total_slices", "=", "self", ".", "img_slice_nums", "[", "str", "(", "img_num", ")", "]", "\n", "for", "slice_num", "in", "tqdm", "(", "range", "(", "total_slices", ")", ")", ":", "\n", "                ", "for", "k", "in", "self", ".", "labels", ":", "\n", "                    ", "sample", "=", "slices", "[", "k", "]", "[", "slice_num", "]", "\n", "# print(sample.shape)", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dest_path", ",", "split_path", ",", "k", ")", "\n", "fname", "=", "f\"{str(img_num)}_{pad_to_max_num(slice_num, total_slices)}.npy\"", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ",", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.plot_label": [[29, 33], ["numpy.load().item", "matplotlib.imshow", "matplotlib.show", "numpy.load"], "function", ["None"], ["def", "plot_label", "(", "path", ",", "label", ")", ":", "\n", "    ", "x", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "plt", ".", "imshow", "(", "x", "[", "label", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.plot_img": [[35, 37], ["preprocessing.plot_label"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.plot_label"], ["", "def", "plot_img", "(", "path", ")", ":", "\n", "    ", "plot_label", "(", "path", ",", "\"images\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.plot_full_img": [[39, 49], ["numpy.load().item", "matplotlib.subplots", "octprocessing.get_valid_img_seg_reimpl", "axes[].imshow", "axes[].set_title", "axes[].imshow", "axes[].set_title", "matplotlib.show", "numpy.load"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_img_seg_reimpl"], ["", "def", "plot_full_img", "(", "path", ",", "b_scan_idx", "=", "0", ")", ":", "\n", "    ", "x", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "2", ")", "\n", "img", ",", "mask", "=", "get_valid_img_seg_reimpl", "(", "x", ")", "\n", "\n", "axes", "[", "0", "]", ".", "imshow", "(", "mask", "[", ":", ",", ":", ",", "b_scan_idx", "]", ",", "cmap", "=", "plt", ".", "cm", ".", "jet", ",", "vmax", "=", "9", ")", "\n", "axes", "[", "0", "]", ".", "set_title", "(", "\"mask\"", ")", "\n", "axes", "[", "1", "]", ".", "imshow", "(", "img", "[", ":", ",", ":", ",", "b_scan_idx", "]", ")", "\n", "axes", "[", "1", "]", ".", "set_title", "(", "\"image\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.plot_sliced_img": [[51, 60], ["matplotlib.subplots", "numpy.load", "numpy.load", "axes[].imshow", "axes[].set_title", "axes[].imshow", "axes[].set_title", "matplotlib.show", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "plot_sliced_img", "(", "dataset_path", ",", "sample_file_name", ")", ":", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "2", ")", "\n", "img", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"images\"", ")", ",", "sample_file_name", ")", ")", "\n", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"masks\"", ")", ",", "sample_file_name", ")", ")", "\n", "axes", "[", "0", "]", ".", "imshow", "(", "mask", ",", "cmap", "=", "plt", ".", "cm", ".", "jet", ",", "vmax", "=", "9", ")", "\n", "axes", "[", "0", "]", ".", "set_title", "(", "\"mask\"", ")", "\n", "axes", "[", "1", "]", ".", "imshow", "(", "img", ")", "\n", "axes", "[", "1", "]", ".", "set_title", "(", "\"image\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.test_slicing": [[62, 74], ["numpy.load().item", "octprocessing.get_valid_img_seg_reimpl", "torch.Tensor", "preprocessing.slicing", "range", "sum", "range", "numpy.load", "torch.all"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_img_seg_reimpl", "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing"], ["", "def", "test_slicing", "(", "path", ")", ":", "\n", "    ", "obj", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "x", ",", "_", "=", "get_valid_img_seg_reimpl", "(", "obj", ")", "\n", "x", "=", "torch", ".", "Tensor", "(", "x", ")", "\n", "slices", "=", "slicing", "(", "x", ")", "\n", "col_num", "=", "x", ".", "shape", "[", "1", "]", "//", "12", "\n", "for", "b", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "for", "col", "in", "range", "(", "col_num", ")", ":", "\n", "            ", "assert", "torch", ".", "all", "(", "x", "[", ":", ",", "col", "*", "12", ":", "(", "col", "+", "1", ")", "*", "12", ",", "b", "]", "==", "slices", "[", "b", "*", "col_num", "+", "col", "]", ")", ",", "f\"slice {col} in image {b} is off\"", "\n", "", "", "sum_scans", "=", "sum", "(", "[", "e", ".", "shape", "[", "1", "]", "for", "e", "in", "slices", "]", ")", "\n", "assert", "x", ".", "shape", "[", "1", "]", "//", "12", "*", "12", "*", "x", ".", "shape", "[", "2", "]", "==", "sum_scans", ",", "f\"The number of a scans in samples {sum_scans} and the number of a\"", "+", "f\" scans in complete file floored to col_width (# ascans per sample) {x.shape[1] // 12 * 12 * x.shape[2]} differ\"", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.pad_to_max_num": [[76, 83], ["int", "str", "numpy.ceil", "len", "numpy.log10", "range"], "function", ["None"], ["", "def", "pad_to_max_num", "(", "i", ":", "int", ",", "mx", ":", "int", ")", ":", "# base 10", "\n", "    ", "length", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log10", "(", "mx", ")", ")", ")", "\n", "s", "=", "str", "(", "i", ")", "\n", "zeros", "=", "length", "-", "len", "(", "s", ")", "\n", "if", "zeros", ">", "0", ":", "\n", "        ", "s", "=", "\"\"", ".", "join", "(", "[", "*", "[", "\"0\"", "for", "i", "in", "range", "(", "zeros", ")", "]", ",", "s", "]", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slice_to_bscans": [[85, 100], ["range", "images.append"], "function", ["None"], ["", "def", "slice_to_bscans", "(", "x", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    input x (Duke): (H x W x B) (496, 768,61), B = 61 ~ 61 B-scans (HxW grayscale)\n    input x (UMN): (H x W x B) (496, 1024,25), B = 25 ~ 25 B-scans (HxW grayscale)\n     - note that dims given are dims of images yet the generated masks only have 11 B scans as rest not labelled\n        and the # of a scans labelled per patient differs - leading to differing width   \n    -> list of B slices H x W \n    \"\"\"", "\n", "#  'images', 'automaticFluidDME', 'manualFluid1', 'manualFluid2' torch.Size([496, 768, 61])", "\n", "#  'automaticLayersDME', 'automaticLayersNormal', 'manualLayers1', 'manualLayers2', torch.Size([8, 768, 61])", "\n", "images", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "images", ".", "append", "(", "x", "[", ":", ",", ":", ",", "i", "]", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.preprocessing.slicing": [[102, 126], ["range", "images.append", "range", "samples.append"], "function", ["None"], ["", "def", "slicing", "(", "x", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    input x: (H x W x B) (496,, 768,61), B = 61 ~ 61 B-scans (HxW grayscale)\n    input x (UMN): (H x W x B) (496, 1024,25), B = 25 ~ 25 B-scans (HxW grayscale)\n     - note that dims given are dims of images yet the generated masks only have 11 B scans as rest not labelled \n        and the # of a scans labelled per patient differs - leading to differing width   \n    -> list of slices\n    (i) slicing H x W x B into B separate H x W tensors ii) slice along H dimension to create columns)   \n    \"\"\"", "\n", "#  'images', 'automaticFluidDME', 'manualFluid1', 'manualFluid2' torch.Size([496, 768, 61])", "\n", "#  'automaticLayersDME', 'automaticLayersNormal', 'manualLayers1', 'manualLayers2', torch.Size([8, 768, 61])", "\n", "images", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "images", ".", "append", "(", "x", "[", ":", ",", ":", ",", "i", "]", ")", "\n", "# 768 = 2**8 * 3  - for column-width=3* 2**i  i= 0..8 evenly divisible ", "\n", "# note the number of a scans differ by file as preprocessing of the mask is restricted as the A scan", "\n", "#     (column) range of labelling differs between images", "\n", "", "col_width", "=", "12", "# # a scans per sample", "\n", "samples", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "        ", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "1", "]", "//", "col_width", ")", ":", "\n", "            ", "samples", ".", "append", "(", "img", "[", ":", ",", "i", "*", "col_width", ":", "(", "i", "+", "1", ")", "*", "col_width", "]", ")", "\n", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_idx": [[21, 32], ["range", "numpy.sum", "idx.append"], "function", ["None"], ["def", "get_valid_idx", "(", "manualLayer", ")", ":", "\n", "    ", "\"\"\"\n    get idx taken from \n    'https://www.kaggle.com/gmonge/data-convert-and-preprocessing'\n    \"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "61", ")", ":", "\n", "        ", "temp", "=", "manualLayer", "[", ":", ",", ":", ",", "i", "]", "\n", "if", "np", ".", "sum", "(", "temp", ")", "!=", "0", ":", "\n", "            ", "idx", ".", "append", "(", "i", ")", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_unlabelled_idx": [[34, 45], ["range", "numpy.sum", "idx.append"], "function", ["None"], ["", "def", "get_unlabelled_idx", "(", "manualLayer", ")", ":", "\n", "    ", "\"\"\"\n    adapted from \n    'https://www.kaggle.com/gmonge/data-convert-and-preprocessing'\n    \"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "61", ")", ":", "\n", "        ", "temp", "=", "manualLayer", "[", ":", ",", ":", ",", "i", "]", "\n", "if", "np", ".", "sum", "(", "temp", ")", "==", "0", ":", "\n", "            ", "idx", ".", "append", "(", "i", ")", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_img_seg": [[47, 119], ["numpy.array", "numpy.array", "numpy.array", "octprocessing.get_valid_idx", "numpy.zeros", "range", "range", "max", "min", "cur_col.tolist", "enumerate", "numpy.sum", "zip", "print"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_idx"], ["", "def", "get_valid_img_seg", "(", "mat", ")", ":", "\n", "    ", "\"\"\"\n    data preparation taken from (slightly modfified: fluid_class const added + img dims reduced)\n    'https://www.kaggle.com/gmonge/data-convert-and-preprocessing'\n    \n    breaks for Subject_04.mat\n    \"\"\"", "\n", "fluid_class", "=", "9", "\n", "\n", "manualLayer", "=", "np", ".", "array", "(", "mat", "[", "'manualLayers1'", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "manualFluid", "=", "np", ".", "array", "(", "mat", "[", "'manualFluid1'", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "img", "=", "np", ".", "array", "(", "mat", "[", "'images'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "valid_idx", "=", "get_valid_idx", "(", "manualLayer", ")", "\n", "\n", "\n", "manualFluid", "=", "manualFluid", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "manualLayer", "=", "manualLayer", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "\n", "seg", "=", "np", ".", "zeros", "(", "(", "496", ",", "768", ",", "11", ")", ")", "\n", "seg", "[", "manualFluid", ">", "0", "]", "=", "fluid_class", "\n", "\n", "max_col", "=", "-", "100", "\n", "min_col", "=", "900", "\n", "for", "b_scan_idx", "in", "range", "(", "0", ",", "11", ")", ":", "\n", "        ", "for", "col", "in", "range", "(", "768", ")", ":", "\n", "            ", "cur_col", "=", "manualLayer", "[", ":", ",", "col", ",", "b_scan_idx", "]", "\n", "if", "np", ".", "sum", "(", "cur_col", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "max_col", "=", "max", "(", "max_col", ",", "col", ")", "\n", "min_col", "=", "min", "(", "min_col", ",", "col", ")", "\n", "\n", "labels_idx", "=", "cur_col", ".", "tolist", "(", ")", "\n", "last_st", "=", "None", "\n", "last_ed", "=", "None", "\n", "for", "label", ",", "(", "st", ",", "ed", ")", "in", "enumerate", "(", "zip", "(", "[", "0", "]", "+", "labels_idx", ",", "labels_idx", "+", "[", "-", "1", "]", ")", ")", ":", "\n", "\n", "                ", "if", "st", "==", "0", "and", "ed", "==", "0", ":", "\n", "                    ", "st", "=", "last_ed", "\n", "print", "(", "\"val\"", ",", "seg", "[", "st", ",", "col", ",", "b_scan_idx", "]", ")", "\n", "while", "(", "seg", "[", "st", ",", "col", ",", "b_scan_idx", "]", "==", "fluid_class", ")", ":", "\n", "                        ", "st", "+=", "1", "\n", "\n", "", "while", "(", "seg", "[", "st", ",", "col", ",", "b_scan_idx", "]", "!=", "fluid_class", ")", ":", "\n", "                        ", "seg", "[", "st", ",", "col", ",", "b_scan_idx", "]", "=", "label", "\n", "st", "+=", "1", "\n", "if", "st", ">=", "496", ":", "\n", "                            ", "break", "\n", "", "", "continue", "\n", "", "if", "ed", "==", "0", ":", "\n", "                    ", "ed", "=", "st", "+", "1", "\n", "while", "(", "seg", "[", "ed", ",", "col", ",", "b_scan_idx", "]", "!=", "fluid_class", ")", ":", "\n", "                        ", "ed", "+=", "1", "\n", "\n", "", "", "if", "st", "==", "0", "and", "label", "!=", "0", ":", "\n", "                    ", "st", "=", "ed", "-", "1", "\n", "while", "(", "seg", "[", "st", ",", "col", ",", "b_scan_idx", "]", "!=", "fluid_class", ")", ":", "\n", "                        ", "st", "-=", "1", "\n", "", "st", "+=", "1", "\n", "\n", "", "seg", "[", "st", ":", "ed", ",", "col", ",", "b_scan_idx", "]", "=", "label", "\n", "last_st", "=", "st", "\n", "last_ed", "=", "ed", "\n", "\n", "", "", "", "seg", "[", "manualFluid", ">", "0", "]", "=", "fluid_class", "\n", "\n", "seg", "=", "seg", "[", ":", ",", "min_col", ":", "max_col", "+", "1", "]", "\n", "img", "=", "img", "[", ":", ",", "min_col", ":", "max_col", "+", "1", "]", "\n", "\n", "# only return images with corresponding masks", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "return", "img", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_img_seg_reimpl": [[122, 159], ["numpy.array", "numpy.array", "numpy.array", "octprocessing.get_valid_idx", "numpy.zeros_like", "range", "numpy.where", "range", "enumerate", "enumerate", "numpy.sum", "zip"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_valid_idx"], ["", "def", "get_valid_img_seg_reimpl", "(", "scan_obj", ")", ":", "\n", "    ", "fluid_class", "=", "9", "\n", "\n", "manualLayer", "=", "np", ".", "array", "(", "scan_obj", "[", "'manualLayers1'", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "manualFluid", "=", "np", ".", "array", "(", "scan_obj", "[", "'manualFluid1'", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "img", "=", "np", ".", "array", "(", "scan_obj", "[", "'images'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "valid_idx", "=", "get_valid_idx", "(", "manualLayer", ")", "\n", "\n", "manualFluid", "=", "manualFluid", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "manualLayer", "=", "manualLayer", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "\n", "seg", "=", "np", ".", "zeros_like", "(", "manualFluid", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "bsc", "in", "range", "(", "seg", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "for", "asc", "in", "range", "(", "seg", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "class_idx", "=", "manualLayer", "[", ":", ",", "asc", ",", "bsc", "]", "# idx range of class i [class_idx[i-1], class_idx[i])", "\n", "\n", "# sometimes they use 0 idx mistakenly for empty classes ", "\n", "# ie instead of [..,123,123,150,..] -> class i has 0 innstances they use [..,123,0,150,..]", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "class_idx", ")", ":", "\n", "                ", "if", "i", ">", "0", "and", "class_idx", "[", "i", "]", "<", "class_idx", "[", "i", "-", "1", "]", ":", "\n", "                    ", "class_idx", "[", "i", "]", "=", "class_idx", "[", "i", "-", "1", "]", "\n", "\n", "\n", "", "", "for", "label", ",", "(", "idx_prev", ",", "idx_cur", ")", "in", "enumerate", "(", "zip", "(", "[", "0", ",", "*", "class_idx", "]", ",", "[", "*", "class_idx", ",", "seg", ".", "shape", "[", "0", "]", "]", ")", ")", ":", "\n", "                ", "seg", "[", "idx_prev", ":", "idx_cur", ",", "asc", ",", "bsc", "]", "=", "label", "\n", "\n", "", "", "", "seg", "[", "manualFluid", ">", "0", "]", "=", "fluid_class", "\n", "\n", "a_scan_used", ",", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "manualLayer", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "!=", "0", ")", "\n", "seg", "=", "seg", "[", ":", ",", "a_scan_used", "[", "0", "]", ":", "a_scan_used", "[", "-", "1", "]", "+", "1", "]", "\n", "img", "=", "img", "[", ":", ",", "a_scan_used", "[", "0", "]", ":", "a_scan_used", "[", "-", "1", "]", "+", "1", "]", "\n", "\n", "# only return images with corresponding masks", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "\n", "return", "img", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_unlabelled_bscans": [[161, 167], ["numpy.array", "numpy.array", "octprocessing.get_unlabelled_idx"], "function", ["home.repos.pwc.inspect_result.azadef_ynet.None.octprocessing.get_unlabelled_idx"], ["", "def", "get_unlabelled_bscans", "(", "scan_obj", ")", ":", "\n", "    ", "manualLayer", "=", "np", ".", "array", "(", "scan_obj", "[", "'manualLayers1'", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "img", "=", "np", ".", "array", "(", "scan_obj", "[", "'images'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "valid_idx", "=", "get_unlabelled_idx", "(", "manualLayer", ")", "\n", "return", "img", "[", ":", ",", ":", ",", "valid_idx", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.azadef_ynet.None.utils.label_img_to_rgb": [[37, 50], ["numpy.squeeze", "numpy.unique", "numpy.array().transpose", "np.array().transpose.astype", "numpy.array"], "function", ["None"], ["def", "label_img_to_rgb", "(", "label_img", ")", ":", "\n", "    ", "label_img", "=", "np", ".", "squeeze", "(", "label_img", ")", "\n", "labels", "=", "np", ".", "unique", "(", "label_img", ")", "\n", "label_infos", "=", "[", "l", "for", "l", "in", "SEG_LABELS_LIST", "if", "l", "[", "'id'", "]", "in", "labels", "]", "\n", "\n", "label_img_rgb", "=", "np", ".", "array", "(", "[", "label_img", ",", "\n", "label_img", ",", "\n", "label_img", "]", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "for", "l", "in", "label_infos", ":", "\n", "        ", "mask", "=", "label_img", "==", "l", "[", "'id'", "]", "\n", "label_img_rgb", "[", "mask", "]", "=", "l", "[", "'rgb_values'", "]", "\n", "\n", "", "return", "label_img_rgb", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.utils.plot_mult": [[52, 64], ["len", "matplotlib.subplots", "enumerate", "axs.flatten", "ax.axis", "matplotlib.sca", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.show", "str"], "function", ["None"], ["", "def", "plot_mult", "(", "labels", ",", "names", ",", "save", "=", "False", ",", "idx", "=", "0", ")", ":", "\n", "    ", "n_c", "=", "len", "(", "labels", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "n_c", ",", "figsize", "=", "(", "n_c", "*", "4", ",", "4", ")", ")", "\n", "for", "i", ",", "ax", "in", "enumerate", "(", "axs", ".", "flatten", "(", ")", ")", ":", "\n", "        ", "ax", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "sca", "(", "ax", ")", "\n", "plt", ".", "imshow", "(", "labels", "[", "i", "]", ")", "\n", "#plt.title(names[i])", "\n", "", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "\"./figs/\"", "+", "str", "(", "idx", ")", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.utils.mIOU": [[66, 89], ["torch.softmax", "torch.argmax().squeeze", "torch.argmax().squeeze", "list", "list", "pred.view.view", "label.view.view", "range", "numpy.mean", "list.append", "torch.argmax", "torch.argmax", "target_inds.long().sum().item", "float", "pred_inds[].long().sum().item", "list.append", "float", "float", "target_inds.long().sum", "pred_inds[].long().sum", "pred_inds.long().sum().item", "target_inds.long().sum().item", "target_inds.long", "pred_inds[].long", "pred_inds.long().sum", "target_inds.long().sum", "pred_inds.long", "target_inds.long"], "function", ["None"], ["", "", "def", "mIOU", "(", "label", ",", "pred", ",", "num_classes", "=", "9", ")", ":", "\n", "    ", "pred", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "iou_list", "=", "list", "(", ")", "\n", "present_iou_list", "=", "list", "(", ")", "\n", "\n", "pred", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ")", "\n", "# Note: Following for loop goes from 0 to (num_classes-1)", "\n", "# and ignore_index is num_classes, thus ignore_index is", "\n", "# not considered in computation of IoU.", "\n", "for", "sem_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "pred_inds", "=", "(", "pred", "==", "sem_class", ")", "\n", "target_inds", "=", "(", "label", "==", "sem_class", ")", "\n", "if", "target_inds", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "iou_now", "=", "float", "(", "'nan'", ")", "\n", "", "else", ":", "\n", "            ", "intersection_now", "=", "(", "pred_inds", "[", "target_inds", "]", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "union_now", "=", "pred_inds", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "target_inds", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "-", "intersection_now", "\n", "iou_now", "=", "float", "(", "intersection_now", ")", "/", "float", "(", "union_now", ")", "\n", "present_iou_list", ".", "append", "(", "iou_now", ")", "\n", "", "iou_list", ".", "append", "(", "iou_now", ")", "\n", "", "return", "np", ".", "mean", "(", "present_iou_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.utils.per_class_dice": [[91, 106], ["y_pred.data.squeeze.data.squeeze", "y_true.data.squeeze.data.squeeze", "numpy.zeros", "range", "y_true[].view", "y_pred[].view", "y_true[].view.sum", "y_pred[].view.sum"], "function", ["None"], ["", "def", "per_class_dice", "(", "y_pred", ",", "y_true", ",", "num_class", ")", ":", "\n", "    ", "avg_dice", "=", "0", "\n", "y_pred", "=", "y_pred", ".", "data", ".", "squeeze", "(", ")", "#.cpu().numpy()", "\n", "y_true", "=", "y_true", ".", "data", ".", "squeeze", "(", ")", "#.cpu().numpy()", "\n", "dice_all", "=", "np", ".", "zeros", "(", "num_class", ")", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "GT", "=", "y_true", "[", ":", ",", ":", ",", "i", "]", ".", "view", "(", "-", "1", ")", "\n", "Pred", "=", "y_pred", "[", ":", ",", ":", ",", "i", "]", ".", "view", "(", "-", "1", ")", "\n", "#print(GT.shape, Pred.shape)", "\n", "inter", "=", "(", "GT", "*", "Pred", ")", ".", "sum", "(", ")", "+", "0.0001", "\n", "union", "=", "GT", ".", "sum", "(", ")", "+", "Pred", ".", "sum", "(", ")", "+", "0.0001", "\n", "t", "=", "2", "*", "inter", "/", "union", "\n", "avg_dice", "=", "avg_dice", "+", "(", "t", "/", "num_class", ")", "\n", "dice_all", "[", "i", "]", "=", "t", "\n", "", "return", "avg_dice", ",", "dice_all", "\n", "", ""]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.__init__": [[39, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["def", "__init__", "(", "self", ",", "loss_weight", "=", "1.0", ",", "alpha", "=", "1.0", ",", "patch_factor", "=", "1", ",", "ave_spectrum", "=", "False", ",", "log_matrix", "=", "False", ",", "batch_matrix", "=", "False", ")", ":", "\n", "        ", "super", "(", "FocalFrequencyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "patch_factor", "=", "patch_factor", "\n", "self", ".", "ave_spectrum", "=", "ave_spectrum", "\n", "self", ".", "log_matrix", "=", "log_matrix", "\n", "self", ".", "batch_matrix", "=", "batch_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.tensor2freq": [[48, 68], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.fft.fft2", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "patch_list.append"], "methods", ["None"], ["", "def", "tensor2freq", "(", "self", ",", "x", ")", ":", "\n", "# crop image patches", "\n", "        ", "patch_factor", "=", "self", ".", "patch_factor", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "assert", "h", "%", "patch_factor", "==", "0", "and", "w", "%", "patch_factor", "==", "0", ",", "(", "\n", "'Patch factor should be divisible by image height and width'", ")", "\n", "patch_list", "=", "[", "]", "\n", "patch_h", "=", "h", "//", "patch_factor", "\n", "patch_w", "=", "w", "//", "patch_factor", "\n", "for", "i", "in", "range", "(", "patch_factor", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "patch_factor", ")", ":", "\n", "                ", "patch_list", ".", "append", "(", "x", "[", ":", ",", ":", ",", "i", "*", "patch_h", ":", "(", "i", "+", "1", ")", "*", "patch_h", ",", "j", "*", "patch_w", ":", "(", "j", "+", "1", ")", "*", "patch_w", "]", ")", "\n", "\n", "# stack to patch tensor", "\n", "", "", "y", "=", "torch", ".", "stack", "(", "patch_list", ",", "1", ")", "\n", "\n", "# perform 2D DFT (real-to-complex, orthonormalization)", "\n", "freq", "=", "torch", ".", "fft", ".", "fft2", "(", "y", ",", "norm", "=", "'ortho'", ")", "\n", "freq", "=", "torch", ".", "stack", "(", "[", "freq", ".", "real", ",", "freq", ".", "imag", "]", ",", "-", "1", ")", "\n", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.loss_formulation": [[69, 104], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "matrix.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.log.clone().detach", "torch.log.clone().detach", "torch.log.clone().detach", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log.clone().detach.min().item", "torch.log.clone().detach.max().item", "torch.log.clone().detach.min().item", "torch.log.clone().detach.max().item", "torch.log.max", "torch.log.max", "torch.log.max", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.log.clone", "torch.log.clone", "torch.log.clone", "torch.log.clone().detach.min", "torch.log.clone().detach.max", "torch.log.clone().detach.min", "torch.log.clone().detach.max", "torch.log.max().values.max", "torch.log.max().values.max", "torch.log.max().values.max", "torch.log.max", "torch.log.max", "torch.log.max"], "methods", ["None"], ["", "def", "loss_formulation", "(", "self", ",", "recon_freq", ",", "real_freq", ",", "matrix", "=", "None", ")", ":", "\n", "# spectrum weight matrix", "\n", "        ", "if", "matrix", "is", "not", "None", ":", "\n", "# if the matrix is predefined", "\n", "            ", "weight_matrix", "=", "matrix", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "# if the matrix is calculated online: continuous, dynamic, based on current Euclidean distance", "\n", "            ", "matrix_tmp", "=", "(", "recon_freq", "-", "real_freq", ")", "**", "2", "\n", "matrix_tmp", "=", "torch", ".", "sqrt", "(", "matrix_tmp", "[", "...", ",", "0", "]", "+", "matrix_tmp", "[", "...", ",", "1", "]", ")", "**", "self", ".", "alpha", "\n", "\n", "# whether to adjust the spectrum weight matrix by logarithm", "\n", "if", "self", ".", "log_matrix", ":", "\n", "                ", "matrix_tmp", "=", "torch", ".", "log", "(", "matrix_tmp", "+", "1.0", ")", "\n", "\n", "# whether to calculate the spectrum weight matrix using batch-based statistics", "\n", "", "if", "self", ".", "batch_matrix", ":", "\n", "                ", "matrix_tmp", "=", "matrix_tmp", "/", "matrix_tmp", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "                ", "matrix_tmp", "=", "matrix_tmp", "/", "matrix_tmp", ".", "max", "(", "-", "1", ")", ".", "values", ".", "max", "(", "-", "1", ")", ".", "values", "[", ":", ",", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "matrix_tmp", "[", "torch", ".", "isnan", "(", "matrix_tmp", ")", "]", "=", "0.0", "\n", "matrix_tmp", "=", "torch", ".", "clamp", "(", "matrix_tmp", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "weight_matrix", "=", "matrix_tmp", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "assert", "weight_matrix", ".", "min", "(", ")", ".", "item", "(", ")", ">=", "0", "and", "weight_matrix", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "1", ",", "(", "\n", "'The values of spectrum weight matrix should be in the range [0, 1], '", "\n", "'but got Min: %.10f Max: %.10f'", "%", "(", "weight_matrix", ".", "min", "(", ")", ".", "item", "(", ")", ",", "weight_matrix", ".", "max", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "# frequency distance using (squared) Euclidean distance", "\n", "tmp", "=", "(", "recon_freq", "-", "real_freq", ")", "**", "2", "\n", "freq_distance", "=", "tmp", "[", "...", ",", "0", "]", "+", "tmp", "[", "...", ",", "1", "]", "\n", "\n", "# dynamic spectrum weighting (Hadamard product)", "\n", "loss", "=", "weight_matrix", "*", "freq_distance", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.forward": [[105, 123], ["losses.FocalFrequencyLoss.tensor2freq", "losses.FocalFrequencyLoss.tensor2freq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "losses.FocalFrequencyLoss.loss_formulation"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.tensor2freq", "home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.tensor2freq", "home.repos.pwc.inspect_result.azadef_ynet.None.losses.FocalFrequencyLoss.loss_formulation"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "matrix", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function to calculate focal frequency loss.\n        Args:\n            pred (torch.Tensor): of shape (N, C, H, W). Predicted tensor.\n            target (torch.Tensor): of shape (N, C, H, W). Target tensor.\n            matrix (torch.Tensor, optional): Element-wise spectrum weight matrix.\n                Default: None (If set to None: calculated online, dynamic).\n        \"\"\"", "\n", "pred_freq", "=", "self", ".", "tensor2freq", "(", "pred", ")", "\n", "target_freq", "=", "self", ".", "tensor2freq", "(", "target", ")", "\n", "\n", "# whether to use minibatch average spectrum", "\n", "if", "self", ".", "ave_spectrum", ":", "\n", "            ", "pred_freq", "=", "torch", ".", "mean", "(", "pred_freq", ",", "0", ",", "keepdim", "=", "True", ")", "\n", "target_freq", "=", "torch", ".", "mean", "(", "target_freq", ",", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "# calculate focal frequency loss", "\n", "", "return", "self", ".", "loss_formulation", "(", "pred_freq", ",", "target_freq", ",", "matrix", ")", "*", "self", ".", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.DiceLoss.forward": [[127, 161], ["output.exp.exp.exp", "output.exp.exp.detach", "target.clone.clone.clone", "encoded_target.scatter_", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "encoded_target.scatter_", "intersection.sum().sum().sum", "denominator.sum().sum().sum", "loss_per_channel.sum", "output.exp.exp.size", "target.clone.clone.unsqueeze", "target.clone.clone.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "intersection.sum().sum", "denominator.sum().sum", "intersection.sum", "denominator.sum"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "weights", "=", "None", ",", "ignore_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            output : NxCxHxW Variable\n            target :  NxHxW LongTensor\n            weights : C FloatTensor\n            ignore_index : int index to ignore from loss\n            \"\"\"", "\n", "eps", "=", "0.0001", "\n", "\n", "output", "=", "output", ".", "exp", "(", ")", "\n", "encoded_target", "=", "output", ".", "detach", "(", ")", "*", "0", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "            ", "mask", "=", "target", "==", "ignore_index", "\n", "target", "=", "target", ".", "clone", "(", ")", "\n", "target", "[", "mask", "]", "=", "0", "\n", "encoded_target", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "encoded_target", ")", "\n", "encoded_target", "[", "mask", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "encoded_target", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n", "", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "1", "\n", "\n", "", "intersection", "=", "output", "*", "encoded_target", "\n", "numerator", "=", "2", "*", "intersection", ".", "sum", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "denominator", "=", "output", "+", "encoded_target", "\n", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "            ", "denominator", "[", "mask", "]", "=", "0", "\n", "", "denominator", "=", "denominator", ".", "sum", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "+", "eps", "\n", "loss_per_channel", "=", "weights", "*", "(", "1", "-", "(", "numerator", "/", "denominator", ")", ")", "\n", "\n", "return", "loss_per_channel", ".", "sum", "(", ")", "/", "output", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.CrossEntropyLoss2d.__init__": [[164, 167], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nll_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", ",", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.CrossEntropyLoss2d.forward": [[168, 170], ["losses.CrossEntropyLoss2d.nll_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "nll_loss", "(", "inputs", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__": [[173, 177], ["torch.Module.__init__", "losses.CrossEntropyLoss2d", "losses.DiceLoss"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CombinedLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cross_entropy_loss", "=", "CrossEntropyLoss2d", "(", ")", "\n", "self", ".", "dice_loss", "=", "DiceLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.forward": [[178, 185], ["target.type().to.type().to.type().to", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "losses.CombinedLoss.dice_loss", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "target.type().to.type().to.type", "losses.CombinedLoss.cross_entropy_loss.forward"], "methods", ["home.repos.pwc.inspect_result.azadef_ynet.None.losses.CombinedLoss.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "1", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "        ", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", ")", "\n", "input_soft", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "y2", "=", "torch", ".", "mean", "(", "self", ".", "dice_loss", "(", "input_soft", ",", "target", ")", ")", "\n", "y1", "=", "torch", ".", "mean", "(", "torch", ".", "mul", "(", "self", ".", "cross_entropy_loss", ".", "forward", "(", "input", ",", "target", ")", ",", "weight", ")", ")", "\n", "y", "=", "y1", "+", "y2", "\n", "return", "y", "\n", "", "", ""]]}