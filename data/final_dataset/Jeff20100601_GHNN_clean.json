{"home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.Aggregator_ct.MeanAggregator.__init__": [[7, 15], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "dropout", ",", "seq_len", ",", "gcn", "=", "False", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "gcn", "=", "gcn", "\n", "if", "gcn", ":", "\n", "            ", "self", ".", "gcn_layer", "=", "nn", ".", "Linear", "(", "h_dim", ",", "h_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.Aggregator_ct.MeanAggregator.forward": [[16, 63], ["utils_ct.get_sorted_s_r_embed", "enumerate", "utils_ct.to_device", "utils_ct.to_device", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils_ct.to_device", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "utils_ct.to_device", "enumerate", "utils_ct.to_device", "enumerate", "Aggregator_ct.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "utils_ct.to_device.extend", "utils_ct.to_device.extend", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "utils_ct.to_device().view", "Aggregator_ct.MeanAggregator.gcn_layer", "torch.relu", "torch.relu", "s_len_non_zero.tolist", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils_ct.to_device", "len", "list", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "len", "utils_ct.to_device", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device"], ["", "", "def", "forward", "(", "self", ",", "s_hist", ",", "s", ",", "r", ",", "o", ",", "ent_embeds", ",", "rel_embeds", ",", "s_hist_dt", ")", ":", "\n", "\n", "        ", "s_idx", ",", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "len_s", ",", "embeds_split", ",", "s_hist_dt_sorted_truncated", "=", "get_sorted_s_r_embed", "(", "s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "s_hist_dt", ")", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "# lens stores the number of neighbors of each timestamp for all subjects", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "to_device", "(", "torch", ".", "LongTensor", "(", "rows", ")", ")", "\n", "cols", "=", "to_device", "(", "torch", ".", "LongTensor", "(", "cols", ")", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "to_device", "(", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ",", "device", "=", "idxes", ".", "device", ")", ")", ")", "\n", "#mask_tensor = to_device(mask_tensor)", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "to_device", "(", "torch", ".", "Tensor", "(", "len_s", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "gcn", ":", "\n", "            ", "embeds_mean", "=", "self", ".", "gcn_layer", "(", "embeds_mean", ")", "\n", "embeds_mean", "=", "F", ".", "relu", "(", "embeds_mean", ")", "\n", "\n", "# split embds_mean to each subjects with non_zero history", "\n", "", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "# cat aggregation, subject embedding, relation embedding together.", "\n", "s_embed_seq_tensor", "=", "to_device", "(", "\n", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "self", ".", "h_dim", "+", "2", "*", "settings", "[", "'embd_rank'", "]", ")", ")", "\n", "for", "i", ",", "embeds", "in", "enumerate", "(", "embeds_split", ")", ":", "\n", "            ", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "(", "embeds", ",", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", ",", "\n", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "s_hist_dt_seq_tensor", "=", "to_device", "(", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ")", ")", "\n", "\n", "for", "i", ",", "dts", "in", "enumerate", "(", "s_hist_dt_sorted_truncated", ")", ":", "\n", "            ", "s_hist_dt_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "dts", ")", ")", "]", "=", "to_device", "(", "\n", "torch", ".", "tensor", "(", "dts", ",", "dtype", "=", "s_hist_dt_seq_tensor", ".", "dtype", ")", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "s_packed_dt", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "s_hist_dt_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "s_packed_input", ",", "s_packed_dt", ",", "s_idx", ",", "len", "(", "s_len_non_zero", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.co-train.train": [[12, 262], ["torch.cuda.is_available", "utils_ct.get_total_number", "utils_ct.load_quadruples", "utils_ct.load_quadruples", "model_ct.GHNN", "torch.optim.Adam", "open", "open.write", "torch.load", "torch.load.eval", "utils_ct.make_batch", "torch.cat", "numpy.asarray", "numpy.asarray", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.mean", "numpy.mean", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open", "f.readlines", "open", "f.readlines", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.load.parameters", "torch.load.cuda", "datetime.datetime.now", "os.path.join", "os.path.join", "open", "open.write", "vars", "print", "open.write", "open.write", "torch.save", "print", "open.write", "open.close", "os.path.join", "os.path.join", "os.path.join", "utils_ct.to_device", "open.write", "numpy.mean", "numpy.mean", "numpy.mean", "open.write", "open.write", "open.write", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "open.write", "open.write", "torch.load.train", "time.time", "utils_ct.make_batch", "time.time", "print", "open.write", "torch.from_numpy", "torch.no_grad", "torch.load.", "mae_tp.item", "torch.cat.append", "int", "int", "datetime.datetime.now.strftime", "torch.from_numpy", "torch.load.", "error.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "error.item", "print", "open.write", "abs_error.squeeze", "str", "x.strip", "line[].split", "x.strip", "line[].split", "batch_data[].cuda", "torch.load.parameters", "str", "str", "getattr", "str", "str", "str", "str", "str", "time.time", "str", "time.time", "str"], "function", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.get_total_number", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.load_quadruples", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.load_quadruples", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.make_batch", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.co-train.train", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.make_batch"], ["def", "train", "(", "args", ")", ":", "\n", "    ", "if", "\"ICEWS\"", "in", "args", ".", "dataset", ":", "\n", "        ", "settings", "[", "'CI'", "]", "=", ".5", "\n", "settings", "[", "'time_scale'", "]", "=", "24", "\n", "tpred_a", ",", "tpred_b", ",", "tpred_c", "=", "1", ",", "3", ",", "10", "# in days", "\n", "loss_scaling_factor", "=", "1e-3", "\n", "", "elif", "\"GDELT\"", "in", "args", ".", "dataset", ":", "\n", "        ", "settings", "[", "'CI'", "]", "=", "1", "\n", "settings", "[", "'time_scale'", "]", "=", "1", "\n", "tpred_a", ",", "tpred_b", ",", "tpred_c", "=", "60", ",", "180", ",", "600", "# in minutes", "\n", "loss_scaling_factor", "=", "5e-5", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n", "", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "num_nodes", ",", "num_rels", ",", "num_t", "=", "utils", ".", "get_total_number", "(", "'./data/'", "+", "args", ".", "dataset", ",", "'stat.txt'", ")", "\n", "train_data", ",", "_", "=", "utils", ".", "load_quadruples", "(", "'./data/'", "+", "args", ".", "dataset", ",", "'train.txt'", ")", "\n", "test_data", ",", "_", "=", "utils", ".", "load_quadruples", "(", "'./data/'", "+", "args", ".", "dataset", ",", "'test.txt'", ")", "\n", "test_filtering_file_objs", "=", "'/test_subcentric_filtering_objs.txt'", "\n", "test_filtering_file_subs", "=", "'/test_objcentric_filtering_subs.txt'", "\n", "\n", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_filtering_file_objs", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "_test_subcentric_filter_objs", "=", "f", ".", "readlines", "(", ")", "\n", "test_subcentric_filter_objs", "=", "[", "[", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "line", "[", "1", ":", "-", "2", "]", ".", "split", "(", "','", ")", "]", "for", "line", "in", "\n", "_test_subcentric_filter_objs", "]", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_filtering_file_subs", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "_test_objcentric_filter_subs", "=", "f", ".", "readlines", "(", ")", "\n", "test_objcentric_filter_subs", "=", "[", "[", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "line", "[", "1", ":", "-", "2", "]", ".", "split", "(", "','", ")", "]", "for", "line", "in", "\n", "_test_objcentric_filter_subs", "]", "\n", "\n", "", "train_sub_tp", "=", "'/tpre_approach/train_history_sub_tpre.txt'", "\n", "train_ob_tp", "=", "'/tpre_approach/train_history_ob_tpre.txt'", "\n", "train_sub_dt_tp", "=", "'/tpre_approach/train_history_sub_dt_tpre.txt'", "\n", "train_ob_dt_tp", "=", "'/tpre_approach/train_history_ob_dt_tpre.txt'", "\n", "\n", "test_sub_tp", "=", "'/tpre_approach/test_history_sub_tpre.txt'", "\n", "test_ob_tp", "=", "'/tpre_approach/test_history_ob_tpre.txt'", "\n", "test_sub_dt_tp", "=", "'/tpre_approach/test_history_sub_dt_tpre.txt'", "\n", "test_ob_dt_tp", "=", "'/tpre_approach/test_history_ob_dt_tpre.txt'", "\n", "\n", "train_dur", "=", "'/tpre_approach/train_dur_last_t_tpre.txt'", "\n", "test_dur", "=", "'/tpre_approach/test_dur_last_t_tpre.txt'", "\n", "train_sub_synchro_dt", "=", "'/tpre_approach/train_sub_synchro_dt_tpre.txt'", "\n", "train_obj_synchro_dt", "=", "'/tpre_approach/train_obj_synchro_dt_tpre.txt'", "\n", "test_sub_synchro_dt", "=", "'/tpre_approach/test_sub_synchro_dt_tpre.txt'", "\n", "test_obj_synchro_dt", "=", "'/tpre_approach/test_obj_synchro_dt_tpre.txt'", "\n", "\n", "train_sub_lk", "=", "'/train_history_sub1.txt'", "\n", "train_ob_lk", "=", "'/train_history_ob1.txt'", "\n", "train_sub_dt_lk", "=", "'/train_history_sub_dt1.txt'", "\n", "train_ob_dt_lk", "=", "'/train_history_ob_dt1.txt'", "\n", "\n", "test_sub_lk", "=", "'/test_history_sub1.txt'", "\n", "test_ob_lk", "=", "'/test_history_ob1.txt'", "\n", "test_sub_dt_lk", "=", "'/test_history_sub_dt1.txt'", "\n", "test_ob_dt_lk", "=", "'/test_history_ob_dt1.txt'", "\n", "\n", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_sub_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_event_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_ob_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_event_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_sub_dt_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_dt_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_ob_dt_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_dt_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_dur", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dur_last_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_sub_synchro_dt", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "sub_synchro_dt_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_obj_synchro_dt", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "obj_synchro_dt_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_sub_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_event_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_ob_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_event_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_sub_dt_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_dt_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "train_ob_dt_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_dt_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_sub_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_test_event_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_ob_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_test_event_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_sub_dt_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_test_dt_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_ob_dt_tp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_test_dt_tp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_dur", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dur_last_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_sub_synchro_dt", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "sub_synchro_dt_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_obj_synchro_dt", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "obj_synchro_dt_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_sub_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_test_event_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_ob_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_test_event_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_sub_dt_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "s_history_test_dt_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'./data/'", "+", "args", ".", "dataset", "+", "test_ob_dt_lk", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "o_history_test_dt_lk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "model", "=", "GHNN", "(", "num_nodes", ",", "num_rels", ",", "num_t", ",", "args", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "not", "args", ".", "only_eva", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "dt_string", "=", "now", ".", "strftime", "(", "\"%d-%m-%Y,%H:%M:%S\"", ")", "+", "args", ".", "timepre_mode", "+", "args", ".", "dataset", "\n", "main_dirName", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "dt_string", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "main_dirName", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "main_dirName", ")", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "main_dirName", ",", "'models'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "\n", "", "settings", "[", "'main_dirName'", "]", "=", "main_dirName", "\n", "file_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "main_dirName", ",", "\"training_record.txt\"", ")", ",", "\"w\"", ")", "\n", "file_training", ".", "write", "(", "\"Training Configuration: \\n\"", ")", "\n", "for", "key", "in", "settings", ":", "\n", "            ", "file_training", ".", "write", "(", "key", "+", "': '", "+", "str", "(", "settings", "[", "key", "]", ")", "+", "'\\n'", ")", "\n", "", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "            ", "file_training", ".", "write", "(", "arg", "+", "': '", "+", "str", "(", "getattr", "(", "args", ",", "arg", ")", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "\"start training...\"", ")", "\n", "file_training", ".", "write", "(", "\"Training Start \\n\"", ")", "\n", "file_training", ".", "write", "(", "\"===============================\\n\"", ")", "\n", "\n", "epoch", "=", "0", "\n", "while", "True", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "                ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "_batch", "=", "0", "\n", "for", "batch_data", "in", "utils", ".", "make_batch", "(", "train_data", ",", "s_history_event_tp", ",", "\n", "s_history_event_lk", ",", "o_history_event_tp", ",", "o_history_event_lk", ",", "s_history_dt_tp", ",", "s_history_dt_lk", ",", "o_history_dt_tp", ",", "\n", "o_history_dt_lk", ",", "dur_last_data", ",", "sub_synchro_dt_data", ",", "obj_synchro_dt_data", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", "[", "0", "]", "=", "torch", ".", "from_numpy", "(", "batch_data", "[", "0", "]", ")", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "[", "0", "]", "=", "batch_data", "[", "0", "]", ".", "cuda", "(", ")", "\n", "", "cro_entr_lk", ",", "error_tp", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "batch_data", ",", "args", ".", "timepre_mode", ",", "'Training'", ")", "\n", "if", "cro_entr_lk", "is", "not", "None", "and", "error_tp", "is", "not", "None", ":", "\n", "                    ", "error", "=", "cro_entr_lk", "+", "loss_scaling_factor", "*", "error_tp", "\n", "", "elif", "cro_entr_lk", "is", "not", "None", ":", "\n", "                    ", "error", "=", "cro_entr_lk", "\n", "", "elif", "error_tp", "is", "not", "None", ":", "\n", "                    ", "error", "=", "args", ".", "error_tp", "*", "error_tp", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "error", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "error", ".", "item", "(", ")", "\n", "\n", "print", "(", "\"batch: \"", "+", "str", "(", "_batch", ")", "+", "' finished. Accumulated used time: '", "+", "str", "(", "time", ".", "time", "(", ")", "-", "t0", ")", "+", "\n", "', Error: '", "+", "str", "(", "error", ")", "+", "'\\n'", ")", "\n", "file_training", ".", "write", "(", "\n", "\"epoch: \"", "+", "str", "(", "epoch", ")", "+", "\"batch: \"", "+", "str", "(", "_batch", ")", "+", "' finished. Accumulated used time: '", "\n", "+", "str", "(", "time", ".", "time", "(", ")", "-", "t0", ")", "+", "', Error: '", "+", "str", "(", "error", ")", "+", "'\\n'", ")", "\n", "\n", "_batch", "+=", "1", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Epoch {:04d} | Error {:.4f}| time {:.4f}\"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "_batch", ",", "t3", "-", "t0", ")", ")", "\n", "file_training", ".", "write", "(", "\"Epoch {:04d} | Error {:.4f}| time {:.4f}\"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "_batch", ",", "t3", "-", "t0", ")", "+", "'\\n'", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ",", "model_path", "+", "'/'", "+", "args", ".", "dataset", "+", "'_best.pth'", ")", "\n", "print", "(", "\"training done\"", ")", "\n", "file_training", ".", "write", "(", "\"training done\"", ")", "\n", "file_training", ".", "close", "(", ")", "\n", "\n", "\n", "##### Evaluation", "\n", "", "if", "args", ".", "only_eva", ":", "\n", "        ", "main_dirName", "=", "args", ".", "eva_dir", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "main_dirName", ",", "'models'", ")", "\n", "", "if", "args", ".", "filtering", ":", "\n", "        ", "file_test_path", "=", "os", ".", "path", ".", "join", "(", "main_dirName", ",", "\"test_record_filtering.txt\"", ")", "\n", "", "else", ":", "\n", "        ", "file_test_path", "=", "os", ".", "path", ".", "join", "(", "main_dirName", ",", "\"test_record_raw.txt\"", ")", "\n", "", "file_test", "=", "open", "(", "file_test_path", ",", "\"w\"", ")", "\n", "file_test", ".", "write", "(", "\"Testing starts: \\n\"", ")", "\n", "model", "=", "torch", ".", "load", "(", "model_path", "+", "'/'", "+", "args", ".", "dataset", "+", "'_best.pth'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "mae_tp_epoch", "=", "0", "\n", "_batch", "=", "0", "\n", "abs_error_tp", "=", "[", "]", "\n", "subcent_ranks_lk", "=", "[", "]", "\n", "obcent_ranks_lk", "=", "[", "]", "\n", "for", "batch_data", "in", "utils", ".", "make_batch", "(", "test_data", ",", "s_history_test_event_tp", ",", "s_history_test_event_lk", ",", "\n", "o_history_test_event_tp", ",", "o_history_test_event_lk", ",", "s_history_test_dt_tp", ",", "\n", "s_history_test_dt_lk", ",", "\n", "o_history_test_dt_tp", ",", "o_history_test_dt_lk", ",", "dur_last_test", ",", "\n", "sub_synchro_dt_test", ",", "\n", "obj_synchro_dt_test", ",", "args", ".", "batch_size", ",", "valid1", "=", "test_subcentric_filter_objs", ",", "\n", "valid2", "=", "test_objcentric_filter_subs", ")", ":", "\n", "        ", "batch_data", "[", "0", "]", "=", "utils", ".", "to_device", "(", "torch", ".", "from_numpy", "(", "batch_data", "[", "0", "]", ")", ")", "\n", "_batch", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sub_rank", ",", "obj_rank", ",", "cro_entr_lk", ",", "error_tp", ",", "density_tp", ",", "dt_tp", ",", "mae_tp", ",", "gt_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "=", "model", "(", "batch_data", ",", "args", ".", "timepre_mode", ",", "'Test'", ")", "\n", "mae_tp_epoch", "+=", "mae_tp", ".", "item", "(", ")", "\n", "abs_error_tp", ".", "append", "(", "abs_error", ".", "squeeze", "(", ")", ")", "\n", "subcent_ranks_lk", "+=", "sub_rank", "\n", "obcent_ranks_lk", "+=", "obj_rank", "\n", "\n", "# compute Hits@k of time prediction", "\n", "", "", "abs_error_tp", "=", "torch", ".", "cat", "(", "abs_error_tp", ",", "dim", "=", "0", ")", "\n", "for", "hit", "in", "[", "tpred_a", ",", "tpred_b", ",", "tpred_c", "]", ":", "\n", "        ", "avg_count_tp", "=", "(", "abs_error_tp", "<=", "hit", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "mean", "(", ")", "\n", "file_test", ".", "write", "(", "\"Test Hits (tp) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count_tp", ")", "+", "'\\n'", ")", "\n", "\n", "# evaluation matrices of link prediction", "\n", "", "subcent_ranks_lk", "=", "np", ".", "asarray", "(", "subcent_ranks_lk", ")", "\n", "obcent_ranks_lk", "=", "np", ".", "asarray", "(", "obcent_ranks_lk", ")", "\n", "subcent_mr_lk", "=", "np", ".", "mean", "(", "subcent_ranks_lk", ")", "\n", "objcent_mr_lk", "=", "np", ".", "mean", "(", "obcent_ranks_lk", ")", "\n", "subcent_mrr_lk", "=", "np", ".", "mean", "(", "1.0", "/", "subcent_ranks_lk", ")", "\n", "objcent_mrr_lk", "=", "np", ".", "mean", "(", "1.0", "/", "obcent_ranks_lk", ")", "\n", "total_ranks_lk", "=", "np", ".", "concatenate", "(", "(", "subcent_ranks_lk", ",", "obcent_ranks_lk", ")", ")", "\n", "mr_lk", "=", "np", ".", "mean", "(", "total_ranks_lk", ")", "\n", "mrr_lk", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks_lk", ")", "\n", "\n", "file_test", ".", "write", "(", "\"sub centic test MRR (lk): {:.6f}\"", ".", "format", "(", "subcent_mrr_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"obj centic test MRR (lk): {:.6f}\"", ".", "format", "(", "objcent_mrr_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"total test MRR (lk): {:.6f}\"", ".", "format", "(", "mrr_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"sub centric test MR (lk): {:.6f}\"", ".", "format", "(", "subcent_mr_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"obj centric test MR (lk): {:.6f}\"", ".", "format", "(", "objcent_mr_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"total test MR (lk): {:.6f}\"", ".", "format", "(", "mr_lk", ")", "+", "'\\n'", ")", "\n", "if", "\"GDELT\"", "in", "args", ".", "dataset", ":", "\n", "        ", "mae_tp_epoch", "=", "mae_tp_epoch", "/", "60.0", "#converting the value from minutes to hours", "\n", "", "file_test", ".", "write", "(", "\"Test MAE: \"", "+", "str", "(", "mae_tp_epoch", "/", "_batch", ")", "+", "'\\n'", ")", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count_lk", "=", "np", ".", "mean", "(", "(", "total_ranks_lk", "<=", "hit", ")", ")", "\n", "avg_count_sub_lk", "=", "np", ".", "mean", "(", "(", "subcent_ranks_lk", "<=", "hit", ")", ")", "\n", "avg_count_obj_lk", "=", "np", ".", "mean", "(", "(", "obcent_ranks_lk", "<=", "hit", ")", ")", "\n", "\n", "file_test", ".", "write", "(", "\"Test Hits (lk) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"sub centric test Hits (lk) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count_sub_lk", ")", "+", "'\\n'", ")", "\n", "file_test", ".", "write", "(", "\"obj centric test Hits (lk) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count_obj_lk", ")", "+", "'\\n'", ")", "\n", "\n", "", "file_test", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.HawkesLSTMCell.__init__": [[8, 19], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Softplus", "torch.Softplus"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_size", ",", "args", ")", ":", "\n", "        ", "super", "(", "HawkesLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_g", "=", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "forget_g", "=", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "output_g", "=", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "input_target", "=", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "forget_target", "=", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "z_gate", "=", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "decay_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", "+", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Softplus", "(", "beta", "=", "args", ".", "softrelu_scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.HawkesLSTMCell.forward": [[20, 55], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "model_ct.HawkesLSTMCell.decay_layer", "model_ct.HawkesLSTMCell.input_g", "model_ct.HawkesLSTMCell.forget_g", "model_ct.HawkesLSTMCell.input_target", "model_ct.HawkesLSTMCell.forget_target", "model_ct.HawkesLSTMCell.output_g", "model_ct.HawkesLSTMCell.z_gate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h_t", ",", "c_t", ",", "c_target", ")", ":", "\n", "        ", "\"\"\"\n        Compute the updated LSTM paramters.\n\n        Args:s\n            x: (ent_emb, rel_emb, aggregated_emb)\n            h_t: cont. hidden state at timestamp t\n            c_t: cont. cell state at timestamp t\n            c_target: target cell state\n\n        Returns:\n            h_i: just-updated hidden state\n            h_t: hidden state just before next event\n            cell_i: just-updated cell state\n            c_t: cell state decayed to before next event\n            c_target_i: cell state target before the next event\n            output: LSTM output\n            decay_i: rate of decay for the cell state\n        \"\"\"", "\n", "v", "=", "torch", ".", "cat", "(", "(", "x", ",", "h_t", ")", ",", "dim", "=", "1", ")", "\n", "inpt", "=", "torch", ".", "sigmoid", "(", "self", ".", "input_g", "(", "v", ")", ")", "\n", "forget", "=", "torch", ".", "sigmoid", "(", "self", ".", "forget_g", "(", "v", ")", ")", "\n", "input_target", "=", "torch", ".", "sigmoid", "(", "self", ".", "input_target", "(", "v", ")", ")", "\n", "forget_target", "=", "torch", ".", "sigmoid", "(", "self", ".", "forget_target", "(", "v", ")", ")", "\n", "output", "=", "torch", ".", "sigmoid", "(", "self", ".", "output_g", "(", "v", ")", ")", "# compute output gate", "\n", "# Not-quite-c", "\n", "z_i", "=", "torch", ".", "tanh", "(", "self", ".", "z_gate", "(", "v", ")", ")", "\n", "# Compute the decay parameter", "\n", "decay", "=", "self", ".", "decay_layer", "(", "v", ")", "\n", "# Update the cell state to c(t_i+)", "\n", "c_i", "=", "forget", "*", "c_t", "+", "inpt", "*", "z_i", "\n", "# Update the cell state target", "\n", "c_target", "=", "forget_target", "*", "c_target", "+", "input_target", "*", "z_i", "\n", "\n", "return", "c_i", ",", "c_target", ",", "output", ",", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.__init__": [[57, 84], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "model_ct.HawkesLSTMCell", "model_ct.HawkesLSTMCell", "Aggregator_ct.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softplus", "torch.Softplus", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_e", ",", "num_rels", ",", "num_t", ",", "args", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "GHNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_e", "=", "num_e", "\n", "self", ".", "num_t", "=", "num_t", "\n", "self", ".", "h_dim", "=", "args", ".", "n_hidden", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "2", "*", "num_rels", ",", "args", ".", "embd_rank", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ")", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "num_e", ",", "args", ".", "embd_rank", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "HawkesLSTMCell", "(", "2", "*", "args", ".", "embd_rank", "+", "self", ".", "h_dim", ",", "self", ".", "h_dim", ",", "args", ")", "\n", "self", ".", "obj_encoder", "=", "HawkesLSTMCell", "(", "2", "*", "args", ".", "embd_rank", "+", "self", ".", "h_dim", ",", "self", ".", "h_dim", ",", "args", ")", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "self", ".", "h_dim", ",", "dropout", ",", "args", ".", "max_hist_len", ",", "gcn", "=", "False", ")", "\n", "self", ".", "aggregator_o", "=", "self", ".", "aggregator_s", "\n", "self", ".", "linear_h", "=", "nn", ".", "Linear", "(", "args", ".", "n_hidden", ",", "args", ".", "embd_rank", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear_inten_layer", "=", "nn", ".", "Linear", "(", "self", ".", "h_dim", "+", "2", "*", "args", ".", "embd_rank", ",", "args", ".", "embd_rank", ",", "bias", "=", "False", ")", "\n", "self", ".", "Softplus", "=", "nn", ".", "Softplus", "(", "beta", "=", "args", ".", "softrelu_scale", ")", "\n", "\n", "'''\n        layers for time prediction\n        '''", "\n", "self", ".", "criterion_time", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion_link", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.init_hidden": [[85, 98], ["utils_ct.to_device", "utils_ct.to_device", "utils_ct.to_device", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the hidden state and the cell state.\n        The initial cell state target is equal to the initial cell state.\n        The first dimension is the batch size.\n\n        Returns:\n            (hidden, cell_state)\n        \"\"\"", "\n", "(", "h0", ",", "c0", ",", "c_target0", ")", "=", "(", "to_device", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "h_dim", ")", ")", ",", "\n", "to_device", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "h_dim", ")", ")", ",", "\n", "to_device", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "h_dim", ")", ")", ")", "\n", "return", "h0", ",", "c0", ",", "c_target0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.forward": [[99, 210], ["utils_ct.isListEmpty", "utils_ct.isListEmpty", "model_ct.GHNN.aggregator_s", "model_ct.GHNN.aggregator_o", "model_ct.GHNN.compute_sequence_states", "model_ct.GHNN.compute_sequence_states", "utils_ct.to_device", "utils_ct.to_device", "torch.all", "torch.all", "torch.all", "torch.all", "utils_ct.to_device", "torch.all", "torch.all", "torch.all", "torch.all", "utils_ct.isListEmpty", "utils_ct.isListEmpty", "model_ct.GHNN.aggregator_s", "model_ct.GHNN.aggregator_o", "model_ct.GHNN.compute_sequence_states", "model_ct.GHNN.compute_sequence_states", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "dur_last_nonzero_tp.type.type.type", "model_ct.GHNN.compute_inten_tpre", "model_ct.GHNN.compute_inten_tpre", "model_ct.GHNN.predict_t", "ValueError", "model_ct.GHNN.predict_link", "model_ct.GHNN.predict_link", "ValueError", "model_ct.GHNN.predict_link", "model_ct.GHNN.predict_link", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.isListEmpty", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.isListEmpty", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_sequence_states", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_sequence_states", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.isListEmpty", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.isListEmpty", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_sequence_states", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_sequence_states", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_inten_tpre", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_inten_tpre", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_t", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_link", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_link", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_link", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_link"], ["", "def", "forward", "(", "self", ",", "input", ",", "mode_tp", ",", "mode_lk", ")", ":", "\n", "# extract input", "\n", "        ", "if", "mode_lk", "==", "'Training'", ":", "\n", "            ", "quadruples", ",", "s_history_event_tp", ",", "s_history_event_lk", ",", "o_history_event_tp", ",", "o_history_event_lk", ",", "s_history_dt_tp", ",", "s_history_dt_lk", ",", "o_history_dt_tp", ",", "o_history_dt_lk", ",", "dur_last_tp", ",", "sub_synchro_dt_tp", ",", "obj_synchro_dt_tp", "=", "input", "\n", "", "elif", "mode_lk", "in", "[", "'Valid'", ",", "'Test'", "]", ":", "\n", "            ", "quadruples", ",", "s_history_event_tp", ",", "s_history_event_lk", ",", "o_history_event_tp", ",", "o_history_event_lk", ",", "s_history_dt_tp", ",", "s_history_dt_lk", ",", "o_history_dt_tp", ",", "o_history_dt_lk", ",", "dur_last_tp", ",", "sub_synchro_dt_tp", ",", "obj_synchro_dt_tp", ",", "val_subcentric_fils_lk", ",", "val_objcentric_fils_lk", "=", "input", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n", "#prepare model input", "\n", "", "s", "=", "quadruples", "[", ":", ",", "0", "]", "\n", "r", "=", "quadruples", "[", ":", ",", "1", "]", "\n", "o", "=", "quadruples", "[", ":", ",", "2", "]", "\n", "\n", "#some batches don't include recurrent events.", "\n", "if", "isListEmpty", "(", "s_history_event_tp", ")", "or", "isListEmpty", "(", "o_history_event_tp", ")", ":", "\n", "            ", "error_tp", ",", "density_tp", ",", "dt_tp", ",", "mae_tp", ",", "dur_last_nonzero_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "=", "[", "None", "]", "*", "9", "\n", "", "else", ":", "\n", "# Aggregating concurrent events", "\n", "            ", "s_packed_input_tp", ",", "s_packed_dt_tp", ",", "s_idx_tp", ",", "s_nonzero_tp", "=", "self", ".", "aggregator_s", "(", "s_history_event_tp", ",", "s", ",", "r", ",", "o", ",", "self", ".", "ent_embeds", ",", "\n", "self", ".", "rel_embeds", "[", ":", "self", ".", "num_rels", "]", ",", "s_history_dt_tp", ")", "\n", "\n", "o_packed_input_tp", ",", "o_packed_dt_tp", ",", "o_idx_tp", ",", "o_nonzero_tp", "=", "self", ".", "aggregator_o", "(", "o_history_event_tp", ",", "o", ",", "r", ",", "s", ",", "self", ".", "ent_embeds", ",", "\n", "self", ".", "rel_embeds", "[", "self", ".", "num_rels", ":", "]", ",", "o_history_dt_tp", ")", "\n", "# compute hidden state", "\n", "sub_cell_tp", ",", "sub_cell_target_tp", ",", "sub_gate_output_tp", ",", "sub_decay_tp", ",", "_", "=", "self", ".", "compute_sequence_states", "(", "\n", "s_packed_input_tp", ",", "s_packed_dt_tp", ",", "self", ".", "sub_encoder", ",", "s_idx_tp", ")", "\n", "\n", "obj_cell_tp", ",", "obj_cell_target_tp", ",", "obj_gate_output_tp", ",", "obj_decay_tp", ",", "_", "=", "self", ".", "compute_sequence_states", "(", "\n", "o_packed_input_tp", ",", "o_packed_dt_tp", ",", "self", ".", "obj_encoder", ",", "o_idx_tp", ")", "\n", "\n", "#extract recurrent events", "\n", "dur_last_tp", "=", "to_device", "(", "torch", ".", "tensor", "(", "dur_last_tp", ")", ")", "\n", "dur_non_zero_idx_tp", "=", "(", "dur_last_tp", ">", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "dur_last_nonzero_tp", "=", "dur_last_tp", "[", "dur_non_zero_idx_tp", "]", "\n", "\n", "#add synchro_dt_tp to synchronize the concatenated intensity from subject centric and object centeric", "\n", "sub_synchro_dt_tp", "=", "to_device", "(", "torch", ".", "tensor", "(", "sub_synchro_dt_tp", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "sub_synchro_non_zero_idx_tp", "=", "(", "sub_synchro_dt_tp", ">=", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "sub_synchro_dt_nonzero_tp", "=", "sub_synchro_dt_tp", "[", "sub_synchro_non_zero_idx_tp", "]", "\n", "assert", "(", "torch", ".", "all", "(", "torch", ".", "eq", "(", "sub_synchro_non_zero_idx_tp", ",", "dur_non_zero_idx_tp", ")", ")", ")", "\n", "obj_synchro_dt_tp", "=", "to_device", "(", "torch", ".", "tensor", "(", "obj_synchro_dt_tp", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "obj_synchro_non_zero_idx_tp", "=", "(", "obj_synchro_dt_tp", ">=", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "obj_synchro_dt_nonzero_tp", "=", "obj_synchro_dt_tp", "[", "obj_synchro_non_zero_idx_tp", "]", "\n", "assert", "(", "torch", ".", "all", "(", "torch", ".", "eq", "(", "obj_synchro_non_zero_idx_tp", ",", "dur_non_zero_idx_tp", ")", ")", ")", "\n", "\n", "if", "mode_tp", "==", "'MSE'", ":", "\n", "                ", "dur_last_nonzero_tp", "=", "dur_last_nonzero_tp", ".", "type", "(", "torch", ".", "float", ")", "\n", "sub_inten_tp", "=", "self", ".", "compute_inten_tpre", "(", "sub_cell_tp", ",", "sub_cell_target_tp", ",", "sub_decay_tp", ",", "\n", "sub_gate_output_tp", ",", "\n", "s", ",", "o", ",", "r", ",", "dur_non_zero_idx_tp", ",", "\n", "self", ".", "rel_embeds", "[", ":", "self", ".", "num_rels", "]", ",", "sub_synchro_dt_nonzero_tp", ")", "\n", "obj_inten_tp", "=", "self", ".", "compute_inten_tpre", "(", "obj_cell_tp", ",", "obj_cell_target_tp", ",", "\n", "obj_decay_tp", ",", "\n", "obj_gate_output_tp", ",", "o", ",", "s", ",", "\n", "r", ",", "dur_non_zero_idx_tp", ",", "\n", "self", ".", "rel_embeds", "[", "self", ".", "num_rels", ":", "]", ",", "\n", "obj_synchro_dt_nonzero_tp", ")", "\n", "dt_tp", ",", "error_tp", ",", "density_tp", ",", "mae_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "=", "self", ".", "predict_t", "(", "sub_inten_tp", ",", "\n", "obj_inten_tp", ",", "\n", "dur_last_nonzero_tp", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n", "# some batches don't include (s,p) or (o,p) history events.", "\n", "", "", "if", "isListEmpty", "(", "s_history_event_lk", ")", "or", "isListEmpty", "(", "o_history_event_lk", ")", ":", "\n", "            ", "sub_rank", ",", "obj_rank", ",", "cro_entr_lk", "=", "[", "None", "]", "*", "3", "\n", "if", "mode_lk", "==", "'Training'", ":", "\n", "                ", "return", "cro_entr_lk", ",", "error_tp", ",", "density_tp", ",", "dt_tp", ",", "mae_tp", ",", "dur_last_nonzero_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "\n", "", "elif", "mode_lk", "in", "[", "'Valid'", ",", "'Test'", "]", ":", "\n", "                ", "return", "sub_rank", ",", "obj_rank", ",", "cro_entr_lk", ",", "error_tp", ",", "density_tp", ",", "dt_tp", ",", "mae_tp", ",", "dur_last_nonzero_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "", "", "else", ":", "\n", "# Aggregating concurrent events", "\n", "            ", "s_packed_input_lk", ",", "s_packed_dt_lk", ",", "s_idx_lk", ",", "s_nonzero_lk", "=", "self", ".", "aggregator_s", "(", "s_history_event_lk", ",", "s", ",", "r", ",", "o", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", "[", ":", "self", ".", "num_rels", "]", ",", "s_history_dt_lk", ")", "\n", "\n", "o_packed_input_lk", ",", "o_packed_dt_lk", ",", "o_idx_lk", ",", "o_nonzero_lk", "=", "self", ".", "aggregator_o", "(", "o_history_event_lk", ",", "o", ",", "r", ",", "s", ",", "self", ".", "ent_embeds", ",", "\n", "self", ".", "rel_embeds", "[", "self", ".", "num_rels", ":", "]", ",", "o_history_dt_lk", ")", "\n", "\n", "# compute hidden state", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "sub_hidden_lk", "=", "self", ".", "compute_sequence_states", "(", "\n", "s_packed_input_lk", ",", "s_packed_dt_lk", ",", "self", ".", "sub_encoder", ",", "s_idx_lk", ")", "\n", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "obj_hidden_lk", "=", "self", ".", "compute_sequence_states", "(", "\n", "o_packed_input_lk", ",", "o_packed_dt_lk", ",", "self", ".", "obj_encoder", ",", "o_idx_lk", ")", "\n", "\n", "#compute intensity", "\n", "if", "mode_lk", "==", "'Training'", ":", "\n", "                ", "sub_cro_entr_loss", "=", "self", ".", "predict_link", "(", "sub_hidden_lk", ",", "s", ",", "o", ",", "r", ",", "self", ".", "rel_embeds", "[", ":", "self", ".", "num_rels", "]", ",", "mode_lk", ")", "\n", "obj_cro_entr_loss", "=", "self", ".", "predict_link", "(", "obj_hidden_lk", ",", "o", ",", "s", ",", "r", ",", "self", ".", "rel_embeds", "[", "self", ".", "num_rels", ":", "]", ",", "mode_lk", ")", "\n", "cro_entr_lk", "=", "(", "sub_cro_entr_loss", "+", "obj_cro_entr_loss", ")", "/", "2", "\n", "return", "cro_entr_lk", ",", "error_tp", ",", "density_tp", ",", "dt_tp", ",", "mae_tp", ",", "dur_last_nonzero_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "\n", "", "elif", "mode_lk", "in", "[", "'Valid'", ",", "'Test'", "]", ":", "\n", "                ", "sub_cro_entr_loss", ",", "sub_rank", "=", "self", ".", "predict_link", "(", "sub_hidden_lk", ",", "s", ",", "o", ",", "r", ",", "self", ".", "rel_embeds", "[", ":", "self", ".", "num_rels", "]", ",", "mode_lk", ",", "\n", "val_fils", "=", "val_subcentric_fils_lk", ")", "\n", "obj_cro_entr_loss", ",", "obj_rank", "=", "self", ".", "predict_link", "(", "obj_hidden_lk", ",", "o", ",", "s", ",", "r", ",", "self", ".", "rel_embeds", "[", "self", ".", "num_rels", ":", "]", ",", "mode_lk", ",", "\n", "val_fils", "=", "val_objcentric_fils_lk", ")", "\n", "cro_entr_lk", "=", "(", "sub_cro_entr_loss", "+", "obj_cro_entr_loss", ")", "/", "2", "\n", "return", "sub_rank", ",", "obj_rank", ",", "cro_entr_lk", ",", "error_tp", ",", "density_tp", ",", "dt_tp", ",", "mae_tp", ",", "dur_last_nonzero_tp", ",", "den1_tp", ",", "den2_tp", ",", "tpred", ",", "abs_error", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_link": [[211, 233], ["model_ct.GHNN.linear_inten_layer", "model_ct.GHNN.Softplus", "model_ct.GHNN.criterion_link", "model_ct.GHNN.dropout", "model_ct.GHNN.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_ct.GHNN.ent_embeds.transpose", "model_ct.GHNN.gather", "range", "ValueError", "actor2.view", "len", "len", "ranks.append", "model_ct.GHNN.linear_h"], "methods", ["None"], ["", "", "", "def", "predict_link", "(", "self", ",", "hiddens_ti", ",", "actor1", ",", "actor2", ",", "r", ",", "rel_embeds", ",", "mode_lk", ",", "val_fils", "=", "None", ")", ":", "\n", "# for subject centric: actor1 is subejct and actor2 is object.", "\n", "            ", "inten_raw", "=", "self", ".", "linear_inten_layer", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "actor1", "]", ",", "self", ".", "linear_h", "(", "hiddens_ti", ")", ",", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "intens", "=", "self", ".", "Softplus", "(", "inten_raw", ".", "mm", "(", "self", ".", "ent_embeds", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", "# shape of pred_intens: num_batch*num_e", "\n", "cro_entr_loss", "=", "self", ".", "criterion_link", "(", "intens", ",", "actor2", ")", "\n", "ranks", "=", "[", "]", "\n", "if", "mode_lk", "==", "'Training'", ":", "\n", "                ", "return", "cro_entr_loss", "\n", "", "elif", "mode_lk", "in", "[", "'Valid'", ",", "'Test'", "]", ":", "\n", "                ", "ground", "=", "intens", ".", "gather", "(", "1", ",", "actor2", ".", "view", "(", "-", "1", ",", "1", ")", ")", "# clone the score of the ground truth object, shape: [n_batch, 1]", "\n", "assert", "(", "len", "(", "val_fils", ")", "==", "intens", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "val_fils", ")", ")", ":", "\n", "                    ", "if", "self", ".", "args", ".", "filtering", ":", "\n", "                        ", "intens", "[", "i", ",", ":", "]", "[", "val_fils", "[", "i", "]", "]", "=", "0", "\n", "", "intens", "[", "i", ",", "actor2", "[", "i", "]", "]", "=", "ground", "[", "i", "]", "\n", "pred_comp1", "=", "(", "intens", "[", "i", ",", ":", "]", ">", "ground", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1", "# obejcts whose score larger than ground truth", "\n", "pred_comp2", "=", "(", "(", "intens", "[", "i", ",", ":", "]", "==", "ground", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "-", "1", ")", "/", "2", "\n", "ranks", ".", "append", "(", "pred_comp1", "+", "pred_comp2", ")", "\n", "", "return", "cro_entr_loss", ",", "ranks", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_sequence_states": [[234, 301], ["len", "model_ct.GHNN.init_hidden", "len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sort_idx.sort", "packed_input.batch_sizes[].item", "encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "packed_input.batch_sizes[].item", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "cells.insert", "cell_targets.insert", "gate_outputs.insert", "decays.insert", "hiddens.insert", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "utils_ct.to_device", "utils_ct.to_device", "utils_ct.to_device", "utils_ct.to_device", "utils_ct.to_device", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.init_hidden", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device"], ["", "", "def", "compute_sequence_states", "(", "self", ",", "packed_input", ",", "packed_dt", ",", "encoder", ",", "sort_idx", ")", ":", "\n", "#### Computes the LSTM network parameters for the next interval :math:`(t_i,t_{i+1}]` from the input at time :math:`t_{i}`.", "\n", "        ", "\"\"\"\n        Args:\n          packed_dt (PackedSequence): time until next event\n              Shape: seq_len * batch\n          packed_input (PackedSequence): concatenated input sequence\n              Shape: seq_len * batch * input_size\n          h0: initial hidden state\n          c0: initial cell state\n          c_target: initial target cell state\n        \"\"\"", "\n", "truncated_size", "=", "packed_input", ".", "batch_sizes", "[", "0", "]", "\n", "iteration_size", "=", "len", "(", "sort_idx", ")", "\n", "h_0", ",", "c_0", ",", "c_target_0", "=", "self", ".", "init_hidden", "(", "truncated_size", ")", "\n", "max_seq_length", "=", "len", "(", "packed_input", ".", "batch_sizes", ")", "\n", "beg_index", "=", "0", "\n", "h_t", ",", "c_t", ",", "c_target", "=", "h_0", ",", "c_0", ",", "c_target_0", "\n", "cells", "=", "[", "]", "\n", "cell_targets", "=", "[", "]", "\n", "decays", "=", "[", "]", "\n", "gate_outputs", "=", "[", "]", "\n", "hiddens", "=", "[", "]", "#only for link prediction", "\n", "\n", "for", "i", "in", "range", "(", "max_seq_length", ")", ":", "\n", "            ", "batch_size", "=", "packed_input", ".", "batch_sizes", "[", "i", "]", ".", "item", "(", ")", "# the batch size for current step in the packed sequences.", "\n", "batch_size_next", "=", "packed_input", ".", "batch_sizes", "[", "i", "+", "1", "]", ".", "item", "(", ")", "if", "i", "+", "1", "<", "max_seq_length", "else", "0", "\n", "h_t", "=", "h_t", "[", ":", "batch_size", "]", "\n", "c_t", "=", "c_t", "[", ":", "batch_size", "]", "\n", "c_target", "=", "c_target", "[", ":", "batch_size", "]", "\n", "\n", "dt", "=", "packed_dt", ".", "data", "[", "beg_index", ":", "(", "beg_index", "+", "batch_size", ")", "]", "\n", "batch_input", "=", "packed_input", ".", "data", "[", "beg_index", ":", "(", "beg_index", "+", "batch_size", ")", "]", "\n", "\n", "# Update the hidden states and LSTM parameters following the equations", "\n", "cell_i", ",", "c_target", ",", "output", ",", "decay_i", "=", "encoder", "(", "batch_input", ",", "h_t", ",", "c_t", ",", "c_target", ")", "\n", "c_t", "=", "c_target", "+", "(", "cell_i", "-", "c_target", ")", "*", "torch", ".", "exp", "(", "-", "decay_i", "*", "dt", "[", ":", ",", "None", "]", ")", "\n", "# compute the c(t) at t -> t_{i+1}, dt[:, None] for broadcasting.", "\n", "h_t", "=", "output", "*", "torch", ".", "tanh", "(", "c_t", ")", "# decayed hidden state just before next event", "\n", "\n", "beg_index", "+=", "batch_size", "# move the starting index for the data in the PackedSequence", "\n", "if", "batch_size_next", "!=", "batch_size", ":", "#if processing number of next batch is not equal to current batch, which means some sequences are finished, we store the results of those sequences.", "\n", "                ", "cells", ".", "insert", "(", "0", ",", "cell_i", "[", "batch_size_next", ":", "batch_size", "]", ")", "\n", "cell_targets", ".", "insert", "(", "0", ",", "c_target", "[", "batch_size_next", ":", "batch_size", "]", ")", "\n", "gate_outputs", ".", "insert", "(", "0", ",", "output", "[", "batch_size_next", ":", "batch_size", "]", ")", "\n", "decays", ".", "insert", "(", "0", ",", "decay_i", "[", "batch_size_next", ":", "batch_size", "]", ")", "\n", "hiddens", ".", "insert", "(", "0", ",", "h_t", "[", "batch_size_next", ":", "batch_size", "]", ")", "\n", "", "", "cell_sorted_truncated", "=", "torch", ".", "cat", "(", "cells", ",", "dim", "=", "0", ")", "\n", "cell_target_sorted_truncated", "=", "torch", ".", "cat", "(", "cell_targets", ",", "dim", "=", "0", ")", "\n", "output_sorted_truncated", "=", "torch", ".", "cat", "(", "gate_outputs", ",", "dim", "=", "0", ")", "\n", "decay_sorted_truncated", "=", "torch", ".", "cat", "(", "decays", ",", "dim", "=", "0", ")", "\n", "hidden_t_sorted_truncated", "=", "torch", ".", "cat", "(", "hiddens", ",", "dim", "=", "0", ")", "\n", "\n", "# pad the states of events without history with zeros and resorted it.", "\n", "_", ",", "ori_idx", "=", "sort_idx", ".", "sort", "(", ")", "\n", "cell_full", "=", "torch", ".", "cat", "(", "(", "cell_sorted_truncated", ",", "to_device", "(", "torch", ".", "zeros", "(", "iteration_size", "-", "truncated_size", ",", "\n", "self", ".", "h_dim", ")", ")", ")", ",", "dim", "=", "0", ")", "[", "ori_idx", "]", "\n", "cell_target_full", "=", "torch", ".", "cat", "(", "(", "cell_target_sorted_truncated", ",", "to_device", "(", "torch", ".", "zeros", "(", "iteration_size", "-", "truncated_size", ",", "\n", "self", ".", "h_dim", ")", ")", ")", ",", "dim", "=", "0", ")", "[", "ori_idx", "]", "\n", "output_full", "=", "torch", ".", "cat", "(", "(", "output_sorted_truncated", ",", "to_device", "(", "torch", ".", "zeros", "(", "iteration_size", "-", "truncated_size", ",", "\n", "self", ".", "h_dim", ")", ")", ")", ",", "dim", "=", "0", ")", "[", "ori_idx", "]", "\n", "decay_full", "=", "torch", ".", "cat", "(", "(", "decay_sorted_truncated", ",", "to_device", "(", "torch", ".", "zeros", "(", "iteration_size", "-", "truncated_size", ",", "\n", "self", ".", "h_dim", ")", ")", ")", ",", "dim", "=", "0", ")", "[", "ori_idx", "]", "\n", "hidden_full", "=", "torch", ".", "cat", "(", "(", "hidden_t_sorted_truncated", ",", "to_device", "(", "torch", ".", "zeros", "(", "iteration_size", "-", "truncated_size", ",", "\n", "self", ".", "h_dim", ")", ")", ")", ",", "dim", "=", "0", ")", "[", "ori_idx", "]", "\n", "\n", "return", "cell_full", ",", "cell_target_full", ",", "output_full", ",", "decay_full", ",", "hidden_full", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.compute_inten_tpre": [[302, 323], ["model_ct.GHNN.linear_inten_layer", "model_ct.GHNN.ent_embeds[].repeat", "model_ct.GHNN.Softplus", "int", "utils_ct.to_device", "model_ct.GHNN.dropout", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "model_ct.GHNN.ent_embeds[].repeat", "model_ct.GHNN.linear_h", "rel_embeds[].repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device"], ["", "def", "compute_inten_tpre", "(", "self", ",", "cell", ",", "cell_target", ",", "decay", ",", "gate_output", ",", "actors", ",", "another_actors", ",", "r", ",", "non_zero_idx", ",", "\n", "rel_embeds", ",", "synchro_dt_nonzero_tp", ")", ":", "\n", "        ", "'''\n        The last history timestamp of subject centric event sequence and object centric event sequence might be same,\n        but not necessary. Therefore, to let subject centric intensity and object centric intensity have the same start\n        point for decaying, we synchronize these two intensity functions here using extra_time_to_start_timestamp.\n\n        actors: the centric actor\n        another_actor:  the second actor\n        '''", "\n", "hmax", "=", "settings", "[", "'time_horizon'", "]", "\n", "timestep", "=", "settings", "[", "'CI'", "]", "\n", "n_samples", "=", "int", "(", "hmax", "/", "timestep", ")", "+", "1", "#add 1 to accomodate zero", "\n", "dt", "=", "to_device", "(", "torch", ".", "linspace", "(", "0", ",", "hmax", ",", "n_samples", ")", ".", "repeat", "(", "non_zero_idx", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "+", "synchro_dt_nonzero_tp", "[", "None", ",", ":", "]", "#shape: [n_sample*n_batch], decay shape: n_batch*n_hidden, target shape: n_sample*n_batch*n_hidden", "\n", "cell_t", "=", "cell_target", "[", "non_zero_idx", "]", "+", "(", "cell", "[", "non_zero_idx", "]", "-", "cell_target", "[", "non_zero_idx", "]", ")", "*", "torch", ".", "exp", "(", "-", "decay", "[", "non_zero_idx", "]", "[", "None", ",", ":", ",", ":", "]", "*", "dt", "[", ":", ",", ":", ",", "None", "]", ")", "#shape: n_sample*n_batch*n_hidden", "\n", "inten_raw", "=", "self", ".", "linear_inten_layer", "(", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "actors", "[", "non_zero_idx", "]", "]", ".", "repeat", "(", "n_samples", ",", "1", ",", "1", ")", ",", "\n", "self", ".", "linear_h", "(", "gate_output", "[", "non_zero_idx", "]", "*", "torch", ".", "tanh", "(", "cell_t", ")", ")", ",", "rel_embeds", "[", "r", "[", "non_zero_idx", "]", "]", ".", "repeat", "(", "n_samples", ",", "1", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ")", ")", "#shape: n_sample*batch_size*self.args.embd_rank", "\n", "o", "=", "self", ".", "ent_embeds", "[", "another_actors", "[", "non_zero_idx", "]", "]", ".", "repeat", "(", "n_samples", ",", "1", ",", "1", ")", "#shape: n_sample*batch_size*self.args.embd_rank", "\n", "intens", "=", "self", ".", "Softplus", "(", "(", "inten_raw", "*", "o", ")", ".", "sum", "(", "dim", "=", "2", ")", ")", "#pointwise multiplication and then sum over each embd_rank is equivalent to dot product between two vector. shape: n_sample*n_batch", "\n", "return", "intens", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.model_ct.GHNN.predict_t": [[324, 342], ["utils_ct.to_device", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss.", "int", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.linspace().repeat().transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "abs_error.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "estimate_dt.detach", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device"], ["", "def", "predict_t", "(", "self", ",", "sub_inten_t", ",", "obj_inten_t", ",", "gt_t", ")", ":", "\n", "        ", "timestep", "=", "settings", "[", "'CI'", "]", "\n", "hmax", "=", "settings", "[", "'time_horizon'", "]", "\n", "n_samples", "=", "int", "(", "hmax", "/", "timestep", ")", "+", "1", "# add 1 to accomodate zero", "\n", "dt", "=", "to_device", "(", "torch", ".", "linspace", "(", "0", ",", "hmax", ",", "n_samples", ")", ".", "repeat", "(", "gt_t", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "intens", "=", "(", "sub_inten_t", "+", "obj_inten_t", ")", "/", "2", "\n", "integral_", "=", "torch", ".", "cumsum", "(", "timestep", "*", "intens", ",", "dim", "=", "0", ")", "\n", "density", "=", "(", "intens", "*", "torch", ".", "exp", "(", "-", "integral_", ")", ")", "# shape: n_samples*n_batch", "\n", "\n", "t_pit", "=", "dt", "*", "density", "\n", "# trapeze method", "\n", "estimate_dt", "=", "(", "timestep", "*", "0.5", "*", "(", "t_pit", "[", "1", ":", "]", "+", "t_pit", "[", ":", "-", "1", "]", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", "# shape: n_batch", "\n", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "error_dt", "=", "mse", "(", "estimate_dt", ",", "gt_t", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "abs_error", "=", "(", "estimate_dt", "-", "gt_t", ")", ".", "abs", "(", ")", "\n", "mae", "=", "abs_error", ".", "mean", "(", ")", "\n", "", "return", "dt", ",", "error_dt", ",", "density", ",", "mae", ",", "intens", ",", "torch", ".", "exp", "(", "-", "integral_", ")", ",", "estimate_dt", ".", "detach", "(", ")", ",", "abs_error", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.load_quadruples": [[13, 28], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "int"], "function", ["None"], ["", "", "", "def", "load_quadruples", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "int", "(", "line_split", "[", "3", "]", ")", "/", "settings", "[", "'time_scale'", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.make_batch": [[29, 41], ["range", "range", "len", "len"], "function", ["None"], ["", "def", "make_batch", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "h", ",", "j", ",", "k", ",", "l", ",", "m", ",", "n", ",", "valid1", "=", "None", ",", "valid2", "=", "None", ")", ":", "\n", "    ", "if", "valid1", "is", "None", "and", "valid2", "is", "None", ":", "\n", "# For item i in a range that is a length of l", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "                ", "yield", "[", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", ",", "\n", "f", "[", "i", ":", "i", "+", "n", "]", ",", "g", "[", "i", ":", "i", "+", "n", "]", ",", "h", "[", "i", ":", "i", "+", "n", "]", ",", "j", "[", "i", ":", "i", "+", "n", "]", ",", "k", "[", "i", ":", "i", "+", "n", "]", ",", "l", "[", "i", ":", "i", "+", "n", "]", ",", "m", "[", "i", ":", "i", "+", "n", "]", "]", "\n", "", "", "else", ":", "\n", "# For item i in a range that is a length of l", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "            ", "yield", "[", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", ",", "\n", "f", "[", "i", ":", "i", "+", "n", "]", ",", "g", "[", "i", ":", "i", "+", "n", "]", ",", "h", "[", "i", ":", "i", "+", "n", "]", ",", "j", "[", "i", ":", "i", "+", "n", "]", ",", "k", "[", "i", ":", "i", "+", "n", "]", ",", "l", "[", "i", ":", "i", "+", "n", "]", ",", "m", "[", "i", ":", "i", "+", "n", "]", ",", "\n", "valid1", "[", "i", ":", "i", "+", "n", "]", ",", "valid2", "[", "i", ":", "i", "+", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device": [[42, 47], ["torch.cuda.is_available", "tensor.cuda"], "function", ["None"], ["", "", "", "def", "to_device", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.isListEmpty": [[48, 52], ["isinstance", "all", "map"], "function", ["None"], ["", "", "def", "isListEmpty", "(", "inList", ")", ":", "\n", "    ", "if", "isinstance", "(", "inList", ",", "list", ")", ":", "\n", "        ", "return", "all", "(", "map", "(", "isListEmpty", ",", "inList", ")", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.get_sorted_s_r_embed": [[53, 77], ["utils_ct.to_device", "to_device.sort", "len", "torch.split", "torch.LongTensor", "torch.nonzero", "s_hist_sorted.append", "s_hist_dt_sorted.append", "list", "len_s.append", "utils_ct.to_device", "map", "len", "flat_s.append", "torch.LongTensor", "idx.item", "idx.item"], "function", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.to_device"], ["", "def", "get_sorted_s_r_embed", "(", "s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "s_hist_dt", ")", ":", "\n", "    ", "s_hist_len", "=", "to_device", "(", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "s_hist_dt_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", "[", ":", "num_non_zero", "]", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "s_hist_dt_sorted", ".", "append", "(", "s_hist_dt", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "for", "hist", "in", "s_hist_sorted", ":", "\n", "        ", "for", "neighs", "in", "hist", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "neighs", ")", ")", "\n", "for", "neigh", "in", "neighs", ":", "\n", "                ", "flat_s", ".", "append", "(", "neigh", ")", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n", "embeds", "=", "ent_embeds", "[", "to_device", "(", "torch", ".", "LongTensor", "(", "flat_s", ")", ")", "]", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds", ",", "len_s", ")", "\n", "return", "s_idx", ",", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds", ",", "len_s", ",", "embeds_split", ",", "s_hist_dt_sorted", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.None.utils_ct.str2bool": [[78, 86], ["v.lower.lower", "argparse.ArgumentTypeError", "str"], "function", ["None"], ["", "def", "str2bool", "(", "v", ":", "str", ")", "->", "bool", ":", "\n", "    ", "v", "=", "v", ".", "lower", "(", ")", "\n", "if", "v", "==", "\"true\"", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", "==", "\"false\"", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Boolean value expected, got\"", "+", "str", "(", "v", ")", "+", "\".\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history_tpre_appro.load_quadruples": [[4, 26], ["numpy.asarray", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append"], "function", ["None"], ["def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "", "return", "np", ".", "asarray", "(", "quadrupleList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history_tpre_appro.get_total_number": [[27, 32], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history_tpre_appro.reset_hist_lists": [[33, 38], ["range", "range", "range"], "function", ["None"], ["", "", "", "def", "reset_hist_lists", "(", "num_e", "=", "None", ",", "num_r", "=", "None", ",", "num_dataset", "=", "None", ")", ":", "\n", "    ", "if", "num_e", "and", "num_r", ":", "\n", "        ", "return", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "for", "_", "in", "range", "(", "num_r", ")", "]", "\n", "", "if", "num_dataset", ":", "\n", "        ", "return", "[", "[", "]", "for", "_", "in", "range", "(", "num_dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history_tpre_appro.get_history": [[39, 145], ["get_history_tpre_appro.reset_hist_lists", "get_history_tpre_appro.reset_hist_lists", "get_history_tpre_appro.reset_hist_lists", "get_history_tpre_appro.reset_hist_lists", "enumerate", "os.path.join", "[].copy", "[].copy", "[].append", "[].append", "[].append", "[].append", "os.path.exists", "os.makedirs", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "range", "range", "range", "len", "len", "len", "len", "print", "range", "len", "list", "s_history_times_tpre[].append", "len", "list", "o_history_times_tpre[].append", "len", "len", "len", "len", "range", "len", "s_history_times_tpre[].append", "len", "o_history_times_tpre[].append", "len", "len", "len", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "len", "[].append", "all", "[].append", "len", "[].append", "all", "[].append", "len", "[].pop", "[].pop", "[].copy", "len", "[].pop", "[].pop", "[].copy"], "function", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists"], ["", "", "def", "get_history", "(", "dataset", ",", "dataset_name", ",", "latest_t", ")", ":", "\n", "    ", "'''\n    dt: time until next event\n    Therefore, as long as s_history_entities have a history event, they would have a dt in s_history_times.\n    '''", "\n", "dur_last_t", "=", "[", "-", "1", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "# TODO-Notice: duration from the timestamp of last (s,p,*) or (o,p,*) of this triple until now, pad -1 if an event doesn't have history sequence.", "\n", "sub_synchro_dt", "=", "[", "-", "1", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "obj_synchro_dt", "=", "[", "-", "1", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "s_history_entities_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "#objects of history reccurent events", "\n", "s_history_times_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "#duration from previous history reccurent event to the next", "\n", "o_history_entities_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "o_history_times_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "i", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "dataset_name", ",", "i", ",", "len", "(", "dataset", ")", ")", "\n", "", "t", "=", "data", "[", "3", "]", "\n", "s", "=", "data", "[", "0", "]", "\n", "r", "=", "data", "[", "1", "]", "\n", "o", "=", "data", "[", "2", "]", "\n", "if", "latest_t", "!=", "t", ":", "\n", "            ", "for", "rr", "in", "range", "(", "num_r", ")", ":", "\n", "                ", "for", "ee", "in", "range", "(", "num_e", ")", ":", "\n", "                    ", "if", "len", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "s_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "s_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "if", "len", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "o_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "o_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "", "", "latest_t", "=", "t", "\n", "", "s_history_entities_tpre", "[", "i", "]", "=", "s_his", "[", "r", "]", "[", "s", "]", ".", "copy", "(", ")", "\n", "o_history_entities_tpre", "[", "i", "]", "=", "o_his", "[", "r", "]", "[", "o", "]", ".", "copy", "(", ")", "\n", "s_his_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "o", ")", "\n", "o_his_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "s", ")", "\n", "s_his_t_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "t", ")", "\n", "o_his_t_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "t", ")", "\n", "if", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", ">", "1", ":", "\n", "            ", "s_history_times_tpre", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "s_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", "==", "1", ":", "\n", "            ", "s_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", ">", "1", ":", "\n", "            ", "o_history_times_tpre", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "o_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", "==", "1", ":", "\n", "            ", "o_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "\n", "#extract the ground truth for time prediction", "\n", "", "if", "len", "(", "s_history_times_tpre", "[", "i", "]", ")", ">", "0", "and", "len", "(", "o_history_times_tpre", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "if", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "<", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "                ", "triple_last_t", "=", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "obj_synchro_dt", "[", "i", "]", "=", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "-", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "triple_last_t", "=", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "-", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "obj_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "", "elif", "len", "(", "s_history_times_tpre", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "triple_last_t", "=", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "0", "\n", "obj_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "elif", "len", "(", "o_history_times_tpre", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "triple_last_t", "=", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "0", "\n", "obj_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "triple_last_t", "=", "None", "\n", "\n", "", "if", "triple_last_t", "is", "not", "None", ":", "\n", "            ", "dur_last_t", "[", "i", "]", "=", "triple_last_t", "\n", "\n", "# save history data", "\n", "", "", "dir", "=", "'tpre_approach'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "dataset_name", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "dataset_name", ")", "\n", "with", "open", "(", "dataset_name", "+", "'_history_sub_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_entities_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_entities_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_sub_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_times_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_times_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_dur_last_t_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "dur_last_t", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_sub_synchro_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "sub_synchro_dt", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_obj_synchro_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj_synchro_dt", ",", "fp", ")", "\n", "\n", "", "return", "latest_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history.load_quadruples": [[4, 26], ["numpy.asarray", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append"], "function", ["None"], ["def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "", "return", "np", ".", "asarray", "(", "quadrupleList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history.get_total_number": [[27, 32], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history.reset_hist_lists": [[33, 38], ["range", "range", "range"], "function", ["None"], ["", "", "", "def", "reset_hist_lists", "(", "num_e", "=", "None", ",", "num_r", "=", "None", ",", "num_dataset", "=", "None", ")", ":", "\n", "    ", "if", "num_e", "and", "num_r", ":", "\n", "        ", "return", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "for", "_", "in", "range", "(", "num_r", ")", "]", "\n", "", "if", "num_dataset", ":", "\n", "        ", "return", "[", "[", "]", "for", "_", "in", "range", "(", "num_dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.GDELT.get_history.get_history": [[39, 130], ["get_history.reset_hist_lists", "get_history.reset_hist_lists", "get_history.reset_hist_lists", "get_history.reset_hist_lists", "enumerate", "numpy.savetxt", "numpy.savetxt", "[].copy", "[].copy", "[].append", "[].append", "[].append", "[].append", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "[].copy", "[].copy", "numpy.asarray", "numpy.asarray", "len", "len", "len", "len", "range", "range", "print", "range", "len", "list", "s_history_times[].append", "len", "list", "o_history_times[].append", "e_idx_last_t.append", "len", "len", "len", "[].copy", "[].copy", "range", "len", "s_history_times[].append", "len", "o_history_times[].append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "[].append", "all", "[].append", "len", "[].append", "all", "[].append", "len", "[].pop", "[].pop", "[].copy", "len", "[].pop", "[].pop", "[].copy"], "function", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists"], ["", "", "def", "get_history", "(", "dataset", ",", "dataset_name", ",", "latest_t", ")", ":", "\n", "    ", "'''\n    dt: time until next event\n    Therefore, as long as s_history_entities have a history event, they would have a dt in s_history_times.\n    '''", "\n", "s_history_entities", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "s_history_times", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "o_history_entities", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "o_history_times", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "s_concurrent_objects", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "o_concurrent_subjects", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "e_idx_last_t", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "i", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "dataset_name", ",", "i", ",", "len", "(", "dataset", ")", ")", "\n", "", "t", "=", "data", "[", "3", "]", "\n", "s", "=", "data", "[", "0", "]", "\n", "r", "=", "data", "[", "1", "]", "\n", "o", "=", "data", "[", "2", "]", "\n", "if", "latest_t", "!=", "t", ":", "\n", "            ", "for", "idx", "in", "e_idx_last_t", ":", "\n", "                ", "dev_event", "=", "dataset", "[", "idx", "]", "\n", "e_s", "=", "dev_event", "[", "0", "]", "\n", "e_r", "=", "dev_event", "[", "1", "]", "\n", "e_o", "=", "dev_event", "[", "2", "]", "\n", "s_concurrent_objects", "[", "idx", "]", "=", "s_his_cache", "[", "e_r", "]", "[", "e_s", "]", ".", "copy", "(", ")", "\n", "o_concurrent_subjects", "[", "idx", "]", "=", "o_his_cache", "[", "e_r", "]", "[", "e_o", "]", ".", "copy", "(", ")", "\n", "", "e_idx_last_t", "=", "[", "]", "\n", "\n", "for", "rr", "in", "range", "(", "num_r", ")", ":", "\n", "                ", "for", "ee", "in", "range", "(", "num_e", ")", ":", "\n", "                    ", "if", "len", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "s_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "s_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "if", "len", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "o_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "o_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "", "", "latest_t", "=", "t", "\n", "", "s_history_entities", "[", "i", "]", "=", "s_his", "[", "r", "]", "[", "s", "]", ".", "copy", "(", ")", "\n", "o_history_entities", "[", "i", "]", "=", "o_his", "[", "r", "]", "[", "o", "]", ".", "copy", "(", ")", "\n", "s_his_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "o", ")", "\n", "o_his_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "s", ")", "\n", "s_his_t_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "t", ")", "\n", "o_his_t_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "t", ")", "\n", "if", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", ">", "1", ":", "\n", "            ", "s_history_times", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "s_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", "==", "1", ":", "\n", "            ", "s_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", ">", "1", ":", "\n", "            ", "o_history_times", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "o_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", "==", "1", ":", "\n", "            ", "o_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "", "if", "e_idx_last_t", "is", "not", "None", ":", "\n", "            ", "e_idx_last_t", ".", "append", "(", "i", ")", "\n", "\n", "\n", "", "", "with", "open", "(", "dataset_name", "+", "'_history_sub1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_entities", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_entities", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_sub_dt1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_times", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob_dt1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_times", ",", "fp", ")", "\n", "\n", "", "for", "idx", "in", "e_idx_last_t", ":", "\n", "        ", "event", "=", "dataset", "[", "idx", "]", "\n", "e_s", "=", "event", "[", "0", "]", "\n", "e_r", "=", "event", "[", "1", "]", "\n", "e_o", "=", "event", "[", "2", "]", "\n", "s_concurrent_objects", "[", "idx", "]", "=", "s_his_cache", "[", "e_r", "]", "[", "e_s", "]", ".", "copy", "(", ")", "\n", "o_concurrent_subjects", "[", "idx", "]", "=", "o_his_cache", "[", "e_r", "]", "[", "e_o", "]", ".", "copy", "(", ")", "\n", "", "np", ".", "savetxt", "(", "dataset_name", "+", "'_subcentric_filtering_objs.txt'", ",", "np", ".", "asarray", "(", "s_concurrent_objects", ")", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "dataset_name", "+", "'_objcentric_filtering_subs.txt'", ",", "np", ".", "asarray", "(", "o_concurrent_subjects", ")", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "return", "latest_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history_tpre_appro.load_quadruples": [[4, 26], ["numpy.asarray", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "int", "int"], "function", ["None"], ["def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "", "return", "np", ".", "asarray", "(", "quadrupleList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history_tpre_appro.get_total_number": [[27, 32], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history_tpre_appro.reset_hist_lists": [[33, 38], ["range", "range", "range"], "function", ["None"], ["", "", "", "def", "reset_hist_lists", "(", "num_e", "=", "None", ",", "num_r", "=", "None", ",", "num_dataset", "=", "None", ")", ":", "\n", "    ", "if", "num_e", "and", "num_r", ":", "\n", "        ", "return", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "for", "_", "in", "range", "(", "num_r", ")", "]", "\n", "", "if", "num_dataset", ":", "\n", "        ", "return", "[", "[", "]", "for", "_", "in", "range", "(", "num_dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history_tpre_appro.get_history": [[39, 146], ["get_history_tpre_appro.reset_hist_lists", "get_history_tpre_appro.reset_hist_lists", "get_history_tpre_appro.reset_hist_lists", "get_history_tpre_appro.reset_hist_lists", "enumerate", "os.path.join", "[].copy", "[].copy", "[].append", "[].append", "[].append", "[].append", "os.path.exists", "os.makedirs", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "range", "range", "range", "len", "len", "len", "len", "print", "range", "len", "list", "s_history_times_tpre[].append", "len", "list", "o_history_times_tpre[].append", "len", "len", "len", "len", "range", "len", "s_history_times_tpre[].append", "len", "o_history_times_tpre[].append", "len", "len", "len", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "len", "[].append", "all", "[].append", "len", "[].append", "all", "[].append", "len", "[].pop", "[].pop", "[].copy", "len", "[].pop", "[].pop", "[].copy"], "function", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists"], ["", "", "def", "get_history", "(", "dataset", ",", "dataset_name", ",", "latest_t", ")", ":", "\n", "    ", "'''\n    dt: time until next event\n    Therefore, as long as s_history_entities have a history event, they would have a dt in s_history_times.\n    '''", "\n", "dur_last_t", "=", "[", "-", "1", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "# TODO-Notice: duration from the timestamp of last (s,p,*) or (o,p,*) of this triple until now, pad -1 if an event doesn't have history sequence.", "\n", "sub_synchro_dt", "=", "[", "-", "1", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "obj_synchro_dt", "=", "[", "-", "1", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "s_history_entities_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "#objects of history reccurent events", "\n", "s_history_times_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "#duration from previous history reccurent event to the next", "\n", "o_history_entities_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "o_history_times_tpre", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "i", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "dataset_name", ",", "i", ",", "len", "(", "dataset", ")", ")", "\n", "", "t", "=", "data", "[", "3", "]", "\n", "s", "=", "data", "[", "0", "]", "\n", "r", "=", "data", "[", "1", "]", "\n", "o", "=", "data", "[", "2", "]", "\n", "if", "latest_t", "!=", "t", ":", "\n", "            ", "for", "rr", "in", "range", "(", "num_r", ")", ":", "\n", "                ", "for", "ee", "in", "range", "(", "num_e", ")", ":", "\n", "                    ", "if", "len", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "s_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "s_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "if", "len", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "o_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "o_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "", "", "latest_t", "=", "t", "\n", "", "s_history_entities_tpre", "[", "i", "]", "=", "s_his", "[", "r", "]", "[", "s", "]", ".", "copy", "(", ")", "\n", "o_history_entities_tpre", "[", "i", "]", "=", "o_his", "[", "r", "]", "[", "o", "]", ".", "copy", "(", ")", "\n", "s_his_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "o", ")", "\n", "o_his_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "s", ")", "\n", "s_his_t_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "t", ")", "\n", "o_his_t_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "t", ")", "\n", "if", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", ">", "1", ":", "\n", "            ", "s_history_times_tpre", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "s_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", "==", "1", ":", "\n", "            ", "s_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", ">", "1", ":", "\n", "            ", "o_history_times_tpre", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "o_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", "==", "1", ":", "\n", "            ", "o_history_times_tpre", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "\n", "#extract the ground truth for time prediction", "\n", "", "if", "len", "(", "s_history_times_tpre", "[", "i", "]", ")", ">", "0", "and", "len", "(", "o_history_times_tpre", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "if", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "<", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", ":", "\n", "                ", "triple_last_t", "=", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "obj_synchro_dt", "[", "i", "]", "=", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "-", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "triple_last_t", "=", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "-", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "obj_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "", "elif", "len", "(", "s_history_times_tpre", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "triple_last_t", "=", "s_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "0", "\n", "obj_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "elif", "len", "(", "o_history_times_tpre", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "triple_last_t", "=", "o_history_times_tpre", "[", "i", "]", "[", "-", "1", "]", "\n", "sub_synchro_dt", "[", "i", "]", "=", "0", "\n", "obj_synchro_dt", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "triple_last_t", "=", "None", "\n", "\n", "", "if", "triple_last_t", "is", "not", "None", ":", "\n", "            ", "dur_last_t", "[", "i", "]", "=", "triple_last_t", "\n", "\n", "# save history data", "\n", "", "", "dir", "=", "'tpre_approach'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "dataset_name", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "dataset_name", ")", "\n", "with", "open", "(", "dataset_name", "+", "'_history_sub_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_entities_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_entities_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_sub_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_times_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_times_tpre", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_dur_last_t_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "dur_last_t", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_sub_synchro_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "sub_synchro_dt", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_obj_synchro_dt_tpre.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj_synchro_dt", ",", "fp", ")", "\n", "\n", "", "return", "latest_t", "\n", "\n", "###Load Data", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.load_quadruples": [[4, 26], ["numpy.asarray", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "int", "int"], "function", ["None"], ["def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "3", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "\n", "", "", "", "return", "np", ".", "asarray", "(", "quadrupleList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.get_total_number": [[27, 32], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists": [[33, 38], ["range", "range", "range"], "function", ["None"], ["", "", "", "def", "reset_hist_lists", "(", "num_e", "=", "None", ",", "num_r", "=", "None", ",", "num_dataset", "=", "None", ")", ":", "\n", "    ", "if", "num_e", "and", "num_r", ":", "\n", "        ", "return", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "for", "_", "in", "range", "(", "num_r", ")", "]", "\n", "", "if", "num_dataset", ":", "\n", "        ", "return", "[", "[", "]", "for", "_", "in", "range", "(", "num_dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.get_history": [[39, 131], ["get_history.reset_hist_lists", "get_history.reset_hist_lists", "get_history.reset_hist_lists", "get_history.reset_hist_lists", "enumerate", "numpy.savetxt", "numpy.savetxt", "[].copy", "[].copy", "[].append", "[].append", "[].append", "[].append", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "[].copy", "[].copy", "numpy.asarray", "numpy.asarray", "len", "len", "len", "len", "range", "range", "print", "range", "len", "list", "s_history_times[].append", "len", "list", "o_history_times[].append", "e_idx_last_t.append", "len", "len", "len", "[].copy", "[].copy", "range", "len", "s_history_times[].append", "len", "o_history_times[].append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "[].append", "all", "[].append", "len", "[].append", "all", "[].append", "len", "[].pop", "[].pop", "[].copy", "len", "[].pop", "[].pop", "[].copy"], "function", ["home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists", "home.repos.pwc.inspect_result.Jeff20100601_GHNN_clean.ICEWS14.get_history.reset_hist_lists"], ["", "", "def", "get_history", "(", "dataset", ",", "dataset_name", ",", "latest_t", ")", ":", "\n", "    ", "'''\n    dt: time until next event\n    Therefore, as long as s_history_entities have a history event, they would have a dt in s_history_times.\n    '''", "\n", "s_history_entities", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "s_history_times", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "o_history_entities", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "o_history_times", "=", "reset_hist_lists", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", "\n", "s_concurrent_objects", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "o_concurrent_subjects", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "e_idx_last_t", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "i", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "dataset_name", ",", "i", ",", "len", "(", "dataset", ")", ")", "\n", "", "t", "=", "data", "[", "3", "]", "\n", "s", "=", "data", "[", "0", "]", "\n", "r", "=", "data", "[", "1", "]", "\n", "o", "=", "data", "[", "2", "]", "\n", "if", "latest_t", "!=", "t", ":", "\n", "            ", "for", "idx", "in", "e_idx_last_t", ":", "\n", "                ", "dev_event", "=", "dataset", "[", "idx", "]", "\n", "e_s", "=", "dev_event", "[", "0", "]", "\n", "e_r", "=", "dev_event", "[", "1", "]", "\n", "e_o", "=", "dev_event", "[", "2", "]", "\n", "s_concurrent_objects", "[", "idx", "]", "=", "s_his_cache", "[", "e_r", "]", "[", "e_s", "]", ".", "copy", "(", ")", "\n", "o_concurrent_subjects", "[", "idx", "]", "=", "o_his_cache", "[", "e_r", "]", "[", "e_o", "]", ".", "copy", "(", ")", "\n", "", "e_idx_last_t", "=", "[", "]", "\n", "\n", "for", "rr", "in", "range", "(", "num_r", ")", ":", "\n", "                ", "for", "ee", "in", "range", "(", "num_e", ")", ":", "\n", "                    ", "if", "len", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "s_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "s_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "s_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "s_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "s_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "if", "len", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                        ", "if", "len", "(", "o_his", "[", "rr", "]", "[", "ee", "]", ")", ">=", "history_len", ":", "\n", "                            ", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "", "o_his", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_cache", "[", "rr", "]", "[", "ee", "]", ".", "copy", "(", ")", ")", "\n", "assert", "(", "all", "(", "x", "==", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", "for", "x", "in", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", ")", ")", "\n", "o_his_dt", "[", "rr", "]", "[", "ee", "]", ".", "append", "(", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "[", "0", "]", ")", "\n", "o_his_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "o_his_t_cache", "[", "rr", "]", "[", "ee", "]", "=", "[", "]", "\n", "", "", "", "latest_t", "=", "t", "\n", "", "s_history_entities", "[", "i", "]", "=", "s_his", "[", "r", "]", "[", "s", "]", ".", "copy", "(", ")", "\n", "o_history_entities", "[", "i", "]", "=", "o_his", "[", "r", "]", "[", "o", "]", ".", "copy", "(", ")", "\n", "s_his_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "o", ")", "\n", "o_his_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "s", ")", "\n", "s_his_t_cache", "[", "r", "]", "[", "s", "]", ".", "append", "(", "t", ")", "\n", "o_his_t_cache", "[", "r", "]", "[", "o", "]", ".", "append", "(", "t", ")", "\n", "if", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", ">", "1", ":", "\n", "            ", "s_history_times", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "s_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "s_his_dt", "[", "r", "]", "[", "s", "]", ")", "==", "1", ":", "\n", "            ", "s_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "s_his_dt", "[", "r", "]", "[", "s", "]", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", ">", "1", ":", "\n", "            ", "o_history_times", "[", "i", "]", "=", "list", "(", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "1", ":", "]", ")", "-", "np", ".", "asarray", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", ":", "-", "1", "]", ")", ")", "\n", "o_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "o_his_dt", "[", "r", "]", "[", "o", "]", ")", "==", "1", ":", "\n", "            ", "o_history_times", "[", "i", "]", ".", "append", "(", "t", "-", "o_his_dt", "[", "r", "]", "[", "o", "]", "[", "-", "1", "]", ")", "\n", "", "if", "e_idx_last_t", "is", "not", "None", ":", "\n", "            ", "e_idx_last_t", ".", "append", "(", "i", ")", "\n", "\n", "\n", "", "", "with", "open", "(", "dataset_name", "+", "'_history_sub1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_entities", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_entities", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_sub_dt1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "s_history_times", ",", "fp", ")", "\n", "", "with", "open", "(", "dataset_name", "+", "'_history_ob_dt1.txt'", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "o_history_times", ",", "fp", ")", "\n", "\n", "", "for", "idx", "in", "e_idx_last_t", ":", "\n", "        ", "event", "=", "dataset", "[", "idx", "]", "\n", "e_s", "=", "event", "[", "0", "]", "\n", "e_r", "=", "event", "[", "1", "]", "\n", "e_o", "=", "event", "[", "2", "]", "\n", "s_concurrent_objects", "[", "idx", "]", "=", "s_his_cache", "[", "e_r", "]", "[", "e_s", "]", ".", "copy", "(", ")", "\n", "o_concurrent_subjects", "[", "idx", "]", "=", "o_his_cache", "[", "e_r", "]", "[", "e_o", "]", ".", "copy", "(", ")", "\n", "", "np", ".", "savetxt", "(", "dataset_name", "+", "'_subcentric_filtering_objs.txt'", ",", "np", ".", "asarray", "(", "s_concurrent_objects", ")", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "dataset_name", "+", "'_objcentric_filtering_subs.txt'", ",", "np", ".", "asarray", "(", "o_concurrent_subjects", ")", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "return", "latest_t", "\n", "\n", "###Load Data", "\n"]]}