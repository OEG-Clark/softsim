{"home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.is_image_file": [[13, 15], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.make_dataset": [[17, 26], ["os.path.isdir", "sorted", "os.walk", "data_utils.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "images", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.log_input_image": [[8, 15], ["common.tensor2im", "common.tensor2sketch", "common.tensor2map"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2sketch", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2map"], ["def", "log_input_image", "(", "x", ",", "opts", ")", ":", "\n", "\t", "if", "opts", ".", "label_nc", "==", "0", ":", "\n", "\t\t", "return", "tensor2im", "(", "x", ")", "\n", "", "elif", "opts", ".", "label_nc", "==", "1", ":", "\n", "\t\t", "return", "tensor2sketch", "(", "x", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "tensor2map", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im": [[17, 24], ["var.cpu().detach().transpose().transpose().numpy.cpu().detach().transpose().transpose().numpy", "PIL.Image.fromarray", "var.cpu().detach().transpose().transpose().numpy.astype", "var.cpu().detach().transpose().transpose().numpy.cpu().detach().transpose().transpose", "var.cpu().detach().transpose().transpose().numpy.cpu().detach().transpose", "var.cpu().detach().transpose().transpose().numpy.cpu().detach", "var.cpu().detach().transpose().transpose().numpy.cpu"], "function", ["None"], ["", "", "def", "tensor2im", "(", "var", ")", ":", "\n", "\t", "var", "=", "var", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "numpy", "(", ")", "\n", "var", "=", "(", "(", "var", "+", "1", ")", "/", "2", ")", "\n", "var", "[", "var", "<", "0", "]", "=", "0", "\n", "var", "[", "var", ">", "1", "]", "=", "1", "\n", "var", "=", "var", "*", "255", "\n", "return", "Image", ".", "fromarray", "(", "var", ".", "astype", "(", "'uint8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2map": [[26, 34], ["numpy.argmax", "common.get_colors", "numpy.ones", "numpy.unique", "mask_image.astype.astype", "PIL.Image.fromarray", "var.data.cpu().numpy", "var.data.cpu"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.get_colors"], ["", "def", "tensor2map", "(", "var", ")", ":", "\n", "\t", "mask", "=", "np", ".", "argmax", "(", "var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "colors", "=", "get_colors", "(", ")", "\n", "mask_image", "=", "np", ".", "ones", "(", "shape", "=", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "for", "class_idx", "in", "np", ".", "unique", "(", "mask", ")", ":", "\n", "\t\t", "mask_image", "[", "mask", "==", "class_idx", "]", "=", "colors", "[", "class_idx", "]", "\n", "", "mask_image", "=", "mask_image", ".", "astype", "(", "'uint8'", ")", "\n", "return", "Image", ".", "fromarray", "(", "mask_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2sketch": [[36, 41], ["var[].cpu().detach().numpy", "cv2.cvtColor", "PIL.Image.fromarray", "var[].cpu().detach", "var[].cpu"], "function", ["None"], ["", "def", "tensor2sketch", "(", "var", ")", ":", "\n", "\t", "im", "=", "var", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "im", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "im", "=", "(", "im", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "Image", ".", "fromarray", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.get_colors": [[44, 50], ["None"], "function", ["None"], ["", "def", "get_colors", "(", ")", ":", "\n", "# currently support up to 19 classes (for the celebs-hq-mask dataset)", "\n", "\t", "colors", "=", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "204", ",", "0", ",", "0", "]", ",", "[", "76", ",", "153", ",", "0", "]", ",", "[", "204", ",", "204", ",", "0", "]", ",", "[", "51", ",", "51", ",", "255", "]", ",", "[", "204", ",", "0", ",", "204", "]", ",", "[", "0", ",", "255", ",", "255", "]", ",", "\n", "[", "255", ",", "204", ",", "204", "]", ",", "[", "102", ",", "51", ",", "0", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "102", ",", "204", ",", "0", "]", ",", "[", "255", ",", "255", ",", "0", "]", ",", "[", "0", ",", "0", ",", "153", "]", ",", "[", "0", ",", "0", ",", "204", "]", ",", "\n", "[", "255", ",", "51", ",", "153", "]", ",", "[", "0", ",", "204", ",", "204", "]", ",", "[", "0", ",", "51", ",", "0", "]", ",", "[", "255", ",", "153", ",", "51", "]", ",", "[", "0", ",", "204", ",", "0", "]", "]", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces": [[52, 65], ["len", "matplotlib.figure", "plt.figure.add_gridspec", "range", "matplotlib.tight_layout", "plt.figure.add_subplot", "common.vis_faces_with_id", "common.vis_faces_no_id"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces_with_id", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces_no_id"], ["", "def", "vis_faces", "(", "log_hooks", ")", ":", "\n", "\t", "display_count", "=", "len", "(", "log_hooks", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "4", "*", "display_count", ")", ")", "\n", "gs", "=", "fig", ".", "add_gridspec", "(", "display_count", ",", "3", ")", "\n", "for", "i", "in", "range", "(", "display_count", ")", ":", "\n", "\t\t", "hooks_dict", "=", "log_hooks", "[", "i", "]", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "i", ",", "0", "]", ")", "\n", "if", "'diff_input'", "in", "hooks_dict", ":", "\n", "\t\t\t", "vis_faces_with_id", "(", "hooks_dict", ",", "fig", ",", "gs", ",", "i", ")", "\n", "", "else", ":", "\n", "\t\t\t", "vis_faces_no_id", "(", "hooks_dict", ",", "fig", ",", "gs", ",", "i", ")", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces_with_id": [[67, 77], ["matplotlib.imshow", "matplotlib.title", "fig.add_subplot", "matplotlib.imshow", "matplotlib.title", "fig.add_subplot", "matplotlib.imshow", "matplotlib.title", "float", "float", "float", "float"], "function", ["None"], ["", "def", "vis_faces_with_id", "(", "hooks_dict", ",", "fig", ",", "gs", ",", "i", ")", ":", "\n", "\t", "plt", ".", "imshow", "(", "hooks_dict", "[", "'input_face'", "]", ")", "\n", "plt", ".", "title", "(", "'Input\\nOut Sim={:.2f}'", ".", "format", "(", "float", "(", "hooks_dict", "[", "'diff_input'", "]", ")", ")", ")", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "i", ",", "1", "]", ")", "\n", "plt", ".", "imshow", "(", "hooks_dict", "[", "'target_face'", "]", ")", "\n", "plt", ".", "title", "(", "'Target\\nIn={:.2f}, Out={:.2f}'", ".", "format", "(", "float", "(", "hooks_dict", "[", "'diff_views'", "]", ")", ",", "\n", "float", "(", "hooks_dict", "[", "'diff_target'", "]", ")", ")", ")", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "i", ",", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "hooks_dict", "[", "'output_face'", "]", ")", "\n", "plt", ".", "title", "(", "'Output\\n Target Sim={:.2f}'", ".", "format", "(", "float", "(", "hooks_dict", "[", "'diff_target'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces_no_id": [[79, 88], ["matplotlib.imshow", "matplotlib.title", "fig.add_subplot", "matplotlib.imshow", "matplotlib.title", "fig.add_subplot", "matplotlib.imshow", "matplotlib.title"], "function", ["None"], ["", "def", "vis_faces_no_id", "(", "hooks_dict", ",", "fig", ",", "gs", ",", "i", ")", ":", "\n", "\t", "plt", ".", "imshow", "(", "hooks_dict", "[", "'input_face'", "]", ",", "cmap", "=", "\"gray\"", ")", "\n", "plt", ".", "title", "(", "'Input'", ")", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "i", ",", "1", "]", ")", "\n", "plt", ".", "imshow", "(", "hooks_dict", "[", "'target_face'", "]", ")", "\n", "plt", ".", "title", "(", "'Target'", ")", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "i", ",", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "hooks_dict", "[", "'output_face'", "]", ")", "\n", "plt", ".", "title", "(", "'Output'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.train_utils.aggregate_loss_dict": [[2, 14], ["len", "print", "mean_vals.setdefault", "sum", "len"], "function", ["None"], ["def", "aggregate_loss_dict", "(", "agg_loss_dict", ")", ":", "\n", "\t", "mean_vals", "=", "{", "}", "\n", "for", "output", "in", "agg_loss_dict", ":", "\n", "\t\t", "for", "key", "in", "output", ":", "\n", "\t\t\t", "mean_vals", "[", "key", "]", "=", "mean_vals", ".", "setdefault", "(", "key", ",", "[", "]", ")", "+", "[", "output", "[", "key", "]", "]", "\n", "", "", "for", "key", "in", "mean_vals", ":", "\n", "\t\t", "if", "len", "(", "mean_vals", "[", "key", "]", ")", ">", "0", ":", "\n", "\t\t\t", "mean_vals", "[", "key", "]", "=", "sum", "(", "mean_vals", "[", "key", "]", ")", "/", "len", "(", "mean_vals", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "'{} has no value'", ".", "format", "(", "key", ")", ")", "\n", "mean_vals", "[", "key", "]", "=", "0", "\n", "", "", "return", "mean_vals", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.gt_res_dataset.GTResDataset.__init__": [[10, 19], ["os.listdir", "os.path.join", "os.path.join", "f.endswith", "f.endswith", "gt_res_dataset.GTResDataset.pairs.append", "os.path.join.replace"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "root_path", ",", "gt_dir", "=", "None", ",", "transform", "=", "None", ",", "transform_train", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "pairs", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "root_path", ")", ":", "\n", "\t\t\t", "image_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "f", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "gt_dir", ",", "f", ")", "\n", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "\t\t\t\t", "self", ".", "pairs", ".", "append", "(", "[", "image_path", ",", "gt_path", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", ",", "None", "]", ")", "\n", "", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "transform_train", "=", "transform_train", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.gt_res_dataset.GTResDataset.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.gt_res_dataset.GTResDataset.__getitem__": [[23, 33], ["PIL.Image.open().convert", "PIL.Image.open().convert", "gt_res_dataset.GTResDataset.transform", "gt_res_dataset.GTResDataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "from_path", ",", "to_path", ",", "_", "=", "self", ".", "pairs", "[", "index", "]", "\n", "from_im", "=", "Image", ".", "open", "(", "from_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "to_im", "=", "Image", ".", "open", "(", "to_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "\t\t\t", "to_im", "=", "self", ".", "transform", "(", "to_im", ")", "\n", "from_im", "=", "self", ".", "transform", "(", "from_im", ")", "\n", "\n", "", "return", "from_im", ",", "to_im", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset_ref_edit.ImagesDataset.__init__": [[10, 24], ["sorted", "numpy.load", "int", "len", "utils.data_utils.make_dataset", "len"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.make_dataset"], ["\t", "def", "__init__", "(", "self", ",", "source_img_root", ",", "source_w_root", ",", "source_transform", "=", "None", ",", "training", "=", "True", ")", ":", "\n", "\t\t", "source_paths", "=", "sorted", "(", "data_utils", ".", "make_dataset", "(", "source_img_root", ")", ")", "\n", "self", ".", "source_transform", "=", "source_transform", "\n", "latents", "=", "np", ".", "load", "(", "source_w_root", ")", "\n", "\n", "train_len", "=", "int", "(", "0.9", "*", "len", "(", "latents", ")", ")", "\n", "if", "training", ":", "\n", "\t\t\t", "self", ".", "source_paths", "=", "source_paths", "[", ":", "train_len", "]", "\n", "self", ".", "latents", "=", "latents", "[", ":", "train_len", "]", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "source_paths", "=", "source_paths", "[", "train_len", ":", "]", "\n", "self", ".", "latents", "=", "latents", "[", "train_len", ":", "]", "\n", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "latents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset_ref_edit.ImagesDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "source_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset_ref_edit.ImagesDataset.__getitem__": [[28, 37], ["PIL.Image.open", "images_dataset_ref_edit.ImagesDataset.convert", "images_dataset_ref_edit.ImagesDataset.source_transform", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "src_path", "=", "self", ".", "source_paths", "[", "index", "]", "\n", "src_img", "=", "Image", ".", "open", "(", "src_path", ")", "\n", "src_img", "=", "src_img", ".", "convert", "(", "'RGB'", ")", "\n", "src_img", "=", "self", ".", "source_transform", "(", "src_img", ")", "\n", "\n", "latent", "=", "torch", ".", "tensor", "(", "self", ".", "latents", "[", "index", "]", ")", "\n", "\n", "return", "src_img", ",", "latent", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset_label_edit.ImagesDataset.__init__": [[8, 12], ["numpy.load", "numpy.load", "len"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "source_root", ",", "source_label_root", ")", ":", "\n", "\t\t", "self", ".", "latents", "=", "np", ".", "load", "(", "source_root", ")", "\n", "self", ".", "label", "=", "np", ".", "load", "(", "source_label_root", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "latents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset_label_edit.ImagesDataset.__len__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset_label_edit.ImagesDataset.__getitem__": [[16, 25], ["torch.tensor", "list", "torch.tensor", "map"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "latent", "=", "torch", ".", "tensor", "(", "self", ".", "latents", "[", "index", "]", ")", "\n", "label", "=", "self", ".", "label", "[", "index", "]", "\n", "label", "=", "label", "[", "1", ":", "]", "\n", "label", "=", "list", "(", "map", "(", "int", ",", "label", ")", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", "\n", "\n", "\n", "return", "latent", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset.ImagesDataset.__init__": [[11, 17], ["sorted", "sorted", "utils.data_utils.make_dataset", "utils.data_utils.make_dataset"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.make_dataset", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.make_dataset"], ["\t", "def", "__init__", "(", "self", ",", "source_root", ",", "target_root", ",", "opts", ",", "target_transform", "=", "None", ",", "source_transform", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "source_paths", "=", "sorted", "(", "data_utils", ".", "make_dataset", "(", "source_root", ")", ")", "\n", "self", ".", "target_paths", "=", "sorted", "(", "data_utils", ".", "make_dataset", "(", "target_root", ")", ")", "\n", "self", ".", "source_transform", "=", "source_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset.ImagesDataset.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "source_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.images_dataset.ImagesDataset.__getitem__": [[21, 39], ["PIL.Image.open", "PIL.Image.open().convert", "images_dataset.ImagesDataset.convert", "images_dataset.ImagesDataset.convert", "images_dataset.ImagesDataset.target_transform", "images_dataset.ImagesDataset.source_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "from_path", "=", "self", ".", "source_paths", "[", "index", "]", "\n", "from_im", "=", "Image", ".", "open", "(", "from_path", ")", "\n", "from_im", "=", "from_im", ".", "convert", "(", "'RGB'", ")", "if", "self", ".", "opts", ".", "label_nc", "==", "0", "else", "from_im", ".", "convert", "(", "'L'", ")", "\n", "\n", "to_path", "=", "self", ".", "target_paths", "[", "index", "]", "\n", "to_im", "=", "Image", ".", "open", "(", "to_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "target_transform", ":", "\n", "\t\t\t", "to_im", "=", "self", ".", "target_transform", "(", "to_im", ")", "\n", "\n", "", "if", "self", ".", "source_transform", ":", "\n", "\t\t\t", "from_im", "=", "self", ".", "source_transform", "(", "from_im", ")", "\n", "", "else", ":", "\n", "\t\t\t", "from_im", "=", "to_im", "\n", "\n", "\n", "", "return", "from_im", ",", "to_im", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.ToOneHot.__init__": [[10, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_classes", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "n_classes", "=", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.ToOneHot.onehot_initialization": [[13, 19], ["numpy.zeros", "len", "numpy.unique", "augmentations.ToOneHot.__all_idx"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.ToOneHot.__all_idx"], ["", "def", "onehot_initialization", "(", "self", ",", "a", ")", ":", "\n", "\t\t", "if", "self", ".", "n_classes", "is", "None", ":", "\n", "\t\t\t", "self", ".", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "a", ")", ")", "\n", "", "out", "=", "np", ".", "zeros", "(", "a", ".", "shape", "+", "(", "self", ".", "n_classes", ",", ")", ",", "dtype", "=", "int", ")", "\n", "out", "[", "self", ".", "__all_idx", "(", "a", ",", "axis", "=", "2", ")", "]", "=", "1", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.ToOneHot.__all_idx": [[20, 24], ["grid.insert", "tuple", "tuple", "map"], "methods", ["None"], ["", "def", "__all_idx", "(", "self", ",", "idx", ",", "axis", ")", ":", "\n", "\t\t", "grid", "=", "np", ".", "ogrid", "[", "tuple", "(", "map", "(", "slice", ",", "idx", ".", "shape", ")", ")", "]", "\n", "grid", ".", "insert", "(", "axis", ",", "idx", ")", "\n", "return", "tuple", "(", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.ToOneHot.__call__": [[25, 29], ["numpy.array", "augmentations.ToOneHot.onehot_initialization"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.ToOneHot.onehot_initialization"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\t\t", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "one_hot", "=", "self", ".", "onehot_initialization", "(", "img", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.BilinearResize.__init__": [[32, 34], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "factors", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "32", "]", ")", ":", "\n", "\t\t", "self", ".", "factors", "=", "factors", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.BilinearResize.__call__": [[35, 42], ["augmentations.BicubicDownSample", "[].clamp", "numpy.random.choice", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToTensor", "BicubicDownSample."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "\t\t", "factor", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "factors", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "D", "=", "BicubicDownSample", "(", "factor", "=", "factor", ",", "cuda", "=", "False", ")", "\n", "img_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "img_tensor_lr", "=", "D", "(", "img_tensor", ")", "[", "0", "]", ".", "clamp", "(", "0", ",", "1", ")", "\n", "img_low_res", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "img_tensor_lr", ")", "\n", "return", "img_low_res", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.BicubicDownSample.bicubic_kernel": [[45, 57], ["torch.abs", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["\t", "def", "bicubic_kernel", "(", "self", ",", "x", ",", "a", "=", "-", "0.50", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tThis equation is exactly copied from the website below:\n\t\thttps://clouard.users.greyc.fr/Pantheon/experiments/rescaling/index-en.html#bicubic\n\t\t\"\"\"", "\n", "abs_x", "=", "torch", ".", "abs", "(", "x", ")", "\n", "if", "abs_x", "<=", "1.", ":", "\n", "\t\t\t", "return", "(", "a", "+", "2.", ")", "*", "torch", ".", "pow", "(", "abs_x", ",", "3.", ")", "-", "(", "a", "+", "3.", ")", "*", "torch", ".", "pow", "(", "abs_x", ",", "2.", ")", "+", "1", "\n", "", "elif", "1.", "<", "abs_x", "<", "2.", ":", "\n", "\t\t\t", "return", "a", "*", "torch", ".", "pow", "(", "abs_x", ",", "3", ")", "-", "5.", "*", "a", "*", "torch", ".", "pow", "(", "abs_x", ",", "2.", ")", "+", "8.", "*", "a", "*", "abs_x", "-", "4.", "*", "a", "\n", "", "else", ":", "\n", "\t\t\t", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.BicubicDownSample.__init__": [[58, 73], ["torch.nn.Module.__init__", "torch.tensor", "torch.reshape", "torch.cat", "torch.reshape", "torch.cat", "augmentations.BicubicDownSample.parameters", "torch.sum", "augmentations.BicubicDownSample.bicubic_kernel", "range", "torch.floor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.BicubicDownSample.bicubic_kernel"], ["", "", "def", "__init__", "(", "self", ",", "factor", "=", "4", ",", "cuda", "=", "True", ",", "padding", "=", "'reflect'", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "size", "=", "factor", "*", "4", "\n", "k", "=", "torch", ".", "tensor", "(", "[", "self", ".", "bicubic_kernel", "(", "(", "i", "-", "torch", ".", "floor", "(", "torch", ".", "tensor", "(", "size", "/", "2", ")", ")", "+", "0.5", ")", "/", "factor", ")", "\n", "for", "i", "in", "range", "(", "size", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "k", "=", "k", "/", "torch", ".", "sum", "(", "k", ")", "\n", "k1", "=", "torch", ".", "reshape", "(", "k", ",", "shape", "=", "(", "1", ",", "1", ",", "size", ",", "1", ")", ")", "\n", "self", ".", "k1", "=", "torch", ".", "cat", "(", "[", "k1", ",", "k1", ",", "k1", "]", ",", "dim", "=", "0", ")", "\n", "k2", "=", "torch", ".", "reshape", "(", "k", ",", "shape", "=", "(", "1", ",", "1", ",", "1", ",", "size", ")", ")", "\n", "self", ".", "k2", "=", "torch", ".", "cat", "(", "[", "k2", ",", "k2", ",", "k2", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "cuda", "=", "'.cuda'", "if", "cuda", "else", "''", "\n", "self", ".", "padding", "=", "padding", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.augmentations.BicubicDownSample.forward": [[74, 111], ["max", "max", "augmentations.BicubicDownSample.k1.type", "augmentations.BicubicDownSample.k2.type", "torch.nn.functional.pad", "torch.nn.functional.conv2d", "torch.nn.functional.pad", "torch.nn.functional.conv2d", "torch.transpose", "torch.clamp", "torch.clamp", "torch.transpose", "torch.transpose.type", "torch.transpose", "torch.round", "torch.round", "torch.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "nhwc", "=", "False", ",", "clip_round", "=", "False", ",", "byte_output", "=", "False", ")", ":", "\n", "\t\t", "filter_height", "=", "self", ".", "factor", "*", "4", "\n", "filter_width", "=", "self", ".", "factor", "*", "4", "\n", "stride", "=", "self", ".", "factor", "\n", "\n", "pad_along_height", "=", "max", "(", "filter_height", "-", "stride", ",", "0", ")", "\n", "pad_along_width", "=", "max", "(", "filter_width", "-", "stride", ",", "0", ")", "\n", "filters1", "=", "self", ".", "k1", ".", "type", "(", "'torch{}.FloatTensor'", ".", "format", "(", "self", ".", "cuda", ")", ")", "\n", "filters2", "=", "self", ".", "k2", ".", "type", "(", "'torch{}.FloatTensor'", ".", "format", "(", "self", ".", "cuda", ")", ")", "\n", "\n", "# compute actual padding values for each side", "\n", "pad_top", "=", "pad_along_height", "//", "2", "\n", "pad_bottom", "=", "pad_along_height", "-", "pad_top", "\n", "pad_left", "=", "pad_along_width", "//", "2", "\n", "pad_right", "=", "pad_along_width", "-", "pad_left", "\n", "\n", "# apply mirror padding", "\n", "if", "nhwc", ":", "\n", "\t\t\t", "x", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "x", ",", "2", ",", "3", ")", ",", "1", ",", "2", ")", "# NHWC to NCHW", "\n", "\n", "# downscaling performed by 1-d convolution", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_top", ",", "pad_bottom", ")", ",", "self", ".", "padding", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "filters1", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "groups", "=", "3", ")", "\n", "if", "clip_round", ":", "\n", "\t\t\t", "x", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "x", ")", ",", "0.0", ",", "255.", ")", "\n", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad_left", ",", "pad_right", ",", "0", ",", "0", ")", ",", "self", ".", "padding", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "filters2", ",", "stride", "=", "(", "1", ",", "stride", ")", ",", "groups", "=", "3", ")", "\n", "if", "clip_round", ":", "\n", "\t\t\t", "x", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "x", ")", ",", "0.0", ",", "255.", ")", "\n", "\n", "", "if", "nhwc", ":", "\n", "\t\t\t", "x", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "x", ",", "1", ",", "3", ")", ",", "1", ",", "2", ")", "\n", "", "if", "byte_output", ":", "\n", "\t\t\t", "return", "x", ".", "type", "(", "'torch.ByteTensor'", ".", "format", "(", "self", ".", "cuda", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.inference_dataset.InferenceDataset.__init__": [[8, 12], ["sorted", "utils.data_utils.make_dataset"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.data_utils.make_dataset"], ["\t", "def", "__init__", "(", "self", ",", "root", ",", "opts", ",", "transform", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "paths", "=", "sorted", "(", "data_utils", ".", "make_dataset", "(", "root", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.inference_dataset.InferenceDataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.datasets.inference_dataset.InferenceDataset.__getitem__": [[16, 23], ["PIL.Image.open", "inference_dataset.InferenceDataset.convert", "inference_dataset.InferenceDataset.convert", "inference_dataset.InferenceDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "from_path", "=", "self", ".", "paths", "[", "index", "]", "\n", "from_im", "=", "Image", ".", "open", "(", "from_path", ")", "\n", "from_im", "=", "from_im", ".", "convert", "(", "'RGB'", ")", "if", "self", ".", "opts", ".", "label_nc", "==", "0", "else", "from_im", ".", "convert", "(", "'L'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "\t\t\t", "from_im", "=", "self", ".", "transform", "(", "from_im", ")", "\n", "", "return", "from_im", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_label_edit.Coach.__init__": [[30, 58], ["models.encoders.edit_transformer_encoders.LCNet_40().to", "torch.load", "torch.load", "torch.load", "torch.load", "coach_label_edit.Coach.classifier.load_state_dict", "models.stylegan2.model.Generator().to", "torch.load", "torch.load", "torch.load", "torch.load", "coach_label_edit.Coach.generator.load_state_dict", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "datasets.images_dataset_label_edit.ImagesDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.encoders.edit_transformer_encoders.LCNet_40", "models.stylegan2.model.Generator", "int"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "self", ".", "opts", "=", "opts", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "n_epochs", "=", "1", "\n", "\n", "self", ".", "device", "=", "'cuda'", "# TODO: Allow multiple GPU? currently using CUDA_VISIBLE_DEVICES", "\n", "self", ".", "opts", ".", "device", "=", "self", ".", "device", "\n", "\n", "# Initialize network", "\n", "self", ".", "classifier", "=", "LCNet_40", "(", "[", "9216", ",", "2048", ",", "512", "]", ",", "n_classes", "=", "40", ",", "activ", "=", "'leakyrelu'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "classifier_weights", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "classifier", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "self", ".", "generator", "=", "Generator", "(", "self", ".", "opts", ".", "output_size", ",", "512", ",", "8", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "stylegan_weights", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "generator", ".", "load_state_dict", "(", "ckpt", "[", "'g_ema'", "]", ",", "strict", "=", "False", ")", "\n", "self", ".", "face_pool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "256", ")", ")", "\n", "\n", "self", ".", "attr_type", "=", "attr_dict", "[", "'Male'", "]", "#Bangs=5, Eyeglasses=15, Male=20", "\n", "\n", "# Initialize dataset, including w and 40-class label", "\n", "self", ".", "train_dataset", "=", "ImagesDataset", "(", "source_root", "=", "'test_w.npy'", ",", "\n", "source_label_root", "=", "'test_attr.npy'", ")", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "opts", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opts", ".", "workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_label_edit.Coach.train": [[59, 116], ["os.path.join", "os.makedirs", "range", "tqdm.tqdm.tqdm", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "coach_label_edit.Coach.classifier", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits.backward", "coach_label_edit.Coach.classifier.zero_grad", "coach_label_edit.Coach.classifier", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits.backward", "w.to", "label.to", "w_F.view", "label[].float", "w_F0.view", "label[].float", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "coach_label_edit.Coach.generator.eval", "coach_label_edit.Coach.generator", "coach_label_edit.Coach.face_pool", "range", "w.size", "w.size", "w.size", "w.size", "utils.common.tensor2im", "os.path.join", "PIL.Image.fromarray().save", "str().zfill", "os.path.basename", "PIL.Image.fromarray", "str", "numpy.array", "utils.common.tensor2im.resize"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im"], ["", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "out_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opts", ".", "exp_dir", ",", "'images'", ")", "\n", "os", ".", "makedirs", "(", "out_path", ",", "exist_ok", "=", "True", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "\t\t\t", "for", "batch", "in", "tqdm", "(", "self", ".", "train_dataloader", ")", ":", "\n", "\t\t\t\t", "w", ",", "label", "=", "batch", "\n", "w", ",", "label", "=", "w", ".", "to", "(", "self", ".", "device", ")", ",", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# First derivative", "\n", "# w_A = Variable(w, requires_grad=True)", "\n", "# label[label == -1] = 0", "\n", "# label[:, self.attr_type] = 0  # Edit to the specified direction.", "\n", "# pre_A, embed = self.classifier(w_A.view(w.size(0), -1))", "\n", "# loss_cls_A = F.binary_cross_entropy_with_logits(pre_A[:, self.attr_type], label[:, self.attr_type].float())", "\n", "# loss = loss_cls_A", "\n", "# loss.backward(retain_graph=True)", "\n", "# direct_ = w_A.grad", "\n", "# direct_ = direct_ / torch.norm(direct_, dim=2, keepdim=True)", "\n", "# direct = direct_", "\n", "\n", "# Hessian matrix", "\n", "a", "=", "torch", ".", "randn", "(", "(", "w", ".", "size", "(", "0", ")", ",", "18", ",", "512", ")", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "zero", "=", "torch", ".", "zeros", "(", "(", "w", ".", "size", "(", "0", ")", ",", "18", ",", "512", ")", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "direct", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "direct_zero", "=", "Variable", "(", "zero", ",", "requires_grad", "=", "True", ")", "\n", "w_A", "=", "Variable", "(", "w", ",", "requires_grad", "=", "True", ")", "\n", "w_F", "=", "w_A", "+", "0.0001", "*", "direct", "\n", "w_F0", "=", "w_A", "+", "direct_zero", "\n", "\n", "label", "[", "label", "==", "-", "1", "]", "=", "0", "\n", "label", "[", ":", ",", "self", ".", "attr_type", "]", "=", "1", "# Edit to the specified direction.", "\n", "pre", ",", "embed_edit", "=", "self", ".", "classifier", "(", "w_F", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pre", "[", ":", ",", "self", ".", "attr_type", "]", ",", "label", "[", ":", ",", "self", ".", "attr_type", "]", ".", "float", "(", ")", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "direct_", "=", "direct", ".", "grad", "\n", "\n", "self", ".", "classifier", ".", "zero_grad", "(", ")", "\n", "pre_0", ",", "embed_edit_0", "=", "self", ".", "classifier", "(", "w_F0", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pre_0", "[", ":", ",", "self", ".", "attr_type", "]", ",", "label", "[", ":", ",", "self", ".", "attr_type", "]", ".", "float", "(", ")", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "direct_", "=", "direct_", "-", "direct_zero", ".", "grad", "\n", "direct_", "=", "direct_", "/", "torch", ".", "norm", "(", "direct_", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "direct", "=", "direct", "-", "direct_", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "generator", ".", "eval", "(", ")", "\n", "edit", ",", "_", "=", "self", ".", "generator", "(", "[", "w", "-", "direct", "*", "3", "]", ",", "return_latents", "=", "False", ",", "truncation", "=", "1", ",", "truncation_latent", "=", "None", ",", "\n", "input_is_latent", "=", "True", ")", "\n", "edit", "=", "self", ".", "face_pool", "(", "edit", ")", "\n", "\n", "# Generate images.", "\n", "for", "i", "in", "range", "(", "self", ".", "opts", ".", "batch_size", ")", ":", "\n", "\t\t\t\t\t\t", "img", "=", "common", ".", "tensor2im", "(", "edit", "[", "i", "]", ")", "\n", "im_path", "=", "str", "(", "self", ".", "global_step", ")", ".", "zfill", "(", "5", ")", "+", "'.jpg'", "\n", "im_save_path", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "os", ".", "path", ".", "basename", "(", "im_path", ")", ")", "\n", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "img", ".", "resize", "(", "(", "256", ",", "256", ")", ")", ")", ")", ".", "save", "(", "im_save_path", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.__init__": [[27, 66], ["models.edit_transformer.EditTransformer().to", "list", "torch.optim.Adam", "torch.nn.MSELoss().to().eval", "coach_ref_edit.Coach.configure_datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.makedirs", "torch.utils.tensorboard.SummaryWriter", "os.path.join", "os.makedirs", "coach_ref_edit.Coach.net.encoder.parameters", "models.edit_transformer.EditTransformer", "torch.nn.MSELoss().to", "int", "int", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.configure_datasets"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "self", ".", "opts", "=", "opts", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "\n", "self", ".", "device", "=", "'cuda'", "# TODO: Allow multiple GPU? currently using CUDA_VISIBLE_DEVICES", "\n", "self", ".", "opts", ".", "device", "=", "self", ".", "device", "\n", "\n", "# Initialize network, optimizer and loss", "\n", "self", ".", "net", "=", "EditTransformer", "(", "self", ".", "opts", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "params", "=", "list", "(", "self", ".", "net", ".", "encoder", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opts", ".", "learning_rate", ",", "weight_decay", "=", "0.0005", ")", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "self", ".", "attr_type", "=", "attr_dict", "[", "'Bangs'", "]", "# Attribute to be edit", "\n", "\n", "# Initialize dataset", "\n", "self", ".", "train_dataset", ",", "self", ".", "test_dataset", "=", "self", ".", "configure_datasets", "(", ")", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "opts", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opts", ".", "workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "opts", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opts", ".", "test_workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "# Initialize logger", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "logger", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "\n", "# Initialize checkpoint dir", "\n", "self", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "best_val_loss", "=", "None", "\n", "if", "self", ".", "opts", ".", "save_interval", "is", "None", ":", "\n", "\t\t\t", "self", ".", "opts", ".", "save_interval", "=", "self", ".", "opts", ".", "max_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.train": [[67, 112], ["coach_ref_edit.Coach.net.train", "enumerate", "coach_ref_edit.Coach.optimizer.zero_grad", "img.size", "coach_ref_edit.Coach.net.forward", "coach_ref_edit.Coach.calc_loss", "loss.backward", "coach_ref_edit.Coach.optimizer.step", "img.to().float", "w.to().float", "coach_ref_edit.Coach.parse_and_log_images", "coach_ref_edit.Coach.print_metrics", "coach_ref_edit.Coach.log_metrics", "coach_ref_edit.Coach.validate", "print", "coach_ref_edit.Coach.checkpoint_me", "coach_ref_edit.Coach.checkpoint_me", "coach_ref_edit.Coach.checkpoint_me", "img.to", "w.to"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.forward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.calc_loss", "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.ranger.Ranger.step", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.parse_and_log_images", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.print_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.validate", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "net", ".", "train", "(", ")", "\n", "while", "self", ".", "global_step", "<", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "\t\t\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "img", ",", "w", "=", "batch", "\n", "img", ",", "w", "=", "img", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", ",", "w", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "# Split batch into source and reference images", "\n", "B", "=", "img", ".", "size", "(", "0", ")", "\n", "src_w", "=", "w", "[", ":", "B", "//", "2", "]", "\n", "ref_w", "=", "w", "[", "B", "//", "2", ":", "]", "\n", "src_img", "=", "img", "[", ":", "B", "//", "2", "]", "\n", "ref_img", "=", "img", "[", "B", "//", "2", ":", "]", "\n", "mix_img", ",", "mix_w", "=", "self", ".", "net", ".", "forward", "(", "src_w", ",", "ref_w", ",", "return_images", "=", "True", ")", "\n", "loss", ",", "loss_dict", "=", "self", ".", "calc_loss", "(", "src_w", ",", "ref_w", ",", "mix_w", ",", "attr_type", "=", "self", ".", "attr_type", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Logging related", "\n", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "image_interval", "==", "0", "or", "(", "\n", "self", ".", "global_step", "<", "10000", "and", "self", ".", "global_step", "%", "25", "==", "0", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "parse_and_log_images", "(", "src_img", ",", "ref_img", ",", "mix_img", ",", "title", "=", "'images/train'", ")", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "board_interval", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "print_metrics", "(", "loss_dict", ",", "prefix", "=", "'train'", ")", "\n", "self", ".", "log_metrics", "(", "loss_dict", ",", "prefix", "=", "'train'", ")", "\n", "\n", "# Validation related", "\n", "", "val_loss_dict", "=", "None", "\n", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "val_interval", "==", "0", "or", "self", ".", "global_step", "==", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t\t\t", "val_loss_dict", "=", "self", ".", "validate", "(", ")", "\n", "if", "val_loss_dict", "and", "(", "self", ".", "best_val_loss", "is", "None", "or", "val_loss_dict", "[", "'loss'", "]", "<", "self", ".", "best_val_loss", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "best_val_loss", "=", "val_loss_dict", "[", "'loss'", "]", "\n", "self", ".", "checkpoint_me", "(", "val_loss_dict", ",", "is_best", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "save_interval", "==", "0", "or", "self", ".", "global_step", "==", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t\t\t", "if", "val_loss_dict", "is", "not", "None", ":", "\n", "\t\t\t\t\t\t", "self", ".", "checkpoint_me", "(", "val_loss_dict", ",", "is_best", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "self", ".", "checkpoint_me", "(", "loss_dict", ",", "is_best", "=", "False", ")", "\n", "\n", "", "", "if", "self", ".", "global_step", "==", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t\t\t", "print", "(", "'OMG, finished training!'", ")", "\n", "break", "\n", "\n", "", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.validate": [[113, 146], ["coach_ref_edit.Coach.net.eval", "enumerate", "utils.train_utils.aggregate_loss_dict", "coach_ref_edit.Coach.log_metrics", "coach_ref_edit.Coach.print_metrics", "coach_ref_edit.Coach.net.train", "agg_loss_dict.append", "coach_ref_edit.Coach.parse_and_log_images", "torch.no_grad", "img.size", "coach_ref_edit.Coach.net.forward", "coach_ref_edit.Coach.calc_loss", "coach_ref_edit.Coach.net.train", "img.to().float", "w.to().float", "img.to", "w.to"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.train_utils.aggregate_loss_dict", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.print_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.parse_and_log_images", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.forward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.calc_loss", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train"], ["", "", "", "def", "validate", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "net", ".", "eval", "(", ")", "\n", "agg_loss_dict", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "test_dataloader", ")", ":", "\n", "\t\t\t", "img", ",", "w", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "img", ",", "w", "=", "img", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", ",", "w", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "B", "=", "img", ".", "size", "(", "0", ")", "\n", "src_w", "=", "w", "[", ":", "B", "//", "2", "]", "\n", "ref_w", "=", "w", "[", "B", "//", "2", ":", "]", "\n", "src_img", "=", "img", "[", ":", "B", "//", "2", "]", "\n", "ref_img", "=", "img", "[", "B", "//", "2", ":", "]", "\n", "mix_img", ",", "mix_w", "=", "self", ".", "net", ".", "forward", "(", "src_w", ",", "ref_w", ",", "return_images", "=", "True", ")", "\n", "loss", ",", "cur_loss_dict", "=", "self", ".", "calc_loss", "(", "src_w", ",", "ref_w", ",", "mix_w", ",", "attr_type", "=", "self", ".", "attr_type", ")", "\n", "", "agg_loss_dict", ".", "append", "(", "cur_loss_dict", ")", "\n", "\n", "# Logging related", "\n", "self", ".", "parse_and_log_images", "(", "src_img", ",", "ref_img", ",", "mix_img", ",", "\n", "title", "=", "'images/test'", ",", "\n", "subscript", "=", "'{:04d}'", ".", "format", "(", "batch_idx", ")", ")", "\n", "\n", "# For first step just do sanity test on small amount of data", "\n", "if", "self", ".", "global_step", "==", "0", "and", "batch_idx", ">=", "4", ":", "\n", "\t\t\t\t", "self", ".", "net", ".", "train", "(", ")", "\n", "return", "None", "# Do not log, inaccurate in first batch", "\n", "\n", "", "", "loss_dict", "=", "train_utils", ".", "aggregate_loss_dict", "(", "agg_loss_dict", ")", "\n", "self", ".", "log_metrics", "(", "loss_dict", ",", "prefix", "=", "'test'", ")", "\n", "self", ".", "print_metrics", "(", "loss_dict", ",", "prefix", "=", "'test'", ")", "\n", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.checkpoint_me": [[147, 157], ["coach_ref_edit.Coach.__get_save_dict", "os.path.join", "torch.save", "open", "os.path.join", "f.write", "f.write"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.__get_save_dict"], ["", "def", "checkpoint_me", "(", "self", ",", "loss_dict", ",", "is_best", ")", ":", "\n", "\t\t", "save_name", "=", "'best_model.pt'", "if", "is_best", "else", "'iteration_{}.pt'", ".", "format", "(", "self", ".", "global_step", ")", "\n", "save_dict", "=", "self", ".", "__get_save_dict", "(", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "save_name", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "checkpoint_path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'timestamp.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "\t\t\t", "if", "is_best", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "'**Best**: Step - {}, Loss - {:.3f} \\n{}\\n'", ".", "format", "(", "self", ".", "global_step", ",", "self", ".", "best_val_loss", ",", "loss_dict", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "'Step - {}, \\n{}\\n'", ".", "format", "(", "self", ".", "global_step", ",", "loss_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.configure_datasets": [[158, 175], ["print", "datasets.images_dataset_ref_edit.ImagesDataset", "datasets.images_dataset_ref_edit.ImagesDataset", "print", "print", "configs.data_configs.DATASETS.keys", "Exception", "len", "len"], "methods", ["None"], ["", "", "", "def", "configure_datasets", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "opts", ".", "dataset_type", "not", "in", "data_configs", ".", "DATASETS", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "Exception", "(", "'{} is not a valid dataset_type'", ".", "format", "(", "self", ".", "opts", ".", "dataset_type", ")", ")", "\n", "", "print", "(", "'Loading dataset for {}'", ".", "format", "(", "self", ".", "opts", ".", "dataset_type", ")", ")", "\n", "dataset_args", "=", "data_configs", ".", "DATASETS", "[", "self", ".", "opts", ".", "dataset_type", "]", "\n", "transforms_dict", "=", "dataset_args", "[", "'transforms'", "]", "(", "self", ".", "opts", ")", ".", "get_transforms", "(", ")", "\n", "train_dataset", "=", "ImagesDataset", "(", "source_img_root", "=", "dataset_args", "[", "'train_edit_img_root'", "]", ",", "\n", "source_w_root", "=", "dataset_args", "[", "'train_edit_w_root'", "]", ",", "\n", "source_transform", "=", "transforms_dict", "[", "'transform_test'", "]", ",", "\n", "training", "=", "True", ")", "\n", "test_dataset", "=", "ImagesDataset", "(", "source_img_root", "=", "dataset_args", "[", "'train_edit_img_root'", "]", ",", "\n", "source_w_root", "=", "dataset_args", "[", "'train_edit_w_root'", "]", ",", "\n", "source_transform", "=", "transforms_dict", "[", "'transform_test'", "]", ",", "\n", "training", "=", "False", ")", "\n", "print", "(", "\"Number of training samples: {}\"", ".", "format", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "print", "(", "\"Number of test samples: {}\"", ".", "format", "(", "len", "(", "test_dataset", ")", ")", ")", "\n", "return", "train_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.calc_loss": [[176, 205], ["coach_ref_edit.Coach.net.classifier", "coach_ref_edit.Coach.net.classifier", "coach_ref_edit.Coach.net.classifier", "coach_ref_edit.Coach.mse_loss", "float", "torch.cat", "torch.cat", "coach_ref_edit.Coach.mse_loss", "float", "coach_ref_edit.Coach.mse_loss", "float", "float", "mix.reshape", "ref.view", "src.view"], "methods", ["None"], ["", "def", "calc_loss", "(", "self", ",", "src", ",", "ref", ",", "mix", ",", "attr_type", "=", "0", ")", ":", "\n", "\t\t", "loss_dict", "=", "{", "}", "\n", "loss", "=", "0.0", "\n", "\n", "predict", ",", "embed_mix", "=", "self", ".", "net", ".", "classifier", "(", "mix", ".", "reshape", "(", "mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "_", ",", "embed_ref", "=", "self", ".", "net", ".", "classifier", "(", "ref", ".", "view", "(", "ref", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "# B, n_classes, C", "\n", "_", ",", "embed_src", "=", "self", ".", "net", ".", "classifier", "(", "src", ".", "view", "(", "src", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "# Regularization on w", "\n", "loss_l2_src_code", "=", "self", ".", "mse_loss", "(", "src", ",", "mix", ")", "\n", "loss_dict", "[", "'loss_l2_src_code'", "]", "=", "float", "(", "loss_l2_src_code", ")", "\n", "loss", "+=", "loss_l2_src_code", "*", "self", ".", "opts", ".", "l2_lambda", "\n", "\n", "# Relevant attribute should be close to reference.", "\n", "attr_embed_ref", "=", "embed_ref", "[", ":", ",", "attr_type", ",", ":", "]", "\n", "attr_embed_mix", "=", "embed_mix", "[", ":", ",", "attr_type", ",", ":", "]", "\n", "# Irrelevant attributes should be close to source.", "\n", "irrel_embed_src", "=", "torch", ".", "cat", "(", "[", "embed_src", "[", ":", ",", ":", "attr_type", ",", ":", "]", ",", "embed_src", "[", ":", ",", "(", "attr_type", "+", "1", ")", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "irrel_embed_mix", "=", "torch", ".", "cat", "(", "[", "embed_mix", "[", ":", ",", ":", "attr_type", ",", ":", "]", ",", "embed_mix", "[", ":", ",", "(", "attr_type", "+", "1", ")", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "loss_l2_ref_attr", "=", "self", ".", "mse_loss", "(", "attr_embed_ref", ",", "attr_embed_mix", ")", "\n", "loss_dict", "[", "'loss_l2_ref_attr'", "]", "=", "float", "(", "loss_l2_ref_attr", ")", "\n", "loss", "+=", "loss_l2_ref_attr", "*", "self", ".", "opts", ".", "l2_ref_lambda", "\n", "loss_l2_src_attr", "=", "self", ".", "mse_loss", "(", "irrel_embed_src", ",", "irrel_embed_mix", ")", "\n", "loss_dict", "[", "'loss_l2_src_attr'", "]", "=", "float", "(", "loss_l2_src_attr", ")", "\n", "loss", "+=", "loss_l2_src_attr", "*", "self", ".", "opts", ".", "l2_src_lambda", "\n", "\n", "loss_dict", "[", "'loss'", "]", "=", "float", "(", "loss", ")", "\n", "return", "loss", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.log_metrics": [[207, 210], ["metrics_dict.items", "coach_ref_edit.Coach.logger.add_scalar"], "methods", ["None"], ["", "def", "log_metrics", "(", "self", ",", "metrics_dict", ",", "prefix", ")", ":", "\n", "\t\t", "for", "key", ",", "value", "in", "metrics_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "add_scalar", "(", "'{}/{}'", ".", "format", "(", "prefix", ",", "key", ")", ",", "value", ",", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.print_metrics": [[211, 215], ["print", "metrics_dict.items", "print"], "methods", ["None"], ["", "", "def", "print_metrics", "(", "self", ",", "metrics_dict", ",", "prefix", ")", ":", "\n", "\t\t", "print", "(", "'Metrics for {}, step {}'", ".", "format", "(", "prefix", ",", "self", ".", "global_step", ")", ")", "\n", "for", "key", ",", "value", "in", "metrics_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "'\\t{} = '", ".", "format", "(", "key", ")", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.parse_and_log_images": [[216, 226], ["range", "coach_ref_edit.Coach.log_images", "im_data.append", "utils.common.tensor2im", "utils.common.tensor2im", "utils.common.tensor2im"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_images", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im"], ["", "", "def", "parse_and_log_images", "(", "self", ",", "src", ",", "ref", ",", "mix", ",", "title", ",", "subscript", "=", "None", ",", "display_count", "=", "1", ")", ":", "\n", "\t\t", "im_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "display_count", ")", ":", "\n", "\t\t\t", "cur_im_data", "=", "{", "\n", "'input_face'", ":", "common", ".", "tensor2im", "(", "src", "[", "i", "]", ")", ",", "\n", "'target_face'", ":", "common", ".", "tensor2im", "(", "ref", "[", "i", "]", ")", ",", "\n", "'output_face'", ":", "common", ".", "tensor2im", "(", "mix", "[", "i", "]", ")", ",", "\n", "}", "\n", "im_data", ".", "append", "(", "cur_im_data", ")", "\n", "", "self", ".", "log_images", "(", "title", ",", "im_data", "=", "im_data", ",", "subscript", "=", "subscript", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.log_images": [[227, 239], ["utils.common.vis_faces", "os.makedirs", "utils.common.vis_faces.savefig", "matplotlib.close", "matplotlib.close", "os.path.join", "os.path.join", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces"], ["", "def", "log_images", "(", "self", ",", "name", ",", "im_data", ",", "subscript", "=", "None", ",", "log_latest", "=", "False", ")", ":", "\n", "\t\t", "fig", "=", "common", ".", "vis_faces", "(", "im_data", ")", "\n", "step", "=", "self", ".", "global_step", "\n", "if", "log_latest", ":", "\n", "\t\t\t", "step", "=", "0", "\n", "", "if", "subscript", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "log_dir", ",", "name", ",", "'{}_{:04d}.jpg'", ".", "format", "(", "subscript", ",", "step", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "log_dir", ",", "name", ",", "'{:04d}.jpg'", ".", "format", "(", "step", ")", ")", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "exist_ok", "=", "True", ")", "\n", "fig", ".", "savefig", "(", "path", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_ref_edit.Coach.__get_save_dict": [[240, 246], ["coach_ref_edit.Coach.net.state_dict", "vars"], "methods", ["None"], ["", "def", "__get_save_dict", "(", "self", ")", ":", "\n", "\t\t", "save_dict", "=", "{", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "'opts'", ":", "vars", "(", "self", ".", "opts", ")", "\n", "}", "\n", "return", "save_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.__init__": [[23, 74], ["models.style_transformer.StyleTransformer().to", "torch.nn.MSELoss().to().eval", "torch.nn.MSELoss().to().eval", "coach_invert.Coach.configure_optimizers", "coach_invert.Coach.configure_datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.makedirs", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "os.path.join", "os.makedirs", "ValueError", "criteria.lpips.lpips.LPIPS().to().eval", "models.style_transformer.StyleTransformer", "torch.nn.MSELoss().to", "torch.nn.MSELoss().to", "criteria.id_loss.IDLoss().to().eval", "criteria.moco_loss.MocoLoss().to().eval", "int", "int", "criteria.lpips.lpips.LPIPS().to", "torch.nn.MSELoss", "torch.nn.MSELoss", "criteria.id_loss.IDLoss().to", "criteria.moco_loss.MocoLoss().to", "criteria.lpips.lpips.LPIPS", "criteria.id_loss.IDLoss", "criteria.moco_loss.MocoLoss"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.configure_optimizers", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.configure_datasets"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "self", ".", "opts", "=", "opts", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "\n", "self", ".", "device", "=", "'cuda'", "# TODO: Allow multiple GPU? currently using CUDA_VISIBLE_DEVICES", "\n", "self", ".", "opts", ".", "device", "=", "self", ".", "device", "\n", "\n", "# Initialize network", "\n", "self", ".", "net", "=", "StyleTransformer", "(", "self", ".", "opts", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Initialize loss", "\n", "if", "self", ".", "opts", ".", "id_lambda", ">", "0", "and", "self", ".", "opts", ".", "moco_lambda", ">", "0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Both ID and MoCo loss have lambdas > 0! Please select only one to have non-zero lambda!'", ")", "\n", "\n", "", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "if", "self", ".", "opts", ".", "lpips_lambda", ">", "0", ":", "\n", "\t\t\t", "self", ".", "lpips_loss", "=", "LPIPS", "(", "net_type", "=", "'alex'", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "", "if", "self", ".", "opts", ".", "id_lambda", ">", "0", ":", "\n", "\t\t\t", "if", "'ffhq'", "in", "self", ".", "opts", ".", "dataset_type", "or", "'celeb'", "in", "self", ".", "opts", ".", "dataset_type", ":", "\n", "\t\t\t\t", "self", ".", "id_loss", "=", "id_loss", ".", "IDLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "id_loss", "=", "moco_loss", ".", "MocoLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "\n", "# Initialize optimizer", "\n", "", "", "self", ".", "optimizer", "=", "self", ".", "configure_optimizers", "(", ")", "\n", "\n", "# Initialize dataset", "\n", "self", ".", "train_dataset", ",", "self", ".", "test_dataset", "=", "self", ".", "configure_datasets", "(", ")", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "opts", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opts", ".", "workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "opts", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opts", ".", "test_workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "# Initialize logger", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "logger", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "\n", "# Initialize checkpoint dir", "\n", "self", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "best_val_loss", "=", "None", "\n", "if", "self", ".", "opts", ".", "save_interval", "is", "None", ":", "\n", "\t\t\t", "self", ".", "opts", ".", "save_interval", "=", "self", ".", "opts", ".", "max_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train": [[75, 114], ["coach_invert.Coach.net.train", "enumerate", "coach_invert.Coach.optimizer.zero_grad", "coach_invert.Coach.net.forward", "coach_invert.Coach.calc_loss", "loss.backward", "coach_invert.Coach.optimizer.step", "x.to().float", "y.to().float", "coach_invert.Coach.parse_and_log_images", "coach_invert.Coach.print_metrics", "coach_invert.Coach.log_metrics", "coach_invert.Coach.validate", "print", "coach_invert.Coach.checkpoint_me", "coach_invert.Coach.checkpoint_me", "coach_invert.Coach.checkpoint_me", "x.to", "y.to"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.forward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.calc_loss", "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.ranger.Ranger.step", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.parse_and_log_images", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.print_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.validate", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "net", ".", "train", "(", ")", "\n", "while", "self", ".", "global_step", "<", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "\t\t\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "x", ",", "y", "=", "batch", "\n", "x", ",", "y", "=", "x", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", ",", "y", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "y_hat", ",", "latent", "=", "self", ".", "net", ".", "forward", "(", "x", ",", "return_latents", "=", "True", ")", "\n", "loss", ",", "loss_dict", ",", "id_logs", "=", "self", ".", "calc_loss", "(", "x", ",", "y", ",", "y_hat", ",", "latent", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Logging related", "\n", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "image_interval", "==", "0", "or", "(", "\n", "self", ".", "global_step", "<", "1000", "and", "self", ".", "global_step", "%", "25", "==", "0", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "parse_and_log_images", "(", "id_logs", ",", "x", ",", "y", ",", "y_hat", ",", "title", "=", "'images/train/faces'", ")", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "board_interval", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "print_metrics", "(", "loss_dict", ",", "prefix", "=", "'train'", ")", "\n", "self", ".", "log_metrics", "(", "loss_dict", ",", "prefix", "=", "'train'", ")", "\n", "\n", "# Validation related", "\n", "", "val_loss_dict", "=", "None", "\n", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "val_interval", "==", "0", "or", "self", ".", "global_step", "==", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t\t\t", "val_loss_dict", "=", "self", ".", "validate", "(", ")", "\n", "if", "val_loss_dict", "and", "(", "self", ".", "best_val_loss", "is", "None", "or", "val_loss_dict", "[", "'loss'", "]", "<", "self", ".", "best_val_loss", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "best_val_loss", "=", "val_loss_dict", "[", "'loss'", "]", "\n", "self", ".", "checkpoint_me", "(", "val_loss_dict", ",", "is_best", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "global_step", "%", "self", ".", "opts", ".", "save_interval", "==", "0", "or", "self", ".", "global_step", "==", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t\t\t", "if", "val_loss_dict", "is", "not", "None", ":", "\n", "\t\t\t\t\t\t", "self", ".", "checkpoint_me", "(", "val_loss_dict", ",", "is_best", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "self", ".", "checkpoint_me", "(", "loss_dict", ",", "is_best", "=", "False", ")", "\n", "\n", "", "", "if", "self", ".", "global_step", "==", "self", ".", "opts", ".", "max_steps", ":", "\n", "\t\t\t\t\t", "print", "(", "'OMG, finished training!'", ")", "\n", "break", "\n", "\n", "", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.validate": [[115, 143], ["coach_invert.Coach.net.eval", "enumerate", "utils.train_utils.aggregate_loss_dict", "coach_invert.Coach.log_metrics", "coach_invert.Coach.print_metrics", "coach_invert.Coach.net.train", "agg_loss_dict.append", "coach_invert.Coach.parse_and_log_images", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "coach_invert.Coach.net.forward", "coach_invert.Coach.calc_loss", "coach_invert.Coach.net.train", "x.to().float", "y.to().float", "x.to", "y.to"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.train_utils.aggregate_loss_dict", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.print_metrics", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.parse_and_log_images", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.forward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.calc_loss", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train"], ["", "", "", "def", "validate", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "net", ".", "eval", "(", ")", "\n", "agg_loss_dict", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "test_dataloader", ")", ":", "\n", "\t\t\t", "x", ",", "y", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "x", ",", "y", "=", "x", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", ",", "y", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "y_hat", ",", "latent", "=", "self", ".", "net", ".", "forward", "(", "x", ",", "return_latents", "=", "True", ")", "\n", "loss", ",", "cur_loss_dict", ",", "id_logs", "=", "self", ".", "calc_loss", "(", "x", ",", "y", ",", "y_hat", ",", "latent", ")", "\n", "", "agg_loss_dict", ".", "append", "(", "cur_loss_dict", ")", "\n", "\n", "# Logging related", "\n", "self", ".", "parse_and_log_images", "(", "id_logs", ",", "x", ",", "y", ",", "y_hat", ",", "\n", "title", "=", "'images/test/faces'", ",", "\n", "subscript", "=", "'{:04d}'", ".", "format", "(", "batch_idx", ")", ")", "\n", "\n", "# For first step just do sanity test on small amount of data", "\n", "if", "self", ".", "global_step", "==", "0", "and", "batch_idx", ">=", "4", ":", "\n", "\t\t\t\t", "self", ".", "net", ".", "train", "(", ")", "\n", "return", "None", "# Do not log, inaccurate in first batch", "\n", "\n", "", "", "loss_dict", "=", "train_utils", ".", "aggregate_loss_dict", "(", "agg_loss_dict", ")", "\n", "self", ".", "log_metrics", "(", "loss_dict", ",", "prefix", "=", "'test'", ")", "\n", "self", ".", "print_metrics", "(", "loss_dict", ",", "prefix", "=", "'test'", ")", "\n", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.checkpoint_me": [[144, 154], ["coach_invert.Coach.__get_save_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "open", "os.path.join", "f.write", "f.write"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.__get_save_dict"], ["", "def", "checkpoint_me", "(", "self", ",", "loss_dict", ",", "is_best", ")", ":", "\n", "\t\t", "save_name", "=", "'best_model.pt'", "if", "is_best", "else", "'iteration_{}.pt'", ".", "format", "(", "self", ".", "global_step", ")", "\n", "save_dict", "=", "self", ".", "__get_save_dict", "(", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "save_name", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "checkpoint_path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'timestamp.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "\t\t\t", "if", "is_best", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "'**Best**: Step - {}, Loss - {:.3f} \\n{}\\n'", ".", "format", "(", "self", ".", "global_step", ",", "self", ".", "best_val_loss", ",", "loss_dict", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "'Step - {}, \\n{}\\n'", ".", "format", "(", "self", ".", "global_step", ",", "loss_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.configure_optimizers": [[155, 165], ["list", "list", "coach_invert.Coach.net.encoder.parameters", "coach_invert.Coach.net.decoder.module.style.parameters", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "training.ranger.Ranger", "coach_invert.Coach.net.decoder.parameters"], "methods", ["None"], ["", "", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "\t\t", "params", "=", "list", "(", "self", ".", "net", ".", "encoder", ".", "parameters", "(", ")", ")", "\n", "params", "+=", "list", "(", "self", ".", "net", ".", "decoder", ".", "module", ".", "style", ".", "parameters", "(", ")", ")", "# MLP in generator", "\n", "if", "self", ".", "opts", ".", "train_decoder", ":", "\n", "\t\t\t", "params", "+=", "list", "(", "self", ".", "net", ".", "decoder", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "opts", ".", "optim_name", "==", "'adam'", ":", "\n", "\t\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opts", ".", "learning_rate", ")", "\n", "", "else", ":", "\n", "\t\t\t", "optimizer", "=", "Ranger", "(", "params", ",", "lr", "=", "self", ".", "opts", ".", "learning_rate", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.configure_datasets": [[166, 185], ["print", "datasets.images_dataset.ImagesDataset", "datasets.images_dataset.ImagesDataset", "print", "print", "configs.data_configs.DATASETS.keys", "Exception", "len", "len"], "methods", ["None"], ["", "def", "configure_datasets", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "opts", ".", "dataset_type", "not", "in", "data_configs", ".", "DATASETS", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "Exception", "(", "'{} is not a valid dataset_type'", ".", "format", "(", "self", ".", "opts", ".", "dataset_type", ")", ")", "\n", "", "print", "(", "'Loading dataset for {}'", ".", "format", "(", "self", ".", "opts", ".", "dataset_type", ")", ")", "\n", "dataset_args", "=", "data_configs", ".", "DATASETS", "[", "self", ".", "opts", ".", "dataset_type", "]", "\n", "transforms_dict", "=", "dataset_args", "[", "'transforms'", "]", "(", "self", ".", "opts", ")", ".", "get_transforms", "(", ")", "\n", "train_dataset", "=", "ImagesDataset", "(", "source_root", "=", "dataset_args", "[", "'train_source_root'", "]", ",", "\n", "target_root", "=", "dataset_args", "[", "'train_target_root'", "]", ",", "\n", "source_transform", "=", "transforms_dict", "[", "'transform_source'", "]", ",", "\n", "target_transform", "=", "transforms_dict", "[", "'transform_gt_train'", "]", ",", "\n", "opts", "=", "self", ".", "opts", ")", "\n", "test_dataset", "=", "ImagesDataset", "(", "source_root", "=", "dataset_args", "[", "'test_source_root'", "]", ",", "\n", "target_root", "=", "dataset_args", "[", "'test_target_root'", "]", ",", "\n", "source_transform", "=", "transforms_dict", "[", "'transform_source'", "]", ",", "\n", "target_transform", "=", "transforms_dict", "[", "'transform_test'", "]", ",", "\n", "opts", "=", "self", ".", "opts", ")", "\n", "print", "(", "\"Number of training samples: {}\"", ".", "format", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "print", "(", "\"Number of test samples: {}\"", ".", "format", "(", "len", "(", "test_dataset", ")", ")", ")", "\n", "return", "train_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.calc_loss": [[186, 206], ["float", "coach_invert.Coach.id_loss", "float", "float", "torch.mse_loss", "torch.mse_loss", "float", "coach_invert.Coach.lpips_loss", "float"], "methods", ["None"], ["", "def", "calc_loss", "(", "self", ",", "x", ",", "y", ",", "y_hat", ")", ":", "\n", "\t\t", "loss_dict", "=", "{", "}", "\n", "loss", "=", "0.0", "\n", "id_logs", "=", "None", "\n", "if", "self", ".", "opts", ".", "id_lambda", ">", "0", ":", "\n", "\t\t\t", "loss_id", ",", "sim_improvement", ",", "id_logs", "=", "self", ".", "id_loss", "(", "y_hat", ",", "y", ",", "x", ")", "\n", "loss_dict", "[", "'loss_id'", "]", "=", "float", "(", "loss_id", ")", "\n", "loss_dict", "[", "'id_improve'", "]", "=", "float", "(", "sim_improvement", ")", "\n", "loss", "=", "loss_id", "*", "self", ".", "opts", ".", "id_lambda", "\n", "", "if", "self", ".", "opts", ".", "l2_lambda", ">", "0", ":", "\n", "\t\t\t", "loss_l2", "=", "F", ".", "mse_loss", "(", "y_hat", ",", "y", ")", "\n", "loss_dict", "[", "'loss_l2'", "]", "=", "float", "(", "loss_l2", ")", "\n", "loss", "+=", "loss_l2", "*", "self", ".", "opts", ".", "l2_lambda", "\n", "", "if", "self", ".", "opts", ".", "lpips_lambda", ">", "0", ":", "\n", "\t\t\t", "loss_lpips", "=", "self", ".", "lpips_loss", "(", "y_hat", ",", "y", ")", "\n", "loss_dict", "[", "'loss_lpips'", "]", "=", "float", "(", "loss_lpips", ")", "\n", "loss", "+=", "loss_lpips", "*", "self", ".", "opts", ".", "lpips_lambda", "\n", "\n", "", "loss_dict", "[", "'loss'", "]", "=", "float", "(", "loss", ")", "\n", "return", "loss", ",", "loss_dict", ",", "id_logs", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_metrics": [[207, 210], ["metrics_dict.items", "coach_invert.Coach.logger.add_scalar"], "methods", ["None"], ["", "def", "log_metrics", "(", "self", ",", "metrics_dict", ",", "prefix", ")", ":", "\n", "\t\t", "for", "key", ",", "value", "in", "metrics_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "add_scalar", "(", "'{}/{}'", ".", "format", "(", "prefix", ",", "key", ")", ",", "value", ",", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.print_metrics": [[211, 215], ["print", "metrics_dict.items", "print"], "methods", ["None"], ["", "", "def", "print_metrics", "(", "self", ",", "metrics_dict", ",", "prefix", ")", ":", "\n", "\t\t", "print", "(", "'Metrics for {}, step {}'", ".", "format", "(", "prefix", ",", "self", ".", "global_step", ")", ")", "\n", "for", "key", ",", "value", "in", "metrics_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "'\\t{} = '", ".", "format", "(", "key", ")", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.parse_and_log_images": [[216, 229], ["range", "coach_invert.Coach.log_images", "im_data.append", "utils.common.log_input_image", "utils.common.tensor2im", "utils.common.tensor2im"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_images", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.log_input_image", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im"], ["", "", "def", "parse_and_log_images", "(", "self", ",", "id_logs", ",", "x", ",", "y", ",", "y_hat", ",", "title", ",", "subscript", "=", "None", ",", "display_count", "=", "2", ")", ":", "\n", "\t\t", "im_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "display_count", ")", ":", "\n", "\t\t\t", "cur_im_data", "=", "{", "\n", "'input_face'", ":", "common", ".", "log_input_image", "(", "x", "[", "i", "]", ",", "self", ".", "opts", ")", ",", "\n", "'target_face'", ":", "common", ".", "tensor2im", "(", "y", "[", "i", "]", ")", ",", "\n", "'output_face'", ":", "common", ".", "tensor2im", "(", "y_hat", "[", "i", "]", ")", ",", "\n", "}", "\n", "if", "id_logs", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "key", "in", "id_logs", "[", "i", "]", ":", "\n", "\t\t\t\t\t", "cur_im_data", "[", "key", "]", "=", "id_logs", "[", "i", "]", "[", "key", "]", "\n", "", "", "im_data", ".", "append", "(", "cur_im_data", ")", "\n", "", "self", ".", "log_images", "(", "title", ",", "im_data", "=", "im_data", ",", "subscript", "=", "subscript", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.log_images": [[230, 242], ["utils.common.vis_faces", "os.makedirs", "utils.common.vis_faces.savefig", "matplotlib.close", "matplotlib.close", "os.path.join", "os.path.join", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.vis_faces"], ["", "def", "log_images", "(", "self", ",", "name", ",", "im_data", ",", "subscript", "=", "None", ",", "log_latest", "=", "False", ")", ":", "\n", "\t\t", "fig", "=", "common", ".", "vis_faces", "(", "im_data", ")", "\n", "step", "=", "self", ".", "global_step", "\n", "if", "log_latest", ":", "\n", "\t\t\t", "step", "=", "0", "\n", "", "if", "subscript", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "log_dir", ",", "name", ",", "'{}_{:04d}.jpg'", ".", "format", "(", "subscript", ",", "step", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "log_dir", ",", "name", ",", "'{:04d}.jpg'", ".", "format", "(", "step", ")", ")", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "exist_ok", "=", "True", ")", "\n", "fig", ".", "savefig", "(", "path", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.__get_save_dict": [[243, 252], ["coach_invert.Coach.net.state_dict", "vars"], "methods", ["None"], ["", "def", "__get_save_dict", "(", "self", ")", ":", "\n", "\t\t", "save_dict", "=", "{", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "'opts'", ":", "vars", "(", "self", ".", "opts", ")", "\n", "}", "\n", "# save the latent avg in state_dict for inference if truncation of w was used during training", "\n", "if", "self", ".", "opts", ".", "start_from_latent_avg", ":", "\n", "\t\t\t", "save_dict", "[", "'latent_avg'", "]", "=", "self", ".", "net", ".", "latent_avg", "\n", "", "return", "save_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.ranger.Ranger.__init__": [[31, 74], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["\t", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "# lr", "\n", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "N_sma_threshhold", "=", "5", ",", "# Ranger options", "\n", "betas", "=", "(", ".95", ",", "0.999", ")", ",", "eps", "=", "1e-5", ",", "weight_decay", "=", "0", ",", "# Adam options", "\n", "use_gc", "=", "True", ",", "gc_conv_only", "=", "False", "\n", "# Gradient centralization on or off, applied to conv layers only or conv + fc layers", "\n", ")", ":", "\n", "\n", "# parameter checks", "\n", "\t\t", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Invalid slow update rate: {alpha}'", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Invalid lookahead steps: {k}'", ")", "\n", "", "if", "not", "lr", ">", "0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Invalid Learning Rate: {lr}'", ")", "\n", "", "if", "not", "eps", ">", "0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Invalid eps: {eps}'", ")", "\n", "\n", "# parameter comments:", "\n", "# beta1 (momentum) of .95 seems to work better than .90...", "\n", "# N_sma_threshold of 5 seems better in testing than 4.", "\n", "# In both cases, worth testing on your dataset (.90 vs .95, 4 vs 5) to make sure which works best for you.", "\n", "\n", "# prep defaults and init torch.optim base", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "k", "=", "k", ",", "step_counter", "=", "0", ",", "betas", "=", "betas", ",", "N_sma_threshhold", "=", "N_sma_threshhold", ",", "\n", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "# adjustable threshold", "\n", "self", ".", "N_sma_threshhold", "=", "N_sma_threshhold", "\n", "\n", "# look ahead params", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "k", "=", "k", "\n", "\n", "# radam buffer for state", "\n", "self", ".", "radam_buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "\n", "# gc on or off", "\n", "self", ".", "use_gc", "=", "use_gc", "\n", "\n", "# level of gradient centralization", "\n", "self", ".", "gc_gradient_threshold", "=", "3", "if", "gc_conv_only", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.ranger.Ranger.__setstate__": [[75, 77], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.training.ranger.Ranger.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "\t\t", "super", "(", "Ranger", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.ranger.Ranger.step": [[78, 165], ["p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.empty_like", "state[].copy_", "state[].type_as", "state[].type_as", "p.grad.data.float.dim", "p.grad.data.float.add_", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "slow_p.add_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.grad.data.float.mean", "math.sqrt", "exp_avg_sq.sqrt", "tuple", "range", "p.grad.data.float.dim"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\t\t", "loss", "=", "None", "\n", "\n", "# Evaluate averages and grad, update param tensors", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "\t\t\t", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "\t\t\t\t", "if", "p", ".", "grad", "is", "None", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "\t\t\t\t\t", "raise", "RuntimeError", "(", "'Ranger optimizer does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "# get state dict for this param", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "# if first time to run...init dictionary with our desired entries", "\n", "# if self.first_run_check==0:", "\n", "# self.first_run_check=1", "\n", "# print(\"Initializing slow buffer...should not see this at load from saved model!\")", "\n", "\t\t\t\t\t", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "\n", "# look ahead weight storage now in state dict", "\n", "state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "p", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "# begin computations", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "# GC operation for Conv layers and FC layers", "\n", "if", "grad", ".", "dim", "(", ")", ">", "self", ".", "gc_gradient_threshold", ":", "\n", "\t\t\t\t\t", "grad", ".", "add_", "(", "-", "grad", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "1", ",", "grad", ".", "dim", "(", ")", ")", ")", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# compute variance mov avg", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "# compute mean moving avg", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "buffered", "=", "self", ".", "radam_buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "\t\t\t\t\t", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "\t\t\t\t\t\t", "step_size", "=", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "\n", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "\t\t\t\t\t", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# apply lr", "\n", "", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "\t\t\t\t\t", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "# integrated look ahead...", "\n", "# we do it at the param level instead of group level", "\n", "if", "state", "[", "'step'", "]", "%", "group", "[", "'k'", "]", "==", "0", ":", "\n", "\t\t\t\t\t", "slow_p", "=", "state", "[", "'slow_buffer'", "]", "# get access to slow param tensor", "\n", "slow_p", ".", "add_", "(", "self", ".", "alpha", ",", "p", ".", "data", "-", "slow_p", ")", "# (fast weights - slow weights) * alpha", "\n", "p", ".", "data", ".", "copy_", "(", "slow_p", ")", "# copy interpolated weights to RAdam param tensor", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.scripts.inference.run": [[21, 98], ["options.test_options.TestOptions().parse", "os.makedirs", "os.makedirs", "torch.load", "argparse.Namespace.update", "argparse.Namespace", "models.style_transformer.StyleTransformer", "models.style_transformer.StyleTransformer.eval", "models.style_transformer.StyleTransformer.cuda", "print", "datasets.inference_dataset.InferenceDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "os.path.join", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "vars", "range", "numpy.mean", "numpy.std", "open", "f.write", "options.test_options.TestOptions", "len", "int", "torch.no_grad", "input_batch.cuda().float", "time.time", "models.style_transformer.StyleTransformer.", "result_batch.cuda().float.cuda().float", "time.time", "global_time.append", "utils.common.tensor2im", "os.path.join", "PIL.Image.fromarray().save", "TestOptions().parse.resize_factors.split", "utils.common.log_input_image", "numpy.concatenate", "PIL.Image.fromarray().save", "os.path.basename", "input_batch.cuda", "result_batch.cuda().float.cuda", "os.path.join", "PIL.Image.fromarray", "numpy.array", "numpy.array", "PIL.Image.fromarray", "os.path.basename", "numpy.array", "utils.common.log_input_image.resize", "utils.common.tensor2im.resize"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.log_input_image"], ["def", "run", "(", ")", ":", "\n", "    ", "test_opts", "=", "TestOptions", "(", ")", ".", "parse", "(", ")", "\n", "\n", "if", "test_opts", ".", "resize_factors", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "\n", "test_opts", ".", "resize_factors", ".", "split", "(", "','", ")", ")", "==", "1", ",", "\"When running inference, provide a single downsampling factor!\"", "\n", "out_path_results", "=", "os", ".", "path", ".", "join", "(", "test_opts", ".", "exp_dir", ",", "'inference_results'", ",", "\n", "'downsampling_{}'", ".", "format", "(", "test_opts", ".", "resize_factors", ")", ")", "\n", "out_path_coupled", "=", "os", ".", "path", ".", "join", "(", "test_opts", ".", "exp_dir", ",", "'inference_coupled'", ",", "\n", "'downsampling_{}'", ".", "format", "(", "test_opts", ".", "resize_factors", ")", ")", "\n", "", "else", ":", "\n", "        ", "out_path_results", "=", "os", ".", "path", ".", "join", "(", "test_opts", ".", "exp_dir", ",", "'inference_results'", ")", "\n", "out_path_coupled", "=", "os", ".", "path", ".", "join", "(", "test_opts", ".", "exp_dir", ",", "'inference_coupled'", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "out_path_results", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "out_path_coupled", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# update test options with options used during training", "\n", "ckpt", "=", "torch", ".", "load", "(", "test_opts", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "opts", "=", "ckpt", "[", "'opts'", "]", "\n", "opts", ".", "update", "(", "vars", "(", "test_opts", ")", ")", "\n", "if", "'learn_in_w'", "not", "in", "opts", ":", "\n", "        ", "opts", "[", "'learn_in_w'", "]", "=", "False", "\n", "", "if", "'output_size'", "not", "in", "opts", ":", "\n", "        ", "opts", "[", "'output_size'", "]", "=", "1024", "\n", "", "opts", "=", "Namespace", "(", "**", "opts", ")", "\n", "\n", "net", "=", "StyleTransformer", "(", "opts", ")", "\n", "net", ".", "eval", "(", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Loading dataset for {}'", ".", "format", "(", "opts", ".", "dataset_type", ")", ")", "\n", "dataset_args", "=", "data_configs", ".", "DATASETS", "[", "opts", ".", "dataset_type", "]", "\n", "transforms_dict", "=", "dataset_args", "[", "'transforms'", "]", "(", "opts", ")", ".", "get_transforms", "(", ")", "\n", "dataset", "=", "InferenceDataset", "(", "root", "=", "opts", ".", "data_path", ",", "\n", "transform", "=", "transforms_dict", "[", "'transform_inference'", "]", ",", "\n", "opts", "=", "opts", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "opts", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "opts", ".", "test_workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "global_i", "=", "0", "\n", "global_time", "=", "[", "]", "\n", "for", "input_batch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_cuda", "=", "input_batch", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "result_batch", "=", "net", "(", "input_cuda", ",", "randomize_noise", "=", "True", ",", "resize", "=", "opts", ".", "resize_outputs", ")", "\n", "result_batch", "=", "result_batch", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "global_time", ".", "append", "(", "toc", "-", "tic", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "opts", ".", "test_batch_size", ")", ":", "\n", "            ", "result", "=", "tensor2im", "(", "result_batch", "[", "i", "]", ")", "\n", "im_path", "=", "dataset", ".", "paths", "[", "global_i", "]", "\n", "\n", "if", "opts", ".", "couple_outputs", "or", "global_i", "%", "100", "==", "0", ":", "\n", "                ", "input_im", "=", "log_input_image", "(", "input_batch", "[", "i", "]", ",", "opts", ")", "\n", "resize_amount", "=", "(", "256", ",", "256", ")", "if", "opts", ".", "resize_outputs", "else", "(", "opts", ".", "output_size", ",", "opts", ".", "output_size", ")", "\n", "res", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "input_im", ".", "resize", "(", "resize_amount", ")", ")", ",", "\n", "np", ".", "array", "(", "result", ".", "resize", "(", "resize_amount", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "Image", ".", "fromarray", "(", "res", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path_coupled", ",", "os", ".", "path", ".", "basename", "(", "im_path", ")", ")", ")", "\n", "\n", "", "im_save_path", "=", "os", ".", "path", ".", "join", "(", "out_path_results", ",", "os", ".", "path", ".", "basename", "(", "im_path", ")", ")", "\n", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "result", ")", ")", ".", "save", "(", "im_save_path", ")", "\n", "\n", "global_i", "+=", "1", "\n", "\n", "", "", "stats_path", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'stats.txt'", ")", "\n", "result_str", "=", "'Runtime {:.4f}+-{:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "global_time", ")", ",", "np", ".", "std", "(", "global_time", ")", ")", "\n", "print", "(", "result_str", ")", "\n", "\n", "with", "open", "(", "stats_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "result_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.scripts.train_ref_edit.main": [[16, 29], ["options.train_options.TrainOptions().parse", "os.path.exists", "os.makedirs", "vars", "pprint.pprint", "training.coach_ref_edit.Coach", "training.coach_ref_edit.Coach.train", "Exception", "open", "json.dump", "options.train_options.TrainOptions", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train"], ["def", "main", "(", ")", ":", "\n", "\t", "opts", "=", "TrainOptions", "(", ")", ".", "parse", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "opts", ".", "exp_dir", ")", ":", "\n", "\t\t", "raise", "Exception", "(", "'Oops... {} already exists'", ".", "format", "(", "opts", ".", "exp_dir", ")", ")", "\n", "", "os", ".", "makedirs", "(", "opts", ".", "exp_dir", ")", "\n", "\n", "opts_dict", "=", "vars", "(", "opts", ")", "\n", "pprint", ".", "pprint", "(", "opts_dict", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'opt.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "opts_dict", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "coach", "=", "Coach", "(", "opts", ")", "\n", "coach", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.scripts.train.main": [[17, 30], ["options.train_options.TrainOptions().parse", "os.path.exists", "os.makedirs", "vars", "pprint.pprint", "training.coach_invert.Coach", "training.coach_invert.Coach.train", "Exception", "open", "json.dump", "options.train_options.TrainOptions", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train"], ["def", "main", "(", ")", ":", "\n", "\t", "opts", "=", "TrainOptions", "(", ")", ".", "parse", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "opts", ".", "exp_dir", ")", ":", "\n", "\t\t", "raise", "Exception", "(", "'Oops... {} already exists'", ".", "format", "(", "opts", ".", "exp_dir", ")", ")", "\n", "", "os", ".", "makedirs", "(", "opts", ".", "exp_dir", ")", "\n", "\n", "opts_dict", "=", "vars", "(", "opts", ")", "\n", "pprint", ".", "pprint", "(", "opts_dict", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'opt.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "opts_dict", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "coach", "=", "Coach", "(", "opts", ")", "\n", "coach", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.scripts.train_label_edit.main": [[16, 29], ["options.train_options.TrainOptions().parse", "os.path.exists", "os.makedirs", "vars", "pprint.pprint", "training.coach_label_edit.Coach", "training.coach_label_edit.Coach.train", "Exception", "open", "json.dump", "options.train_options.TrainOptions", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse", "home.repos.pwc.inspect_result.sapphire497_style-transformer.training.coach_invert.Coach.train"], ["def", "main", "(", ")", ":", "\n", "\t", "opts", "=", "TrainOptions", "(", ")", ".", "parse", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "opts", ".", "exp_dir", ")", ":", "\n", "\t\t", "raise", "Exception", "(", "'Oops... {} already exists'", ".", "format", "(", "opts", ".", "exp_dir", ")", ")", "\n", "", "os", ".", "makedirs", "(", "opts", ".", "exp_dir", ")", "\n", "\n", "opts_dict", "=", "vars", "(", "opts", ")", "\n", "pprint", ".", "pprint", "(", "opts_dict", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opts", ".", "exp_dir", ",", "'opt.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "opts_dict", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "coach", "=", "Coach", "(", "opts", ")", "\n", "coach", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.scripts.inference_edit.run": [[25, 126], ["options.test_options.TestOptions().parse", "os.makedirs", "torch.load", "torch.load", "argparse.Namespace.update", "argparse.Namespace", "models.edit_transformer.EditTransformer", "models.edit_transformer.EditTransformer.eval", "models.edit_transformer.EditTransformer.cuda", "print", "datasets.images_dataset_edit.ImagesDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "vars", "len", "options.test_options.TestOptions", "int", "torch.no_grad", "torch.no_grad", "src_w[].expand", "models.edit_transformer.EditTransformer.forward", "range", "src_img.cuda().float", "ref_img.cuda().float", "src_w.cuda().float", "ref_w.cuda().float", "utils.common.tensor2im", "utils.common.tensor2im", "utils.common.tensor2im", "numpy.concatenate", "PIL.Image.fromarray().save", "os.path.join", "src_img.cuda", "ref_img.cuda", "src_w.cuda", "ref_w.cuda", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.fromarray", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.forward", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im", "home.repos.pwc.inspect_result.sapphire497_style-transformer.utils.common.tensor2im"], ["def", "run", "(", ")", ":", "\n", "    ", "test_opts", "=", "TestOptions", "(", ")", ".", "parse", "(", ")", "\n", "\n", "out_path_results", "=", "test_opts", ".", "exp_dir", "\n", "os", ".", "makedirs", "(", "out_path_results", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# update test options with options used during training", "\n", "ckpt", "=", "torch", ".", "load", "(", "test_opts", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "opts", "=", "ckpt", "[", "'opts'", "]", "\n", "opts", ".", "update", "(", "vars", "(", "test_opts", ")", ")", "\n", "opts", "=", "Namespace", "(", "**", "opts", ")", "\n", "\n", "net", "=", "EditTransformer", "(", "opts", ")", "\n", "net", ".", "eval", "(", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Loading dataset for {}'", ".", "format", "(", "opts", ".", "dataset_type", ")", ")", "\n", "dataset_args", "=", "data_configs", ".", "DATASETS", "[", "opts", ".", "dataset_type", "]", "\n", "transforms_dict", "=", "dataset_args", "[", "'transforms'", "]", "(", "opts", ")", ".", "get_transforms", "(", ")", "\n", "# dataset = ImagesDataset(source_root='/scratch/hxq/psp/celeba_attr/bangs/testB_i',", "\n", "#                         source_label_root='/scratch/hxq/psp/celeba_attr/bangs/testB_w',", "\n", "#                         target_root='/scratch/hxq/psp/celeba_attr/bangs/testA_i',", "\n", "#                         target_label_root='/scratch/hxq/psp/celeba_attr/bangs/testA_w',", "\n", "#                         source_transform=None,", "\n", "#                         target_transform=transforms_dict['transform_test'],", "\n", "#                         opts=opts)", "\n", "# dataset = ImagesDataset(source_root='/scratch/hxq/psp/celeba_attr/lipstick/testB_i',", "\n", "#                         source_label_root='/scratch/hxq/psp/celeba_attr/lipstick/testB_w',", "\n", "#                         target_root='/scratch/hxq/psp/celeba_attr/lipstick/testA_i',", "\n", "#                         target_label_root='/scratch/hxq/psp/celeba_attr/lipstick/testA_w',", "\n", "#                         source_transform=None,", "\n", "#                         target_transform=transforms_dict['transform_test'],", "\n", "#                         opts=opts)", "\n", "# dataset = ImagesDataset(source_root='/scratch/hxq/psp/celeba_attr/beard/testB_i',", "\n", "#                         source_label_root='/scratch/hxq/psp/celeba_attr/beard/testB_w',", "\n", "#                         target_root='/scratch/hxq/psp/celeba_attr/beard/testA_i',", "\n", "#                         target_label_root='/scratch/hxq/psp/celeba_attr/beard/testA_w',", "\n", "#                         source_transform=None,", "\n", "#                         target_transform=transforms_dict['transform_test'],", "\n", "#                         opts=opts)", "\n", "# dataset = ImagesDataset(source_root='/scratch/hxq/psp/celeba_attr/gender/testB_i',", "\n", "#                         source_label_root='/scratch/hxq/psp/celeba_attr/gender/testB_w',", "\n", "#                         target_root='/scratch/hxq/psp/celeba_attr/gender/testA_i',", "\n", "#                         target_label_root='/scratch/hxq/psp/celeba_attr/gender/testA_w',", "\n", "#                         source_transform=None,", "\n", "#                         target_transform=transforms_dict['transform_test'],", "\n", "#                         opts=opts)", "\n", "# dataset = ImagesDataset(source_root='/scratch/hxq/psp/celeba_attr/gender/testA_i',", "\n", "#                         source_label_root='/scratch/hxq/psp/celeba_attr/gender/testA_w',", "\n", "#                         target_root='/scratch/hxq/psp/celeba_attr/gender/testB_i',", "\n", "#                         target_label_root='/scratch/hxq/psp/celeba_attr/gender/testB_w',", "\n", "#                         source_transform=None,", "\n", "#                         target_transform=transforms_dict['transform_test'],", "\n", "#                         opts=opts)", "\n", "# dataset = ImagesDataset(source_root='/scratch/hxq/psp/celeba_attr/mouth/testA_i',", "\n", "#                         source_label_root='/scratch/hxq/psp/celeba_attr/mouth/testA_w',", "\n", "#                         target_root='/scratch/hxq/psp/celeba_attr/mouth/testB_i',", "\n", "#                         target_label_root='/scratch/hxq/psp/celeba_attr/mouth/testB_w',", "\n", "#                         source_transform=None,", "\n", "#                         target_transform=transforms_dict['transform_test'],", "\n", "#                         opts=opts)", "\n", "dataset", "=", "ImagesDataset", "(", "source_root", "=", "'/scratch/hxq/psp/celeba_attr/wavy/testA_i'", ",", "\n", "source_label_root", "=", "'/scratch/hxq/psp/celeba_attr/wavy/testA_w'", ",", "\n", "target_root", "=", "'/scratch/hxq/psp/celeba_attr/wavy/testB_i'", ",", "\n", "target_label_root", "=", "'/scratch/hxq/psp/celeba_attr/wavy/testB_w'", ",", "\n", "source_transform", "=", "None", ",", "\n", "target_transform", "=", "transforms_dict", "[", "'transform_test'", "]", ",", "\n", "opts", "=", "opts", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "opts", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "opts", ".", "test_workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "if", "opts", ".", "n_images", "is", "None", ":", "\n", "        ", "opts", ".", "n_images", "=", "len", "(", "dataset", ")", "\n", "\n", "", "global_i", "=", "0", "\n", "for", "input_batch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "# if global_i >= opts.n_images:", "\n", "# break", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "src_img", ",", "ref_img", ",", "src_w", ",", "ref_w", "=", "input_batch", "\n", "src_img", ",", "ref_img", ",", "src_w", ",", "ref_w", "=", "src_img", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "ref_img", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "src_w", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "ref_w", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "src_w_0", "=", "src_w", "[", "0", "]", ".", "expand", "(", "opts", ".", "test_batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "mix_img", ",", "mix_w", "=", "net", ".", "forward", "(", "src_w_0", ",", "ref_w", ",", "return_images", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "opts", ".", "test_batch_size", ")", ":", "\n", "                ", "im_path", "=", "dataset", ".", "source_paths", "[", "global_i", "]", "\n", "src", "=", "tensor2im", "(", "src_img", "[", "0", "]", ")", "\n", "ref", "=", "tensor2im", "(", "ref_img", "[", "i", "]", ")", "\n", "mix", "=", "tensor2im", "(", "mix_img", "[", "i", "]", ")", "\n", "\n", "res", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "src", ")", ",", "\n", "np", ".", "array", "(", "ref", ")", ",", "\n", "np", ".", "array", "(", "mix", ")", "]", ",", "axis", "=", "1", ")", "\n", "Image", ".", "fromarray", "(", "res", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path_results", ",", "os", ".", "path", ".", "basename", "(", "im_path", ")", ")", ")", "\n", "\n", "global_i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.scripts.generate_data.run": [[18, 61], ["options.test_options.TestOptions().parse", "torch.load", "argparse.Namespace.update", "argparse.Namespace", "models.style_transformer.StyleTransformer", "models.style_transformer.StyleTransformer.eval", "models.style_transformer.StyleTransformer.cuda", "print", "datasets.inference_dataset.InferenceDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "numpy.save", "vars", "range", "options.test_options.TestOptions", "int", "torch.no_grad", "input_batch.cuda().float", "models.style_transformer.StyleTransformer.", "latent.cpu().numpy.cpu().numpy", "latents.append", "input_batch.cuda", "latent.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse"], ["def", "run", "(", ")", ":", "\n", "    ", "test_opts", "=", "TestOptions", "(", ")", ".", "parse", "(", ")", "\n", "\n", "out_path_w", "=", "'celebaha_w.npy'", "\n", "\n", "# update test options with options used during training", "\n", "ckpt", "=", "torch", ".", "load", "(", "test_opts", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "opts", "=", "ckpt", "[", "'opts'", "]", "\n", "opts", ".", "update", "(", "vars", "(", "test_opts", ")", ")", "\n", "opts", "=", "Namespace", "(", "**", "opts", ")", "\n", "\n", "net", "=", "StyleTransformer", "(", "opts", ")", "\n", "net", ".", "eval", "(", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Loading dataset for {}'", ".", "format", "(", "opts", ".", "dataset_type", ")", ")", "\n", "dataset_args", "=", "data_configs", ".", "DATASETS", "[", "opts", ".", "dataset_type", "]", "\n", "transforms_dict", "=", "dataset_args", "[", "'transforms'", "]", "(", "opts", ")", ".", "get_transforms", "(", ")", "\n", "dataset", "=", "InferenceDataset", "(", "root", "=", "opts", ".", "data_path", ",", "\n", "transform", "=", "transforms_dict", "[", "'transform_inference'", "]", ",", "\n", "opts", "=", "opts", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "opts", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "int", "(", "opts", ".", "test_workers", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "global_i", "=", "0", "\n", "latents", "=", "[", "]", "\n", "for", "input_batch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "        ", "if", "global_i", ">=", "opts", ".", "n_images", ":", "\n", "            ", "break", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_cuda", "=", "input_batch", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "_", ",", "latent", "=", "net", "(", "input_cuda", ",", "randomize_noise", "=", "True", ",", "resize", "=", "opts", ".", "resize_outputs", ",", "return_latents", "=", "True", ")", "\n", "latent", "=", "latent", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "opts", ".", "test_batch_size", ")", ":", "\n", "            ", "result", "=", "latent", "[", "i", "]", "\n", "latents", ".", "append", "(", "result", ")", "\n", "global_i", "+=", "1", "\n", "\n", "", "", "np", ".", "save", "(", "out_path_w", ",", "latents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.edit_transformer.EditTransformer.__init__": [[20, 32], ["torch.nn.Module.__init__", "edit_transformer.EditTransformer.set_opts", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.AdaptiveAvgPool2d", "edit_transformer.EditTransformer.load_weights", "models.encoders.edit_transformer_encoders.EditTransformerEncoder", "models.stylegan2.model.Generator", "models.encoders.edit_transformer_encoders.LCNet_40", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.set_opts", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.load_weights"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "super", "(", "EditTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "set_opts", "(", "opts", ")", "\n", "# compute number of style inputs based on the output resolution", "\n", "self", ".", "opts", ".", "n_styles", "=", "int", "(", "math", ".", "log", "(", "self", ".", "opts", ".", "output_size", ",", "2", ")", ")", "*", "2", "-", "2", "\n", "# Define architecture", "\n", "self", ".", "encoder", "=", "nn", ".", "DataParallel", "(", "EditTransformerEncoder", "(", ")", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "DataParallel", "(", "Generator", "(", "self", ".", "opts", ".", "output_size", ",", "512", ",", "8", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "DataParallel", "(", "LCNet_40", "(", "[", "9216", ",", "2048", ",", "512", "]", ",", "n_classes", "=", "40", ",", "activ", "=", "'leakyrelu'", ")", ")", "\n", "self", ".", "face_pool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "256", ")", ")", "\n", "# Load weights if needed", "\n", "self", ".", "load_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.edit_transformer.EditTransformer.load_weights": [[34, 47], ["print", "torch.load", "edit_transformer.EditTransformer.encoder.load_state_dict", "edit_transformer.EditTransformer.decoder.load_state_dict", "print", "torch.load", "edit_transformer.EditTransformer.decoder.module.load_state_dict", "print", "torch.load", "edit_transformer.EditTransformer.classifier.module.load_state_dict", "edit_transformer.get_keys", "edit_transformer.get_keys"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.get_keys", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.get_keys"], ["", "def", "load_weights", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "opts", ".", "checkpoint_path", "is", "not", "None", ":", "\n", "\t\t\t", "print", "(", "'Loading pSp from checkpoint: {}'", ".", "format", "(", "self", ".", "opts", ".", "checkpoint_path", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "checkpoint_path", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "get_keys", "(", "ckpt", ",", "'encoder'", ")", ",", "strict", "=", "True", ")", "\n", "self", ".", "decoder", ".", "load_state_dict", "(", "get_keys", "(", "ckpt", ",", "'decoder'", ")", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "'Loading decoder weights from pretrained!'", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "stylegan_weights", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "decoder", ".", "module", ".", "load_state_dict", "(", "ckpt", "[", "'g_ema'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Loading classifier weights from pretrained!'", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "classifier_weights", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "classifier", ".", "module", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.edit_transformer.EditTransformer.forward": [[48, 60], ["edit_transformer.EditTransformer.encoder", "edit_transformer.EditTransformer.decoder", "edit_transformer.EditTransformer.face_pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src", ",", "ref", ",", "input_code", "=", "False", ",", "randomize_noise", "=", "True", ",", "return_latents", "=", "False", ",", "return_images", "=", "True", ")", ":", "\n", "\t\t", "if", "input_code", ":", "\n", "\t\t\t", "codes", "=", "src", "\n", "", "else", ":", "\n", "\t\t\t", "codes", "=", "self", ".", "encoder", "(", "src", ",", "ref", ")", "\n", "\n", "", "if", "return_images", ":", "\n", "\t\t\t", "images", ",", "_", "=", "self", ".", "decoder", "(", "[", "codes", "]", ",", "input_is_latent", "=", "True", ",", "randomize_noise", "=", "randomize_noise", ",", "return_latents", "=", "return_latents", ")", "\n", "images", "=", "self", ".", "face_pool", "(", "images", ")", "\n", "return", "images", ",", "codes", "\n", "", "else", ":", "\n", "\t\t\t", "return", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.edit_transformer.EditTransformer.set_opts": [[61, 63], ["None"], "methods", ["None"], ["", "", "def", "set_opts", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.edit_transformer.get_keys": [[11, 16], ["d.items", "len", "len"], "function", ["None"], ["def", "get_keys", "(", "d", ",", "name", ")", ":", "\n", "\t", "if", "'state_dict'", "in", "d", ":", "\n", "\t\t", "d", "=", "d", "[", "'state_dict'", "]", "\n", "", "d_filt", "=", "{", "k", "[", "len", "(", "name", ")", "+", "1", ":", "]", ":", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "[", ":", "len", "(", "name", ")", "]", "==", "name", "}", "\n", "return", "d_filt", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.__init__": [[21, 33], ["torch.nn.Module.__init__", "style_transformer.StyleTransformer.set_opts", "models.encoders.style_transformer_encoders.GradualStyleEncoder", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.AdaptiveAvgPool2d", "style_transformer.StyleTransformer.load_weights", "models.stylegan2.model.Generator", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.set_opts", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.load_weights"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "super", "(", "StyleTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "set_opts", "(", "opts", ")", "\n", "# compute number of style inputs based on the output resolution", "\n", "self", ".", "opts", ".", "n_styles", "=", "int", "(", "math", ".", "log", "(", "self", ".", "opts", ".", "output_size", ",", "2", ")", ")", "*", "2", "-", "2", "\n", "# Define architecture", "\n", "self", ".", "encoder", "=", "style_transformer_encoders", ".", "GradualStyleEncoder", "(", "50", ",", "'ir_se'", ",", "self", ".", "opts", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "DataParallel", "(", "self", ".", "encoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "DataParallel", "(", "Generator", "(", "self", ".", "opts", ".", "output_size", ",", "512", ",", "8", ")", ")", "\n", "self", ".", "face_pool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "256", ")", ")", "\n", "# Load weights if needed", "\n", "self", ".", "load_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.load_weights": [[34, 53], ["print", "torch.load", "style_transformer.StyleTransformer.encoder.load_state_dict", "style_transformer.StyleTransformer.decoder.load_state_dict", "style_transformer.StyleTransformer.__load_latent_avg", "print", "torch.load", "style_transformer.StyleTransformer.encoder.module.load_state_dict", "print", "torch.load", "style_transformer.StyleTransformer.decoder.module.load_state_dict", "style_transformer.get_keys", "style_transformer.get_keys", "style_transformer.StyleTransformer.__load_latent_avg", "style_transformer.StyleTransformer.__load_latent_avg"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.__load_latent_avg", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.get_keys", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.get_keys", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.__load_latent_avg", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.__load_latent_avg"], ["", "def", "load_weights", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "opts", ".", "checkpoint_path", "is", "not", "None", ":", "\n", "\t\t\t", "print", "(", "'Loading style transformer from checkpoint: {}'", ".", "format", "(", "self", ".", "opts", ".", "checkpoint_path", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "checkpoint_path", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "get_keys", "(", "ckpt", ",", "'encoder'", ")", ",", "strict", "=", "True", ")", "\n", "self", ".", "decoder", ".", "load_state_dict", "(", "get_keys", "(", "ckpt", ",", "'decoder'", ")", ",", "strict", "=", "True", ")", "\n", "self", ".", "__load_latent_avg", "(", "ckpt", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "'Loading encoders weights from irse50!'", ")", "\n", "encoder_ckpt", "=", "torch", ".", "load", "(", "model_paths", "[", "'ir_se50'", "]", ")", "\n", "self", ".", "encoder", ".", "module", ".", "load_state_dict", "(", "encoder_ckpt", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Loading decoder weights from pretrained!'", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "(", "self", ".", "opts", ".", "stylegan_weights", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "decoder", ".", "module", ".", "load_state_dict", "(", "ckpt", "[", "'g_ema'", "]", ",", "strict", "=", "False", ")", "\n", "# self.decoder.module.load_state_dict(get_keys(ckpt, 'decoder'), strict=True) # For cars dataset.", "\n", "if", "self", ".", "opts", ".", "learn_in_w", ":", "\n", "\t\t\t\t", "self", ".", "__load_latent_avg", "(", "ckpt", ",", "repeat", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "__load_latent_avg", "(", "ckpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.forward": [[54, 85], ["style_transformer.StyleTransformer.decoder", "z.expand().flatten.expand().flatten.expand().flatten", "style_transformer.StyleTransformer.decoder.module.style().reshape", "style_transformer.StyleTransformer.encoder", "style_transformer.StyleTransformer.face_pool", "z.expand().flatten.expand().flatten.expand", "style_transformer.StyleTransformer.decoder.module.style", "style_transformer.StyleTransformer.latent_avg.repeat", "style_transformer.StyleTransformer.latent_avg.repeat"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "resize", "=", "True", ",", "input_code", "=", "False", ",", "randomize_noise", "=", "True", ",", "return_latents", "=", "False", ")", ":", "\n", "\t\t", "if", "input_code", ":", "\n", "\t\t\t", "codes", "=", "x", "\n", "", "else", ":", "\n", "# Get w from MLP", "\n", "\t\t\t", "z", "=", "self", ".", "encoder", ".", "module", ".", "z", "\n", "n", ",", "c", "=", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", "\n", "b", "=", "x", ".", "shape", "[", "0", "]", "\n", "z", "=", "z", ".", "expand", "(", "b", ",", "n", ",", "c", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "query", "=", "self", ".", "decoder", ".", "module", ".", "style", "(", "z", ")", ".", "reshape", "(", "b", ",", "n", ",", "c", ")", "\n", "codes", "=", "self", ".", "encoder", "(", "x", ",", "query", ")", "\n", "\n", "# normalize with respect to the center of an average face", "\n", "if", "self", ".", "opts", ".", "start_from_latent_avg", ":", "\n", "\t\t\t\t", "if", "self", ".", "opts", ".", "learn_in_w", ":", "\n", "\t\t\t\t\t", "codes", "=", "codes", "+", "self", ".", "latent_avg", ".", "repeat", "(", "codes", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "codes", "=", "codes", "+", "self", ".", "latent_avg", ".", "repeat", "(", "codes", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "\n", "", "", "", "images", ",", "result_latent", "=", "self", ".", "decoder", "(", "[", "codes", "]", ",", "\n", "input_is_latent", "=", "True", ",", "\n", "randomize_noise", "=", "randomize_noise", ",", "\n", "return_latents", "=", "return_latents", ")", "\n", "\n", "if", "resize", ":", "\n", "\t\t\t", "images", "=", "self", ".", "face_pool", "(", "images", ")", "\n", "\n", "", "if", "return_latents", ":", "\n", "\t\t\t", "return", "images", ",", "result_latent", "\n", "", "else", ":", "\n", "\t\t\t", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.set_opts": [[86, 88], ["None"], "methods", ["None"], ["", "", "def", "set_opts", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.StyleTransformer.__load_latent_avg": [[89, 96], ["ckpt[].to", "style_transformer.StyleTransformer.latent_avg.repeat"], "methods", ["None"], ["", "def", "__load_latent_avg", "(", "self", ",", "ckpt", ",", "repeat", "=", "None", ")", ":", "\n", "\t\t", "if", "'latent_avg'", "in", "ckpt", ":", "\n", "\t\t\t", "self", ".", "latent_avg", "=", "ckpt", "[", "'latent_avg'", "]", ".", "to", "(", "self", ".", "opts", ".", "device", ")", "\n", "if", "repeat", "is", "not", "None", ":", "\n", "\t\t\t\t", "self", ".", "latent_avg", "=", "self", ".", "latent_avg", ".", "repeat", "(", "repeat", ",", "1", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "latent_avg", "=", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.style_transformer.get_keys": [[12, 17], ["d.items", "len", "len"], "function", ["None"], ["def", "get_keys", "(", "d", ",", "name", ")", ":", "\n", "\t", "if", "'state_dict'", "in", "d", ":", "\n", "\t\t", "d", "=", "d", "[", "'state_dict'", "]", "\n", "", "d_filt", "=", "{", "k", "[", "len", "(", "name", ")", "+", "1", ":", "]", ":", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "[", ":", "len", "(", "name", ")", "]", "==", "name", "}", "\n", "return", "d_filt", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.__init__": [[19, 38], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "transformer._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", ",", "normalize_before", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "normalize_before", "=", "normalize_before", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed": [[39, 41], ["None"], "methods", ["None"], ["", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.forward_post": [[42, 65], ["transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.norm3", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.multihead_attn", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward_post", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", ")", ":", "\n", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "query", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "key", "=", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", ",", "\n", "value", "=", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.forward_pre": [[66, 88], ["transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.norm3", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.multihead_attn", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward_pre", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt2", ",", "query_pos", ")", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "tgt2", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt2", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "query", "=", "self", ".", "with_pos_embed", "(", "tgt2", ",", "query_pos", ")", ",", "\n", "key", "=", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", ",", "\n", "value", "=", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt2", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt2", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.forward": [[89, 101], ["transformer.TransformerDecoderLayer.forward_post", "transformer.TransformerDecoderLayer.forward_pre"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.forward_post", "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer.TransformerDecoderLayer.forward_pre"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "normalize_before", ":", "\n", "            ", "return", "self", ".", "forward_pre", "(", "tgt", ",", "memory", ",", "tgt_mask", ",", "memory_mask", ",", "\n", "tgt_key_padding_mask", ",", "memory_key_padding_mask", ",", "pos", ",", "query_pos", ")", "\n", "", "return", "self", ".", "forward_post", "(", "tgt", ",", "memory", ",", "tgt_mask", ",", "memory_mask", ",", "\n", "tgt_key_padding_mask", ",", "memory_key_padding_mask", ",", "pos", ",", "query_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.models.transformer._get_activation_fn": [[103, 112], ["RuntimeError"], "function", ["None"], ["", "", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "\"\"\"Return an activation function given a string\"\"\"", "\n", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "if", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "", "if", "activation", "==", "\"glu\"", ":", "\n", "        ", "return", "F", ".", "glu", "\n", "", "raise", "RuntimeError", "(", "F\"activation should be relu/gelu, not {activation}.\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.PixelNorm.__init__": [[11, 13], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.PixelNorm.forward": [[14, 16], ["torch.rsqrt", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Upsample.__init__": [[30, 43], ["torch.nn.Module.__init__", "model.Upsample.register_buffer", "model.make_kernel"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "factor", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "*", "(", "factor", "**", "2", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n", "p", "=", "kernel", ".", "shape", "[", "0", "]", "-", "factor", "\n", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "pad", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Upsample.forward": [[44, 48], ["models.stylegan2.op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "up", "=", "self", ".", "factor", ",", "down", "=", "1", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Downsample.__init__": [[51, 64], ["torch.nn.Module.__init__", "model.make_kernel", "model.Downsample.register_buffer"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "factor", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n", "p", "=", "kernel", ".", "shape", "[", "0", "]", "-", "factor", "\n", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "pad", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Downsample.forward": [[65, 69], ["models.stylegan2.op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "up", "=", "1", ",", "down", "=", "self", ".", "factor", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Blur.__init__": [[72, 83], ["torch.nn.Module.__init__", "model.make_kernel", "model.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "pad", ",", "upsample_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "\n", "\n", "if", "upsample_factor", ">", "1", ":", "\n", "            ", "kernel", "=", "kernel", "*", "(", "upsample_factor", "**", "2", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Blur.forward": [[84, 88], ["models.stylegan2.op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.EqualConv2d.__init__": [[91, 109], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn", "math.sqrt", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "out_channel", ",", "in_channel", ",", "kernel_size", ",", "kernel_size", ")", "\n", ")", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "in_channel", "*", "kernel_size", "**", "2", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.EqualConv2d.forward": [[110, 120], ["torch.nn.functional.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "\n", "input", ",", "\n", "self", ".", "weight", "*", "self", ".", "scale", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.EqualConv2d.__repr__": [[121, 124], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f'{self.__class__.__name__}({self.weight.shape[1]}, {self.weight.shape[0]},'", "\n", "f' {self.weight.shape[2]}, stride={self.stride}, padding={self.padding})'", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.EqualLinear.__init__": [[129, 146], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn().div_", "torch.nn.Parameter", "torch.zeros().fill_", "math.sqrt", "torch.randn", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_dim", ",", "out_dim", ",", "bias", "=", "True", ",", "bias_init", "=", "0", ",", "lr_mul", "=", "1", ",", "activation", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "out_dim", ",", "in_dim", ")", ".", "div_", "(", "lr_mul", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_dim", ")", ".", "fill_", "(", "bias_init", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "scale", "=", "(", "1", "/", "math", ".", "sqrt", "(", "in_dim", ")", ")", "*", "lr_mul", "\n", "self", ".", "lr_mul", "=", "lr_mul", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.EqualLinear.forward": [[147, 158], ["torch.nn.functional.linear", "models.stylegan2.op.fused_leaky_relu", "torch.nn.functional.linear"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ")", "\n", "out", "=", "fused_leaky_relu", "(", "out", ",", "self", ".", "bias", "*", "self", ".", "lr_mul", ")", "\n", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "\n", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ",", "bias", "=", "self", ".", "bias", "*", "self", ".", "lr_mul", "\n", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.EqualLinear.__repr__": [[159, 162], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f'{self.__class__.__name__}({self.weight.shape[1]}, {self.weight.shape[0]})'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ScaledLeakyReLU.__init__": [[166, 170], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ScaledLeakyReLU.forward": [[171, 175], ["torch.nn.functional.leaky_relu", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "leaky_relu", "(", "input", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "\n", "return", "out", "*", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ModulatedConv2d.__init__": [[178, 225], ["torch.nn.Module.__init__", "torch.nn.Parameter", "model.EqualLinear", "model.Blur", "model.Blur", "math.sqrt", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "style_dim", ",", "\n", "demodulate", "=", "True", ",", "\n", "upsample", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "1e-8", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "out_channel", "=", "out_channel", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "upsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "-", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "+", "1", "\n", "\n", "self", ".", "blur", "=", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ",", "upsample_factor", "=", "factor", ")", "\n", "\n", "", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "blur", "=", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", "\n", "\n", "", "fan_in", "=", "in_channel", "*", "kernel_size", "**", "2", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "1", ",", "out_channel", ",", "in_channel", ",", "kernel_size", ",", "kernel_size", ")", "\n", ")", "\n", "\n", "self", ".", "modulation", "=", "EqualLinear", "(", "style_dim", ",", "in_channel", ",", "bias_init", "=", "1", ")", "\n", "\n", "self", ".", "demodulate", "=", "demodulate", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ModulatedConv2d.__repr__": [[226, 229], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f'{self.__class__.__name__}({self.in_channel}, {self.out_channel}, {self.kernel_size}, '", "\n", "f'upsample={self.upsample}, downsample={self.downsample})'", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ModulatedConv2d.forward": [[232, 275], ["model.ModulatedConv2d.modulation().view", "weight.transpose().reshape.transpose().reshape.view", "torch.rsqrt", "input.view.view.view", "weight.transpose().reshape.transpose().reshape.view", "weight.transpose().reshape.transpose().reshape.transpose().reshape", "torch.nn.functional.conv_transpose2d", "out.view.view.view", "model.ModulatedConv2d.blur", "model.ModulatedConv2d.modulation", "torch.rsqrt.view", "model.ModulatedConv2d.blur", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "weight.transpose().reshape.transpose().reshape.pow().sum", "weight.transpose().reshape.transpose().reshape.transpose", "weight.transpose().reshape.transpose().reshape.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ")", ":", "\n", "        ", "batch", ",", "in_channel", ",", "height", ",", "width", "=", "input", ".", "shape", "\n", "\n", "style", "=", "self", ".", "modulation", "(", "style", ")", ".", "view", "(", "batch", ",", "1", ",", "in_channel", ",", "1", ",", "1", ")", "\n", "# style = style.view(batch, 1, in_channel, 1, 1)", "\n", "weight", "=", "self", ".", "scale", "*", "self", ".", "weight", "*", "style", "\n", "\n", "if", "self", ".", "demodulate", ":", "\n", "            ", "demod", "=", "torch", ".", "rsqrt", "(", "weight", ".", "pow", "(", "2", ")", ".", "sum", "(", "[", "2", ",", "3", ",", "4", "]", ")", "+", "1e-8", ")", "\n", "weight", "=", "weight", "*", "demod", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "weight", "=", "weight", ".", "view", "(", "\n", "batch", "*", "self", ".", "out_channel", ",", "in_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", "\n", ")", "\n", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "1", ",", "batch", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "weight", "=", "weight", ".", "view", "(", "\n", "batch", ",", "self", ".", "out_channel", ",", "in_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", "\n", ")", "\n", "weight", "=", "weight", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "\n", "batch", "*", "in_channel", ",", "self", ".", "out_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", "\n", ")", "\n", "out", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "weight", ",", "padding", "=", "0", ",", "stride", "=", "2", ",", "groups", "=", "batch", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "self", ".", "blur", "(", "out", ")", "\n", "\n", "", "elif", "self", ".", "downsample", ":", "\n", "            ", "input", "=", "self", ".", "blur", "(", "input", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "view", "(", "1", ",", "batch", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "padding", "=", "0", ",", "stride", "=", "2", ",", "groups", "=", "batch", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "\n", "", "else", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "1", ",", "batch", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "padding", "=", "self", ".", "padding", ",", "groups", "=", "batch", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.NoiseInjection.__init__": [[278, 282], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.NoiseInjection.forward": [[283, 289], ["image.new_empty().normal_", "image.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "batch", ",", "_", ",", "height", ",", "width", "=", "image", ".", "shape", "\n", "noise", "=", "image", ".", "new_empty", "(", "batch", ",", "1", ",", "height", ",", "width", ")", ".", "normal_", "(", ")", "\n", "\n", "", "return", "image", "+", "self", ".", "weight", "*", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ConstantInput.__init__": [[292, 296], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "size", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "channel", ",", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ConstantInput.forward": [[297, 302], ["model.ConstantInput.input.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batch", "=", "input", ".", "shape", "[", "0", "]", "\n", "out", "=", "self", ".", "input", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.StyledConv.__init__": [[305, 331], ["torch.nn.Module.__init__", "model.ModulatedConv2d", "model.NoiseInjection", "models.stylegan2.op.FusedLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "False", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "demodulate", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "ModulatedConv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "upsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "demodulate", "=", "demodulate", ",", "\n", ")", "\n", "\n", "self", ".", "noise", "=", "NoiseInjection", "(", ")", "\n", "# self.bias = nn.Parameter(torch.zeros(1, out_channel, 1, 1))", "\n", "# self.activate = ScaledLeakyReLU(0.2)", "\n", "self", ".", "activate", "=", "FusedLeakyReLU", "(", "out_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.StyledConv.forward": [[332, 339], ["model.StyledConv.conv", "model.StyledConv.noise", "model.StyledConv.activate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "noise", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ",", "style", ")", "\n", "out", "=", "self", ".", "noise", "(", "out", ",", "noise", "=", "noise", ")", "\n", "# out = out + self.bias", "\n", "out", "=", "self", ".", "activate", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ToRGB.__init__": [[342, 350], ["torch.nn.Module.__init__", "model.ModulatedConv2d", "torch.nn.Parameter", "model.Upsample", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "style_dim", ",", "upsample", "=", "True", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "upsample", ":", "\n", "            ", "self", ".", "upsample", "=", "Upsample", "(", "blur_kernel", ")", "\n", "\n", "", "self", ".", "conv", "=", "ModulatedConv2d", "(", "in_channel", ",", "3", ",", "1", ",", "style_dim", ",", "demodulate", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ToRGB.forward": [[351, 361], ["model.ToRGB.conv", "model.ToRGB.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "skip", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ",", "style", ")", "\n", "out", "=", "out", "+", "self", ".", "bias", "\n", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "upsample", "(", "skip", ")", "\n", "\n", "out", "=", "out", "+", "skip", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Generator.__init__": [[364, 448], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "model.ConstantInput", "model.StyledConv", "model.ToRGB", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Module", "range", "range", "model.PixelNorm", "layers.append", "math.log", "model.Generator.noises.register_buffer", "model.Generator.convs.append", "model.Generator.convs.append", "model.Generator.to_rgbs.append", "model.EqualLinear", "torch.randn", "model.StyledConv", "model.StyledConv", "model.ToRGB"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "size", ",", "\n", "style_dim", ",", "\n", "n_mlp", ",", "\n", "channel_multiplier", "=", "2", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "lr_mlp", "=", "0.01", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "\n", "layers", "=", "[", "PixelNorm", "(", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_mlp", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "EqualLinear", "(", "\n", "style_dim", ",", "style_dim", ",", "lr_mul", "=", "lr_mlp", ",", "activation", "=", "'fused_lrelu'", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "style", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "self", ".", "input", "=", "ConstantInput", "(", "self", ".", "channels", "[", "4", "]", ")", "\n", "self", ".", "conv1", "=", "StyledConv", "(", "\n", "self", ".", "channels", "[", "4", "]", ",", "self", ".", "channels", "[", "4", "]", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", "\n", ")", "\n", "self", ".", "to_rgb1", "=", "ToRGB", "(", "self", ".", "channels", "[", "4", "]", ",", "style_dim", ",", "upsample", "=", "False", ")", "\n", "\n", "self", ".", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "log_size", "-", "2", ")", "*", "2", "+", "1", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "upsamples", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "to_rgbs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noises", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "in_channel", "=", "self", ".", "channels", "[", "4", "]", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "self", ".", "noises", ".", "register_buffer", "(", "f'noise_{layer_idx}'", ",", "torch", ".", "randn", "(", "*", "shape", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "out_channel", "=", "self", ".", "channels", "[", "2", "**", "i", "]", "\n", "\n", "self", ".", "convs", ".", "append", "(", "\n", "StyledConv", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "True", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "\n", "StyledConv", "(", "\n", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "to_rgbs", ".", "append", "(", "ToRGB", "(", "out_channel", ",", "style_dim", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "n_latent", "=", "self", ".", "log_size", "*", "2", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Generator.make_noise": [[449, 459], ["range", "torch.randn", "range", "noises.append", "torch.randn"], "methods", ["None"], ["", "def", "make_noise", "(", "self", ")", ":", "\n", "        ", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", "\n", "noises", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "2", ",", "2", "**", "2", ",", "device", "=", "device", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                ", "noises", ".", "append", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "i", ",", "2", "**", "i", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "", "return", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Generator.mean_latent": [[460, 467], ["torch.randn", "model.Generator.style().mean", "model.Generator.style"], "methods", ["None"], ["", "def", "mean_latent", "(", "self", ",", "n_latent", ")", ":", "\n", "        ", "latent_in", "=", "torch", ".", "randn", "(", "\n", "n_latent", ",", "self", ".", "style_dim", ",", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", ")", "\n", "latent", "=", "self", ".", "style", "(", "latent_in", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Generator.get_latent": [[468, 470], ["model.Generator.style"], "methods", ["None"], ["", "def", "get_latent", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "style", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Generator.forward": [[471, 544], ["model.Generator.input", "model.Generator.conv1", "model.Generator.to_rgb1", "zip", "len", "styles[].unsqueeze().repeat", "styles[].unsqueeze().repeat", "torch.cat", "conv1", "conv2", "to_rgb", "model.Generator.style", "style_t.append", "styles[].unsqueeze().repeat", "random.randint", "getattr", "styles[].unsqueeze", "styles[].unsqueeze", "range", "styles[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "styles", ",", "\n", "return_latents", "=", "False", ",", "\n", "return_features", "=", "False", ",", "\n", "inject_index", "=", "None", ",", "\n", "truncation", "=", "1", ",", "\n", "truncation_latent", "=", "None", ",", "\n", "input_is_latent", "=", "False", ",", "\n", "noise", "=", "None", ",", "\n", "randomize_noise", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "input_is_latent", ":", "\n", "            ", "styles", "=", "[", "self", ".", "style", "(", "s", ")", "for", "s", "in", "styles", "]", "\n", "\n", "", "if", "noise", "is", "None", ":", "\n", "            ", "if", "randomize_noise", ":", "\n", "                ", "noise", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "", "else", ":", "\n", "                ", "noise", "=", "[", "\n", "getattr", "(", "self", ".", "noises", ",", "f'noise_{i}'", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "\n", "]", "\n", "\n", "", "", "if", "truncation", "<", "1", ":", "\n", "            ", "style_t", "=", "[", "]", "\n", "\n", "for", "style", "in", "styles", ":", "\n", "                ", "style_t", ".", "append", "(", "\n", "truncation_latent", "+", "truncation", "*", "(", "style", "-", "truncation_latent", ")", "\n", ")", "\n", "\n", "", "styles", "=", "style_t", "\n", "\n", "", "if", "len", "(", "styles", ")", "<", "2", ":", "\n", "            ", "inject_index", "=", "self", ".", "n_latent", "\n", "\n", "if", "styles", "[", "0", "]", ".", "ndim", "<", "3", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "inject_index", "is", "None", ":", "\n", "                ", "inject_index", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_latent", "-", "1", ")", "\n", "\n", "", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "latent2", "=", "styles", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_latent", "-", "inject_index", ",", "1", ")", "\n", "\n", "latent", "=", "torch", ".", "cat", "(", "[", "latent", ",", "latent2", "]", ",", "1", ")", "\n", "\n", "", "out", "=", "self", ".", "input", "(", "latent", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ",", "latent", "[", ":", ",", "0", "]", ",", "noise", "=", "noise", "[", "0", "]", ")", "\n", "\n", "skip", "=", "self", ".", "to_rgb1", "(", "out", ",", "latent", "[", ":", ",", "1", "]", ")", "\n", "\n", "i", "=", "1", "\n", "for", "conv1", ",", "conv2", ",", "noise1", ",", "noise2", ",", "to_rgb", "in", "zip", "(", "\n", "self", ".", "convs", "[", ":", ":", "2", "]", ",", "self", ".", "convs", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "2", ":", ":", "2", "]", ",", "self", ".", "to_rgbs", "\n", ")", ":", "\n", "            ", "out", "=", "conv1", "(", "out", ",", "latent", "[", ":", ",", "i", "]", ",", "noise", "=", "noise1", ")", "\n", "out", "=", "conv2", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "1", "]", ",", "noise", "=", "noise2", ")", "\n", "skip", "=", "to_rgb", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "2", "]", ",", "skip", ")", "\n", "\n", "i", "+=", "2", "\n", "\n", "", "image", "=", "skip", "\n", "\n", "if", "return_latents", ":", "\n", "            ", "return", "image", ",", "styles", "[", "0", "]", "#latent", "\n", "", "elif", "return_features", ":", "\n", "            ", "return", "image", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ConvLayer.__init__": [[547, 593], ["layers.append", "torch.nn.Sequential.__init__", "layers.append", "model.EqualConv2d", "model.Blur", "layers.append", "layers.append", "len", "models.stylegan2.op.FusedLeakyReLU", "model.ScaledLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "bias", "=", "True", ",", "\n", "activate", "=", "True", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "stride", "=", "2", "\n", "self", ".", "padding", "=", "0", "\n", "\n", "", "else", ":", "\n", "            ", "stride", "=", "1", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "\n", "EqualConv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "activate", ":", "\n", "            ", "if", "bias", ":", "\n", "                ", "layers", ".", "append", "(", "FusedLeakyReLU", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "ScaledLeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ResBlock.__init__": [[596, 604], ["torch.nn.Module.__init__", "model.ConvLayer", "model.ConvLayer", "model.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "in_channel", ",", "in_channel", ",", "3", ")", "\n", "self", ".", "conv2", "=", "ConvLayer", "(", "in_channel", ",", "out_channel", ",", "3", ",", "downsample", "=", "True", ")", "\n", "\n", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "out_channel", ",", "1", ",", "downsample", "=", "True", ",", "activate", "=", "False", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.ResBlock.forward": [[606, 614], ["model.ResBlock.conv1", "model.ResBlock.conv2", "model.ResBlock.skip", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "out", "=", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Discriminator.__init__": [[617, 654], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "model.ConvLayer", "torch.nn.Sequential", "model.ConvLayer", "math.log", "convs.append", "model.EqualLinear", "model.EqualLinear", "model.ResBlock"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "channel_multiplier", "=", "2", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "3", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "stddev_group", "=", "4", "\n", "self", ".", "stddev_feat", "=", "1", "\n", "\n", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", "+", "1", ",", "channels", "[", "4", "]", ",", "3", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "channels", "[", "4", "]", "*", "4", "*", "4", ",", "channels", "[", "4", "]", ",", "activation", "=", "'fused_lrelu'", ")", ",", "\n", "EqualLinear", "(", "channels", "[", "4", "]", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.Discriminator.forward": [[656, 675], ["model.Discriminator.convs", "min", "model.Discriminator.view", "torch.sqrt", "stddev.repeat.repeat.mean().squeeze", "stddev.repeat.repeat.repeat", "torch.cat", "model.Discriminator.final_conv", "model.Discriminator.view", "model.Discriminator.final_linear", "stddev.repeat.repeat.var", "stddev.repeat.repeat.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "input", ")", "\n", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "group", "=", "min", "(", "batch", ",", "self", ".", "stddev_group", ")", "\n", "stddev", "=", "out", ".", "view", "(", "\n", "group", ",", "-", "1", ",", "self", ".", "stddev_feat", ",", "channel", "//", "self", ".", "stddev_feat", ",", "height", ",", "width", "\n", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "stddev", ".", "var", "(", "0", ",", "unbiased", "=", "False", ")", "+", "1e-8", ")", "\n", "stddev", "=", "stddev", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", ".", "squeeze", "(", "2", ")", "\n", "stddev", "=", "stddev", ".", "repeat", "(", "group", ",", "1", ",", "height", ",", "width", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "stddev", "]", ",", "1", ")", "\n", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.stylegan2.model.make_kernel": [[18, 27], ["torch.tensor", "torch.tensor.sum"], "function", ["None"], ["", "", "def", "make_kernel", "(", "k", ")", ":", "\n", "    ", "k", "=", "torch", ".", "tensor", "(", "k", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "if", "k", ".", "ndim", "==", "1", ":", "\n", "        ", "k", "=", "k", "[", "None", ",", ":", "]", "*", "k", "[", ":", ",", "None", "]", "\n", "\n", "", "k", "/=", "k", ".", "sum", "(", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.FusedLeakyReLUFunctionBackward.forward": [[19, 39], ["ctx.save_for_backward", "grad_output.new_empty", "fused.fused_bias_act", "fused.fused_bias_act.sum().detach", "list", "range", "fused.fused_bias_act.sum"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "out", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "empty", "=", "grad_output", ".", "new_empty", "(", "0", ")", "\n", "\n", "grad_input", "=", "fused", ".", "fused_bias_act", "(", "\n", "grad_output", ",", "empty", ",", "out", ",", "3", ",", "1", ",", "negative_slope", ",", "scale", "\n", ")", "\n", "\n", "dim", "=", "[", "0", "]", "\n", "\n", "if", "grad_input", ".", "ndim", ">", "2", ":", "\n", "            ", "dim", "+=", "list", "(", "range", "(", "2", ",", "grad_input", ".", "ndim", ")", ")", "\n", "\n", "", "grad_bias", "=", "grad_input", ".", "sum", "(", "dim", ")", ".", "detach", "(", ")", "\n", "\n", "return", "grad_input", ",", "grad_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.FusedLeakyReLUFunctionBackward.backward": [[40, 48], ["fused.fused_bias_act"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ",", "gradgrad_bias", ")", ":", "\n", "        ", "out", ",", "=", "ctx", ".", "saved_tensors", "\n", "gradgrad_out", "=", "fused", ".", "fused_bias_act", "(", "\n", "gradgrad_input", ",", "gradgrad_bias", ",", "out", ",", "3", ",", "1", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.FusedLeakyReLUFunction.forward": [[51, 60], ["input.new_empty", "fused.fused_bias_act", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "empty", "=", "input", ".", "new_empty", "(", "0", ")", "\n", "out", "=", "fused", ".", "fused_bias_act", "(", "input", ",", "bias", ",", "empty", ",", "3", ",", "0", ",", "negative_slope", ",", "scale", ")", "\n", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.FusedLeakyReLUFunction.backward": [[61, 70], ["FusedLeakyReLUFunctionBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "out", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", ",", "grad_bias", "=", "FusedLeakyReLUFunctionBackward", ".", "apply", "(", "\n", "grad_output", ",", "out", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "grad_input", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.FusedLeakyReLU.__init__": [[73, 79], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channel", ")", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.FusedLeakyReLU.forward": [[80, 82], ["fused_act.fused_leaky_relu"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "fused_leaky_relu", "(", "input", ",", "self", ".", "bias", ",", "self", ".", "negative_slope", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.fused_act.fused_leaky_relu": [[84, 86], ["FusedLeakyReLUFunction.apply"], "function", ["None"], ["", "", "def", "fused_leaky_relu", "(", "input", ",", "bias", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "    ", "return", "FusedLeakyReLUFunction", ".", "apply", "(", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2dBackward.forward": [[18, 58], ["grad_output.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "grad_input.view.view.view", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "grad_output", ",", "kernel", ",", "grad_kernel", ",", "up", ",", "down", ",", "pad", ",", "g_pad", ",", "in_size", ",", "out_size", "\n", ")", ":", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", "=", "g_pad", "\n", "\n", "grad_output", "=", "grad_output", ".", "reshape", "(", "-", "1", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ",", "1", ")", "\n", "\n", "grad_input", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "grad_output", ",", "\n", "grad_kernel", ",", "\n", "down_x", ",", "\n", "down_y", ",", "\n", "up_x", ",", "\n", "up_y", ",", "\n", "g_pad_x0", ",", "\n", "g_pad_x1", ",", "\n", "g_pad_y0", ",", "\n", "g_pad_y1", ",", "\n", ")", "\n", "grad_input", "=", "grad_input", ".", "view", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "in_size", "[", "2", "]", ",", "in_size", "[", "3", "]", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ")", "\n", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "ctx", ".", "up_x", "=", "up_x", "\n", "ctx", ".", "up_y", "=", "up_y", "\n", "ctx", ".", "down_x", "=", "down_x", "\n", "ctx", ".", "down_y", "=", "down_y", "\n", "ctx", ".", "pad_x0", "=", "pad_x0", "\n", "ctx", ".", "pad_x1", "=", "pad_x1", "\n", "ctx", ".", "pad_y0", "=", "pad_y0", "\n", "ctx", ".", "pad_y1", "=", "pad_y1", "\n", "ctx", ".", "in_size", "=", "in_size", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2dBackward.backward": [[59, 83], ["gradgrad_input.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "gradgrad_out.view.view.view"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ")", ":", "\n", "        ", "kernel", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "gradgrad_input", "=", "gradgrad_input", ".", "reshape", "(", "-", "1", ",", "ctx", ".", "in_size", "[", "2", "]", ",", "ctx", ".", "in_size", "[", "3", "]", ",", "1", ")", "\n", "\n", "gradgrad_out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "gradgrad_input", ",", "\n", "kernel", ",", "\n", "ctx", ".", "up_x", ",", "\n", "ctx", ".", "up_y", ",", "\n", "ctx", ".", "down_x", ",", "\n", "ctx", ".", "down_y", ",", "\n", "ctx", ".", "pad_x0", ",", "\n", "ctx", ".", "pad_x1", ",", "\n", "ctx", ".", "pad_y0", ",", "\n", "ctx", ".", "pad_y1", ",", "\n", ")", "\n", "# gradgrad_out = gradgrad_out.view(ctx.in_size[0], ctx.out_size[0], ctx.out_size[1], ctx.in_size[3])", "\n", "gradgrad_out", "=", "gradgrad_out", ".", "view", "(", "\n", "ctx", ".", "in_size", "[", "0", "]", ",", "ctx", ".", "in_size", "[", "1", "]", ",", "ctx", ".", "out_size", "[", "0", "]", ",", "ctx", ".", "out_size", "[", "1", "]", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2d.forward": [[86, 122], ["input.reshape.reshape.reshape", "ctx.save_for_backward", "upfirdn2d_op.upfirdn2d", "out.view.view.view", "torch.flip"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "up", ",", "down", ",", "pad", ")", ":", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "batch", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "ctx", ".", "in_size", "=", "input", ".", "shape", "\n", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ",", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ")", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", ")", "//", "down_y", "+", "1", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", ")", "//", "down_x", "+", "1", "\n", "ctx", ".", "out_size", "=", "(", "out_h", ",", "out_w", ")", "\n", "\n", "ctx", ".", "up", "=", "(", "up_x", ",", "up_y", ")", "\n", "ctx", ".", "down", "=", "(", "down_x", ",", "down_y", ")", "\n", "ctx", ".", "pad", "=", "(", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", ")", "\n", "\n", "g_pad_x0", "=", "kernel_w", "-", "pad_x0", "-", "1", "\n", "g_pad_y0", "=", "kernel_h", "-", "pad_y0", "-", "1", "\n", "g_pad_x1", "=", "in_w", "*", "up_x", "-", "out_w", "*", "down_x", "+", "pad_x0", "-", "up_x", "+", "1", "\n", "g_pad_y1", "=", "in_h", "*", "up_y", "-", "out_h", "*", "down_y", "+", "pad_y0", "-", "up_y", "+", "1", "\n", "\n", "ctx", ".", "g_pad", "=", "(", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", ")", "\n", "\n", "out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", "\n", "# out = out.view(major, out_h, out_w, minor)", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.UpFirDn2d.backward": [[123, 140], ["UpFirDn2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "kernel", ",", "grad_kernel", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "UpFirDn2dBackward", ".", "apply", "(", "\n", "grad_output", ",", "\n", "kernel", ",", "\n", "grad_kernel", ",", "\n", "ctx", ".", "up", ",", "\n", "ctx", ".", "down", ",", "\n", "ctx", ".", "pad", ",", "\n", "ctx", ".", "g_pad", ",", "\n", "ctx", ".", "in_size", ",", "\n", "ctx", ".", "out_size", ",", "\n", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d": [[142, 148], ["UpFirDn2d.apply"], "function", ["None"], ["", "", "def", "upfirdn2d", "(", "input", ",", "kernel", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "out", "=", "UpFirDn2d", ".", "apply", "(", "\n", "input", ",", "kernel", ",", "(", "up", ",", "up", ")", ",", "(", "down", ",", "down", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", "\n", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.op.upfirdn2d.upfirdn2d_native": [[150, 185], ["input.view", "F.pad", "out.permute.view", "F.pad", "out.permute.permute", "out.permute.reshape", "torch.flip().view", "F.conv2d", "out.permute.reshape", "out.permute.permute", "max", "max", "max", "max", "torch.flip", "max", "max", "max", "max"], "function", ["None"], ["", "def", "upfirdn2d_native", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", ":", "\n", "    ", "_", ",", "in_h", ",", "in_w", ",", "minor", "=", "input", ".", "shape", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "\n", "out", "=", "input", ".", "view", "(", "-", "1", ",", "in_h", ",", "1", ",", "in_w", ",", "1", ",", "minor", ")", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "0", ",", "0", ",", "up_x", "-", "1", ",", "0", ",", "0", ",", "0", ",", "up_y", "-", "1", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "in_h", "*", "up_y", ",", "in_w", "*", "up_x", ",", "minor", ")", "\n", "\n", "out", "=", "F", ".", "pad", "(", "\n", "out", ",", "[", "0", ",", "0", ",", "max", "(", "pad_x0", ",", "0", ")", ",", "max", "(", "pad_x1", ",", "0", ")", ",", "max", "(", "pad_y0", ",", "0", ")", ",", "max", "(", "pad_y1", ",", "0", ")", "]", "\n", ")", "\n", "out", "=", "out", "[", "\n", ":", ",", "\n", "max", "(", "-", "pad_y0", ",", "0", ")", ":", "out", ".", "shape", "[", "1", "]", "-", "max", "(", "-", "pad_y1", ",", "0", ")", ",", "\n", "max", "(", "-", "pad_x0", ",", "0", ")", ":", "out", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pad_x1", ",", "0", ")", ",", "\n", ":", ",", "\n", "]", "\n", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "[", "-", "1", ",", "1", ",", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", ",", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "]", "\n", ")", "\n", "w", "=", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "kernel_h", ",", "kernel_w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "out", ",", "w", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "-", "1", ",", "\n", "minor", ",", "\n", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "1", ",", "\n", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "1", ",", "\n", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "return", "out", "[", ":", ",", ":", ":", "down_y", ",", ":", ":", "down_x", ",", ":", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.edit_transformer_encoders.EditTransformerEncoder.__init__": [[15, 19], ["torch.nn.Module.__init__", "models.transformer.TransformerDecoderLayer"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EditTransformerEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "transformerlayer", "=", "TransformerDecoderLayer", "(", "d_model", "=", "512", ",", "nhead", "=", "4", ",", "dim_feedforward", "=", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.edit_transformer_encoders.EditTransformerEncoder.forward": [[20, 29], ["ref.permute.permute.permute", "src.permute.permute.permute", "edit_transformer_encoders.EditTransformerEncoder.transformerlayer", "edit_transformer_encoders.EditTransformerEncoder.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "ref", ")", ":", "\n", "        ", "ref", "=", "ref", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# N, B, C", "\n", "src", "=", "src", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "# Cross attention for reference and class token.", "\n", "mix", "=", "self", ".", "transformerlayer", "(", "src", ",", "ref", ")", "# query: src. key, value: ref", "\n", "codes", "=", "mix", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.edit_transformer_encoders.LCNet_40.__init__": [[31, 52], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "edit_transformer_encoders.LCNet_40.fcs.append", "edit_transformer_encoders.LCNet_40.indep_fcs.append", "edit_transformer_encoders.LCNet_40.output_fcs.append", "torch.nn.ReLU", "torch.nn.ReLU", "len", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fmaps", "=", "[", "9216", ",", "2048", ",", "512", "]", ",", "n_classes", "=", "40", ",", "activ", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "# Linear layers", "\n", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fmaps", ")", "-", "1", ")", ":", "\n", "            ", "in_channel", "=", "fmaps", "[", "i", "]", "\n", "out_channel", "=", "fmaps", "[", "i", "+", "1", "]", "\n", "self", ".", "fcs", ".", "append", "(", "nn", ".", "Linear", "(", "in_channel", ",", "out_channel", ",", "bias", "=", "True", ")", ")", "\n", "", "self", ".", "indep_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "output_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# Independent linear layers for embeddings", "\n", "for", "_", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "self", ".", "indep_fcs", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "32", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "output_fcs", ".", "append", "(", "nn", ".", "Linear", "(", "32", ",", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "# Activation", "\n", "", "if", "activ", "==", "'relu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activ", "==", "'leakyrelu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.edit_transformer_encoders.LCNet_40.forward": [[53, 65], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "edit_transformer_encoders.LCNet_40.relu", "out_list.append", "pre_list.append", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "fcs", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "layer", "(", "x", ")", ")", "\n", "", "pre_list", "=", "[", "]", "\n", "out_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "out", "=", "self", ".", "indep_fcs", "[", "i", "]", "(", "x", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "pre_list", ".", "append", "(", "self", ".", "output_fcs", "[", "i", "]", "(", "out", ")", ")", "\n", "", "pre", "=", "torch", ".", "cat", "(", "pre_list", ",", "dim", "=", "1", ")", "# Scores (B, n_classes)", "\n", "feat", "=", "torch", ".", "stack", "(", "out_list", ",", "dim", "=", "1", ")", "# Embeddings (B, n_classes, 32)", "\n", "return", "pre", ",", "feat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.edit_transformer_encoders.weight_init": [[6, 13], ["isinstance", "isinstance", "torch.xavier_normal_", "torch.constant_", "torch.normal_", "torch.constant_"], "function", ["None"], ["def", "weight_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.Backbone.__init__": [[10, 43], ["torch.nn.Module.__init__", "models.encoders.helpers.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "models.encoders.helpers.Flatten", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "models.encoders.helpers.Flatten", "torch.nn.Linear", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_blocks"], ["\t", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "in", "[", "112", ",", "224", "]", ",", "\"input_size should be 112 or 224\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "\t\t\t", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "\t\t\t", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "if", "input_size", "==", "112", ":", "\n", "\t\t\t", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", "drop_ratio", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ",", "affine", "=", "affine", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", "drop_ratio", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "14", "*", "14", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ",", "affine", "=", "affine", ")", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "\t\t\t", "for", "bottleneck", "in", "block", ":", "\n", "\t\t\t\t", "modules", ".", "append", "(", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.Backbone.forward": [[44, 49], ["model_irse.Backbone.input_layer", "model_irse.Backbone.body", "model_irse.Backbone.output_layer", "models.encoders.helpers.l2_norm"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.l2_norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "return", "l2_norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.IR_50": [[51, 55], ["model_irse.Backbone"], "function", ["None"], ["", "", "def", "IR_50", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir-50 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "50", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.IR_101": [[57, 61], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_101", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir-101 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "100", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.IR_152": [[63, 67], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_152", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir-152 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "152", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.IR_SE_50": [[69, 73], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_50", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir_se-50 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "50", ",", "mode", "=", "'ir_se'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.IR_SE_101": [[75, 79], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_101", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir_se-101 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "100", ",", "mode", "=", "'ir_se'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.model_irse.IR_SE_152": [[81, 85], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_152", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir_se-152 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "152", ",", "mode", "=", "'ir_se'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleBlock.__init__": [[13, 28], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "torch.nn.Sequential", "models.stylegan2.model.EqualLinear", "numpy.log2", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "spatial", ")", ":", "\n", "        ", "super", "(", "GradualStyleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_c", "=", "out_c", "\n", "self", ".", "spatial", "=", "spatial", "\n", "num_pools", "=", "int", "(", "np", ".", "log2", "(", "spatial", ")", ")", "\n", "modules", "=", "[", "]", "\n", "modules", "+=", "[", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "num_pools", "-", "1", ")", ":", "\n", "            ", "modules", "+=", "[", "\n", "Conv2d", "(", "out_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", "]", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "linear", "=", "EqualLinear", "(", "out_c", ",", "out_c", ",", "lr_mul", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleBlock.forward": [[29, 34], ["style_transformer_encoders.GradualStyleBlock.convs", "style_transformer_encoders.GradualStyleBlock.view", "style_transformer_encoders.GradualStyleBlock.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "out_c", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleEncoder.__init__": [[37, 65], ["torch.nn.Module.__init__", "models.encoders.helpers.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "models.transformer.TransformerDecoderLayer", "models.transformer.TransformerDecoderLayer", "models.transformer.TransformerDecoderLayer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_blocks"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "mode", "=", "'ir'", ",", "opts", "=", "None", ")", ":", "\n", "        ", "super", "(", "GradualStyleEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "'num_layers should be 50,100, or 152'", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "'mode should be ir or ir_se'", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "opts", ".", "input_nc", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "latlayer1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "latlayer2", "=", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "transformerlayer_coarse", "=", "TransformerDecoderLayer", "(", "d_model", "=", "512", ",", "nhead", "=", "4", ",", "dim_feedforward", "=", "1024", ")", "\n", "self", ".", "transformerlayer_medium", "=", "TransformerDecoderLayer", "(", "d_model", "=", "512", ",", "nhead", "=", "4", ",", "dim_feedforward", "=", "1024", ")", "\n", "self", ".", "transformerlayer_fine", "=", "TransformerDecoderLayer", "(", "d_model", "=", "512", ",", "nhead", "=", "4", ",", "dim_feedforward", "=", "1024", ")", "\n", "\n", "self", ".", "z", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "18", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleEncoder._upsample_add": [[67, 85], ["y.size", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "_upsample_add", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "'''Upsample and add two feature maps.\n        Args:\n          x: (Variable) top feature map to be upsampled.\n          y: (Variable) lateral feature map.\n        Returns:\n          (Variable) added feature map.\n        Note in PyTorch, when input size is odd, the upsampled feature map\n        with `F.upsample(..., scale_factor=2, mode='nearest')`\n        maybe not equal to the lateral feature map size.\n        e.g.\n        original input size: [N,_,15,15] ->\n        conv2d feature map size: [N,_,8,8] ->\n        upsampled feature map size: [N,_,16,16]\n        So we choose bilinear upsample which supports arbitrary output sizes.\n        '''", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "y", ".", "size", "(", ")", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleEncoder.forward": [[86, 112], ["style_transformer_encoders.GradualStyleEncoder.input_layer", "query.permute.permute.permute", "list", "enumerate", "style_transformer_encoders.GradualStyleEncoder._upsample_add", "style_transformer_encoders.GradualStyleEncoder._upsample_add", "p1.flatten().permute.flatten().permute.flatten().permute", "p2.flatten().permute.flatten().permute.flatten().permute", "c3.flatten().permute.flatten().permute.flatten().permute", "style_transformer_encoders.GradualStyleEncoder.transformerlayer_coarse", "style_transformer_encoders.GradualStyleEncoder.transformerlayer_medium", "style_transformer_encoders.GradualStyleEncoder.transformerlayer_fine", "style_transformer_encoders.GradualStyleEncoder.permute", "style_transformer_encoders.GradualStyleEncoder.body._modules.values", "l", "style_transformer_encoders.GradualStyleEncoder.latlayer1", "style_transformer_encoders.GradualStyleEncoder.latlayer2", "p1.flatten().permute.flatten().permute.flatten", "p2.flatten().permute.flatten().permute.flatten", "c3.flatten().permute.flatten().permute.flatten"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleEncoder._upsample_add", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.style_transformer_encoders.GradualStyleEncoder._upsample_add"], ["", "def", "forward", "(", "self", ",", "x", ",", "query", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "query", "=", "query", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "modulelist", "=", "list", "(", "self", ".", "body", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "modulelist", ")", ":", "\n", "            ", "x", "=", "l", "(", "x", ")", "\n", "if", "i", "==", "6", ":", "\n", "                ", "c1", "=", "x", "\n", "", "elif", "i", "==", "20", ":", "\n", "                ", "c2", "=", "x", "\n", "", "if", "i", "==", "23", ":", "\n", "                ", "c3", "=", "x", "\n", "\n", "", "", "p2", "=", "self", ".", "_upsample_add", "(", "c3", ",", "self", ".", "latlayer1", "(", "c2", ")", ")", "\n", "p1", "=", "self", ".", "_upsample_add", "(", "p2", ",", "self", ".", "latlayer2", "(", "c1", ")", ")", "\n", "\n", "p1", "=", "p1", ".", "flatten", "(", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# HW, B, C", "\n", "p2", "=", "p2", ".", "flatten", "(", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "c3", "=", "c3", ".", "flatten", "(", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "query_coarse", "=", "self", ".", "transformerlayer_coarse", "(", "query", ",", "c3", ")", "\n", "query_medium", "=", "self", ".", "transformerlayer_medium", "(", "query_coarse", ",", "p2", ")", "\n", "query_fine", "=", "self", ".", "transformerlayer_fine", "(", "query_medium", ",", "p1", ")", "\n", "codes", "=", "query_fine", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "codes", "", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.Flatten.forward": [[11, 13], ["input.view", "input.size"], "methods", ["None"], ["\t", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.SEModule.__init__": [[57, 64], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["\t", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "\t\t", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.SEModule.forward": [[65, 73], ["helpers.SEModule.avg_pool", "helpers.SEModule.fc1", "helpers.SEModule.relu", "helpers.SEModule.fc2", "helpers.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.bottleneck_IR.__init__": [[76, 89], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "\t\t", "super", "(", "bottleneck_IR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", "\n", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.bottleneck_IR.forward": [[91, 95], ["helpers.bottleneck_IR.shortcut_layer", "helpers.bottleneck_IR.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.bottleneck_IR_SE.__init__": [[98, 114], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "helpers.SEModule", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "\t\t", "super", "(", "bottleneck_IR_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", "\n", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.bottleneck_IR_SE.forward": [[116, 120], ["helpers.bottleneck_IR_SE.shortcut_layer", "helpers.bottleneck_IR_SE.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "return", "res", "+", "shortcut", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.l2_norm": [[15, 19], ["torch.norm", "torch.div"], "function", ["None"], ["", "", "def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "\t", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block": [[25, 27], ["helpers.Bottleneck", "helpers.Bottleneck", "range"], "function", ["None"], ["", "def", "get_block", "(", "in_channel", ",", "depth", ",", "num_units", ",", "stride", "=", "2", ")", ":", "\n", "\t", "return", "[", "Bottleneck", "(", "in_channel", ",", "depth", ",", "stride", ")", "]", "+", "[", "Bottleneck", "(", "depth", ",", "depth", ",", "1", ")", "for", "i", "in", "range", "(", "num_units", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_blocks": [[29, 54], ["helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "ValueError", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block"], "function", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block", "home.repos.pwc.inspect_result.sapphire497_style-transformer.encoders.helpers.get_block"], ["", "def", "get_blocks", "(", "num_layers", ")", ":", "\n", "\t", "if", "num_layers", "==", "50", ":", "\n", "\t\t", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "4", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "14", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "\t\t", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "13", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "30", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "\t\t", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "8", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "36", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Invalid number of layers: {}. Must be one of [50, 100, 152]\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.moco_loss.MocoLoss.__init__": [[9, 15], ["torch.nn.Module.__init__", "print", "moco_loss.MocoLoss.__load_model", "moco_loss.MocoLoss.model.cuda", "moco_loss.MocoLoss.model.eval"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.moco_loss.MocoLoss.__load_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MocoLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"Loading MOCO model from path: {}\"", ".", "format", "(", "model_paths", "[", "\"moco\"", "]", ")", ")", "\n", "self", ".", "model", "=", "self", ".", "__load_model", "(", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.moco_loss.MocoLoss.__load_model": [[16, 39], ["torch.nn.Sequential().cuda.named_parameters", "torch.load", "torch.load", "torch.load", "torch.load", "list", "torch.nn.Sequential().cuda.load_state_dict", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "state_dict.keys", "set", "k.startswith", "torch.nn.Sequential", "torch.nn.Sequential", "k.startswith", "list", "len", "torch.nn.Sequential().cuda.children"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__load_model", "(", ")", ":", "\n", "        ", "import", "torchvision", ".", "models", "as", "models", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet50\"", "]", "(", ")", "\n", "# freeze all layers but the last fc", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "[", "'fc.weight'", ",", "'fc.bias'", "]", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "checkpoint", "=", "torch", ".", "load", "(", "model_paths", "[", "'moco'", "]", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "# rename moco pre-trained keys", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"fc.weight\"", ",", "\"fc.bias\"", "}", "\n", "# remove output layer", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.moco_loss.MocoLoss.extract_feats": [[40, 46], ["torch.interpolate", "torch.interpolate", "moco_loss.MocoLoss.model", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "x_feats.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "extract_feats", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "224", ")", "\n", "x_feats", "=", "self", ".", "model", "(", "x", ")", "\n", "x_feats", "=", "nn", ".", "functional", ".", "normalize", "(", "x_feats", ",", "dim", "=", "1", ")", "\n", "x_feats", "=", "x_feats", ".", "squeeze", "(", ")", "\n", "return", "x_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.moco_loss.MocoLoss.forward": [[47, 70], ["moco_loss.MocoLoss.extract_feats", "moco_loss.MocoLoss.extract_feats", "moco_loss.MocoLoss.extract_feats", "y_feats.detach.detach.detach", "range", "y_hat_feats[].dot", "y_hat_feats[].dot", "y_feats[].dot", "sim_logs.append", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats", "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats", "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats"], ["", "def", "forward", "(", "self", ",", "y_hat", ",", "y", ",", "x", ")", ":", "\n", "        ", "n_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_feats", "=", "self", ".", "extract_feats", "(", "x", ")", "\n", "y_feats", "=", "self", ".", "extract_feats", "(", "y", ")", "\n", "y_hat_feats", "=", "self", ".", "extract_feats", "(", "y_hat", ")", "\n", "y_feats", "=", "y_feats", ".", "detach", "(", ")", "\n", "loss", "=", "0", "\n", "sim_improvement", "=", "0", "\n", "sim_logs", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "diff_target", "=", "y_hat_feats", "[", "i", "]", ".", "dot", "(", "y_feats", "[", "i", "]", ")", "\n", "diff_input", "=", "y_hat_feats", "[", "i", "]", ".", "dot", "(", "x_feats", "[", "i", "]", ")", "\n", "diff_views", "=", "y_feats", "[", "i", "]", ".", "dot", "(", "x_feats", "[", "i", "]", ")", "\n", "sim_logs", ".", "append", "(", "{", "'diff_target'", ":", "float", "(", "diff_target", ")", ",", "\n", "'diff_input'", ":", "float", "(", "diff_input", ")", ",", "\n", "'diff_views'", ":", "float", "(", "diff_views", ")", "}", ")", "\n", "loss", "+=", "1", "-", "diff_target", "\n", "sim_diff", "=", "float", "(", "diff_target", ")", "-", "float", "(", "diff_views", ")", "\n", "sim_improvement", "+=", "sim_diff", "\n", "count", "+=", "1", "\n", "\n", "", "return", "loss", "/", "count", ",", "sim_improvement", "/", "count", ",", "sim_logs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.__init__": [[8, 15], ["torch.nn.Module.__init__", "print", "models.encoders.model_irse.Backbone", "id_loss.IDLoss.facenet.load_state_dict", "torch.nn.AdaptiveAvgPool2d", "id_loss.IDLoss.facenet.eval", "torch.load"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Loading ResNet ArcFace'", ")", "\n", "self", ".", "facenet", "=", "Backbone", "(", "input_size", "=", "112", ",", "num_layers", "=", "50", ",", "drop_ratio", "=", "0.6", ",", "mode", "=", "'ir_se'", ")", "\n", "self", ".", "facenet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_paths", "[", "'ir_se50'", "]", ")", ")", "\n", "self", ".", "face_pool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "112", ",", "112", ")", ")", "\n", "self", ".", "facenet", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats": [[16, 21], ["id_loss.IDLoss.face_pool", "id_loss.IDLoss.facenet"], "methods", ["None"], ["", "def", "extract_feats", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", "35", ":", "223", ",", "32", ":", "220", "]", "# Crop interesting region", "\n", "x", "=", "self", ".", "face_pool", "(", "x", ")", "\n", "x_feats", "=", "self", ".", "facenet", "(", "x", ")", "\n", "return", "x_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.forward": [[22, 45], ["id_loss.IDLoss.extract_feats", "id_loss.IDLoss.extract_feats", "id_loss.IDLoss.extract_feats", "y_feats.detach.detach.detach", "range", "y_hat_feats[].dot", "y_hat_feats[].dot", "y_feats[].dot", "id_logs.append", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats", "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats", "home.repos.pwc.inspect_result.sapphire497_style-transformer.criteria.id_loss.IDLoss.extract_feats"], ["", "def", "forward", "(", "self", ",", "y_hat", ",", "y", ",", "x", ")", ":", "\n", "        ", "n_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_feats", "=", "self", ".", "extract_feats", "(", "x", ")", "\n", "y_feats", "=", "self", ".", "extract_feats", "(", "y", ")", "# Otherwise use the feature from there", "\n", "y_hat_feats", "=", "self", ".", "extract_feats", "(", "y_hat", ")", "\n", "y_feats", "=", "y_feats", ".", "detach", "(", ")", "\n", "loss", "=", "0", "\n", "sim_improvement", "=", "0", "\n", "id_logs", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "diff_target", "=", "y_hat_feats", "[", "i", "]", ".", "dot", "(", "y_feats", "[", "i", "]", ")", "\n", "diff_input", "=", "y_hat_feats", "[", "i", "]", ".", "dot", "(", "x_feats", "[", "i", "]", ")", "\n", "diff_views", "=", "y_feats", "[", "i", "]", ".", "dot", "(", "x_feats", "[", "i", "]", ")", "\n", "id_logs", ".", "append", "(", "{", "'diff_target'", ":", "float", "(", "diff_target", ")", ",", "\n", "'diff_input'", ":", "float", "(", "diff_input", ")", ",", "\n", "'diff_views'", ":", "float", "(", "diff_views", ")", "}", ")", "\n", "loss", "+=", "1", "-", "diff_target", "\n", "id_diff", "=", "float", "(", "diff_target", ")", "-", "float", "(", "diff_views", ")", "\n", "sim_improvement", "+=", "id_diff", "\n", "count", "+=", "1", "\n", "\n", "", "return", "loss", "/", "count", ",", "sim_improvement", "/", "count", ",", "id_logs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.LinLayers.__init__": [[24, 34], ["torch.ModuleList.__init__", "networks.LinLayers.parameters", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_list", ":", "Sequence", "[", "int", "]", ")", ":", "\n", "        ", "super", "(", "LinLayers", ",", "self", ")", ".", "__init__", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "1", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", ")", "for", "nc", "in", "n_channels_list", "\n", "]", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.__init__": [[37, 45], ["torch.Module.__init__", "networks.BaseNet.register_buffer", "networks.BaseNet.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# register buffer", "\n", "self", ".", "register_buffer", "(", "\n", "'mean'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'std'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.set_requires_grad": [[46, 49], ["itertools.chain", "networks.BaseNet.parameters", "networks.BaseNet.buffers"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "state", ":", "bool", ")", ":", "\n", "        ", "for", "param", "in", "chain", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.z_score": [[50, 52], ["None"], "methods", ["None"], ["", "", "def", "z_score", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.forward": [[53, 64], ["networks.BaseNet.z_score", "enumerate", "networks.BaseNet.layers._modules.items", "layer", "output.append", "len", "len", "criteria.lpips.utils.normalize_activation"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.z_score", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.utils.normalize_activation"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "z_score", "(", "x", ")", "\n", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "(", "_", ",", "layer", ")", "in", "enumerate", "(", "self", ".", "layers", ".", "_modules", ".", "items", "(", ")", ",", "1", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "target_layers", ":", "\n", "                ", "output", ".", "append", "(", "normalize_activation", "(", "x", ")", ")", "\n", "", "if", "len", "(", "output", ")", "==", "len", "(", "self", ".", "target_layers", ")", ":", "\n", "                ", "break", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.SqueezeNet.__init__": [[67, 75], ["networks.BaseNet.__init__", "networks.SqueezeNet.set_requires_grad", "torchvision.models.squeezenet1_1"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.set_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "models", ".", "squeezenet1_1", "(", "True", ")", ".", "features", "\n", "self", ".", "target_layers", "=", "[", "2", ",", "5", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", "]", "\n", "self", ".", "n_channels_list", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "set_requires_grad", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.AlexNet.__init__": [[78, 86], ["networks.BaseNet.__init__", "networks.AlexNet.set_requires_grad", "torchvision.models.alexnet"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.set_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "models", ".", "alexnet", "(", "True", ")", ".", "features", "\n", "self", ".", "target_layers", "=", "[", "2", ",", "5", ",", "8", ",", "10", ",", "12", "]", "\n", "self", ".", "n_channels_list", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "\n", "self", ".", "set_requires_grad", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.VGG16.__init__": [[89, 97], ["networks.BaseNet.__init__", "networks.VGG16.set_requires_grad", "torchvision.models.vgg16"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.BaseNet.set_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "models", ".", "vgg16", "(", "True", ")", ".", "features", "\n", "self", ".", "target_layers", "=", "[", "4", ",", "9", ",", "16", ",", "23", ",", "30", "]", "\n", "self", ".", "n_channels_list", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "set_requires_grad", "(", "False", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.get_network": [[12, 21], ["networks.AlexNet", "networks.SqueezeNet", "networks.VGG16", "NotImplementedError"], "function", ["None"], ["def", "get_network", "(", "net_type", ":", "str", ")", ":", "\n", "    ", "if", "net_type", "==", "'alex'", ":", "\n", "        ", "return", "AlexNet", "(", ")", "\n", "", "elif", "net_type", "==", "'squeeze'", ":", "\n", "        ", "return", "SqueezeNet", "(", ")", "\n", "", "elif", "net_type", "==", "'vgg'", ":", "\n", "        ", "return", "VGG16", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'choose net_type from [alex, squeeze, vgg].'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.__init__": [[16, 28], ["torch.Module.__init__", "criteria.lpips.networks.get_network().to", "criteria.lpips.networks.LinLayers().to", "lpips.LPIPS.lin.load_state_dict", "criteria.lpips.utils.get_state_dict", "criteria.lpips.networks.get_network", "criteria.lpips.networks.LinLayers"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.utils.get_state_dict", "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.networks.get_network"], ["def", "__init__", "(", "self", ",", "net_type", ":", "str", "=", "'alex'", ",", "version", ":", "str", "=", "'0.1'", ")", ":", "\n", "\n", "        ", "assert", "version", "in", "[", "'0.1'", "]", ",", "'v0.1 is only supported now'", "\n", "\n", "super", "(", "LPIPS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# pretrained network", "\n", "self", ".", "net", "=", "get_network", "(", "net_type", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# linear layers", "\n", "self", ".", "lin", "=", "LinLayers", "(", "self", ".", "net", ".", "n_channels_list", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "lin", ".", "load_state_dict", "(", "get_state_dict", "(", "net_type", ",", "version", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.lpips.LPIPS.forward": [[29, 36], ["lpips.LPIPS.net", "lpips.LPIPS.net", "l().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "zip", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "feat_x", ",", "feat_y", "=", "self", ".", "net", "(", "x", ")", ",", "self", ".", "net", "(", "y", ")", "\n", "\n", "diff", "=", "[", "(", "fx", "-", "fy", ")", "**", "2", "for", "fx", ",", "fy", "in", "zip", "(", "feat_x", ",", "feat_y", ")", "]", "\n", "res", "=", "[", "l", "(", "d", ")", ".", "mean", "(", "(", "2", ",", "3", ")", ",", "True", ")", "for", "d", ",", "l", "in", "zip", "(", "diff", ",", "self", ".", "lin", ")", "]", "\n", "\n", "return", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "res", ",", "0", ")", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.utils.normalize_activation": [[6, 9], ["torch.sqrt", "torch.sum"], "function", ["None"], ["def", "normalize_activation", "(", "x", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "x", "/", "(", "norm_factor", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.lpips.utils.get_state_dict": [[11, 31], ["torch.hub.load_state_dict_from_url", "collections.OrderedDict", "torch.hub.load_state_dict_from_url.items", "new_key.replace.replace", "new_key.replace.replace", "torch.cuda.is_available", "torch.device"], "function", ["None"], ["", "def", "get_state_dict", "(", "net_type", ":", "str", "=", "'alex'", ",", "version", ":", "str", "=", "'0.1'", ")", ":", "\n", "# build url", "\n", "    ", "url", "=", "'https://raw.githubusercontent.com/richzhang/PerceptualSimilarity/'", "+", "f'master/lpips/weights/v{version}/{net_type}.pth'", "\n", "\n", "# download", "\n", "old_state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "progress", "=", "True", ",", "\n", "map_location", "=", "None", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "# rename keys", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "val", "in", "old_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "new_key", "=", "key", "\n", "new_key", "=", "new_key", ".", "replace", "(", "'lin'", ",", "''", ")", "\n", "new_key", "=", "new_key", ".", "replace", "(", "'model.'", ",", "''", ")", "\n", "new_state_dict", "[", "new_key", "]", "=", "val", "\n", "\n", "", "return", "new_state_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.configs.transforms_config.TransformsConfig.__init__": [[7, 9], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.configs.transforms_config.TransformsConfig.get_transforms": [[10, 13], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_transforms", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.configs.transforms_config.EncodeTransforms.__init__": [[17, 19], ["transforms_config.TransformsConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "super", "(", "EncodeTransforms", ",", "self", ")", ".", "__init__", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.configs.transforms_config.EncodeTransforms.get_transforms": [[20, 38], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "get_transforms", "(", "self", ")", ":", "\n", "\t\t", "transforms_dict", "=", "{", "\n", "'transform_gt_train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", ",", "\n", "'transform_source'", ":", "None", ",", "\n", "'transform_test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", ",", "\n", "'transform_inference'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", "\n", "}", "\n", "return", "transforms_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.configs.transforms_config.CarsEncodeTransforms.__init__": [[41, 43], ["transforms_config.TransformsConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\t\t", "super", "(", "CarsEncodeTransforms", ",", "self", ")", ".", "__init__", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.configs.transforms_config.CarsEncodeTransforms.get_transforms": [[44, 62], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "get_transforms", "(", "self", ")", ":", "\n", "\t\t", "transforms_dict", "=", "{", "\n", "'transform_gt_train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "192", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", ",", "\n", "'transform_source'", ":", "None", ",", "\n", "'transform_test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "192", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", ",", "\n", "'transform_inference'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "192", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", "\n", "}", "\n", "return", "transforms_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.options.test_options.TestOptions.__init__": [[6, 9], ["argparse.ArgumentParser", "test_options.TestOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.initialize"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "parser", "=", "ArgumentParser", "(", ")", "\n", "self", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.options.test_options.TestOptions.initialize": [[10, 20], ["test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# arguments for inference script", "\n", "\t\t", "self", ".", "parser", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path to experiment output directory'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Path to pSp model checkpoint'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path to directory of images to evaluate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--couple_outputs'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to also save inputs + outputs side-by-side'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_outputs'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to resize outputs to 256x256 or keep at 1024x1024'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'Batch size for testing and inference'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_workers'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Number of test/inference dataloader workers'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.options.test_options.TestOptions.parse": [[22, 25], ["test_options.TestOptions.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "\t\t", "opts", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "return", "opts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.__init__": [[7, 10], ["argparse.ArgumentParser", "train_options.TrainOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.initialize"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "ArgumentParser", "(", ")", "\n", "self", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.initialize": [[11, 46], ["train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--exp_dir'", ",", "default", "=", "'../results/experiment_test'", ",", "type", "=", "str", ",", "help", "=", "'Path to experiment output directory'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset_type'", ",", "default", "=", "'ffhq_encode'", ",", "type", "=", "str", ",", "help", "=", "'Type of dataset/experiment to run'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'Number of input image channels to the psp encoder'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_size'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "help", "=", "'Output size of generator'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'Batch size for training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'Batch size for testing and inference'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Number of train dataloader workers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_workers'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Number of test/inference dataloader workers'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ",", "help", "=", "'Optimizer learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--optim_name'", ",", "default", "=", "'ranger'", ",", "type", "=", "str", ",", "help", "=", "'Which optimizer to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--train_decoder'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "'Whether to train the decoder model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--start_from_latent_avg'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "help", "=", "'Whether to add average latent vector to generate codes from encoder.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--learn_in_w'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "'Whether to learn in w space instead of w+'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lpips_lambda'", ",", "default", "=", "0.8", ",", "type", "=", "float", ",", "help", "=", "'LPIPS loss multiplier factor'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--id_lambda'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'ID loss multiplier factor'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--l2_lambda'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'L2 loss multiplier factor'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--l2_ref_lambda'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'L2 loss multiplier factor'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--l2_src_lambda'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'L2 loss multiplier factor'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--stylegan_weights'", ",", "default", "=", "model_paths", "[", "'stylegan_ffhq'", "]", ",", "type", "=", "str", ",", "help", "=", "'Path to StyleGAN model weights'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--classifier_weights'", ",", "default", "=", "model_paths", "[", "'latent_classifier'", "]", ",", "type", "=", "str", ",", "help", "=", "'Path to classifier weights'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "'Path to pSp model checkpoint'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_steps'", ",", "default", "=", "600000", ",", "type", "=", "int", ",", "help", "=", "'Maximum number of training steps'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--image_interval'", ",", "default", "=", "5000", ",", "type", "=", "int", ",", "help", "=", "'Interval for logging train images during training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--board_interval'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Interval for logging metrics to tensorboard'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_interval'", ",", "default", "=", "5000", ",", "type", "=", "int", ",", "help", "=", "'Validation interval'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_interval'", ",", "default", "=", "10000", ",", "type", "=", "int", ",", "help", "=", "'Model checkpoint interval'", ")", "\n", "\n", "# arguments for super-resolution", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_factors'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'For super-res, comma-separated resize factors to use for inference.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sapphire497_style-transformer.options.train_options.TrainOptions.parse": [[47, 50], ["train_options.TrainOptions.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opts", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "return", "opts", "\n", "", "", ""]]}