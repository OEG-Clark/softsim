{"home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.__init__": [[15, 49], ["numpy.array", "set", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# entity vocab", "\n", "        ", "self", ".", "ents", "=", "{", "}", "\n", "self", ".", "ent_tokens", "=", "{", "}", "\n", "# rel vocab", "\n", "self", ".", "rels", "=", "{", "}", "\n", "self", ".", "index_ents", "=", "{", "}", "\n", "self", ".", "index_rels", "=", "{", "}", "\n", "self", ".", "n_ents", "=", "0", "\n", "self", ".", "n_rels", "=", "0", "\n", "# save triples as array of indices", "\n", "self", ".", "triples", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "triples_record", "=", "set", "(", "[", "]", ")", "\n", "# head per tail and tail per head (for each relation). used for bernoulli negative sampling", "\n", "self", ".", "hpt", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "tph", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "# word embeddings", "\n", "self", ".", "tokens", "=", "[", "]", "\n", "self", ".", "wv", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "token_index", "=", "{", "}", "\n", "self", ".", "loaded_wv", "=", "False", "\n", "self", ".", "n_tokens", "=", "0", "\n", "# descriptions", "\n", "self", ".", "descriptions", "=", "{", "}", "\n", "self", ".", "desc_embed", "=", "{", "}", "\n", "self", ".", "avg_embed", "=", "{", "}", "\n", "self", ".", "desc_embed_padded", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "avg_embed_padded", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "desc_length", "=", "100", "\n", "self", ".", "desc_index", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "# recorded for tf_parts", "\n", "self", ".", "dim", "=", "100", "\n", "#self.wv_dim = 100", "\n", "self", ".", "batch_size", "=", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.load_triples": [[50, 91], ["open", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.mean", "numpy.mean", "print", "line.rstrip().split.rstrip().split.rstrip().split", "len", "KG.KG.index_ents.get", "set", "KG.KG.index_ents.get", "set", "KG.KG.index_rels.get", "triples.append", "KG.KG.triples_record.add", "len", "len", "len", "len", "line.rstrip().split.rstrip().split.rstrip", "line[].replace().replace().split", "line[].replace().replace().split", "line[].replace().replace", "line[].replace().replace", "line[].replace", "line[].replace"], "methods", ["None"], ["", "def", "load_triples", "(", "self", ",", "filename", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ",", "if_onto_graph", "=", "False", ")", ":", "\n", "        ", "'''Load the dataset.'''", "\n", "triples", "=", "[", "]", "\n", "last_c", "=", "-", "1", "\n", "last_r", "=", "-", "1", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "if", "self", ".", "index_ents", ".", "get", "(", "line", "[", "0", "]", ")", "==", "None", ":", "\n", "                ", "last_c", "+=", "1", "\n", "self", ".", "ents", "[", "last_c", "]", "=", "line", "[", "0", "]", "\n", "self", ".", "index_ents", "[", "line", "[", "0", "]", "]", "=", "last_c", "\n", "self", ".", "ent_tokens", "[", "last_c", "]", "=", "set", "(", "line", "[", "0", "]", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "if", "self", ".", "index_ents", ".", "get", "(", "line", "[", "2", "]", ")", "==", "None", ":", "\n", "                ", "last_c", "+=", "1", "\n", "self", ".", "ents", "[", "last_c", "]", "=", "line", "[", "2", "]", "\n", "self", ".", "index_ents", "[", "line", "[", "2", "]", "]", "=", "last_c", "\n", "self", ".", "ent_tokens", "[", "last_c", "]", "=", "set", "(", "line", "[", "2", "]", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "if", "self", ".", "index_rels", ".", "get", "(", "line", "[", "1", "]", ")", "==", "None", ":", "\n", "                ", "last_r", "+=", "1", "\n", "self", ".", "rels", "[", "last_r", "]", "=", "line", "[", "1", "]", "\n", "self", ".", "index_rels", "[", "line", "[", "1", "]", "]", "=", "last_r", "\n", "", "h", "=", "self", ".", "index_ents", "[", "line", "[", "0", "]", "]", "\n", "r", "=", "self", ".", "index_rels", "[", "line", "[", "1", "]", "]", "\n", "t", "=", "self", ".", "index_ents", "[", "line", "[", "2", "]", "]", "\n", "if", "if_onto_graph", "and", "line", "[", "1", "]", "==", "'isa'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "triples", ".", "append", "(", "[", "h", ",", "r", ",", "t", "]", ")", "\n", "self", ".", "triples_record", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "", "self", ".", "triples", "=", "np", ".", "array", "(", "triples", ")", "\n", "self", ".", "n_ents", "=", "last_c", "+", "1", "\n", "self", ".", "n_rels", "=", "last_r", "+", "1", "\n", "# calculate tph and hpt", "\n", "tph_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "rels", ")", ",", "len", "(", "self", ".", "ents", ")", ")", ")", "\n", "hpt_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "rels", ")", ",", "len", "(", "self", ".", "ents", ")", ")", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "tph_array", "[", "r", "]", "[", "h", "]", "+=", "1.", "\n", "hpt_array", "[", "r", "]", "[", "t", "]", "+=", "1.", "\n", "", "self", ".", "tph", "=", "np", ".", "mean", "(", "tph_array", ",", "axis", "=", "1", ")", "\n", "self", ".", "hpt", "=", "np", ".", "mean", "(", "hpt_array", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"Loaded triples from\"", ",", "filename", ",", "\". #triples, #ents, #rels:\"", ",", "len", "(", "self", ".", "triples", ")", ",", "self", ".", "n_ents", ",", "self", ".", "n_rels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.load_word2vec": [[92, 110], ["tqdm.tqdm.tqdm", "numpy.array", "len", "print", "enumerate", "l.strip().split", "open", "int", "emb.append", "KG.KG.tokens.append", "len", "KG.KG.tokens.append", "emb.append", "enumerate", "l.strip", "numpy.zeros", "float"], "methods", ["None"], ["", "def", "load_word2vec", "(", "self", ",", "filepath", ",", "splitter", "=", "' '", ")", ":", "\n", "        ", "self", ".", "tokens", ",", "emb", "=", "[", "]", ",", "[", "]", "\n", "for", "lineno", ",", "l", "in", "tqdm", "(", "enumerate", "(", "open", "(", "filepath", ")", ")", ",", "desc", "=", "'load word embedding'", ",", "unit", "=", "' word'", ")", ":", "\n", "            ", "tokens", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "splitter", ")", "\n", "if", "lineno", "==", "0", ":", "\n", "                ", "dim", "=", "int", "(", "tokens", "[", "1", "]", ")", "\n", "emb", ".", "append", "(", "np", ".", "zeros", "(", "dim", ")", ")", "\n", "self", ".", "tokens", ".", "append", "(", "'  '", ")", "\n", "continue", "\n", "", "if", "len", "(", "tokens", ")", "==", "1", "+", "dim", ":", "\n", "                ", "self", ".", "tokens", ".", "append", "(", "tokens", "[", "0", "]", ")", "\n", "emb", ".", "append", "(", "[", "float", "(", "_", ")", "for", "_", "in", "tokens", "[", "1", ":", "]", "]", ")", "\n", "", "", "self", ".", "wv", "=", "np", ".", "array", "(", "emb", ")", "\n", "self", ".", "wv_dim", "=", "dim", "\n", "self", ".", "token_index", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "tokens", ")", "}", "\n", "self", ".", "loaded_wv", "=", "True", "\n", "self", ".", "n_tokens", "=", "len", "(", "self", ".", "tokens", ")", "\n", "print", "(", "\"Loaded token embeddings from\"", ",", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.load_descriptions": [[111, 201], ["open", "open", "numpy.array", "print", "print", "print", "range", "numpy.array", "numpy.array", "print", "print", "line.strip().split.strip().split.strip", "set", "KG.KG.ent_str2index", "numpy.array", "numpy.average", "KG.KG.desc_index.append", "KG.KG.num_ents", "KG.KG.desc_embed.get", "KG.KG.avg_embed.get", "KG.KG.desc_embed_padded.append", "KG.KG.avg_embed_padded.append", "numpy.any", "line.strip().split.strip().split.strip().lower().split", "line.strip().split.strip().split.strip().split", "title.replace().replace().split", "len", "len", "len", "numpy.array.append", "len", "numpy.zeros", "numpy.zeros", "numpy.isnan", "KG.KG.descriptions.get", "title.replace().replace().split", "KG.KG.word_str2index", "len", "numpy.array", "len", "line.strip().split.strip().split.strip().lower", "line.strip().split.strip().split.strip", "title.replace().replace", "desc_word_index.append", "numpy.array", "range", "numpy.array", "title.replace().replace", "len", "len", "front.append", "line.strip().split.strip().split.strip", "title.replace", "int", "numpy.zeros", "title.replace", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.word_str2index"], ["", "def", "load_descriptions", "(", "self", ",", "titlefile", ",", "tokenfile", ",", "splitter", "=", "' '", ",", "desc_length", "=", "100", ",", "lower", "=", "True", ",", "stop_words", "=", "None", ",", "padding_front", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "loaded_wv", "==", "False", ":", "\n", "            ", "print", "(", "\"Fail: Load word embeddings first\"", ")", "\n", "return", "\n", "", "self", ".", "desc_length", "=", "desc_length", "\n", "self", ".", "n_descriptions", "=", "0", "\n", "titles", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "line", "in", "open", "(", "titlefile", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "titles", "[", "index", "]", "=", "line", "\n", "index", "+=", "1", "\n", "", "index", "=", "0", "\n", "remove", "=", "None", "\n", "if", "not", "(", "stop_words", "is", "None", ")", ":", "\n", "            ", "remove", "=", "set", "(", "stop_words", ")", "\n", "", "self", ".", "desc_index", "=", "[", "]", "\n", "avg_length", "=", "0.", "\n", "max_length", "=", "-", "1.", "\n", "max_sen", "=", "\"\"", "\n", "for", "line", "in", "open", "(", "tokenfile", ")", ":", "\n", "            ", "title", "=", "titles", "[", "index", "]", "\n", "index", "+=", "1", "\n", "ent_id", "=", "self", ".", "ent_str2index", "(", "title", ")", "\n", "if", "ent_id", "==", "None", ":", "\n", "                ", "continue", "\n", "", "if", "not", "self", ".", "descriptions", ".", "get", "(", "ent_id", ")", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "lower", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ".", "split", "(", "splitter", ")", "\n", "", "else", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "splitter", ")", "\n", "", "line", "=", "title", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", "+", "line", "+", "title", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", "\n", "desc_word_index", "=", "[", "]", "\n", "for", "word", "in", "line", ":", "\n", "                ", "if", "(", "remove", "is", "None", ")", "or", "(", "word", "not", "in", "remove", ")", ":", "\n", "                    ", "this_wd_index", "=", "self", ".", "word_str2index", "(", "word", ",", "default", "=", "False", ")", "\n", "if", "not", "this_wd_index", "is", "None", ":", "\n", "                        ", "desc_word_index", ".", "append", "(", "this_wd_index", ")", "\n", "", "", "", "if", "len", "(", "desc_word_index", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "descriptions", "[", "ent_id", "]", "=", "np", ".", "array", "(", "desc_word_index", ")", "\n", "self", ".", "n_descriptions", "+=", "1", "\n", "avg_length", "=", "(", "avg_length", "*", "(", "self", ".", "n_descriptions", "-", "1", ")", "+", "len", "(", "desc_word_index", ")", ")", "/", "self", ".", "n_descriptions", "\n", "if", "len", "(", "desc_word_index", ")", ">", "max_length", ":", "\n", "                ", "max_length", "=", "len", "(", "desc_word_index", ")", "\n", "max_sen", "=", "line", "\n", "", "desc_embed", "=", "[", "]", "\n", "for", "i", "in", "desc_word_index", ":", "\n", "                ", "vec", "=", "self", ".", "wv", "[", "i", "]", "\n", "desc_embed", ".", "append", "(", "vec", ")", "\n", "", "self", ".", "avg_embed", "[", "ent_id", "]", "=", "np", ".", "average", "(", "desc_embed", ",", "axis", "=", "0", ")", "\n", "if", "len", "(", "desc_embed", ")", ">", "desc_length", ":", "\n", "                ", "desc_embed", "=", "np", ".", "array", "(", "desc_embed", ")", "[", ":", "desc_length", "]", "\n", "", "elif", "len", "(", "desc_embed", ")", "<", "desc_length", ":", "\n", "                ", "if", "not", "padding_front", ":", "\n", "#for t in range(len(desc_embed), desc_length):", "\n", "#    desc_embed.append(np.zeros(self.wv_dim))", "\n", "#no longer use zero padding", "\n", "                    ", "gap", "=", "desc_length", "-", "len", "(", "desc_embed", ")", "\n", "desc_embed", "+=", "desc_embed", "*", "int", "(", "gap", "/", "len", "(", "desc_embed", ")", ")", "+", "desc_embed", "[", ":", "int", "(", "gap", "%", "len", "(", "desc_embed", ")", ")", "]", "\n", "desc_embed", "=", "np", ".", "array", "(", "desc_embed", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "#zero padding to the front", "\n", "                    ", "front", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "desc_embed", ")", ",", "desc_length", ")", ":", "\n", "                        ", "front", ".", "append", "(", "np", ".", "zeros", "(", "self", ".", "wv_dim", ")", ")", "\n", "", "desc_embed", "=", "front", "+", "desc_embed", "\n", "desc_embed", "=", "np", ".", "array", "(", "desc_embed", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "self", ".", "desc_embed", "[", "ent_id", "]", "=", "desc_embed", "\n", "self", ".", "desc_index", ".", "append", "(", "ent_id", ")", "\n", "", "self", ".", "desc_index", "=", "np", ".", "array", "(", "self", ".", "desc_index", ")", "\n", "print", "(", "\"Loaded descriptions from\"", ",", "tokenfile", ",", "\":\"", ",", "self", ".", "n_descriptions", ")", "\n", "print", "(", "\"AVG LEN=\"", ",", "avg_length", ",", "'\\n'", ",", "\"MAX LEN=\"", ",", "max_length", ")", "\n", "print", "(", "max_sen", ")", "\n", "self", ".", "desc_embed_padded", "=", "[", "]", "\n", "self", ".", "avg_embed_padded", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ents", "(", ")", ")", ":", "\n", "            ", "vec", "=", "self", ".", "desc_embed", ".", "get", "(", "i", ")", "\n", "avg_vec", "=", "self", ".", "avg_embed", ".", "get", "(", "i", ")", "\n", "assert", "(", "(", "vec", "is", "None", "and", "avg_vec", "is", "None", ")", "or", "(", "not", "(", "vec", "is", "None", ")", "and", "not", "(", "avg_vec", "is", "None", ")", ")", ")", "\n", "if", "vec", "is", "None", ":", "\n", "                ", "vec", "=", "np", ".", "zeros", "(", "(", "self", ".", "desc_length", ",", "self", ".", "wv_dim", ")", ")", "\n", "avg_vec", "=", "np", ".", "zeros", "(", "self", ".", "wv_dim", ")", "\n", "", "self", ".", "desc_embed_padded", ".", "append", "(", "vec", ")", "\n", "self", ".", "avg_embed_padded", ".", "append", "(", "avg_vec", ")", "\n", "", "self", ".", "desc_embed_padded", "=", "np", ".", "array", "(", "self", ".", "desc_embed_padded", ",", "dtype", "=", "np", ".", "float32", ")", "#np.reshape(np.array(self.desc_embed_padded), [-1, self.desc_length * self.wv_dim, 1]) ", "\n", "self", ".", "avg_embed_padded", "=", "np", ".", "array", "(", "self", ".", "avg_embed_padded", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "assert", "(", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "self", ".", "desc_embed_padded", ")", ")", ")", "\n", "print", "(", "\"Padded desc embeddings to\"", ",", "self", ".", "desc_embed_padded", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.map_descriptions": [[202, 258], ["open", "open", "numpy.array", "print", "line.strip().split.strip().split.strip", "set", "KG.KG.ent_str2index", "numpy.array.append", "ent_ids.append", "numpy.any", "line.strip().split.strip().split.strip().lower().split", "line.strip().split.strip().split.strip().split", "title.replace().replace().split", "len", "numpy.array.append", "len", "numpy.isnan", "title.replace().replace().split", "KG.KG.word_str2index", "numpy.array", "len", "line.strip().split.strip().split.strip().lower", "line.strip().split.strip().split.strip", "title.replace().replace", "desc_word_index.append", "numpy.array", "range", "numpy.array", "title.replace().replace", "len", "len", "front.append", "line.strip().split.strip().split.strip", "title.replace", "int", "numpy.zeros", "title.replace", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.word_str2index"], ["", "def", "map_descriptions", "(", "self", ",", "titlefile", ",", "tokenfile", ",", "splitter", "=", "' '", ",", "lower", "=", "True", ",", "stop_words", "=", "None", ",", "padding_front", "=", "False", ")", ":", "\n", "        ", "desc_length", "=", "self", ".", "desc_length", "\n", "titles", "=", "{", "}", "\n", "ent_ids", ",", "desc_embed_list", "=", "[", "]", ",", "[", "]", "\n", "index", "=", "0", "\n", "for", "line", "in", "open", "(", "titlefile", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "titles", "[", "index", "]", "=", "line", "\n", "index", "+=", "1", "\n", "", "index", "=", "0", "\n", "remove", "=", "None", "\n", "if", "not", "(", "stop_words", "is", "None", ")", ":", "\n", "            ", "remove", "=", "set", "(", "stop_words", ")", "\n", "", "for", "line", "in", "open", "(", "tokenfile", ")", ":", "\n", "            ", "title", "=", "titles", "[", "index", "]", "\n", "index", "+=", "1", "\n", "ent_id", "=", "self", ".", "ent_str2index", "(", "title", ")", "\n", "if", "ent_id", "==", "None", ":", "\n", "                ", "continue", "\n", "", "if", "lower", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ".", "split", "(", "splitter", ")", "\n", "", "else", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "splitter", ")", "\n", "", "line", "=", "title", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", "+", "line", "+", "title", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", "\n", "desc_word_index", "=", "[", "]", "\n", "for", "word", "in", "line", ":", "\n", "                ", "if", "(", "remove", "is", "None", ")", "or", "(", "word", "not", "in", "remove", ")", ":", "\n", "                    ", "this_wd_index", "=", "self", ".", "word_str2index", "(", "word", ",", "default", "=", "False", ")", "\n", "if", "not", "this_wd_index", "is", "None", ":", "\n", "                        ", "desc_word_index", ".", "append", "(", "this_wd_index", ")", "\n", "", "", "", "if", "len", "(", "desc_word_index", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "desc_embed", "=", "[", "]", "\n", "for", "i", "in", "desc_word_index", ":", "\n", "                ", "vec", "=", "self", ".", "wv", "[", "i", "]", "\n", "desc_embed", ".", "append", "(", "vec", ")", "\n", "", "if", "len", "(", "desc_embed", ")", ">", "desc_length", ":", "\n", "                ", "desc_embed", "=", "np", ".", "array", "(", "desc_embed", ")", "[", ":", "desc_length", "]", "\n", "", "elif", "len", "(", "desc_embed", ")", "<", "desc_length", ":", "\n", "                ", "if", "not", "padding_front", ":", "\n", "                    ", "gap", "=", "desc_length", "-", "len", "(", "desc_embed", ")", "\n", "desc_embed", "+=", "desc_embed", "*", "int", "(", "gap", "/", "len", "(", "desc_embed", ")", ")", "+", "desc_embed", "[", ":", "int", "(", "gap", "%", "len", "(", "desc_embed", ")", ")", "]", "\n", "desc_embed", "=", "np", ".", "array", "(", "desc_embed", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "#zero padding to the front", "\n", "                    ", "front", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "desc_embed", ")", ",", "desc_length", ")", ":", "\n", "                        ", "front", ".", "append", "(", "np", ".", "zeros", "(", "self", ".", "wv_dim", ")", ")", "\n", "", "desc_embed", "=", "front", "+", "desc_embed", "\n", "desc_embed", "=", "np", ".", "array", "(", "desc_embed", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "desc_embed_list", ".", "append", "(", "desc_embed", ")", "\n", "ent_ids", ".", "append", "(", "ent_id", ")", "\n", "", "desc_embed_list", "=", "np", ".", "array", "(", "desc_embed_list", ",", "dtype", "=", "np", ".", "float32", ")", "#np.reshape(np.array(self.desc_embed_padded), [-1, self.desc_length * self.wv_dim, 1]) ", "\n", "assert", "(", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "desc_embed_list", ")", ")", ")", "\n", "print", "(", "\"Padded desc embeddings to\"", ",", "desc_embed_list", ".", "shape", ",", "\". Returned indices and embedding list.\"", ")", "\n", "return", "ent_ids", ",", "desc_embed_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.word_str2index": [[259, 268], ["KG.KG.token_index.get", "str.lower", "KG.KG.token_index.get"], "methods", ["None"], ["", "def", "word_str2index", "(", "self", ",", "str", ",", "default", "=", "True", ")", ":", "\n", "        ", "rst", "=", "self", ".", "token_index", ".", "get", "(", "str", ")", "\n", "if", "rst", "==", "None", ":", "\n", "            ", "low", "=", "str", ".", "lower", "(", ")", "\n", "if", "low", "!=", "str", ":", "\n", "                ", "rst", "=", "self", ".", "token_index", ".", "get", "(", "str", ")", "\n", "", "if", "rst", "==", "None", "and", "default", ":", "\n", "                ", "rst", "=", "0", "\n", "", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.get_desc_embed": [[269, 271], ["KG.KG.desc_embed.get"], "methods", ["None"], ["", "def", "get_desc_embed", "(", "self", ",", "ent_id", ")", ":", "\n", "        ", "return", "self", ".", "desc_embed", ".", "get", "(", "ent_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents": [[272, 278], ["None"], "methods", ["None"], ["", "def", "num_ents", "(", "self", ")", ":", "\n", "        ", "'''Returns number of entities. \n\n        This means all entities have index that 0 <= index < num_ents().\n        '''", "\n", "return", "self", ".", "n_ents", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_rels": [[279, 286], ["None"], "methods", ["None"], ["", "def", "num_rels", "(", "self", ")", ":", "\n", "        ", "'''Returns number of relations.\n\n        This means all relations have index that 0 <= index < num_rels().\n        Note that we consider *ALL* relations, e.g. $R_O$, $R_h$ and $R_{tr}$.\n        '''", "\n", "return", "self", ".", "n_rels", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_triples": [[287, 289], ["len"], "methods", ["None"], ["", "def", "num_triples", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "triples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.rel_str2index": [[290, 295], ["KG.KG.index_rels.get"], "methods", ["None"], ["", "def", "rel_str2index", "(", "self", ",", "rel_str", ")", ":", "\n", "        ", "'''For relation `rel_str` in string, returns its index.\n\n        This is not used in training, but can be helpful for visualizing/debugging etc.'''", "\n", "return", "self", ".", "index_rels", ".", "get", "(", "rel_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.rel_index2str": [[296, 301], ["KG.KG.rels.get"], "methods", ["None"], ["", "def", "rel_index2str", "(", "self", ",", "rel_index", ")", ":", "\n", "        ", "'''For relation `rel_index` in int, returns its string.\n\n        This is not used in training, but can be helpful for visualizing/debugging etc.'''", "\n", "return", "self", ".", "rels", ".", "get", "(", "rel_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.ent_str2index": [[302, 307], ["KG.KG.index_ents.get"], "methods", ["None"], ["", "def", "ent_str2index", "(", "self", ",", "ent_str", ")", ":", "\n", "        ", "'''For entity `ent_str` in string, returns its index.\n\n        This is not used in training, but can be helpful for visualizing/debugging etc.'''", "\n", "return", "self", ".", "index_ents", ".", "get", "(", "ent_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.ent_index2str": [[308, 313], ["KG.KG.ents.get"], "methods", ["None"], ["", "def", "ent_index2str", "(", "self", ",", "ent_index", ")", ":", "\n", "        ", "'''For entity `ent_index` in int, returns its string.\n\n        This is not used in training, but can be helpful for visualizing/debugging etc.'''", "\n", "return", "self", ".", "ents", ".", "get", "(", "ent_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.rel": [[314, 316], ["numpy.array", "range", "KG.KG.num_rels"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_rels"], ["", "def", "rel", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "range", "(", "self", ".", "num_rels", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt_pos": [[317, 329], ["numpy.copy", "numpy.random.randint", "KG.KG.num_ents", "numpy.random.randint", "tuple", "KG.KG.num_ents"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents"], ["", "def", "corrupt_pos", "(", "self", ",", "t", ",", "pos", ")", ":", "\n", "        ", "hit", "=", "True", "\n", "res", "=", "None", "\n", "while", "hit", ":", "\n", "            ", "res", "=", "np", ".", "copy", "(", "t", ")", "\n", "samp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_ents", "(", ")", ")", "\n", "while", "samp", "==", "t", "[", "pos", "]", ":", "\n", "                ", "samp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_ents", "(", ")", ")", "\n", "", "res", "[", "pos", "]", "=", "samp", "\n", "if", "tuple", "(", "res", ")", "not", "in", "self", ".", "triples_record", ":", "\n", "                ", "hit", "=", "False", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt": [[332, 346], ["KG.KG.corrupt_pos", "KG.KG.corrupt_pos", "numpy.random.seed", "int", "numpy.random.uniform", "KG.KG.corrupt_pos", "KG.KG.corrupt_pos", "time.time"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt_pos", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt_pos", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt_pos", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt_pos"], ["", "def", "corrupt", "(", "self", ",", "t", ",", "tar", "=", "None", ")", ":", "\n", "        ", "if", "tar", "==", "'t'", ":", "\n", "            ", "return", "self", ".", "corrupt_pos", "(", "t", ",", "2", ")", "\n", "", "elif", "tar", "==", "'h'", ":", "\n", "            ", "return", "self", ".", "corrupt_pos", "(", "t", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "this_tph", "=", "self", ".", "tph", "[", "t", "[", "1", "]", "]", "\n", "this_hpt", "=", "self", ".", "hpt", "[", "t", "[", "1", "]", "]", "\n", "assert", "(", "this_tph", ">", "0", "and", "this_hpt", ">", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", "high", "=", "this_tph", "+", "this_hpt", ",", "low", "=", "0.", ")", "<", "this_hpt", ":", "\n", "                ", "return", "self", ".", "corrupt_pos", "(", "t", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "corrupt_pos", "(", "t", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt_batch": [[348, 350], ["numpy.array", "KG.KG.corrupt"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.corrupt"], ["", "", "", "def", "corrupt_batch", "(", "self", ",", "t_batch", ",", "tar", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "corrupt", "(", "t", ",", "tar", ")", "for", "t", "in", "t_batch", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.load_stop_words": [[351, 357], ["open", "line.strip.strip.strip", "stopwords.append"], "methods", ["None"], ["", "def", "load_stop_words", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "stopwords", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filepath", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "stopwords", ".", "append", "(", "line", ")", "\n", "", "return", "stopwords", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.save": [[358, 364], ["open", "pickle.dump", "open.close", "print"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "#self.desc_embed = self.desc_embed_padded = None", "\n", "pickle", ".", "dump", "(", "self", ".", "__dict__", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "\"Save data object as\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.load": [[365, 371], ["open", "pickle.load", "KG.KG.__dict__.update", "print", "print"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "tmp_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "tmp_dict", ")", "\n", "print", "(", "\"Loaded data object from\"", ",", "filename", ")", "\n", "print", "(", "\"===============\\nCaution: need to reload desc embeddings.\\n=====================\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.__init__": [[53, 91], ["numpy.array", "numpy.array", "set", "set", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "networkx.DiGraph", "KG.KG.KG", "KG.KG.KG"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "KG1", "=", "None", ",", "KG2", "=", "None", ")", ":", "\n", "        ", "if", "KG1", "==", "None", "or", "KG2", "==", "None", ":", "\n", "            ", "self", ".", "KG1", "=", "KG", "(", ")", "\n", "self", ".", "KG2", "=", "KG", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "KG1", "=", "KG1", "\n", "self", ".", "KG2", "=", "KG2", "\n", "", "self", ".", "lan1", "=", "'en'", "\n", "self", ".", "lan2", "=", "'fr'", "\n", "self", ".", "align", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "align_desc", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "aligned_KG1", "=", "set", "(", "[", "]", ")", "\n", "self", ".", "aligned_KG2", "=", "set", "(", "[", "]", ")", "\n", "self", ".", "aligned_KG1_index", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "aligned_KG2_index", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "unaligned_KG1_index", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "unaligned_KG2_index", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "align_valid", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "n_align", "=", "0", "\n", "self", ".", "n_align_desc", "=", "0", "\n", "self", ".", "ent12", "=", "{", "}", "\n", "self", ".", "ent21", "=", "{", "}", "\n", "# ===========================", "\n", "# add taxonomy store", "\n", "self", ".", "taxonomy", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "con12", "=", "{", "}", "\n", "self", ".", "con21", "=", "{", "}", "\n", "self", ".", "n_taxonomy", "=", "0", "\n", "# ===========================", "\n", "self", ".", "batch_sizeK1", "=", "1024", "\n", "self", ".", "batch_sizeK2", "=", "64", "\n", "self", ".", "batch_sizeA", "=", "32", "\n", "self", ".", "L1", "=", "False", "\n", "self", ".", "dim1", "=", "300", "#stored for TF_Part", "\n", "self", ".", "dim2", "=", "100", "\n", "self", ".", "GoTree", "=", "nx", ".", "DiGraph", "(", ")", "# completed after loading taxonomy and alignment", "\n", "self", ".", "max_proDegree", "=", "1", "# initialized as -1 (updated after loading alignment)", "\n", "self", ".", "min_proDegree", "=", "1", "# initialized as -1 (updated after loading alignment)", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load_align": [[92, 174], ["print", "networkx.get_node_attributes", "open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len", "networkx.set_node_attributes", "print", "print", "print", "line.rstrip().split.rstrip().split.rstrip().split", "numpy.array", "max", "min", "str", "str", "multiG.multiG.KG1.ent_str2index", "multiG.multiG.KG2.ent_str2index", "multiG.multiG.GoTree.has_node", "multiG.multiG.GoTree.has_node", "multiG.multiG.align.append", "multiG.multiG.aligned_KG1.add", "multiG.multiG.aligned_KG2.add", "multiG.multiG.unaligned_KG1_index.append", "multiG.multiG.unaligned_KG2_index.append", "networkx.get_node_attributes.values", "networkx.get_node_attributes.values", "str", "line.rstrip().split.rstrip().split.rstrip", "multiG.multiG.ent12.get", "set", "multiG.multiG.ent12[].add", "multiG.multiG.ent21.get", "set", "multiG.multiG.ent21[].add", "str", "len", "multiG.multiG.align_desc.append", "len", "str", "str", "len", "multiG.multiG.KG1.get_desc_embed", "multiG.multiG.KG2.get_desc_embed", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.get_desc_embed", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.get_desc_embed"], ["", "def", "load_align", "(", "self", ",", "filename", ",", "lan1", "=", "'en'", ",", "lan2", "=", "'fr'", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ",", "desc", "=", "False", ")", ":", "\n", "        ", "'''Load the dataset.'''", "\n", "print", "(", "\"current size: [ entity: \"", "+", "str", "(", "len", "(", "self", ".", "KG1", ".", "ents", ")", ")", "+", "\"] [ concept: \"", "+", "str", "(", "len", "(", "self", ".", "KG2", ".", "ents", ")", ")", "+", "\"]\"", ")", "\n", "weight", "=", "1.", "\n", "align", "=", "[", "]", "\n", "last_c", "=", "-", "1", "\n", "last_r", "=", "-", "1", "\n", "self", ".", "n_align", "=", "0", "\n", "self", ".", "n_align_desc", "=", "0", "\n", "self", ".", "align", "=", "[", "]", "\n", "if", "desc", ":", "\n", "            ", "self", ".", "align_desc", "=", "[", "]", "\n", "", "temp_proDegree", "=", "nx", ".", "get_node_attributes", "(", "self", ".", "GoTree", ",", "name", "=", "'connect'", ")", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "try", ":", "\n", "                ", "e1", "=", "self", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "# pairs in GOTerm and protein (triples again)", "\n", "assert", "e1", "!=", "None", "and", "e2", "!=", "None", "\n", "# ========================================================", "\n", "# original version ", "\n", "# TODO: Should adopt new concepts which only in taxonomy", "\n", "# ========================================================", "\n", "'''\n                if e1 == None:\n                    current_entnum = len(self.KG1.ents)\n                    self.KG1.ents[current_entnum] = line[0]\n                    self.KG1.index_ents[line[0]] = current_entnum\n                    self.KG1.ent_tokens[current_entnum] = set(line[0].replace('(','').replace(')','').split(' '))\n                    e1 = self.KG1.ent_str2index(line[0])\n                if e2 == None:\n                    current_entnum = len(self.KG2.ents)\n                    self.KG2.ents[current_entnum] = line[1]\n                    self.KG2.index_ents[line[1]] = current_entnum\n                    self.KG2.ent_tokens[current_entnum] = set(line[1].replace('(','').replace(')','').split(' '))\n                    e2 = self.KG2.ent_str2index(line[1])\n                '''", "\n", "# === Load node properties ====", "\n", "assert", "(", "self", ".", "GoTree", ".", "has_node", "(", "e2", ")", ")", "\n", "if", "self", ".", "GoTree", ".", "has_node", "(", "e2", ")", ":", "\n", "                    ", "temp_proDegree", "[", "e2", "]", "+=", "1", "\n", "# === End: load properties ====", "\n", "\n", "", "self", ".", "align", ".", "append", "(", "(", "e1", ",", "e2", ")", ")", "\n", "self", ".", "aligned_KG1", ".", "add", "(", "e1", ")", "\n", "self", ".", "aligned_KG2", ".", "add", "(", "e2", ")", "\n", "if", "self", ".", "ent12", ".", "get", "(", "e1", ")", "==", "None", ":", "\n", "                    ", "self", ".", "ent12", "[", "e1", "]", "=", "set", "(", "[", "e2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "ent12", "[", "e1", "]", ".", "add", "(", "e2", ")", "\n", "", "if", "self", ".", "ent21", ".", "get", "(", "e2", ")", "==", "None", ":", "\n", "                    ", "self", ".", "ent21", "[", "e2", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "ent21", "[", "e2", "]", ".", "add", "(", "e1", ")", "\n", "", "self", ".", "n_align", "+=", "1", "\n", "if", "desc", ":", "\n", "                    ", "if", "(", "not", "self", ".", "KG1", ".", "get_desc_embed", "(", "e1", ")", "is", "None", ")", "and", "(", "not", "self", ".", "KG2", ".", "get_desc_embed", "(", "e2", ")", "is", "None", ")", ":", "\n", "                        ", "self", ".", "align_desc", ".", "append", "(", "(", "e1", ",", "e2", ")", ")", "\n", "self", ".", "n_align_desc", "+=", "1", "\n", "", "", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "self", ".", "align", "=", "np", ".", "array", "(", "self", ".", "align", ")", "\n", "if", "desc", ":", "\n", "            ", "self", ".", "align_desc", "=", "np", ".", "array", "(", "self", ".", "align_desc", ")", "\n", "", "self", ".", "aligned_KG1_index", "=", "np", ".", "array", "(", "[", "e", "for", "e", "in", "self", ".", "aligned_KG1", "]", ")", "\n", "self", ".", "aligned_KG2_index", "=", "np", ".", "array", "(", "[", "e", "for", "e", "in", "self", ".", "aligned_KG2", "]", ")", "\n", "self", ".", "unaligned_KG1_index", ",", "self", ".", "unaligned_KG2_index", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "self", ".", "KG1", ".", "desc_index", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "aligned_KG1", ":", "\n", "                ", "self", ".", "unaligned_KG1_index", ".", "append", "(", "i", ")", "\n", "", "", "self", ".", "unaligned_KG1_index", "=", "np", ".", "array", "(", "self", ".", "unaligned_KG1_index", ")", "\n", "for", "i", "in", "self", ".", "KG2", ".", "desc_index", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "aligned_KG2", ":", "\n", "                ", "self", ".", "unaligned_KG2_index", ".", "append", "(", "i", ")", "\n", "", "", "self", ".", "unaligned_KG2_index", "=", "np", ".", "array", "(", "self", ".", "unaligned_KG2_index", ")", "\n", "self", ".", "KG1", ".", "n_ents", "=", "len", "(", "self", ".", "KG1", ".", "ents", ")", "\n", "self", ".", "KG2", ".", "n_ents", "=", "len", "(", "self", ".", "KG2", ".", "ents", ")", "\n", "nx", ".", "set_node_attributes", "(", "self", ".", "GoTree", ",", "name", "=", "'connect'", ",", "values", "=", "temp_proDegree", ")", "\n", "self", ".", "max_proDegree", ",", "self", ".", "min_proDegree", "=", "max", "(", "temp_proDegree", ".", "values", "(", ")", ")", ",", "min", "(", "temp_proDegree", ".", "values", "(", ")", ")", "\n", "print", "(", "\"Loaded aligned entities from\"", ",", "filename", ",", "\". #pairs:\"", ",", "self", ".", "n_align", ")", "\n", "print", "(", "\"Protein degree: [max] \"", ",", "str", "(", "self", ".", "max_proDegree", ")", ",", "\" [min] \"", ",", "str", "(", "self", ".", "min_proDegree", ")", ")", "\n", "print", "(", "\"Entity and concept enlarged to size: [ entity: \"", "+", "str", "(", "len", "(", "self", ".", "KG1", ".", "ents", ")", ")", "+", "\"] [ concept: \"", "+", "str", "(", "len", "(", "self", ".", "KG2", ".", "ents", ")", ")", "+", "\"]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.construct_tax_node": [[175, 208], ["multiG.multiG.GoTree.add_edge", "networkx.get_node_attributes", "networkx.get_node_attributes", "networkx.set_node_attributes", "networkx.set_node_attributes", "multiG.multiG.GoTree.has_node", "multiG.multiG.GoTree.has_node", "multiG.multiG.GoTree.has_node", "multiG.multiG.GoTree.add_node", "multiG.multiG.GoTree.has_node", "multiG.multiG.GoTree.add_node", "multiG.updateUp_height", "multiG.updateDown_depth"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.updateUp_height", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.updateDown_depth"], ["", "def", "construct_tax_node", "(", "self", ",", "lowerNode", ",", "upperNode", ")", ":", "\n", "        ", "newChild", "=", "not", "self", ".", "GoTree", ".", "has_node", "(", "lowerNode", ")", "\n", "newParent", "=", "not", "self", ".", "GoTree", ".", "has_node", "(", "upperNode", ")", "\n", "# add node (without update level)", "\n", "if", "not", "self", ".", "GoTree", ".", "has_node", "(", "lowerNode", ")", ":", "\n", "            ", "self", ".", "GoTree", ".", "add_node", "(", "lowerNode", ",", "connect", "=", "0", ",", "depth", "=", "0", ",", "height", "=", "0", ")", "\n", "", "if", "not", "self", ".", "GoTree", ".", "has_node", "(", "upperNode", ")", ":", "\n", "            ", "self", ".", "GoTree", ".", "add_node", "(", "upperNode", ",", "connect", "=", "0", ",", "depth", "=", "0", ",", "height", "=", "0", ")", "\n", "# add edge (ToChild only)", "\n", "# GoTree.add_edge(lowerNode, upperNode, relname=\"ToParent\")", "\n", "", "self", ".", "GoTree", ".", "add_edge", "(", "upperNode", ",", "lowerNode", ",", "relname", "=", "\"ToChild\"", ")", "\n", "temp_height", "=", "nx", ".", "get_node_attributes", "(", "self", ".", "GoTree", ",", "name", "=", "'height'", ")", "\n", "temp_depth", "=", "nx", ".", "get_node_attributes", "(", "self", ".", "GoTree", ",", "name", "=", "'depth'", ")", "\n", "# udpate topLevel and btmLevel", "\n", "if", "newParent", "and", "newChild", ":", "# case 1", "\n", "            ", "temp_height", "[", "lowerNode", "]", ",", "temp_height", "[", "upperNode", "]", "=", "0", ",", "1", "\n", "temp_depth", "[", "lowerNode", "]", ",", "temp_depth", "[", "upperNode", "]", "=", "1", ",", "0", "\n", "", "elif", "not", "newParent", "and", "newChild", ":", "# case 2: child is new", "\n", "            ", "temp_height", "[", "lowerNode", "]", "=", "0", "\n", "temp_depth", "[", "lowerNode", "]", "=", "temp_depth", "[", "upperNode", "]", "+", "1", "\n", "# update height of all parents", "\n", "temp_height", "=", "updateUp_height", "(", "self", ".", "GoTree", ",", "upperNode", ",", "temp_height", ")", "\n", "", "elif", "newParent", "and", "not", "newChild", ":", "# case 3: parent is new", "\n", "            ", "temp_depth", "[", "upperNode", "]", "=", "0", "\n", "temp_height", "[", "upperNode", "]", "=", "temp_height", "[", "lowerNode", "]", "+", "1", "\n", "# update depth of all children", "\n", "temp_depth", "=", "updateDown_depth", "(", "self", ".", "GoTree", ",", "lowerNode", ",", "temp_depth", ")", "\n", "", "else", ":", "# only add edges", "\n", "# nothing needs to be changed at current rules", "\n", "            ", "pass", "\n", "# reset height and depth", "\n", "", "nx", ".", "set_node_attributes", "(", "self", ".", "GoTree", ",", "name", "=", "'height'", ",", "values", "=", "temp_height", ")", "\n", "nx", ".", "set_node_attributes", "(", "self", ".", "GoTree", ",", "name", "=", "'depth'", ",", "values", "=", "temp_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load_taxonomy": [[209, 254], ["range", "tqdm.tqdm.tqdm", "numpy.array", "print", "print", "len", "multiG.multiG.GoTree.add_node", "enumerate", "line.rstrip().split.rstrip().split.rstrip().split", "multiG.multiG.KG2.ent_str2index", "multiG.multiG.KG2.ent_str2index", "multiG.multiG.construct_tax_node", "multiG.multiG.taxonomy.append", "open", "len", "set", "multiG.multiG.KG2.ent_str2index", "len", "set", "multiG.multiG.KG2.ent_str2index", "multiG.multiG.con12.get", "set", "multiG.multiG.con12[].add", "multiG.multiG.con21.get", "set", "multiG.multiG.con21[].add", "line.rstrip().split.rstrip().split.rstrip", "line[].replace().replace().split", "line[].replace().replace().split", "str", "len", "line[].replace().replace", "line[].replace().replace", "str", "len", "line[].replace", "line[].replace"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.construct_tax_node", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_taxonomy", "(", "self", ",", "filename", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ")", ":", "\n", "        ", "taxonomy", "=", "[", "]", "\n", "last_c", "=", "-", "1", "\n", "last_r", "=", "-", "1", "\n", "self", ".", "n_taxonomy", "=", "0", "\n", "self", ".", "taxonomy", "=", "[", "]", "\n", "# before load hierarchy", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "KG2", ".", "ents", ")", ")", ":", "# avoid index error", "\n", "            ", "self", ".", "GoTree", ".", "add_node", "(", "i", ",", "connect", "=", "0", ",", "depth", "=", "0", ",", "height", "=", "0", ")", "\n", "#for line in open(filename):", "\n", "", "for", "lineno", ",", "line", "in", "tqdm", "(", "enumerate", "(", "open", "(", "filename", ")", ")", ",", "desc", "=", "'load GoTerm Structures'", ",", "unit", "=", "' struct triples'", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "c1", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "c2", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "# ===== Expand Taxonomy =====", "\n", "if", "c1", "==", "None", ":", "\n", "                ", "current_entnum", "=", "len", "(", "self", ".", "KG2", ".", "ents", ")", "\n", "self", ".", "KG2", ".", "ents", "[", "current_entnum", "]", "=", "line", "[", "0", "]", "\n", "self", ".", "KG2", ".", "index_ents", "[", "line", "[", "0", "]", "]", "=", "current_entnum", "\n", "self", ".", "KG2", ".", "ent_tokens", "[", "current_entnum", "]", "=", "set", "(", "line", "[", "0", "]", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", ")", "\n", "c1", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "", "if", "c2", "==", "None", ":", "\n", "                ", "current_entnum", "=", "len", "(", "self", ".", "KG2", ".", "ents", ")", "\n", "self", ".", "KG2", ".", "ents", "[", "current_entnum", "]", "=", "line", "[", "2", "]", "\n", "self", ".", "KG2", ".", "index_ents", "[", "line", "[", "2", "]", "]", "=", "current_entnum", "\n", "self", ".", "KG2", ".", "ent_tokens", "[", "current_entnum", "]", "=", "set", "(", "line", "[", "2", "]", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "split", "(", "' '", ")", ")", "\n", "c2", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "\n", "# ====== Construct Taxonomy Tree ===", "\n", "", "self", ".", "construct_tax_node", "(", "c1", ",", "c2", ")", "# parameter: lowerNode, upperNode", "\n", "# ====== End Of Preprocessing ======", "\n", "\n", "self", ".", "taxonomy", ".", "append", "(", "(", "c1", ",", "c2", ")", ")", "\n", "if", "self", ".", "con12", ".", "get", "(", "c1", ")", "==", "None", ":", "\n", "                ", "self", ".", "con12", "[", "c1", "]", "=", "set", "(", "[", "c2", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "con12", "[", "c1", "]", ".", "add", "(", "c2", ")", "\n", "", "if", "self", ".", "con21", ".", "get", "(", "c2", ")", "==", "None", ":", "\n", "                ", "self", ".", "con21", "[", "c2", "]", "=", "set", "(", "[", "c1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "con21", "[", "c2", "]", ".", "add", "(", "c1", ")", "\n", "", "self", ".", "n_taxonomy", "+=", "1", "\n", "", "self", ".", "taxonomy", "=", "np", ".", "array", "(", "self", ".", "taxonomy", ")", "\n", "print", "(", "\"Loaded onto taxonomy from\"", ",", "filename", ",", "\". #pairs:\"", ",", "self", ".", "n_taxonomy", ")", "\n", "print", "(", "\"Entity and concept enlarged to size: [ entity: \"", "+", "str", "(", "len", "(", "self", ".", "KG1", ".", "ents", ")", ")", "+", "\"] [ concept: \"", "+", "str", "(", "len", "(", "self", ".", "KG2", ".", "ents", ")", ")", "+", "\"]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load_valid": [[255, 278], ["open", "numpy.array", "print", "line.rstrip().split.rstrip().split.rstrip().split", "multiG.multiG.KG1.ent_str2index", "multiG.multiG.KG2.ent_str2index", "multiG.multiG.ent12.get", "set", "multiG.multiG.ent12[].add", "multiG.multiG.ent21.get", "set", "multiG.multiG.ent21[].add", "multiG.multiG.align_valid.append", "line.rstrip().split.rstrip().split.rstrip", "len", "multiG.multiG.KG1.get_desc_embed", "multiG.multiG.KG2.get_desc_embed"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.get_desc_embed", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.get_desc_embed"], ["", "def", "load_valid", "(", "self", ",", "filename", ",", "size", "=", "1024", ",", "lan1", "=", "'en'", ",", "lan2", "=", "'fr'", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ",", "desc", "=", "False", ")", ":", "\n", "        ", "'''Load the dataset.'''", "\n", "self", ".", "align_valid", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "e1", "=", "self", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "1", "]", ")", "\n", "if", "e1", "==", "None", "or", "e2", "==", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "ent12", ".", "get", "(", "e1", ")", "==", "None", ":", "\n", "                ", "self", ".", "ent12", "[", "e1", "]", "=", "set", "(", "[", "e2", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ent12", "[", "e1", "]", ".", "add", "(", "e2", ")", "\n", "", "if", "self", ".", "ent21", ".", "get", "(", "e2", ")", "==", "None", ":", "\n", "                ", "self", ".", "ent21", "[", "e2", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ent21", "[", "e2", "]", ".", "add", "(", "e1", ")", "\n", "", "if", "(", "not", "self", ".", "KG1", ".", "get_desc_embed", "(", "e1", ")", "is", "None", ")", "and", "(", "not", "self", ".", "KG2", ".", "get_desc_embed", "(", "e2", ")", "is", "None", ")", ":", "\n", "                ", "self", ".", "align_valid", ".", "append", "(", "(", "e1", ",", "e2", ")", ")", "\n", "if", "len", "(", "self", ".", "align_valid", ")", ">=", "size", ":", "\n", "                    ", "break", "\n", "", "", "", "self", ".", "align_valid", "=", "np", ".", "array", "(", "self", ".", "align_valid", ")", "\n", "print", "(", "\"Loaded validation entities from\"", ",", "filename", ",", "\". #pairs:\"", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load_more_gt": [[279, 295], ["open", "line.rstrip().split.rstrip().split.rstrip().split", "multiG.multiG.KG1.ent_str2index", "multiG.multiG.KG2.ent_str2index", "print", "multiG.multiG.ent12.get", "set", "multiG.multiG.ent12[].add", "multiG.multiG.ent21.get", "set", "multiG.multiG.ent21[].add", "line.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_more_gt", "(", "self", ",", "filename", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "e1", "=", "self", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "1", "]", ")", "\n", "if", "e1", "==", "None", "or", "e2", "==", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "ent12", ".", "get", "(", "e1", ")", "==", "None", ":", "\n", "                ", "self", ".", "ent12", "[", "e1", "]", "=", "set", "(", "[", "e2", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ent12", "[", "e1", "]", ".", "add", "(", "e2", ")", "\n", "", "if", "self", ".", "ent21", ".", "get", "(", "e2", ")", "==", "None", ":", "\n", "                ", "self", ".", "ent21", "[", "e2", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ent21", "[", "e2", "]", ".", "add", "(", "e1", ")", "\n", "", "print", "(", "\"Loaded more gt file for negative sampling from\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.num_align": [[296, 298], ["None"], "methods", ["None"], ["", "", "def", "num_align", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_align", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.num_taxonomy": [[299, 301], ["None"], "methods", ["None"], ["", "def", "num_taxonomy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_taxonomy", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.num_align_desc": [[302, 308], ["None"], "methods", ["None"], ["", "def", "num_align_desc", "(", "self", ")", ":", "\n", "        ", "'''Returns number of entities. \n\n        This means all entities have index that 0 <= index < num_ents().\n        '''", "\n", "return", "self", ".", "n_align_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_desc_pos": [[309, 332], ["numpy.copy", "numpy.random.choice", "numpy.random.choice", "numpy.array", "numpy.random.choice", "numpy.random.choice", "numpy.array"], "methods", ["None"], ["", "def", "corrupt_desc_pos", "(", "self", ",", "align", ",", "pos", ",", "sample_global", "=", "True", ")", ":", "\n", "        ", "assert", "(", "pos", "in", "[", "0", ",", "1", "]", ")", "\n", "hit", "=", "True", "\n", "res", "=", "None", "\n", "while", "hit", ":", "\n", "            ", "res", "=", "np", ".", "copy", "(", "align", ")", "\n", "if", "pos", "==", "0", ":", "\n", "                ", "if", "sample_global", ":", "\n", "                    ", "samp", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "KG1", ".", "desc_index", ")", "\n", "", "else", ":", "\n", "                    ", "samp", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "aligned_KG1_index", ")", "\n", "", "if", "samp", "not", "in", "self", ".", "ent21", "[", "align", "[", "1", "]", "]", ":", "\n", "                    ", "hit", "=", "False", "\n", "res", "=", "np", ".", "array", "(", "[", "samp", ",", "align", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "sample_global", ":", "\n", "                    ", "samp", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "KG2", ".", "desc_index", ")", "\n", "", "else", ":", "\n", "                    ", "samp", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "aligned_KG2_index", ")", "\n", "", "if", "samp", "not", "in", "self", ".", "ent12", "[", "align", "[", "0", "]", "]", ":", "\n", "                    ", "hit", "=", "False", "\n", "res", "=", "np", ".", "array", "(", "[", "align", "[", "0", "]", ",", "samp", "]", ")", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_desc": [[333, 338], ["multiG.multiG.corrupt_desc_pos", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_desc_pos"], ["", "def", "corrupt_desc", "(", "self", ",", "align", ",", "tar", "=", "None", ")", ":", "\n", "        ", "pos", "=", "tar", "\n", "if", "pos", "==", "None", ":", "\n", "            ", "pos", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "", "return", "self", ".", "corrupt_desc_pos", "(", "align", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_align_pos": [[339, 356], ["numpy.copy", "numpy.random.randint", "numpy.random.randint", "multiG.multiG.KG1.num_ents", "numpy.array", "multiG.multiG.KG2.num_ents", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents"], ["", "def", "corrupt_align_pos", "(", "self", ",", "align", ",", "pos", ")", ":", "\n", "        ", "assert", "(", "pos", "in", "[", "0", ",", "1", "]", ")", "\n", "hit", "=", "True", "\n", "res", "=", "None", "\n", "while", "hit", ":", "\n", "            ", "res", "=", "np", ".", "copy", "(", "align", ")", "\n", "if", "pos", "==", "0", ":", "\n", "                ", "samp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "KG1", ".", "num_ents", "(", ")", ")", "\n", "if", "samp", "not", "in", "self", ".", "ent21", "[", "align", "[", "1", "]", "]", ":", "\n", "                    ", "hit", "=", "False", "\n", "res", "=", "np", ".", "array", "(", "[", "samp", ",", "align", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "samp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "KG2", ".", "num_ents", "(", ")", ")", "\n", "if", "samp", "not", "in", "self", ".", "ent12", "[", "align", "[", "0", "]", "]", ":", "\n", "                    ", "hit", "=", "False", "\n", "res", "=", "np", ".", "array", "(", "[", "align", "[", "0", "]", ",", "samp", "]", ")", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_tax_pos": [[357, 374], ["numpy.copy", "numpy.random.randint", "numpy.random.randint", "multiG.multiG.KG2.num_ents", "numpy.array", "multiG.multiG.KG2.num_ents", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents"], ["", "def", "corrupt_tax_pos", "(", "self", ",", "align", ",", "pos", ")", ":", "\n", "        ", "assert", "(", "pos", "in", "[", "0", ",", "1", "]", ")", "\n", "hit", "=", "True", "\n", "res", "=", "None", "\n", "while", "hit", ":", "\n", "            ", "res", "=", "np", ".", "copy", "(", "align", ")", "\n", "if", "pos", "==", "0", ":", "\n", "                ", "samp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "KG2", ".", "num_ents", "(", ")", ")", "\n", "if", "samp", "not", "in", "self", ".", "con21", "[", "align", "[", "1", "]", "]", ":", "\n", "                    ", "hit", "=", "False", "\n", "res", "=", "np", ".", "array", "(", "[", "samp", ",", "align", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "samp", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "KG2", ".", "num_ents", "(", ")", ")", "\n", "if", "samp", "not", "in", "self", ".", "con12", "[", "align", "[", "0", "]", "]", ":", "\n", "                    ", "hit", "=", "False", "\n", "res", "=", "np", ".", "array", "(", "[", "align", "[", "0", "]", ",", "samp", "]", ")", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_align": [[375, 380], ["multiG.multiG.corrupt_align_pos", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_align_pos"], ["", "def", "corrupt_align", "(", "self", ",", "align", ",", "tar", "=", "None", ")", ":", "\n", "        ", "pos", "=", "tar", "\n", "if", "pos", "==", "None", ":", "\n", "            ", "pos", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "", "return", "self", ".", "corrupt_align_pos", "(", "align", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_tax": [[381, 386], ["multiG.multiG.corrupt_tax_pos", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_tax_pos"], ["", "def", "corrupt_tax", "(", "self", ",", "align", ",", "tar", "=", "None", ")", ":", "\n", "        ", "pos", "=", "tar", "\n", "if", "pos", "==", "None", ":", "\n", "            ", "pos", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "", "return", "self", ".", "corrupt_tax_pos", "(", "align", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_desc_batch": [[388, 391], ["numpy.random.seed", "numpy.array", "int", "time.time", "time.time", "time.time", "time.time", "multiG.multiG.corrupt_desc"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_desc"], ["", "def", "corrupt_desc_batch", "(", "self", ",", "a_batch", ",", "tar", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "corrupt_desc", "(", "a", ",", "tar", ")", "for", "a", "in", "a_batch", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_align_batch": [[392, 395], ["numpy.random.seed", "numpy.array", "int", "time.time", "time.time", "time.time", "time.time", "multiG.multiG.corrupt_align"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_align"], ["", "def", "corrupt_align_batch", "(", "self", ",", "a_batch", ",", "tar", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "corrupt_align", "(", "a", ",", "tar", ")", "for", "a", "in", "a_batch", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_tax_batch": [[396, 399], ["numpy.random.seed", "numpy.array", "int", "time.time", "time.time", "time.time", "time.time", "multiG.multiG.corrupt_tax"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.corrupt_tax"], ["", "def", "corrupt_tax_batch", "(", "self", ",", "a_batch", ",", "tar", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "corrupt_tax", "(", "a", ",", "tar", ")", "for", "a", "in", "a_batch", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.sample_false_pair": [[400, 404], ["numpy.random.choice", "numpy.random.choice", "numpy.array", "range"], "methods", ["None"], ["", "def", "sample_false_pair", "(", "self", ",", "batch_sizeA", ")", ":", "\n", "        ", "a", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "unaligned_KG1_index", ",", "batch_sizeA", ")", "\n", "b", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "unaligned_KG2_index", ",", "batch_sizeA", ")", "\n", "return", "np", ".", "array", "(", "[", "(", "a", "[", "i", "]", ",", "b", "[", "i", "]", ")", "for", "i", "in", "range", "(", "batch_sizeA", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.expand_align": [[405, 408], ["None"], "methods", ["None"], ["", "def", "expand_align", "(", "self", ",", "list_of_pairs", ")", ":", "\n", "# TODO", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.token_overlap": [[409, 417], ["min", "len", "len"], "methods", ["None"], ["", "def", "token_overlap", "(", "self", ",", "set1", ",", "set2", ")", ":", "\n", "        ", "min_len", "=", "min", "(", "len", "(", "set1", ")", ",", "len", "(", "set2", ")", ")", "\n", "hit", "=", "0.", "\n", "for", "tk", "in", "set1", ":", "\n", "            ", "for", "tk2", "in", "set2", ":", "\n", "                ", "if", "tk", "==", "tk2", ":", "\n", "                    ", "hit", "+=", "1", "\n", "", "", "", "return", "hit", "/", "min_len", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.save": [[418, 423], ["open", "pickle.dump", "open.close", "print"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "self", ".", "__dict__", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "\"Save data object as\"", ",", "filename", ")", "\n", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load": [[423, 428], ["open", "pickle.load", "multiG.multiG.__dict__.update", "print"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "tmp_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "tmp_dict", ")", "\n", "print", "(", "\"Loaded data object from\"", ",", "filename", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.updateUp_height": [[17, 33], ["Queue.Queue", "Queue.Queue.put", "Queue.Queue.empty", "Queue.Queue.get", "max", "list", "Queue.Queue.put", "networkx.bfs_edges", "list", "networkx.bfs_edges"], "function", ["None"], ["def", "updateUp_height", "(", "graph", ",", "startNode", ",", "height_dict", ")", ":", "\n", "    ", "nodeQueue", "=", "Queue", ".", "Queue", "(", ")", "\n", "#nodeQueue = Queue()", "\n", "nodeQueue", ".", "put", "(", "startNode", ")", "\n", "while", "not", "nodeQueue", ".", "empty", "(", ")", ":", "\n", "        ", "curNode", "=", "nodeQueue", ".", "get", "(", ")", "\n", "curChildList", "=", "[", "v", "[", "1", "]", "for", "v", "in", "list", "(", "nx", ".", "bfs_edges", "(", "graph", ",", "source", "=", "curNode", ",", "reverse", "=", "False", ",", "depth_limit", "=", "1", ")", ")", "]", "\n", "curChildHeight", "=", "[", "height_dict", "[", "v", "]", "for", "v", "in", "curChildList", "]", "\n", "curNodeHeight", "=", "height_dict", "[", "curNode", "]", "\n", "height_dict", "[", "curNode", "]", "=", "max", "(", "curChildHeight", ")", "+", "1", "\n", "if", "height_dict", "[", "curNode", "]", "!=", "curNodeHeight", ":", "# put all current parents into queue for update", "\n", "            ", "curParentList", "=", "[", "v", "[", "1", "]", "for", "v", "in", "list", "(", "nx", ".", "bfs_edges", "(", "graph", ",", "source", "=", "curNode", ",", "reverse", "=", "True", ",", "depth_limit", "=", "1", ")", ")", "]", "\n", "for", "item", "in", "curParentList", ":", "\n", "                ", "nodeQueue", ".", "put", "(", "item", ")", "\n", "#time.sleep(0.1)", "\n", "", "", "", "return", "height_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.updateDown_depth": [[34, 50], ["Queue.Queue", "Queue.Queue.put", "Queue.Queue.empty", "Queue.Queue.get", "max", "list", "Queue.Queue.put", "networkx.bfs_edges", "list", "networkx.bfs_edges"], "function", ["None"], ["", "def", "updateDown_depth", "(", "graph", ",", "startNode", ",", "depth_dict", ")", ":", "\n", "    ", "nodeQueue", "=", "Queue", ".", "Queue", "(", ")", "\n", "#nodeQueue = Queue()", "\n", "nodeQueue", ".", "put", "(", "startNode", ")", "\n", "while", "not", "nodeQueue", ".", "empty", "(", ")", ":", "\n", "        ", "curNode", "=", "nodeQueue", ".", "get", "(", ")", "\n", "curParentList", "=", "[", "v", "[", "1", "]", "for", "v", "in", "list", "(", "nx", ".", "bfs_edges", "(", "graph", ",", "source", "=", "curNode", ",", "reverse", "=", "True", ",", "depth_limit", "=", "1", ")", ")", "]", "\n", "curParentDepth", "=", "[", "depth_dict", "[", "v", "]", "for", "v", "in", "curParentList", "]", "\n", "curNodeDepth", "=", "depth_dict", "[", "curNode", "]", "\n", "depth_dict", "[", "curNode", "]", "=", "max", "(", "curParentDepth", ")", "+", "1", "\n", "if", "depth_dict", "[", "curNode", "]", "!=", "curNodeDepth", ":", "# put all current parents into queue for update", "\n", "            ", "curChildList", "=", "[", "v", "[", "1", "]", "for", "v", "in", "list", "(", "nx", ".", "bfs_edges", "(", "graph", ",", "source", "=", "curNode", ",", "reverse", "=", "False", ",", "depth_limit", "=", "1", ")", ")", "]", "\n", "for", "item", "in", "curChildList", ":", "\n", "                ", "nodeQueue", ".", "put", "(", "item", ")", "\n", "#time.sleep(0.1)", "\n", "", "", "", "return", "depth_dict", "\n", "# ==============================================================", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.TFParts.__init__": [[34, 58], ["model2.TFParts.build", "print", "print", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.build"], ["def", "__init__", "(", "self", ",", "num_rels1", ",", "num_ents1", ",", "num_rels2", ",", "num_ents2", ",", "method", "=", "'distmult'", ",", "bridge", "=", "'CG'", ",", "dim1", "=", "300", ",", "dim2", "=", "100", ",", "batch_sizeK1", "=", "512", ",", "batch_sizeK2", "=", "512", ",", "batch_sizeA", "=", "256", ",", "batch_sizeT", "=", "64", ",", "m1", "=", "0.5", ",", "m2", "=", "1.0", ",", "mA", "=", "0.5", ",", "mT", "=", "0.5", ",", "L1", "=", "False", ")", ":", "\n", "        ", "self", ".", "_num_relsA", "=", "num_rels1", "\n", "self", ".", "_num_entsA", "=", "num_ents1", "\n", "self", ".", "_num_relsB", "=", "num_rels2", "\n", "self", ".", "_num_entsB", "=", "num_ents2", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "bridge", "=", "bridge", "\n", "self", ".", "_dim1", "=", "dim1", "\n", "self", ".", "_dim2", "=", "dim2", "\n", "self", ".", "_hidden_dim", "=", "hid_dim", "=", "50", "\n", "self", ".", "_batch_sizeK1", "=", "batch_sizeK1", "\n", "self", ".", "_batch_sizeK2", "=", "batch_sizeK2", "\n", "self", ".", "_batch_sizeA", "=", "batch_sizeA", "\n", "self", ".", "_batch_sizeT", "=", "batch_sizeT", "\n", "self", ".", "_epoch_loss", "=", "0", "\n", "# margins", "\n", "self", ".", "_m1", "=", "m1", "\n", "self", ".", "_m2", "=", "m2", "\n", "self", ".", "_mA", "=", "mA", "\n", "self", ".", "_mT", "=", "mT", "\n", "self", ".", "L1", "=", "L1", "\n", "self", ".", "build", "(", ")", "\n", "print", "(", "\"TFparts build up! Embedding method: [\"", "+", "self", ".", "method", "+", "\"]. Bridge method:[\"", "+", "self", ".", "bridge", "+", "\"]\"", ")", "\n", "print", "(", "\"Margin Paramter: [m1] \"", "+", "str", "(", "self", ".", "_m1", ")", "+", "\" [m2] \"", "+", "str", "(", "self", ".", "_m2", ")", "+", "\" [mA] \"", "+", "str", "(", "self", ".", "_mA", ")", "+", "\" [m2] \"", "+", "str", "(", "self", ".", "_mT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.TFParts.dim": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim1", ",", "self", ".", "_dim2", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.TFParts.build": [[63, 380], ["tensorflow.reset_default_graph", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_loss", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.Saver", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.add", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "model2.orthogonal_initializer", "model2.orthogonal_initializer", "model2.orthogonal_initializer", "tensorflow.subtract", "tensorflow.subtract", "model2.orthogonal_initializer", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "ValueError", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "ValueError", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.subtract", "tensorflow.subtract", "ValueError", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.add", "tensorflow.add", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.subtract", "tensorflow.subtract", "ValueError", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.add", "tensorflow.add", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.add", "utils.circular_correlation", "utils.circular_correlation", "tensorflow.maximum", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.maximum", "utils.circular_correlation", "utils.circular_correlation", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.sqrt", "tensorflow.subtract", "tensorflow.add", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.sqrt", "tensorflow.add", "tensorflow.maximum", "tensorflow.add", "tensorflow.add", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.subtract", "tensorflow.add", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.sqrt", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.abs", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.subtract", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.abs", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal_initializer", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal_initializer", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal_initializer", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal_initializer", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.circular_correlation", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.circular_correlation", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.circular_correlation", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.circular_correlation"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"graph\"", ")", ":", "\n", "# Variables (matrix of embeddings/transformations)", "\n", "# KG1", "\n", "            ", "self", ".", "_ht1", "=", "ht1", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'ht1'", ",", "# for t AND h", "\n", "shape", "=", "[", "self", ".", "_num_entsA", ",", "self", ".", "_dim1", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_r1", "=", "r1", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'r1'", ",", "\n", "shape", "=", "[", "self", ".", "_num_relsA", ",", "self", ".", "_dim1", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "# KG2", "\n", "self", ".", "_ht2", "=", "ht2", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'ht2'", ",", "# for t AND h", "\n", "shape", "=", "[", "self", ".", "_num_entsB", ",", "self", ".", "_dim2", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_r2", "=", "r2", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'r2'", ",", "\n", "shape", "=", "[", "self", ".", "_num_relsB", ",", "self", ".", "_dim2", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "#tf.summary.histogram(\"ht1\", ht1)", "\n", "#tf.summary.histogram(\"ht2\", ht2)", "\n", "#tf.summary.histogram(\"r1\", r1)", "\n", "#tf.summary.histogram(\"r2\", r2)", "\n", "\n", "self", ".", "_ht1_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ht1", ",", "1", ")", "\n", "self", ".", "_ht2_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ht2", ",", "1", ")", "\n", "\n", "######################## Graph A Loss #######################", "\n", "# Language A KM loss : [|| h + r - t ||_2 + m1 - || h + r - t ||_2]+    here [.]+ means max (. , 0)", "\n", "self", ".", "_A_h_index", "=", "A_h_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK1", "]", ",", "\n", "name", "=", "'A_h_index'", ")", "\n", "self", ".", "_A_r_index", "=", "A_r_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK1", "]", ",", "\n", "name", "=", "'A_r_index'", ")", "\n", "self", ".", "_A_t_index", "=", "A_t_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK1", "]", ",", "\n", "name", "=", "'A_t_index'", ")", "\n", "self", ".", "_A_hn_index", "=", "A_hn_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK1", "]", ",", "\n", "name", "=", "'A_hn_index'", ")", "\n", "self", ".", "_A_tn_index", "=", "A_tn_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK1", "]", ",", "\n", "name", "=", "'A_tn_index'", ")", "\n", "\n", "A_h_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht1", ",", "A_h_index", ")", ",", "1", ")", "\n", "A_t_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht1", ",", "A_t_index", ")", ",", "1", ")", "\n", "A_rel_batch", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "r1", ",", "A_r_index", ")", "\n", "\n", "A_hn_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht1", ",", "A_hn_index", ")", ",", "1", ")", "\n", "A_tn_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht1", ",", "A_tn_index", ")", ",", "1", ")", "\n", "\n", "if", "self", ".", "method", "==", "'transe'", ":", "\n", "##### TransE score", "\n", "# This stores h + r - t", "\n", "                ", "A_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "A_h_ent_batch", ",", "A_rel_batch", ")", ",", "A_t_ent_batch", ")", "\n", "# This stores h' + r - t' for negative samples", "\n", "A_neg_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "A_hn_ent_batch", ",", "A_rel_batch", ")", ",", "A_tn_ent_batch", ")", "\n", "if", "self", ".", "L1", ":", "\n", "                    ", "self", ".", "_A_loss", "=", "A_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "A_loss_matrix", ")", ",", "1", ")", ",", "self", ".", "_m1", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "A_neg_matrix", ")", ",", "1", ")", ")", ",", "\n", "0.", ")", "\n", ")", "/", "self", ".", "_batch_sizeK1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_A_loss", "=", "A_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "A_loss_matrix", ")", ",", "1", ")", ")", ",", "self", ".", "_m1", ")", ",", "\n", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "A_neg_matrix", ")", ",", "1", ")", ")", ")", ",", "\n", "0.", ")", "\n", ")", "/", "self", ".", "_batch_sizeK1", "\n", "\n", "", "", "elif", "self", ".", "method", "==", "'distmult'", ":", "\n", "##### DistMult score", "\n", "                ", "A_loss_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "A_rel_batch", ",", "tf", ".", "multiply", "(", "A_h_ent_batch", ",", "A_t_ent_batch", ")", ")", ",", "1", ")", "\n", "A_neg_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "A_rel_batch", ",", "tf", ".", "multiply", "(", "A_hn_ent_batch", ",", "A_tn_ent_batch", ")", ")", ",", "1", ")", "\n", "\n", "self", ".", "_A_loss", "=", "A_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "tf", ".", "add", "(", "tf", ".", "subtract", "(", "A_neg_matrix", ",", "A_loss_matrix", ")", ",", "self", ".", "_m1", ")", ",", "0.", ")", ")", "/", "self", ".", "_batch_sizeK1", "\n", "\n", "", "elif", "self", ".", "method", "==", "'hole'", ":", "\n", "##### HolE score", "\n", "                ", "A_loss_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "A_rel_batch", ",", "circular_correlation", "(", "A_h_ent_batch", ",", "A_t_ent_batch", ")", ")", ",", "1", ")", "\n", "A_neg_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "A_rel_batch", ",", "circular_correlation", "(", "A_hn_ent_batch", ",", "A_tn_ent_batch", ")", ")", ",", "1", ")", "\n", "\n", "self", ".", "_A_loss", "=", "A_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "tf", ".", "add", "(", "tf", ".", "subtract", "(", "A_neg_matrix", ",", "A_loss_matrix", ")", ",", "self", ".", "_m1", ")", ",", "0.", ")", ")", "/", "self", ".", "_batch_sizeK1", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Embedding method not valid!'", ")", "\n", "\n", "\n", "######################## Graph B Loss #######################", "\n", "# Language B KM loss : [|| h + r - t ||_2 + m1 - || h + r - t ||_2]+    here [.]+ means max (. , 0)", "\n", "", "self", ".", "_B_h_index", "=", "B_h_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK2", "]", ",", "\n", "name", "=", "'B_h_index'", ")", "\n", "self", ".", "_B_r_index", "=", "B_r_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK2", "]", ",", "\n", "name", "=", "'B_r_index'", ")", "\n", "self", ".", "_B_t_index", "=", "B_t_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK2", "]", ",", "\n", "name", "=", "'B_t_index'", ")", "\n", "self", ".", "_B_hn_index", "=", "B_hn_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK2", "]", ",", "\n", "name", "=", "'B_hn_index'", ")", "\n", "self", ".", "_B_tn_index", "=", "B_tn_index", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeK2", "]", ",", "\n", "name", "=", "'B_tn_index'", ")", "\n", "\n", "B_h_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "B_h_index", ")", ",", "1", ")", "\n", "B_t_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "B_t_index", ")", ",", "1", ")", "\n", "B_rel_batch", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "r2", ",", "B_r_index", ")", "\n", "\n", "B_hn_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "B_hn_index", ")", ",", "1", ")", "\n", "B_tn_ent_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "B_tn_index", ")", ",", "1", ")", "\n", "\n", "\n", "if", "self", ".", "method", "==", "'transe'", ":", "\n", "#### TransE Score", "\n", "# This stores h + r - t", "\n", "                ", "B_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "B_h_ent_batch", ",", "B_rel_batch", ")", ",", "B_t_ent_batch", ")", "\n", "# This stores h' + r - t' for negative samples", "\n", "B_neg_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "B_hn_ent_batch", ",", "B_rel_batch", ")", ",", "B_tn_ent_batch", ")", "\n", "if", "self", ".", "L1", ":", "\n", "                    ", "self", ".", "_B_loss", "=", "B_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "B_loss_matrix", ")", ",", "1", ")", ",", "self", ".", "_m2", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "B_neg_matrix", ")", ",", "1", ")", ")", ",", "\n", "0.", ")", "\n", ")", "/", "self", ".", "_batch_sizeK2", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_B_loss", "=", "B_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "B_loss_matrix", ")", ",", "1", ")", ")", ",", "self", ".", "_m2", ")", ",", "\n", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "B_neg_matrix", ")", ",", "1", ")", ")", ")", ",", "\n", "0.", ")", "\n", ")", "/", "self", ".", "_batch_sizeK2", "\n", "\n", "", "", "elif", "self", ".", "method", "==", "'distmult'", ":", "\n", "##### DistMult score", "\n", "                ", "B_loss_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "B_rel_batch", ",", "tf", ".", "multiply", "(", "B_h_ent_batch", ",", "B_t_ent_batch", ")", ")", ",", "1", ")", "\n", "B_neg_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "B_rel_batch", ",", "tf", ".", "multiply", "(", "B_hn_ent_batch", ",", "B_tn_ent_batch", ")", ")", ",", "1", ")", "\n", "\n", "self", ".", "_B_loss", "=", "B_loss", "=", "1.0", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "tf", ".", "add", "(", "tf", ".", "subtract", "(", "B_neg_matrix", ",", "B_loss_matrix", ")", ",", "self", ".", "_m2", ")", ",", "0.", ")", ")", "/", "self", ".", "_batch_sizeK2", "\n", "", "elif", "self", ".", "method", "==", "'hole'", ":", "\n", "##### HolE score", "\n", "                ", "B_loss_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "B_rel_batch", ",", "circular_correlation", "(", "B_h_ent_batch", ",", "B_t_ent_batch", ")", ")", ",", "1", ")", "\n", "B_neg_matrix", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "B_rel_batch", ",", "circular_correlation", "(", "B_hn_ent_batch", ",", "B_tn_ent_batch", ")", ")", ",", "1", ")", "\n", "\n", "self", ".", "_B_loss", "=", "B_loss", "=", "1.0", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "tf", ".", "add", "(", "tf", ".", "subtract", "(", "B_neg_matrix", ",", "B_loss_matrix", ")", ",", "self", ".", "_m2", ")", ",", "0.", ")", ")", "/", "self", ".", "_batch_sizeK2", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Embedding method not valid!'", ")", "\n", "\n", "\n", "######################## Type Loss #######################", "\n", "", "self", ".", "_AM_index1", "=", "AM_index1", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeA", "]", ",", "\n", "name", "=", "'AM_index1'", ")", "\n", "self", ".", "_AM_index2", "=", "AM_index2", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeA", "]", ",", "\n", "name", "=", "'AM_index2'", ")", "\n", "\n", "self", ".", "_AM_nindex1", "=", "AM_nindex1", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeA", "]", ",", "\n", "name", "=", "'AM_nindex1'", ")", "\n", "self", ".", "_AM_nindex2", "=", "AM_nindex2", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeA", "]", ",", "\n", "name", "=", "'AM_nindex2'", ")", "\n", "# add weight parameter", "\n", "self", ".", "_AM_weight", "=", "AM_weight", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeA", "]", ",", "\n", "name", "=", "'AM_weight'", ")", "\n", "\n", "AM_ent1_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht1", ",", "AM_index1", ")", ",", "1", ")", "\n", "AM_ent2_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "AM_index2", ")", ",", "1", ")", "\n", "AM_ent1_nbatch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht1", ",", "AM_nindex1", ")", ",", "1", ")", "\n", "AM_ent2_nbatch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "AM_nindex2", ")", ",", "1", ")", "\n", "\n", "# Affine map", "\n", "self", ".", "_M", "=", "M", "=", "tf", ".", "get_variable", "(", "name", "=", "'M'", ",", "shape", "=", "[", "self", ".", "_dim1", ",", "self", ".", "_dim2", "]", ",", "initializer", "=", "orthogonal_initializer", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_b", "=", "bias", "=", "tf", ".", "get_variable", "(", "name", "=", "'b'", ",", "shape", "=", "[", "self", ".", "_dim2", "]", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_Mc", "=", "Mc", "=", "tf", ".", "get_variable", "(", "name", "=", "'Mc'", ",", "shape", "=", "[", "self", ".", "_dim2", ",", "self", ".", "_hidden_dim", "]", ",", "initializer", "=", "orthogonal_initializer", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_bc", "=", "b_c", "=", "tf", ".", "get_variable", "(", "name", "=", "'bc'", ",", "shape", "=", "[", "self", ".", "_hidden_dim", "]", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_Me", "=", "Me", "=", "tf", ".", "get_variable", "(", "name", "=", "'Me'", ",", "shape", "=", "[", "self", ".", "_dim1", ",", "self", ".", "_hidden_dim", "]", ",", "initializer", "=", "orthogonal_initializer", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_be", "=", "b_e", "=", "tf", ".", "get_variable", "(", "name", "=", "'be'", ",", "shape", "=", "[", "self", ".", "_hidden_dim", "]", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "self", ".", "bridge", "==", "'CG'", ":", "\n", "                ", "AM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "AM_ent1_batch", ",", "AM_ent2_batch", ")", "\n", "AM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "AM_ent1_nbatch", ",", "AM_ent2_nbatch", ")", "\n", "", "elif", "self", ".", "bridge", "==", "'CMP-linear'", ":", "\n", "# c - (W * e + b)", "\n", "#AM_pos_loss_matrix = tf.subtract( tf.add(tf.matmul(AM_ent1_batch, M),bias), AM_ent2_batch )", "\n", "                ", "AM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent1_batch", ",", "M", ")", ",", "bias", ")", ",", "1", ")", ",", "AM_ent2_batch", ")", "\n", "AM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent1_nbatch", ",", "M", ")", ",", "bias", ")", ",", "1", ")", ",", "AM_ent2_nbatch", ")", "\n", "", "elif", "self", ".", "bridge", "==", "'CMP-single'", ":", "\n", "# c - \\sigma( W * e + b )", "\n", "#AM_pos_loss_matrix = tf.subtract( tf.tanh(tf.add(tf.matmul(AM_ent1_batch, M),bias)), AM_ent2_batch )", "\n", "                ", "AM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent1_batch", ",", "M", ")", ",", "bias", ")", ")", ",", "1", ")", ",", "AM_ent2_batch", ")", "\n", "AM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent1_nbatch", ",", "M", ")", ",", "bias", ")", ")", ",", "1", ")", ",", "AM_ent2_nbatch", ")", "\n", "", "elif", "self", ".", "bridge", "==", "'CMP-double'", ":", "\n", "# \\sigma (W1 * c + bias1) - \\sigma(W2 * c + bias1) --> More parameters to be defined", "\n", "#AM_pos_loss_matrix = tf.subtract( tf.add(tf.matmul(AM_ent1_batch, Me), b_e), tf.add(tf.matmul(AM_ent2_batch, Mc), b_c))", "\n", "#AM_pos_loss_matrix = tf.subtract( tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_batch, Me), b_e),1), tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent2_batch, Mc), b_c),1))", "\n", "                ", "AM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent1_batch", ",", "Me", ")", ",", "b_e", ")", ")", ",", "1", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent2_batch", ",", "Mc", ")", ",", "b_c", ")", ")", ",", "1", ")", ")", "\n", "AM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent1_nbatch", ",", "Me", ")", ",", "b_e", ")", ")", ",", "1", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "AM_ent2_nbatch", ",", "Mc", ")", ",", "b_c", ")", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Bridge method not valid!'", ")", "\n", "\n", "# Hinge Loss for AM", "\n", "# change to multiply by weight", "\n", "", "if", "self", ".", "L1", ":", "\n", "                ", "self", ".", "_AM_loss", "=", "AM_loss", "=", "1.0", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "AM_weight", ",", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "AM_pos_loss_matrix", ")", ",", "1", ")", ",", "self", ".", "_mA", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "AM_neg_loss_matrix", ")", ",", "1", ")", ")", ",", "\n", "0.", ")", "\n", ")", ")", "/", "self", ".", "_batch_sizeA", "\n", "", "else", ":", "\n", "                ", "self", ".", "_AM_loss", "=", "AM_loss", "=", "1.0", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "AM_weight", ",", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "AM_pos_loss_matrix", ")", ",", "1", ")", ")", ",", "self", ".", "_mA", ")", ",", "\n", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "AM_neg_loss_matrix", ")", ",", "1", ")", ")", ")", ",", "\n", "0.", ")", "\n", ")", ")", "/", "self", ".", "_batch_sizeA", "\n", "\n", "######################## Taxonomy Loss #######################", "\n", "", "self", ".", "_TM_index1", "=", "TM_index1", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeT", "]", ",", "\n", "name", "=", "'TM_index1'", ")", "\n", "self", ".", "_TM_index2", "=", "TM_index2", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeT", "]", ",", "\n", "name", "=", "'TM_index2'", ")", "\n", "\n", "self", ".", "_TM_nindex1", "=", "TM_nindex1", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeT", "]", ",", "\n", "name", "=", "'TM_nindex1'", ")", "\n", "self", ".", "_TM_nindex2", "=", "TM_nindex2", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "shape", "=", "[", "self", ".", "_batch_sizeT", "]", ",", "\n", "name", "=", "'TM_nindex2'", ")", "\n", "\n", "TM_con1_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "TM_index1", ")", ",", "1", ")", "\n", "TM_con2_batch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "TM_index2", ")", ",", "1", ")", "\n", "TM_con1_nbatch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "TM_nindex1", ")", ",", "1", ")", "\n", "TM_con2_nbatch", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "TM_nindex2", ")", ",", "1", ")", "\n", "\n", "self", ".", "l2_check", "=", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "ht2", ",", "TM_index1", ")", ")", "\n", "\n", "self", ".", "_TM", "=", "TM", "=", "tf", ".", "get_variable", "(", "name", "=", "'TM'", ",", "shape", "=", "[", "self", ".", "_dim2", ",", "self", ".", "_dim2", "]", ",", "initializer", "=", "orthogonal_initializer", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_Tb", "=", "Tb", "=", "tf", ".", "get_variable", "(", "name", "=", "'Tb'", ",", "shape", "=", "[", "self", ".", "_dim2", "]", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "self", ".", "bridge", "==", "'CG'", ":", "\n", "                ", "TM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "TM_con1_batch", ",", "TM_con2_batch", ")", "\n", "TM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "TM_con1_nbatch", ",", "TM_con2_nbatch", ")", "\n", "", "elif", "self", ".", "bridge", "==", "'CMP-linear'", ":", "\n", "# c - (W * e + b)", "\n", "#TM_pos_loss_matrix = tf.subtract( tf.add(tf.matmul(TM_con1_batch, TM),Tb), TM_con2_batch )", "\n", "                ", "TM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "TM_con1_batch", ",", "TM", ")", ",", "Tb", ")", ",", "1", ")", ",", "TM_con2_batch", ")", "\n", "TM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "TM_con1_nbatch", ",", "TM", ")", ",", "Tb", ")", ",", "1", ")", ",", "TM_con2_nbatch", ")", "\n", "", "elif", "self", ".", "bridge", "==", "'CMP-single'", ":", "\n", "# c - \\sigma( W * e + b )", "\n", "#TM_pos_loss_matrix = tf.subtract( tf.tanh(tf.add(tf.matmul(TM_con1_batch, TM), Tb)), TM_con2_batch )", "\n", "                ", "TM_pos_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "TM_con1_batch", ",", "TM", ")", ",", "Tb", ")", ")", ",", "1", ")", ",", "TM_con2_batch", ")", "\n", "TM_neg_loss_matrix", "=", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "tanh", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "TM_con1_nbatch", ",", "TM", ")", ",", "Tb", ")", ")", ",", "1", ")", ",", "TM_con2_nbatch", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Bridge method not valid!'", ")", "\n", "\n", "# Hinge Loss for TM", "\n", "", "if", "self", ".", "L1", ":", "\n", "                ", "self", ".", "_TM_loss", "=", "TM_loss", "=", "1.0", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "TM_pos_loss_matrix", ")", ",", "1", ")", ",", "self", ".", "_mT", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "TM_neg_loss_matrix", ")", ",", "1", ")", ")", ",", "\n", "0.", ")", ")", "/", "self", ".", "_batch_sizeT", "\n", "", "else", ":", "\n", "                ", "self", ".", "_TM_loss", "=", "TM_loss", "=", "1.0", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "maximum", "(", "\n", "tf", ".", "subtract", "(", "tf", ".", "add", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "TM_pos_loss_matrix", ")", ",", "1", ")", ")", ",", "self", ".", "_mT", ")", ",", "\n", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "TM_neg_loss_matrix", ")", ",", "1", ")", ")", ")", ",", "\n", "0.", ")", ")", "/", "self", ".", "_batch_sizeT", "\n", "\n", "# Optimizer", "\n", "", "self", ".", "_lr", "=", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "_opt", "=", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ")", "#AdagradOptimizer(lr)#GradientDescentOptimizer(lr)", "\n", "self", ".", "_train_op_A", "=", "train_op_A", "=", "opt", ".", "minimize", "(", "A_loss", ")", "\n", "self", ".", "_train_op_B", "=", "train_op_B", "=", "opt", ".", "minimize", "(", "B_loss", ")", "\n", "self", ".", "_train_op_AM", "=", "train_op_AM", "=", "opt", ".", "minimize", "(", "AM_loss", ")", "\n", "self", ".", "_train_op_TM", "=", "train_op_TM", "=", "opt", ".", "minimize", "(", "TM_loss", ")", "\n", "\n", "# Saver", "\n", "#self.summary_op = tf.summary.merge_all()", "\n", "self", ".", "_saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal": [[16, 22], ["numpy.random.normal", "numpy.linalg.svd", "q.reshape", "numpy.prod"], "function", ["None"], ["def", "orthogonal", "(", "shape", ")", ":", "\n", "  ", "flat_shape", "=", "(", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "\n", "return", "q", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal_initializer": [[23, 27], ["tensorflow.constant", "model2.orthogonal"], "function", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.model2.orthogonal"], ["", "def", "orthogonal_initializer", "(", "scale", "=", "1.0", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "partition_info", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "constant", "(", "orthogonal", "(", "shape", ")", "*", "scale", ",", "dtype", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.__init__": [[20, 39], ["numpy.array", "numpy.array", "set", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tf_parts", "=", "None", "\n", "self", ".", "multiG", "=", "None", "\n", "self", ".", "vec_e", "=", "{", "}", "\n", "self", ".", "vec_r", "=", "{", "}", "\n", "self", ".", "mat", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "# below for test data", "\n", "self", ".", "test_triples", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "self", ".", "test_align_rel", "=", "[", "]", "\n", "self", ".", "aligned", "=", "{", "1", ":", "set", "(", "[", "]", ")", ",", "2", ":", "set", "(", "[", "]", ")", "}", "\n", "# L1 to L2 map", "\n", "self", ".", "test_hr_map", "=", "{", "}", "\n", "self", ".", "test_tr_map", "=", "{", "}", "\n", "self", ".", "test_ht_map", "=", "{", "}", "\n", "# train_map", "\n", "self", ".", "train_hr_map", "=", "{", "}", "\n", "self", ".", "train_tr_map", "=", "{", "}", "\n", "self", ".", "train_ht_map", "=", "{", "}", "\n", "self", ".", "sess", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.build": [[40, 110], ["multiG.multiG", "tester1.Tester.multiG.load", "print", "print", "model2.TFParts", "tensorflow.ConfigProto", "tensorflow.Session", "tester1.Tester.tf_parts._saver.restore", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "tensorflow.Session.close", "list", "list", "tensorflow.Session.run", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "tensorflow.Session.run", "numpy.array", "numpy.array", "tester1.Tester.train_hr_map.get", "tester1.Tester.train_hr_map[].get", "set", "[].add", "tester1.Tester.train_tr_map.get", "tester1.Tester.train_tr_map[].get", "set", "[].add", "tester1.Tester.train_ht_map.get", "tester1.Tester.train_ht_map[].get", "set", "[].add", "tester1.Tester.multiG.KG1.num_rels", "tester1.Tester.multiG.KG1.num_ents", "tester1.Tester.multiG.KG2.num_rels", "tester1.Tester.multiG.KG2.num_ents"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.multiG.multiG.load", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_rels", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_rels", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.KG.KG.num_ents"], ["", "def", "build", "(", "self", ",", "save_path", "=", "'this-model.ckpt'", ",", "data_save_path", "=", "'this-data.bin'", ",", "graph", "=", "'ins'", ",", "method", "=", "'transe'", ",", "bridge", "=", "'CG'", ")", ":", "\n", "        ", "self", ".", "multiG", "=", "multiG", ".", "multiG", "(", ")", "\n", "self", ".", "multiG", ".", "load", "(", "data_save_path", ")", "\n", "self", ".", "method", "=", "method", "#load", "\n", "self", ".", "bridge", "=", "bridge", "\n", "print", "(", "self", ".", "method", ",", "self", ".", "bridge", ")", "\n", "assert", "graph", "==", "'ins'", "or", "graph", "==", "'onto'", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "graph_id", "=", "1", "if", "graph", "==", "'ins'", "else", "2", "\n", "####  setup train data map ####", "\n", "self", ".", "train_list", "=", "list", "(", "self", ".", "multiG", ".", "KG1", ".", "triples", ")", "if", "graph", "==", "'ins'", "else", "list", "(", "self", ".", "multiG", ".", "KG2", ".", "triples", ")", "\n", "for", "triple", "in", "self", ".", "train_list", ":", "\n", "            ", "h", ",", "r", ",", "t", "=", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", ",", "triple", "[", "2", "]", "\n", "if", "self", ".", "train_hr_map", ".", "get", "(", "h", ")", "is", "None", ":", "\n", "                ", "self", ".", "train_hr_map", "[", "h", "]", "=", "{", "}", "\n", "", "if", "self", ".", "train_hr_map", "[", "h", "]", ".", "get", "(", "r", ")", "is", "None", ":", "\n", "                ", "self", ".", "train_hr_map", "[", "h", "]", "[", "r", "]", "=", "set", "(", "[", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_hr_map", "[", "h", "]", "[", "r", "]", ".", "add", "(", "t", ")", "\n", "\n", "", "if", "self", ".", "train_tr_map", ".", "get", "(", "t", ")", "is", "None", ":", "\n", "                ", "self", ".", "train_tr_map", "[", "t", "]", "=", "{", "}", "\n", "", "if", "self", ".", "train_tr_map", "[", "t", "]", ".", "get", "(", "r", ")", "is", "None", ":", "\n", "                ", "self", ".", "train_tr_map", "[", "t", "]", "[", "r", "]", "=", "set", "(", "[", "h", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_tr_map", "[", "t", "]", "[", "r", "]", ".", "add", "(", "h", ")", "\n", "\n", "", "if", "self", ".", "train_ht_map", ".", "get", "(", "h", ")", "is", "None", ":", "\n", "                ", "self", ".", "train_ht_map", "[", "h", "]", "=", "{", "}", "\n", "", "if", "self", ".", "train_ht_map", "[", "h", "]", ".", "get", "(", "t", ")", "is", "None", ":", "\n", "                ", "self", ".", "train_ht_map", "[", "h", "]", "[", "t", "]", "=", "set", "(", "[", "r", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_ht_map", "[", "h", "]", "[", "t", "]", ".", "add", "(", "r", ")", "\n", "", "", "print", "(", "\"Train set mapping setup done!\"", ")", "\n", "###############################", "\n", "\n", "self", ".", "tf_parts", "=", "model", ".", "TFParts", "(", "num_rels1", "=", "self", ".", "multiG", ".", "KG1", ".", "num_rels", "(", ")", ",", "\n", "num_ents1", "=", "self", ".", "multiG", ".", "KG1", ".", "num_ents", "(", ")", ",", "\n", "num_rels2", "=", "self", ".", "multiG", ".", "KG2", ".", "num_rels", "(", ")", ",", "\n", "num_ents2", "=", "self", ".", "multiG", ".", "KG2", ".", "num_ents", "(", ")", ",", "\n", "dim1", "=", "self", ".", "multiG", ".", "dim1", ",", "\n", "dim2", "=", "self", ".", "multiG", ".", "dim2", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "bridge", "=", "self", ".", "bridge", ",", "\n", "#batch_sizeK=self.batch_sizeK,", "\n", "#batch_sizeA=self.batch_sizeA,", "\n", "L1", "=", "self", ".", "multiG", ".", "L1", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "sess", "=", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "self", ".", "tf_parts", ".", "_saver", ".", "restore", "(", "sess", ",", "save_path", ")", "# load it", "\n", "if", "self", ".", "tf_parts", ".", "bridge", "==", "\"CMP-double\"", ":", "\n", "            ", "value_ht1", ",", "value_r1", ",", "value_ht2", ",", "value_r2", ",", "value_Mc", ",", "value_bc", ",", "value_Me", ",", "value_be", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "tf_parts", ".", "_ht1_norm", ",", "self", ".", "tf_parts", ".", "_r1", ",", "self", ".", "tf_parts", ".", "_ht2_norm", ",", "self", ".", "tf_parts", ".", "_r2", ",", "self", ".", "tf_parts", ".", "_Mc", ",", "self", ".", "tf_parts", ".", "_bc", ",", "self", ".", "tf_parts", ".", "_Me", ",", "self", ".", "tf_parts", ".", "_be", "]", ")", "# extract values.", "\n", "self", ".", "_Mc", "=", "np", ".", "array", "(", "value_Mc", ")", "\n", "self", ".", "_bc", "=", "np", ".", "array", "(", "value_bc", ")", "\n", "self", ".", "_Me", "=", "np", ".", "array", "(", "value_Me", ")", "\n", "self", ".", "_be", "=", "np", ".", "array", "(", "value_be", ")", "\n", "", "else", ":", "\n", "            ", "value_ht1", ",", "value_r1", ",", "value_ht2", ",", "value_r2", ",", "value_M", ",", "value_b", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "tf_parts", ".", "_ht1_norm", ",", "self", ".", "tf_parts", ".", "_r1", ",", "self", ".", "tf_parts", ".", "_ht2_norm", ",", "self", ".", "tf_parts", ".", "_r2", ",", "self", ".", "tf_parts", ".", "_M", ",", "self", ".", "tf_parts", ".", "_b", "]", ")", "# extract values.", "\n", "self", ".", "mat", "=", "np", ".", "array", "(", "value_M", ")", "\n", "self", ".", "_b", "=", "np", ".", "array", "(", "value_b", ")", "\n", "\n", "", "self", ".", "vec_e", "[", "1", "]", "=", "np", ".", "array", "(", "value_ht1", ")", "\n", "self", ".", "vec_e", "[", "2", "]", "=", "np", ".", "array", "(", "value_ht2", ")", "\n", "self", ".", "vec_r", "[", "1", "]", "=", "np", ".", "array", "(", "value_r1", ")", "\n", "self", ".", "vec_r", "[", "2", "]", "=", "np", ".", "array", "(", "value_r2", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.load_test_link": [[111, 165], ["set", "open", "numpy.array", "print", "print", "line.rstrip().split.rstrip().split.rstrip().split", "triples.append", "len", "len", "tester1.Tester.multiG.KG1.ent_str2index", "tester1.Tester.multiG.KG1.rel_str2index", "tester1.Tester.multiG.KG1.ent_str2index", "tester1.Tester.test_hr_map.get", "tester1.Tester.test_hr_map[].get", "set", "[].add", "tester1.Tester.test_tr_map.get", "tester1.Tester.test_tr_map[].get", "set", "[].add", "tester1.Tester.test_ht_map.get", "tester1.Tester.test_ht_map[].get", "set", "[].add", "set.add", "line.rstrip().split.rstrip().split.rstrip", "tester1.Tester.multiG.KG2.ent_str2index", "tester1.Tester.multiG.KG2.rel_str2index", "tester1.Tester.multiG.KG2.ent_str2index", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_test_link", "(", "self", ",", "filename", ",", "max_num", "=", "525", ",", "splitter", "=", "'\\t'", ",", "line_end", "=", "'\\n'", ",", "dedup", "=", "True", ")", ":", "\n", "        ", "num_lines", "=", "0", "\n", "triples", "=", "[", "]", "\n", "dedup_set", "=", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "if", "len", "(", "triples", ")", ">", "max_num", ":", "\n", "                ", "break", "\n", "", "if", "dedup", "and", "line", "in", "dedup_set", ":", "\n", "                ", "continue", "\n", "", "elif", "dedup", ":", "\n", "                ", "dedup_set", ".", "add", "(", "line", ")", "\n", "", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "if", "len", "(", "line", ")", "!=", "3", ":", "\n", "                ", "continue", "\n", "", "num_lines", "+=", "1", "\n", "if", "self", ".", "graph", "==", "'ins'", ":", "\n", "                ", "e1", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "r", "=", "self", ".", "multiG", ".", "KG1", ".", "rel_str2index", "(", "line", "[", "1", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "", "elif", "self", ".", "graph", "==", "'onto'", ":", "\n", "                ", "e1", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "r", "=", "self", ".", "multiG", ".", "KG2", ".", "rel_str2index", "(", "line", "[", "1", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'not valid graph'", ")", "\n", "", "if", "e1", "==", "None", "or", "e2", "==", "None", "or", "r", "==", "None", ":", "\n", "                ", "continue", "\n", "", "triples", ".", "append", "(", "[", "e1", ",", "r", ",", "e2", "]", ")", "\n", "\n", "###### Set up test map #######", "\n", "if", "self", ".", "test_hr_map", ".", "get", "(", "e1", ")", "is", "None", ":", "\n", "                ", "self", ".", "test_hr_map", "[", "e1", "]", "=", "{", "}", "\n", "", "if", "self", ".", "test_hr_map", "[", "e1", "]", ".", "get", "(", "r", ")", "is", "None", ":", "\n", "                ", "self", ".", "test_hr_map", "[", "e1", "]", "[", "r", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_hr_map", "[", "e1", "]", "[", "r", "]", ".", "add", "(", "e2", ")", "\n", "\n", "", "if", "self", ".", "test_tr_map", ".", "get", "(", "e2", ")", "is", "None", ":", "\n", "                ", "self", ".", "test_tr_map", "[", "e2", "]", "=", "{", "}", "\n", "", "if", "self", ".", "test_tr_map", "[", "e2", "]", ".", "get", "(", "r", ")", "is", "None", ":", "\n", "                ", "self", ".", "test_tr_map", "[", "e2", "]", "[", "r", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_tr_map", "[", "e2", "]", "[", "r", "]", ".", "add", "(", "e1", ")", "\n", "\n", "", "if", "self", ".", "test_ht_map", ".", "get", "(", "e1", ")", "is", "None", ":", "\n", "                ", "self", ".", "test_ht_map", "[", "e1", "]", "=", "{", "}", "\n", "", "if", "self", ".", "test_ht_map", "[", "e1", "]", ".", "get", "(", "e2", ")", "is", "None", ":", "\n", "                ", "self", ".", "test_ht_map", "[", "e1", "]", "[", "e2", "]", "=", "set", "(", "[", "r", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_ht_map", "[", "e1", "]", "[", "e2", "]", ".", "add", "(", "r", ")", "\n", "###############################", "\n", "", "", "self", ".", "test_triples", "=", "np", ".", "array", "(", "triples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "\"test set mapping done!\"", ")", "\n", "print", "(", "\"Loaded test data from %s, %d out of %d.\"", "%", "(", "filename", ",", "len", "(", "triples", ")", ",", "num_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.load_test_link_wlabel": [[166, 222], ["set", "open", "numpy.array", "print", "print", "line.rstrip().split.rstrip().split.rstrip().split", "int", "triples.append", "len", "len", "tester1.Tester.multiG.KG1.ent_str2index", "tester1.Tester.multiG.KG1.rel_str2index", "tester1.Tester.multiG.KG1.ent_str2index", "set.add", "line.rstrip().split.rstrip().split.rstrip", "tester1.Tester.multiG.KG2.ent_str2index", "tester1.Tester.multiG.KG2.rel_str2index", "tester1.Tester.multiG.KG2.ent_str2index", "ValueError", "tester1.Tester.test_hr_map.get", "tester1.Tester.test_hr_map[].get", "set", "[].add", "tester1.Tester.test_tr_map.get", "tester1.Tester.test_tr_map[].get", "set", "[].add", "tester1.Tester.test_ht_map.get", "tester1.Tester.test_ht_map[].get", "set", "[].add", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_test_link_wlabel", "(", "self", ",", "filename", ",", "max_num", "=", "525", ",", "splitter", "=", "'\\t'", ",", "line_end", "=", "'\\n'", ",", "dedup", "=", "True", ")", ":", "\n", "        ", "num_lines", "=", "0", "\n", "triples", "=", "[", "]", "\n", "dedup_set", "=", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "if", "len", "(", "triples", ")", ">", "max_num", ":", "\n", "                ", "break", "\n", "", "if", "dedup", "and", "line", "in", "dedup_set", ":", "\n", "                ", "continue", "\n", "", "elif", "dedup", ":", "\n", "                ", "dedup_set", ".", "add", "(", "line", ")", "\n", "", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "if", "len", "(", "line", ")", "!=", "4", ":", "\n", "                ", "continue", "\n", "", "num_lines", "+=", "1", "\n", "label", "=", "int", "(", "line", "[", "3", "]", ")", "\n", "if", "self", ".", "graph", "==", "'ins'", ":", "\n", "                ", "e1", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "r", "=", "self", ".", "multiG", ".", "KG1", ".", "rel_str2index", "(", "line", "[", "1", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "", "elif", "self", ".", "graph", "==", "'onto'", ":", "\n", "                ", "e1", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "r", "=", "self", ".", "multiG", ".", "KG2", ".", "rel_str2index", "(", "line", "[", "1", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'not valid graph'", ")", "\n", "", "if", "e1", "==", "None", "or", "e2", "==", "None", "or", "r", "==", "None", ":", "\n", "                ", "continue", "\n", "", "triples", ".", "append", "(", "[", "e1", ",", "r", ",", "e2", ",", "label", "]", ")", "\n", "\n", "###### Set up test map #######", "\n", "if", "label", "==", "1", ":", "\n", "                ", "if", "self", ".", "test_hr_map", ".", "get", "(", "e1", ")", "is", "None", ":", "\n", "                    ", "self", ".", "test_hr_map", "[", "e1", "]", "=", "{", "}", "\n", "", "if", "self", ".", "test_hr_map", "[", "e1", "]", ".", "get", "(", "r", ")", "is", "None", ":", "\n", "                    ", "self", ".", "test_hr_map", "[", "e1", "]", "[", "r", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "test_hr_map", "[", "e1", "]", "[", "r", "]", ".", "add", "(", "e2", ")", "\n", "\n", "", "if", "self", ".", "test_tr_map", ".", "get", "(", "e2", ")", "is", "None", ":", "\n", "                    ", "self", ".", "test_tr_map", "[", "e2", "]", "=", "{", "}", "\n", "", "if", "self", ".", "test_tr_map", "[", "e2", "]", ".", "get", "(", "r", ")", "is", "None", ":", "\n", "                    ", "self", ".", "test_tr_map", "[", "e2", "]", "[", "r", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "test_tr_map", "[", "e2", "]", "[", "r", "]", ".", "add", "(", "e1", ")", "\n", "\n", "", "if", "self", ".", "test_ht_map", ".", "get", "(", "e1", ")", "is", "None", ":", "\n", "                    ", "self", ".", "test_ht_map", "[", "e1", "]", "=", "{", "}", "\n", "", "if", "self", ".", "test_ht_map", "[", "e1", "]", ".", "get", "(", "e2", ")", "is", "None", ":", "\n", "                    ", "self", ".", "test_ht_map", "[", "e1", "]", "[", "e2", "]", "=", "set", "(", "[", "r", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "test_ht_map", "[", "e1", "]", "[", "e2", "]", ".", "add", "(", "r", ")", "\n", "###############################", "\n", "", "", "", "self", ".", "test_triples", "=", "np", ".", "array", "(", "triples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "\"test set mapping done!\"", ")", "\n", "print", "(", "\"Loaded test data from %s, %d out of %d.\"", "%", "(", "filename", ",", "len", "(", "triples", ")", ",", "num_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.load_test_data_rel": [[224, 247], ["open", "numpy.array", "print", "line.rstrip().split.rstrip().split.rstrip().split", "tester1.Tester.multiG.KG1.rel_str2index", "tester1.Tester.multiG.KG2.rel_str2index", "align.append", "len", "tester1.Tester.lr_map_rel.get", "set", "tester1.Tester.lr_map_rel[].add", "tester1.Tester.rl_map_rel.get", "set", "tester1.Tester.rl_map_rel[].add", "line.rstrip().split.rstrip().split.rstrip", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index"], ["", "def", "load_test_data_rel", "(", "self", ",", "filename", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ")", ":", "\n", "        ", "num_lines", "=", "0", "\n", "align", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "if", "len", "(", "line", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "", "num_lines", "+=", "1", "\n", "e1", "=", "self", ".", "multiG", ".", "KG1", ".", "rel_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG2", ".", "rel_str2index", "(", "line", "[", "1", "]", ")", "\n", "if", "e1", "==", "None", "or", "e2", "==", "None", ":", "\n", "                ", "continue", "\n", "", "align", ".", "append", "(", "[", "e1", ",", "e2", "]", ")", "\n", "if", "self", ".", "lr_map_rel", ".", "get", "(", "e1", ")", "==", "None", ":", "\n", "                ", "self", ".", "lr_map_rel", "[", "e1", "]", "=", "set", "(", "[", "e2", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_map_rel", "[", "e1", "]", ".", "add", "(", "e2", ")", "\n", "", "if", "self", ".", "rl_map_rel", ".", "get", "(", "e2", ")", "==", "None", ":", "\n", "                ", "self", ".", "rl_map_rel", "[", "e2", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "rl_map_rel", "[", "e2", "]", ".", "add", "(", "e1", ")", "\n", "", "", "self", ".", "test_align_rel", "=", "np", ".", "array", "(", "align", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "\"Loaded test data (rel) from %s, %d out of %d.\"", "%", "(", "filename", ",", "len", "(", "align", ")", ",", "num_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.load_except_data": [[248, 264], ["open", "print", "line.rstrip().split.rstrip().split.rstrip().split", "tester1.Tester.multiG.KG1.ent_str2index", "tester1.Tester.multiG.KG2.ent_str2index", "tester1.Tester.aligned[].add", "tester1.Tester.aligned[].add", "len", "line.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_except_data", "(", "self", ",", "filename", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ")", ":", "\n", "        ", "num_lines", "=", "0", "\n", "num_read", "=", "0", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "if", "len", "(", "line", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "", "num_lines", "+=", "1", "\n", "e1", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "1", "]", ")", "\n", "if", "e1", "==", "None", "or", "e2", "==", "None", ":", "\n", "                ", "continue", "\n", "", "self", ".", "aligned", "[", "1", "]", ".", "add", "(", "e1", ")", "\n", "self", ".", "aligned", "[", "2", "]", ".", "add", "(", "e2", ")", "\n", "num_read", "+=", "1", "\n", "", "print", "(", "\"Loaded excluded ids from %s, %d out of %d.\"", "%", "(", "filename", ",", "num_read", ",", "num_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.load_align_ids": [[265, 290], ["open", "set", "set", "line.strip().split.strip().split.strip().split", "aligned1.add", "aligned2.add", "len", "tester1.Tester.multiG.KG1.ent_str2index", "tester1.Tester.multiG.KG1.ent_str2index", "line.strip().split.strip().split.strip", "tester1.Tester.multiG.KG2.ent_str2index", "tester1.Tester.multiG.KG2.ent_str2index", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_align_ids", "(", "self", ",", "filename", ",", "max_num", "=", "525", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ")", ":", "\n", "        ", "num_lines", "=", "0", "\n", "num_read", "=", "0", "\n", "aligned1", ",", "aligned2", "=", "set", "(", "[", "]", ")", ",", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "if", "num_read", ">", "max_num", ":", "\n", "                ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "splitter", ")", "\n", "if", "len", "(", "line", ")", "!=", "3", ":", "\n", "                ", "continue", "\n", "", "num_lines", "+=", "1", "\n", "if", "self", ".", "graph", "==", "'ins'", ":", "\n", "                ", "e1", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "", "elif", "self", ".", "graph", "==", "'onto'", ":", "\n", "                ", "e1", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'not valid graph'", ")", "\n", "", "if", "e1", "==", "None", "or", "e2", "==", "None", ":", "\n", "                ", "continue", "\n", "", "aligned1", ".", "add", "(", "e1", ")", "\n", "aligned2", ".", "add", "(", "e2", ")", "\n", "num_read", "+=", "1", "\n", "", "return", "aligned1", ",", "aligned2", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.load_more_truth_data": [[291, 313], ["open", "print", "line.rstrip().split.rstrip().split.rstrip().split", "tester1.Tester.multiG.KG1.ent_str2index", "tester1.Tester.multiG.KG2.ent_str2index", "len", "tester1.Tester.lr_map.get", "set", "tester1.Tester.lr_map[].add", "tester1.Tester.rl_map.get", "set", "tester1.Tester.rl_map[].add", "line.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "load_more_truth_data", "(", "self", ",", "filename", ",", "splitter", "=", "'@@@'", ",", "line_end", "=", "'\\n'", ")", ":", "\n", "        ", "num_lines", "=", "0", "\n", "count", "=", "0", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "line_end", ")", ".", "split", "(", "splitter", ")", "\n", "if", "len", "(", "line", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "", "num_lines", "+=", "1", "\n", "e1", "=", "self", ".", "multiG", ".", "KG1", ".", "ent_str2index", "(", "line", "[", "0", "]", ")", "\n", "e2", "=", "self", ".", "multiG", ".", "KG2", ".", "ent_str2index", "(", "line", "[", "1", "]", ")", "\n", "if", "e1", "==", "None", "or", "e2", "==", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "lr_map", ".", "get", "(", "e1", ")", "==", "None", ":", "\n", "                ", "self", ".", "lr_map", "[", "e1", "]", "=", "set", "(", "[", "e2", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_map", "[", "e1", "]", ".", "add", "(", "e2", ")", "\n", "", "if", "self", ".", "rl_map", ".", "get", "(", "e2", ")", "==", "None", ":", "\n", "                ", "self", ".", "rl_map", "[", "e2", "]", "=", "set", "(", "[", "e1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "rl_map", "[", "e2", "]", ".", "add", "(", "e1", ")", "\n", "", "count", "+=", "1", "\n", "", "print", "(", "\"Loaded extra truth data into mappings from %s, %d out of %d.\"", "%", "(", "filename", ",", "count", ",", "num_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.get_mat": [[315, 317], ["None"], "methods", ["None"], ["", "def", "get_mat", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_index2vec": [[318, 321], ["set", "int"], "methods", ["None"], ["", "def", "ent_index2vec", "(", "self", ",", "e", ",", "source", ")", ":", "\n", "        ", "assert", "(", "source", "in", "set", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "return", "self", ".", "vec_e", "[", "source", "]", "[", "int", "(", "e", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2vec": [[322, 325], ["set", "int"], "methods", ["None"], ["", "def", "rel_index2vec", "(", "self", ",", "r", ",", "source", ")", ":", "\n", "        ", "assert", "(", "source", "in", "set", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "return", "self", ".", "vec_r", "[", "source", "]", "[", "int", "(", "r", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2vec": [[326, 336], ["KG.ent_str2index"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "ent_str2vec", "(", "self", ",", "str", ",", "source", ")", ":", "\n", "        ", "KG", "=", "None", "\n", "if", "source", "==", "1", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG1", "\n", "", "else", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG2", "\n", "", "this_index", "=", "KG", ".", "ent_str2index", "(", "str", ")", "\n", "if", "this_index", "==", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "vec_e", "[", "source", "]", "[", "this_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2vec": [[337, 347], ["KG.rel_str2index"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index"], ["", "def", "rel_str2vec", "(", "self", ",", "str", ",", "source", ")", ":", "\n", "        ", "KG", "=", "None", "\n", "if", "source", "==", "1", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG1", "\n", "", "else", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG2", "\n", "", "this_index", "=", "KG", ".", "rel_str2index", "(", "str", ")", "\n", "if", "this_index", "==", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "vec_r", "[", "source", "]", "[", "this_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_index2str": [[356, 363], ["KG.ent_index2str"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_index2str"], ["", "", "def", "ent_index2str", "(", "self", ",", "str", ",", "source", ")", ":", "\n", "        ", "KG", "=", "None", "\n", "if", "source", "==", "1", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG1", "\n", "", "else", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG2", "\n", "", "return", "KG", ".", "ent_index2str", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2str": [[364, 371], ["KG.rel_index2str"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2str"], ["", "def", "rel_index2str", "(", "self", ",", "str", ",", "source", ")", ":", "\n", "        ", "KG", "=", "None", "\n", "if", "source", "==", "1", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG1", "\n", "", "else", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG2", "\n", "", "return", "KG", ".", "rel_index2str", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index": [[372, 379], ["KG.ent_str2index"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_str2index"], ["", "def", "ent_str2index", "(", "self", ",", "str", ",", "source", ")", ":", "\n", "        ", "KG", "=", "None", "\n", "if", "source", "==", "1", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG1", "\n", "", "else", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG2", "\n", "", "return", "KG", ".", "ent_str2index", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index": [[380, 387], ["KG.rel_str2index"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_str2index"], ["", "def", "rel_str2index", "(", "self", ",", "str", ",", "source", ")", ":", "\n", "        ", "KG", "=", "None", "\n", "if", "source", "==", "1", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG1", "\n", "", "else", ":", "\n", "            ", "KG", "=", "self", ".", "multiG", ".", "KG2", "\n", "", "return", "KG", ".", "rel_str2index", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.kNN": [[389, 410], ["range", "len", "numpy.linalg.norm", "len", "heapq.heappop", "rst.insert", "len", "heapq.heappush", "tester1.Tester.index_dist", "heapq.nsmallest", "heapq.heapreplace", "tester1.Tester.index_dist"], "methods", ["None"], ["", "def", "kNN", "(", "self", ",", "vec", ",", "vec_pool", ",", "topk", "=", "10", ",", "self_id", "=", "None", ",", "except_ids", "=", "None", ",", "limit_ids", "=", "None", ")", ":", "\n", "        ", "q", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "vec_pool", ")", ")", ":", "\n", "#skip self", "\n", "            ", "if", "i", "==", "self_id", "or", "(", "(", "not", "except_ids", "is", "None", ")", "and", "i", "in", "except_ids", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "not", "limit_ids", "is", "None", ")", "and", "i", "not", "in", "limit_ids", ":", "\n", "                ", "continue", "\n", "", "dist", "=", "LA", ".", "norm", "(", "vec", "-", "vec_pool", "[", "i", "]", ",", "ord", "=", "(", "1", "if", "self", ".", "multiG", ".", "L1", "else", "2", ")", ")", "\n", "if", "len", "(", "q", ")", "<", "topk", ":", "\n", "                ", "HP", ".", "heappush", "(", "q", ",", "self", ".", "index_dist", "(", "i", ",", "dist", ")", ")", "\n", "", "else", ":", "\n", "#indeed it fetches the biggest", "\n", "                ", "tmp", "=", "HP", ".", "nsmallest", "(", "1", ",", "q", ")", "[", "0", "]", "\n", "if", "tmp", ".", "dist", ">", "dist", ":", "\n", "                    ", "HP", ".", "heapreplace", "(", "q", ",", "self", ".", "index_dist", "(", "i", ",", "dist", ")", ")", "\n", "", "", "", "rst", "=", "[", "]", "\n", "while", "len", "(", "q", ")", ">", "0", ":", "\n", "            ", "item", "=", "HP", ".", "heappop", "(", "q", ")", "\n", "rst", ".", "insert", "(", "0", ",", "(", "item", ".", "index", ",", "item", ".", "dist", ")", ")", "\n", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.kNN_link": [[411, 434], ["tester1.Tester.dist_source", "len", "heapq.heappop", "rst.insert", "range", "range", "len", "heapq.heappush", "len", "len", "tester1.Tester.train_hr_map.get", "tester1.Tester.train_hr_map[].get", "tester1.Tester.index_dist", "heapq.nsmallest", "heapq.heapreplace", "tester1.Tester.index_dist"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_source"], ["", "def", "kNN_link", "(", "self", ",", "h", ",", "r", ",", "topk", "=", "10", ",", "limit_ids", "=", "None", ",", "is_filtered", "=", "True", ")", ":", "\n", "        ", "q", "=", "[", "]", "\n", "cand_scope", "=", "limit_ids", "\n", "if", "cand_scope", "==", "None", ":", "\n", "            ", "cand_scope", "=", "range", "(", "len", "(", "self", ".", "vec_e", "[", "1", "]", ")", ")", "if", "self", ".", "graph", "==", "'ins'", "else", "range", "(", "len", "(", "self", ".", "vec_e", "[", "2", "]", ")", ")", "\n", "", "for", "i", "in", "cand_scope", ":", "\n", "            ", "hasMapping", "=", "self", ".", "train_hr_map", ".", "get", "(", "h", ")", "is", "not", "None", "and", "self", ".", "train_hr_map", "[", "h", "]", ".", "get", "(", "r", ")", "is", "not", "None", "\n", "if", "is_filtered", "and", "hasMapping", "and", "i", "in", "self", ".", "train_hr_map", "[", "h", "]", "[", "r", "]", ":", "#chang to train map", "\n", "#print('find in train set (kNN)')", "\n", "                ", "continue", "\n", "", "dist", "=", "self", ".", "dist_source", "(", "h", ",", "r", ",", "i", ",", "source", "=", "self", ".", "method", ")", "\n", "if", "len", "(", "q", ")", "<", "topk", ":", "\n", "                ", "HP", ".", "heappush", "(", "q", ",", "self", ".", "index_dist", "(", "i", ",", "dist", ")", ")", "\n", "", "else", ":", "\n", "#indeed it fetches the biggest", "\n", "                ", "tmp", "=", "HP", ".", "nsmallest", "(", "1", ",", "q", ")", "[", "0", "]", "\n", "if", "tmp", ".", "dist", ">", "dist", ":", "\n", "                    ", "HP", ".", "heapreplace", "(", "q", ",", "self", ".", "index_dist", "(", "i", ",", "dist", ")", ")", "\n", "", "", "", "rst", "=", "[", "]", "\n", "while", "len", "(", "q", ")", ">", "0", ":", "\n", "            ", "item", "=", "HP", ".", "heappop", "(", "q", ")", "\n", "rst", ".", "insert", "(", "0", ",", "(", "item", ".", "index", ",", "item", ".", "dist", ")", ")", "\n", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_score": [[435, 438], ["tester1.Tester.dist_source"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_source"], ["", "def", "rel_score", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "dist", "=", "self", ".", "dist_source", "(", "h", ",", "r", ",", "t", ",", "source", "=", "self", ".", "method", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.kNN_rels": [[439, 454], ["range", "range", "tester1.Tester.dist_source", "len", "heapq.heappop", "rst.insert", "len", "len", "heapq.heappush", "heapq.heappush", "tester1.Tester.train_ht_map.get", "tester1.Tester.train_ht_map[].get", "tester1.Tester.index_dist", "tester1.Tester.index_dist", "float"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_source"], ["", "def", "kNN_rels", "(", "self", ",", "h", ",", "t", ",", "is_filtered", "=", "True", ")", ":", "# no need to limit id", "\n", "        ", "q", "=", "[", "]", "\n", "cand_scope", "=", "range", "(", "len", "(", "self", ".", "vec_r", "[", "1", "]", ")", ")", "if", "self", ".", "graph", "==", "'ins'", "else", "range", "(", "len", "(", "self", ".", "vec_r", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "cand_scope", ":", "\n", "            ", "hasMapping", "=", "self", ".", "train_ht_map", ".", "get", "(", "h", ")", "is", "not", "None", "and", "self", ".", "train_ht_map", "[", "h", "]", ".", "get", "(", "t", ")", "is", "not", "None", "\n", "dist", "=", "self", ".", "dist_source", "(", "h", ",", "i", ",", "t", ",", "source", "=", "self", ".", "method", ")", "\n", "if", "is_filtered", "and", "hasMapping", "and", "i", "in", "self", ".", "train_ht_map", "[", "h", "]", "[", "t", "]", ":", "\n", "                ", "HP", ".", "heappush", "(", "q", ",", "self", ".", "index_dist", "(", "i", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "HP", ".", "heappush", "(", "q", ",", "self", ".", "index_dist", "(", "i", ",", "dist", ")", ")", "\n", "", "", "rst", "=", "[", "]", "\n", "while", "len", "(", "q", ")", ">", "0", ":", "\n", "            ", "item", "=", "HP", ".", "heappop", "(", "q", ")", "\n", "rst", ".", "insert", "(", "0", ",", "(", "item", ".", "index", ",", "item", ".", "dist", ")", ")", "\n", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.NN": [[456, 470], ["range", "len", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "NN", "(", "self", ",", "vec", ",", "vec_pool", ",", "self_id", "=", "None", ",", "except_ids", "=", "None", ",", "limit_ids", "=", "None", ")", ":", "\n", "        ", "min_dist", "=", "sys", ".", "maxint", "\n", "rst", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "vec_pool", ")", ")", ":", "\n", "#skip self", "\n", "            ", "if", "i", "==", "self_id", "or", "(", "(", "not", "except_ids", "is", "None", ")", "and", "i", "in", "except_ids", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "not", "limit_ids", "is", "None", ")", "and", "i", "not", "in", "limit_ids", ":", "\n", "                ", "continue", "\n", "", "dist", "=", "LA", ".", "norm", "(", "vec", "-", "vec_pool", "[", "i", "]", ",", "ord", "=", "(", "1", "if", "self", ".", "multiG", ".", "L1", "else", "2", ")", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "min_dist", "=", "dist", "\n", "rst", "=", "i", "\n", "", "", "return", "(", "rst", ",", "min_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rank_index_from": [[472, 483], ["numpy.linalg.norm", "range", "len", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "rank_index_from", "(", "self", ",", "vec", ",", "vec_pool", ",", "index", ",", "self_id", "=", "None", ",", "except_ids", "=", "None", ",", "limit_ids", "=", "None", ")", ":", "\n", "        ", "dist", "=", "LA", ".", "norm", "(", "vec", "-", "vec_pool", "[", "index", "]", ",", "ord", "=", "(", "1", "if", "self", ".", "multiG", ".", "L1", "else", "2", ")", ")", "\n", "rank", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "vec_pool", ")", ")", ":", "\n", "            ", "if", "i", "==", "index", "or", "i", "==", "self_id", "or", "(", "(", "not", "except_ids", "is", "None", ")", "and", "i", "in", "except_ids", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "not", "limit_ids", "is", "None", ")", "and", "i", "not", "in", "limit_ids", ":", "\n", "                ", "continue", "\n", "", "if", "dist", ">", "LA", ".", "norm", "(", "vec", "-", "vec_pool", "[", "i", "]", ",", "ord", "=", "(", "1", "if", "self", ".", "multiG", ".", "L1", "else", "2", ")", ")", ":", "\n", "                ", "rank", "+=", "1", "\n", "", "", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rank_index_link": [[484, 507], ["tester1.Tester.dist_source", "range", "range", "tester1.Tester.dist_source", "len", "len", "tester1.Tester.train_hr_map.get", "tester1.Tester.train_hr_map[].get"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_source", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_source"], ["", "def", "rank_index_link", "(", "self", ",", "h", ",", "r", ",", "t", ",", "limit_ids", "=", "None", ",", "is_filtered", "=", "True", ")", ":", "\n", "# choose the smallest one", "\n", "        ", "cand_scope", "=", "limit_ids", "\n", "dist_target", "=", "self", ".", "dist_source", "(", "h", ",", "r", ",", "t", ",", "source", "=", "self", ".", "method", ")", "\n", "'''\n        for ti in t_test:\n            dist_current = self.dist_source(h, r, ti, source=self.method)\n            if dist_current < dist_target:\n                dist_target = dist_current\n        '''", "\n", "if", "cand_scope", "==", "None", ":", "\n", "            ", "cand_scope", "=", "range", "(", "len", "(", "self", ".", "vec_e", "[", "1", "]", ")", ")", "if", "self", ".", "graph", "==", "'ins'", "else", "range", "(", "len", "(", "self", ".", "vec_e", "[", "2", "]", ")", ")", "\n", "", "rank", "=", "1", "\n", "for", "i", "in", "cand_scope", ":", "\n", "            ", "if", "i", "==", "t", ":", "\n", "                ", "continue", "\n", "", "hasMapping", "=", "self", ".", "train_hr_map", ".", "get", "(", "h", ")", "is", "not", "None", "and", "self", ".", "train_hr_map", "[", "h", "]", ".", "get", "(", "r", ")", "is", "not", "None", "\n", "if", "is_filtered", "and", "hasMapping", "and", "i", "in", "self", ".", "train_hr_map", "[", "h", "]", "[", "r", "]", ":", "\n", "#print('find in train set (rank)')", "\n", "                ", "continue", "\n", "", "if", "dist_target", ">", "self", ".", "dist_source", "(", "h", ",", "r", ",", "i", ",", "source", "=", "self", ".", "method", ")", ":", "\n", "                ", "rank", "+=", "1", "\n", "", "", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.projection": [[516, 524], ["tester1.Tester.ent_index2vec", "set", "numpy.tanh", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.ent_index2vec"], ["def", "projection", "(", "self", ",", "e", ",", "source", ",", "activation", "=", "True", ")", ":", "\n", "        ", "assert", "(", "source", "in", "set", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "vec_e", "=", "self", ".", "ent_index2vec", "(", "e", ",", "source", ")", "\n", "#return np.add(np.dot(vec_e, self.mat), self._b)", "\n", "if", "activation", ":", "\n", "            ", "return", "np", ".", "tanh", "(", "np", ".", "dot", "(", "vec_e", ",", "self", ".", "mat", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "dot", "(", "vec_e", ",", "self", ".", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.projection_rel": [[525, 530], ["tester1.Tester.rel_index2vec", "numpy.dot", "set"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2vec"], ["", "", "def", "projection_rel", "(", "self", ",", "r", ",", "source", ")", ":", "\n", "        ", "assert", "(", "source", "in", "set", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "vec_r", "=", "self", ".", "rel_index2vec", "(", "r", ",", "source", ")", "\n", "#return np.add(np.dot(vec_e, self.mat), self._b)", "\n", "return", "np", ".", "dot", "(", "vec_r", ",", "self", ".", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.projection_vec": [[531, 535], ["numpy.dot", "set"], "methods", ["None"], ["", "def", "projection_vec", "(", "self", ",", "vec", ",", "source", ")", ":", "\n", "        ", "assert", "(", "source", "in", "set", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "#return np.add(np.dot(vec_e, self.mat), self._b)", "\n", "return", "np", ".", "dot", "(", "vec", ",", "self", ".", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.projection_pool": [[537, 540], ["numpy.dot"], "methods", ["None"], ["", "def", "projection_pool", "(", "self", ",", "ht_vec", ")", ":", "\n", "#return np.add(np.dot(ht_vec, self.mat), self._b)", "\n", "        ", "return", "np", ".", "dot", "(", "ht_vec", ",", "self", ".", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_source": [[541, 550], ["tester1.Tester.dist_transe", "tester1.Tester.dist_distmult", "tester1.Tester.dist_hole", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_transe", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_distmult", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_hole"], ["", "def", "dist_source", "(", "self", ",", "h", ",", "r", ",", "t", ",", "source", "=", "'transe'", ")", ":", "\n", "        ", "if", "source", "==", "'transe'", ":", "\n", "            ", "return", "self", ".", "dist_transe", "(", "h", ",", "r", ",", "t", ")", "\n", "", "elif", "source", "==", "'distmult'", ":", "\n", "            ", "return", "self", ".", "dist_distmult", "(", "h", ",", "r", ",", "t", ")", "\n", "", "elif", "source", "==", "'hole'", ":", "\n", "            ", "return", "self", ".", "dist_hole", "(", "h", ",", "r", ",", "t", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Method invalid! Can not compute distance!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_transe": [[551, 561], ["numpy.linalg.norm"], "methods", ["None"], ["", "", "def", "dist_transe", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "graph", "==", "'ins'", ":", "\n", "            ", "h_vec", "=", "self", ".", "vec_e", "[", "1", "]", "[", "h", "]", "\n", "t_vec", "=", "self", ".", "vec_e", "[", "1", "]", "[", "t", "]", "\n", "r_vec", "=", "self", ".", "vec_r", "[", "1", "]", "[", "r", "]", "\n", "", "else", ":", "\n", "            ", "h_vec", "=", "self", ".", "vec_e", "[", "2", "]", "[", "h", "]", "\n", "t_vec", "=", "self", ".", "vec_e", "[", "2", "]", "[", "t", "]", "\n", "r_vec", "=", "self", ".", "vec_r", "[", "2", "]", "[", "r", "]", "\n", "", "return", "LA", ".", "norm", "(", "h_vec", "+", "r_vec", "-", "t_vec", ",", "ord", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_distmult": [[562, 572], ["numpy.dot", "numpy.multiply"], "methods", ["None"], ["", "def", "dist_distmult", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "graph", "==", "'ins'", ":", "\n", "            ", "h_vec", "=", "self", ".", "vec_e", "[", "1", "]", "[", "h", "]", "\n", "t_vec", "=", "self", ".", "vec_e", "[", "1", "]", "[", "t", "]", "\n", "r_vec", "=", "self", ".", "vec_r", "[", "1", "]", "[", "r", "]", "\n", "", "else", ":", "\n", "            ", "h_vec", "=", "self", ".", "vec_e", "[", "2", "]", "[", "h", "]", "\n", "t_vec", "=", "self", ".", "vec_e", "[", "2", "]", "[", "t", "]", "\n", "r_vec", "=", "self", ".", "vec_r", "[", "2", "]", "[", "r", "]", "\n", "", "return", "-", "np", ".", "dot", "(", "r_vec", ",", "np", ".", "multiply", "(", "h_vec", ",", "t_vec", ")", ")", "# add minus", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.dist_hole": [[573, 583], ["numpy.dot", "utils.np_ccorr"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.np_ccorr"], ["", "def", "dist_hole", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "graph", "==", "'ins'", ":", "\n", "            ", "h_vec", "=", "self", ".", "vec_e", "[", "1", "]", "[", "h", "]", "\n", "t_vec", "=", "self", ".", "vec_e", "[", "1", "]", "[", "t", "]", "\n", "r_vec", "=", "self", ".", "vec_r", "[", "1", "]", "[", "r", "]", "\n", "", "else", ":", "\n", "            ", "h_vec", "=", "self", ".", "vec_e", "[", "2", "]", "[", "h", "]", "\n", "t_vec", "=", "self", ".", "vec_e", "[", "2", "]", "[", "t", "]", "\n", "r_vec", "=", "self", ".", "vec_r", "[", "2", "]", "[", "r", "]", "\n", "", "return", "-", "np", ".", "dot", "(", "np_ccorr", "(", "h_vec", ",", "t_vec", ")", ",", "r_vec", ")", "# add minus", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.__init__": [[19, 24], ["utils.GO_Tree.load_graph"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.load_graph"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "self", ".", "full_tree_path", "=", "filepath", "\n", "self", ".", "GoTree", "=", "None", "\n", "self", ".", "roots", "=", "[", "\"GO:0008150\"", ",", "\"GO:0005575\"", ",", "\"GO:0003674\"", "]", "# pre-defined", "\n", "self", ".", "load_graph", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.load_graph": [[26, 46], ["networkx.DiGraph", "print", "open", "print", "print", "line.strip().replace().replace().split.strip().replace().replace().split.strip().replace().replace().split", "utils.GO_Tree.GoTree.add_edge", "len", "utils.GO_Tree.GoTree.has_node", "utils.GO_Tree.GoTree.add_node", "utils.GO_Tree.GoTree.has_node", "utils.GO_Tree.GoTree.add_node", "utils.GO_Tree.GoTree.number_of_nodes", "utils.GO_Tree.GoTree.number_of_edges", "line.strip().replace().replace().split.strip().replace().replace().split.strip().replace().replace", "utils.GO_Tree.GoTree.out_degree", "line.strip().replace().replace().split.strip().replace().replace().split.strip().replace", "line.strip().replace().replace().split.strip().replace().replace().split.strip"], "methods", ["None"], ["", "def", "load_graph", "(", "self", ",", "filepath", ",", "auto_root", "=", "False", ")", ":", "\n", "        ", "self", ".", "GoTree", "=", "nx", ".", "DiGraph", "(", ")", "\n", "print", "(", "\"loading tree edges from \"", ",", "self", ".", "full_tree_path", ")", "\n", "for", "line", "in", "open", "(", "filepath", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'_'", ",", "':'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "line", ")", "!=", "3", ":", "\n", "                ", "continue", "\n", "", "cid", ",", "pid", "=", "line", "[", "0", "]", ",", "line", "[", "2", "]", "\n", "if", "not", "self", ".", "GoTree", ".", "has_node", "(", "cid", ")", ":", "\n", "                ", "self", ".", "GoTree", ".", "add_node", "(", "cid", ")", "\n", "", "if", "not", "self", ".", "GoTree", ".", "has_node", "(", "pid", ")", ":", "\n", "                ", "self", ".", "GoTree", ".", "add_node", "(", "pid", ")", "\n", "# add both directions", "\n", "", "self", ".", "GoTree", ".", "add_edge", "(", "cid", ",", "pid", ",", "relname", "=", "\"has/to Parent\"", ")", "\n", "# self.GoTree.add_edge(pid, cid, relname=\"has/to Child\")", "\n", "", "print", "(", "\"GoTerm Tree constructed: [#nodes] {0} [#edges] {1}\"", "\n", ".", "format", "(", "self", ".", "GoTree", ".", "number_of_nodes", "(", ")", ",", "self", ".", "GoTree", ".", "number_of_edges", "(", ")", ")", ")", "\n", "if", "auto_root", ":", "\n", "            ", "self", ".", "roots", "=", "[", "n", "for", "n", ",", "d", "in", "self", ".", "GoTree", ".", "out_degree", "(", ")", "if", "d", "==", "0", "]", "\n", "", "print", "(", "\"roots:\"", ",", "self", ".", "roots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_root_node": [[47, 61], ["qid.replace.replace.replace", "networkx.bfs_tree", "set().intersection", "set", "len", "set", "list", "len", "[].replace", "list", "list"], "methods", ["None"], ["", "def", "find_root_node", "(", "self", ",", "qid", ")", ":", "\n", "        ", "qid", "=", "qid", ".", "replace", "(", "'_'", ",", "':'", ")", "\n", "try", ":", "\n", "            ", "qid_parents", "=", "nx", ".", "bfs_tree", "(", "self", ".", "GoTree", ",", "qid", ",", "reverse", "=", "False", ")", "\n", "qid_roots", "=", "set", "(", "self", ".", "roots", ")", ".", "intersection", "(", "set", "(", "qid_parents", ")", ")", "\n", "if", "len", "(", "list", "(", "qid_roots", ")", ")", "==", "0", ":", "\n", "                ", "qid_roots_str", "=", "'unknown'", "\n", "", "elif", "len", "(", "list", "(", "qid_roots", ")", ")", ">", "1", ":", "\n", "                ", "qid_roots_str", "=", "'multiple'", "\n", "", "else", ":", "\n", "                ", "qid_roots_str", "=", "list", "(", "qid_roots", ")", "[", "0", "]", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "", "", "except", ":", "\n", "            ", "qid_roots_str", "=", "'unknown'", "\n", "", "return", "qid_roots_str", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_all_direct_parents": [[62, 65], ["networkx.bfs_tree", "set", "set"], "methods", ["None"], ["", "def", "find_all_direct_parents", "(", "self", ",", "qid", ")", ":", "\n", "        ", "parent_tree", "=", "nx", ".", "bfs_tree", "(", "self", ".", "GoTree", ",", "qid", ",", "reverse", "=", "False", ")", "\n", "return", "set", "(", "parent_tree", ".", "nodes", ")", "-", "set", "(", "[", "qid", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_all_direct_children": [[66, 69], ["networkx.bfs_tree", "set", "set"], "methods", ["None"], ["", "def", "find_all_direct_children", "(", "self", ",", "qid", ")", ":", "\n", "        ", "children_tree", "=", "nx", ".", "bfs_tree", "(", "self", ".", "GoTree", ",", "qid", ",", "reverse", "=", "True", ")", "\n", "return", "set", "(", "children_tree", ".", "nodes", ")", "-", "set", "(", "[", "qid", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_siblings_set": [[70, 81], ["networkx.bfs_tree", "set", "set", "set", "networkx.bfs_tree", "sibling_set.union.union.union", "print", "set", "set", "len", "len"], "methods", ["None"], ["", "def", "find_siblings_set", "(", "self", ",", "qid", ",", "parent_level", "=", "2", ",", "children_level", "=", "2", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "parent_tree", "=", "nx", ".", "bfs_tree", "(", "self", ".", "GoTree", ",", "qid", ",", "reverse", "=", "False", ",", "depth_limit", "=", "parent_level", ")", "\n", "selected_parent", "=", "set", "(", "parent_tree", ".", "nodes", ")", "-", "set", "(", "[", "qid", "]", ")", "\n", "sibling_set", "=", "set", "(", "[", "]", ")", "\n", "for", "item", "in", "selected_parent", ":", "\n", "            ", "subtree", "=", "nx", ".", "bfs_tree", "(", "self", ".", "GoTree", ",", "item", ",", "reverse", "=", "True", ",", "depth_limit", "=", "children_level", ")", "\n", "cur_siblings", "=", "set", "(", "subtree", ".", "nodes", ")", "-", "set", "(", "[", "item", "]", ")", "\n", "sibling_set", "=", "sibling_set", ".", "union", "(", "cur_siblings", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Parent level up:{0}, total siblings: {1}\"", ".", "format", "(", "len", "(", "selected_parent", ")", ",", "len", "(", "sibling_set", ")", ")", ")", "\n", "", "return", "sibling_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.generate_regular_negative": [[82, 113], ["numpy.random.seed", "numpy.random.seed", "numpy.array", "numpy.array", "print", "ValueError", "utils.GO_Tree.find_all_direct_parents", "utils.GO_Tree.find_all_direct_children", "len", "print", "print", "len", "list", "len", "random.sample", "numpy.array.append", "len", "len", "len", "utils.GO_Tree.GoTree.nodes", "set", "numpy.random.choice", "numpy.random.choice", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_all_direct_parents", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_all_direct_children"], ["", "def", "generate_regular_negative", "(", "self", ",", "input_pairs", ",", "maxnum", "=", "10", ",", "ratio", "=", "1.0", ",", "rand_seed", "=", "None", ")", ":", "\n", "        ", "if", "ratio", ">", "maxnum", ":", "\n", "            ", "raise", "ValueError", "(", "\"max < ratio not allowed!\"", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", "=", "rand_seed", ")", "\n", "hardneg_pairs", "=", "[", "]", "\n", "for", "item", "in", "input_pairs", ":", "\n", "            ", "if", "len", "(", "item", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "", "pro", ",", "cid", "=", "item", "[", "0", "]", ",", "item", "[", "1", "]", "\n", "if", "cid", "not", "in", "list", "(", "self", ".", "GoTree", ".", "nodes", "(", ")", ")", ":", "\n", "                ", "continue", "\n", "", "pset", "=", "self", ".", "find_all_direct_parents", "(", "cid", ")", "\n", "cset", "=", "self", ".", "find_all_direct_children", "(", "cid", ")", "\n", "negset", "=", "set", "(", "self", ".", "GoTree", ".", "nodes", ")", "-", "pset", "-", "cset", "\n", "# print(\"find negnet\", len(negset))", "\n", "# number of neg control", "\n", "if", "len", "(", "negset", ")", ">", "maxnum", ":", "\n", "                ", "negset", "=", "random", ".", "sample", "(", "negset", ",", "maxnum", ")", "\n", "", "for", "k", "in", "negset", ":", "\n", "                ", "hardneg_pairs", ".", "append", "(", "(", "pro", ",", "k", ")", ")", "\n", "", "", "hardneg_pairs", "=", "np", ".", "array", "(", "hardneg_pairs", ")", "\n", "print", "(", "hardneg_pairs", ".", "shape", ")", "\n", "# ratio selection", "\n", "if", "len", "(", "hardneg_pairs", ")", "<", "len", "(", "input_pairs", ")", "*", "ratio", ":", "\n", "            ", "print", "(", "\"negative samples less than pos * ratio! Neg. Pairs #\"", ",", "len", "(", "hardneg_pairs", ")", ")", "\n", "return", "hardneg_pairs", "\n", "", "else", ":", "\n", "            ", "hardneg_pairs_rand", "=", "hardneg_pairs", "[", "np", ".", "random", ".", "choice", "\n", "(", "len", "(", "hardneg_pairs", ")", ",", "int", "(", "len", "(", "input_pairs", ")", "*", "ratio", ")", ",", "replace", "=", "False", ")", "]", "\n", "print", "(", "\"Neg. Pairs #\"", ",", "len", "(", "hardneg_pairs", ")", ")", "\n", "return", "hardneg_pairs_rand", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.generate_hard_negative": [[115, 142], ["numpy.random.seed", "numpy.random.seed", "numpy.array", "numpy.array", "ValueError", "utils.GO_Tree.find_siblings_set", "print", "len", "print", "print", "len", "list", "len", "random.sample", "len", "numpy.array.append", "len", "len", "len", "utils.GO_Tree.GoTree.nodes", "numpy.random.choice", "numpy.random.choice", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.GO_Tree.find_siblings_set"], ["", "", "def", "generate_hard_negative", "(", "self", ",", "input_pairs", ",", "maxnum", "=", "10", ",", "ratio", "=", "1.0", ",", "rand_seed", "=", "None", ")", ":", "\n", "        ", "if", "ratio", ">", "maxnum", ":", "\n", "            ", "raise", "ValueError", "(", "\"max < ratio not allowed!\"", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", "=", "rand_seed", ")", "\n", "hardneg_pairs", "=", "[", "]", "\n", "for", "item", "in", "input_pairs", ":", "\n", "            ", "if", "len", "(", "item", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "", "pro", ",", "cid", "=", "item", "[", "0", "]", ",", "item", "[", "1", "]", "\n", "if", "cid", "not", "in", "list", "(", "self", ".", "GoTree", ".", "nodes", "(", ")", ")", ":", "\n", "                ", "continue", "\n", "", "sibset", "=", "self", ".", "find_siblings_set", "(", "cid", ",", "parent_level", "=", "2", ",", "children_level", "=", "2", ")", "\n", "if", "len", "(", "sibset", ")", ">", "maxnum", ":", "\n", "                ", "sibset", "=", "random", ".", "sample", "(", "sibset", ",", "maxnum", ")", "\n", "", "print", "(", "\"find sibnet\"", ",", "len", "(", "sibset", ")", ")", "\n", "for", "sib", "in", "sibset", ":", "\n", "                ", "hardneg_pairs", ".", "append", "(", "(", "pro", ",", "sib", ")", ")", "\n", "", "", "hardneg_pairs", "=", "np", ".", "array", "(", "hardneg_pairs", ")", "\n", "# ratio selection", "\n", "if", "len", "(", "hardneg_pairs", ")", "<", "len", "(", "input_pairs", ")", "*", "ratio", ":", "\n", "            ", "print", "(", "\"negative samples less than pos * ratio! Neg. Pairs #\"", ",", "len", "(", "hardneg_pairs", ")", ")", "\n", "return", "hardneg_pairs", "\n", "", "else", ":", "\n", "            ", "hardneg_pairs_rand", "=", "hardneg_pairs", "[", "np", ".", "random", ".", "choice", "\n", "(", "len", "(", "hardneg_pairs", ")", ",", "int", "(", "len", "(", "input_pairs", ")", "*", "ratio", ")", ",", "replace", "=", "False", ")", "]", "\n", "print", "(", "\"Neg. Pairs #\"", ",", "len", "(", "hardneg_pairs", ")", ")", "\n", "return", "hardneg_pairs_rand", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.circular_correlation": [[10, 12], ["tensorflow.real", "tensorflow.spectral.ifft", "tensorflow.multiply", "tensorflow.conj", "tensorflow.spectral.fft", "tensorflow.spectral.fft", "tensorflow.complex", "tensorflow.complex"], "function", ["None"], ["def", "circular_correlation", "(", "h", ",", "t", ")", ":", "\n", "    ", "return", "tf", ".", "real", "(", "tf", ".", "spectral", ".", "ifft", "(", "tf", ".", "multiply", "(", "tf", ".", "conj", "(", "tf", ".", "spectral", ".", "fft", "(", "tf", ".", "complex", "(", "h", ",", "0.", ")", ")", ")", ",", "tf", ".", "spectral", ".", "fft", "(", "tf", ".", "complex", "(", "t", ",", "0.", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.utils.np_ccorr": [[13, 15], ["numpy.fft.ifft", "numpy.conj", "numpy.fft.fft", "numpy.fft.fft"], "function", ["None"], ["", "def", "np_ccorr", "(", "h", ",", "t", ")", ":", "\n", "    ", "return", "ifft", "(", "np", ".", "conj", "(", "fft", "(", "h", ")", ")", "*", "fft", "(", "t", ")", ")", ".", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.run.test_relations.test": [[60, 89], ["len", "tester.kNN_rels", "tester.rel_index2str", "tester.rel_index2str", "rst_predict.append", "print", "this_hit.append", "numpy.array", "print", "numpy.mean", "tester.rel_index2str", "time.time"], "function", ["home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.kNN_rels", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2str", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2str", "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.src.tester1.Tester.rel_index2str"], ["def", "test", "(", "tester", ",", "index", ",", "rst_predict", ")", ":", "\n", "    ", "while", "index", ".", "value", "<", "len", "(", "tester", ".", "test_triples", ")", ":", "# and index.value < 15000:", "\n", "        ", "idx", "=", "index", ".", "value", "\n", "index", ".", "value", "+=", "1", "\n", "if", "idx", ">", "0", "and", "idx", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"Tested %d in %d seconds.\"", "%", "(", "idx", "+", "1", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "try", ":", "\n", "                ", "print", "(", "np", ".", "mean", "(", "rst_predict", ",", "axis", "=", "0", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "e1", ",", "r", ",", "e2", "=", "tester", ".", "test_triples", "[", "idx", "]", "\n", "rst", "=", "tester", ".", "kNN_rels", "(", "e1", ",", "e2", ")", "\n", "\n", "this_hit", "=", "[", "]", "\n", "hit", "=", "0.", "\n", "strl", "=", "tester", ".", "rel_index2str", "(", "rst", "[", "0", "]", "[", "0", "]", ",", "tester", ".", "graph_id", ")", "\n", "strr", "=", "tester", ".", "rel_index2str", "(", "r", ",", "tester", ".", "graph_id", ")", "\n", "this_index", "=", "0", "\n", "this_rank", "=", "None", "\n", "for", "pr", "in", "rst", ":", "\n", "            ", "this_index", "+=", "1", "\n", "if", "(", "hit", "<", "1.", "and", "(", "pr", "[", "0", "]", "==", "r", "or", "pr", "[", "0", "]", "in", "tester", ".", "test_ht_map", "[", "e1", "]", "[", "e2", "]", ")", ")", "or", "(", "hit", "<", "1.", "and", "tester", ".", "rel_index2str", "(", "pr", "[", "0", "]", ",", "tester", ".", "graph_id", ")", "==", "strr", ")", ":", "\n", "                ", "hit", "=", "1.", "\n", "this_rank", "=", "this_index", "\n", "", "this_hit", ".", "append", "(", "hit", ")", "\n", "", "hit_first", "=", "0", "\n", "if", "rst", "[", "0", "]", "[", "0", "]", "==", "r", "or", "rst", "[", "0", "]", "[", "0", "]", "in", "tester", ".", "test_ht_map", "[", "e1", "]", "[", "e2", "]", "or", "strl", "==", "strr", ":", "\n", "            ", "hit_first", "=", "1", "\n", "", "rst_predict", ".", "append", "(", "np", ".", "array", "(", "this_hit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhao-alboran_Bio-JOIE.run.training_model2.make_hparam_string": [[23, 26], ["None"], "function", ["None"], ["def", "make_hparam_string", "(", "method", ",", "bridge", ",", "dim1", ",", "dim2", ",", "a1", ",", "a2", ",", "m1", ",", "mA", ",", "mT", ",", "fold_a", ",", "fold_t", ",", "weight", ",", "view", ")", ":", "\n", "# input params: dim, onto_ratio, type_ratio, lr, ", "\n", "\t", "return", "\"%s_%s_dim1_%s_dim2_%s_a1_%s_a2_%s_m1_%s_mA_%s_mT_%s_%s_fold_%s.%s_view_%s\"", "%", "(", "method", ",", "bridge", ",", "dim1", ",", "dim2", ",", "a1", ",", "a2", ",", "m1", ",", "mA", ",", "mT", ",", "weight", ",", "fold_a", ",", "fold_t", ",", "view", ")", "\n", "\n"]]}