{"home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.products.vjp": [[4, 14], ["torch.autograd.grad"], "function", ["None"], ["def", "vjp", "(", "y", ",", "x", ",", "v", ")", ":", "\n", "    ", "\"\"\"Computes a vector-jacobian product v^T J, aka Lop (Left Operation).\n    This is what reverse-mode automatic differentiation directly obtains.\n\n    Arguments:\n    y (torch.tensor): output of differentiated function\n    x (torch.tensor): differentiated input\n    v (torch.tensor): vector to be multiplied with Jacobian from the left\n    \"\"\"", "\n", "return", "torch", ".", "autograd", ".", "grad", "(", "y", ",", "x", ",", "v", ",", "retain_graph", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.products.jvp": [[16, 30], ["torch.ones_like", "torch.autograd.grad", "torch.autograd.grad"], "function", ["None"], ["", "def", "jvp", "(", "y", ",", "x", ",", "v", ")", ":", "\n", "    ", "\"\"\"Computes a jacobian-vector product J v, aka Rop (Right Operation)\n    This is what forward-mode automatic differentiation directly obtains.\n    It can also be obtained via reverse-mode differentiation using the\n    trick below.\n\n    Arguments:\n    y (torch.tensor): output of differentiated function\n    x (torch.tensor): differentiated input\n    v (torch.tensor): vector to be multiplied with Jacobian from the right\n    from: https://gist.github.com/apaszke/c7257ac04cb8debb82221764f6d117ad\n    \"\"\"", "\n", "w", "=", "torch", ".", "ones_like", "(", "y", ",", "requires_grad", "=", "True", ")", "\n", "return", "torch", ".", "autograd", ".", "grad", "(", "torch", ".", "autograd", ".", "grad", "(", "y", ",", "x", ",", "w", ",", "create_graph", "=", "True", ")", ",", "w", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.products.jvp_diff": [[32, 45], ["torch.ones_like", "torch.autograd.grad", "torch.autograd.grad"], "function", ["None"], ["", "def", "jvp_diff", "(", "y", ",", "x", ",", "v", ")", ":", "\n", "    ", "\"\"\"Computes a jacobian-vector product J v, aka Rop (Right Operation)\n    This is what forward-mode automatic differentiation directly obtains.\n    The result of the operation can be differentiated.\n\n    Arguments:\n    y (torch.tensor): output of differentiated function\n    x (torch.tensor): differentiated input\n    v (torch.tensor): vector to be multiplied with Jacobian from the right\n    from: https://gist.github.com/apaszke/c7257ac04cb8debb82221764f6d117ad\n    \"\"\"", "\n", "w", "=", "torch", ".", "ones_like", "(", "y", ",", "requires_grad", "=", "True", ")", "\n", "return", "torch", ".", "autograd", ".", "grad", "(", "torch", ".", "autograd", ".", "grad", "(", "y", ",", "x", ",", "w", ",", "create_graph", "=", "True", ")", ",", "w", ",", "v", ",", "create_graph", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.products.unflatten_like": [[47, 63], ["tensor.numel", "outList.append", "vector[].view"], "function", ["None"], ["", "def", "unflatten_like", "(", "vector", ",", "tensor_lst", ")", ":", "\n", "    ", "\"\"\"\n    Takes a flat torch.tensor and unflattens it to a list of torch.tensors\n        shaped like tensor_lst\n    Arguments:\n    vector (torch.tensor): flat one dimensional tensor\n    likeTensorList (list or iterable): list of tensors with same number of ele-\n        ments as vector\n    \"\"\"", "\n", "outList", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "tensor", "in", "tensor_lst", ":", "\n", "        ", "n", "=", "tensor", ".", "numel", "(", ")", "\n", "outList", ".", "append", "(", "vector", "[", "i", ":", "i", "+", "n", "]", ".", "view", "(", "tensor", ".", "shape", ")", ")", "\n", "i", "+=", "n", "\n", "", "return", "outList", "\n", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian.extract_weights": [[8, 27], ["tuple", "list", "tuple", "mod.parameters", "mod.named_parameters", "jacobian._del_nested_attr", "names.append", "name.split", "p.detach().requires_grad_", "p.detach"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian._del_nested_attr"], ["def", "extract_weights", "(", "mod", ":", "nn", ".", "Module", ")", "->", "Tuple", "[", "Tuple", "[", "Tensor", ",", "...", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    This function removes all the Parameters from the model and\n    return them as a tuple as well as their original attribute names.\n    The weights must be re-loaded with `load_weights` before the model\n    can be used again.\n    Note that this function modifies the model in place and after this\n    call, mod.parameters() will be empty.\n    \"\"\"", "\n", "orig_params", "=", "tuple", "(", "mod", ".", "parameters", "(", ")", ")", "\n", "# Remove all the parameters in the model", "\n", "names", "=", "[", "]", "\n", "for", "name", ",", "p", "in", "list", "(", "mod", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "_del_nested_attr", "(", "mod", ",", "name", ".", "split", "(", "\".\"", ")", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "\n", "# Make params regular Tensors instead of nn.Parameter", "\n", "", "params", "=", "tuple", "(", "p", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", "for", "p", "in", "orig_params", ")", "\n", "return", "params", ",", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian.load_weights": [[29, 37], ["zip", "jacobian._set_nested_attr", "name.split"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian._set_nested_attr"], ["", "def", "load_weights", "(", "mod", ":", "nn", ".", "Module", ",", "names", ":", "List", "[", "str", "]", ",", "params", ":", "Tuple", "[", "Tensor", ",", "...", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Reload a set of weights so that `mod` can be used again to perform a forward pass.\n    Note that the `params` are regular Tensors (that can have history) and so are left\n    as Tensors. This means that mod.parameters() will still be empty after this call.\n    \"\"\"", "\n", "for", "name", ",", "p", "in", "zip", "(", "names", ",", "params", ")", ":", "\n", "        ", "_set_nested_attr", "(", "mod", ",", "name", ".", "split", "(", "\".\"", ")", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian._del_nested_attr": [[42, 52], ["len", "delattr", "jacobian._del_nested_attr", "getattr"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian._del_nested_attr"], ["", "", "def", "_del_nested_attr", "(", "obj", ":", "nn", ".", "Module", ",", "names", ":", "List", "[", "str", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Deletes the attribute specified by the given list of names.\n    For example, to delete the attribute obj.conv.weight,\n    use _del_nested_attr(obj, ['conv', 'weight'])\n    \"\"\"", "\n", "if", "len", "(", "names", ")", "==", "1", ":", "\n", "        ", "delattr", "(", "obj", ",", "names", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "_del_nested_attr", "(", "getattr", "(", "obj", ",", "names", "[", "0", "]", ")", ",", "names", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian._set_nested_attr": [[54, 64], ["len", "setattr", "jacobian._set_nested_attr", "getattr"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian._set_nested_attr"], ["", "", "def", "_set_nested_attr", "(", "obj", ":", "nn", ".", "Module", ",", "names", ":", "List", "[", "str", "]", ",", "value", ":", "Tensor", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Set the attribute specified by the given list of names to value.\n    For example, to set the attribute obj.conv.weight,\n    use _del_nested_attr(obj, ['conv', 'weight'], value)\n    \"\"\"", "\n", "if", "len", "(", "names", ")", "==", "1", ":", "\n", "        ", "setattr", "(", "obj", ",", "names", "[", "0", "]", ",", "value", ")", "\n", "", "else", ":", "\n", "        ", "_set_nested_attr", "(", "getattr", "(", "obj", ",", "names", "[", "0", "]", ")", ",", "names", "[", "1", ":", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian.f_par_mod_in": [[66, 72], ["jacobian.load_weights", "isinstance", "isinstance", "module", "module"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian.load_weights"], ["", "", "def", "f_par_mod_in", "(", "*", "new_params", ",", "param_names", ",", "module", ",", "inputs", ")", ":", "\n", "    ", "load_weights", "(", "module", ",", "param_names", ",", "new_params", ")", "\n", "if", "isinstance", "(", "inputs", ",", "tuple", ")", "or", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "        ", "return", "module", "(", "*", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "module", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian.parameter_jacobian": [[74, 110], ["copy.deepcopy", "jacobian.extract_weights", "functools.partial", "functools.partial.", "torch.autograd.functional.jacobian", "len", "u.size", "u.reshape", "torch.cat", "torch.cat", "jac.reshape", "jac.reshape", "u.reshape.squeeze", "input.squeeze"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.diffutil.jacobian.extract_weights"], ["", "", "def", "parameter_jacobian", "(", "model", ",", "input", ",", "vectorize", "=", "True", ",", "flatten", "=", "True", ")", ":", "\n", "\n", "    ", "model", "=", "copy", ".", "deepcopy", "(", "model", ")", "# do not touch original model", "\n", "# In[Parameter Jacobians]", "\n", "# extract the parameters from the model in order to be able to take jacobians using the convenient functional API", "\n", "# see the discussion in https://discuss.pytorch.org/t/get-gradient-and-jacobian-wrt-the-parameters/98240", "\n", "params", ",", "names", "=", "extract_weights", "(", "model", ")", "\n", "# params_dict = dict(zip(names, params))", "\n", "# n_param = sum(map(torch.numel, params))", "\n", "# scalar_names = [f\"{name}_{pos}\" for name in params_dict for pos in range(params_dict[name].numel())]", "\n", "# [f\"{names[i]}_{j}\" for i in range(len(names)) for j in range(params[i].numel())]", "\n", "\n", "# from Pytorch module to function of the module parameters only", "\n", "f_par", "=", "functools", ".", "partial", "(", "f_par_mod_in", ",", "param_names", "=", "names", ",", "module", "=", "model", ",", "inputs", "=", "input", ")", "\n", "f_par", "(", "*", "params", ")", "\n", "\n", "jacs", "=", "torch", ".", "autograd", ".", "functional", ".", "jacobian", "(", "f_par", ",", "params", ",", "vectorize", "=", "vectorize", ")", "\n", "\n", "if", "flatten", ":", "\n", "        ", "if", "len", "(", "input", ".", "shape", ")", "==", "3", ":", "\n", "# NOTE: Use the below code snippet for LSTM", "\n", "# TODO: Refactor", "\n", "            ", "u", "=", "input", "[", ":", ",", ":", ",", ":", "model", ".", "input_size", "]", "\n", "batch_size", ",", "seq_len", ",", "inp", "=", "u", ".", "size", "(", ")", "\n", "u_new", "=", "u", ".", "reshape", "(", "(", "seq_len", "*", "inp", ",", "batch_size", ")", ")", "\n", "n_data", "=", "u_new", ".", "squeeze", "(", ")", ".", "shape", "[", "0", "]", "\n", "jacs_2d", "=", "[", "jac", ".", "reshape", "(", "n_data", ",", "-", "1", ")", "for", "jac", "in", "jacs", "]", "\n", "J", "=", "torch", ".", "cat", "(", "jacs_2d", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "n_data", "=", "input", ".", "squeeze", "(", ")", ".", "shape", "[", "0", "]", "\n", "jacs_2d", "=", "[", "jac", ".", "reshape", "(", "n_data", ",", "-", "1", ")", "for", "jac", "in", "jacs", "]", "\n", "J", "=", "torch", ".", "cat", "(", "jacs_2d", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "J", "=", "jacs", "\n", "\n", "", "return", "J", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.WH.models.WHNet.__init__": [[7, 16], ["super().__init__", "torchid.dynonet.module.lti.SisoLinearDynamicalOperator", "torchid.dynonet.module.static.SisoStaticNonLinearity", "torchid.dynonet.module.lti.SisoLinearDynamicalOperator"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_1", "=", "8", ",", "na_1", "=", "8", ",", "nb_2", "=", "8", ",", "na_2", "=", "8", ")", ":", "\n", "        ", "super", "(", "WHNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nb_1", "=", "nb_1", "\n", "self", ".", "na_1", "=", "na_1", "\n", "self", ".", "nb_2", "=", "nb_2", "\n", "self", ".", "na_2", "=", "na_2", "\n", "self", ".", "G1", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_1", ",", "n_a", "=", "self", ".", "na_1", ",", "n_k", "=", "1", ")", "\n", "self", ".", "F_nl", "=", "SisoStaticNonLinearity", "(", "n_hidden", "=", "10", ",", "activation", "=", "'tanh'", ")", "\n", "self", ".", "G2", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_2", ",", "n_a", "=", "self", ".", "na_2", ",", "n_k", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.WH.models.WHNet.forward": [[17, 23], ["models.WHNet.G1", "models.WHNet.F_nl", "models.WHNet.G2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u", ")", ":", "\n", "        ", "y1_lin", "=", "self", ".", "G1", "(", "u", ")", "\n", "y1_nl", "=", "self", ".", "F_nl", "(", "y1_lin", ")", "# B, T, C1", "\n", "y2_lin", "=", "self", ".", "G2", "(", "y1_nl", ")", "# B, T, C2", "\n", "\n", "return", "y2_lin", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.WH.models.WHNet3.__init__": [[26, 35], ["super().__init__", "torchid.dynonet.module.lti.SisoLinearDynamicalOperator", "torchid.dynonet.module.static.SisoStaticNonLinearity", "torchid.dynonet.module.lti.SisoLinearDynamicalOperator"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_1", "=", "3", ",", "na_1", "=", "3", ",", "nb_2", "=", "3", ",", "na_2", "=", "3", ")", ":", "\n", "        ", "super", "(", "WHNet3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nb_1", "=", "nb_1", "\n", "self", ".", "na_1", "=", "na_1", "\n", "self", ".", "nb_2", "=", "nb_2", "\n", "self", ".", "na_2", "=", "na_2", "\n", "self", ".", "G1", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_1", ",", "n_a", "=", "self", ".", "na_1", ",", "n_k", "=", "1", ")", "\n", "self", ".", "F_nl", "=", "SisoStaticNonLinearity", "(", "n_hidden", "=", "10", ",", "activation", "=", "'tanh'", ")", "\n", "self", ".", "G2", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_2", ",", "n_a", "=", "self", ".", "na_2", ",", "n_k", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.WH.models.WHNet3.forward": [[36, 42], ["models.WHNet3.G1", "models.WHNet3.F_nl", "models.WHNet3.G2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u", ")", ":", "\n", "        ", "y1_lin", "=", "self", ".", "G1", "(", "u", ")", "\n", "y1_nl", "=", "self", ".", "F_nl", "(", "y1_lin", ")", "# B, T, C1", "\n", "y2_lin", "=", "self", ".", "G2", "(", "y1_nl", ")", "# B, T, C2", "\n", "\n", "return", "y2_lin", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.WH.models.DynoWrapper.__init__": [[45, 50], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dyno", ",", "n_in", ",", "n_out", ")", ":", "\n", "        ", "super", "(", "DynoWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dyno", "=", "dyno", "\n", "self", ".", "n_in", "=", "n_in", "\n", "self", ".", "n_out", "=", "n_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.WH.models.DynoWrapper.forward": [[51, 58], ["models.DynoWrapper.dyno", "models.DynoWrapper.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "u_in", "=", "u_in", "[", "None", ",", ":", ",", ":", "]", "# [bsize, seq_len, n_in]", "\n", "y_out", "=", "self", ".", "dyno", "(", "u_in", ")", "# [bsize, seq_len, n_out]", "\n", "n_out", "=", "y_out", ".", "shape", "[", "-", "1", "]", "\n", "y_out_", "=", "y_out", ".", "reshape", "(", "-", "1", ",", "n_out", ")", "\n", "# output size: [bsize*seq_len, n_out] or [bsize*seq_len, ]", "\n", "return", "y_out_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_EKF.StateSpaceWrapper.__init__": [[14, 18], ["super().__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_ss", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model_ss", "\n", "self", ".", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_EKF.StateSpaceWrapper.forward": [[19, 25], ["03_RLC_transfer_EKF.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "#  x_0 = torch.zeros(2)", "\n", "        ", "x_sim_torch", "=", "self", ".", "model", "(", "self", ".", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "# Prediction only for non-hidden state", "\n", "self", ".", "x_0", "=", "x_sim_torch", "[", "-", "1", ",", ":", "]", "# Keep track of state", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.04_RLC_eval_retrain_15.StateSpaceWrapper.__init__": [[13, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.04_RLC_eval_retrain_15.StateSpaceWrapper.forward": [[17, 22], ["torch.zeros", "04_RLC_eval_retrain_15.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_sens.StateSpaceWrapper.__init__": [[13, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_sens.StateSpaceWrapper.forward": [[17, 22], ["torch.zeros", "03_RLC_transfer_sens.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.RLC_SS_transfer_gp.StateSpaceWrapper.__init__": [[14, 17], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.RLC_SS_transfer_gp.StateSpaceWrapper.forward": [[18, 23], ["torch.zeros", "RLC_SS_transfer_gp.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "# np.zeros(2).astype(np.float32)", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.RLC_SS_transfer_gp.ExactGPModel.__init__": [[26, 30], ["super().__init__", "gpytorch.means.ConstantMean", "finite_ntk.lazy.NTK"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "model", ",", "use_linearstrategy", "=", "False", ")", ":", "\n", "        ", "super", "(", "ExactGPModel", ",", "self", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "self", ".", "covar_module", "=", "finite_ntk", ".", "lazy", ".", "NTK", "(", "model", "=", "model", ",", "use_linearstrategy", "=", "use_linearstrategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.RLC_SS_transfer_gp.ExactGPModel.forward": [[31, 35], ["RLC_SS_transfer_gp.ExactGPModel.mean_module", "RLC_SS_transfer_gp.ExactGPModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.04_RLC_eval_EKF.StateSpaceWrapper.__init__": [[14, 18], ["super().__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_ss", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model_ss", "\n", "self", ".", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.04_RLC_eval_EKF.StateSpaceWrapper.forward": [[19, 25], ["04_RLC_eval_EKF.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "#  x_0 = torch.zeros(2)", "\n", "        ", "x_sim_torch", "=", "self", ".", "model", "(", "self", ".", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "# Prediction only for non-hidden state", "\n", "self", ".", "x_0", "=", "x_sim_torch", "[", "-", "1", ",", ":", "]", "# Keep track of state", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_RLS.StateSpaceWrapper.__init__": [[13, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_RLS.StateSpaceWrapper.forward": [[17, 22], ["torch.zeros", "03_RLC_transfer_RLS.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer.StateSpaceWrapper.__init__": [[12, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer.StateSpaceWrapper.forward": [[16, 21], ["torch.zeros", "03_RLC_transfer.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.symbolic_RLC.saturation_formula": [[13, 16], ["numpy.arctan"], "function", ["None"], ["def", "saturation_formula", "(", "current_abs", ")", ":", "\n", "    ", "sat_ratio", "=", "(", "1", "/", "np", ".", "pi", "*", "np", ".", "arctan", "(", "-", "1.0", "*", "(", "current_abs", "-", "5", ")", ")", "+", "0.5", ")", "*", "0.9", "+", "0.1", "\n", "return", "sat_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.symbolic_RLC.fxu_ODE": [[18, 29], ["params.get", "params.get", "params.get", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "fxu_ODE", "(", "t", ",", "x", ",", "u", ",", "params", "=", "{", "}", ")", ":", "\n", "    ", "C_val", "=", "params", ".", "get", "(", "'C'", ",", "C_nom", ")", "\n", "R_val", "=", "params", ".", "get", "(", "'R'", ",", "R_nom", ")", "\n", "L_val", "=", "params", ".", "get", "(", "'L'", ",", "L_nom", ")", "\n", "\n", "A", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "/", "C_val", "]", ",", "\n", "[", "-", "1", "/", "L_val", ",", "-", "R_val", "/", "L_val", "]", "\n", "]", ")", "\n", "B", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", ",", "[", "1.0", "/", "L_val", "]", "]", ")", "\n", "\n", "return", "A", "@", "x", "+", "B", "@", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.symbolic_RLC.fxu_ODE_nl": [[31, 47], ["params.get", "params.get", "params.get", "numpy.abs", "numpy.array", "numpy.array", "symbolic_RLC.saturation_formula"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.symbolic_RLC.saturation_formula"], ["", "def", "fxu_ODE_nl", "(", "t", ",", "x", ",", "u", ",", "params", "=", "{", "}", ")", ":", "\n", "\n", "    ", "C_val", "=", "params", ".", "get", "(", "'C'", ",", "C_nom", ")", "\n", "R_val", "=", "params", ".", "get", "(", "'R'", ",", "R_nom", ")", "\n", "L_val", "=", "params", ".", "get", "(", "'L'", ",", "L_nom", ")", "\n", "\n", "I_abs", "=", "np", ".", "abs", "(", "x", "[", "1", "]", ")", "\n", "L_val_mod", "=", "L_val", "*", "saturation_formula", "(", "I_abs", ")", "\n", "R_val_mod", "=", "R_val", "\n", "C_val_mod", "=", "C_val", "\n", "\n", "A", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "/", "C_val_mod", "]", ",", "\n", "[", "-", "1", "/", "(", "L_val_mod", ")", ",", "-", "R_val_mod", "/", "L_val_mod", "]", "\n", "]", ")", "\n", "B", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", ",", "[", "1.0", "/", "L_val_mod", "]", "]", ")", "\n", "return", "A", "@", "x", "+", "B", "@", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_RLS_fast.StateSpaceWrapper.__init__": [[13, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.03_RLC_transfer_RLS_fast.StateSpaceWrapper.forward": [[17, 22], ["torch.zeros", "03_RLC_transfer_RLS_fast.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.04_RLC_eval.StateSpaceWrapper.__init__": [[13, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "StateSpaceWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.04_RLC_eval.StateSpaceWrapper.forward": [[17, 22], ["torch.zeros", "04_RLC_eval.StateSpaceWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "        ", "x_0", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "x_sim_torch", "=", "self", ".", "model", "(", "x_0", ",", "u_in", ")", "\n", "y_out", "=", "x_sim_torch", "[", ":", ",", "[", "0", "]", "]", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.__init__": [[12, 46], ["loader.rlc_loader", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "print", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.loader.rlc_loader"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Parameters", "\n", "        ", "self", ".", "batch_size", "=", "1", "\n", "self", ".", "t", ",", "self", ".", "u", ",", "self", ".", "y", ",", "self", ".", "x", "=", "rlc_loader", "(", "\"train\"", ",", "\"nl\"", ",", "noise_std", "=", "0.1", ")", "\n", "self", ".", "ts", "=", "self", ".", "t", "[", "1", ",", "0", "]", "-", "self", ".", "t", "[", "0", ",", "0", "]", "\n", "\n", "# Load training results", "\n", "self", ".", "x_true_torch_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_x_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_sim_torch_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_x_sim.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "u_torch_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_u_val.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_hidden_fit_np", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_x_hidden.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "LOSS", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_loss.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "LOSS_CONSISTENCY", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_consist_loss.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "LOSS_FIT", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_fit_loss.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Load testing results", "\n", "self", ".", "time_val_us", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"02_test_time_val.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_true_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"02_test_x_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_sim", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"02_test_x_sim.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Load evaluation results after transfer", "\n", "self", ".", "y_new", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_y.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_sim_new", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_y_sim.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_lin_new", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_y_lin.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "\"shapes: \"", ",", "self", ".", "y_new", ".", "shape", ",", "self", ".", "y_sim_new", ".", "shape", ",", "self", ".", "y_lin_new", ".", "shape", ")", "\n", "\n", "# Load EKF transfer and evaluation results", "\n", "self", ".", "y_EKF_true", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"03_transfer_EKF_y_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_EKF_pred", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"03_transfer_EKF_y_pred.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Load EKF eval and evaluation results", "\n", "self", ".", "y_EKF_true_eval", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_EKF_y_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_EKF_pred_eval", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_EKF_y_pred.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_training": [[48, 66], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "seaborn.lineplot", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "fig.tight_layout"], "methods", ["None"], ["", "def", "plot_training", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "x_true_torch_val", "[", ":", ",", "0", "]", ",", "label", "=", "\"Ground truth\"", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "x_sim_torch_val", "[", ":", ",", "0", "]", ",", "label", "=", "\"Estimation\"", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "xlabel", "=", "r'$\\mathrm{Samples}$'", ",", "ylabel", "=", "r'$\\mathrm{v_C}$'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "2", ",", "loc", "=", "'lower center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n", "\"\"\"\n        sns.lineplot(ax=axes[1], data=self.x_true_torch_val[:, 1])\n        sns.lineplot(ax=axes[1], data=self.x_sim_torch_val[:, 1])\n        handles, labels = axes[1].get_legend_handles_labels()\n        axes[1].legend([], [], frameon=False)\n        axes[1].set(ylabel=r'$\\mathrm{v_C}$')\n        axes[1].legend(handles, labels, ncol=5, loc='lower center', frameon=False, fontsize=7)\n        \"\"\"", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_train_loss": [[67, 78], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "seaborn.lineplot", "seaborn.lineplot", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "fig.tight_layout"], "methods", ["None"], ["", "def", "plot_train_loss", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "LOSS", ",", "label", "=", "\"Total loss\"", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "LOSS_CONSISTENCY", ",", "label", "=", "\"Consistency loss\"", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "LOSS_FIT", ",", "label", "=", "\"Fitting loss\"", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "'Loss (-)'", ",", "xlabel", "=", "'Iterations (-)'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "10", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_test": [[79, 97], ["int", "int", "seaborn.set_style", "matplotlib.subplots", "axes.plot", "axes.plot", "axes.legend", "axes.grid", "axes.set_xlabel", "axes.set_ylabel", "fig.tight_layout"], "methods", ["None"], ["", "def", "plot_test", "(", "self", ")", ":", "\n", "        ", "t_plot_start", "=", "0.0e-3", "\n", "t_plot_end", "=", "t_plot_start", "+", "1.0", "# From 02_RLC_test.py", "\n", "idx_plot_start", "=", "int", "(", "t_plot_start", "//", "self", ".", "ts", ")", "\n", "idx_plot_end", "=", "int", "(", "t_plot_end", "//", "self", ".", "ts", ")", "\n", "\n", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axes", ".", "plot", "(", "self", ".", "time_val_us", "[", "idx_plot_start", ":", "idx_plot_end", "]", ",", "\n", "self", ".", "x_true_val", "[", "idx_plot_start", ":", "idx_plot_end", ",", "0", "]", ",", "label", "=", "'$v_C$'", ")", "\n", "axes", ".", "plot", "(", "self", ".", "time_val_us", "[", "idx_plot_start", ":", "idx_plot_end", "]", ",", "\n", "self", ".", "x_sim", "[", "idx_plot_start", ":", "idx_plot_end", ",", "0", "]", ",", "\n", "linestyle", "=", "'dashed'", ",", "label", "=", "r'$\\hat{v}^{\\mathrm{sim}}_C$'", ")", "\n", "axes", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "axes", ".", "grid", "(", "True", ")", "\n", "axes", ".", "set_xlabel", "(", "r'$\\mathrm{\\mu}_s$'", ")", "\n", "axes", ".", "set_ylabel", "(", "\"Voltage (V)\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_eval": [[98, 112], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "seaborn.lineplot", "seaborn.lineplot", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "fig.tight_layout", "plotting_utils.PlotRLC.y_new.squeeze", "plotting_utils.PlotRLC.y_sim_new.squeeze", "plotting_utils.PlotRLC.y_lin_new.squeeze"], "methods", ["None"], ["", "def", "plot_eval", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Ground Truth\"", ",", "color", "=", "'k'", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y_sim_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Before adaptation\"", ",", "color", "=", "'b'", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y_lin_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Linear adaptation\"", ",", "color", "=", "'r'", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{Voltage (v_C)}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_inputs": [[113, 122], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "fig.tight_layout", "plotting_utils.PlotRLC.u_torch_val.squeeze"], "methods", ["None"], ["", "def", "plot_inputs", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "u_torch_val", ".", "squeeze", "(", ")", ",", "label", "=", "\"$\\mathrm{v_{in}}$\"", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{Voltage (v_{in})}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "10", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_outputs": [[123, 132], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "fig.tight_layout", "plotting_utils.PlotRLC.y.squeeze"], "methods", ["None"], ["", "def", "plot_outputs", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y", ".", "squeeze", "(", ")", ",", "label", "=", "\"$\\mathrm{v_{C}}$\"", ",", "linewidth", "=", "0.75", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{Voltage (v_{C})}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "10", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_eval_errors": [[133, 150], ["plotting_utils.PlotRLC.y_new.squeeze", "range", "matplotlib.subplots", "axes.plot", "axes.plot", "axes.set_ylabel", "axes.set_xlabel", "axes.legend", "matplotlib.grid", "fig.tight_layout", "numpy.sqrt", "numpy.sqrt", "err_lin.append", "err_sim.append", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "plot_eval_errors", "(", "self", ")", ":", "\n", "        ", "err_lin", "=", "[", "]", "\n", "err_sim", "=", "[", "]", "\n", "y_new", "=", "self", ".", "y_new", ".", "squeeze", "(", ")", "\n", "for", "i", "in", "range", "(", "y_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "e", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "y_new", "[", ":", "i", "]", "-", "self", ".", "y_lin_new", "[", ":", "i", "]", ")", "**", "2", ")", ")", "\n", "e2", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "y_new", "[", ":", "i", "]", "-", "self", ".", "y_sim_new", "[", ":", "i", "]", ")", "**", "2", ")", ")", "\n", "err_lin", ".", "append", "(", "e", ")", "\n", "err_sim", ".", "append", "(", "e2", ")", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axes", ".", "plot", "(", "err_lin", ",", "label", "=", "\"Linear adaptation\"", ")", "\n", "axes", ".", "plot", "(", "err_sim", ",", "label", "=", "\"Before adaptation\"", ")", "\n", "axes", ".", "set_ylabel", "(", "\"RMSE\"", ")", "\n", "axes", ".", "set_xlabel", "(", "\"Number of samples\"", ")", "\n", "axes", ".", "legend", "(", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_EKF_eval": [[151, 175], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "axes.axvline", "axes.axvline", "seaborn.lineplot", "seaborn.lineplot", "seaborn.lineplot", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "axes.set_ylim", "fig.tight_layout", "torchid.metrics.r_squared", "print", "plotting_utils.PlotRLC.y_EKF_pred_eval.squeeze", "plotting_utils.PlotRLC.y_EKF_true_eval[].squeeze", "plotting_utils.PlotRLC.y_new[].squeeze", "plotting_utils.PlotRLC.y_sim_new.squeeze", "plotting_utils.PlotRLC.y_EKF_pred_eval.squeeze", "plotting_utils.PlotRLC.y_lin_new.squeeze"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.r_squared"], ["", "def", "plot_EKF_eval", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_new", "[", "2", ":", "]", ".", "squeeze", "(", ")", ",", "label", "=", "\"Ground Truth\"", ",", "\n", "linewidth", "=", "0.5", ")", "\n", "axes", ".", "axvline", "(", "100", ",", "ls", "=", "'--'", ",", "color", "=", "'black'", ",", "linewidth", "=", "1.5", ",", "alpha", "=", ".75", ")", "\n", "axes", ".", "axvline", "(", "250", ",", "ls", "=", "'--'", ",", "color", "=", "'black'", ",", "linewidth", "=", "1.5", ",", "alpha", "=", ".75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_sim_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Nominal\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_EKF_pred_eval", ".", "squeeze", "(", ")", ",", "label", "=", "\"EKF\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_lin_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"JFR\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{v_C (V)}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "4", ",", "loc", "=", "'lower center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n", "axes", ".", "set_ylim", "(", "[", "-", "3.0", ",", "3.0", "]", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "# R-squared metrics", "\n", "R_sq", "=", "metrics", ".", "r_squared", "(", "self", ".", "y_EKF_pred_eval", ".", "squeeze", "(", ")", ",", "self", ".", "y_EKF_true_eval", "[", "2", ":", "]", ".", "squeeze", "(", ")", ")", "\n", "print", "(", "f\"R-squared EKF prediction: {R_sq}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.plotting_utils.PlotRLC.plot_EKF_eval_zoom": [[176, 205], ["seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "seaborn.lineplot", "seaborn.lineplot", "seaborn.lineplot", "axes.axvline", "axes.axvline", "axes.get_legend_handles_labels", "axes.legend", "axes.set", "axes.legend", "axes.set_ylim", "axes.set_xticklabels", "fig.tight_layout", "torchid.metrics.r_squared", "print", "range", "plotting_utils.PlotRLC.y_EKF_pred_eval.squeeze", "plotting_utils.PlotRLC.y_EKF_true_eval[].squeeze", "plotting_utils.PlotRLC.y_new.squeeze", "plotting_utils.PlotRLC.y_sim_new.squeeze", "plotting_utils.PlotRLC.y_EKF_pred_eval.squeeze", "plotting_utils.PlotRLC.y_lin_new.squeeze"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.r_squared"], ["", "def", "plot_EKF_eval_zoom", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "# 250:550", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "# sns.lineplot(ax=axes, data=self.y_EKF_true_eval.squeeze()[100:450], label=\"Ground Truth\",", "\n", "#              linewidth=0.75)", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_new", ".", "squeeze", "(", ")", "[", "100", ":", "250", "]", ",", "label", "=", "\"Ground Truth\"", ",", "\n", "linewidth", "=", "1.5", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_sim_new", ".", "squeeze", "(", ")", "[", "100", ":", "250", "]", ",", "label", "=", "\"Nominal\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "1.5", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_EKF_pred_eval", ".", "squeeze", "(", ")", "[", "100", ":", "250", "]", ",", "label", "=", "\"EKF\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "1.5", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_lin_new", ".", "squeeze", "(", ")", "[", "100", ":", "250", "]", ",", "label", "=", "\"JFR\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "1.5", ")", "\n", "axes", ".", "axvline", "(", "0", ",", "ls", "=", "'--'", ",", "color", "=", "'black'", ",", "linewidth", "=", "1.5", ",", "alpha", "=", ".75", ")", "\n", "axes", ".", "axvline", "(", "149", ",", "ls", "=", "'--'", ",", "color", "=", "'black'", ",", "linewidth", "=", "1.5", ",", "alpha", "=", ".75", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{v_C (V)}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "4", ",", "loc", "=", "'lower center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n", "axes", ".", "set_ylim", "(", "[", "-", "3.0", ",", "3.0", "]", ")", "\n", "# axes.set_xticks(range(100, 450, 50))", "\n", "axes", ".", "set_xticklabels", "(", "range", "(", "80", ",", "270", ",", "20", ")", ")", "\n", "\n", "# axes.set_xlim([100, 449])", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "# R-squared metrics", "\n", "R_sq", "=", "metrics", ".", "r_squared", "(", "self", ".", "y_EKF_pred_eval", ".", "squeeze", "(", ")", ",", "self", ".", "y_EKF_true_eval", "[", "2", ":", "]", ".", "squeeze", "(", ")", ")", "\n", "print", "(", "f\"R-squared EKF prediction: {R_sq}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.RLC.loader.rlc_loader": [[11, 30], ["pandas.read_csv", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "numpy.random.randn"], "function", ["None"], ["def", "rlc_loader", "(", "dataset", ",", "dataset_type", "=", "\"nl\"", ",", "output", "=", "'V_C'", ",", "noise_std", "=", "0.1", ",", "dtype", "=", "np", ".", "float32", ",", "scale", "=", "True", ",", "n_data", "=", "-", "1", ")", ":", "\n", "    ", "filename", "=", "f\"RLC_data_{dataset}_{dataset_type}.csv\"", "\n", "df_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "filename", ")", ")", "\n", "t", "=", "np", ".", "array", "(", "df_data", "[", "[", "'time'", "]", "]", ",", "dtype", "=", "dtype", ")", "\n", "u", "=", "np", ".", "array", "(", "df_data", "[", "[", "'V_IN'", "]", "]", ",", "dtype", "=", "dtype", ")", "\n", "y", "=", "np", ".", "array", "(", "df_data", "[", "[", "output", "]", "]", ",", "dtype", "=", "dtype", ")", "\n", "x", "=", "np", ".", "array", "(", "df_data", "[", "[", "'V_C'", ",", "'I_L'", "]", "]", ",", "dtype", "=", "dtype", ")", "\n", "y", "+=", "np", ".", "random", ".", "randn", "(", "*", "y", ".", "shape", ")", "*", "noise_std", "\n", "if", "scale", ":", "\n", "        ", "u", "=", "u", "/", "100", "\n", "y", "=", "y", "/", "100", "\n", "x", "=", "x", "/", "[", "100", ",", "6", "]", "\n", "\n", "", "if", "n_data", ">", "0", ":", "\n", "        ", "t", "=", "t", "[", ":", "n_data", ",", ":", "]", "\n", "u", "=", "u", "[", ":", "n_data", ",", ":", "]", "\n", "y", "=", "y", "[", ":", "n_data", ",", ":", "]", "\n", "x", "=", "x", "[", ":", "n_data", ",", ":", "]", "\n", "", "return", "t", ",", "u", ",", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.models.LSTMWrapper.__init__": [[4, 10], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["\n", "\n", "class", "WHNet", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "nb_1", "=", "8", ",", "na_1", "=", "8", ",", "nb_2", "=", "8", ",", "na_2", "=", "8", ")", ":", "\n", "        ", "super", "(", "WHNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nb_1", "=", "nb_1", "\n", "self", ".", "na_1", "=", "na_1", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.models.LSTMWrapper.forward": [[11, 14], ["models.LSTMWrapper.lstm", "models.LSTMWrapper.view"], "methods", ["None"], ["self", ".", "nb_2", "=", "nb_2", "\n", "self", ".", "na_2", "=", "na_2", "\n", "self", ".", "G1", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_1", ",", "n_a", "=", "self", ".", "na_1", ",", "n_k", "=", "1", ")", "\n", "self", ".", "F_nl", "=", "SisoStaticNonLinearity", "(", "n_hidden", "=", "10", ",", "activation", "=", "'tanh'", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.models.LSTMWrapperSingleOutput.__init__": [[17, 24], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["", "def", "forward", "(", "self", ",", "u", ")", ":", "\n", "        ", "y1_lin", "=", "self", ".", "G1", "(", "u", ")", "\n", "y1_nl", "=", "self", ".", "F_nl", "(", "y1_lin", ")", "# B, T, C1", "\n", "y2_lin", "=", "self", ".", "G2", "(", "y1_nl", ")", "# B, T, C2", "\n", "\n", "return", "y2_lin", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.models.LSTMWrapperSingleOutput.set_batch_size": [[25, 27], ["None"], "methods", ["None"], ["", "", "class", "WHNet3", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "nb_1", "=", "3", ",", "na_1", "=", "3", ",", "nb_2", "=", "3", ",", "na_2", "=", "3", ")", ":", "\n", "        ", "super", "(", "WHNet3", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.models.LSTMWrapperSingleOutput.forward": [[28, 32], ["u_in_f.view", "models.LSTMWrapperSingleOutput.lstm", "y_out[].view"], "methods", ["None"], ["self", ".", "nb_1", "=", "nb_1", "\n", "self", ".", "na_1", "=", "na_1", "\n", "self", ".", "nb_2", "=", "nb_2", "\n", "self", ".", "na_2", "=", "na_2", "\n", "self", ".", "G1", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_1", ",", "n_a", "=", "self", ".", "na_1", ",", "n_k", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.models.LSTMWrapperSingleOutput.estimate_state": [[33, 39], ["u_train.view", "y_train.view", "models.LSTMWrapperSingleOutput.lstm.estimate_state"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.estimate_state"], ["self", ".", "F_nl", "=", "SisoStaticNonLinearity", "(", "n_hidden", "=", "10", ",", "activation", "=", "'tanh'", ")", "\n", "self", ".", "G2", "=", "SisoLinearDynamicalOperator", "(", "n_b", "=", "self", ".", "nb_2", ",", "n_a", "=", "self", ".", "na_2", ",", "n_k", "=", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "u", ")", ":", "\n", "        ", "y1_lin", "=", "self", ".", "G1", "(", "u", ")", "\n", "y1_nl", "=", "self", ".", "F_nl", "(", "y1_lin", ")", "# B, T, C1", "\n", "y2_lin", "=", "self", ".", "G2", "(", "y1_nl", ")", "# B, T, C2", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.cstr_transfer_GP_mask.ExactGPModel.__init__": [[14, 18], ["super().__init__", "gpytorch.means.ConstantMean", "finite_ntk.lazy.NTK"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "model_egp", ",", "use_linearstrategy", "=", "False", ")", ":", "\n", "        ", "super", "(", "ExactGPModel", ",", "self", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "self", ".", "covar_module", "=", "finite_ntk", ".", "lazy", ".", "NTK", "(", "model", "=", "model_egp", ",", "use_linearstrategy", "=", "use_linearstrategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.cstr_transfer_GP_mask.ExactGPModel.forward": [[19, 23], ["cstr_transfer_GP_mask.ExactGPModel.mean_module", "cstr_transfer_GP_mask.ExactGPModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.cstr_transfer_GP_mask.ExactGPModel.update_covar": [[24, 26], ["finite_ntk.lazy.NTK"], "methods", ["None"], ["", "def", "update_covar", "(", "self", ",", "model_c", ")", ":", "\n", "        ", "self", ".", "covar_module", "=", "finite_ntk", ".", "lazy", ".", "NTK", "(", "model", "=", "model_c", ",", "use_linearstrategy", "=", "use_linearstrategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.__init__": [[5, 13], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_context", ",", "n_inputs", ",", "is_estimator", "=", "True", ")", ":", "\n", "        ", "super", "(", "OpenLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_context", "=", "n_context", "# 25", "\n", "self", ".", "model", "=", "nn", ".", "LSTM", "(", "input_size", "=", "2", ",", "hidden_size", "=", "16", ",", "proj_size", "=", "2", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "n_inputs", "=", "n_inputs", "\n", "self", ".", "hn", "=", "None", "\n", "self", ".", "cn", "=", "None", "\n", "self", ".", "is_estimator", "=", "is_estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.forward": [[14, 26], ["open_lstm.OpenLSTM.estimate_state", "open_lstm.OpenLSTM.predict_state", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "open_lstm.OpenLSTM.model"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.estimate_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.predict_state"], ["", "def", "forward", "(", "self", ",", "u_train", ")", ":", "\n", "        ", "if", "self", ".", "is_estimator", ":", "\n", "            ", "y1", "=", "self", ".", "estimate_state", "(", "u_train", "[", ":", ",", ":", ",", ":", "self", ".", "n_inputs", "]", ",", "\n", "u_train", "[", ":", ",", ":", ",", "self", ".", "n_inputs", ":", "]", ",", "self", ".", "n_context", ")", "\n", "\n", "y2", "=", "self", ".", "predict_state", "(", "u_train", "[", ":", ",", ":", ",", ":", "self", ".", "n_inputs", "]", ",", "self", ".", "n_context", ")", "\n", "\n", "y_sim", "=", "torch", ".", "cat", "(", "(", "y1", ",", "y2", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "state", "=", "(", "self", ".", "hn", ",", "self", ".", "cn", ")", "\n", "y_sim", ",", "_", "=", "self", ".", "model", "(", "u_train", ",", "state", ")", "\n", "", "return", "y_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.estimate_state": [[27, 43], ["torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "open_lstm.OpenLSTM.model", "y_est.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "u_train[].unsqueeze", "y_train[].view", "u_train.size", "u_train.size"], "methods", ["None"], ["", "def", "estimate_state", "(", "self", ",", "u_train", ",", "y_train", ",", "nstep", ")", ":", "\n", "        ", "y_est", "=", "[", "]", "\n", "hn", "=", "torch", ".", "zeros", "(", "1", ",", "u_train", ".", "size", "(", ")", "[", "0", "]", ",", "2", ")", ".", "requires_grad_", "(", ")", "\n", "cn", "=", "torch", ".", "zeros", "(", "1", ",", "u_train", ".", "size", "(", ")", "[", "0", "]", ",", "16", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nstep", ")", ":", "\n", "# Feed in the known output to estimate state", "\n", "# Hidden state (hn) stores the previous outputq", "\n", "# For state estimation, we feed in the known output value", "\n", "            ", "out", ",", "(", "hn", ",", "cn", ")", "=", "self", ".", "model", "(", "u_train", "[", ":", ",", "i", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "y_train", "[", ":", ",", "i", ",", ":", "]", ".", "view", "(", "hn", ".", "shape", ")", ",", "cn", ")", ")", "\n", "y_est", ".", "append", "(", "out", ")", "\n", "\n", "", "y_sim", "=", "torch", ".", "cat", "(", "y_est", ",", "dim", "=", "1", ")", "\n", "self", ".", "hn", ",", "self", ".", "cn", "=", "(", "hn", ",", "cn", ")", "\n", "return", "y_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.predict_state": [[44, 48], ["open_lstm.OpenLSTM.model"], "methods", ["None"], ["", "def", "predict_state", "(", "self", ",", "u_train", ",", "nstep", ")", ":", "\n", "        ", "state", "=", "(", "self", ".", "hn", ",", "self", ".", "cn", ")", "\n", "y_sim", ",", "_", "=", "self", ".", "model", "(", "u_train", "[", ":", ",", "nstep", ":", ",", ":", "]", ",", "state", ")", "\n", "return", "y_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.open_lstm.OpenLSTM.get_model": [[49, 51], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.plotting_utils.PlotDyno.__init__": [[11, 56], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "plotting_utils.PlotDyno.y_torch_new_0[].detach().numpy", "torch.tensor", "plotting_utils.PlotDyno.y_torch_new_1[].detach().numpy", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "numpy.load().astype", "plotting_utils.PlotDyno.y_eval_0[].reshape", "plotting_utils.PlotDyno.y_eval_1[].reshape", "plotting_utils.PlotDyno.y_torch_new_0[].detach", "plotting_utils.PlotDyno.y_torch_new_1[].detach", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["class", "PlotRLC", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Parameters", "\n", "        ", "self", ".", "batch_size", "=", "1", "\n", "self", ".", "t", ",", "self", ".", "u", ",", "self", ".", "y", ",", "self", ".", "x", "=", "rlc_loader", "(", "\"train\"", ",", "\"nl\"", ",", "noise_std", "=", "0.1", ")", "\n", "self", ".", "ts", "=", "self", ".", "t", "[", "1", ",", "0", "]", "-", "self", ".", "t", "[", "0", ",", "0", "]", "\n", "\n", "# Load training results", "\n", "self", ".", "x_true_torch_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_x_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_sim_torch_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_x_sim.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "u_torch_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_u_val.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_hidden_fit_np", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_train_x_hidden.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "LOSS", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_loss.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "LOSS_CONSISTENCY", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_consist_loss.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "LOSS_FIT", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"01_fit_loss.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Load testing results", "\n", "self", ".", "time_val_us", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"02_test_time_val.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_true_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"02_test_x_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "x_sim", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"02_test_x_sim.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Load evaluation results after transfer", "\n", "self", ".", "y_new", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_y.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_sim_new", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_y_sim.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_lin_new", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_y_lin.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "\"shapes: \"", ",", "self", ".", "y_new", ".", "shape", ",", "self", ".", "y_sim_new", ".", "shape", ",", "self", ".", "y_lin_new", ".", "shape", ")", "\n", "\n", "# Load EKF transfer and evaluation results", "\n", "self", ".", "y_EKF_true", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"03_transfer_EKF_y_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_EKF_pred", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"03_transfer_EKF_y_pred.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Load EKF eval and evaluation results", "\n", "self", ".", "y_EKF_true_eval", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_EKF_y_true.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y_EKF_pred_eval", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"RLC_SS_NL\"", ",", "\"04_eval_EKF_y_pred.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "", "def", "plot_training", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "x_true_torch_val", "[", ":", ",", "0", "]", ",", "label", "=", "\"Ground truth\"", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "x_sim_torch_val", "[", ":", ",", "0", "]", ",", "label", "=", "\"Estimation\"", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "xlabel", "=", "r'$\\mathrm{Samples}$'", ",", "ylabel", "=", "r'$\\mathrm{v_C}$'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "2", ",", "loc", "=", "'lower center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.plotting_utils.PlotDyno.plot_algo_compare": [[58, 94], ["matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].axvline", "ax[].set_ylabel", "ax[].set_xlabel", "ax[].grid", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].axvline", "ax[].set_ylabel", "ax[].set_xlabel", "ax[].legend", "ax[].grid", "fig.tight_layout", "matplotlib.savefig", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "def", "plot_train_loss", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "LOSS", ",", "label", "=", "\"Total loss\"", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "LOSS_CONSISTENCY", ",", "label", "=", "\"Consistency loss\"", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "LOSS_FIT", ",", "label", "=", "\"Fitting loss\"", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "'Loss (-)'", ",", "xlabel", "=", "'Iterations (-)'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "10", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "def", "plot_test", "(", "self", ")", ":", "\n", "        ", "t_plot_start", "=", "0.0e-3", "\n", "t_plot_end", "=", "t_plot_start", "+", "1.0", "# From 02_RLC_test.py", "\n", "idx_plot_start", "=", "int", "(", "t_plot_start", "//", "self", ".", "ts", ")", "\n", "idx_plot_end", "=", "int", "(", "t_plot_end", "//", "self", ".", "ts", ")", "\n", "\n", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axes", ".", "plot", "(", "self", ".", "time_val_us", "[", "idx_plot_start", ":", "idx_plot_end", "]", ",", "\n", "self", ".", "x_true_val", "[", "idx_plot_start", ":", "idx_plot_end", ",", "0", "]", ",", "label", "=", "'$v_C$'", ")", "\n", "axes", ".", "plot", "(", "self", ".", "time_val_us", "[", "idx_plot_start", ":", "idx_plot_end", "]", ",", "\n", "self", ".", "x_sim", "[", "idx_plot_start", ":", "idx_plot_end", ",", "0", "]", ",", "\n", "linestyle", "=", "'dashed'", ",", "label", "=", "r'$\\hat{v}^{\\mathrm{sim}}_C$'", ")", "\n", "axes", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "axes", ".", "grid", "(", "True", ")", "\n", "axes", ".", "set_xlabel", "(", "r'$\\mathrm{\\mu}_s$'", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.plotting_utils.PlotDyno.plot_algo_compare_sns": [[95, 131], ["numpy.arange", "numpy.vstack", "numpy.vstack", "print", "pandas.DataFrame", "pandas.DataFrame", "seaborn.set_style", "matplotlib.subplots", "seaborn.lineplot", "axes[].legend", "axes[].set", "axes[].axvline", "seaborn.lineplot", "axes[].get_legend_handles_labels", "axes[].legend", "axes[].axvline", "axes[].legend", "axes[].set", "fig.tight_layout", "matplotlib.savefig", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["axes", ".", "set_ylabel", "(", "\"Voltage (V)\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "def", "plot_eval", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Ground Truth\"", ",", "color", "=", "'k'", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y_sim_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Before adaptation\"", ",", "color", "=", "'b'", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y_lin_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Linear adaptation\"", ",", "color", "=", "'r'", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{Voltage (v_C)}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "def", "plot_inputs", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "u_torch_val", ".", "squeeze", "(", ")", ",", "label", "=", "\"$\\mathrm{v_{in}}$\"", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{Voltage (v_{in})}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "10", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "def", "plot_outputs", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "self", ".", "y", ".", "squeeze", "(", ")", ",", "label", "=", "\"$\\mathrm{v_{C}}$\"", ",", "linewidth", "=", "0.75", ")", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{Voltage (v_{C})}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "3", ",", "loc", "=", "'upper center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "10", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.plotting_utils.PlotDyno.compare_input_seq": [[132, 152], ["print", "matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].set_ylabel", "ax[].set_xlabel", "ax[].grid", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].set_xlabel", "ax[].set_ylabel", "ax[].legend", "ax[].grid", "fig.tight_layout"], "methods", ["None"], ["\n", "", "def", "plot_eval_errors", "(", "self", ")", ":", "\n", "        ", "err_lin", "=", "[", "]", "\n", "err_sim", "=", "[", "]", "\n", "y_new", "=", "self", ".", "y_new", ".", "squeeze", "(", ")", "\n", "for", "i", "in", "range", "(", "y_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "e", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "y_new", "[", ":", "i", "]", "-", "self", ".", "y_lin_new", "[", ":", "i", "]", ")", "**", "2", ")", ")", "\n", "e2", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "y_new", "[", ":", "i", "]", "-", "self", ".", "y_sim_new", "[", ":", "i", "]", ")", "**", "2", ")", ")", "\n", "err_lin", ".", "append", "(", "e", ")", "\n", "err_sim", ".", "append", "(", "e2", ")", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axes", ".", "plot", "(", "err_lin", ",", "label", "=", "\"Linear adaptation\"", ")", "\n", "axes", ".", "plot", "(", "err_sim", ",", "label", "=", "\"Before adaptation\"", ")", "\n", "axes", ".", "set_ylabel", "(", "\"RMSE\"", ")", "\n", "axes", ".", "set_xlabel", "(", "\"Number of samples\"", ")", "\n", "axes", ".", "legend", "(", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "def", "plot_EKF_eval", "(", "self", ")", ":", "\n", "        ", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.CSTR.plotting_utils.PlotDyno.compare_output_seq": [[153, 173], ["print", "matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].set_ylabel", "ax[].set_xlabel", "ax[].grid", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].set_xlabel", "ax[].set_ylabel", "ax[].legend", "ax[].grid", "fig.tight_layout"], "methods", ["None"], ["fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_new", "[", "2", ":", "]", ".", "squeeze", "(", ")", ",", "label", "=", "\"Ground Truth\"", ",", "\n", "linewidth", "=", "0.5", ")", "\n", "axes", ".", "axvline", "(", "100", ",", "ls", "=", "'--'", ",", "color", "=", "'black'", ",", "linewidth", "=", "1.5", ",", "alpha", "=", ".75", ")", "\n", "axes", ".", "axvline", "(", "250", ",", "ls", "=", "'--'", ",", "color", "=", "'black'", ",", "linewidth", "=", "1.5", ",", "alpha", "=", ".75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_sim_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"Nominal\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_EKF_pred_eval", ".", "squeeze", "(", ")", ",", "label", "=", "\"EKF\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "sns", ".", "lineplot", "(", "ax", "=", "axes", ",", "data", "=", "100", "*", "self", ".", "y_lin_new", ".", "squeeze", "(", ")", ",", "label", "=", "\"JFR\"", ",", "\n", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "0.75", ")", "\n", "\n", "handles", ",", "labels", "=", "axes", ".", "get_legend_handles_labels", "(", ")", "\n", "axes", ".", "legend", "(", "[", "]", ",", "[", "]", ",", "frameon", "=", "False", ")", "\n", "axes", ".", "set", "(", "ylabel", "=", "r'$\\mathrm{v_C (V)}$'", ",", "xlabel", "=", "'Samples'", ")", "\n", "axes", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "4", ",", "loc", "=", "'lower center'", ",", "frameon", "=", "False", ",", "fontsize", "=", "8", ")", "\n", "axes", ".", "set_ylim", "(", "[", "-", "3.0", ",", "3.0", "]", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "# R-squared metrics", "\n", "R_sq", "=", "metrics", ".", "r_squared", "(", "self", ".", "y_EKF_pred_eval", ".", "squeeze", "(", ")", ",", "self", ".", "y_EKF_true_eval", "[", "2", ":", "]", ".", "squeeze", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_template.WorldBase.__init__": [[14, 35], ["object.__init__", "worlds.utils.tensor().to", "norm.clone().detach().pow().to", "worlds.utils.tensor", "norm.clone().detach().pow", "norm.clone().detach", "norm.clone"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "dt", "=", "1", "/", "80", ",", "normalization", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "\"\"\" Initialization; see `InvertedPendulumWorld`.\n\n        Parameters\n        ----------\n        dt : float, optional\n             The sampling time.\n        normalization : tuple, optional\n                        A tuple (Tx, Tu) of arrays used to normalize the state and actions. It\n                        is so that diag(Tx) *x_norm = x and diag(Tu) * u_norm = u.\n        device : string, optional\n                 Device for computation.\n        \"\"\"", "\n", "super", "(", "WorldBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "dt", "=", "dt", "\n", "\n", "self", ".", "normalization", "=", "normalization", "\n", "if", "normalization", "is", "not", "None", ":", "\n", "            ", "self", ".", "normalization", "=", "[", "tensor", "(", "norm", ")", ".", "to", "(", "device", ")", "for", "norm", "in", "self", ".", "normalization", "]", "\n", "self", ".", "inv_norm", "=", "[", "norm", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "pow", "(", "-", "1", ")", ".", "to", "(", "device", ")", "for", "norm", "in", "self", ".", "normalization", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_template.WorldBase.normalize": [[36, 49], ["map", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "normalize", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"Normalize states and actions.\n        \"\"\"", "\n", "if", "self", ".", "normalization", "is", "None", ":", "\n", "            ", "return", "state", ",", "action", "\n", "\n", "", "Tx_inv", ",", "Tu_inv", "=", "map", "(", "torch", ".", "diag", ",", "self", ".", "inv_norm", ")", "\n", "state", "=", "torch", ".", "matmul", "(", "state", ",", "Tx_inv", ")", "\n", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "action", "=", "torch", ".", "matmul", "(", "action", ",", "Tu_inv", ")", "\n", "\n", "", "return", "state", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_template.WorldBase.denormalize": [[50, 63], ["map", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"De-normalize states and actions.\n        \"\"\"", "\n", "if", "self", ".", "normalization", "is", "None", ":", "\n", "            ", "return", "state", ",", "action", "\n", "\n", "", "Tx", ",", "Tu", "=", "map", "(", "torch", ".", "diag", ",", "self", ".", "normalization", ")", "\n", "\n", "state", "=", "torch", ".", "matmul", "(", "state", ",", "Tx", ")", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "action", "=", "torch", ".", "matmul", "(", "action", ",", "Tu", ")", "\n", "\n", "", "return", "state", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_template.WorldBase.linearize": [[65, 77], ["None"], "methods", ["None"], ["", "def", "linearize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the linearized system.\n\n        Returns\n        -------\n        a : ndarray\n            The state matrix.\n        b : ndarray\n            The action matrix.\n\n        \"\"\"", "\n", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_template.WorldBase.__call__": [[78, 99], ["world_template.WorldBase.denormalize", "world_template.WorldBase.normalize"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize"], ["", "def", "__call__", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"Compute the state time-derivative.\n\n        Parameters\n        ----------\n        state: ndarray or Tensor\n            normalized states [n_batch, n_states].\n        action: ndarray or Tensor\n            normalized actions [n_batch, n_inputs].\n\n        Returns\n        -------\n        state_next: Tensor the next state prediction [n_batch, n_states].\n\n        \"\"\"", "\n", "state", ",", "action", "=", "self", ".", "denormalize", "(", "state", ",", "action", ")", "\n", "\n", "state_next", "=", "state", "# Put your simulation here!", "\n", "state_next", "=", "self", ".", "normalize", "(", "state_next", ",", "action", ")", "[", "0", "]", "\n", "\n", "return", "state_next", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_template.WorldBase.closed_loop_sim": [[100, 131], ["range", "numpy.array", "isinstance", "world_template.WorldBase.__call__", "numpy.array.append", "isinstance", "world_template.WorldBase.cpu().view().numpy", "worlds.utils.tensor().to().t", "K_", "Exception", "world_template.WorldBase.cpu().view", "worlds.utils.tensor().to", "world_template.WorldBase.cpu", "worlds.utils.tensor"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_inverted_pendulum.InvertedPendulumWorld.__call__"], ["", "def", "closed_loop_sim", "(", "self", ",", "x_0", ",", "K_", ",", "n_steps", ")", ":", "\n", "        ", "\"\"\"Simulate the system in a closed loop fasion for input number of steps.\n\n        Parameters\n        ----------\n        x_0: torch.Tensor\n             normalized initial states [n_batch, n_states].\n        K_: np.array or torch.nn.Module\n            Control law governing the closed loop system simulation\n        n_steps: int\n                 Number of timesteps to simulate system for.\n\n        Returns\n        -------\n        x_list: np.array\n                Returns the simulated trajectories [n_batch, n_states, n_steps]\n        \"\"\"", "\n", "x_", "=", "x_0", "\n", "x_list", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "if", "isinstance", "(", "K_", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "u", "=", "x_", "@", "tensor", "(", "-", "K_", ")", ".", "to", "(", "self", ".", "device", ")", ".", "t", "(", ")", "\n", "", "elif", "isinstance", "(", "K_", ",", "nn", ".", "Module", ")", ":", "\n", "                ", "u", "=", "K_", "(", "x_", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Controller type not supported!'", ")", "\n", "# simulate system with computed input", "\n", "", "x_", "=", "self", ".", "__call__", "(", "x_", ",", "u", ")", "\n", "x_list", ".", "append", "(", "x_", ".", "cpu", "(", ")", ".", "view", "(", "2", ")", ".", "numpy", "(", ")", ")", "\n", "", "x_list", "=", "np", ".", "array", "(", "x_list", ")", "\n", "return", "x_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.__init__": [[17, 68], ["worlds.world_template.WorldBase.__init__", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "mass", ":", "list", ",", "length", ":", "list", ",", "center_of_mass", ":", "list", "=", "None", ",", "friction", ":", "list", "=", "[", "0", ",", "0", "]", ",", "dt", "=", "0.01", ",", "\n", "input_saturation", "=", "None", ",", "state_saturation", "=", "None", ",", "normalization", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "\"\"\" Double pendulum initialization.\n\n        Parameters\n        ----------\n        mass: list\n            The masses of two links.\n        length: list\n            The lengths of two links.\n        center_of_mass: list\n            The center of mass disntances from the hinge.\n        friction: list\n            The coefficient of friction of the hinges\n        dt: float, optional\n            The sampling time.\n        input_saturation: List[np.array], optional\n            The saturation values for input to the actuators.\n        state_saturation: List[np.array], optional\n            The saturation values for state of the system\n        device: str, optional\n            The computation device for pyTorch tensors.\n        \"\"\"", "\n", "super", "(", "DoublePendulumWorld", ",", "self", ")", ".", "__init__", "(", "dt", ",", "normalization", ",", "device", ")", "\n", "# set masses of links", "\n", "self", ".", "mass1", "=", "mass", "[", "0", "]", "\n", "self", ".", "mass2", "=", "mass", "[", "1", "]", "\n", "# set lengths of links", "\n", "self", ".", "length1", "=", "length", "[", "0", "]", "\n", "self", ".", "length2", "=", "length", "[", "1", "]", "\n", "# set center of mass of links", "\n", "if", "center_of_mass", "is", "None", ":", "\n", "            ", "self", ".", "com1", "=", "self", ".", "length1", "/", "2", "\n", "self", ".", "com2", "=", "self", ".", "length2", "/", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "com1", "=", "center_of_mass", "[", "0", "]", "\n", "self", ".", "com2", "=", "center_of_mass", "[", "1", "]", "\n", "# set friction coefficient of links", "\n", "", "self", ".", "mu1", "=", "friction", "[", "0", "]", "\n", "self", ".", "mu2", "=", "friction", "[", "1", "]", "\n", "# set the saturation level of input for links", "\n", "if", "input_saturation", "is", "None", ":", "\n", "            ", "self", ".", "input_saturation", "=", "[", "np", ".", "asarray", "(", "[", "-", "1", ",", "1", "]", ")", ",", "np", ".", "asarray", "(", "[", "-", "1", ",", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_saturation", "=", "input_saturation", "\n", "# set the saturation level of state for links", "\n", "", "self", ".", "state_saturation", "=", "state_saturation", "\n", "# set constants for the environment", "\n", "self", ".", "gravity", "=", "9.81", "\n", "self", ".", "n_inputs", "=", "2", "\n", "self", ".", "n_states", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.inertia1": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inertia1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mass1", "*", "self", ".", "length1", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.inertia2": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inertia2", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mass2", "*", "self", ".", "length2", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.__call__": [[77, 114], ["world_double_pendulum.DoublePendulumWorld.denormalize", "world_double_pendulum.DoublePendulumWorld._get_state_derivatives", "world_double_pendulum.DoublePendulumWorld.wrap", "world_double_pendulum.DoublePendulumWorld.wrap", "world_double_pendulum.DoublePendulumWorld.normalize", "world_double_pendulum.DoublePendulumWorld.view"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld._get_state_derivatives", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.wrap", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.wrap", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize"], ["", "def", "__call__", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"Compute the state time-derivative.\n\n        Parameters\n        ----------\n        state: ndarray or Tensor\n            normalized states [n_natches, n_states].\n        action: ndarray or Tensor\n            normalized actions [n_batches, n_inputs].\n\n        Returns\n        -------\n        state_next: Tensor\n            The next normalized state of the system\n\n        \"\"\"", "\n", "# saturate input before denormalization", "\n", "# action_clipped = saturate(action, self.input_saturation)", "\n", "# denormalize the state and action", "\n", "state", ",", "action", "=", "self", ".", "denormalize", "(", "state", ",", "action", ")", "\n", "# get the state derivatives", "\n", "state_derivative", "=", "self", ".", "_get_state_derivatives", "(", "state", ",", "action", ")", "\n", "# perform euler intergration", "\n", "state_next", "=", "state", "+", "self", ".", "dt", "*", "state_derivative", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "# clip state", "\n", "# if self.state_saturation is not None:", "\n", "#     state_next_clipped = saturate(state_next, self.state_saturation)", "\n", "# else:", "\n", "#     state_next_clipped = state_next", "\n", "\n", "# wrap angle from -pi to pi", "\n", "state_next", "[", ":", ",", "0", "]", "=", "self", ".", "wrap", "(", "state_next", "[", ":", ",", "0", "]", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "state_next", "[", ":", ",", "2", "]", "=", "self", ".", "wrap", "(", "state_next", "[", ":", ",", "2", "]", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "# normalize the next state", "\n", "state_next", "=", "self", ".", "normalize", "(", "state_next", ",", "action", ")", "[", "0", "]", "\n", "\n", "return", "state_next", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld._get_state_derivatives": [[115, 177], ["torch.chunk", "torch.chunk", "worlds.utils.tensor().repeat", "torch.cat", "torch.cat", "torch.stack", "torch.cat", "torch.matmul", "torch.cat", "torch.inverse", "torch.cat.view", "torch.cos", "torch.cos", "torch.cos", "worlds.utils.tensor", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "def", "_get_state_derivatives", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\" Returns the derivative of the dynamics with respect to state and action.\n\n        Parameters\n        ----------\n        state: ndarray or Tensor\n            denormalized states [n_batches, n_states].\n        action: ndarray or Tensor\n            denormalized actions [n_batches, n_inputs].\n\n        Returns\n        -------\n        state_derivatives: Tensor\n            State derivatives of the system [n_batches, n_states]\n        \"\"\"", "\n", "# split state into constituents", "\n", "theta1", ",", "theta1_dot", ",", "theta2", ",", "theta2_dot", "=", "torch", ".", "chunk", "(", "state", ",", "self", ".", "n_states", ",", "dim", "=", "1", ")", "\n", "# split action into constituents", "\n", "tau1", ",", "tau2", "=", "torch", ".", "chunk", "(", "action", ",", "self", ".", "n_inputs", ",", "dim", "=", "1", ")", "\n", "\n", "# compute elements of the A matrix", "\n", "A_11", "=", "self", ".", "inertia1", "+", "self", ".", "mass1", "*", "self", ".", "com1", "**", "2", "+", "self", ".", "inertia2", "+", "self", ".", "mass2", "*", "self", ".", "length1", "**", "2", "+", "self", ".", "mass2", "*", "self", ".", "com2", "**", "2", "+", "2", "*", "self", ".", "mass2", "*", "self", ".", "length1", "*", "self", ".", "com2", "*", "torch", ".", "cos", "(", "theta1", ")", "\n", "A_12", "=", "self", ".", "inertia2", "+", "self", ".", "mass2", "*", "self", ".", "com2", "**", "2", "+", "self", ".", "mass2", "*", "self", ".", "length1", "*", "self", ".", "com2", "*", "torch", ".", "cos", "(", "theta2", ")", "\n", "A_21", "=", "self", ".", "inertia2", "+", "self", ".", "mass2", "*", "self", ".", "com2", "**", "2", "+", "self", ".", "mass2", "*", "self", ".", "length1", "*", "self", ".", "com2", "*", "torch", ".", "cos", "(", "theta2", ")", "\n", "A_22", "=", "tensor", "(", "self", ".", "inertia2", "+", "self", ".", "mass2", "*", "self", ".", "com2", "**", "2", ")", ".", "repeat", "(", "A_12", ".", "shape", ")", "\n", "# compute elements of the b vector", "\n", "b_1", "=", "tau1", "-", "self", ".", "mu1", "*", "theta1_dot", "+", "self", ".", "mass2", "*", "self", ".", "gravity", "*", "self", ".", "com2", "*", "torch", ".", "sin", "(", "theta1", "+", "theta2", ")", "+", "self", ".", "mass2", "*", "self", ".", "gravity", "*", "self", ".", "length1", "*", "torch", ".", "sin", "(", "theta1", ")", "+", "self", ".", "mass1", "*", "self", ".", "gravity", "*", "self", ".", "com1", "*", "torch", ".", "sin", "(", "theta1", ")", "+", "self", ".", "mass2", "*", "self", ".", "length1", "*", "self", ".", "com2", "*", "theta2_dot", "**", "2", "*", "torch", ".", "sin", "(", "theta2", ")", "+", "2", "*", "self", ".", "mass2", "*", "self", ".", "length1", "*", "self", ".", "com2", "*", "theta1_dot", "*", "theta2_dot", "*", "torch", ".", "sin", "(", "theta2", ")", "\n", "b_2", "=", "tau2", "-", "self", ".", "mu2", "*", "theta2_dot", "+", "self", ".", "mass2", "*", "self", ".", "gravity", "*", "self", ".", "com2", "*", "torch", ".", "sin", "(", "theta1", "+", "theta2", ")", "-", "self", ".", "mass2", "*", "self", ".", "length1", "*", "self", ".", "com2", "*", "theta1_dot", "**", "2", "*", "torch", ".", "sin", "(", "theta2", ")", "\n", "\n", "# concatenate elements to form the A matrix", "\n", "A_col_1", "=", "torch", ".", "cat", "(", "(", "A_11", ",", "A_21", ")", ",", "dim", "=", "1", ")", "\n", "A_col_2", "=", "torch", ".", "cat", "(", "(", "A_12", ",", "A_22", ")", ",", "dim", "=", "1", ")", "\n", "A", "=", "torch", ".", "stack", "(", "(", "A_col_1", ",", "A_col_2", ")", ",", "dim", "=", "2", ")", "\n", "# concatenate elements to form the B matrix", "\n", "b", "=", "torch", ".", "cat", "(", "(", "b_1", ",", "b_2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# compute the second order derivative", "\n", "theta_ddot", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "A", ")", ",", "b", ".", "view", "(", "-", "1", ",", "2", ",", "1", ")", ")", "\n", "theta1_ddot", "=", "theta_ddot", "[", ":", ",", "0", "]", "\n", "theta2_ddot", "=", "theta_ddot", "[", ":", ",", "1", "]", "\n", "# concatenate to get the state derivative", "\n", "state_derivative", "=", "torch", ".", "cat", "(", "[", "theta1_dot", ",", "theta1_ddot", ",", "theta2_dot", ",", "theta2_ddot", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "state_derivative", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.visualize_frame": [[178, 232], ["int", "ax.plot", "matplotlib.patches.Circle", "matplotlib.patches.Circle", "matplotlib.patches.Circle", "ax.add_patch", "ax.add_patch", "ax.add_patch", "range", "ax.set_xlim", "ax.set_ylim", "ax.set_aspect", "matplotlib.axis", "numpy.sin", "numpy.cos", "ax.plot", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "visualize_frame", "(", "self", ",", "theta1", ",", "theta2", ",", "time_index", ",", "ax", ")", ":", "\n", "        ", "\"\"\"Make the frame to visualize the environment.\n\n        Parameters\n        ----------\n        theta1: (np.array) Trajectory angles corresponding to the first link [sim_steps]\n        theta2: (np.array) Trajectory angles corresponding to the first link [sim_steps]\n        time_index: (int) Time index in the trajectory to plot for\n        ax: Axes on which to plot the figure\n        \"\"\"", "\n", "# Convert to Cartesian coordinates of the two bob positions.", "\n", "x1", "=", "-", "self", ".", "length1", "*", "np", ".", "sin", "(", "theta1", ")", "\n", "y1", "=", "self", ".", "length1", "*", "np", ".", "cos", "(", "theta1", ")", "\n", "x2", "=", "x1", "-", "self", ".", "length2", "*", "np", ".", "sin", "(", "theta1", "+", "theta2", ")", "\n", "y2", "=", "y1", "+", "self", ".", "length2", "*", "np", ".", "cos", "(", "theta1", "+", "theta2", ")", "\n", "\n", "# Plotted bob circle radius", "\n", "radius", "=", "0.05", "\n", "# Plot a trail of the m2 bob's position for the last trail_secs seconds.", "\n", "trail_secs", "=", "1", "\n", "# This corresponds to max_trail time points.", "\n", "max_trail", "=", "int", "(", "trail_secs", "/", "self", ".", "dt", ")", "\n", "\n", "# Plot and save an image of the double pendulum configuration for time", "\n", "# point i.", "\n", "# The pendulum rods.", "\n", "ax", ".", "plot", "(", "[", "0", ",", "x1", "[", "time_index", "]", ",", "x2", "[", "time_index", "]", "]", ",", "[", "0", ",", "y1", "[", "time_index", "]", ",", "y2", "[", "time_index", "]", "]", ",", "lw", "=", "2", ",", "c", "=", "'k'", ")", "\n", "# Circles representing the anchor point of rod 1, and bobs 1 and 2.", "\n", "c0", "=", "Circle", "(", "(", "0", ",", "0", ")", ",", "radius", "/", "2", ",", "fc", "=", "'k'", ",", "zorder", "=", "10", ")", "\n", "c1", "=", "Circle", "(", "(", "x1", "[", "time_index", "]", ",", "y1", "[", "time_index", "]", ")", ",", "radius", ",", "fc", "=", "'b'", ",", "ec", "=", "'b'", ",", "zorder", "=", "10", ")", "\n", "c2", "=", "Circle", "(", "(", "x2", "[", "time_index", "]", ",", "y2", "[", "time_index", "]", ")", ",", "radius", ",", "fc", "=", "'r'", ",", "ec", "=", "'r'", ",", "zorder", "=", "10", ")", "\n", "ax", ".", "add_patch", "(", "c0", ")", "\n", "ax", ".", "add_patch", "(", "c1", ")", "\n", "ax", ".", "add_patch", "(", "c2", ")", "\n", "\n", "# The trail will be divided into ns segments and plotted as a fading line.", "\n", "ns", "=", "20", "\n", "s", "=", "max_trail", "//", "ns", "\n", "\n", "for", "j", "in", "range", "(", "ns", ")", ":", "\n", "            ", "imin", "=", "time_index", "-", "(", "ns", "-", "j", ")", "*", "s", "\n", "if", "imin", "<", "0", ":", "\n", "                ", "continue", "\n", "", "imax", "=", "imin", "+", "s", "+", "1", "\n", "# The fading looks better if we square the fractional length along the", "\n", "# trail.", "\n", "alpha", "=", "(", "j", "/", "ns", ")", "**", "2", "\n", "ax", ".", "plot", "(", "x2", "[", "imin", ":", "imax", "]", ",", "y2", "[", "imin", ":", "imax", "]", ",", "c", "=", "'r'", ",", "solid_capstyle", "=", "'butt'", ",", "lw", "=", "2", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Centre the image on the fixed anchor point, and ensure the axes are equal", "\n", "", "ax", ".", "set_xlim", "(", "-", "self", ".", "length1", "-", "self", ".", "length2", "-", "radius", ",", "self", ".", "length1", "+", "self", ".", "length2", "+", "radius", ")", "\n", "ax", ".", "set_ylim", "(", "-", "self", ".", "length1", "-", "self", ".", "length2", "-", "radius", ",", "self", ".", "length1", "+", "self", ".", "length2", "+", "radius", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ",", "adjustable", "=", "'box'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_double_pendulum.DoublePendulumWorld.wrap": [[233, 248], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "wrap", "(", "x", ",", "min_value", ",", "max_value", ")", ":", "\n", "        ", "\"\"\"Wraps ``x``  around the coordinate system defined by (min_value, max_value).\n        For example, min_value = -180, max_value = 180 (degrees), x = 360 --> returns 0.\n\n        :param x: a scalar\n        :param min_value: minimum possible value in range\n        :param min_value: maximum possible value in range\n        \"\"\"", "\n", "diff", "=", "max_value", "-", "min_value", "\n", "while", "x", ">", "max_value", ":", "\n", "            ", "x", "=", "x", "-", "diff", "\n", "", "while", "x", "<", "min_value", ":", "\n", "            ", "x", "=", "x", "+", "diff", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_car_kinematics.CarKinematicsWorld.__init__": [[10, 23], ["simbl_common.worlds.world_template.WorldBase.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "dt", "=", "0.01", ",", "normalization", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "\"\"\"Initialize the CarKinematicsWorld object.\n\n        Parameters\n        ----------\n        dt: float\n            Time interval of the simulation.\n        normalization: list\n            Whether the normalization is enabled or not.\n        device: str\n            Where will the tensors live ('cpu' or one of the GPUs)\n        \"\"\"", "\n", "super", "(", "CarKinematicsWorld", ",", "self", ")", ".", "__init__", "(", "dt", ",", "normalization", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_car_kinematics.CarKinematicsWorld.__call__": [[24, 59], ["isinstance", "isinstance", "world_car_kinematics.CarKinematicsWorld.denormalize", "torch.stack", "torch.from_numpy", "torch.from_numpy", "world_car_kinematics.CarKinematicsWorld.normalize", "torch.cos", "torch.sin"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize"], ["", "def", "__call__", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"Compute the next state.\n\n        Parameters\n        ----------\n        state: ndarray or Tensor\n            normalized states [n_batch, n_states].\n        action: ndarray or Tensor\n            normalized actions [n_batch, n_inputs].\n\n        Returns\n        -------\n        state_next: Tensor\n                    The next state prediction [n_batch, n_states].\n        \"\"\"", "\n", "\n", "# make sure that the instances are tensors.", "\n", "if", "isinstance", "(", "state", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", "\n", "", "if", "isinstance", "(", "action", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "action", "=", "torch", ".", "from_numpy", "(", "action", ")", "\n", "\n", "# denormalize input state and actions", "\n", "", "state", ",", "action", "=", "self", ".", "denormalize", "(", "state", ",", "action", ")", "\n", "\n", "# perform foward propogation", "\n", "state_dot", "=", "torch", ".", "stack", "(", "[", "action", "[", ":", ",", "0", "]", "*", "torch", ".", "cos", "(", "state", "[", ":", ",", "2", "]", ")", ",", "\n", "action", "[", ":", ",", "0", "]", "*", "torch", ".", "sin", "(", "state", "[", ":", ",", "2", "]", ")", ",", "\n", "state", "[", ":", ",", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "state_next", "=", "state", "+", "self", ".", "dt", "*", "state_dot", "\n", "\n", "# normalize input states and actions", "\n", "state_next", "=", "self", ".", "normalize", "(", "state_next", ",", "action", ")", "[", "0", "]", "\n", "\n", "return", "state_next", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_inverted_pendulum.InvertedPendulumWorld.__init__": [[14, 34], ["worlds.world_template.WorldBase.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "mass", ",", "length", ",", "friction", "=", "0", ",", "dt", "=", "1", "/", "80", ",", "normalization", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "\"\"\" Initialization of the class.\n\n        Parameters\n        ----------\n        mass : float\n        length : float\n        friction : float, optional\n        dt : float, optional\n            The sampling time.\n        normalization : tuple, optional\n            A tuple (Tx, Tu) of arrays used to normalize the state and actions. It\n            is so that diag(Tx) *x_norm = x and diag(Tu) * u_norm = u.\n        \"\"\"", "\n", "super", "(", "InvertedPendulumWorld", ",", "self", ")", ".", "__init__", "(", "dt", ",", "normalization", ",", "device", ")", "\n", "\n", "self", ".", "mass", "=", "mass", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "gravity", "=", "9.81", "\n", "self", ".", "friction", "=", "friction", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_inverted_pendulum.InvertedPendulumWorld.inertia": [[35, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inertia", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return inertia of the pendulum.\"\"\"", "\n", "return", "self", ".", "mass", "*", "self", ".", "length", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_inverted_pendulum.InvertedPendulumWorld.linearize": [[40, 70], ["numpy.array", "numpy.array", "scipy.signal.StateSpace", "scipy.signal.StateSpace.to_discrete", "map", "map", "numpy.linalg.multi_dot", "numpy.linalg.multi_dot", "numpy.eye", "numpy.zeros", "Tx_inv.cpu", "Tx.cpu", "Tx_inv.cpu", "Tu.cpu"], "methods", ["None"], ["", "def", "linearize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the linearized system.\n\n        Returns\n        -------\n        a : ndarray\n            The state matrix.\n        b : ndarray\n            The action matrix.\n\n        \"\"\"", "\n", "\n", "A", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "\n", "[", "self", ".", "gravity", "/", "self", ".", "length", ",", "-", "self", ".", "friction", "/", "self", ".", "inertia", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "B", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "\n", "[", "1", "/", "self", ".", "inertia", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "normalization", "is", "not", "None", ":", "\n", "            ", "Tx", ",", "Tu", "=", "map", "(", "torch", ".", "diag", ",", "self", ".", "normalization", ")", "\n", "Tx_inv", ",", "Tu_inv", "=", "map", "(", "torch", ".", "diag", ",", "self", ".", "inv_norm", ")", "\n", "\n", "A", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "Tx_inv", ".", "cpu", "(", ")", ",", "A", ",", "Tx", ".", "cpu", "(", ")", ")", ")", "\n", "B", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "Tx_inv", ".", "cpu", "(", ")", ",", "B", ",", "Tu", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "", "sys", "=", "signal", ".", "StateSpace", "(", "A", ",", "B", ",", "np", ".", "eye", "(", "2", ")", ",", "np", ".", "zeros", "(", "(", "2", ",", "1", ")", ")", ")", "\n", "sysd", "=", "sys", ".", "to_discrete", "(", "self", ".", "dt", ")", "\n", "return", "sysd", ".", "A", ",", "sysd", ".", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.world_inverted_pendulum.InvertedPendulumWorld.__call__": [[71, 103], ["world_inverted_pendulum.InvertedPendulumWorld.denormalize", "torch.chunk", "torch.stack", "torch.chunk", "torch.stack", "torch.stack.view", "world_inverted_pendulum.InvertedPendulumWorld.normalize", "torch.sin", "torch.stack.view"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize"], ["", "def", "__call__", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"Compute the state time-derivative.\n\n        Parameters\n        ----------\n        state: ndarray or Tensor\n            normalized states.\n        action: ndarray or Tensor\n            normalized actions.\n\n        Returns\n        -------\n        x_next: Tensor\n            The next normalized state of the system\n\n        \"\"\"", "\n", "state", ",", "action", "=", "self", ".", "denormalize", "(", "state", ",", "action", ")", "\n", "angle", ",", "angular_velocity", "=", "torch", ".", "chunk", "(", "state", ",", "2", ",", "dim", "=", "1", ")", "\n", "\n", "x_ddot", "=", "self", ".", "gravity", "/", "self", ".", "length", "*", "torch", ".", "sin", "(", "angle", ")", "+", "action", "/", "self", ".", "inertia", "\n", "\n", "if", "self", ".", "friction", ">", "0", ":", "\n", "            ", "x_ddot", "-=", "self", ".", "friction", "/", "self", ".", "inertia", "*", "angular_velocity", "\n", "\n", "", "state_derivative", "=", "torch", ".", "stack", "(", "[", "angular_velocity", ",", "x_ddot", "]", ",", "dim", "=", "1", ")", "\n", "# Normalize", "\n", "s", "=", "state", "+", "self", ".", "dt", "*", "state_derivative", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "s", "=", "self", ".", "normalize", "(", "s", ",", "action", ")", "[", "0", "]", "\n", "angle_", ",", "angular_velocity_", "=", "torch", ".", "chunk", "(", "s", ",", "2", ",", "dim", "=", "1", ")", "\n", "\n", "state_next", "=", "torch", ".", "stack", "(", "[", "angle_", ",", "angular_velocity_", "]", ",", "dim", "=", "1", ")", "\n", "return", "state_next", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.__init__": [[55, 62], ["mat"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Ts", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "name", "=", "'AUV_model'", "\n", "self", ".", "Ts", "=", "Ts", "\n", "self", ".", "n_inputs", "=", "2", "\n", "self", ".", "n_outputs", "=", "3", "\n", "self", ".", "zero_state", "=", "mat", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "self", ".", "current_state", "=", "self", ".", "zero_state", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.set_state": [[63, 65], ["state.copy"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.step": [[66, 71], ["worlds.AUV_model.run", "worlds.AUV_model.current_state.copy", "worlds.AUV_model.copy", "worlds.AUV_model.current_state.copy", "worlds.AUV_model.copy"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "step", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output", "=", "self", ".", "run", "(", "self", ".", "current_state", ",", "inputs", ",", "n_steps", "=", "1", ")", "\n", "system_output", "=", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "self", ".", "current_state", "=", "output", ".", "copy", "(", ")", "\n", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "system_output", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.forward": [[72, 76], ["worlds.AUV_model.run", "worlds.AUV_model.copy", "worlds.AUV_model.current_state.copy", "worlds.AUV_model.current_state.copy"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output", "=", "self", ".", "run", "(", "self", ".", "current_state", ",", "inputs", ",", "n_steps", "=", "1", ")", "\n", "self", ".", "current_state", "=", "output", ".", "copy", "(", ")", "\n", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.run": [[77, 98], ["initial_state.copy", "numpy.reshape", "state_list.append", "range", "numpy.reshape", "initial_state.copy.copy", "numpy.array", "state_list.append", "mat", "initial_state.copy.copy", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "initial_state", ",", "inputs", ",", "n_steps", ")", ":", "\n", "# Input shape [n_steps, 2]", "\n", "# Initial state shape [1, 3]", "\n", "        ", "x", "=", "initial_state", ".", "copy", "(", ")", "\n", "inputs", "=", "np", ".", "reshape", "(", "inputs", ",", "[", "inputs", ".", "shape", "[", "0", "]", ",", "inputs", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "state_list", "=", "[", "]", "\n", "state_list", ".", "append", "(", "x", ".", "copy", "(", ")", ")", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "B_matrix", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "x", "[", "0", ",", "2", "]", ")", ",", "0.", "]", ",", "\n", "[", "np", ".", "sin", "(", "x", "[", "0", ",", "2", "]", ")", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", "]", "]", ")", "\n", "d_state", "=", "(", "self", ".", "Ts", "*", "(", "B_matrix", "@", "inputs", "[", "step", "]", ")", ")", ".", "reshape", "(", "x", ".", "shape", ")", "\n", "x", "+=", "d_state", "\n", "state_list", ".", "append", "(", "x", ".", "copy", "(", ")", ")", "\n", "", "output", "=", "np", ".", "reshape", "(", "mat", "(", "state_list", "[", "-", "1", "]", ")", ",", "[", "n_steps", ",", "x", ".", "shape", "[", "1", "]", "]", ")", "\n", "# output = np.zeros([n_steps, self.n_outputs])", "\n", "# for step in range(n_steps):", "\n", "#     output[step, 0:2] = output_angle[step, 0:2]", "\n", "#     output[step, 2] = np.sin(output_angle[step, 2])", "\n", "#     output[step, 3] = np.cos(output_angle[step, 2])", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.generate_data": [[99, 138], ["numpy.random.seed", "range", "mat().astype", "numpy.zeros", "numpy.zeros", "range", "numpy.random.randn", "numpy.random.randn", "worlds.AUV_model.set_state", "range", "worlds.AUV_model.set_state", "range", "mat", "worlds.AUV_model.step", "worlds.AUV_model.step", "input_train[].copy", "input_train[].copy", "input_test[].copy", "input_test[].copy"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.step", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.step"], ["", "def", "generate_data", "(", "self", ",", "batch_size", ",", "n_steps", ")", ":", "\n", "# n_input_steps = int(n_steps/(10/self.Ts))  # one step every 1000 s", "\n", "# np.random.seed(0)", "\n", "# random_steps = (np.random.rand(batch_size, n_input_steps, self.n_inputs) - 0.5)*2", "\n", "# np.random.seed(1)", "\n", "# random_steps_test = (np.random.rand(batch_size, n_input_steps, self.n_inputs) - 0.5)*2", "\n", "# inputs = []", "\n", "# inputs_test = []", "\n", "# for i in range(batch_size):", "\n", "#     inputs_batch = []", "\n", "#     inputs_batch_test = []", "\n", "#     for j in range(n_input_steps):", "\n", "#         inputs_batch.append(np.zeros([int(n_steps / n_input_steps), self.n_inputs]) + random_steps[i, j])", "\n", "#         inputs_batch_test.append(np.zeros([int(n_steps / n_input_steps), self.n_inputs]) + random_steps_test[i, j])", "\n", "#     inputs_batch = np.concatenate(inputs_batch, axis=0)", "\n", "#     inputs_batch_test = np.concatenate(inputs_batch_test, axis=0)", "\n", "#     inputs.append(inputs_batch)", "\n", "#     inputs_test.append(inputs_batch_test)", "\n", "# input_train = np.array(inputs)", "\n", "# input_test = np.array(inputs_test)", "\n", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "input_train", "=", "np", ".", "random", ".", "randn", "(", "batch_size", ",", "n_steps", ",", "self", ".", "n_inputs", ")", "*", "0.4", "\n", "input_test", "=", "np", ".", "random", ".", "randn", "(", "batch_size", ",", "n_steps", ",", "self", ".", "n_inputs", ")", "*", "0.4", "\n", "for", "i", "in", "range", "(", "n_steps", "-", "1", ")", ":", "\n", "            ", "input_train", "[", ":", ",", "i", "+", "1", "]", "=", "0.7", "*", "input_train", "[", ":", ",", "i", "]", ".", "copy", "(", ")", "+", "0.3", "*", "input_train", "[", ":", ",", "i", "+", "1", "]", ".", "copy", "(", ")", "\n", "input_test", "[", ":", ",", "i", "+", "1", "]", "=", "0.7", "*", "input_test", "[", ":", ",", "i", "]", ".", "copy", "(", ")", "+", "0.3", "*", "input_test", "[", ":", ",", "i", "+", "1", "]", ".", "copy", "(", ")", "\n", "\n", "", "x_0", "=", "mat", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "output_train", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "n_steps", ",", "self", ".", "n_outputs", "]", ")", "\n", "output_test", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "n_steps", ",", "self", ".", "n_outputs", "]", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "self", ".", "set_state", "(", "self", ".", "zero_state", ")", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "output_train", "[", "i", ",", "step", ":", "step", "+", "1", "]", "=", "self", ".", "step", "(", "input_train", "[", "i", ",", "step", ":", "step", "+", "1", "]", ")", "\n", "", "self", ".", "set_state", "(", "self", ".", "zero_state", ")", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "output_test", "[", "i", ",", "step", ":", "step", "+", "1", "]", "=", "self", ".", "step", "(", "input_test", "[", "i", ",", "step", ":", "step", "+", "1", "]", ")", "\n", "", "", "return", "input_train", ",", "input_test", ",", "output_train", ",", "output_test", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.generate_circle": [[139, 146], ["mat().astype", "range", "numpy.ones", "output_list.append", "numpy.array", "mat", "worlds.AUV_model.run"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "generate_circle", "(", "self", ",", "batch_size", ",", "n_steps", ")", ":", "\n", "        ", "inputs", "=", "np", ".", "ones", "(", "[", "batch_size", ",", "n_steps", ",", "self", ".", "n_inputs", "]", ")", "*", "0.2", "\n", "x_0", "=", "x_0", "=", "mat", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "output_list", ".", "append", "(", "self", ".", "run", "(", "x_0", ",", "inputs", "[", "i", "]", ",", "n_steps", ")", ")", "\n", "", "return", "inputs", ",", "np", ".", "array", "(", "output_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.generate_S": [[147, 155], ["numpy.stack", "mat().astype", "range", "numpy.ones", "output_list.append", "numpy.array", "numpy.sin", "mat", "worlds.AUV_model.run", "range", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "generate_S", "(", "self", ",", "batch_size", ",", "n_steps", ")", ":", "\n", "        ", "inputs", "=", "np", ".", "ones", "(", "[", "batch_size", ",", "n_steps", ",", "self", ".", "n_inputs", "]", ")", "*", "0.1", "\n", "inputs", "[", ":", ",", ":", ",", "-", "1", "]", "=", "np", ".", "stack", "(", "[", "np", ".", "sin", "(", "np", ".", "arange", "(", "n_steps", ")", "*", "0.3", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "x_0", "=", "x_0", "=", "mat", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "output_list", ".", "append", "(", "self", ".", "run", "(", "x_0", ",", "inputs", "[", "i", "]", ",", "n_steps", ")", ")", "\n", "", "return", "inputs", ",", "np", ".", "array", "(", "output_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.evaluate_performance": [[156, 162], ["range", "p_idx.append", "numpy.sqrt", "numpy.sum", "numpy.square", "numpy.sum", "numpy.square", "numpy.mean"], "methods", ["None"], ["", "def", "evaluate_performance", "(", "self", ",", "predictions", ",", "true_output", ")", ":", "\n", "        ", "p_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", ":", "\n", "            ", "p_idx", ".", "append", "(", "100.", "*", "(", "1.", "-", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "np", ".", "square", "(", "predictions", "[", ":", ",", ":", ",", "i", "]", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", "/", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "mean", "(", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", ")", ")", ")", ")", "\n", "", "return", "p_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.AUV_model.visualize_results": [[163, 196], ["worlds.AUV_model.evaluate_performance", "matplotlib.figure", "matplotlib.title", "range", "matplotlib.xlabel", "matplotlib.show", "matplotlib.figure().suptitle", "range", "matplotlib.xlabel", "matplotlib.show", "numpy.arange", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.evaluate_performance"], ["", "def", "visualize_results", "(", "self", ",", "predictions_train", ",", "output_train", ",", "predictions_test", ",", "output_test", ")", ":", "\n", "        ", "time", "=", "np", ".", "arange", "(", "output_train", ".", "shape", "[", "1", "]", ")", "*", "self", ".", "Ts", "\n", "\n", "performance_idx", "=", "self", ".", "evaluate_performance", "(", "predictions_test", ",", "output_test", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "10", ")", ")", "\n", "plt", ".", "title", "(", "'Training'", ")", "\n", "for", "i", "in", "range", "(", "output_train", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "output_train", ".", "shape", "[", "-", "1", "]", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", ",", ":", ",", "i", "]", ",", "label", "=", "'predicted'", ")", "\n", "plt", ".", "plot", "(", "time", ",", "output_train", "[", "0", ",", ":", ",", "i", "]", ",", "label", "=", "'real'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "ylabel", "(", "'state {}'", ".", "format", "(", "i", ")", ")", "\n", "", "plt", ".", "xlabel", "(", "'Time [s]'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", ".", "suptitle", "(", "'State predictions, ESN, fit: {:.2f}'", ".", "format", "(", "performance_idx", ")", ")", "\n", "# plt.title('Test')", "\n", "for", "i", "in", "range", "(", "output_test", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "output_train", ".", "shape", "[", "-", "1", "]", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", ",", ":", ",", "i", "]", ",", "label", "=", "'predicted'", ")", "\n", "plt", ".", "plot", "(", "time", ",", "output_test", "[", "0", ",", ":", ",", "i", "]", ",", "label", "=", "'real'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'Orizontal\\nposition'", ".", "format", "(", "i", ")", ")", "\n", "", "if", "i", "==", "1", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'Vertical\\nposition'", ".", "format", "(", "i", ")", ")", "\n", "", "if", "i", "==", "2", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'Angle\\ncosine'", ".", "format", "(", "i", ")", ")", "\n", "", "if", "i", "==", "3", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'Angle\\nsine'", ".", "format", "(", "i", ")", ")", "\n", "", "", "plt", ".", "xlabel", "(", "'Time [s]'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.__init__": [[216, 223], ["mat", "worlds.Two_tank_model.zero_state.copy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Ts", "=", "10", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Two_tank_model'", "\n", "self", ".", "Ts", "=", "Ts", "\n", "self", ".", "n_inputs", "=", "1", "\n", "self", ".", "n_outputs", "=", "1", "\n", "self", ".", "zero_state", "=", "mat", "(", "[", "-", "0.432", ",", "0.528", ",", "14.", ",", "7.", "]", ")", "# state is defined as initial states and initial output", "\n", "self", ".", "current_state", "=", "self", ".", "zero_state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.set_state": [[224, 226], ["state.copy"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.run": [[227, 290], ["mat().astype", "mat", "initial_state[].copy", "initial_state[].copy", "range", "initial_state[].copy.copy", "numpy.array.append", "numpy.array.append", "numpy.array", "numpy.array", "mat", "numpy.log", "numpy.concatenate", "y[].copy"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "initial_state", ",", "inputs", ",", "disturbance", ",", "n_steps", ")", ":", "\n", "# Input shape [n_steps, n_inputs]", "\n", "# Initial state shape [1, 3]", "\n", "\n", "        ", "''' Input is q3, state are [Wa4, Wb4, h] reaction invariants at out flow and tank level\n            State measurement units: x1,x2: mL/s  x3: cm '''", "\n", "\n", "# equilibrium point", "\n", "x_0", "=", "mat", "(", "[", "-", "0.436", ",", "0.5276", ",", "13.746", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "y_0", "=", "mat", "(", "[", "7.025", "]", ")", "\n", "u_", "=", "15.6", "\n", "dist_", "=", "0.55", "\n", "\n", "# constants", "\n", "A1", "=", "207", "\n", "z", "=", "11.5", "\n", "n", "=", "0.607", "\n", "q4nominal", "=", "32.8", "\n", "\n", "# nominal values at steady state", "\n", "pK1", "=", "6.35", "# 1 and 2 dissociation constant of H2CO3", "\n", "pK2", "=", "10.25", "\n", "x1_ss", "=", "-", "0.436", "\n", "x2_ss", "=", "0.5276", "\n", "x3_ss", "=", "13.746", "\n", "y_ss", "=", "7.025", "\n", "# Cv4 = q4nominal / ((x3_ss + z) ** n)", "\n", "Cv4", "=", "4.59", "\n", "q1", "=", "16.6", "\n", "Wa1", "=", "3.", "\n", "Wa2", "=", "-", "30.", "\n", "Wa3", "=", "-", "3.05", "\n", "Wb1", "=", "0.", "\n", "Wb2", "=", "30.", "\n", "Wb3", "=", "0.05", "\n", "\n", "x", "=", "initial_state", "[", ":", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "y", "=", "initial_state", "[", ":", ",", "3", ":", "]", ".", "copy", "(", ")", "\n", "state_list", "=", "[", "]", "\n", "output_list", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "xd", "=", "x", ".", "copy", "(", ")", "\n", "d", "=", "disturbance", "[", "step", ",", ":", "]", "\n", "ua", "=", "inputs", "[", "step", ",", ":", "]", "\n", "# evaluating state derivatives", "\n", "xd", "[", ":", ",", "0", "]", "=", "(", "1", "/", "(", "A1", "*", "x", "[", ":", ",", "2", "]", ")", "*", "(", "q1", "*", "(", "Wa1", "-", "x", "[", ":", ",", "0", "]", ")", "+", "d", "*", "(", "Wa2", "-", "x", "[", ":", ",", "0", "]", ")", "+", "ua", "*", "(", "Wa3", "-", "x", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "xd", "[", ":", ",", "1", "]", "=", "(", "1", "/", "(", "A1", "*", "x", "[", ":", ",", "2", "]", ")", ")", "*", "(", "q1", "*", "(", "Wb1", "-", "x", "[", ":", ",", "1", "]", ")", "+", "d", "*", "(", "Wb2", "-", "x", "[", ":", ",", "1", "]", ")", "+", "ua", "*", "(", "Wb3", "-", "x", "[", ":", ",", "1", "]", ")", ")", "\n", "xd", "[", ":", ",", "2", "]", "=", "(", "1", "/", "A1", ")", "*", "(", "q1", "+", "d", "+", "ua", "-", "Cv4", "*", "(", "x", "[", ":", ",", "2", "]", "+", "z", ")", "**", "n", ")", "\n", "# evaluating output derivatives as constraint", "\n", "dcx2", "=", "(", "1", "+", "2", "*", "10", "**", "(", "y", "-", "pK2", ")", ")", "/", "(", "1", "+", "10", "**", "(", "pK1", "-", "y", ")", "+", "10", "**", "(", "y", "-", "pK2", ")", ")", "\n", "dcy", "=", "np", ".", "log", "(", "10", ")", "*", "(", "10", "**", "(", "y", "-", "14", ")", "+", "10", "**", "(", "-", "y", ")", "+", "x", "[", ":", ",", "1", "]", "*", "(", "\n", "10", "**", "(", "pK1", "-", "y", ")", "+", "10", "**", "(", "y", "-", "pK2", ")", "+", "4", "*", "10", "**", "(", "pK1", "-", "y", ")", "*", "10", "**", "(", "y", "-", "pK2", ")", ")", "/", "(", "\n", "(", "1", "+", "10", "**", "(", "pK1", "-", "y", ")", "+", "10", "**", "(", "y", "-", "pK2", ")", ")", "**", "2", ")", ")", "\n", "yd", "=", "-", "dcy", "**", "-", "1", "*", "(", "xd", "[", ":", ",", "0", "]", "+", "dcx2", "*", "xd", "[", ":", ",", "1", "]", ")", "\n", "# updating states and output with forward euler", "\n", "x", "+=", "self", ".", "Ts", "*", "xd", "\n", "y", "+=", "self", ".", "Ts", "*", "yd", "\n", "state_list", ".", "append", "(", "np", ".", "concatenate", "(", "[", "x", "[", "0", "]", ",", "y", "[", "0", "]", "]", ")", ")", "\n", "output_list", ".", "append", "(", "y", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "state_list", "=", "np", ".", "array", "(", "state_list", ")", "\n", "output_list", "=", "np", ".", "array", "(", "output_list", ")", "\n", "\n", "", "return", "state_list", ",", "output_list", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.run_2": [[291, 351], ["mat().astype", "mat", "numpy.reshape", "initial_state[].copy", "initial_state[].copy", "initial_state[].copy.copy", "numpy.log", "numpy.concatenate", "mat"], "methods", ["None"], ["", "def", "run_2", "(", "self", ",", "t", ",", "initial_state", ",", "inputs", ",", "disturbance", ")", ":", "\n", "\n", "# Input shape [n_steps, n_inputs]", "\n", "# Initial state shape [1, 3]", "\n", "\n", "        ", "''' Input is q3, state are [Wa4, Wb4, h] reaction invariants at out flow and tank level\n            State measurement units: x1,x2: mL/s  x3: cm '''", "\n", "\n", "# equilibrium point", "\n", "x_0", "=", "mat", "(", "[", "-", "0.436", ",", "0.5276", ",", "13.746", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "y_0", "=", "mat", "(", "[", "7.025", "]", ")", "\n", "u_", "=", "15.6", "\n", "dist_", "=", "0.55", "\n", "\n", "# constants", "\n", "A1", "=", "207", "\n", "z", "=", "11.5", "\n", "n", "=", "0.607", "\n", "q4nominal", "=", "32.8", "\n", "\n", "# nominal values at steady state", "\n", "pK1", "=", "6.35", "# 1 and 2 dissociation constant of H2CO3", "\n", "pK2", "=", "10.25", "\n", "x1_ss", "=", "-", "0.436", "\n", "x2_ss", "=", "0.5276", "\n", "x3_ss", "=", "13.746", "\n", "y_ss", "=", "7.025", "\n", "# Cv4 = q4nominal / ((x3_ss + z) ** n)", "\n", "Cv4", "=", "4.59", "\n", "q1", "=", "16.6", "\n", "Wa1", "=", "3.", "\n", "Wa2", "=", "-", "30.", "\n", "Wa3", "=", "-", "3.05", "\n", "Wb1", "=", "0.", "\n", "Wb2", "=", "30.", "\n", "Wb3", "=", "0.05", "\n", "\n", "initial_state", "=", "np", ".", "reshape", "(", "initial_state", ",", "[", "1", ",", "4", "]", ")", "\n", "\n", "x", "=", "initial_state", "[", ":", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "y", "=", "initial_state", "[", ":", ",", "3", ":", "]", ".", "copy", "(", ")", "\n", "state_list", "=", "[", "]", "\n", "output_list", "=", "[", "]", "\n", "xd", "=", "x", ".", "copy", "(", ")", "\n", "d", "=", "disturbance", "[", "0", ",", ":", "]", "\n", "ua", "=", "inputs", "[", "0", ",", ":", "]", "\n", "# evaluating state derivatives", "\n", "xd", "[", ":", ",", "0", "]", "=", "(", "1", "/", "(", "A1", "*", "x", "[", ":", ",", "2", "]", ")", "*", "(", "q1", "*", "(", "Wa1", "-", "x", "[", ":", ",", "0", "]", ")", "+", "d", "*", "(", "Wa2", "-", "x", "[", ":", ",", "0", "]", ")", "+", "ua", "*", "(", "Wa3", "-", "x", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "xd", "[", ":", ",", "1", "]", "=", "(", "1", "/", "(", "A1", "*", "x", "[", ":", ",", "2", "]", ")", ")", "*", "(", "q1", "*", "(", "Wb1", "-", "x", "[", ":", ",", "1", "]", ")", "+", "d", "*", "(", "Wb2", "-", "x", "[", ":", ",", "1", "]", ")", "+", "ua", "*", "(", "Wb3", "-", "x", "[", ":", ",", "1", "]", ")", ")", "\n", "xd", "[", ":", ",", "2", "]", "=", "(", "1", "/", "A1", ")", "*", "(", "q1", "+", "d", "+", "ua", "-", "Cv4", "*", "(", "x", "[", ":", ",", "2", "]", "+", "z", ")", "**", "n", ")", "\n", "# evaluating output derivatives as constraint", "\n", "dcx2", "=", "(", "1", "+", "2", "*", "10", "**", "(", "y", "-", "pK2", ")", ")", "/", "(", "1", "+", "10", "**", "(", "pK1", "-", "y", ")", "+", "10", "**", "(", "y", "-", "pK2", ")", ")", "\n", "dcy", "=", "np", ".", "log", "(", "10", ")", "*", "(", "10", "**", "(", "y", "-", "14", ")", "+", "10", "**", "(", "-", "y", ")", "+", "x", "[", ":", ",", "1", "]", "*", "(", "\n", "10", "**", "(", "pK1", "-", "y", ")", "+", "10", "**", "(", "y", "-", "pK2", ")", "+", "4", "*", "10", "**", "(", "pK1", "-", "y", ")", "*", "10", "**", "(", "y", "-", "pK2", ")", ")", "/", "(", "\n", "(", "1", "+", "10", "**", "(", "pK1", "-", "y", ")", "+", "10", "**", "(", "y", "-", "pK2", ")", ")", "**", "2", ")", ")", "\n", "yd", "=", "-", "dcy", "**", "-", "1", "*", "(", "xd", "[", ":", ",", "0", "]", "+", "dcx2", "*", "xd", "[", ":", ",", "1", "]", ")", "\n", "\n", "state_der", "=", "np", ".", "concatenate", "(", "[", "xd", ",", "yd", "]", ",", "axis", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "return", "state_der", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.step": [[352, 357], ["worlds.Two_tank_model.run", "worlds.Two_tank_model.current_state[].copy", "state.copy", "worlds.Two_tank_model.current_state.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "step", "(", "self", ",", "inputs", ",", "disturbance_value", "=", "0.55", ")", ":", "\n", "        ", "state", ",", "output", "=", "self", ".", "run", "(", "self", ".", "current_state", ",", "inputs", ",", "disturbance", "=", "np", ".", "array", "(", "[", "[", "disturbance_value", "]", "]", ")", ",", "n_steps", "=", "1", ")", "\n", "system_output", "=", "self", ".", "current_state", "[", ":", ",", "3", ":", "]", ".", "copy", "(", ")", "\n", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "system_output", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.forward_": [[358, 362], ["worlds.Two_tank_model.run", "state.copy", "worlds.Two_tank_model.current_state.copy", "output.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "forward_", "(", "self", ",", "inputs", ",", "disturbance_value", "=", "0.55", ")", ":", "\n", "        ", "state", ",", "output", "=", "self", ".", "run", "(", "self", ".", "current_state", ",", "inputs", ",", "disturbance", "=", "np", ".", "array", "(", "[", "[", "disturbance_value", "]", "]", ")", ",", "n_steps", "=", "1", ")", "\n", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "output", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.forward": [[363, 372], ["functools.partial", "scipy.integrate.solve_ivp", "scipy.integrate.solve_ivp", "scipy.integrate.solve_ivp", "scipy.integrate.solve_ivp", "numpy.reshape", "numpy.reshape", "numpy.reshape.copy", "worlds.Two_tank_model.current_state.copy", "numpy.reshape.copy", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "disturbance_value", "=", "0.55", ")", ":", "\n", "        ", "run", "=", "partial", "(", "self", ".", "run_2", ",", "inputs", "=", "inputs", ",", "disturbance", "=", "np", ".", "array", "(", "[", "[", "disturbance_value", "]", "]", ")", ")", "\n", "\n", "sol", "=", "scipy", ".", "integrate", ".", "solve_ivp", "(", "run", ",", "[", "0", ",", "self", ".", "Ts", "]", ",", "self", ".", "current_state", "[", "0", "]", ")", "\n", "\n", "state", "=", "np", ".", "reshape", "(", "sol", ".", "y", "[", ":", ",", "-", "1", "]", ",", "[", "1", ",", "4", "]", ")", "\n", "output", "=", "np", ".", "reshape", "(", "sol", ".", "y", "[", "-", "1", ":", ",", "-", "1", "]", ",", "[", "1", ",", "self", ".", "n_outputs", "]", ")", "\n", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "output", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.generate_data": [[373, 479], ["numpy.random.seed", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.clip", "numpy.clip", "worlds.Two_tank_model.set_state", "range", "numpy.array", "worlds.Two_tank_model.set_state", "range", "numpy.array", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.ones", "numpy.ones", "numpy.random.randn", "numpy.random.randn", "worlds.Two_tank_model.forward", "numpy.array.append", "worlds.Two_tank_model.forward", "numpy.array.append", "range", "range", "numpy.ones", "numpy.random.rand", "int", "numpy.ones", "numpy.random.rand", "int"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward"], ["", "def", "generate_data", "(", "self", ",", "batch_size", ",", "n_steps", ")", ":", "\n", "# n_input_steps = int(n_steps/(1000/self.Ts))  # one step every 1000 s", "\n", "# n_dist_steps = int(n_steps/(50/self.Ts))  # one step every 5000 s", "\n", "# init_states_train = []", "\n", "# init_states_test = []", "\n", "# np.random.seed(777)", "\n", "# random_steps = (np.random.rand(batch_size, n_input_steps) - 0.5) * 4", "\n", "# random_steps_test = (np.random.rand(batch_size, n_input_steps) - 0.5) * 4", "\n", "# random_steps_dist_train = (np.random.rand(batch_size, n_dist_steps) - 0.5) * 0.", "\n", "# random_steps_dist_test = (np.random.rand(batch_size, n_dist_steps) - 0.5) * 0.", "\n", "# inputs = []", "\n", "# inputs_test = []", "\n", "# dist_train = []", "\n", "# dist_test = []", "\n", "# for i in range(batch_size):", "\n", "#     inputs_batch = []", "\n", "#     inputs_batch_test = []", "\n", "#     dist_batch_train = []", "\n", "#     dist_batch_test = []", "\n", "#     for j in range(n_input_steps):", "\n", "#         inputs_batch.append(np.ones([int(n_steps / n_input_steps), self.n_inputs]) * 14.7 + random_steps[i, j])", "\n", "#         inputs_batch_test.append(np.ones([int(n_steps / n_input_steps), self.n_inputs]) * 14.7 + random_steps_test[i, j])", "\n", "#     for k in range(n_dist_steps):", "\n", "#         dist_batch_train.append(", "\n", "#             np.ones([int(n_steps / n_dist_steps), 1]) * 0.55 + random_steps_dist_train[i, k])", "\n", "#         dist_batch_test.append(", "\n", "#             np.ones([int(n_steps / n_dist_steps), 1]) * 0.55 + random_steps_dist_test[i, k])", "\n", "#     inputs_batch = np.concatenate(inputs_batch, axis=0)", "\n", "#     inputs_batch_test = np.concatenate(inputs_batch_test, axis=0)", "\n", "#     dist_batch_train = np.concatenate(dist_batch_train, axis=0)", "\n", "#     dist_batch_test = np.concatenate(dist_batch_test, axis=0)", "\n", "#     inputs.append(inputs_batch)", "\n", "#     inputs_test.append(inputs_batch_test)", "\n", "#     dist_train.append(dist_batch_train)", "\n", "#     dist_test.append(dist_batch_test)", "\n", "# input_train = np.array(inputs) + np.random.randn(batch_size, n_steps, self.n_inputs)*0.1", "\n", "# input_test = np.array(inputs_test)", "\n", "# dist_train = np.array(dist_train)", "\n", "# dist_test = np.array(dist_test)", "\n", "#", "\n", "# output_train = np.zeros([batch_size, n_steps, 1])", "\n", "# output_test = np.zeros([batch_size, n_steps, 1])", "\n", "# for i in range(batch_size):", "\n", "#     state = self.zero_state # + np.concatenate([np.random.randn(3)*0.02, np.random.randn(1)*0.1])", "\n", "#     init_states_train.append(state[0, 3:].copy())", "\n", "#     self.set_state(state)", "\n", "#     for step in range(n_steps):", "\n", "#         state, output_train[i, step:step+1] = self.forward(input_train[i, step:step+1])", "\n", "#     state = self.zero_state # + np.concatenate([np.random.randn(3)*0.02, np.random.randn(1)*0.1])", "\n", "#     init_states_test.append(state[0, 3:].copy())", "\n", "#     self.set_state(state)", "\n", "#     for step in range(n_steps):", "\n", "#         state, output_test[i, step:step+1] = self.forward(input_test[i, step:step+1])", "\n", "# init_states_train = np.array(init_states_train)", "\n", "# init_states_test = np.array(init_states_test)", "\n", "        ", "np", ".", "random", ".", "seed", "(", "777", ")", "\n", "\n", "step_length", "=", "100", "\n", "\n", "input_train", "=", "[", "]", "\n", "output_train", "=", "[", "]", "\n", "input_test", "=", "[", "]", "\n", "output_test", "=", "[", "]", "\n", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "input_series_train", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "[", "step_length", ",", "1", "]", ")", "*", "14.7", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "4.", "-", "2.", "for", "_", "in", "range", "(", "int", "(", "n_steps", "/", "step_length", ")", "+", "1", ")", "]", ")", "\n", "input_series_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "[", "step_length", ",", "1", "]", ")", "*", "14.7", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "4.", "-", "2.", "for", "_", "in", "range", "(", "int", "(", "n_steps", "/", "step_length", ")", "+", "1", ")", "]", ")", "\n", "\n", "input_series_train", ",", "input_series_test", "=", "input_series_train", "[", ":", "n_steps", "]", ",", "input_series_test", "[", ":", "n_steps", "]", "\n", "\n", "input_series_train", "+=", "np", ".", "random", ".", "randn", "(", "n_steps", ",", "1", ")", "*", "0.1", "\n", "input_series_train", "=", "np", ".", "clip", "(", "input_series_train", ",", "12.7", ",", "16.7", ")", "\n", "\n", "input_series_test", "+=", "np", ".", "random", ".", "randn", "(", "n_steps", ",", "1", ")", "*", "0.1", "\n", "input_series_test", "=", "np", ".", "clip", "(", "input_series_test", ",", "12.7", ",", "16.7", ")", "\n", "\n", "self", ".", "set_state", "(", "self", ".", "zero_state", ")", "\n", "output_series_train", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "_", ",", "out", "=", "self", ".", "forward", "(", "input_series_train", "[", "step", ":", "step", "+", "1", "]", ")", "\n", "output_series_train", ".", "append", "(", "out", "[", "0", "]", ")", "\n", "", "output_series_train", "=", "np", ".", "array", "(", "output_series_train", ")", "\n", "\n", "self", ".", "set_state", "(", "self", ".", "zero_state", ")", "\n", "output_series_test", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "_", ",", "out", "=", "self", ".", "forward", "(", "input_series_test", "[", "step", ":", "step", "+", "1", "]", ")", "\n", "output_series_test", ".", "append", "(", "out", "[", "0", "]", ")", "\n", "", "output_series_test", "=", "np", ".", "array", "(", "output_series_test", ")", "\n", "\n", "input_train", ".", "append", "(", "input_series_train", ")", "\n", "input_test", ".", "append", "(", "input_series_test", ")", "\n", "\n", "output_train", ".", "append", "(", "output_series_train", ")", "\n", "output_test", ".", "append", "(", "output_series_test", ")", "\n", "\n", "", "input_train", "=", "np", ".", "array", "(", "input_train", ")", "\n", "input_test", "=", "np", ".", "array", "(", "input_test", ")", "\n", "\n", "output_train", "=", "np", ".", "array", "(", "output_train", ")", "\n", "output_test", "=", "np", ".", "array", "(", "output_test", ")", "\n", "\n", "init_states_train", "=", "np", ".", "ones", "(", "[", "batch_size", ",", "self", ".", "n_outputs", "]", ")", "*", "7.025", "\n", "init_states_test", "=", "np", ".", "ones", "(", "[", "batch_size", ",", "self", ".", "n_outputs", "]", ")", "*", "7.025", "\n", "\n", "return", "input_train", ",", "input_test", ",", "output_train", ",", "output_test", ",", "init_states_train", ",", "init_states_test", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.evaluate_performance": [[480, 485], ["range", "p_idx.append", "numpy.sqrt", "numpy.sum", "numpy.square", "numpy.sum", "numpy.square", "numpy.mean"], "methods", ["None"], ["", "def", "evaluate_performance", "(", "self", ",", "predictions", ",", "true_output", ")", ":", "\n", "        ", "p_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", ":", "\n", "            ", "p_idx", ".", "append", "(", "100.", "*", "(", "1.", "-", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "np", ".", "square", "(", "predictions", "[", ":", ",", ":", ",", "i", "]", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "mean", "(", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", ")", ")", ")", ")", "\n", "", "return", "p_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.Two_tank_model.visualize_results": [[486, 517], ["worlds.Two_tank_model.evaluate_performance", "matplotlib.subplots", "ax.set_title", "ax.plot", "ax.plot", "ax.legend", "ax.axis", "ax.set_xlabel", "ax.set_ylabel", "ax.grid", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.legend", "ax.axis", "ax.set_xlabel", "ax.set_ylabel", "ax.grid", "numpy.arange", "ax.set_title", "ax.set_title"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.evaluate_performance"], ["", "def", "visualize_results", "(", "self", ",", "predictions_train", ",", "output_train", ",", "predictions_test", ",", "output_test", ",", "network", ")", ":", "\n", "        ", "time", "=", "np", ".", "arange", "(", "output_train", ".", "shape", "[", "1", "]", ")", "*", "self", ".", "Ts", "\n", "\n", "performance_idx", "=", "self", ".", "evaluate_performance", "(", "predictions_test", ",", "output_test", ")", "\n", "# washout = network.sess.run(network.washout)*self.Ts", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "ax", ".", "set_title", "(", "'pH predictions on training set, {} network'", ".", "format", "(", "network", ".", "name", ")", ")", "\n", "ax", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", ".", "plot", "(", "time", ",", "output_train", "[", "0", "]", ",", "label", "=", "'real'", ")", "\n", "# ax.plot(np.ones(100)*washout, np.linspace(0, 10, num=100), '--', label='washout limit')", "\n", "ax", ".", "legend", "(", ")", "\n", "ax", ".", "axis", "(", "[", "0", ",", "time", "[", "-", "1", "]", ",", "5.5", ",", "8.", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'Time [s]'", ")", "\n", "ax", ".", "set_ylabel", "(", "'pH'", ")", "\n", "ax", ".", "grid", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "if", "network", ".", "observer_name", "is", "not", "None", ":", "\n", "            ", "ax", ".", "set_title", "(", "'pH predictions on test set, {} network + {} filter, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "\n", "network", ".", "observer_name", ",", "\n", "performance_idx", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "set_title", "(", "'pH predictions on test set, {} network, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "performance_idx", "[", "0", "]", ")", ")", "\n", "", "ax", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", ".", "plot", "(", "time", ",", "output_test", "[", "0", "]", ",", "label", "=", "'real'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "ax", ".", "axis", "(", "[", "0", ",", "time", "[", "-", "1", "]", ",", "5.5", ",", "8.", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'Time'", ")", "\n", "ax", ".", "set_ylabel", "(", "'pH'", ")", "\n", "ax", ".", "grid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.__init__": [[520, 532], ["numpy.array", "worlds.CSTR.zero_state.copy", "numpy.array", "params.get", "params.get", "params.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Ts", "=", "0.1", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "name", "=", "'CSTR'", "\n", "self", ".", "n_inputs", "=", "2", "\n", "self", ".", "n_outputs", "=", "2", "\n", "self", ".", "zero_state", "=", "np", ".", "array", "(", "[", "0.692", ",", "0.287", "]", ")", "\n", "self", ".", "current_state", "=", "self", ".", "zero_state", ".", "copy", "(", ")", "\n", "self", ".", "current_inputs", "=", "np", ".", "array", "(", "[", "0.8", ",", "0.8", "]", ")", "\n", "self", ".", "Ts", "=", "Ts", "\n", "\n", "self", ".", "C_A0", "=", "params", ".", "get", "(", "'C_A0'", ",", "0.8", ")", "\n", "self", ".", "k0_list", "=", "params", ".", "get", "(", "'k0_list'", ",", "[", "1.0", ",", "0.7", ",", "0.1", ",", "0.006", "]", ")", "\n", "self", ".", "E", "=", "params", ".", "get", "(", "'E'", ",", "[", "8.33", ",", "10.0", ",", "50.0", ",", "83.3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.set_state": [[533, 535], ["state.copy"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.set_inputs": [[536, 538], ["inputs.copy"], "methods", ["None"], ["", "def", "set_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self", ".", "current_inputs", "=", "inputs", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run": [[539, 561], ["enumerate", "k.append", "numpy.exp"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "t", ",", "state", ")", ":", "\n", "\n", "# returns dx/dt = run(x, u)", "\n", "\n", "        ", "q", "=", "self", ".", "current_inputs", "[", "0", "]", "# Input flow  [m^3/s]", "\n", "T", "=", "self", ".", "current_inputs", "[", "1", "]", "# Tank temperature  [K]", "\n", "C_A0", "=", "self", ".", "C_A0", "# Concentration of A in input feed", "\n", "\n", "C_A", "=", "state", "[", "0", "]", "\n", "C_R", "=", "state", "[", "1", "]", "\n", "\n", "k0_list", "=", "self", ".", "k0_list", "# Arrhenius pre-exponentials constants", "\n", "E", "=", "self", ".", "E", "# Normalized activation energies", "\n", "\n", "k", "=", "[", "]", "\n", "for", "idx", ",", "k0", "in", "enumerate", "(", "k0_list", ")", ":", "\n", "            ", "k", ".", "append", "(", "k0", "*", "np", ".", "exp", "(", "-", "E", "[", "idx", "]", "*", "(", "1", "/", "T", "-", "1", ")", ")", ")", "\n", "", "dC_A", "=", "q", "*", "(", "C_A0", "-", "C_A", ")", "-", "k", "[", "0", "]", "*", "C_A", "+", "k", "[", "3", "]", "*", "C_R", "\n", "\n", "dC_R", "=", "q", "*", "(", "1", "-", "C_A0", "-", "C_R", ")", "+", "k", "[", "0", "]", "*", "C_A", "+", "k", "[", "2", "]", "*", "(", "1", "-", "C_A", "-", "C_R", ")", "-", "(", "k", "[", "1", "]", "+", "k", "[", "3", "]", ")", "*", "C_R", "\n", "\n", "return", "dC_A", ",", "dC_R", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.step": [[584, 591], ["worlds.CSTR.set_inputs", "range", "worlds.CSTR.current_state.copy", "worlds.CSTR.current_state.copy", "numpy.reshape", "worlds.CSTR.current_state.copy", "numpy.array().copy", "numpy.array", "worlds.CSTR.run"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.set_inputs", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "step", "(", "self", ",", "input_series", ",", "time_divisions", "=", "100", ")", ":", "\n", "\n", "        ", "self", ".", "set_inputs", "(", "input_series", "[", "0", "]", ")", "\n", "for", "step", "in", "range", "(", "time_divisions", ")", ":", "\n", "            ", "output", "=", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "self", ".", "current_state", "=", "self", ".", "current_state", ".", "copy", "(", ")", "+", "(", "self", ".", "Ts", "/", "time_divisions", ")", "*", "np", ".", "array", "(", "self", ".", "run", "(", "0.", ",", "self", ".", "current_state", ")", ")", ".", "copy", "(", ")", "\n", "", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "np", ".", "reshape", "(", "output", ",", "[", "1", ",", "self", ".", "n_outputs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.forward": [[592, 599], ["worlds.CSTR.set_inputs", "range", "worlds.CSTR.current_state.copy", "worlds.CSTR.current_state.copy", "numpy.reshape", "worlds.CSTR.current_state.copy", "numpy.array().copy", "numpy.array", "worlds.CSTR.run"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.set_inputs", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "def", "forward", "(", "self", ",", "input_series", ",", "time_divisions", "=", "100", ")", ":", "\n", "\n", "        ", "self", ".", "set_inputs", "(", "input_series", "[", "0", "]", ")", "\n", "for", "step", "in", "range", "(", "time_divisions", ")", ":", "\n", "            ", "output", "=", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "self", ".", "current_state", "=", "self", ".", "current_state", ".", "copy", "(", ")", "+", "(", "self", ".", "Ts", "/", "time_divisions", ")", "*", "np", ".", "array", "(", "self", ".", "run", "(", "0.", ",", "self", ".", "current_state", ")", ")", ".", "copy", "(", ")", "\n", "", "return", "self", ".", "current_state", ".", "copy", "(", ")", ",", "np", ".", "reshape", "(", "self", ".", "current_state", ",", "[", "1", ",", "self", ".", "n_outputs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.generate_data": [[600, 664], ["numpy.random.seed", "range", "numpy.zeros", "numpy.zeros", "range", "inputs_train_list.append", "inputs_test_list.append", "worlds.CSTR.set_state", "range", "worlds.CSTR.set_state", "range", "outputs_train_list.append", "outputs_test_list.append", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "numpy.array().copy", "int", "triangular_window.copy", "triangular_window.copy", "triangular_window[].copy", "triangular_window[].copy", "numpy.random.rand", "worlds.CSTR.step", "output_train_list_batch.append", "numpy.random.rand", "worlds.CSTR.step", "output_test_list_batch.append", "numpy.array", "numpy.array", "scipy.signal.bartlett", "scipy.signal.bartlett", "range", "range", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "output[].copy", "output[].copy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.rand", "numpy.random.rand", "int", "int"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.step", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.step"], ["", "def", "generate_data", "(", "self", ",", "batch_size", ",", "n_steps", ",", "flow_period", "=", "50", ")", ":", "\n", "\n", "        ", "np", ".", "random", ".", "seed", "(", "150", ")", "\n", "\n", "triangular_window", "=", "(", "signal", ".", "bartlett", "(", "flow_period", "+", "1", ",", "sym", "=", "True", ")", "*", "0.35", "+", "0.7", ")", "[", ":", "-", "1", "]", "\n", "\n", "inputs_train_list", "=", "[", "]", "\n", "outputs_train_list", "=", "[", "]", "\n", "inputs_test_list", "=", "[", "]", "\n", "outputs_test_list", "=", "[", "]", "\n", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "output_train_list_batch", "=", "[", "]", "\n", "output_test_list_batch", "=", "[", "]", "\n", "\n", "inputs_train", "=", "np", ".", "zeros", "(", "[", "n_steps", ",", "self", ".", "n_inputs", "]", ")", "\n", "temperature_steps_value_train", "=", "[", "np", ".", "random", ".", "rand", "(", ")", "*", "0.35", "+", "0.7", "for", "i", "in", "\n", "range", "(", "int", "(", "n_steps", "/", "flow_period", ")", "+", "1", ")", "]", "\n", "inputs_test", "=", "np", ".", "zeros", "(", "[", "n_steps", ",", "self", ".", "n_inputs", "]", ")", "\n", "temperature_steps_value_test", "=", "[", "np", ".", "random", ".", "rand", "(", ")", "*", "0.35", "+", "0.7", "for", "i", "in", "\n", "range", "(", "int", "(", "n_steps", "/", "flow_period", ")", "+", "1", ")", "]", "\n", "\n", "# Generating triangular wave for flow input and steps for temperature input", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "n_steps", "/", "flow_period", ")", ")", ":", "\n", "                ", "inputs_train", "[", "i", "*", "flow_period", ":", "(", "i", "+", "1", ")", "*", "flow_period", ",", "0", "]", "=", "triangular_window", ".", "copy", "(", ")", "\n", "inputs_train", "[", "i", "*", "flow_period", ":", "(", "i", "+", "1", ")", "*", "flow_period", ",", "1", "]", "=", "np", ".", "ones", "(", "[", "flow_period", "]", ")", "*", "temperature_steps_value_train", "[", "i", "]", "\n", "inputs_test", "[", "i", "*", "flow_period", ":", "(", "i", "+", "1", ")", "*", "flow_period", ",", "0", "]", "=", "triangular_window", ".", "copy", "(", ")", "\n", "inputs_test", "[", "i", "*", "flow_period", ":", "(", "i", "+", "1", ")", "*", "flow_period", ",", "1", "]", "=", "np", ".", "ones", "(", "[", "flow_period", "]", ")", "*", "temperature_steps_value_test", "[", "i", "]", "\n", "", "if", "n_steps", "<", "flow_period", ":", "\n", "                ", "i", "=", "-", "1", "\n", "", "if", "(", "i", "+", "1", ")", "*", "flow_period", "<", "n_steps", ":", "\n", "                ", "inputs_train", "[", "(", "i", "+", "1", ")", "*", "flow_period", ":", "n_steps", ",", "0", "]", "=", "triangular_window", "[", "\n", ":", "n_steps", "-", "(", "i", "+", "1", ")", "*", "flow_period", "]", ".", "copy", "(", ")", "\n", "inputs_train", "[", "(", "i", "+", "1", ")", "*", "flow_period", ":", "n_steps", ",", "1", "]", "=", "np", ".", "ones", "(", "[", "n_steps", "-", "(", "i", "+", "1", ")", "*", "flow_period", "]", ")", "*", "temperature_steps_value_train", "[", "i", "+", "1", "]", "\n", "inputs_test", "[", "(", "i", "+", "1", ")", "*", "flow_period", ":", "n_steps", ",", "0", "]", "=", "triangular_window", "[", "\n", ":", "n_steps", "-", "(", "i", "+", "1", ")", "*", "flow_period", "]", ".", "copy", "(", ")", "\n", "inputs_test", "[", "(", "i", "+", "1", ")", "*", "flow_period", ":", "n_steps", ",", "1", "]", "=", "np", ".", "ones", "(", "[", "n_steps", "-", "(", "i", "+", "1", ")", "*", "flow_period", "]", ")", "*", "temperature_steps_value_test", "[", "i", "+", "1", "]", "\n", "\n", "", "inputs_train_list", ".", "append", "(", "inputs_train", ")", "\n", "inputs_test_list", ".", "append", "(", "inputs_test", ")", "\n", "\n", "self", ".", "set_state", "(", "np", ".", "random", ".", "rand", "(", "2", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "state", ",", "output", "=", "self", ".", "step", "(", "inputs_train", "[", "step", ":", "step", "+", "1", "]", ")", "\n", "output_train_list_batch", ".", "append", "(", "output", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "", "self", ".", "set_state", "(", "np", ".", "random", ".", "rand", "(", "2", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "state", ",", "output", "=", "self", ".", "step", "(", "inputs_test", "[", "step", ":", "step", "+", "1", "]", ")", "\n", "output_test_list_batch", ".", "append", "(", "output", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "", "outputs_train_list", ".", "append", "(", "np", ".", "array", "(", "output_train_list_batch", ")", ")", "\n", "outputs_test_list", ".", "append", "(", "np", ".", "array", "(", "output_test_list_batch", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "inputs_train_list", ")", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "inputs_test_list", ")", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "outputs_train_list", ")", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "outputs_test_list", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.evaluate_performance": [[665, 670], ["range", "p_idx.append", "numpy.sqrt", "numpy.sum", "numpy.square", "numpy.sum", "numpy.square", "numpy.mean"], "methods", ["None"], ["", "def", "evaluate_performance", "(", "self", ",", "predictions", ",", "true_output", ")", ":", "\n", "        ", "p_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", ":", "\n", "            ", "p_idx", ".", "append", "(", "100.", "*", "(", "1.", "-", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "np", ".", "square", "(", "predictions", "[", ":", ",", ":", ",", "i", "]", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "mean", "(", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", ")", ")", ")", ")", "\n", "", "return", "p_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.visualize_results": [[671, 710], ["worlds.CSTR.evaluate_performance", "matplotlib.subplots", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_ylabel", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_xlabel", "ax[].set_ylabel", "matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_ylabel", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_ylabel", "ax[].set_xlabel", "numpy.arange", "ax[].set_title", "ax[].set_title", "ax[].set_title", "ax[].set_title"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.evaluate_performance"], ["", "def", "visualize_results", "(", "self", ",", "predictions_train", ",", "output_train", ",", "predictions_test", ",", "output_test", ",", "network", ")", ":", "\n", "        ", "time", "=", "np", ".", "arange", "(", "output_train", ".", "shape", "[", "1", "]", ")", "*", "self", ".", "Ts", "\n", "\n", "performance_idx", "=", "self", ".", "evaluate_performance", "(", "predictions_test", ",", "output_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'C_a predictions on training set, {} network'", ".", "format", "(", "network", ".", "name", ")", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'predicted C_a'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "output_train", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'real C_a'", ")", "\n", "ax", "[", "0", "]", ".", "legend", "(", ")", "\n", "ax", "[", "0", "]", ".", "set_ylabel", "(", "'Concentration'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'C_r predictions on training set'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'predicted C_r'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "output_train", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'real C_r'", ")", "\n", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "ax", "[", "1", "]", ".", "set_xlabel", "(", "'Time [s]'", ")", "\n", "ax", "[", "1", "]", ".", "set_ylabel", "(", "'Concentration'", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "if", "network", ".", "observer_name", "is", "not", "None", ":", "\n", "            ", "ax", "[", "0", "]", ".", "set_title", "(", "'C_a predictions on test set, {} network + {} filter, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "\n", "network", ".", "observer_name", ",", "\n", "performance_idx", "[", "0", "]", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'C_r predictions on test set, {} network + {} filter, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "\n", "network", ".", "observer_name", ",", "\n", "performance_idx", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "ax", "[", "0", "]", ".", "set_title", "(", "'C_a predictions on test set, {} network, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "performance_idx", "[", "0", "]", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'C_r predictions on test set, {} network, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "performance_idx", "[", "1", "]", ")", ")", "\n", "\n", "", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'predicted C_a'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "output_test", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'real C_a'", ")", "\n", "ax", "[", "0", "]", ".", "legend", "(", ")", "\n", "ax", "[", "0", "]", ".", "set_ylabel", "(", "'Concentration'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'predicted C_r'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "output_test", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'real C_r'", ")", "\n", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "ax", "[", "1", "]", ".", "set_ylabel", "(", "'Concentration'", ")", "\n", "ax", "[", "1", "]", ".", "set_xlabel", "(", "'Time [s]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.__init__": [[728, 749], ["super().__init__", "numpy.zeros", "worlds.InvertedPendulum.zero_state.copy", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "mass", "=", "0.15", ",", "length", "=", "0.5", ",", "friction", "=", "0.1", ",", "dt", "=", "0.01", ",", "\n", "normalization", "=", "[", "np", ".", "array", "(", "[", "1.", ",", "1.", "]", ")", ",", "np", ".", "array", "(", "[", "1.", "]", ")", "]", ")", ":", "\n", "        ", "\"\"\"Initialization; see `InvertedPendulum`.\"\"\"", "\n", "super", "(", "InvertedPendulum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_inputs", "=", "1", "\n", "self", ".", "n_outputs", "=", "1", "\n", "self", ".", "name", "=", "'pendulum'", "\n", "self", ".", "mass", "=", "mass", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "gravity", "=", "9.81", "\n", "self", ".", "friction", "=", "friction", "\n", "self", ".", "dt", "=", "dt", "\n", "self", ".", "Ts", "=", "dt", "\n", "self", ".", "zero_state", "=", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "current_state", "=", "self", ".", "zero_state", ".", "copy", "(", ")", "\n", "\n", "self", ".", "normalization", "=", "normalization", "\n", "if", "normalization", "is", "not", "None", ":", "\n", "            ", "self", ".", "normalization", "=", "[", "norm", "\n", "for", "norm", "in", "normalization", "]", "\n", "self", ".", "inv_norm", "=", "[", "norm", "**", "-", "1", "for", "norm", "in", "self", ".", "normalization", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.inertia": [[750, 754], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "inertia", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return inertia of the pendulum.\"\"\"", "\n", "return", "self", ".", "mass", "*", "self", ".", "length", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize": [[755, 767], ["map", "numpy.matmul", "numpy.matmul"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"Normalize states and actions.\"\"\"", "\n", "if", "self", ".", "normalization", "is", "None", ":", "\n", "            ", "return", "state", ",", "action", "\n", "\n", "", "Tx_inv", ",", "Tu_inv", "=", "map", "(", "np", ".", "diag", ",", "self", ".", "inv_norm", ")", "\n", "state", "=", "np", ".", "matmul", "(", "state", ",", "Tx_inv", ")", "\n", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "action", "=", "np", ".", "matmul", "(", "action", ",", "Tu_inv", ")", "\n", "\n", "", "return", "state", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize": [[768, 780], ["map", "numpy.matmul", "numpy.matmul"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"De-normalize states and actions.\"\"\"", "\n", "if", "self", ".", "normalization", "is", "None", ":", "\n", "            ", "return", "state", ",", "action", "\n", "\n", "", "Tx", ",", "Tu", "=", "map", "(", "np", ".", "diag", ",", "self", ".", "normalization", ")", "\n", "\n", "state", "=", "np", ".", "matmul", "(", "state", ",", "Tx", ")", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "action", "=", "np", ".", "matmul", "(", "action", ",", "Tu", ")", "\n", "\n", "", "return", "state", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.linearize": [[781, 815], ["numpy.array", "numpy.array", "scipy.signal.StateSpace", "scipy.signal.StateSpace", "scipy.signal.StateSpace.to_discrete", "map", "map", "numpy.linalg.multi_dot", "numpy.linalg.multi_dot", "numpy.eye", "numpy.zeros"], "methods", ["None"], ["", "def", "linearize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the linearized system.\n\n        Returns\n        -------\n        a : ndarray\n            The state matrix.\n        b : ndarray\n            The action matrix.\n\n        \"\"\"", "\n", "gravity", "=", "self", ".", "gravity", "\n", "length", "=", "self", ".", "length", "\n", "friction", "=", "self", ".", "friction", "\n", "inertia", "=", "self", ".", "inertia", "\n", "\n", "A", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "\n", "[", "gravity", "/", "length", ",", "-", "friction", "/", "inertia", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "B", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "\n", "[", "1", "/", "inertia", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "normalization", "is", "not", "None", ":", "\n", "            ", "Tx", ",", "Tu", "=", "map", "(", "np", ".", "diag", ",", "self", ".", "normalization", ")", "\n", "Tx_inv", ",", "Tu_inv", "=", "map", "(", "np", ".", "diag", ",", "self", ".", "inv_norm", ")", "\n", "\n", "A", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "Tx_inv", ",", "A", ",", "Tx", ")", ")", "\n", "B", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "Tx_inv", ",", "B", ",", "Tu", ")", ")", "\n", "\n", "", "sys", "=", "signal", ".", "StateSpace", "(", "A", ",", "B", ",", "np", ".", "eye", "(", "2", ")", ",", "np", ".", "zeros", "(", "(", "2", ",", "1", ")", ")", ")", "\n", "sysd", "=", "sys", ".", "to_discrete", "(", "self", ".", "dt", ")", "\n", "return", "sysd", ".", "A", ",", "sysd", ".", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.set_state": [[816, 818], ["state.copy"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.forward": [[819, 865], ["worlds.InvertedPendulum.current_state.copy", "worlds.InvertedPendulum.denormalize", "numpy.array", "numpy.array", "state_next.reshape.reshape.reshape", "state_next.reshape.reshape.copy", "state_next[].copy", "worlds.InvertedPendulum.normalize", "state_next.reshape.reshape.copy", "numpy.sin", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize"], ["", "def", "forward", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Compute the state time-derivative.\n\n        Parameters\n        ----------\n        states: ndarray or Tensor\n            Unnormalized states.\n        actions: ndarray or Tensor\n            Unnormalized actions.\n\n        Returns\n        -------\n        x_dot: Tensor\n            The normalized derivative of the dynamics\n\n        \"\"\"", "\n", "# Physical dynamics", "\n", "gravity", "=", "self", ".", "gravity", "\n", "length", "=", "self", ".", "length", "\n", "friction", "=", "self", ".", "friction", "\n", "inertia", "=", "self", ".", "inertia", "\n", "\n", "state", "=", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "\n", "state", ",", "action", "=", "self", ".", "denormalize", "(", "state", ",", "action", ")", "\n", "angle", "=", "state", "[", ":", ",", "0", "]", "\n", "angular_velocity", "=", "state", "[", ":", ",", "1", "]", "\n", "\n", "x_ddot", "=", "gravity", "/", "length", "*", "np", ".", "sin", "(", "angle", ")", "+", "action", "[", "0", "]", "/", "inertia", "\n", "\n", "if", "friction", ">", "0", ":", "\n", "            ", "x_ddot", "-=", "friction", "/", "inertia", "*", "angular_velocity", "\n", "\n", "", "state_derivative", "=", "np", ".", "array", "(", "[", "angular_velocity", ",", "x_ddot", "]", ")", "\n", "# Normalize", "\n", "s", "=", "state", "+", "self", ".", "dt", "*", "state_derivative", ".", "reshape", "(", "[", "1", ",", "2", "]", ")", "\n", "s", "=", "self", ".", "normalize", "(", "s", ",", "action", ")", "[", "0", "]", "\n", "angle_", "=", "s", "[", ":", ",", "0", "]", "\n", "angular_velocity_", "=", "s", "[", ":", ",", "1", "]", "\n", "\n", "state_next", "=", "np", ".", "array", "(", "[", "angle_", ",", "angular_velocity_", "]", ")", "\n", "state_next", "=", "state_next", ".", "reshape", "(", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "current_state", "=", "state_next", ".", "copy", "(", ")", "\n", "\n", "output", "=", "state_next", "[", ":", ",", "0", ":", "1", "]", ".", "copy", "(", ")", "\n", "return", "state_next", ".", "copy", "(", ")", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.step": [[866, 911], ["worlds.InvertedPendulum.current_state.copy", "worlds.InvertedPendulum.copy", "worlds.InvertedPendulum.denormalize", "numpy.array", "numpy.array", "state_next.reshape.reshape.reshape", "state_next.reshape.reshape.copy", "worlds.InvertedPendulum.normalize", "numpy.sin", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.denormalize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.normalize"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Compute the state time-derivative.\n\n        Parameters\n        ----------\n        states: ndarray or Tensor\n            Unnormalized states.\n        actions: ndarray or Tensor\n            Unnormalized actions.\n\n        Returns\n        -------\n        x_dot: Tensor\n            The normalized derivative of the dynamics\n\n        \"\"\"", "\n", "# Physical dynamics", "\n", "gravity", "=", "self", ".", "gravity", "\n", "length", "=", "self", ".", "length", "\n", "friction", "=", "self", ".", "friction", "\n", "inertia", "=", "self", ".", "inertia", "\n", "\n", "state", "=", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "output", "=", "state", ".", "copy", "(", ")", "\n", "\n", "state", ",", "action", "=", "self", ".", "denormalize", "(", "state", ",", "action", ")", "\n", "angle", "=", "state", "[", ":", ",", "0", "]", "\n", "angular_velocity", "=", "state", "[", ":", ",", "1", "]", "\n", "\n", "x_ddot", "=", "gravity", "/", "length", "*", "np", ".", "sin", "(", "angle", ")", "+", "action", "[", "0", "]", "/", "inertia", "\n", "\n", "if", "friction", ">", "0", ":", "\n", "            ", "x_ddot", "-=", "friction", "/", "inertia", "*", "angular_velocity", "\n", "\n", "", "state_derivative", "=", "np", ".", "array", "(", "[", "angular_velocity", ",", "x_ddot", "]", ")", "\n", "# Normalize", "\n", "s", "=", "state", "+", "self", ".", "dt", "*", "state_derivative", ".", "reshape", "(", "[", "1", ",", "2", "]", ")", "\n", "s", "=", "self", ".", "normalize", "(", "s", ",", "action", ")", "[", "0", "]", "\n", "angle_", "=", "s", "[", ":", ",", "0", "]", "\n", "angular_velocity_", "=", "s", "[", ":", ",", "1", "]", "\n", "\n", "state_next", "=", "np", ".", "array", "(", "[", "angle_", ",", "angular_velocity_", "]", ")", "\n", "state_next", "=", "state_next", ".", "reshape", "(", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "current_state", "=", "state_next", ".", "copy", "(", ")", "\n", "return", "state_next", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.closed_loop_sim": [[912, 935], ["worlds.InvertedPendulum.set_state", "range", "numpy.array", "numpy.array", "numpy.array", "isinstance", "numpy.array.append", "worlds.InvertedPendulum.forward", "numpy.array.append", "numpy.array.append", "numpy.clip", "isinstance", "K_", "print", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward"], ["", "def", "closed_loop_sim", "(", "self", ",", "x_0", ",", "K_", ",", "n_steps", ",", "noise_std", "=", "0.", ")", ":", "\n", "            ", "x_", "=", "x_0", "\n", "self", ".", "set_state", "(", "x_0", ")", "\n", "x_list", "=", "[", "]", "\n", "y_list", "=", "[", "]", "\n", "u_list", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "n_steps", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "K_", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "u", "=", "np", ".", "clip", "(", "x_", "@", "(", "-", "K_", ")", "+", "noise_std", "*", "np", ".", "random", ".", "randn", "(", ")", ",", "-", "1.", ",", "1.", ")", "\n", "", "elif", "isinstance", "(", "K_", ",", "nn", ".", "Module", ")", ":", "\n", "                    ", "u", "=", "K_", "(", "x_", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'error'", ")", "\n", "return", "\n", "", "u_list", ".", "append", "(", "u", "[", "0", "]", ")", "\n", "x_", ",", "out", "=", "self", ".", "forward", "(", "u", ")", "\n", "x_list", ".", "append", "(", "x_", "[", "0", "]", ")", "\n", "y_list", ".", "append", "(", "out", "[", "0", "]", ")", "\n", "", "x_list", "=", "np", ".", "array", "(", "x_list", ")", "\n", "y_list", "=", "np", ".", "array", "(", "y_list", ")", "\n", "u_list", "=", "np", ".", "array", "(", "u_list", ")", "\n", "return", "u_list", ",", "x_list", ",", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.generate_data": [[936, 983], ["numpy.random.seed", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "states_train[].copy", "states_test[].copy", "numpy.array", "numpy.array", "numpy.diag", "numpy.array", "numpy.array.append", "worlds.InvertedPendulum.closed_loop_sim", "numpy.array.append", "states_train[].copy.append", "numpy.array.append", "worlds.InvertedPendulum.closed_loop_sim", "numpy.array.append", "states_test[].copy.append", "int", "numpy.zeros", "int", "state[].copy", "int", "state[].copy", "numpy.random.randn", "numpy.array", "int", "numpy.random.randn", "numpy.array", "int", "numpy.random.randn", "numpy.array", "numpy.random.randn", "numpy.array", "numpy.random.randn", "numpy.random.randn", "numpy.random.choice", "numpy.random.choice", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim"], ["", "def", "generate_data", "(", "self", ",", "batch_size", ",", "n_steps", ",", "noise_std", "=", "0.2", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "18", ")", "\n", "K", "=", "np", ".", "diag", "(", "self", ".", "normalization", "[", "0", "]", ")", "@", "np", ".", "array", "(", "[", "[", "10.", "/", "(", "2", "*", "np", ".", "pi", ")", "]", ",", "[", "0.", "]", "]", ")", "\n", "\n", "input_train", ",", "input_test", ",", "output_train", ",", "output_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "init_states_train", "=", "[", "]", "\n", "init_states_test", "=", "[", "]", "\n", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "if", "batch", "==", "int", "(", "batch_size", "/", "2", ")", ":", "\n", "                ", "K", "=", "np", ".", "zeros", "(", "[", "2", ",", "1", "]", ")", "\n", "\n", "", "if", "batch", "<", "int", "(", "batch_size", "/", "2", ")", ":", "\n", "                ", "state", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "0.2", "\n", "", "else", ":", "\n", "                ", "state", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "0.2", "+", "np", ".", "array", "(", "[", "[", "np", ".", "random", ".", "choice", "(", "[", "-", "0.5", ",", "0.5", "]", ")", ",", "0.", "]", "]", ")", "\n", "if", "batch", ">", "int", "(", "batch_size", "/", "1.1", ")", ":", "\n", "                    ", "state", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "0.05", "+", "np", ".", "array", "(", "[", "[", "np", ".", "random", ".", "choice", "(", "[", "-", "0.5", ",", "0.5", "]", ")", ",", "0.", "]", "]", ")", "\n", "noise_std", "=", "0.05", "\n", "", "", "init_states_train", ".", "append", "(", "state", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "inputs_batch", ",", "state_batch", ",", "outputs_batch", "=", "self", ".", "closed_loop_sim", "(", "state", ",", "K", ",", "n_steps", ",", "noise_std", ")", "\n", "input_train", ".", "append", "(", "inputs_batch", ")", "\n", "output_train", ".", "append", "(", "state_batch", ")", "\n", "\n", "if", "batch", "<", "int", "(", "batch_size", "/", "2", ")", ":", "\n", "                ", "state", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "0.2", "\n", "", "else", ":", "\n", "                ", "state", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "0.2", "+", "np", ".", "array", "(", "[", "[", "randint", "(", "0", ",", "1", ")", "-", "0.5", ",", "0.", "]", "]", ")", "\n", "if", "batch", ">", "int", "(", "batch_size", "/", "1.1", ")", ":", "\n", "                    ", "state", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "0.05", "+", "np", ".", "array", "(", "[", "[", "randint", "(", "0", ",", "1", ")", "-", "0.5", ",", "0.", "]", "]", ")", "\n", "noise_std", "=", "0.05", "\n", "", "", "init_states_test", ".", "append", "(", "state", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "inputs_batch", ",", "state_batch", ",", "outputs_batch", "=", "self", ".", "closed_loop_sim", "(", "state", ",", "K", ",", "n_steps", ",", "noise_std", ")", "\n", "input_test", ".", "append", "(", "inputs_batch", ")", "\n", "output_test", ".", "append", "(", "state_batch", ")", "\n", "\n", "", "input_train", "=", "np", ".", "array", "(", "input_train", ")", "\n", "input_test", "=", "np", ".", "array", "(", "input_test", ")", "\n", "states_train", "=", "np", ".", "array", "(", "output_train", ")", "\n", "states_test", "=", "np", ".", "array", "(", "output_test", ")", "\n", "output_train", "=", "states_train", "[", ":", ",", ":", ",", "0", ":", "1", "]", ".", "copy", "(", ")", "\n", "output_test", "=", "states_test", "[", ":", ",", ":", ",", "0", ":", "1", "]", ".", "copy", "(", ")", "\n", "init_states_train", "=", "np", ".", "array", "(", "init_states_train", ")", "\n", "init_states_test", "=", "np", ".", "array", "(", "init_states_test", ")", "\n", "\n", "return", "input_train", ",", "states_train", ",", "output_train", ",", "input_test", ",", "states_test", ",", "output_test", ",", "init_states_train", ",", "init_states_test", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.evaluate_performance": [[984, 989], ["range", "p_idx.append", "numpy.sqrt", "numpy.sum", "numpy.square", "numpy.sum", "numpy.square", "numpy.mean"], "methods", ["None"], ["", "def", "evaluate_performance", "(", "self", ",", "predictions", ",", "true_output", ")", ":", "\n", "        ", "p_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", ":", "\n", "            ", "p_idx", ".", "append", "(", "100.", "*", "(", "1.", "-", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "np", ".", "square", "(", "predictions", "[", ":", ",", ":", ",", "i", "]", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "mean", "(", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", ")", ")", ")", ")", "\n", "", "return", "p_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.InvertedPendulum.visualize_results": [[990, 1051], ["worlds.InvertedPendulum.evaluate_performance", "matplotlib.subplots", "ax.set_title", "ax.plot", "ax.plot", "ax.legend", "ax.set_ylabel", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.legend", "ax.set_ylabel", "numpy.arange", "ax.set_title", "ax.set_title"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.evaluate_performance"], ["", "def", "visualize_results", "(", "self", ",", "predictions_train", ",", "output_train", ",", "predictions_test", ",", "output_test", ",", "network", ")", ":", "\n", "        ", "time", "=", "np", ".", "arange", "(", "output_train", ".", "shape", "[", "1", "]", ")", "*", "self", ".", "Ts", "\n", "\n", "performance_idx", "=", "self", ".", "evaluate_performance", "(", "predictions_test", ",", "output_test", ")", "\n", "\n", "# fig, ax = plt.subplots(2, 1, figsize=(12, 12))", "\n", "# ax[0].set_title('Angle predictions on training set')", "\n", "# ax[0].plot(time, predictions_train[0,:,0], label='predicted')", "\n", "# ax[0].plot(time, output_train[0,:,0], label='real')", "\n", "# ax[0].legend()", "\n", "# ax[0].set_ylabel('Angle')", "\n", "# ax[1].set_title('Angular velocity predictions on training set')", "\n", "# ax[1].plot(time, predictions_train[0, :, 1], label='predicted')", "\n", "# ax[1].plot(time, output_train[0, :, 1], label='real')", "\n", "# ax[1].legend()", "\n", "# ax[1].set_xlabel('Time [s]')", "\n", "# ax[1].set_ylabel('Angular velocity')", "\n", "#", "\n", "# fig, ax = plt.subplots(2, 1, figsize=(12, 12))", "\n", "# if network.observer_name is not None:", "\n", "#     ax[0].set_title('Angle predictions on test set, {} network + {} filter, fit: {:.2f} %'.format(network.name,", "\n", "#                                                                                          network.observer_name,", "\n", "#                                                                                          performance_idx[0]))", "\n", "#     ax[1].set_title('Angular velocity predictions on test set, {} network + {} filter, fit: {:.2f} %'.format(network.name,", "\n", "#                                                                                          network.observer_name,", "\n", "#                                                                                          performance_idx[1]))", "\n", "# else:", "\n", "#     ax[0].set_title('Angle predictions on test set, {} network, fit: {:.2f} %'.format(network.name, performance_idx[0]))", "\n", "#     ax[1].set_title('Angular velocity predictions on test set, {} network, fit: {:.2f} %'.format(network.name, performance_idx[1]))", "\n", "#", "\n", "# ax[0].plot(time, predictions_test[0,:,0], label='predicted')", "\n", "# ax[0].plot(time, output_test[0,:,0], label='real')", "\n", "# ax[0].legend()", "\n", "# ax[0].set_ylabel('Angle')", "\n", "# ax[1].plot(time, predictions_test[0, :, 1], label='predicted')", "\n", "# ax[1].plot(time, output_test[0, :, 1], label='real')", "\n", "# ax[1].legend()", "\n", "# ax[1].set_ylabel('Angle')", "\n", "# ax[1].set_xlabel('Time [s]')", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", ".", "set_title", "(", "'Angle predictions on training set'", ")", "\n", "ax", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", ".", "plot", "(", "time", ",", "output_train", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'real'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "ax", ".", "set_ylabel", "(", "'Angle'", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "if", "network", ".", "observer_name", "is", "not", "None", ":", "\n", "            ", "ax", ".", "set_title", "(", "'Angle predictions on test set, {} network + {} filter, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "\n", "network", ".", "observer_name", ",", "\n", "performance_idx", "[", "\n", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "set_title", "(", "\n", "'Angle predictions on test set, {} network, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "performance_idx", "[", "0", "]", ")", ")", "\n", "\n", "", "ax", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", ".", "plot", "(", "time", ",", "output_test", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'real'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "ax", ".", "set_ylabel", "(", "'Angle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.__init__": [[1054, 1071], ["numpy.zeros", "worlds.DoublePendulum.zero_state.copy", "numpy.array", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "m1", "=", "0.2", ",", "m2", "=", "0.2", ",", "L1", "=", "0.5", ",", "L2", "=", "0.5", ",", "d1", "=", "0.25", ",", "d2", "=", "0.25", ",", "c1", "=", "0.1", ",", "c2", "=", "0.1", ",", "Ts", "=", "0.01", ",", "saturation", "=", "[", "np", ".", "array", "(", "[", "-", "1", ",", "1", "]", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", ":", "\n", "        ", "\"\"\"Double pendulum initialization\"\"\"", "\n", "self", ".", "m1", "=", "m1", "\n", "self", ".", "m2", "=", "m2", "\n", "self", ".", "L1", "=", "L1", "\n", "self", ".", "L2", "=", "L2", "\n", "self", ".", "d1", "=", "d1", "\n", "self", ".", "d2", "=", "d2", "\n", "self", ".", "c1", "=", "c1", "\n", "self", ".", "c2", "=", "c2", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "gravity", "=", "9.81", "\n", "self", ".", "zero_state", "=", "np", ".", "zeros", "(", "[", "1", ",", "4", "]", ")", "\n", "self", ".", "current_state", "=", "self", ".", "zero_state", ".", "copy", "(", ")", "\n", "self", ".", "n_inputs", "=", "2", "\n", "self", ".", "n_outputs", "=", "2", "\n", "self", ".", "Ts", "=", "Ts", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.saturate": [[1072, 1078], ["numpy.split", "enumerate", "numpy.concatenate", "numpy.clip"], "methods", ["None"], ["", "def", "saturate", "(", "self", ",", "input_value", ")", ":", "\n", "        ", "inputs_list", "=", "np", ".", "split", "(", "input_value", ",", "indices_or_sections", "=", "self", ".", "n_inputs", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", ",", "input", "in", "enumerate", "(", "inputs_list", ")", ":", "\n", "            ", "inputs_list", "[", "i", "]", "=", "np", ".", "clip", "(", "input", ",", "self", ".", "saturation", "[", "i", "]", "[", "0", "]", ",", "self", ".", "saturation", "[", "i", "]", "[", "1", "]", ")", "\n", "", "input_norm", "=", "np", ".", "concatenate", "(", "inputs_list", ",", "axis", "=", "-", "1", ")", "\n", "return", "input_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.I1": [[1079, 1082], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "I1", "(", "self", ")", ":", "\n", "        ", "return", "1", "/", "12", "*", "self", ".", "m1", "*", "self", ".", "L1", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.I2": [[1083, 1086], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "I2", "(", "self", ")", ":", "\n", "        ", "return", "1", "/", "12", "*", "self", ".", "m2", "*", "self", ".", "L2", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state": [[1087, 1094], ["state.copy"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Setting the current state of the pendulum.\n\n        The state is a numpy array of dimension (1, 4)\n        defined as [theta_1, theta_1d, theta_2, theta_2d]\"\"\"", "\n", "\n", "self", ".", "current_state", "=", "state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.direct_kinematics": [[1095, 1099], ["numpy.array", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "methods", ["None"], ["", "def", "direct_kinematics", "(", "self", ",", "angles", ")", ":", "\n", "        ", "x", "=", "-", "self", ".", "L1", "*", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "-", "self", ".", "L2", "*", "np", ".", "sin", "(", "angles", "[", "0", "]", "+", "angles", "[", "1", "]", ")", "\n", "y", "=", "self", ".", "L1", "*", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "+", "self", ".", "L2", "*", "np", ".", "cos", "(", "angles", "[", "0", "]", "+", "angles", "[", "1", "]", ")", "\n", "return", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.inverse_kinematics": [[1100, 1106], ["numpy.sqrt", "numpy.arctan2", "numpy.array", "numpy.square", "numpy.arctan2", "numpy.arctan2"], "methods", ["None"], ["", "def", "inverse_kinematics", "(", "self", ",", "position_xy", ")", ":", "\n", "        ", "costheta_2", "=", "(", "position_xy", "[", "0", "]", "**", "2", "+", "position_xy", "[", "1", "]", "**", "2", "-", "self", ".", "L1", "**", "2", "-", "self", ".", "L2", "**", "2", ")", "/", "(", "2", "*", "self", ".", "L1", "*", "self", ".", "L2", ")", "\n", "sintheta_2", "=", "np", ".", "sqrt", "(", "1.", "-", "np", ".", "square", "(", "costheta_2", ")", ")", "\n", "theta_2", "=", "np", ".", "arctan2", "(", "sintheta_2", ",", "costheta_2", ")", "\n", "theta_1", "=", "np", ".", "arctan2", "(", "position_xy", "[", "1", "]", ",", "position_xy", "[", "0", "]", ")", "-", "np", ".", "arctan2", "(", "self", ".", "L2", "*", "sintheta_2", ",", "self", ".", "L1", "+", "self", ".", "L2", "*", "costheta_2", ")", "-", "np", ".", "pi", "/", "2", "\n", "return", "np", ".", "array", "(", "[", "[", "theta_1", ",", "theta_2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.forward": [[1107, 1130], ["worlds.DoublePendulum.saturate", "worlds.DoublePendulum.current_state.copy", "worlds.solve", "solve.copy", "numpy.transpose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.saturate", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.solve"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "dt", "=", "None", ")", ":", "\n", "        ", "\"\"\"Computing the next state and measured output given an input.\n\n        inputs: numpy array (1, 2)\"\"\"", "\n", "\n", "inputs", "=", "self", ".", "saturate", "(", "inputs", ")", "\n", "\n", "if", "dt", "is", "None", ":", "\n", "            ", "dt", "=", "self", ".", "Ts", "\n", "\n", "", "current_state", "=", "self", ".", "current_state", ".", "copy", "(", ")", "\n", "\n", "# Solves the ode", "\n", "new_state", "=", "solve", "(", "self", ".", "get_state_derivatives", ",", "current_state", ",", "inputs", ",", "dt", ")", "\n", "\n", "self", ".", "current_state", "=", "new_state", ".", "copy", "(", ")", "\n", "\n", "theta_1", "=", "new_state", "[", ":", ",", "0", "]", "\n", "theta_2", "=", "new_state", "[", ":", ",", "2", "]", "\n", "\n", "output", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "theta_1", ",", "theta_2", "]", ")", ")", "\n", "\n", "return", "new_state", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.get_state_derivatives": [[1131, 1174], ["numpy.zeros", "numpy.zeros", "numpy.array", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin"], "methods", ["None"], ["", "def", "get_state_derivatives", "(", "self", ",", "t", ",", "initial_state", ",", "input_value", ")", ":", "\n", "        ", "\"\"\"Returns the derivative of the state used by the ode solver\"\"\"", "\n", "\n", "m1", "=", "self", ".", "m1", "\n", "m2", "=", "self", ".", "m2", "\n", "L1", "=", "self", ".", "L1", "\n", "L2", "=", "self", ".", "L2", "\n", "d1", "=", "self", ".", "d1", "\n", "d2", "=", "self", ".", "d2", "\n", "c1", "=", "self", ".", "c1", "\n", "c2", "=", "self", ".", "c2", "\n", "g", "=", "self", ".", "gravity", "\n", "I1", "=", "self", ".", "I1", "\n", "I2", "=", "self", ".", "I2", "\n", "\n", "theta_1", "=", "initial_state", "[", "0", "]", "\n", "theta_1d", "=", "initial_state", "[", "1", "]", "\n", "theta_2", "=", "initial_state", "[", "2", "]", "\n", "theta_2d", "=", "initial_state", "[", "3", "]", "\n", "\n", "tau_1", "=", "input_value", "[", "0", ",", "0", "]", "\n", "tau_2", "=", "input_value", "[", "0", ",", "1", "]", "\n", "\n", "A", "=", "np", ".", "zeros", "(", "[", "2", ",", "2", "]", ")", "\n", "\n", "A", "[", "0", ",", "0", "]", "=", "I1", "+", "m1", "*", "d1", "**", "2", "+", "I2", "+", "m2", "*", "L1", "**", "2", "+", "m2", "*", "d2", "**", "2", "+", "2", "*", "m2", "*", "L1", "*", "d2", "*", "np", ".", "cos", "(", "theta_2", ")", "\n", "A", "[", "0", ",", "1", "]", "=", "I2", "+", "m2", "*", "d2", "**", "2", "+", "m2", "*", "L1", "*", "d2", "*", "np", ".", "cos", "(", "theta_2", ")", "\n", "A", "[", "1", ",", "0", "]", "=", "I2", "+", "m2", "*", "d2", "**", "2", "+", "m2", "*", "L1", "*", "d2", "*", "np", ".", "cos", "(", "theta_2", ")", "\n", "A", "[", "1", ",", "1", "]", "=", "I2", "+", "m2", "*", "d2", "**", "2", "\n", "\n", "B", "=", "np", ".", "zeros", "(", "[", "2", ",", "1", "]", ")", "\n", "\n", "B", "[", "0", ",", "0", "]", "=", "tau_1", "-", "c1", "*", "theta_1d", "+", "m2", "*", "g", "*", "d2", "*", "np", ".", "sin", "(", "theta_1", "+", "theta_2", ")", "+", "m2", "*", "g", "*", "L1", "*", "np", ".", "sin", "(", "theta_1", ")", "+", "m1", "*", "g", "*", "d1", "*", "np", ".", "sin", "(", "theta_1", ")", "+", "m2", "*", "L1", "*", "d2", "*", "theta_2d", "**", "2", "*", "np", ".", "sin", "(", "theta_2", ")", "+", "2", "*", "m2", "*", "L1", "*", "d2", "*", "theta_1d", "*", "theta_2d", "*", "np", ".", "sin", "(", "theta_2", ")", "\n", "B", "[", "1", ",", "0", "]", "=", "tau_2", "-", "c2", "*", "theta_2d", "+", "m2", "*", "g", "*", "d2", "*", "np", ".", "sin", "(", "theta_1", "+", "theta_2", ")", "-", "m2", "*", "L1", "*", "d2", "*", "theta_1d", "**", "2", "*", "np", ".", "sin", "(", "theta_2", ")", "\n", "\n", "theta_1dd", "=", "(", "np", ".", "linalg", ".", "inv", "(", "A", ")", "@", "B", ")", "[", "0", ",", "0", "]", "\n", "theta_2dd", "=", "(", "np", ".", "linalg", ".", "inv", "(", "A", ")", "@", "B", ")", "[", "1", ",", "0", "]", "\n", "\n", "state_derivative", "=", "np", ".", "array", "(", "[", "theta_1d", ",", "theta_1dd", ",", "theta_2d", ",", "theta_2dd", "]", ")", "\n", "\n", "return", "state_derivative", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.simulate_free": [[1175, 1267], ["worlds.DoublePendulum.set_state", "range", "numpy.array", "numpy.array", "numpy.array", "worlds.DoublePendulum.saturate", "worlds.DoublePendulum.forward", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.saturate", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward"], ["", "def", "simulate_free", "(", "self", ",", "initial_state", ",", "steps", ",", "dt", "=", "None", ",", "noise_std", "=", "0.", ")", ":", "\n", "        ", "\"\"\"Run a simulation of the free falling pendulum.\n\n        initial_state can be a list of states, in which case a simulation\n        will be run for each initial state\n\n        Returns a numpy array of the state time-series of shape (n_simulations, steps, 4)\"\"\"", "\n", "\n", "if", "dt", "is", "None", ":", "\n", "            ", "dt", "=", "self", ".", "Ts", "\n", "\n", "# if not isinstance(initial_state, list):", "\n", "#     initial_state = [initial_state]", "\n", "\n", "# t1 = []", "\n", "# t1d = []", "\n", "# t2 = []", "\n", "# t2d = []", "\n", "#", "\n", "# plt.figure()", "\n", "# plt.plot([0.], [0.], '*', label='hinge')", "\n", "\n", "# for state in initial_state:", "\n", "\n", "# x1_list = []", "\n", "# y1_list = []", "\n", "# x2_list = []", "\n", "# y2_list = []", "\n", "#", "\n", "# theta_1_list = []", "\n", "# theta_1d_list = []", "\n", "# theta_2_list = []", "\n", "# theta_2d_list = []", "\n", "\n", "", "inputs", "=", "[", "]", "\n", "states", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "\n", "self", ".", "set_state", "(", "initial_state", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "\n", "            ", "input_value", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "noise_std", "\n", "input_value", "=", "self", ".", "saturate", "(", "input_value", ")", "\n", "\n", "state", ",", "output", "=", "self", ".", "forward", "(", "input_value", ",", "dt", "=", "dt", ")", "\n", "\n", "inputs", ".", "append", "(", "input_value", "[", "0", "]", ")", "\n", "states", ".", "append", "(", "state", "[", "0", "]", ")", "\n", "outputs", ".", "append", "(", "output", "[", "0", "]", ")", "\n", "\n", "#     x1 = - self.L1 * np.sin(output[:, 0])", "\n", "#     y1 = self.L1 * np.cos(output[:, 0])", "\n", "#     x2 = - self.L1 * np.sin(output[:, 0]) - self.L2 * np.sin(output[:, 0] + output[:, 1])", "\n", "#     y2 = self.L1 * np.cos(output[:, 0]) + self.L2 * np.cos(output[:, 0] + output[:, 1])", "\n", "#     pos = [x1, y1, x2, y2]", "\n", "#", "\n", "#     x1_list.append(pos[0])", "\n", "#     y1_list.append(pos[1])", "\n", "#     x2_list.append(pos[2])", "\n", "#     y2_list.append(pos[3])", "\n", "#", "\n", "#     theta_1_list.append(state[:, 0])", "\n", "#     theta_1d_list.append(state[:, 1])", "\n", "#     theta_2_list.append(state[:, 2])", "\n", "#     theta_2d_list.append(state[:, 3])", "\n", "#", "\n", "# plot_limits = (self.L1 + self.L2) * 1.1", "\n", "# plt.plot(x1_list, y1_list, label='first joint position')", "\n", "# plt.plot(x2_list, y2_list, label='second joint position')", "\n", "# plt.grid()", "\n", "# plt.xlabel('X')", "\n", "# plt.ylabel('Y')", "\n", "# plt.axis([-plot_limits, plot_limits, -plot_limits, plot_limits])", "\n", "# # plt.legend()", "\n", "#", "\n", "# theta_1 = np.array(theta_1_list)", "\n", "# theta_1d = np.array(theta_1d_list)", "\n", "# theta_2 = np.array(theta_2_list)", "\n", "# theta_2d = np.array(theta_2d_list)", "\n", "#", "\n", "# t1.append(theta_1)", "\n", "# t2.append(theta_2)", "\n", "# t1d.append(theta_1d)", "\n", "# t2d.append(theta_2d)", "\n", "\n", "# plt.show()", "\n", "", "inputs", "=", "np", ".", "array", "(", "inputs", ")", "\n", "states", "=", "np", ".", "array", "(", "states", ")", "\n", "outputs", "=", "np", ".", "array", "(", "outputs", ")", "\n", "\n", "return", "states", ",", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.linearize": [[1268, 1310], ["x_0.copy", "range", "numpy.concatenate", "range", "worlds.DoublePendulum.set_state", "numpy.concatenate", "numpy.array", "numpy.zeros", "worlds.DoublePendulum.set_state", "worlds.DoublePendulum.forward", "numpy.zeros", "worlds.DoublePendulum.set_state", "worlds.DoublePendulum.forward", "A_columns.append", "worlds.DoublePendulum.set_state", "numpy.zeros", "worlds.DoublePendulum.forward", "worlds.DoublePendulum.set_state", "numpy.zeros", "worlds.DoublePendulum.forward", "B_columns.append", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward"], ["", "def", "linearize", "(", "self", ",", "x_0", ",", "input_value", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"Retrieves the linearized model matrices used to tune the LQR\"\"\"", "\n", "\n", "current_state", "=", "x_0", ".", "copy", "(", ")", "\n", "\n", "A_columns", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "delta_state", "=", "np", ".", "zeros", "(", "[", "1", ",", "4", "]", ")", "\n", "delta_state", "[", ":", ",", "i", "]", "=", "-", "eps", "/", "2", "\n", "self", ".", "set_state", "(", "current_state", "+", "delta_state", ")", "\n", "new_state_neg", ",", "output", "=", "self", ".", "forward", "(", "input_value", ")", "\n", "delta_state", "=", "np", ".", "zeros", "(", "[", "1", ",", "4", "]", ")", "\n", "delta_state", "[", ":", ",", "i", "]", "=", "eps", "/", "2", "\n", "self", ".", "set_state", "(", "current_state", "+", "delta_state", ")", "\n", "new_state_pos", ",", "output", "=", "self", ".", "forward", "(", "input_value", ")", "\n", "state_der", "=", "(", "new_state_pos", "-", "new_state_neg", ")", "/", "eps", "\n", "A_columns", ".", "append", "(", "np", ".", "transpose", "(", "state_der", ")", ")", "\n", "\n", "", "A", "=", "np", ".", "concatenate", "(", "A_columns", ",", "axis", "=", "-", "1", ")", "\n", "\n", "B_columns", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "self", ".", "set_state", "(", "current_state", ")", "\n", "delta_input", "=", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", "\n", "delta_input", "[", ":", ",", "i", "]", "=", "-", "eps", "/", "2", "\n", "new_state_neg", ",", "output", "=", "self", ".", "forward", "(", "input_value", "+", "delta_input", ")", "\n", "self", ".", "set_state", "(", "current_state", ")", "\n", "delta_input", "=", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", "\n", "delta_input", "[", ":", ",", "i", "]", "=", "eps", "/", "2", "\n", "new_state_pos", ",", "output", "=", "self", ".", "forward", "(", "input_value", "+", "delta_input", ")", "\n", "state_der", "=", "(", "new_state_pos", "-", "new_state_neg", ")", "/", "eps", "\n", "B_columns", ".", "append", "(", "np", ".", "transpose", "(", "state_der", ")", ")", "\n", "\n", "", "self", ".", "set_state", "(", "current_state", ")", "\n", "\n", "B", "=", "np", ".", "concatenate", "(", "B_columns", ",", "axis", "=", "-", "1", ")", "\n", "\n", "C", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", ",", "0.", "]", "]", ")", "\n", "\n", "return", "A", ",", "B", ",", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim": [[1311, 1343], ["numpy.array", "worlds.DoublePendulum.set_state", "range", "numpy.array", "numpy.array", "numpy.array", "worlds.DoublePendulum.linearize", "numpy.diag", "numpy.diag", "worlds.dlqr", "x_0.copy", "worlds.DoublePendulum.saturate", "worlds.DoublePendulum.forward", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.zeros", "numpy.zeros", "input_value[].copy", "output[].copy", "state[].copy", "numpy.transpose", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.set_state", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.linearize", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.dlqr", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.saturate", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward"], ["", "def", "closed_loop_sim", "(", "self", ",", "x_0", ",", "steps", ",", "K", "=", "None", ",", "noise_std", "=", "0.", ",", "target", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", "]", ")", ")", ":", "\n", "        ", "\"\"\"Perform a closed loop simulation using LQR.\n\n        Noise can be added to the control input using noise_std\"\"\"", "\n", "\n", "if", "K", "is", "None", ":", "\n", "            ", "A", ",", "B", ",", "C", "=", "self", ".", "linearize", "(", "np", ".", "zeros", "(", "[", "1", ",", "4", "]", ")", ",", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "\n", "Q", "=", "np", ".", "diag", "(", "[", "10.", ",", "0.1", ",", "10.", ",", "0.1", "]", ")", "\n", "R", "=", "np", ".", "diag", "(", "[", "2.", ",", "2.", "]", ")", "\n", "\n", "K", ",", "P", ",", "eig", "=", "dlqr", "(", "A", ",", "B", ",", "Q", ",", "R", ")", "\n", "\n", "", "output_list", "=", "[", "]", "\n", "input_list", "=", "[", "]", "\n", "state_list", "=", "[", "]", "\n", "\n", "self", ".", "set_state", "(", "x_0", ".", "copy", "(", ")", ")", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "            ", "input_value", "=", "-", "(", "self", ".", "current_state", "-", "target", ")", "@", "np", ".", "transpose", "(", "K", ")", "+", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "*", "noise_std", "\n", "input_value", "=", "self", ".", "saturate", "(", "input_value", ")", "\n", "state", ",", "output", "=", "self", ".", "forward", "(", "input_value", ")", "\n", "\n", "input_list", ".", "append", "(", "input_value", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "output_list", ".", "append", "(", "output", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "state_list", ".", "append", "(", "state", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "", "input_list", "=", "np", ".", "array", "(", "input_list", ")", "\n", "output_list", "=", "np", ".", "array", "(", "output_list", ")", "\n", "state_list", "=", "np", ".", "array", "(", "state_list", ")", "\n", "\n", "return", "state_list", ",", "input_list", ",", "output_list", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.generate_data": [[1344, 1418], ["numpy.random.seed", "numpy.meshgrid", "numpy.reshape", "range", "range", "enumerate", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "worlds.DoublePendulum.closed_loop_sim", "numpy.array.append", "numpy.array.append", "numpy.array.append", "worlds.DoublePendulum.simulate_free", "numpy.array.append", "numpy.array.append", "numpy.array.append", "range", "worlds.DoublePendulum.closed_loop_sim", "numpy.array.append", "numpy.array.append", "numpy.array.append", "worlds.DoublePendulum.simulate_free", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.random.rand", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.simulate_free", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.simulate_free"], ["", "def", "generate_data", "(", "self", ",", "batch_size", ",", "n_steps", ",", "noise_std", "=", "0.5", ")", ":", "\n", "\n", "        ", "np", ".", "random", ".", "seed", "(", "11111", ")", "\n", "\n", "input_list_train", "=", "[", "]", "\n", "output_list_train", "=", "[", "]", "\n", "state_list_train", "=", "[", "]", "\n", "input_list_test", "=", "[", "]", "\n", "output_list_test", "=", "[", "]", "\n", "state_list_test", "=", "[", "]", "\n", "\n", "targets", "=", "np", ".", "meshgrid", "(", "[", "0", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", "]", ",", "[", "0.", "]", ",", "[", "0.", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", "]", ",", "[", "0", "]", ")", "\n", "targets", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "targets", ")", ".", "T", ",", "[", "9", ",", "1", ",", "4", "]", ")", "\n", "\n", "init_states_train", "=", "[", "np", ".", "pi", "*", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "4", ")", "*", "2", "-", "1", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "i", "=", "0", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "target", "=", "targets", "[", "i", "]", "\n", "i", "=", "(", "i", "+", "1", ")", "%", "targets", ".", "shape", "[", "0", "]", "\n", "\n", "if", "batch", "<", "batch_size", "/", "2", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "closed_loop_sim", "(", "init_states_train", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "\n", "target", "=", "target", ",", "noise_std", "=", "noise_std", ")", "\n", "input_list_train", ".", "append", "(", "inputs", ")", "\n", "output_list_train", ".", "append", "(", "outputs", ")", "\n", "state_list_train", ".", "append", "(", "states", ")", "\n", "\n", "", "else", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "simulate_free", "(", "init_states_train", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "noise_std", "=", "noise_std", ")", "\n", "\n", "input_list_train", ".", "append", "(", "inputs", ")", "\n", "output_list_train", ".", "append", "(", "outputs", ")", "\n", "state_list_train", ".", "append", "(", "states", ")", "\n", "\n", "", "", "init_states_test", "=", "[", "np", ".", "pi", "*", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "4", ")", "*", "2", "-", "1", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "i", "=", "0", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "target", "=", "targets", "[", "i", "]", "\n", "i", "=", "(", "i", "+", "1", ")", "%", "targets", ".", "shape", "[", "0", "]", "\n", "\n", "if", "batch", "<", "batch_size", "/", "2", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "closed_loop_sim", "(", "init_states_test", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "\n", "target", "=", "target", ",", "noise_std", "=", "noise_std", ")", "\n", "input_list_test", ".", "append", "(", "inputs", ")", "\n", "output_list_test", ".", "append", "(", "outputs", ")", "\n", "state_list_test", ".", "append", "(", "states", ")", "\n", "\n", "", "else", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "simulate_free", "(", "init_states_test", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "\n", "noise_std", "=", "noise_std", ")", "\n", "\n", "input_list_test", ".", "append", "(", "inputs", ")", "\n", "output_list_test", ".", "append", "(", "outputs", ")", "\n", "state_list_test", ".", "append", "(", "states", ")", "\n", "\n", "", "", "for", "i", ",", "state", "in", "enumerate", "(", "init_states_train", ")", ":", "\n", "            ", "init_states_train", "[", "i", "]", "=", "state", "[", "0", "]", "\n", "\n", "", "for", "i", ",", "state", "in", "enumerate", "(", "init_states_test", ")", ":", "\n", "            ", "init_states_test", "[", "i", "]", "=", "state", "[", "0", "]", "\n", "\n", "", "init_states_train", "=", "np", ".", "array", "(", "init_states_train", ")", "\n", "init_states_test", "=", "np", ".", "array", "(", "init_states_test", ")", "\n", "input_list_train", "=", "np", ".", "array", "(", "input_list_train", ")", "\n", "state_list_train", "=", "np", ".", "array", "(", "state_list_train", ")", "\n", "output_list_train", "=", "np", ".", "array", "(", "output_list_train", ")", "\n", "input_list_test", "=", "np", ".", "array", "(", "input_list_test", ")", "\n", "state_list_test", "=", "np", ".", "array", "(", "state_list_test", ")", "\n", "output_list_test", "=", "np", ".", "array", "(", "output_list_test", ")", "\n", "\n", "return", "input_list_train", ",", "state_list_train", ",", "output_list_train", ",", "input_list_test", ",", "state_list_test", ",", "output_list_test", ",", "init_states_train", ",", "init_states_test", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.generate_data_2": [[1419, 1493], ["numpy.random.seed", "numpy.meshgrid", "numpy.reshape", "range", "range", "enumerate", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "worlds.DoublePendulum.closed_loop_sim", "numpy.array.append", "numpy.array.append", "numpy.array.append", "worlds.DoublePendulum.simulate_free", "numpy.array.append", "numpy.array.append", "numpy.array.append", "range", "worlds.DoublePendulum.closed_loop_sim", "numpy.array.append", "numpy.array.append", "numpy.array.append", "worlds.DoublePendulum.simulate_free", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.random.rand", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.simulate_free", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.closed_loop_sim", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.simulate_free"], ["", "def", "generate_data_2", "(", "self", ",", "batch_size", ",", "n_steps", ",", "noise_std", "=", "0.5", ")", ":", "\n", "\n", "        ", "np", ".", "random", ".", "seed", "(", "11111", ")", "\n", "\n", "input_list_train", "=", "[", "]", "\n", "output_list_train", "=", "[", "]", "\n", "state_list_train", "=", "[", "]", "\n", "input_list_test", "=", "[", "]", "\n", "output_list_test", "=", "[", "]", "\n", "state_list_test", "=", "[", "]", "\n", "\n", "targets", "=", "np", ".", "meshgrid", "(", "[", "0", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", "]", ",", "[", "0.", "]", ",", "[", "0.", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", "]", ",", "[", "0", "]", ")", "\n", "targets", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "targets", ")", ".", "T", ",", "[", "9", ",", "1", ",", "4", "]", ")", "\n", "\n", "init_states_train", "=", "[", "np", ".", "pi", "*", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "4", ")", "*", "2", "-", "1", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "i", "=", "0", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "target", "=", "targets", "[", "i", "]", "\n", "i", "=", "(", "i", "+", "1", ")", "%", "targets", ".", "shape", "[", "0", "]", "\n", "\n", "if", "batch", "<", "batch_size", "/", "2", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "closed_loop_sim", "(", "init_states_train", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "\n", "target", "=", "target", ",", "noise_std", "=", "noise_std", ")", "\n", "input_list_train", ".", "append", "(", "inputs", ")", "\n", "output_list_train", ".", "append", "(", "outputs", ")", "\n", "state_list_train", ".", "append", "(", "states", ")", "\n", "\n", "", "else", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "simulate_free", "(", "init_states_train", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "noise_std", "=", "noise_std", ")", "\n", "\n", "input_list_train", ".", "append", "(", "inputs", ")", "\n", "output_list_train", ".", "append", "(", "outputs", ")", "\n", "state_list_train", ".", "append", "(", "states", ")", "\n", "\n", "", "", "init_states_test", "=", "[", "np", ".", "pi", "*", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "4", ")", "*", "2", "-", "1", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "i", "=", "0", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "target", "=", "targets", "[", "i", "]", "\n", "i", "=", "(", "i", "+", "1", ")", "%", "targets", ".", "shape", "[", "0", "]", "\n", "\n", "if", "batch", "<", "batch_size", "/", "2", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "closed_loop_sim", "(", "init_states_test", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "\n", "target", "=", "target", ",", "noise_std", "=", "noise_std", ")", "\n", "input_list_test", ".", "append", "(", "inputs", ")", "\n", "output_list_test", ".", "append", "(", "outputs", ")", "\n", "state_list_test", ".", "append", "(", "states", ")", "\n", "\n", "", "else", ":", "\n", "                ", "states", ",", "inputs", ",", "outputs", "=", "self", ".", "simulate_free", "(", "init_states_test", "[", "batch", "]", ",", "steps", "=", "n_steps", ",", "\n", "noise_std", "=", "noise_std", ")", "\n", "\n", "input_list_test", ".", "append", "(", "inputs", ")", "\n", "output_list_test", ".", "append", "(", "outputs", ")", "\n", "state_list_test", ".", "append", "(", "states", ")", "\n", "\n", "", "", "for", "i", ",", "state", "in", "enumerate", "(", "init_states_train", ")", ":", "\n", "            ", "init_states_train", "[", "i", "]", "=", "state", "[", "0", "]", "\n", "\n", "", "for", "i", ",", "state", "in", "enumerate", "(", "init_states_test", ")", ":", "\n", "            ", "init_states_test", "[", "i", "]", "=", "state", "[", "0", "]", "\n", "\n", "", "init_states_train", "=", "np", ".", "array", "(", "init_states_train", ")", "\n", "init_states_test", "=", "np", ".", "array", "(", "init_states_test", ")", "\n", "input_list_train", "=", "np", ".", "array", "(", "input_list_train", ")", "\n", "state_list_train", "=", "np", ".", "array", "(", "state_list_train", ")", "\n", "output_list_train", "=", "np", ".", "array", "(", "output_list_train", ")", "\n", "input_list_test", "=", "np", ".", "array", "(", "input_list_test", ")", "\n", "state_list_test", "=", "np", ".", "array", "(", "state_list_test", ")", "\n", "output_list_test", "=", "np", ".", "array", "(", "output_list_test", ")", "\n", "\n", "return", "input_list_train", ",", "state_list_train", ",", "output_list_train", ",", "input_list_test", ",", "state_list_test", ",", "output_list_test", ",", "init_states_train", ",", "init_states_test", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.evaluate_performance": [[1494, 1499], ["range", "p_idx.append", "numpy.sqrt", "numpy.sum", "numpy.square", "numpy.sum", "numpy.square", "numpy.mean"], "methods", ["None"], ["", "def", "evaluate_performance", "(", "self", ",", "predictions", ",", "true_output", ")", ":", "\n", "        ", "p_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", ":", "\n", "            ", "p_idx", ".", "append", "(", "100.", "*", "(", "1.", "-", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "np", ".", "square", "(", "predictions", "[", ":", ",", ":", ",", "i", "]", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "mean", "(", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", "-", "true_output", "[", ":", ",", ":", ",", "i", "]", ")", ")", ")", ")", ")", ")", "\n", "", "return", "p_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.visualize_results": [[1500, 1539], ["worlds.DoublePendulum.evaluate_performance", "matplotlib.subplots", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_ylabel", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_xlabel", "ax[].set_ylabel", "matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_ylabel", "ax[].plot", "ax[].plot", "ax[].legend", "ax[].set_ylabel", "ax[].set_xlabel", "numpy.arange", "ax[].set_title", "ax[].set_title", "ax[].set_title", "ax[].set_title"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.DoublePendulum.evaluate_performance"], ["", "def", "visualize_results", "(", "self", ",", "predictions_train", ",", "output_train", ",", "predictions_test", ",", "output_test", ",", "network", ")", ":", "\n", "        ", "time", "=", "np", ".", "arange", "(", "output_train", ".", "shape", "[", "1", "]", ")", "*", "self", ".", "Ts", "\n", "\n", "performance_idx", "=", "self", ".", "evaluate_performance", "(", "predictions_test", ",", "output_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'Angle_1 predictions on training set'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "output_train", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'real'", ")", "\n", "ax", "[", "0", "]", ".", "legend", "(", ")", "\n", "ax", "[", "0", "]", ".", "set_ylabel", "(", "'Angle [rad]'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Angle_2 predictions on training set'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "predictions_train", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "output_train", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'real'", ")", "\n", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "ax", "[", "1", "]", ".", "set_xlabel", "(", "'Time [s]'", ")", "\n", "ax", "[", "1", "]", ".", "set_ylabel", "(", "'Angle [rad]'", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "if", "network", ".", "observer_name", "is", "not", "None", ":", "\n", "            ", "ax", "[", "0", "]", ".", "set_title", "(", "'Angle_1 predictions on test set, {} network + {} filter, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "\n", "network", ".", "observer_name", ",", "\n", "performance_idx", "[", "0", "]", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Angle_2 predictions on test set, {} network + {} filter, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "\n", "network", ".", "observer_name", ",", "\n", "performance_idx", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "ax", "[", "0", "]", ".", "set_title", "(", "'Angle_1 predictions on test set, {} network, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "performance_idx", "[", "0", "]", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Angle_2 predictions on test set, {} network, fit: {:.2f} %'", ".", "format", "(", "network", ".", "name", ",", "performance_idx", "[", "1", "]", ")", ")", "\n", "\n", "", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "time", ",", "output_test", "[", "0", ",", ":", ",", "0", "]", ",", "label", "=", "'real'", ")", "\n", "ax", "[", "0", "]", ".", "legend", "(", ")", "\n", "ax", "[", "0", "]", ".", "set_ylabel", "(", "'Angle [rad]'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "predictions_test", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'predicted'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "time", ",", "output_test", "[", "0", ",", ":", ",", "1", "]", ",", "label", "=", "'real'", ")", "\n", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "ax", "[", "1", "]", ".", "set_ylabel", "(", "'Angle [rad]'", ")", "\n", "ax", "[", "1", "]", ".", "set_xlabel", "(", "'Time [s]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.dlqr": [[13, 33], ["numpy.matrix", "numpy.array", "scipy.linalg.eig", "scipy.linalg.eig", "scipy.linalg.solve_discrete_are", "scipy.linalg.solve_discrete_are", "scipy.linalg.inv", "scipy.linalg.inv"], "function", ["None"], ["def", "dlqr", "(", "A", ",", "B", ",", "Q", ",", "R", ")", ":", "\n", "    ", "\"\"\"Solve the discrete time lqr controller.\n\n\n    x[k+1] = A x[k] + B u[k]\n\n    cost = sum x[k].T*Q*x[k] + u[k].T*R*u[k]\n    \"\"\"", "\n", "# ref Bertsekas, p.151", "\n", "\n", "# first, try to solve the riccati equation", "\n", "X", "=", "np", ".", "matrix", "(", "scipy", ".", "linalg", ".", "solve_discrete_are", "(", "A", ",", "B", ",", "Q", ",", "R", ")", ")", "\n", "\n", "# compute the LQR gain", "\n", "K", "=", "np", ".", "array", "(", "scipy", ".", "linalg", ".", "inv", "(", "B", ".", "T", "@", "X", "@", "B", "+", "R", ")", "*", "(", "B", ".", "T", "@", "X", "@", "A", ")", ")", "\n", "# K = np.array(K)", "\n", "\n", "eigVals", ",", "eigVecs", "=", "scipy", ".", "linalg", ".", "eig", "(", "A", "-", "B", "@", "K", ")", "\n", "\n", "return", "K", ",", "X", ",", "eigVals", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.dkf": [[34, 45], ["numpy.matrix", "numpy.array", "scipy.linalg.eig", "scipy.linalg.eig", "scipy.linalg.solve_discrete_are", "scipy.linalg.solve_discrete_are", "numpy.linalg.inv"], "function", ["None"], ["", "def", "dkf", "(", "A", ",", "C", ",", "Q", ",", "R", ")", ":", "\n", "\n", "# Solve Riccati equation", "\n", "    ", "X", "=", "np", ".", "matrix", "(", "scipy", ".", "linalg", ".", "solve_discrete_are", "(", "A", ".", "T", ",", "C", ".", "T", ",", "Q", ",", "R", ")", ")", "\n", "\n", "# Compute the Kalman Gain", "\n", "L", "=", "np", ".", "array", "(", "X", "@", "C", ".", "T", "@", "np", ".", "linalg", ".", "inv", "(", "R", "+", "C", "@", "X", "@", "C", ".", "T", ")", ")", "\n", "\n", "eigVals", ",", "eigVecs", "=", "scipy", ".", "linalg", ".", "eig", "(", "A", "-", "L", "@", "C", ")", "\n", "\n", "return", "L", ",", "X", ",", "eigVals", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.solve": [[47, 52], ["functools.partial", "scipy.integrate.solve_ivp", "scipy.integrate.solve_ivp", "numpy.reshape"], "function", ["None"], ["", "def", "solve", "(", "f", ",", "initial_state", ",", "input_value", ",", "dt", "=", "0.001", ")", ":", "\n", "    ", "\"\"\"Solve the model ode\"\"\"", "\n", "fun", "=", "partial", "(", "f", ",", "input_value", "=", "input_value", ")", "\n", "sol", "=", "scipy", ".", "integrate", ".", "solve_ivp", "(", "fun", ",", "[", "0", ",", "dt", "]", ",", "initial_state", "[", "0", "]", ")", "\n", "return", "np", ".", "reshape", "(", "sol", ".", "y", "[", ":", ",", "-", "1", "]", ",", "[", "1", ",", "sol", ".", "y", "[", ":", ",", "-", "1", "]", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.main": [[1541, 1563], ["worlds.Two_tank_model", "mat().astype", "mat", "worlds.Two_tank_model.run", "print", "print", "mat", "numpy.random.randn", "worlds.AUV_model.run", "print", "numpy.random.randn", "numpy.ones", "mat", "worlds.AUV_model"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.worlds.CSTR.run"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "system_to_test", "=", "'tanks'", "\n", "\n", "n_steps", "=", "500", "\n", "if", "system_to_test", "==", "'tanks'", ":", "\n", "        ", "model", "=", "Two_tank_model", "(", ")", "\n", "x_0", "=", "mat", "(", "[", "-", "0.436", ",", "0.5276", ",", "13.746", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "y_0", "=", "mat", "(", "[", "7.025", "]", ")", "\n", "u_", "=", "15.6", "\n", "dist_", "=", "0.55", "\n", "u_series", "=", "np", ".", "random", ".", "randn", "(", "n_steps", ",", "1", ")", "+", "u_", "\n", "dist_series", "=", "np", ".", "ones", "(", "[", "n_steps", ",", "1", "]", ")", "*", "dist_", "\n", "state_series", ",", "output_series", "=", "model", ".", "run", "(", "x_0", ",", "u_series", ",", "dist_series", ",", "n_steps", ")", "\n", "print", "(", "output_series", ".", "shape", ")", "\n", "print", "(", "state_series", ".", "shape", ")", "\n", "\n", "", "system_to_test", "=", "'AUV'", "\n", "if", "system_to_test", "==", "'AUV'", ":", "\n", "        ", "x_0", "=", "mat", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "u_series", "=", "np", ".", "random", ".", "randn", "(", "n_steps", ",", "2", ")", "\n", "state_series", "=", "AUV_model", "(", ")", ".", "run", "(", "x_0", ",", "u_series", ",", "500", ")", "\n", "print", "(", "state_series", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.fix_angular_value": [[44, 50], ["None"], "function", ["None"], ["def", "fix_angular_value", "(", "angle", ")", ":", "\n", "    ", "while", "angle", ">=", "DEGREES_360", ":", "\n", "        ", "angle", "-=", "DEGREES_360", "\n", "", "while", "angle", "<", "0", ":", "\n", "        ", "angle", "+=", "DEGREES_360", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.atanxy": [[52, 54], ["math.atan2"], "function", ["None"], ["", "def", "atanxy", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "math", ".", "atan2", "(", "y", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.angle_between_points": [[56, 64], ["anglecalc2.fix_angular_value", "anglecalc2.atanxy"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.fix_angular_value", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.atanxy"], ["", "def", "angle_between_points", "(", "source_point", ",", "target_point", ")", ":", "\n", "    ", "source_x", ",", "source_y", "=", "source_point", "\n", "target_x", ",", "target_y", "=", "target_point", "\n", "\n", "dx", "=", "target_x", "-", "source_x", "\n", "dy", "=", "target_y", "-", "source_y", "\n", "\n", "return", "fix_angular_value", "(", "atanxy", "(", "dx", ",", "dy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.angular_steering_error": [[66, 72], ["anglecalc2.angle_between_points", "anglecalc2.fix_angular_value"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.angle_between_points", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.fix_angular_value"], ["", "def", "angular_steering_error", "(", "source_point", ",", "source_angle", ",", "target_point", ")", ":", "\n", "    ", "target_angle", "=", "angle_between_points", "(", "source_point", ",", "target_point", ")", "\n", "target_angle", "=", "fix_angular_value", "(", "target_angle", "-", "source_angle", ")", "\n", "if", "target_angle", ">", "DEGREES_180", ":", "\n", "        ", "target_angle", "-=", "DEGREES_360", "\n", "", "return", "target_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.hitting_position": [[74, 235], ["Exception", "ValueError", "ValueError", "anglecalc2.fix_angular_value", "Exception", "math.tan", "math.tan", "math.tan", "math.tan", "math.tan", "math.tan", "math.tan", "Exception", "math.tan"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.fix_angular_value"], ["", "def", "hitting_position", "(", "source_point", ",", "source_angle", ",", "*", ",", "until_x", "=", "None", ",", "until_y", "=", "None", ",", "fix_angles", "=", "True", ")", ":", "\n", "    ", "if", "until_x", "is", "None", "and", "until_y", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Either until_x or until_y was needed but got none of them'", ")", "\n", "", "if", "until_x", "is", "not", "None", "and", "until_y", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'One of until_x or until_y was needed but got both of them'", ")", "\n", "\n", "", "if", "fix_angles", ":", "\n", "        ", "source_angle", "=", "fix_angular_value", "(", "source_angle", ")", "\n", "", "source_x", ",", "source_y", "=", "source_point", "\n", "\n", "if", "until_x", "is", "not", "None", ":", "\n", "        ", "if", "until_x", "==", "source_x", ":", "\n", "            ", "return", "source_point", "\n", "", "elif", "until_x", "<", "source_x", ":", "\n", "#  until", "\n", "#    |", "\n", "#    |", "\n", "#    |   o", "\n", "#    |", "\n", "#    |", "\n", "            ", "if", "(", "DEGREES_0", "<=", "source_angle", "<=", "DEGREES_90", ")", "or", "(", "DEGREES_270", "<=", "source_angle", "<=", "DEGREES_360", ")", ":", "\n", "                ", "return", "None", "\n", "", "elif", "DEGREES_90", "<=", "source_angle", "<", "DEGREES_180", ":", "\n", "# towards top left", "\n", "# |", "\n", "# |\\", "\n", "# | \\", "\n", "# |  \\", "\n", "# |   \\", "\n", "# |    \\", "\n", "# |-----o", "\n", "# | dx", "\n", "                ", "alpha", "=", "DEGREES_180", "-", "source_angle", "\n", "dx", "=", "source_x", "-", "until_x", "\n", "dy", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dx", "\n", "return", "(", "until_x", ",", "source_y", "+", "dy", ")", "\n", "", "elif", "DEGREES_180", "<=", "source_angle", "<", "DEGREES_270", ":", "\n", "# towards bottom left", "\n", "# |", "\n", "# | dx", "\n", "# |-----o", "\n", "# |    /", "\n", "# |   /", "\n", "# |  /", "\n", "# | /", "\n", "# |/", "\n", "                ", "alpha", "=", "source_angle", "-", "DEGREES_180", "\n", "dx", "=", "source_x", "-", "until_x", "\n", "dy", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dx", "\n", "return", "until_x", ",", "source_y", "-", "dy", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"execution should not have reached here\"", "\n", "", "", "elif", "until_x", ">", "source_x", ":", "\n", "#    until", "\n", "#      |", "\n", "#      |", "\n", "# o    |", "\n", "#      |", "\n", "#      |", "\n", "            ", "if", "DEGREES_90", "<=", "source_angle", "<=", "DEGREES_270", ":", "\n", "                ", "return", "None", "\n", "", "elif", "0", "<=", "source_angle", "<", "DEGREES_90", ":", "\n", "# towards top right", "\n", "#      |", "\n", "#     /|", "\n", "#    / |", "\n", "#   /  |", "\n", "#  /   |", "\n", "# o----|", "\n", "#   dx |", "\n", "#      |", "\n", "                ", "alpha", "=", "source_angle", "\n", "dx", "=", "until_x", "-", "source_x", "\n", "dy", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dx", "\n", "return", "until_x", ",", "source_y", "+", "dy", "\n", "", "elif", "DEGREES_270", "<=", "source_angle", "<", "DEGREES_360", ":", "\n", "# towards bottom right", "\n", "#      |", "\n", "#   dx |", "\n", "# o----|", "\n", "#  \\   |", "\n", "#   \\  |", "\n", "#    \\ |", "\n", "#     \\|", "\n", "#      |", "\n", "                ", "dx", "=", "until_x", "-", "source_x", "\n", "alpha", "=", "DEGREES_360", "-", "source_angle", "\n", "dy", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dx", "\n", "return", "until_x", ",", "source_y", "-", "dy", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"execution should not have reached here\"", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"execution should not have reached here\"", "\n", "", "", "elif", "until_y", "is", "not", "None", ":", "\n", "        ", "if", "source_y", "==", "until_y", ":", "\n", "            ", "return", "source_x", ",", "source_y", "\n", "", "elif", "until_y", ">", "source_y", ":", "\n", "# ------------", "\n", "#", "\n", "#     o", "\n", "            ", "if", "source_angle", "==", "0", "or", "(", "DEGREES_180", "<=", "source_angle", "<=", "DEGREES_360", ")", ":", "\n", "                ", "return", "None", "\n", "", "elif", "0", "<=", "source_angle", "<", "DEGREES_90", ":", "\n", "#", "\n", "# ------------", "\n", "#     |  /", "\n", "#  dy | /", "\n", "#     |/", "\n", "#     o", "\n", "                ", "alpha", "=", "DEGREES_90", "-", "source_angle", "\n", "dy", "=", "until_y", "-", "source_y", "\n", "dx", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dy", "\n", "# print(\"towards top right\")", "\n", "# print(\"dy\", dy, \"dx\", dx, \"source_angle\", source_angle)  # DEBUG", "\n", "return", "source_x", "+", "dx", ",", "until_y", "\n", "", "elif", "DEGREES_90", "<=", "source_angle", "<", "DEGREES_180", ":", "\n", "#", "\n", "# ------------", "\n", "#  \\  |", "\n", "#   \\ | dy", "\n", "#    \\|", "\n", "#     o", "\n", "                ", "alpha", "=", "source_angle", "-", "DEGREES_90", "\n", "dy", "=", "until_y", "-", "source_y", "\n", "dx", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dy", "\n", "# print(\"towards top left\")", "\n", "# print(\"dy\", dy, \"dx\", dx, \"alpha\", alpha, \"source_angle\", source_angle)  # DEBUG", "\n", "return", "source_x", "-", "dx", ",", "until_y", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"execution should not have reached here\"", "\n", "", "", "elif", "until_y", "<", "source_y", ":", "\n", "#     o", "\n", "#", "\n", "# ------------", "\n", "            ", "if", "DEGREES_0", "<=", "source_angle", "<=", "DEGREES_180", ":", "\n", "                ", "return", "None", "\n", "", "elif", "DEGREES_270", "<=", "source_angle", "<=", "DEGREES_360", ":", "\n", "#     o", "\n", "#     |\\", "\n", "#     | \\", "\n", "#     |  \\", "\n", "# ------------", "\n", "                ", "alpha", "=", "source_angle", "-", "DEGREES_270", "\n", "dy", "=", "source_y", "-", "until_y", "\n", "dx", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dy", "\n", "return", "source_x", "+", "dx", ",", "until_y", "\n", "", "elif", "DEGREES_180", "<=", "source_angle", "<", "DEGREES_270", ":", "\n", "#     o", "\n", "#    /|", "\n", "#   / |", "\n", "#  /  |", "\n", "# ------------", "\n", "                ", "alpha", "=", "DEGREES_270", "-", "source_angle", "\n", "dy", "=", "source_y", "-", "until_y", "\n", "dx", "=", "math", ".", "tan", "(", "alpha", ")", "*", "dy", "\n", "return", "source_x", "-", "dx", ",", "until_y", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Execution should not have reached here\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Execution should not have reached here\"", ")", "\n", "", "", "raise", "Exception", "(", "\"Execution should not have reached here\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.distance_to_wall": [[237, 266], ["float", "anglecalc2.fix_angular_value", "anglecalc2.hitting_position", "anglecalc2.hitting_position", "len", "scipy.spatial.distance.euclidean", "hits.append", "hits.append"], "function", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.fix_angular_value", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.hitting_position", "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.hitting_position"], ["", "def", "distance_to_wall", "(", "source_point", ",", "angle", ",", "point_lb", ",", "point_ub", ",", "fix_angles", "=", "True", ")", ":", "\n", "    ", "source_x", ",", "source_y", "=", "source_point", "\n", "x1", ",", "y1", "=", "point_lb", "\n", "x2", ",", "y2", "=", "point_ub", "\n", "assert", "(", "x1", "<=", "source_x", "<=", "x2", "and", "y1", "<=", "source_y", "<=", "y2", ")", ",", "\"The source point is not within the specified box\"", "\n", "if", "fix_angles", ":", "\n", "        ", "angle", "=", "fix_angular_value", "(", "angle", ")", "\n", "\n", "", "hits", "=", "[", "]", "\n", "\n", "for", "x", "in", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "hit", "=", "hitting_position", "(", "source_point", ",", "angle", ",", "until_x", "=", "x", ")", "\n", "if", "hit", "is", "not", "None", ":", "\n", "            ", "hits", ".", "append", "(", "hit", ")", "\n", "\n", "", "", "for", "y", "in", "(", "y1", ",", "y2", ")", ":", "\n", "        ", "hit", "=", "hitting_position", "(", "source_point", ",", "angle", ",", "until_y", "=", "y", ")", "\n", "if", "hit", "is", "not", "None", ":", "\n", "            ", "hits", ".", "append", "(", "hit", ")", "\n", "\n", "", "", "assert", "len", "(", "hits", ")", ">", "0", ",", "\"this should not have happened\"", "\n", "\n", "min_distance", "=", "float", "(", "'inf'", ")", "\n", "for", "hit", "in", "hits", ":", "\n", "        ", "dist_hit", "=", "euclidean", "(", "source_point", ",", "hit", ")", "\n", "if", "dist_hit", "<", "min_distance", ":", "\n", "            ", "min_distance", "=", "dist_hit", "\n", "\n", "", "", "return", "min_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.worlds.anglecalc2.passive_transform": [[268, 276], ["math.sin", "math.cos", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "passive_transform", "(", "point", ",", "angle", ")", ":", "\n", "    ", "x", ",", "y", "=", "point", "\n", "sin_a", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cos_a", "=", "math", ".", "cos", "(", "angle", ")", "\n", "Rinv", "=", "np", ".", "array", "(", "[", "[", "cos_a", ",", "sin_a", "]", ",", "[", "-", "sin_a", ",", "cos_a", "]", "]", ",", "dtype", "=", "float", ")", "\n", "v", "=", "np", ".", "array", "(", "[", "[", "x", "]", ",", "[", "y", "]", "]", ",", "dtype", "=", "float", ")", "\n", "result", "=", "Rinv", "@", "v", "\n", "return", "-", "result", "[", "1", ",", "0", "]", ",", "result", "[", "0", ",", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.r_squared": [[4, 29], ["numpy.sum", "numpy.mean", "numpy.sum"], "function", ["None"], ["def", "r_squared", "(", "y_true", ",", "y_pred", ",", "time_axis", "=", "0", ")", ":", "\n", "    ", "\"\"\" Computes the R-square index.\n\n    The R-squared index is computed separately on each channel.\n\n    Parameters\n    ----------\n    y_true : np.array\n        Array of true values.  If must be at least 2D.\n    y_pred : np.array\n        Array of predicted values.  If must be compatible with y_true'\n    time_axis : int\n        Time axis. All other axes define separate channels.\n\n    Returns\n    -------\n    r_squared_val : np.array\n        Array of r_squared value.\n    \"\"\"", "\n", "\n", "SSE", "=", "np", ".", "sum", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ",", "axis", "=", "time_axis", ")", "\n", "y_mean", "=", "np", ".", "mean", "(", "y_true", ",", "axis", "=", "time_axis", ",", "keepdims", "=", "True", ")", "\n", "SST", "=", "np", ".", "sum", "(", "(", "y_true", "-", "y_mean", ")", "**", "2", ",", "axis", "=", "time_axis", ")", "\n", "\n", "return", "1.0", "-", "SSE", "/", "SST", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.error_rmse": [[31, 55], ["numpy.mean", "numpy.sqrt"], "function", ["None"], ["", "def", "error_rmse", "(", "y_true", ",", "y_pred", ",", "time_axis", "=", "0", ")", ":", "\n", "    ", "\"\"\" Computes the Root Mean Square Error (RMSE).\n\n    The RMSE index is computed separately on each channel.\n\n    Parameters\n    ----------\n    y_true : np.array\n        Array of true values.  If must be at least 2D.\n    y_pred : np.array\n        Array of predicted values.  If must be compatible with y_true'\n    time_axis : int\n        Time axis. All other axes define separate channels.\n\n    Returns\n    -------\n    RMSE : np.array\n        Array of r_squared value.\n\n    \"\"\"", "\n", "\n", "SSE", "=", "np", ".", "mean", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ",", "axis", "=", "time_axis", ")", "\n", "RMSE", "=", "np", ".", "sqrt", "(", "SSE", ")", "\n", "return", "RMSE", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.error_nrmse": [[57, 82], ["numpy.mean", "numpy.sqrt", "numpy.std"], "function", ["None"], ["", "def", "error_nrmse", "(", "y_true", ",", "y_pred", ",", "time_axis", "=", "0", ")", ":", "\n", "    ", "\"\"\" Computes the Normalized Root Mean Square Error (NRMSE).\n\n    The NRMSE index is computed separately on each channel.\n\n    Parameters\n    ----------\n    y_true : np.array\n        Array of true values.  If must be at least 2D.\n    y_pred : np.array\n        Array of predicted values.  If must be compatible with y_true'\n    time_axis : int\n        Time axis. All other axes define separate channels.\n\n    Returns\n    -------\n    NRMSE : np.array\n        Array of r_squared value.\n\n    \"\"\"", "\n", "\n", "SSE", "=", "np", ".", "mean", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ",", "axis", "=", "time_axis", ")", "\n", "RMSE", "=", "np", ".", "sqrt", "(", "SSE", ")", "\n", "NRMSE", "=", "RMSE", "/", "np", ".", "std", "(", "y_true", ",", "axis", "=", "time_axis", ")", "\n", "return", "NRMSE", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.error_mean": [[84, 106], ["numpy.mean"], "function", ["None"], ["", "def", "error_mean", "(", "y_true", ",", "y_pred", ",", "time_axis", "=", "0", ")", ":", "\n", "    ", "\"\"\" Computes the error mean value.\n\n    The RMSE index is computed separately on each channel.\n\n    Parameters\n    ----------\n    y_true : np.array\n        Array of true values.  If must be at least 2D.\n    y_pred : np.array\n        Array of predicted values.  If must be compatible with y_true'\n    time_axis : int\n        Time axis. All other axes define separate channels.\n\n    Returns\n    -------\n    e_mean : np.array\n        Array of error means.\n    \"\"\"", "\n", "\n", "e_mean", "=", "np", ".", "mean", "(", "y_true", "-", "y_pred", ",", "axis", "=", "time_axis", ")", "\n", "return", "e_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.error_mae": [[108, 130], ["numpy.mean", "numpy.abs"], "function", ["None"], ["", "def", "error_mae", "(", "y_true", ",", "y_pred", ",", "time_axis", "=", "0", ")", ":", "\n", "    ", "\"\"\" Computes the error Mean Absolute Value (MAE)\n\n    The RMSE index is computed separately on each channel.\n\n    Parameters\n    ----------\n    y_true : np.array\n        Array of true values.  If must be at least 2D.\n    y_pred : np.array\n        Array of predicted values.  If must be compatible with y_true'\n    time_axis : int\n        Time axis. All other axes define separate channels.\n\n    Returns\n    -------\n    e_mean : np.array\n        Array of error mean absolute values.\n    \"\"\"", "\n", "\n", "e_mean", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "y_true", "-", "y_pred", ")", ",", "axis", "=", "time_axis", ")", "\n", "return", "e_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.torchid.metrics.fit_index": [[131, 161], ["numpy.linalg.norm", "numpy.mean", "numpy.linalg.norm"], "function", ["None"], ["", "def", "fit_index", "(", "y_true", ",", "y_pred", ",", "time_axis", "=", "0", ")", ":", "\n", "    ", "\"\"\" Computes the per-channel fit index.\n\n    The fit index is commonly used in System Identification. See the definitionin the System Identification Toolbox\n    or in the paper 'Nonlinear System Identification: A User-Oriented Road Map',\n    https://arxiv.org/abs/1902.00683, page 31.\n    The fit index is computed separately on each channel.\n\n    Parameters\n    ----------\n    y_true : np.array\n        Array of true values.  If must be at least 2D.\n    y_pred : np.array\n        Array of predicted values.  If must be compatible with y_true'\n    time_axis : int\n        Time axis. All other axes define separate channels.\n\n    Returns\n    -------\n    fit_val : np.array\n        Array of r_squared value.\n\n    \"\"\"", "\n", "\n", "err_norm", "=", "np", ".", "linalg", ".", "norm", "(", "y_true", "-", "y_pred", ",", "axis", "=", "time_axis", ",", "ord", "=", "2", ")", "# || y - y_pred ||", "\n", "y_mean", "=", "np", ".", "mean", "(", "y_true", ",", "axis", "=", "time_axis", ")", "\n", "err_mean_norm", "=", "np", ".", "linalg", ".", "norm", "(", "y_true", "-", "y_mean", ",", "ord", "=", "2", ")", "# || y - y_mean ||", "\n", "fit_val", "=", "100", "*", "(", "1", "-", "err_norm", "/", "err_mean_norm", ")", "\n", "\n", "return", "fit_val", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.NeuralStateSpaceModel.__init__": [[23, 39], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "ssmodels_dt.NeuralStateSpaceModel.net.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_x", ",", "n_u", ",", "n_feat", "=", "64", ",", "init_small", "=", "True", ")", ":", "\n", "        ", "super", "(", "NeuralStateSpaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_u", "=", "n_u", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_x", "+", "n_u", ",", "n_feat", ")", ",", "# 2 states, 1 input", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "n_x", ")", "\n", ")", "\n", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.NeuralStateSpaceModel.forward": [[40, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_dt.NeuralStateSpaceModel.net"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "X", ",", "U", ")", ":", "\n", "        ", "XU", "=", "torch", ".", "cat", "(", "(", "X", ",", "U", ")", ",", "-", "1", ")", "\n", "DX", "=", "self", ".", "net", "(", "XU", ")", "\n", "return", "DX", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.DeepNeuralStateSpaceModel.__init__": [[66, 87], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "ssmodels_dt.DeepNeuralStateSpaceModel.net.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_x", ",", "n_u", ",", "n_feat", "=", "64", ",", "scale_dx", "=", "1.0", ",", "init_small", "=", "True", ")", ":", "\n", "        ", "super", "(", "DeepNeuralStateSpaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_u", "=", "n_u", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "scale_dx", "=", "scale_dx", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_x", "+", "n_u", ",", "n_feat", ")", ",", "# 2 states, 1 input", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "n_feat", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "n_x", ")", "\n", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.DeepNeuralStateSpaceModel.forward": [[88, 93], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_dt.DeepNeuralStateSpaceModel.net"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "in_x", ",", "in_u", ")", ":", "\n", "        ", "in_xu", "=", "torch", ".", "cat", "(", "(", "in_x", ",", "in_u", ")", ",", "-", "1", ")", "# concatenate x and u over the last dimension to create the [xu] input", "\n", "dx", "=", "self", ".", "net", "(", "in_xu", ")", "# \\dot x = f([xu])", "\n", "dx", "=", "dx", "*", "self", ".", "scale_dx", "\n", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.StateSpaceModelLin.__init__": [[105, 112], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "AL.astype", "BL.astype"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "AL", ",", "BL", ")", ":", "\n", "        ", "super", "(", "StateSpaceModelLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "AL", "=", "nn", ".", "Linear", "(", "2", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "AL", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "AL", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "BL", "=", "nn", ".", "Linear", "(", "1", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "BL", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "BL", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.StateSpaceModelLin.forward": [[113, 116], ["ssmodels_dt.StateSpaceModelLin.AL", "ssmodels_dt.StateSpaceModelLin.BL"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "U", ")", ":", "\n", "        ", "DX", "=", "self", ".", "AL", "(", "X", ")", "+", "self", ".", "BL", "(", "U", ")", "\n", "return", "DX", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.CTSNeuralStateSpaceModel.__init__": [[129, 146], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "ssmodels_dt.CTSNeuralStateSpaceModel.net.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_x", ",", "n_u", ",", "n_feat", "=", "64", ",", "ts", "=", "1.0", ",", "init_small", "=", "True", ")", ":", "\n", "        ", "super", "(", "CTSNeuralStateSpaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_u", "=", "n_u", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "ts", "=", "ts", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_x", "+", "n_u", ",", "n_feat", ")", ",", "# 2 states, 1 input", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "n_x", ")", "\n", ")", "\n", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_dt.CTSNeuralStateSpaceModel.forward": [[147, 151], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_dt.CTSNeuralStateSpaceModel.net"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "X", ",", "U", ")", ":", "\n", "        ", "XU", "=", "torch", ".", "cat", "(", "(", "X", ",", "U", ")", ",", "-", "1", ")", "\n", "DX", "=", "self", ".", "net", "(", "XU", ")", "*", "self", ".", "ts", "\n", "return", "DX", "", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_dt.NeuralStateSpaceSimulator.__init__": [[18, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ss_model", ",", "Ts", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "ss_model", "=", "ss_model", "\n", "self", ".", "Ts", "=", "Ts", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_dt.NeuralStateSpaceSimulator.f_onestep": [[22, 46], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "ss_simulator_dt.NeuralStateSpaceSimulator.ss_model"], "methods", ["None"], ["", "def", "f_onestep", "(", "self", ",", "X", ",", "U", ")", ":", "\n", "        ", "\"\"\" Naive one-step prediction\n\n        Parameters\n        ----------\n        X : Tensor. Size: (N, n_x)\n            State sequence tensor\n\n        U : Tensor. Size: (N, n_u)\n            Input sequence tensor\n\n        Returns\n        -------\n        Tensor. Size: (N, n_x)\n            One-step prediction over N steps\n\n        \"\"\"", "\n", "\n", "X_pred", "=", "torch", ".", "empty", "(", "X", ".", "shape", ")", "\n", "X_pred", "[", "0", ",", ":", "]", "=", "X", "[", "0", ",", ":", "]", "\n", "DX", "=", "self", ".", "ss_model", "(", "X", "[", "0", ":", "-", "1", "]", ",", "U", "[", "0", ":", "-", "1", "]", ")", "\n", "X_pred", "[", "1", ":", ",", ":", "]", "=", "X", "[", "0", ":", "-", "1", ",", ":", "]", "+", "DX", "\n", "\n", "return", "X_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_dt.NeuralStateSpaceSimulator.f_sim": [[47, 80], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.shape", "numpy.shape", "ss_simulator_dt.NeuralStateSpaceSimulator.ss_model"], "methods", ["None"], ["", "def", "f_sim", "(", "self", ",", "x0", ",", "u", ")", ":", "\n", "        ", "\"\"\" Open-loop simulation\n\n        Parameters\n        ----------\n        x0 : Tensor. Size: (n_x)\n             Initial state\n\n        U : Tensor. Size: (N, n_u)\n            Input sequence tensor\n\n        Returns\n        -------\n        Tensor. Size: (N, n_x)\n            Open-loop model simulation over N steps\n\n        \"\"\"", "\n", "\n", "N", "=", "np", ".", "shape", "(", "u", ")", "[", "0", "]", "\n", "nx", "=", "np", ".", "shape", "(", "x0", ")", "[", "0", "]", "\n", "\n", "X_list", "=", "[", "]", "\n", "xstep", "=", "x0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "X_list", "+=", "[", "xstep", "]", "\n", "#X[i,:] = xstep", "\n", "ustep", "=", "u", "[", "i", "]", "\n", "dx", "=", "self", ".", "ss_model", "(", "xstep", ",", "ustep", ")", "\n", "xstep", "=", "xstep", "+", "dx", "\n", "\n", "", "X", "=", "torch", ".", "stack", "(", "X_list", ",", "0", ")", "\n", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_dt.NeuralStateSpaceSimulator.f_sim_multistep": [[81, 113], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ss_simulator_dt.NeuralStateSpaceSimulator.ss_model"], "methods", ["None"], ["", "def", "f_sim_multistep", "(", "self", ",", "x0_batch", ",", "U_batch", ")", ":", "\n", "        ", "\"\"\" Multi-step simulation over (mini)batches\n\n        Parameters\n        ----------\n        x0_batch: Tensor. Size: (q, n_x)\n             Initial state for each subsequence in the minibatch\n\n        U_batch: Tensor. Size: (q, m, n_u)\n            Input sequence for each subsequence in the minibatch\n\n        Returns\n        -------\n        Tensor. Size: (q, m, n_x)\n            Simulated state for all subsequences in the minibatch\n\n        \"\"\"", "\n", "\n", "batch_size", "=", "x0_batch", ".", "shape", "[", "0", "]", "\n", "n_x", "=", "x0_batch", ".", "shape", "[", "1", "]", "\n", "seq_len", "=", "U_batch", ".", "shape", "[", "1", "]", "\n", "\n", "X_sim_list", "=", "[", "]", "\n", "xstep", "=", "x0_batch", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "X_sim_list", "+=", "[", "xstep", "]", "#X_sim[:, i, :] = xstep", "\n", "ustep", "=", "U_batch", "[", ":", ",", "i", ",", ":", "]", "\n", "dx", "=", "self", ".", "ss_model", "(", "xstep", ",", "ustep", ")", "\n", "xstep", "=", "xstep", "+", "dx", "\n", "\n", "", "X_sim", "=", "torch", ".", "stack", "(", "X_sim_list", ",", "1", ")", "#.squeeze(2)", "\n", "return", "X_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.NeuralStateSpaceModel.__init__": [[27, 53], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ssmodels_ct.NeuralStateSpaceModel.net.modules", "torch.Softplus", "torch.Softplus", "isinstance", "torch.Tanh", "torch.Tanh", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_x", ",", "n_u", ",", "n_feat", "=", "64", ",", "scale_dx", "=", "1.0", ",", "init_small", "=", "True", ",", "activation", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", "NeuralStateSpaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_u", "=", "n_u", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "scale_dx", "=", "scale_dx", "\n", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation", "==", "'softplus'", ":", "\n", "            ", "activation", "=", "nn", ".", "Softplus", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_x", "+", "n_u", ",", "n_feat", ")", ",", "# 2 states, 1 input", "\n", "activation", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "n_x", ")", "\n", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.NeuralStateSpaceModel.forward": [[54, 59], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_ct.NeuralStateSpaceModel.net"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "in_x", ",", "in_u", ")", ":", "\n", "        ", "in_xu", "=", "torch", ".", "cat", "(", "(", "in_x", ",", "in_u", ")", ",", "-", "1", ")", "# concatenate x and u over the last dimension to create the [xu] input", "\n", "dx", "=", "self", ".", "net", "(", "in_xu", ")", "# \\dot x = f([xu])", "\n", "dx", "=", "dx", "*", "self", ".", "scale_dx", "\n", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.MechanicalStateSpaceSystem.__init__": [[79, 96], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "ssmodels_ct.MechanicalStateSpaceSystem.net.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_feat", "=", "64", ",", "init_small", "=", "True", ",", "typical_ts", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "MechanicalStateSpaceSystem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "typical_ts", "=", "typical_ts", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", ",", "n_feat", ")", ",", "# 2 states, 1 input", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "1", ")", "\n", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-3", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.MechanicalStateSpaceSystem.forward": [[97, 105], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_ct.MechanicalStateSpaceSystem.net"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "in_x", ",", "in_u", ")", ":", "\n", "        ", "list_dx", ":", "List", "[", "torch", ".", "Tensor", "]", "\n", "in_xu", "=", "torch", ".", "cat", "(", "(", "in_x", ",", "in_u", ")", ",", "-", "1", ")", "# concatenate x and u over the last dimension to create the [xu] input", "\n", "dx_v", "=", "self", ".", "net", "(", "in_xu", ")", "/", "self", ".", "typical_ts", "# \\dot x = f([xu])", "\n", "\n", "list_dx", "=", "[", "in_x", "[", "...", ",", "[", "1", "]", "]", ",", "dx_v", "]", "\n", "dx", "=", "torch", ".", "cat", "(", "list_dx", ",", "-", "1", ")", "# dot x = v, dot v = net", "\n", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.StateSpaceModelLin.__init__": [[116, 123], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "A.astype", "B.astype"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "super", "(", "StateSpaceModelLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "A", "=", "nn", ".", "Linear", "(", "2", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "A", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "A", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "B", "=", "nn", ".", "Linear", "(", "1", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "B", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "B", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.StateSpaceModelLin.forward": [[124, 127], ["ssmodels_ct.StateSpaceModelLin.A", "ssmodels_ct.StateSpaceModelLin.B"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "U", ")", ":", "\n", "        ", "dx", "=", "self", ".", "A", "(", "X", ")", "+", "self", ".", "B", "(", "U", ")", "\n", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.CascadedTanksNeuralStateSpaceModel.__init__": [[140, 172], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "ssmodels_ct.CascadedTanksNeuralStateSpaceModel.net_dx1.modules", "ssmodels_ct.CascadedTanksNeuralStateSpaceModel.net_dx2.modules", "isinstance", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_feat", "=", "64", ",", "scale_dx", "=", "1.0", ",", "init_small", "=", "True", ")", ":", "\n", "        ", "super", "(", "CascadedTanksNeuralStateSpaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "scale_dx", "=", "scale_dx", "\n", "\n", "# Neural network for the first state equation = NN(x_1, u)", "\n", "self", ".", "net_dx1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "n_feat", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Neural network for the first state equation = NN(x_1, x2)", "\n", "self", ".", "net_dx2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "n_feat", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net_dx1", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "", "", "", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net_dx2", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.CascadedTanksNeuralStateSpaceModel.forward": [[173, 187], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_ct.CascadedTanksNeuralStateSpaceModel.net_dx1", "ssmodels_ct.CascadedTanksNeuralStateSpaceModel.net_dx2", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "in_x", ",", "in_u", ")", ":", "\n", "\n", "# the first state derivative is NN(x1, u)", "\n", "        ", "in_1", "=", "torch", ".", "cat", "(", "(", "in_x", "[", "...", ",", "[", "0", "]", "]", ",", "in_u", ")", ",", "-", "1", ")", "# concatenate 1st state component with input", "\n", "dx_1", "=", "self", ".", "net_dx1", "(", "in_1", ")", "\n", "\n", "# the second state derivative is NN(x1, x2)", "\n", "in_2", "=", "in_x", "\n", "dx_2", "=", "self", ".", "net_dx2", "(", "in_2", ")", "\n", "\n", "# the state derivative is built by concatenation of dx_1 and dx_2, possibly scaled for numerical convenience", "\n", "dx", "=", "torch", ".", "cat", "(", "(", "dx_1", ",", "dx_2", ")", ",", "-", "1", ")", "\n", "dx", "=", "dx", "*", "self", ".", "scale_dx", "\n", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.CascadedTanksOverflowNeuralStateSpaceModel.__init__": [[200, 233], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "ssmodels_ct.CascadedTanksOverflowNeuralStateSpaceModel.net_dx1.modules", "ssmodels_ct.CascadedTanksOverflowNeuralStateSpaceModel.net_dx2.modules", "isinstance", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_feat", "=", "64", ",", "scale_dx", "=", "1.0", ",", "init_small", "=", "True", ")", ":", "\n", "        ", "super", "(", "CascadedTanksOverflowNeuralStateSpaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_feat", "=", "n_feat", "\n", "self", ".", "scale_dx", "=", "scale_dx", "\n", "\n", "# Neural network for the first state equation = NN(x_1, u)", "\n", "self", ".", "net_dx1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "n_feat", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Neural network for the first state equation = NN(x_1, x2, u)", "\n", "# we assume that with overflow the input may influence the 2nd tank instantaneously", "\n", "self", ".", "net_dx2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", ",", "n_feat", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_feat", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net_dx1", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n", "# Small initialization is better for multi-step methods", "\n", "", "", "", "if", "init_small", ":", "\n", "            ", "for", "m", "in", "self", ".", "net_dx2", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ssmodels_ct.CascadedTanksOverflowNeuralStateSpaceModel.forward": [[234, 248], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_ct.CascadedTanksOverflowNeuralStateSpaceModel.net_dx1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssmodels_ct.CascadedTanksOverflowNeuralStateSpaceModel.net_dx2", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "in_x", ",", "in_u", ")", ":", "\n", "\n", "# the first state derivative is NN_1(x1, u)", "\n", "        ", "in_1", "=", "torch", ".", "cat", "(", "(", "in_x", "[", "...", ",", "[", "0", "]", "]", ",", "in_u", ")", ",", "-", "1", ")", "# concatenate 1st state component with input", "\n", "dx_1", "=", "self", ".", "net_dx1", "(", "in_1", ")", "\n", "\n", "# the second state derivative is NN_2(x1, x2, u)", "\n", "in_2", "=", "torch", ".", "cat", "(", "(", "in_x", ",", "in_u", ")", ",", "-", "1", ")", "# concatenate states with input to define the", "\n", "dx_2", "=", "self", ".", "net_dx2", "(", "in_2", ")", "\n", "\n", "# the state derivative is built by concatenation of dx_1 and dx_2, possibly scaled for numerical convenience", "\n", "dx", "=", "torch", ".", "cat", "(", "(", "dx_1", ",", "dx_2", ")", ",", "-", "1", ")", "\n", "dx", "=", "dx", "*", "self", ".", "scale_dx", "\n", "return", "dx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_ct.ForwardEulerSimulator.__init__": [[23, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "ss_model", ",", "ts", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ForwardEulerSimulator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ss_model", "=", "ss_model", "\n", "self", ".", "ts", "=", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_ct.ForwardEulerSimulator.forward": [[28, 54], ["u_batch.split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "u_step.squeeze.squeeze.squeeze", "ss_simulator_ct.ForwardEulerSimulator.ss_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0_batch", ":", "torch", ".", "Tensor", ",", "u_batch", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\" Multi-step simulation over (mini)batches\n\n        Parameters:\n            x0_batch (Tensor Size: (q, n_x)): Initial state for each subsequence in the minibatch\n            u_batch (Tensor. Size: (m, q, n_u): Input sequence for each subsequence in the minibatch\n\n        Returns:\n            Tensor Size: (m, q, n_x): Simulated state for all subsequences in the minibatch\n\n        Examples::\n\n        >>> y_sim = nn_solution(x0, u)\n        \"\"\"", "\n", "\n", "X_sim_list", ":", "List", "[", "torch", ".", "Tensor", "]", "=", "[", "]", "\n", "x_step", "=", "x0_batch", "\n", "\n", "for", "u_step", "in", "u_batch", ".", "split", "(", "1", ")", ":", "# i in range(seq_len):", "\n", "            ", "u_step", "=", "u_step", ".", "squeeze", "(", "0", ")", "\n", "X_sim_list", "+=", "[", "x_step", "]", "\n", "dx", "=", "self", ".", "ss_model", "(", "x_step", ",", "u_step", ")", "\n", "x_step", "=", "x_step", "+", "self", ".", "ts", "*", "dx", "\n", "\n", "", "X_sim", "=", "torch", ".", "stack", "(", "X_sim_list", ",", "0", ")", "\n", "return", "X_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_ct.ExplicitRKSimulator.__init__": [[70, 80], ["torch.Module.__init__", "nodepy.runge_kutta_method.loadRKM", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ss_simulator_ct.ExplicitRKSimulator.b.numel", "nodepy.runge_kutta_method.loadRKM.A.astype", "nodepy.runge_kutta_method.loadRKM.b.astype", "nodepy.runge_kutta_method.loadRKM.c.astype"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "ss_model", ",", "ts", "=", "1.0", ",", "scheme", "=", "'RK44'", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "super", "(", "ExplicitRKSimulator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ss_model", "=", "ss_model", "\n", "self", ".", "ts", "=", "ts", "\n", "info_RK", "=", "nodepy", ".", "runge_kutta_method", ".", "loadRKM", "(", "scheme", ")", "\n", "self", ".", "A", "=", "torch", ".", "FloatTensor", "(", "info_RK", ".", "A", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "self", ".", "b", "=", "torch", ".", "FloatTensor", "(", "info_RK", ".", "b", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "self", ".", "c", "=", "torch", ".", "FloatTensor", "(", "info_RK", ".", "c", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "self", ".", "stages", "=", "self", ".", "b", ".", "numel", "(", ")", "# number of stages of the rk method", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_ct.ExplicitRKSimulator.forward": [[81, 126], ["u_batch.split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "u_step.squeeze.squeeze.squeeze", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "K.append", "ss_simulator_ct.ExplicitRKSimulator.ss_model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0_batch", ",", "u_batch", ")", ":", "\n", "        ", "\"\"\" Multi-step simulation over (mini)batches\n\n        Parameters\n        ----------\n        x0_batch: Tensor. Size: (q, n_x)\n             Initial state for each subsequence in the minibatch\n\n        u_batch: Tensor. Size: (m, q, n_u)\n            Input sequence for each subsequence in the minibatch\n\n        Returns\n        -------\n        Tensor. Size: (m, q, n_x)\n            Simulated state for all subsequences in the minibatch\n\n        \"\"\"", "\n", "\n", "batch_size", "=", "x0_batch", ".", "shape", "[", "0", "]", "\n", "n_x", "=", "x0_batch", ".", "shape", "[", "1", "]", "\n", "seq_len", "=", "u_batch", ".", "shape", "[", "0", "]", "\n", "\n", "X_sim_list", "=", "[", "]", "\n", "x_step", "=", "x0_batch", "\n", "for", "u_step", "in", "u_batch", ".", "split", "(", "1", ")", ":", "#i in range(seq_len):", "\n", "\n", "            ", "u_step", "=", "u_step", ".", "squeeze", "(", "0", ")", "\n", "X_sim_list", "+=", "[", "x_step", "]", "\n", "#u_step = u_batch[i, :, :]", "\n", "\n", "K", "=", "[", "]", "#torch.zeros((self.stages, nx))", "\n", "for", "stage_idx", "in", "range", "(", "self", ".", "stages", ")", ":", "# compute Ki, i=0,1,..s-1", "\n", "                ", "DX_pred", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "n_x", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "j", "in", "range", "(", "stage_idx", ")", ":", "# j=0,1,...i-1", "\n", "                    ", "DX_pred", "=", "DX_pred", "+", "self", ".", "A", "[", "stage_idx", ",", "j", "]", "*", "K", "[", "j", "]", "\n", "", "DX_pred", "=", "DX_pred", "*", "self", ".", "ts", "\n", "K", ".", "append", "(", "self", ".", "ss_model", "(", "x_step", "+", "DX_pred", ",", "u_step", ")", ")", "# should u be interpolated??", "\n", "", "F", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "n_x", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "stage_idx", "in", "range", "(", "self", ".", "stages", ")", ":", "\n", "                ", "F", "+=", "self", ".", "b", "[", "stage_idx", "]", "*", "K", "[", "stage_idx", "]", "\n", "", "x_step", "=", "x_step", "+", "self", ".", "ts", "*", "F", "\n", "\n", "", "X_sim", "=", "torch", ".", "stack", "(", "X_sim_list", ",", "0", ")", "\n", "\n", "return", "X_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_ct.RK4Simulator.__init__": [[142, 147], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "ss_model", ",", "ts", "=", "1.0", ",", "scheme", "=", "'RK44'", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "super", "(", "RK4Simulator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ss_model", "=", "ss_model", "\n", "self", ".", "ts", "=", "ts", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.ss_simulator_ct.RK4Simulator.forward": [[148, 185], ["u_batch.split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "u_step.squeeze.squeeze.squeeze", "ss_simulator_ct.RK4Simulator.ss_model", "ss_simulator_ct.RK4Simulator.ss_model", "ss_simulator_ct.RK4Simulator.ss_model", "ss_simulator_ct.RK4Simulator.ss_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0_batch", ",", "u_batch", ")", ":", "\n", "        ", "\"\"\" Multi-step simulation over (mini)batches\n\n        Parameters\n        ----------\n        x0_batch: Tensor. Size: (q, n_x)\n             Initial state for each subsequence in the minibatch\n\n        u_batch: Tensor. Size: (m, q, n_u)\n            Input sequence for each subsequence in the minibatch\n\n        Returns\n        -------\n        Tensor. Size: (m, q, n_x)\n            Simulated state for all subsequences in the minibatch\n\n        \"\"\"", "\n", "\n", "X_sim_list", "=", "[", "]", "\n", "x_step", "=", "x0_batch", "\n", "for", "u_step", "in", "u_batch", ".", "split", "(", "1", ")", ":", "#i in range(seq_len):", "\n", "\n", "            ", "u_step", "=", "u_step", ".", "squeeze", "(", "0", ")", "\n", "X_sim_list", "+=", "[", "x_step", "]", "\n", "#u_step = u_batch[i, :, :]", "\n", "\n", "dt2", "=", "self", ".", "ts", "/", "2.0", "\n", "k1", "=", "self", ".", "ss_model", "(", "x_step", ",", "u_step", ")", "\n", "k2", "=", "self", ".", "ss_model", "(", "x_step", "+", "dt2", "*", "k1", ",", "u_step", ")", "\n", "k3", "=", "self", ".", "ss_model", "(", "x_step", "+", "dt2", "*", "k2", ",", "u_step", ")", "\n", "k4", "=", "self", ".", "ss_model", "(", "x_step", "+", "self", ".", "ts", "*", "k3", ",", "u_step", ")", "\n", "dx", "=", "self", ".", "ts", "/", "6.0", "*", "(", "k1", "+", "2.0", "*", "k2", "+", "2.0", "*", "k3", "+", "k4", ")", "\n", "x_step", "=", "x_step", "+", "dx", "\n", "\n", "", "X_sim", "=", "torch", ".", "stack", "(", "X_sim_list", ",", "0", ")", "\n", "\n", "return", "X_sim", "", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.static.MimoStaticNonLinearity.__init__": [[28, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "n_hidden", "=", "20", ",", "activation", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", "MimoStaticNonLinearity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "activation_dict", "=", "{", "'tanh'", ":", "nn", ".", "Tanh", ",", "'relu'", ":", "nn", ".", "ReLU", ",", "'sigmoid'", ":", "nn", ".", "Sigmoid", "}", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "n_hidden", ")", ",", "\n", "activation_dict", "[", "activation", "]", "(", ")", ",", "#nn.Tanh(),", "\n", "nn", ".", "Linear", "(", "n_hidden", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.static.MimoStaticNonLinearity.forward": [[39, 42], ["static.MimoStaticNonLinearity.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_lin", ")", ":", "\n", "        ", "y_nl", "=", "self", ".", "net", "(", "u_lin", ")", "\n", "return", "y_nl", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.static.SisoStaticNonLinearity.__init__": [[63, 65], ["static.MimoStaticNonLinearity.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_hidden", "=", "20", ",", "activation", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", "SisoStaticNonLinearity", ",", "self", ")", ".", "__init__", "(", "in_channels", "=", "1", ",", "out_channels", "=", "1", ",", "n_hidden", "=", "n_hidden", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.static.MimoChannelWiseNonLinearity.__init__": [[89, 100], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "static.MimoChannelWiseNonLinearity.net.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "n_hidden", "=", "10", ")", ":", "\n", "        ", "super", "(", "MimoChannelWiseNonLinearity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "channel_idx", "in", "range", "(", "channels", ")", ":", "\n", "            ", "channel_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "n_hidden", ")", ",", "# 2 states, 1 input", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_hidden", ",", "1", ")", "\n", ")", "\n", "self", ".", "net", ".", "append", "(", "channel_net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.static.MimoChannelWiseNonLinearity.forward": [[101, 110], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "u_lin.split", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "u_lin", ")", ":", "\n", "\n", "        ", "y_nl", "=", "[", "]", "\n", "for", "channel_idx", ",", "u_channel", "in", "enumerate", "(", "u_lin", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", ")", ":", "# split over the last dimension (input channel)", "\n", "            ", "y_nl_channel", "=", "self", ".", "net", "[", "channel_idx", "]", "(", "u_channel", ")", "# Process blocks individually", "\n", "y_nl", ".", "append", "(", "y_nl_channel", ")", "\n", "\n", "", "y_nl", "=", "torch", ".", "cat", "(", "y_nl", ",", "-", "1", ")", "# concatenate all output channels", "\n", "return", "y_nl", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.__init__": [[35, 49], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "n_b", ",", "n_a", ",", "n_k", "=", "0", ")", ":", "\n", "        ", "super", "(", "MimoLinearDynamicalOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b_coeff", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "n_b", ")", ")", "\n", "self", ".", "a_coeff", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "n_a", ")", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_b", "=", "n_b", "\n", "self", ".", "n_k", "=", "n_k", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_range", "=", "0.01", "\n", "self", ".", "a_coeff", "[", ":", "]", "=", "(", "torch", ".", "rand", "(", "self", ".", "a_coeff", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "init_range", "\n", "self", ".", "b_coeff", "[", ":", "]", "=", "(", "torch", ".", "rand", "(", "self", ".", "b_coeff", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "init_range", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.forward": [[50, 60], ["torchid.dynonet.functional.lti.MimoLinearDynamicalOperatorFun.apply", "torch.empty_like"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "u_in", ",", "y_0", "=", "None", ",", "u_0", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "n_k", "!=", "0", ":", "\n", "#u_d = u_in.roll(self.n_k, dims=-2)  # roll on the time axis", "\n", "#u_d[..., 0:self.n_k, :] = 0.0  # input sequence with delay", "\n", "            ", "u_d", "=", "torch", ".", "empty_like", "(", "u_in", ")", "\n", "u_d", "[", "...", ",", "self", ".", "n_k", ":", ",", ":", "]", "=", "u_in", "[", ":", ",", ":", "-", "self", ".", "n_k", ",", ":", "]", "\n", "u_d", "[", "...", ",", "0", ":", "self", ".", "n_k", ",", ":", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "u_d", "=", "u_in", "\n", "", "return", "MimoLinearDynamicalOperatorFun", ".", "apply", "(", "self", ".", "b_coeff", ",", "self", ".", "a_coeff", ",", "u_d", ",", "y_0", ",", "u_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.get_filtdata": [[61, 85], ["lti.MimoLinearDynamicalOperator.__get_filtdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], ["", "def", "get_filtdata", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the numerator and denominator coefficients of the transfer function :math:`q^{-1}`-polynomials.\n\n        The polynomials are function of the variable :math:`q^{-1}`.\n        The polynomial coefficients b and a have length m and n, respectively and are sorted in descending power order.\n\n        For a certain input channel :math:`i` and output channel :math:`o`, the  corresponding transfer\n        function :math:`G_{i\\rightarrow o}(z)` is:\n\n        .. math::\n            G_{i\\rightarrow o}(z) = q^{-n_k}\\frac{b[o, i, 0] + b[o, i, 1]q^{-1} + \\dots + b[o, i, n]q^{-m+1}}\n            {a[o, i, 0] + a[o, i, 1]q^{-1} + \\dots + a[o, i, n]q^{-n+1}}\n\n        Returns:\n            np.array(in_channels, out_channels, m), np.array(in_channels, out_channels, n):\n                numerator :math:`\\beta` and denominator :math:`\\alpha` polynomial coefficients of the transfer function.\n\n\n        Examples::\n\n            >>> num, den = G.get_tfdata()\n            >>> G_tf = control.TransferFunction(G2_num, G2_den, ts=1.0)\n        \"\"\"", "\n", "return", "self", ".", "__get_filtdata__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.get_tfdata": [[86, 109], ["lti.MimoLinearDynamicalOperator.__get_tfdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_tfdata__"], ["", "def", "get_tfdata", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the numerator and denominator coefficients of the transfer function :math:`z`-polynomials.\n\n        The polynomials are function of the variable Z-transform variable :math:`z`.\n        The polynomial coefficients :math::`\\beta` and :math:`\\alpha` have equal length p and are sorted in descending power order.\n\n        For a certain input channel :math:`i` and output channel :math:`o`, the  corresponding transfer\n        function :math:`G_{i\\rightarrow o}(z)` is:\n\n        .. math::\n            G_{i\\rightarrow o}(z) = \\frac{\\beta[o, i, 0]z^{n-1} + \\beta[o, i, 1]z^{n-1} + \\dots + \\beta[o, i, p]}{\\alpha[o, i, 0]z^{n-1} + \\alpha[o, i, 1]z^{n-2} + \\dots + \\alpha[o, i, p]}\n\n        Returns:\n            np.array(in_channels, out_channels, p), np.array(in_channels, out_channels, p):\n                numerator :math:`\\beta` and denominator :math:`\\alpha` polynomial coefficients of the transfer function.\n\n\n        Examples::\n\n            >>> num, den = G.get_tfdata()\n            >>> G_tf = control.TransferFunction(G2_num, G2_den, ts=1.0)\n        \"\"\"", "\n", "return", "self", ".", "__get_tfdata__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.__get_filtdata__": [[110, 119], ["lti.MimoLinearDynamicalOperator.__get_ba_coeff__", "numpy.zeros_like", "numpy.empty_like"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_ba_coeff__"], ["", "def", "__get_filtdata__", "(", "self", ")", ":", "\n", "# returns the coefficients of the polynomials b and a as function of q^{-1}", "\n", "        ", "b_coeff_np", ",", "a_coeff_np", "=", "self", ".", "__get_ba_coeff__", "(", ")", "\n", "b_seq", "=", "np", ".", "zeros_like", "(", "b_coeff_np", ",", "shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "n_b", "+", "self", ".", "n_k", ")", ")", "#b_coeff_np", "\n", "b_seq", "[", ":", ",", ":", ",", "self", ".", "n_k", ":", "]", "=", "b_coeff_np", "[", ":", ",", ":", ",", ":", "]", "\n", "a_seq", "=", "np", ".", "empty_like", "(", "a_coeff_np", ",", "shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "n_a", "+", "1", ")", ")", "\n", "a_seq", "[", ":", ",", ":", ",", "0", "]", "=", "1", "\n", "a_seq", "[", ":", ",", ":", ",", "1", ":", "]", "=", "a_coeff_np", "[", ":", ",", ":", ",", ":", "]", "\n", "return", "b_seq", ",", "a_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.__get_tfdata__": [[120, 135], ["lti.MimoLinearDynamicalOperator.__get_filtdata__", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], ["", "def", "__get_tfdata__", "(", "self", ")", ":", "\n", "        ", "b_seq", ",", "a_seq", "=", "self", ".", "__get_filtdata__", "(", ")", "\n", "M", "=", "self", ".", "n_b", "+", "self", ".", "n_k", "# number of numerator coefficients of the q^{-1} polynomial", "\n", "N", "=", "self", ".", "n_a", "+", "1", "# number of denominator coefficients of the q^{-1} polynomial", "\n", "if", "M", ">", "N", ":", "\n", "            ", "num", "=", "b_seq", "\n", "den", "=", "np", ".", "c_", "[", "a_seq", ",", "np", ".", "zeros", "(", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "M", "-", "N", ")", ")", "]", "\n", "", "elif", "N", ">", "M", ":", "\n", "            ", "num", "=", "np", ".", "c_", "[", "b_seq", ",", "np", ".", "zeros", "(", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "N", "-", "M", ")", ")", "]", "\n", "den", "=", "a_seq", "\n", "", "else", ":", "# N == M", "\n", "            ", "num", "=", "b_seq", "\n", "den", "=", "a_seq", "\n", "\n", "", "return", "num", ",", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoLinearDynamicalOperator.__get_ba_coeff__": [[136, 138], ["lti.MimoLinearDynamicalOperator.b_coeff.detach().numpy", "lti.MimoLinearDynamicalOperator.a_coeff.detach().numpy", "lti.MimoLinearDynamicalOperator.b_coeff.detach", "lti.MimoLinearDynamicalOperator.a_coeff.detach"], "methods", ["None"], ["", "def", "__get_ba_coeff__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "b_coeff", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "a_coeff", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoLinearDynamicalOperator.__init__": [[166, 168], ["lti.MimoLinearDynamicalOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_b", ",", "n_a", ",", "n_k", "=", "0", ")", ":", "\n", "        ", "super", "(", "SisoLinearDynamicalOperator", ",", "self", ")", ".", "__init__", "(", "1", ",", "1", ",", "n_b", "=", "n_b", ",", "n_a", "=", "n_a", ",", "n_k", "=", "n_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoLinearDynamicalOperator.get_filtdata": [[169, 172], ["lti.MimoLinearDynamicalOperator.__get_filtdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], ["", "def", "get_filtdata", "(", "self", ")", ":", "\n", "        ", "b_seq", ",", "a_seq", "=", "super", "(", "SisoLinearDynamicalOperator", ",", "self", ")", ".", "__get_filtdata__", "(", ")", "# MIMO numden", "\n", "return", "b_seq", "[", "0", ",", "0", ",", ":", "]", ",", "a_seq", "[", "0", ",", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoLinearDynamicalOperator.get_tfdata": [[173, 176], ["lti.MimoLinearDynamicalOperator.__get_tfdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_tfdata__"], ["", "def", "get_tfdata", "(", "self", ")", ":", "\n", "        ", "num", ",", "den", "=", "super", "(", "SisoLinearDynamicalOperator", ",", "self", ")", ".", "__get_tfdata__", "(", ")", "# MIMO numden", "\n", "return", "num", "[", "0", ",", "0", ",", ":", "]", ",", "den", "[", "0", ",", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__init__": [[203, 212], ["super().__init__", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "n_b", ",", "channels_last", "=", "True", ")", ":", "\n", "        ", "super", "(", "MimoFirLinearDynamicalOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "G", "=", "torch", ".", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "n_b", ",", "bias", "=", "False", ",", "padding", "=", "n_b", "-", "1", ")", "\n", "#self.b_coeff = self.G.weight", "\n", "self", ".", "n_a", "=", "0", "\n", "self", ".", "n_b", "=", "n_b", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels_last", "=", "channels_last", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.forward": [[213, 226], ["lti.MimoFirLinearDynamicalOperator.G", "u_in.transpose", "y_out.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u_in", ")", ":", "\n", "# PyTorch 1.4 does not have a channels_last option for Conv1d, which is more convenient", "\n", "# in our block-oriented modeling framework.", "\n", "# Then, let us transpose the last and second last channels manually before and after applying torch.nn.Conv1d", "\n", "        ", "if", "self", ".", "channels_last", ":", "\n", "            ", "u_torch", "=", "u_in", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "\n", "", "y_out", "=", "self", ".", "G", "(", "u_torch", ")", "\n", "y_out", "=", "y_out", "[", "...", ",", "0", ":", "-", "self", ".", "n_b", "+", "1", "]", "\n", "\n", "if", "self", ".", "channels_last", ":", "\n", "            ", "y_out", "=", "y_out", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.get_filtdata": [[227, 229], ["lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], ["", "def", "get_filtdata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__get_filtdata__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.get_tfdata": [[230, 232], ["lti.MimoFirLinearDynamicalOperator.__get_tfdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_tfdata__"], ["", "def", "get_tfdata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__get_tfdata__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__": [[233, 240], ["lti.MimoFirLinearDynamicalOperator.__get_ba_coeff__", "numpy.empty_like"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_ba_coeff__"], ["", "def", "__get_filtdata__", "(", "self", ")", ":", "\n", "        ", "b_coeff", ",", "a_coeff", "=", "self", ".", "__get_ba_coeff__", "(", ")", "\n", "b_seq", "=", "b_coeff", "\n", "a_seq", "=", "np", ".", "empty_like", "(", "a_coeff", ",", "shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "n_a", "+", "1", ")", ")", "\n", "a_seq", "[", ":", ",", ":", ",", "0", "]", "=", "1", "\n", "a_seq", "[", ":", ",", ":", ",", "1", ":", "]", "=", "a_coeff", "[", ":", ",", ":", ",", ":", "]", "\n", "return", "b_seq", ",", "a_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_tfdata__": [[241, 256], ["lti.MimoFirLinearDynamicalOperator.__get_filtdata__", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], ["", "def", "__get_tfdata__", "(", "self", ")", ":", "\n", "        ", "b_seq", ",", "a_seq", "=", "self", ".", "__get_filtdata__", "(", ")", "\n", "M", "=", "self", ".", "n_b", "# numerator coefficients", "\n", "N", "=", "self", ".", "n_a", "+", "1", "# denominator coefficients", "\n", "if", "M", ">", "N", ":", "\n", "            ", "num", "=", "b_seq", "\n", "den", "=", "np", ".", "c_", "[", "a_seq", ",", "np", ".", "zeros", "(", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "M", "-", "N", ")", ")", "]", "\n", "", "elif", "N", ">", "M", ":", "\n", "            ", "num", "=", "np", ".", "c_", "[", "self", ".", "b_poly", ",", "np", ".", "zeros", "(", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "N", "-", "M", ")", ")", "]", "\n", "den", "=", "a_seq", "\n", "", "else", ":", "# N == M", "\n", "            ", "num", "=", "b_seq", "\n", "den", "=", "a_seq", "\n", "\n", "", "return", "num", ",", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_ba_coeff__": [[257, 262], ["lti.MimoFirLinearDynamicalOperator.G.weight.detach().numpy", "numpy.zeros_like", "lti.MimoFirLinearDynamicalOperator.G.weight.detach"], "methods", ["None"], ["", "def", "__get_ba_coeff__", "(", "self", ")", ":", "\n", "        ", "b_coeff_np", "=", "self", ".", "G", ".", "weight", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "b_coeff_np", "=", "b_coeff_np", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "a_coeff_np", "=", "np", ".", "zeros_like", "(", "b_coeff_np", ",", "shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "0", ")", ")", "\n", "return", "b_coeff_np", ",", "a_coeff_np", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoFirLinearDynamicalOperator.__init__": [[285, 287], ["lti.MimoFirLinearDynamicalOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "n_b", ",", "channels_last", "=", "True", ")", ":", "\n", "        ", "super", "(", "SisoFirLinearDynamicalOperator", ",", "self", ")", ".", "__init__", "(", "1", ",", "1", ",", "n_b", ",", "channels_last", "=", "channels_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoFirLinearDynamicalOperator.get_filtdata": [[288, 291], ["lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_filtdata__"], ["", "def", "get_filtdata", "(", "self", ")", ":", "\n", "        ", "b_seq", ",", "a_seq", "=", "super", "(", "SisoFirLinearDynamicalOperator", ",", "self", ")", ".", "__get_filtdata__", "(", ")", "# call to MIMO ba", "\n", "return", "b_seq", "[", "0", ",", "0", ",", ":", "]", ",", "a_seq", "[", "0", ",", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoFirLinearDynamicalOperator.get_tfdata": [[292, 295], ["lti.MimoFirLinearDynamicalOperator.__get_tfdata__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoFirLinearDynamicalOperator.__get_tfdata__"], ["", "def", "get_tfdata", "(", "self", ")", ":", "\n", "        ", "num", ",", "den", "=", "super", "(", "SisoFirLinearDynamicalOperator", ",", "self", ")", ".", "__get_tfdata__", "(", ")", "# call to MIMO numden", "\n", "return", "num", "[", "0", ",", "0", ",", ":", "]", ",", "den", "[", "0", ",", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoSecondOrderDynamicOperator.__init__": [[326, 335], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "MimoSecondOrderDynamicOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b_coeff", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "2", ")", ")", "\n", "self", ".", "rho", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "1", ")", ")", "\n", "self", ".", "psi", "=", "Parameter", "(", "torch", ".", "zeros", "(", "(", "out_channels", ",", "in_channels", ",", "1", ")", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "rho", "[", ":", "]", "=", "torch", ".", "randn", "(", "self", ".", "rho", ".", "shape", ")", "*", "0.1", "\n", "self", ".", "psi", "[", ":", "]", "=", "torch", ".", "randn", "(", "self", ".", "rho", ".", "shape", ")", "*", "0.1", "\n", "self", ".", "b_coeff", "[", ":", "]", "=", "torch", ".", "randn", "(", "self", ".", "b_coeff", ".", "shape", ")", "*", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.MimoSecondOrderDynamicOperator.forward": [[336, 343], ["torch.sigmoid", "torch.cat", "torchid.dynonet.functional.lti.MimoLinearDynamicalOperatorFun.apply", "torch.sigmoid", "torch.cos"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "u_in", ",", "y_0", "=", "None", ",", "u_0", "=", "None", ")", ":", "\n", "        ", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "rho", ")", "\n", "beta", "=", "np", ".", "pi", "*", "torch", ".", "sigmoid", "(", "self", ".", "psi", ")", "\n", "a_1", "=", "-", "2", "*", "r", "*", "torch", ".", "cos", "(", "beta", ")", "\n", "a_2", "=", "r", "**", "2", "\n", "a_coeff", "=", "torch", ".", "cat", "(", "(", "a_1", ",", "a_2", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "MimoLinearDynamicalOperatorFun", ".", "apply", "(", "self", ".", "b_coeff", ",", "a_coeff", ",", "u_in", ",", "y_0", ",", "u_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__": [[353, 355], ["lti.MimoSecondOrderDynamicOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.module.lti.SisoSecondOrderDynamicOperator.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SisoSecondOrderDynamicOperator", ",", "self", ")", ".", "__init__", "(", "1", ",", "1", ")", "# in_channels, out_channels, n_b, n_a", "\n", "", "", ""]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.dynonet.filtering.lfiltic_vec": [[7, 75], ["max", "numpy.asarray", "numpy.zeros", "range", "range", "numpy.size", "numpy.size", "y.astype.astype", "numpy.zeros", "numpy.asarray", "numpy.shape", "numpy.sum", "numpy.sum", "numpy.shape", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["def", "lfiltic_vec", "(", "b", ",", "a", ",", "y", ",", "x", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Construct initial conditions for lfilter given input and output vectors.\n\n    Given a linear filter (b, a) and initial conditions on the output `y`\n    and the input `x`, return the initial conditions on the state vector zi\n    which is used by `lfilter` to generate the output given the input.\n\n    Parameters\n    ----------\n    b : array_like\n        Linear filter term.\n    a : array_like\n        Linear filter term.\n    y : array_like\n        Initial conditions.\n\n        If ``N = len(a) - 1``, then ``y = {y[-1], y[-2], ..., y[-N]}``.\n\n        If `y` is too short, it is padded with zeros.\n    x : array_like, optional\n        Initial conditions.\n\n        If ``M = len(b) - 1``, then ``x = {x[-1], x[-2], ..., x[-M]}``.\n\n        If `x` is not given, its initial conditions are assumed zero.\n\n        If `x` is too short, it is padded with zeros.\n\n    Returns\n    -------\n    zi : ndarray\n        The state vector ``zi = {z_0[-1], z_1[-1], ..., z_K-1[-1]}``,\n        where ``K = max(M, N)``.\n\n    See Also\n    --------\n    lfilter, lfilter_zi\n\n    \"\"\"", "\n", "N", "=", "np", ".", "size", "(", "a", ")", "-", "1", "\n", "M", "=", "np", ".", "size", "(", "b", ")", "-", "1", "\n", "K", "=", "max", "(", "M", ",", "N", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "batch_size", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "if", "y", ".", "dtype", ".", "kind", "in", "'bui'", ":", "\n", "# ensure calculations are floating point", "\n", "        ", "y", "=", "y", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "zi", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "K", ")", ",", "y", ".", "dtype", ")", "\n", "if", "x", "is", "None", ":", "\n", "        ", "x", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "M", ")", ",", "y", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "L", "=", "np", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "if", "L", "<", "M", ":", "\n", "            ", "x", "=", "np", ".", "r_", "[", "x", ",", "np", ".", "zeros", "(", "(", "batch_size", ",", "M", "-", "L", ")", ")", "]", "\n", "", "", "L", "=", "np", ".", "shape", "(", "y", ")", "[", "1", "]", "\n", "if", "L", "<", "N", ":", "\n", "        ", "y", "=", "np", ".", "r_", "[", "y", ",", "np", ".", "zeros", "(", "(", "batch_size", ",", "N", "-", "L", ")", ")", "]", "\n", "\n", "", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "        ", "zi", "[", ":", ",", "m", "]", "=", "np", ".", "sum", "(", "b", "[", "m", "+", "1", ":", "]", "*", "x", "[", ":", ",", ":", "M", "-", "m", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "for", "m", "in", "range", "(", "N", ")", ":", "\n", "        ", "zi", "[", ":", ",", "m", "]", "-=", "np", ".", "sum", "(", "a", "[", "m", "+", "1", ":", "]", "*", "y", "[", ":", ",", ":", "N", "-", "m", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "zi", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.dynonet.filtering.lfilter_mimo_channels_first": [[77, 86], ["numpy.zeros_like", "range", "range", "scipy.signal.lfilter", "scipy.signal.lfilter"], "function", ["None"], ["", "def", "lfilter_mimo_channels_first", "(", "b", ",", "a", ",", "u_in", ")", ":", "\n", "    ", "batch_size", ",", "in_ch", ",", "seq_len", "=", "u_in", ".", "shape", "\n", "out_ch", ",", "_", ",", "_", "=", "a", ".", "shape", "\n", "y_out", "=", "np", ".", "zeros_like", "(", "u_in", ",", "shape", "=", "(", "batch_size", ",", "out_ch", ",", "seq_len", ")", ")", "\n", "for", "out_idx", "in", "range", "(", "out_ch", ")", ":", "\n", "        ", "for", "in_idx", "in", "range", "(", "in_ch", ")", ":", "\n", "            ", "y_out", "[", ":", ",", "out_idx", ",", ":", "]", "+=", "scipy", ".", "signal", ".", "lfilter", "(", "b", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "a", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "\n", "u_in", "[", ":", ",", "in_idx", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.dynonet.filtering.lfilter_mimo_components_channels_first": [[88, 96], ["numpy.zeros_like", "range", "range", "scipy.signal.lfilter", "scipy.signal.lfilter"], "function", ["None"], ["", "def", "lfilter_mimo_components_channels_first", "(", "b", ",", "a", ",", "u_in", ")", ":", "\n", "    ", "batch_size", ",", "in_ch", ",", "seq_len", "=", "u_in", ".", "shape", "\n", "out_ch", ",", "_", ",", "_", "=", "a", ".", "shape", "\n", "y_comp_out", "=", "np", ".", "zeros_like", "(", "u_in", ",", "shape", "=", "(", "batch_size", ",", "out_ch", ",", "in_ch", ",", "seq_len", ")", ")", "\n", "for", "out_idx", "in", "range", "(", "out_ch", ")", ":", "\n", "        ", "for", "in_idx", "in", "range", "(", "in_ch", ")", ":", "\n", "            ", "y_comp_out", "[", ":", ",", "out_idx", ",", "in_idx", ",", ":", "]", "=", "scipy", ".", "signal", ".", "lfilter", "(", "b", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "a", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "u_in", "[", ":", ",", "in_idx", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "return", "y_comp_out", "# [B, O, I, T]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.dynonet.filtering.lfilter_mimo": [[98, 107], ["numpy.zeros_like", "range", "range", "scipy.signal.lfilter", "scipy.signal.lfilter"], "function", ["None"], ["", "def", "lfilter_mimo", "(", "b", ",", "a", ",", "u_in", ")", ":", "\n", "    ", "batch_size", ",", "seq_len", ",", "in_ch", "=", "u_in", ".", "shape", "\n", "out_ch", ",", "_", ",", "_", "=", "a", ".", "shape", "\n", "y_out", "=", "np", ".", "zeros_like", "(", "u_in", ",", "shape", "=", "(", "batch_size", ",", "seq_len", ",", "out_ch", ")", ")", "\n", "for", "out_idx", "in", "range", "(", "out_ch", ")", ":", "\n", "        ", "for", "in_idx", "in", "range", "(", "in_ch", ")", ":", "\n", "            ", "y_out", "[", ":", ",", ":", ",", "out_idx", "]", "+=", "scipy", ".", "signal", ".", "lfilter", "(", "b", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "a", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "\n", "u_in", "[", ":", ",", ":", ",", "in_idx", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "return", "y_out", "# [B, T, O]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.dynonet.filtering.lfilter_mimo_components": [[109, 117], ["numpy.zeros_like", "range", "range", "scipy.signal.lfilter", "scipy.signal.lfilter"], "function", ["None"], ["", "def", "lfilter_mimo_components", "(", "b", ",", "a", ",", "u_in", ")", ":", "\n", "    ", "batch_size", ",", "seq_len", ",", "in_ch", "=", "u_in", ".", "shape", "\n", "out_ch", ",", "_", ",", "_", "=", "a", ".", "shape", "\n", "y_comp_out", "=", "np", ".", "zeros_like", "(", "u_in", ",", "shape", "=", "(", "batch_size", ",", "seq_len", ",", "out_ch", ",", "in_ch", ")", ")", "\n", "for", "out_idx", "in", "range", "(", "out_ch", ")", ":", "\n", "        ", "for", "in_idx", "in", "range", "(", "in_ch", ")", ":", "\n", "            ", "y_comp_out", "[", ":", ",", ":", ",", "out_idx", ",", "in_idx", "]", "=", "scipy", ".", "signal", ".", "lfilter", "(", "b", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "a", "[", "out_idx", ",", "in_idx", ",", ":", "]", ",", "u_in", "[", ":", ",", ":", ",", "in_idx", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "return", "y_comp_out", "# [B, T, O, I]", "\n", "\n"]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.forward": [[27, 66], ["numpy.empty_like", "numpy.array", "torchid.dynonet.filtering.lfilter_mimo_components", "numpy.sum", "torch.as_tensor", "torch.as_tensor", "ctx.save_for_backward", "b_coeff.detach", "a_coeff.detach", "u_in.detach", "y_0.detach", "u_0.detach"], "methods", ["home.repos.pwc.inspect_result.forgi86_rnn-adaptation.dynonet.filtering.lfilter_mimo_components"], ["\n", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "n_b", ",", "n_a", ",", "n_k", "=", "0", ")", ":", "\n", "        ", "super", "(", "MimoLinearDynamicalOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b_coeff", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "n_b", ")", ")", "\n", "self", ".", "a_coeff", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "n_a", ")", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_b", "=", "n_b", "\n", "self", ".", "n_k", "=", "n_k", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_range", "=", "0.01", "\n", "self", ".", "a_coeff", "[", ":", "]", "=", "(", "torch", ".", "rand", "(", "self", ".", "a_coeff", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "init_range", "\n", "self", ".", "b_coeff", "[", ":", "]", "=", "(", "torch", ".", "rand", "(", "self", ".", "b_coeff", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "init_range", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "u_in", ",", "y_0", "=", "None", ",", "u_0", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "n_k", "!=", "0", ":", "\n", "#u_d = u_in.roll(self.n_k, dims=-2)  # roll on the time axis", "\n", "#u_d[..., 0:self.n_k, :] = 0.0  # input sequence with delay", "\n", "            ", "u_d", "=", "torch", ".", "empty_like", "(", "u_in", ")", "\n", "u_d", "[", "...", ",", "self", ".", "n_k", ":", ",", ":", "]", "=", "u_in", "[", ":", ",", ":", "-", "self", ".", "n_k", ",", ":", "]", "\n", "u_d", "[", "...", ",", "0", ":", "self", ".", "n_k", ",", ":", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "u_d", "=", "u_in", "\n", "", "return", "MimoLinearDynamicalOperatorFun", ".", "apply", "(", "self", ".", "b_coeff", ",", "self", ".", "a_coeff", ",", "u_d", ",", "y_0", ",", "u_0", ")", "\n", "\n", "", "def", "get_filtdata", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.forgi86_rnn-adaptation.functional.lti.MimoLinearDynamicalOperatorFun.backward": [[67, 136], ["numpy.empty_like", "numpy.array", "numpy.array", "numpy.array", "pydevd.settrace", "u_in.numpy", "numpy.zeros_like", "range", "range", "torch.as_tensor", "torch.einsum", "numpy.zeros_like", "range", "range", "torch.as_tensor", "torch.einsum", "numpy.zeros_like", "range", "numpy.array().astype", "torch.as_tensor", "range", "range", "grad_output.numpy", "range", "scipy.signal.lfilter", "scipy.signal.lfilter", "scipy.signal.lfilter", "scipy.signal.lfilter", "scipy.signal.lfilter", "scipy.signal.lfilter", "scipy.signal.lfilter", "scipy.signal.lfilter", "numpy.array"], "methods", ["None"], ["\n", "return", "self", ".", "__get_filtdata__", "(", ")", "\n", "\n", "", "def", "get_tfdata", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the numerator and denominator coefficients of the transfer function :math:`z`-polynomials.\n\n        The polynomials are function of the variable Z-transform variable :math:`z`.\n        The polynomial coefficients :math::`\\beta` and :math:`\\alpha` have equal length p and are sorted in descending power order.\n\n        For a certain input channel :math:`i` and output channel :math:`o`, the  corresponding transfer\n        function :math:`G_{i\\rightarrow o}(z)` is:\n\n        .. math::\n            G_{i\\rightarrow o}(z) = \\frac{\\beta[o, i, 0]z^{n-1} + \\beta[o, i, 1]z^{n-1} + \\dots + \\beta[o, i, p]}{\\alpha[o, i, 0]z^{n-1} + \\alpha[o, i, 1]z^{n-2} + \\dots + \\alpha[o, i, p]}\n\n        Returns:\n            np.array(in_channels, out_channels, p), np.array(in_channels, out_channels, p):\n                numerator :math:`\\beta` and denominator :math:`\\alpha` polynomial coefficients of the transfer function.\n\n\n        Examples::\n\n            >>> num, den = G.get_tfdata()\n            >>> G_tf = control.TransferFunction(G2_num, G2_den, ts=1.0)\n        \"\"\"", "\n", "return", "self", ".", "__get_tfdata__", "(", ")", "\n", "\n", "", "def", "__get_filtdata__", "(", "self", ")", ":", "\n", "# returns the coefficients of the polynomials b and a as function of q^{-1}", "\n", "        ", "b_coeff_np", ",", "a_coeff_np", "=", "self", ".", "__get_ba_coeff__", "(", ")", "\n", "b_seq", "=", "np", ".", "zeros_like", "(", "b_coeff_np", ",", "shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "n_b", "+", "self", ".", "n_k", ")", ")", "#b_coeff_np", "\n", "b_seq", "[", ":", ",", ":", ",", "self", ".", "n_k", ":", "]", "=", "b_coeff_np", "[", ":", ",", ":", ",", ":", "]", "\n", "a_seq", "=", "np", ".", "empty_like", "(", "a_coeff_np", ",", "shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "n_a", "+", "1", ")", ")", "\n", "a_seq", "[", ":", ",", ":", ",", "0", "]", "=", "1", "\n", "a_seq", "[", ":", ",", ":", ",", "1", ":", "]", "=", "a_coeff_np", "[", ":", ",", ":", ",", ":", "]", "\n", "return", "b_seq", ",", "a_seq", "\n", "\n", "", "def", "__get_tfdata__", "(", "self", ")", ":", "\n", "        ", "b_seq", ",", "a_seq", "=", "self", ".", "__get_filtdata__", "(", ")", "\n", "M", "=", "self", ".", "n_b", "+", "self", ".", "n_k", "# number of numerator coefficients of the q^{-1} polynomial", "\n", "N", "=", "self", ".", "n_a", "+", "1", "# number of denominator coefficients of the q^{-1} polynomial", "\n", "if", "M", ">", "N", ":", "\n", "            ", "num", "=", "b_seq", "\n", "den", "=", "np", ".", "c_", "[", "a_seq", ",", "np", ".", "zeros", "(", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "M", "-", "N", ")", ")", "]", "\n", "", "elif", "N", ">", "M", ":", "\n", "            ", "num", "=", "np", ".", "c_", "[", "b_seq", ",", "np", ".", "zeros", "(", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "N", "-", "M", ")", ")", "]", "\n", "den", "=", "a_seq", "\n", "", "else", ":", "# N == M", "\n", "            ", "num", "=", "b_seq", "\n", "den", "=", "a_seq", "\n", "\n", "", "return", "num", ",", "den", "\n", "\n", "", "def", "__get_ba_coeff__", "(", "self", ")", ":", "\n"]]}