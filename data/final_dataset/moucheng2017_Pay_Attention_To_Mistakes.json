{"home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.adamW.AdamW.__init__": [[33, 46], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "1e-2", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.adamW.AdamW.__setstate__": [[47, 51], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.adamW.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.adamW.AdamW.step": [[52, 115], ["closure", "p.data.mul_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "max_exp_avg_sq.sqrt", "math.sqrt", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "# Perform stepweight decay", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ")", "\n", "\n", "# Perform optimization step", "\n", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "(", "max_exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNTrain.trainModels": [[38, 172], ["range", "str", "NNTrain.getData", "NNTrain.trainSingleModel", "Model.ERFANet", "NNBaselines.UNet", "str", "str", "str", "NNBaselines.DilatedUNet", "str", "NNBaselines.AttentionUNet", "str", "str", "str", "str", "NNBaselines.CSE_UNet_Full", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNTrain.getData", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNTrain.trainSingleModel"], ["def", "trainModels", "(", "\n", "data_directory", ",", "\n", "dataset_name", ",", "\n", "input_dim", ",", "\n", "class_no", ",", "\n", "repeat", ",", "\n", "train_batchsize", ",", "\n", "validate_batchsize", ",", "\n", "num_epochs", ",", "\n", "learning_rate", ",", "\n", "width", ",", "\n", "network", ",", "\n", "dilation", ",", "\n", "lr_decay", "=", "True", ",", "\n", "augmentation", "=", "True", ",", "\n", "reverse", "=", "False", ")", ":", "\n", "\n", "    ", "for", "j", "in", "range", "(", "1", ",", "repeat", "+", "1", ")", ":", "\n", "\n", "        ", "repeat_str", "=", "str", "(", "j", ")", "\n", "\n", "if", "'ERF'", "in", "network", "or", "'erf'", "in", "network", ":", "\n", "\n", "            ", "assert", "'fp'", "in", "network", "or", "'fn'", "in", "network", "or", "'FP'", "in", "network", "or", "'FN'", "in", "network", "\n", "assert", "'encoder'", "in", "network", "or", "'decoder'", "in", "network", "or", "'all'", "in", "network", "\n", "\n", "if", "'fp'", "in", "network", "or", "'FP'", "in", "network", ":", "\n", "                ", "attention_type", "=", "'FP'", "\n", "assert", "reverse", "is", "False", "\n", "", "elif", "'fn'", "in", "network", "or", "'FN'", "in", "network", ":", "\n", "                ", "attention_type", "=", "'FN'", "\n", "assert", "reverse", "is", "True", "\n", "", "else", ":", "\n", "                ", "attention_type", "=", "'FP'", "\n", "assert", "reverse", "is", "False", "\n", "\n", "", "if", "'encoder'", "in", "network", ":", "\n", "                ", "mode", "=", "'encoder'", "\n", "", "elif", "'decoder'", "in", "network", ":", "\n", "                ", "mode", "=", "'decoder'", "\n", "", "elif", "'all'", "in", "network", ":", "\n", "                ", "mode", "=", "'all'", "\n", "", "else", ":", "\n", "                ", "mode", "=", "'all'", "\n", "\n", "", "Exp", "=", "ERFANet", "(", "\n", "in_ch", "=", "input_dim", ",", "\n", "width", "=", "width", ",", "\n", "class_no", "=", "class_no", ",", "\n", "attention_type", "=", "attention_type", ",", "\n", "mode", "=", "mode", ",", "\n", "identity_add", "=", "True", ",", "\n", "dilation", "=", "dilation", ")", "\n", "\n", "if", "'fp'", "in", "network", ":", "\n", "\n", "                ", "Exp_name", "=", "network", "+", "'_batch_'", "+", "str", "(", "train_batchsize", ")", "+", "'_width_'", "+", "str", "(", "width", ")", "+", "'_repeat_'", "+", "repeat_str", "+", "'_augment_'", "+", "str", "(", "augmentation", ")", "+", "'_lr_decay_'", "+", "str", "(", "lr_decay", ")", "+", "'_dilation_'", "+", "str", "(", "dilation", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "Exp_name", "=", "network", "+", "'_batch_'", "+", "str", "(", "train_batchsize", ")", "+", "'_width_'", "+", "str", "(", "width", ")", "+", "'_repeat_'", "+", "repeat_str", "+", "'_augment_'", "+", "str", "(", "augmentation", ")", "+", "'_lr_decay_'", "+", "str", "(", "lr_decay", ")", "\n", "\n", "# ==================================================", "\n", "# Baselines", "\n", "# ==================================================", "\n", "\n", "", "", "elif", "network", "==", "'unet'", ":", "\n", "            ", "assert", "reverse", "is", "False", "\n", "Exp", "=", "UNet", "(", "in_ch", "=", "input_dim", ",", "width", "=", "width", ",", "class_no", "=", "class_no", ")", "\n", "Exp_name", "=", "'UNet_batch_'", "+", "str", "(", "train_batchsize", ")", "+", "'_width_'", "+", "str", "(", "width", ")", "+", "'_repeat_'", "+", "repeat_str", "+", "'_augment_'", "+", "str", "(", "augmentation", ")", "+", "'_lr_decay_'", "+", "str", "(", "lr_decay", ")", "\n", "\n", "", "elif", "network", "==", "'dilated_unet'", ":", "\n", "            ", "assert", "reverse", "is", "False", "\n", "# dilation = 9", "\n", "Exp", "=", "DilatedUNet", "(", "in_ch", "=", "input_dim", ",", "width", "=", "width", ",", "dilation", "=", "dilation", ")", "\n", "Exp_name", "=", "'DilatedUNet_batch_'", "+", "str", "(", "train_batchsize", ")", "+", "'_width_'", "+", "str", "(", "width", ")", "+", "'_dilation_'", "+", "str", "(", "dilation", ")", "+", "'_repeat_'", "+", "repeat_str", "+", "'_augment_'", "+", "str", "(", "augmentation", ")", "+", "'_lr_decay_'", "+", "str", "(", "lr_decay", ")", "\n", "\n", "", "elif", "network", "==", "'atten_unet'", ":", "\n", "            ", "assert", "reverse", "is", "False", "\n", "Exp", "=", "AttentionUNet", "(", "in_ch", "=", "input_dim", ",", "width", "=", "width", ")", "\n", "Exp_name", "=", "'AttentionUNet_batch_'", "+", "str", "(", "train_batchsize", ")", "+", "'_Valbatch_'", "+", "str", "(", "validate_batchsize", ")", "+", "'_width_'", "+", "str", "(", "width", ")", "+", "'_repeat_'", "+", "repeat_str", "+", "'_augment_'", "+", "str", "(", "augmentation", ")", "+", "'_lr_decay_'", "+", "str", "(", "lr_decay", ")", "\n", "\n", "", "elif", "network", "==", "'cse_unet_full'", ":", "\n", "# assert visualise_attention is True", "\n", "            ", "assert", "reverse", "is", "False", "\n", "# didn't have time to write the code to visulisae attention weights for cse u net", "\n", "Exp", "=", "CSE_UNet_Full", "(", "in_ch", "=", "input_dim", ",", "width", "=", "width", ")", "\n", "Exp_name", "=", "'CSEUNetFull_batch_'", "+", "str", "(", "train_batchsize", ")", "+", "'_Valbatch_'", "+", "str", "(", "validate_batchsize", ")", "+", "'_width_'", "+", "str", "(", "width", ")", "+", "'_repeat_'", "+", "repeat_str", "+", "'_augment_'", "+", "str", "(", "augmentation", ")", "+", "'_lr_decay_'", "+", "str", "(", "lr_decay", ")", "\n", "\n", "# ====================================================================================================================================================================", "\n", "", "trainloader", ",", "validateloader", ",", "testloader", ",", "train_dataset", ",", "validate_dataset", ",", "test_dataset", "=", "getData", "(", "data_directory", ",", "dataset_name", ",", "train_batchsize", ",", "validate_batchsize", ",", "augmentation", ")", "\n", "# ===================", "\n", "trainSingleModel", "(", "Exp", ",", "\n", "Exp_name", ",", "\n", "num_epochs", ",", "\n", "learning_rate", ",", "\n", "dataset_name", ",", "\n", "train_dataset", ",", "\n", "train_batchsize", ",", "\n", "trainloader", ",", "\n", "validateloader", ",", "\n", "testloader", ",", "\n", "reverse_mode", "=", "reverse", ",", "\n", "lr_schedule", "=", "lr_decay", ",", "\n", "class_no", "=", "class_no", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNTrain.getData": [[174, 196], ["NNUtils.CustomDataset", "NNUtils.CustomDataset", "NNUtils.CustomDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "getData", "(", "data_directory", ",", "dataset_name", ",", "train_batchsize", ",", "validate_batchsize", ",", "data_augment", ")", ":", "\n", "\n", "    ", "train_image_folder", "=", "data_directory", "+", "dataset_name", "+", "'/train/patches'", "\n", "train_label_folder", "=", "data_directory", "+", "dataset_name", "+", "'/train/labels'", "\n", "validate_image_folder", "=", "data_directory", "+", "dataset_name", "+", "'/validate/patches'", "\n", "validate_label_folder", "=", "data_directory", "+", "dataset_name", "+", "'/validate/labels'", "\n", "test_image_folder", "=", "data_directory", "+", "dataset_name", "+", "'/test/patches'", "\n", "test_label_folder", "=", "data_directory", "+", "dataset_name", "+", "'/test/labels'", "\n", "\n", "train_dataset", "=", "CustomDataset", "(", "train_image_folder", ",", "train_label_folder", ",", "data_augment", ")", "\n", "\n", "validate_dataset", "=", "CustomDataset", "(", "validate_image_folder", ",", "validate_label_folder", ",", "'full'", ")", "\n", "\n", "test_dataset", "=", "CustomDataset", "(", "test_image_folder", ",", "test_label_folder", ",", "'full'", ")", "\n", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "train_batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "validateloader", "=", "data", ".", "DataLoader", "(", "validate_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "trainloader", ",", "validateloader", ",", "testloader", ",", "train_dataset", ",", "validate_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNTrain.trainSingleModel": [[200, 471], ["len", "torch.device", "torch.device", "torch.device", "str", "str", "print", "print", "print", "tensorboardX.SummaryWriter", "model.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "timeit.default_timer", "range", "NNUtils.test", "timeit.default_timer", "print", "print", "print", "os.mkdir", "os.mkdir", "os.mkdir", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "model.train", "enumerate", "torch.optim.AdamW.zero_grad", "images.to.to", "labels.to.to", "model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "NNLoss.dice_loss.backward", "torch.optim.AdamW.step", "NNUtils.fgsm_attack", "model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "NNMetrics.segmentation_scores", "NNMetrics.f1_score", "lr_scheduler.MultiStepLR.step", "torch.save", "torch.save", "torch.save", "torch.ones_like", "torch.ones_like", "torch.ones_like", "inverse_labels.to.to", "NNLoss.dice_loss", "NNLoss.dice_loss", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "NNUtils.evaluate", "print", "tensorboardX.SummaryWriter.add_scalars", "tensorboardX.SummaryWriter.add_scalars", "tensorboardX.SummaryWriter.add_scalars", "NNMetrics.hd95", "str", "len"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.test", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.adamW.AdamW.step", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.fgsm_attack", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.segmentation_scores", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.f1_score", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.adamW.AdamW.step", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.dice_loss", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.dice_loss", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.evaluate", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.hd95"], ["", "def", "trainSingleModel", "(", "model", ",", "\n", "model_name", ",", "\n", "num_epochs", ",", "\n", "learning_rate", ",", "\n", "datasettag", ",", "\n", "train_dataset", ",", "\n", "train_batchsize", ",", "\n", "trainloader", ",", "\n", "validateloader", ",", "\n", "testdata", ",", "\n", "reverse_mode", ",", "\n", "lr_schedule", ",", "\n", "class_no", ")", ":", "\n", "\n", "# change log names", "\n", "    ", "training_amount", "=", "len", "(", "train_dataset", ")", "\n", "\n", "iteration_amount", "=", "training_amount", "//", "train_batchsize", "\n", "\n", "iteration_amount", "=", "iteration_amount", "-", "1", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "lr_str", "=", "str", "(", "learning_rate", ")", "\n", "\n", "epoches_str", "=", "str", "(", "num_epochs", ")", "\n", "\n", "save_model_name", "=", "model_name", "+", "'_'", "+", "datasettag", "+", "'_e'", "+", "epoches_str", "+", "'_lr'", "+", "lr_str", "\n", "\n", "saved_information_path", "=", "'./Results'", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "saved_information_path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "pass", "\n", "\n", "", "saved_information_path", "=", "saved_information_path", "+", "'/'", "+", "save_model_name", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "saved_information_path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "pass", "\n", "\n", "", "saved_model_path", "=", "saved_information_path", "+", "'/trained_models'", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "saved_model_path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "pass", "\n", "\n", "", "print", "(", "'The current model is:'", ")", "\n", "print", "(", "save_model_name", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "'./Results/Log_'", "+", "datasettag", "+", "'/'", "+", "save_model_name", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "threshold", "=", "torch", ".", "tensor", "(", "[", "0.5", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "upper", "=", "torch", ".", "tensor", "(", "[", "1.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "lower", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "1e-5", ")", "\n", "\n", "if", "lr_schedule", "is", "True", ":", "\n", "\n", "# scheduler = lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', factor=0.2, patience=10, threshold=0.001)", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "num_epochs", "//", "2", ",", "3", "*", "num_epochs", "//", "4", "]", ",", "gamma", "=", "0.1", ")", "\n", "\n", "", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "h_dists", "=", "0", "\n", "f1", "=", "0", "\n", "accuracy_iou", "=", "0", "\n", "running_loss", "=", "0", "\n", "recall", "=", "0", "\n", "precision", "=", "0", "\n", "\n", "t_FPs_Ns", "=", "0", "\n", "t_FPs_Ps", "=", "0", "\n", "t_FNs_Ns", "=", "0", "\n", "t_FNs_Ps", "=", "0", "\n", "t_FPs", "=", "0", "\n", "t_FNs", "=", "0", "\n", "t_TPs", "=", "0", "\n", "t_TNs", "=", "0", "\n", "t_Ps", "=", "0", "\n", "t_Ns", "=", "0", "\n", "\n", "effective_h", "=", "0", "\n", "\n", "# j: index of iteration", "\n", "for", "j", ",", "(", "images", ",", "labels", ",", "imagename", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "# check training data:", "\n", "# image = images[0, :, :, :].squeeze().detach().cpu().numpy()", "\n", "# label = labels[0, :, :, :].squeeze().detach().cpu().numpy()", "\n", "# image = np.transpose(image, (1, 2, 0))", "\n", "# label = np.expand_dims(label, axis=2)", "\n", "# label = np.concatenate((label, label, label), axis=2)", "\n", "# plt.imshow(0.5*image + 0.5*label)", "\n", "# plt.show()", "\n", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "images", "=", "images", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "images", ".", "requires_grad", "=", "True", "\n", "\n", "if", "reverse_mode", "is", "True", ":", "\n", "\n", "                ", "inverse_labels", "=", "torch", ".", "ones_like", "(", "labels", ")", "\n", "inverse_labels", "=", "inverse_labels", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "inverse_labels", "=", "inverse_labels", "-", "labels", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "outputs", "=", "model", "(", "images", ")", "\n", "prob_outputs", "=", "torch", ".", "sigmoid", "(", "outputs", ")", "\n", "\n", "if", "reverse_mode", "is", "True", ":", "\n", "                ", "loss", "=", "dice_loss", "(", "prob_outputs", ",", "inverse_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "dice_loss", "(", "prob_outputs", ",", "labels", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# The taks of binary segmentation is too easy, to compensate the simplicity of the task,", "\n", "# we add adversarial noises in the testing images:", "\n", "data_grad", "=", "images", ".", "grad", ".", "data", "\n", "perturbed_data", "=", "fgsm_attack", "(", "images", ",", "0.2", ",", "data_grad", ")", "\n", "prob_outputs", "=", "model", "(", "perturbed_data", ")", "\n", "prob_outputs", "=", "torch", ".", "sigmoid", "(", "prob_outputs", ")", "\n", "\n", "if", "reverse_mode", "is", "True", ":", "\n", "                ", "class_outputs", "=", "torch", ".", "where", "(", "prob_outputs", "<", "threshold", ",", "upper", ",", "lower", ")", "\n", "", "else", ":", "\n", "                ", "class_outputs", "=", "torch", ".", "where", "(", "prob_outputs", ">", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "", "if", "class_no", "==", "2", ":", "\n", "# hasudorff distance is for binary", "\n", "                ", "if", "(", "class_outputs", "==", "1", ")", ".", "sum", "(", ")", ">", "1", "and", "(", "labels", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                    ", "dist_", "=", "hd95", "(", "class_outputs", ",", "labels", ",", "class_no", ")", "\n", "h_dists", "+=", "dist_", "\n", "effective_h", "=", "effective_h", "+", "1", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "mean_iu_", "=", "segmentation_scores", "(", "labels", ",", "class_outputs", ",", "class_no", ")", "\n", "f1_", ",", "recall_", ",", "precision_", ",", "TPs_", ",", "TNs_", ",", "FPs_", ",", "FNs_", ",", "Ps_", ",", "Ns_", "=", "f1_score", "(", "labels", ",", "class_outputs", ",", "class_no", ")", "\n", "\n", "running_loss", "+=", "loss", "\n", "f1", "+=", "f1_", "\n", "accuracy_iou", "+=", "mean_iu_", "\n", "recall", "+=", "recall_", "\n", "precision", "+=", "precision_", "\n", "t_TPs", "+=", "TPs_", "\n", "t_TNs", "+=", "TNs_", "\n", "t_FPs", "+=", "FPs_", "\n", "t_FNs", "+=", "FNs_", "\n", "t_Ps", "+=", "Ps_", "\n", "t_Ns", "+=", "Ns_", "\n", "t_FNs_Ps", "+=", "(", "FNs_", "+", "1e-8", ")", "/", "(", "Ps_", "+", "1e-8", ")", "\n", "t_FPs_Ns", "+=", "(", "FPs_", "+", "1e-8", ")", "/", "(", "Ns_", "+", "1e-8", ")", "\n", "t_FNs_Ns", "+=", "(", "FNs_", "+", "1e-8", ")", "/", "(", "Ns_", "+", "1e-8", ")", "\n", "t_FPs_Ps", "+=", "(", "FPs_", "+", "1e-8", ")", "/", "(", "Ps_", "+", "1e-8", ")", "\n", "\n", "if", "(", "j", "+", "1", ")", "%", "iteration_amount", "==", "0", ":", "\n", "\n", "                ", "validate_iou", ",", "validate_f1", ",", "validate_recall", ",", "validate_precision", ",", "v_FPs_Ns", ",", "v_FPs_Ps", ",", "v_FNs_Ns", ",", "v_FNs_Ps", ",", "v_FPs", ",", "v_FNs", ",", "v_TPs", ",", "v_TNs", ",", "v_Ps", ",", "v_Ns", ",", "v_h_dist", "=", "evaluate", "(", "validateloader", ",", "model", ",", "device", ",", "reverse_mode", "=", "reverse_mode", ",", "class_no", "=", "class_no", ")", "\n", "\n", "print", "(", "\n", "'Step [{}/{}], Train loss: {:.4f}, '", "\n", "'Train iou: {:.4f}, '", "\n", "'Train h-dist:{:.4f}, '", "\n", "'Val iou: {:.4f},'", "\n", "'Val h-dist: {:.4f}'", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ",", "\n", "running_loss", "/", "(", "j", "+", "1", ")", ",", "\n", "accuracy_iou", "/", "(", "j", "+", "1", ")", ",", "\n", "h_dists", "/", "(", "effective_h", "+", "1", ")", ",", "\n", "validate_iou", ",", "\n", "v_h_dist", ")", ")", "\n", "\n", "# # # ================================================================== #", "\n", "# # #                        TensorboardX Logging                        #", "\n", "# # # # ================================================================ #", "\n", "\n", "writer", ".", "add_scalars", "(", "'acc metrics'", ",", "{", "'train iou'", ":", "accuracy_iou", "/", "(", "j", "+", "1", ")", ",", "\n", "'train hausdorff dist'", ":", "h_dists", "/", "(", "effective_h", "+", "1", ")", ",", "\n", "'val iou'", ":", "validate_iou", ",", "\n", "'val hasudorff distance'", ":", "v_h_dist", ",", "\n", "'loss'", ":", "running_loss", "/", "(", "j", "+", "1", ")", "}", ",", "epoch", "+", "1", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "'train confusion matrices analysis'", ",", "{", "'train FPs/Ns'", ":", "t_FPs_Ns", "/", "(", "j", "+", "1", ")", ",", "\n", "'train FNs/Ps'", ":", "t_FNs_Ps", "/", "(", "j", "+", "1", ")", ",", "\n", "'train FPs/Ps'", ":", "t_FPs_Ps", "/", "(", "j", "+", "1", ")", ",", "\n", "'train FNs/Ns'", ":", "t_FNs_Ns", "/", "(", "j", "+", "1", ")", ",", "\n", "'train FNs'", ":", "t_FNs", "/", "(", "j", "+", "1", ")", ",", "\n", "'train FPs'", ":", "t_FPs", "/", "(", "j", "+", "1", ")", ",", "\n", "'train TNs'", ":", "t_TNs", "/", "(", "j", "+", "1", ")", ",", "\n", "'train TPs'", ":", "t_TPs", "/", "(", "j", "+", "1", ")", ",", "\n", "'train Ns'", ":", "t_Ns", "/", "(", "j", "+", "1", ")", ",", "\n", "'train Ps'", ":", "t_Ps", "/", "(", "j", "+", "1", ")", ",", "\n", "'train imbalance'", ":", "t_Ps", "/", "(", "t_Ps", "+", "t_Ns", ")", "}", ",", "epoch", "+", "1", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "'val confusion matrices analysis'", ",", "{", "'val FPs/Ns'", ":", "v_FPs_Ns", ",", "\n", "'val FNs/Ps'", ":", "v_FNs_Ps", ",", "\n", "'val FPs/Ps'", ":", "v_FPs_Ps", ",", "\n", "'val FNs/Ns'", ":", "v_FNs_Ns", ",", "\n", "'val FNs'", ":", "v_FNs", ",", "\n", "'val FPs'", ":", "v_FPs", ",", "\n", "'val TNs'", ":", "v_TNs", ",", "\n", "'val TPs'", ":", "v_TPs", ",", "\n", "'val Ns'", ":", "v_Ns", ",", "\n", "'val Ps'", ":", "v_Ps", ",", "\n", "'val imbalance'", ":", "v_Ps", "/", "(", "v_Ps", "+", "v_Ns", ")", "}", ",", "epoch", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# A learning rate schedule plan for fn attention:", "\n", "# we ramp-up linearly inside of each iteration", "\n", "# without the warm-up, it is hard to train sometimes", "\n", "", "if", "'fn'", "in", "model_name", "or", "'FN'", "in", "model_name", ":", "\n", "                ", "if", "reverse_mode", "is", "True", ":", "\n", "                    ", "if", "epoch", "<", "10", ":", "\n", "                        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                            ", "param_group", "[", "'lr'", "]", "=", "learning_rate", "*", "(", "j", "/", "len", "(", "trainloader", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "pass", "\n", "", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "if", "lr_schedule", "is", "True", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# save models at last 10 epochs", "\n", "", "if", "epoch", ">=", "(", "num_epochs", "-", "10", ")", ":", "\n", "            ", "save_model_name_full", "=", "saved_model_path", "+", "'/'", "+", "save_model_name", "+", "'_epoch'", "+", "str", "(", "epoch", ")", "+", "'.pt'", "\n", "path_model", "=", "save_model_name_full", "\n", "torch", ".", "save", "(", "model", ",", "path_model", ")", "\n", "\n", "# Test on all models and average them:", "\n", "", "", "test", "(", "testdata", ",", "\n", "saved_model_path", ",", "\n", "device", ",", "\n", "reverse_mode", "=", "reverse_mode", ",", "\n", "class_no", "=", "class_no", ",", "\n", "save_path", "=", "saved_information_path", ")", "\n", "\n", "# save model", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Time: '", ",", "stop", "-", "start", ")", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'\\nTraining finished and model saved\\n'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.preprocessing_accuracy": [[49, 61], ["torch.where.cpu().detach", "np.asarray.cpu().detach", "numpy.asarray", "numpy.asarray", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where.cpu", "np.asarray.cpu"], "function", ["None"], ["def", "preprocessing_accuracy", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "if", "n_class", "==", "2", ":", "\n", "# thresholding predictions:", "\n", "        ", "output_zeros", "=", "torch", ".", "zeros_like", "(", "label_pred", ")", "\n", "output_ones", "=", "torch", ".", "ones_like", "(", "label_pred", ")", "\n", "label_pred", "=", "torch", ".", "where", "(", "(", "label_pred", ">", "0.5", ")", ",", "output_ones", ",", "output_zeros", ")", "\n", "", "label_pred", "=", "label_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "label_true", "=", "label_true", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "label_pred", "=", "np", ".", "asarray", "(", "label_pred", ",", "dtype", "=", "'int32'", ")", "\n", "label_true", "=", "np", ".", "asarray", "(", "label_true", ",", "dtype", "=", "'int32'", ")", "\n", "#", "\n", "return", "label_pred", ",", "label_true", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics._fast_hist": [[67, 74], ["NNMetrics.preprocessing_accuracy", "numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.preprocessing_accuracy"], ["", "def", "_fast_hist", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "label_pred", ",", "label_true", "=", "preprocessing_accuracy", "(", "label_true", ",", "label_pred", ",", "n_class", ")", "\n", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "n_class", "**", "2", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.segmentation_scores": [[76, 104], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "NNMetrics._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "lt.flatten", "lp.flatten", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics._fast_hist"], ["", "def", "segmentation_scores", "(", "label_trues", ",", "label_preds", ",", "n_class", ")", ":", "\n", "    ", "\"\"\"Returns accuracy score evaluation result.\n      - overall accuracy\n      - mean accuracy\n      - mean IU\n      - fwavacc\n    \"\"\"", "\n", "# label_preds, label_trues = preprocessing_accuracy(label_trues, label_preds)", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "n_class", ")", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "# iou:", "\n", "# iu = np.diag(hist) / (hist.sum(axis=1) + hist.sum(axis=0) - np.diag(hist) + 1e-10)", "\n", "iu", "=", "2", "*", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "+", "1e-8", ")", "\n", "mean_dice", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "# freq = hist.sum(axis=1) / hist.sum()", "\n", "# fwavacc = (freq[freq > 0] * iu[freq > 0]).sum()", "\n", "# iflat = label_preds.view(-1)", "\n", "# tflat = label_trues.view(-1)", "\n", "# intersection = (iflat * tflat).sum()", "\n", "# union = iflat.sum() + tflat.sum()", "\n", "#", "\n", "# dice_score = (2. * intersection) / union", "\n", "#", "\n", "return", "mean_dice", "\n", "# ==================================================================================", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.f1_score": [[107, 158], ["NNMetrics.preprocessing_accuracy", "numpy.zeros", "numpy.zeros", "numpy.array().flatten", "numpy.array().flatten", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.confusion_matrix().ravel", "len", "len", "len", "f1_metric.mean", "np.zeros.mean", "np.zeros.mean", "len", "numpy.array", "numpy.array", "range", "range", "sklearn.metrics.confusion_matrix"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.preprocessing_accuracy"], ["", "def", "f1_score", "(", "label_gt", ",", "label_pred", ",", "n_class", ")", ":", "\n", "# threhold = torch.Tensor([0])", "\n", "    ", "label_pred", ",", "label_gt", "=", "preprocessing_accuracy", "(", "label_gt", ",", "label_pred", ",", "n_class", ")", "\n", "#", "\n", "if", "len", "(", "label_gt", ".", "shape", ")", "==", "4", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "label_gt", ".", "shape", "\n", "size", "=", "b", "*", "c", "\n", "", "elif", "len", "(", "label_gt", ".", "shape", ")", "==", "3", ":", "\n", "        ", "c", ",", "h", ",", "w", "=", "label_gt", ".", "shape", "\n", "size", "=", "c", "\n", "#", "\n", "", "assert", "len", "(", "label_gt", ")", "==", "len", "(", "label_pred", ")", "\n", "#", "\n", "precision", "=", "np", ".", "zeros", "(", "n_class", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "n_class", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img_A", "=", "np", ".", "array", "(", "label_gt", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "img_B", "=", "np", ".", "array", "(", "label_pred", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "precision", "[", ":", "]", "=", "precision_score", "(", "img_A", ",", "img_B", ",", "average", "=", "None", ",", "labels", "=", "range", "(", "n_class", ")", ")", "\n", "recall", "[", ":", "]", "=", "recall_score", "(", "img_A", ",", "img_B", ",", "average", "=", "None", ",", "labels", "=", "range", "(", "n_class", ")", ")", "\n", "f1_metric", "=", "2", "*", "(", "recall", "*", "precision", ")", "/", "(", "recall", "+", "precision", "+", "1e-10", ")", "\n", "# For binary:", "\n", "#", "\n", "# CM = confusion_matrix(img_A, img_B)", "\n", "# #", "\n", "# TN = CM[0][0]", "\n", "# FN = CM[1][0]", "\n", "# TP = CM[1][1]", "\n", "# FP = CM[0][1]", "\n", "#", "\n", "TN", ",", "FP", ",", "FN", ",", "TP", "=", "confusion_matrix", "(", "img_A", ",", "img_B", ",", "labels", "=", "[", "0.0", ",", "1.0", "]", ")", ".", "ravel", "(", ")", "\n", "#", "\n", "# TP = np.sum(label_gt[label_gt == 1.0] == label_pred[label_pred == 1.0])", "\n", "# TN = np.sum(label_gt[label_gt == 0.0] == label_pred[label_pred == 0.0])", "\n", "# FP = np.sum(label_gt[label_gt == 1.0] == label_pred[label_pred == 0.0])", "\n", "# FN = np.sum(label_gt[label_gt == 0.0] == label_pred[label_pred == 1.0])", "\n", "# For multi-class:", "\n", "# FP = CM.sum(axis=0) - np.diag(CM)", "\n", "# FN = CM.sum(axis=1) - np.diag(CM)", "\n", "# TP = np.diag(CM)", "\n", "# TN = CM.sum() - (FP + FN + TP)", "\n", "# FPs_Ns = (FP + 1e-8) / ((img_A == float(0.0)).sum() + 1e-8)", "\n", "# FNs_Ps = (FN + 1e-8) / ((img_A == float(1.0)).sum() + 1e-8)", "\n", "#", "\n", "N", "=", "TN", "+", "FP", "\n", "P", "=", "TP", "+", "FN", "\n", "#", "\n", "# FPs_Ns = (FP + 1e-10) / (Negatives + 1e-10)", "\n", "# FNs_Ps = (FN + 1e-10) / (Positives + 1e-10)", "\n", "# CM = np.zeros((2, 2), dtype=np.float32)", "\n", "#", "\n", "return", "f1_metric", ".", "mean", "(", ")", ",", "recall", ".", "mean", "(", ")", ",", "precision", ".", "mean", "(", ")", ",", "TP", "/", "size", ",", "TN", "/", "size", ",", "FP", "/", "size", ",", "FN", "/", "size", ",", "P", "/", "size", ",", "N", "/", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.__surface_distances": [[281, 318], ["NNMetrics.preprocessing_accuracy", "numpy.atleast_1d", "numpy.atleast_1d", "scipy.ndimage.morphology.generate_binary_structure", "scipy.ndimage.morphology.distance_transform_edt", "np.atleast_1d.astype", "np.atleast_1d.astype", "scipy.ndimage._ni_support._normalize_sequence", "numpy.asarray", "numpy.count_nonzero", "RuntimeError", "numpy.count_nonzero", "RuntimeError", "scipy.ndimage.morphology.binary_erosion", "scipy.ndimage.morphology.binary_erosion", "voxelspacing.copy.copy"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.preprocessing_accuracy"], ["", "def", "__surface_distances", "(", "result", ",", "reference", ",", "class_no", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    The distances between the surface voxel of binary objects in result and their\n    nearest partner surface voxel of a binary object in reference.\n    \"\"\"", "\n", "result", ",", "reference", "=", "preprocessing_accuracy", "(", "reference", ",", "result", ",", "class_no", ")", "\n", "# reference = reference.cpu().detach().numpy()", "\n", "# result = result.cpu().detach().numpy()", "\n", "#", "\n", "result", "=", "np", ".", "atleast_1d", "(", "result", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "reference", "=", "np", ".", "atleast_1d", "(", "reference", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "if", "voxelspacing", "is", "not", "None", ":", "\n", "        ", "voxelspacing", "=", "_ni_support", ".", "_normalize_sequence", "(", "voxelspacing", ",", "result", ".", "ndim", ")", "\n", "voxelspacing", "=", "np", ".", "asarray", "(", "voxelspacing", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "voxelspacing", ".", "flags", ".", "contiguous", ":", "\n", "            ", "voxelspacing", "=", "voxelspacing", ".", "copy", "(", ")", "\n", "\n", "# binary structure", "\n", "", "", "footprint", "=", "generate_binary_structure", "(", "result", ".", "ndim", ",", "connectivity", ")", "\n", "\n", "# test for emptiness", "\n", "if", "0", "==", "np", ".", "count_nonzero", "(", "result", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'The first supplied array does not contain any binary object.'", ")", "\n", "", "if", "0", "==", "np", ".", "count_nonzero", "(", "reference", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'The second supplied array does not contain any binary object.'", ")", "\n", "\n", "# extract only 1-pixel border line of objects", "\n", "", "result_border", "=", "result", "^", "binary_erosion", "(", "result", ",", "structure", "=", "footprint", ",", "iterations", "=", "1", ")", "\n", "reference_border", "=", "reference", "^", "binary_erosion", "(", "reference", ",", "structure", "=", "footprint", ",", "iterations", "=", "1", ")", "\n", "\n", "# compute average surface distance", "\n", "# Note: scipys distance transform is calculated only inside the borders of the", "\n", "#       foreground objects, therefore the input has to be reversed", "\n", "dt", "=", "distance_transform_edt", "(", "~", "reference_border", ",", "sampling", "=", "voxelspacing", ")", "\n", "sds", "=", "dt", "[", "result_border", "]", "\n", "\n", "return", "sds", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.hd95": [[320, 368], ["NNMetrics.__surface_distances", "NNMetrics.__surface_distances", "numpy.percentile", "numpy.nanmean", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.__surface_distances", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.__surface_distances"], ["", "def", "hd95", "(", "result", ",", "reference", ",", "class_no", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    95th percentile of the Hausdorff Distance.\n\n    Computes the 95th percentile of the (symmetric) Hausdorff Distance (HD) between the binary objects in two\n    images. Compared to the Hausdorff Distance, this metric is slightly more stable to small outliers and is\n    commonly used in Biomedical Segmentation challenges.\n\n    Parameters\n    ----------\n    result : array_like\n        Input data containing objects. Can be any type but will be converted\n        into binary: background where 0, object everywhere else.\n    reference : array_like\n        Input data containing objects. Can be any type but will be converted\n        into binary: background where 0, object everywhere else.\n    voxelspacing : float or sequence of floats, optional\n        The voxelspacing in a distance unit i.e. spacing of elements\n        along each dimension. If a sequence, must be of length equal to\n        the input rank; if a single number, this is used for all axes. If\n        not specified, a grid spacing of unity is implied.\n    connectivity : int\n        The neighbourhood/connectivity considered when determining the surface\n        of the binary objects. This value is passed to\n        `scipy.ndimage.morphology.generate_binary_structure` and should usually be :math:`> 1`.\n        Note that the connectivity influences the result in the case of the Hausdorff distance.\n\n    Returns\n    -------\n    hd : float\n        The symmetric Hausdorff Distance between the object(s) in ```result``` and the\n        object(s) in ```reference```. The distance unit is the same as for the spacing of\n        elements along each dimension, which is usually given in mm.\n\n    See also\n    --------\n    :func:`hd`\n\n    Notes\n    -----\n    This is a real metric. The binary images can therefore be supplied in any order.\n    \"\"\"", "\n", "hd1", "=", "__surface_distances", "(", "result", ",", "reference", ",", "class_no", ",", "voxelspacing", ",", "connectivity", ")", "\n", "hd2", "=", "__surface_distances", "(", "reference", ",", "result", ",", "class_no", ",", "voxelspacing", ",", "connectivity", ")", "\n", "hd95", "=", "np", ".", "percentile", "(", "np", ".", "hstack", "(", "(", "hd1", ",", "hd2", ")", ")", ",", "95", ")", "\n", "#", "\n", "hd95_mean", "=", "np", ".", "nanmean", "(", "hd95", ")", "\n", "return", "hd95_mean", "", "", ""]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.focal_loss.__init__": [[21, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1", ",", "gamma", "=", "2", ",", "logits", "=", "False", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "super", "(", "focal_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "logits", "=", "logits", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.focal_loss.forward": [[28, 40], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "logits", ":", "\n", "            ", "BCE_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "inputs", ",", "targets", ",", "reduce", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "BCE_loss", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduce", "=", "False", ")", "\n", "", "pt", "=", "torch", ".", "exp", "(", "-", "BCE_loss", ")", "\n", "F_loss", "=", "self", ".", "alpha", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "BCE_loss", "\n", "\n", "if", "self", ".", "reduce", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "F_loss", ")", "\n", "", "else", ":", "\n", "            ", "return", "F_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.dice_loss": [[7, 18], ["input.view", "target.view", "input.view.sum", "target.view.sum"], "function", ["None"], ["def", "dice_loss", "(", "input", ",", "target", ")", ":", "\n", "    ", "smooth", "=", "1", "\n", "# input = F.softmax(input, dim=1)", "\n", "# input = torch.sigmoid(input) #for binary", "\n", "iflat", "=", "input", ".", "view", "(", "-", "1", ")", "\n", "tflat", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "intersection", "=", "(", "iflat", "*", "tflat", ")", ".", "sum", "(", ")", "\n", "union", "=", "iflat", ".", "sum", "(", ")", "+", "tflat", ".", "sum", "(", ")", "\n", "# union = (torch.mul(iflat, iflat) + torch.mul(tflat, tflat)).sum()", "\n", "dice_score", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "union", "+", "smooth", ")", "\n", "return", "1", "-", "dice_score", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.kt_loss": [[42, 46], ["torch.KLDivLoss", "torch.logsigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "", "", "def", "kt_loss", "(", "student_output_digits", ",", "teacher_output_digits", ",", "tempearture", ")", ":", "\n", "# The KL Divergence for PyTorch comparing the softmaxs of teacher and student expects the input tensor to be log probabilities!", "\n", "    ", "knowledge_transfer_loss", "=", "nn", ".", "KLDivLoss", "(", ")", "(", "F", ".", "logsigmoid", "(", "student_output_digits", "/", "tempearture", ")", ",", "torch", ".", "sigmoid", "(", "teacher_output_digits", "/", "tempearture", ")", ")", "*", "(", "tempearture", "*", "tempearture", ")", "\n", "return", "knowledge_transfer_loss", "", "", ""]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.Model.ERFANet.__init__": [[14, 63], ["torch.Module.__init__", "Model.single_conv", "Model.single_conv", "Model.single_conv", "Model.single_conv", "Model.single_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "Model.single_conv", "Model.MistakeAttention", "Model.MistakeAttention", "Model.MistakeAttention", "Model.MistakeAttention", "Model.single_conv", "Model.double_conv", "Model.double_conv", "Model.double_conv", "Model.double_conv", "Model.MistakeAttention", "Model.MistakeAttention", "Model.MistakeAttention", "Model.MistakeAttention", "Model.double_conv", "Model.double_conv", "Model.double_conv", "Model.double_conv"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ",", "class_no", ",", "attention_type", ",", "dilation", ",", "mode", "=", "'all'", ",", "identity_add", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "ERFANet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "identity", "=", "identity_add", "\n", "\n", "if", "class_no", "==", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "\n", "if", "'encoder'", "in", "mode", "or", "'all'", "in", "mode", ":", "\n", "            ", "self", ".", "econv0", "=", "single_conv", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "econv1", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "2", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "econv2", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "2", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "econv3", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "2", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bridge", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w4", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "1", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ",", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "econv0", "=", "single_conv", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "econv1", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "econv2", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "econv3", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w4", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "\n", "", "self", ".", "bridge_smooth", "=", "single_conv", "(", "in_channels", "=", "self", ".", "w4", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "\n", "if", "'decoder'", "in", "mode", "or", "'all'", "in", "mode", ":", "\n", "            ", "self", ".", "decoder3", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "1", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ")", "\n", "self", ".", "decoder2", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "1", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ")", "\n", "self", ".", "decoder1", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ")", "\n", "self", ".", "decoder0", "=", "MistakeAttention", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ",", "addition", "=", "self", ".", "identity", ",", "attention_type", "=", "attention_type", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "decoder3", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "decoder2", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "decoder1", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "decoder0", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "\n", "", "self", ".", "smooth3", "=", "single_conv", "(", "in_channels", "=", "self", ".", "w4", "+", "self", ".", "w4", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "smooth2", "=", "single_conv", "(", "in_channels", "=", "self", ".", "w3", "+", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "smooth1", "=", "single_conv", "(", "in_channels", "=", "self", ".", "w2", "+", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "smooth0", "=", "single_conv", "(", "in_channels", "=", "self", ".", "w1", "+", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "self", ".", "w1", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.Model.ERFANet.forward": [[64, 104], ["Model.ERFANet.econv0", "Model.ERFANet.econv1", "Model.ERFANet.econv2", "Model.ERFANet.econv3", "Model.ERFANet.bridge", "Model.ERFANet.upsample", "Model.ERFANet.bridge_smooth", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model.ERFANet.upsample", "Model.ERFANet.smooth3", "Model.ERFANet.decoder3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model.ERFANet.upsample", "Model.ERFANet.smooth2", "Model.ERFANet.decoder2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model.ERFANet.upsample", "Model.ERFANet.smooth1", "Model.ERFANet.decoder1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model.ERFANet.smooth0", "Model.ERFANet.decoder0", "Model.ERFANet.conv_last", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.pad", "torch.pad", "torch.pad", "torch.pad.size", "Model.ERFANet.size", "Model.ERFANet.size", "torch.pad.size", "Model.ERFANet.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x0", "=", "self", ".", "econv0", "(", "x", ")", "\n", "x1", "=", "self", ".", "econv1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "econv2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "econv3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "bridge", "(", "x3", ")", "\n", "\n", "y", "=", "self", ".", "upsample", "(", "x4", ")", "\n", "y", "=", "self", ".", "bridge_smooth", "(", "y", ")", "\n", "\n", "if", "y", ".", "size", "(", ")", "[", "2", "]", "!=", "x3", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "\n", "            ", "diffY", "=", "torch", ".", "tensor", "(", "[", "x3", ".", "size", "(", ")", "[", "2", "]", "-", "y", ".", "size", "(", ")", "[", "2", "]", "]", ")", "\n", "diffX", "=", "torch", ".", "tensor", "(", "[", "x3", ".", "size", "(", ")", "[", "3", "]", "-", "y", ".", "size", "(", ")", "[", "3", "]", "]", ")", "\n", "#", "\n", "y", "=", "F", ".", "pad", "(", "y", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "\n", "", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x3", "]", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "upsample", "(", "y", ")", "\n", "y", "=", "self", ".", "smooth3", "(", "y", ")", "\n", "y", "=", "self", ".", "decoder3", "(", "y", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "upsample", "(", "y", ")", "\n", "y", "=", "self", ".", "smooth2", "(", "y", ")", "\n", "y", "=", "self", ".", "decoder2", "(", "y", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "upsample", "(", "y", ")", "\n", "y", "=", "self", ".", "smooth1", "(", "y", ")", "\n", "y", "=", "self", ".", "decoder1", "(", "y", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x0", "]", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "smooth0", "(", "y", ")", "\n", "y", "=", "self", ".", "decoder0", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "conv_last", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.Model.MistakeAttention.__init__": [[134, 194], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "step", ",", "addition", ",", "attention_type", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "MistakeAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addition", "=", "addition", "\n", "self", ".", "type", "=", "attention_type", "\n", "\n", "if", "'FP'", "in", "self", ".", "type", "or", "'fp'", "in", "self", ".", "type", ":", "\n", "\n", "# dilation = 9", "\n", "\n", "            ", "self", ".", "main_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "step", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "attention_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "4", "*", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "step", ",", "dilation", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", "*", "out_channels", ",", "out_channels", "=", "4", "*", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "groups", "=", "4", "*", "out_channels", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "4", "*", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", "*", "out_channels", ",", "out_channels", "=", "4", "*", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "groups", "=", "4", "*", "out_channels", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "4", "*", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", "*", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "elif", "'FN'", "in", "self", ".", "type", "or", "'fn'", "in", "self", ".", "type", ":", "\n", "\n", "            ", "self", ".", "main_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "step", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "attention_branch_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "4", "*", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "step", ",", "dilation", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention_branch_identity", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "step", ",", "dilation", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention_branch_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", "*", "out_channels", ",", "out_channels", "=", "4", "*", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "4", "*", "out_channels", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "4", "*", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "attention_branch_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", "*", "out_channels", ",", "out_channels", "=", "4", "*", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "4", "*", "out_channels", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "4", "*", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "attention_branch_4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", "*", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention_branch_5", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.Model.MistakeAttention.forward": [[195, 217], ["Model.MistakeAttention.attention_branch", "Model.MistakeAttention.main_branch", "Model.MistakeAttention.attention_branch_1", "Model.MistakeAttention.attention_branch_5", "Model.MistakeAttention.main_branch", "Model.MistakeAttention.attention_branch_2", "Model.MistakeAttention.attention_branch_3", "Model.MistakeAttention.attention_branch_4", "Model.MistakeAttention.attention_branch_identity"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "'FP'", "in", "self", ".", "type", "or", "'fp'", "in", "self", ".", "type", ":", "\n", "\n", "            ", "attention", "=", "self", ".", "attention_branch", "(", "x", ")", "\n", "features", "=", "self", ".", "main_branch", "(", "x", ")", "\n", "\n", "", "elif", "'FN'", "in", "self", ".", "type", "or", "'fn'", "in", "self", ".", "type", ":", "\n", "\n", "            ", "f1", "=", "self", ".", "attention_branch_1", "(", "x", ")", "\n", "f2", "=", "self", ".", "attention_branch_2", "(", "f1", ")", "+", "f1", "\n", "attention", "=", "self", ".", "attention_branch_3", "(", "f2", ")", "+", "f2", "\n", "attention", "=", "self", ".", "attention_branch_4", "(", "attention", ")", "+", "self", ".", "attention_branch_identity", "(", "x", ")", "\n", "attention", "=", "self", ".", "attention_branch_5", "(", "attention", ")", "\n", "features", "=", "self", ".", "main_branch", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "addition", "is", "True", ":", "\n", "            ", "output", "=", "attention", "*", "features", "+", "features", "\n", "", "else", ":", "\n", "            ", "output", "=", "attention", "*", "features", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.Model.double_conv": [[111, 120], ["torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["None"], ["", "", "def", "double_conv", "(", "in_channels", ",", "out_channels", ",", "step", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "step", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.Model.single_conv": [[123, 129], ["torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "single_conv", "(", "in_channels", ",", "out_channels", ",", "step", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "step", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.Attention_block.__init__": [[62, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "F_g", ",", "F_l", ")", ":", "\n", "        ", "super", "(", "Attention_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_g", ",", "F_l", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "F_l", "//", "2", ",", "affine", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "W_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_l", ",", "F_l", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "F_l", "//", "2", ",", "affine", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_l", "//", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "1", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.Attention_block.forward": [[82, 88], ["NNBaselines.Attention_block.W_g", "NNBaselines.Attention_block.W_x", "NNBaselines.Attention_block.relu", "NNBaselines.Attention_block.psi"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "g1", "=", "self", ".", "W_g", "(", "g", ")", "\n", "x1", "=", "self", ".", "W_x", "(", "x", ")", "\n", "psi", "=", "self", ".", "relu", "(", "g1", "+", "x1", ")", "\n", "psi", "=", "self", ".", "psi", "(", "psi", ")", "\n", "return", "psi", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE.__init__": [[92, 99], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_no", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "squeeze", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "channel_no", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "expand", "=", "nn", ".", "Conv2d", "(", "channel_no", "//", "8", ",", "channel_no", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE.forward": [[100, 105], ["NNBaselines.SE.avg_pool", "NNBaselines.SE.sigmoid", "NNBaselines.SE.expand", "NNBaselines.SE.relu", "NNBaselines.SE.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "channel_attention", "=", "self", ".", "sigmoid", "(", "self", ".", "expand", "(", "self", ".", "relu", "(", "self", ".", "squeeze", "(", "xx", ")", ")", ")", ")", "\n", "output", "=", "x", "*", "channel_attention", "+", "x", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CSE.__init__": [[110, 120], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_no", ")", ":", "\n", "        ", "super", "(", "CSE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "squeeze", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "channel_no", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "expand", "=", "nn", ".", "Conv2d", "(", "channel_no", "//", "8", ",", "channel_no", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "#", "\n", "self", ".", "spatial_squeeze", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CSE.forward": [[121, 129], ["NNBaselines.CSE.sigmoid", "NNBaselines.CSE.sigmoid", "NNBaselines.CSE.spatial_squeeze", "NNBaselines.CSE.expand", "NNBaselines.CSE.relu", "NNBaselines.CSE.squeeze", "NNBaselines.CSE.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#", "\n", "        ", "spatial_attention", "=", "self", ".", "sigmoid", "(", "self", ".", "spatial_squeeze", "(", "x", ")", ")", "*", "x", "\n", "#", "\n", "channel_attention", "=", "self", ".", "sigmoid", "(", "self", ".", "expand", "(", "self", ".", "relu", "(", "self", ".", "squeeze", "(", "self", ".", "avg_pool", "(", "x", ")", ")", ")", ")", ")", "*", "x", "\n", "output", "=", "spatial_attention", "+", "channel_attention", "\n", "#", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE.__init__": [[133, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_no", ")", ":", "\n", "        ", "super", "(", "GE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "squeeze_spatial_1", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "channel_no", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ",", "groups", "=", "channel_no", ")", "\n", "self", ".", "squeeze_spatial_1_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channel_no", ",", "affine", "=", "True", ")", "\n", "self", ".", "squeeze_spatial_2", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "channel_no", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ",", "groups", "=", "channel_no", ")", "\n", "self", ".", "squeeze_spatial_2_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channel_no", ",", "affine", "=", "True", ")", "\n", "# self.squeeze_spatial_3 = nn.Conv2d(channel_no, channel_no, kernel_size=3, padding=1, stride=2, bias=False, groups=channel_no)", "\n", "# self.squeeze_spatial_3_norm = nn.InstanceNorm2d(channel_no, affine=True)", "\n", "self", ".", "interpolate", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE.forward": [[144, 148], ["NNBaselines.GE.sigmoid", "NNBaselines.GE.interpolate", "NNBaselines.GE.squeeze_spatial_2_norm", "NNBaselines.GE.squeeze_spatial_2", "NNBaselines.GE.squeeze_spatial_1_norm", "NNBaselines.GE.squeeze_spatial_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "attention", "=", "self", ".", "sigmoid", "(", "self", ".", "interpolate", "(", "self", ".", "squeeze_spatial_2_norm", "(", "self", ".", "squeeze_spatial_2", "(", "self", ".", "squeeze_spatial_1_norm", "(", "self", ".", "squeeze_spatial_1", "(", "x", ")", ")", ")", ")", ")", ")", "\n", "output", "=", "x", "*", "attention", "+", "x", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM.__init__": [[152, 163], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_no", ")", ":", "\n", "        ", "super", "(", "CBAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool_channel", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "max_pool_channel", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "channel_no", "//", "16", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channel_no", "//", "16", ",", "channel_no", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid_c", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "#", "\n", "self", ".", "conv_spatial", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid_s", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM.forward": [[164, 179], ["NNBaselines.CBAM.fc2", "NNBaselines.CBAM.fc2", "NNBaselines.CBAM.sigmoid_c", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM.conv_spatial", "NNBaselines.CBAM.sigmoid_s", "NNBaselines.CBAM.relu1", "NNBaselines.CBAM.relu1", "NNBaselines.CBAM.fc1", "NNBaselines.CBAM.fc1", "NNBaselines.CBAM.avg_pool_channel", "NNBaselines.CBAM.max_pool_channel"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# channel attention:", "\n", "        ", "origin", "=", "x", "\n", "avg_c", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "avg_pool_channel", "(", "x", ")", ")", ")", ")", "\n", "max_c", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "max_pool_channel", "(", "x", ")", ")", ")", ")", "\n", "a_c", "=", "self", ".", "sigmoid_c", "(", "(", "avg_c", "+", "max_c", ")", ")", "\n", "x", "=", "x", "*", "a_c", "\n", "# spatial attention:", "\n", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "attention", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "attention", "=", "self", ".", "conv_spatial", "(", "attention", ")", "\n", "attention", "=", "self", ".", "sigmoid_s", "(", "attention", ")", "\n", "output", "=", "attention", "*", "x", "+", "origin", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal.__init__": [[183, 191], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_no", ")", ":", "\n", "        ", "super", "(", "GCNonLocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "squeeze", "=", "nn", ".", "Conv2d", "(", "channel_no", ",", "channel_no", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "channel_no", "//", "8", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "expand", "=", "nn", ".", "Conv2d", "(", "channel_no", "//", "8", ",", "channel_no", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal.forward": [[192, 203], ["NNBaselines.GCNonLocal.conv_reduce", "NNBaselines.GCNonLocal.view", "NNBaselines.GCNonLocal.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "xxx.view.view.view", "NNBaselines.GCNonLocal.expand", "NNBaselines.GCNonLocal.relu", "NNBaselines.GCNonLocal.norm", "NNBaselines.GCNonLocal.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "xx", "=", "self", ".", "conv_reduce", "(", "x", ")", "\n", "xx", "=", "xx", ".", "view", "(", "b", ",", "h", "*", "w", ",", "1", ")", "\n", "xx", "=", "self", ".", "softmax", "(", "xx", ")", "\n", "x_", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "xxx", "=", "torch", ".", "bmm", "(", "x_", ",", "xx", ")", "\n", "xxx", "=", "xxx", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "attention", "=", "self", ".", "expand", "(", "self", ".", "relu", "(", "self", ".", "norm", "(", "self", ".", "squeeze", "(", "xxx", ")", ")", ")", ")", "\n", "output", "=", "attention", "*", "x", "+", "x", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.DilatedUNet.__init__": [[209, 238], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.dilated_conv", "NNBaselines.dilated_conv", "NNBaselines.dilated_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.dilated_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.dilated_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.dilated_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ",", "dilation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "#", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "#", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "dilated_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "dconv_down3", "=", "dilated_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "dconv_down4", "=", "dilated_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ",", "dilation", "=", "dilation", ")", "\n", "#", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "#", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.DilatedUNet.forward": [[239, 256], ["NNBaselines.DilatedUNet.dconv_down1", "NNBaselines.DilatedUNet.dconv_down2", "NNBaselines.DilatedUNet.dconv_down3", "NNBaselines.DilatedUNet.dconv_down4", "NNBaselines.DilatedUNet.bridge", "NNBaselines.DilatedUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DilatedUNet.dconv_up3", "NNBaselines.DilatedUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DilatedUNet.dconv_up2", "NNBaselines.DilatedUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DilatedUNet.dconv_up1", "NNBaselines.DilatedUNet.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "dconv_down1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "dconv_down2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "dconv_down3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CSE_UNet_Encoder.__init__": [[263, 292], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "#", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_1", "=", "CSE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_2", "=", "CSE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_3", "=", "CSE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CSE_UNet_Encoder.forward": [[293, 310], ["NNBaselines.CSE_UNet_Encoder.cse_1", "NNBaselines.CSE_UNet_Encoder.cse_2", "NNBaselines.CSE_UNet_Encoder.cse_3", "NNBaselines.CSE_UNet_Encoder.dconv_down4", "NNBaselines.CSE_UNet_Encoder.bridge", "NNBaselines.CSE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CSE_UNet_Encoder.dconv_up3", "NNBaselines.CSE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CSE_UNet_Encoder.dconv_up2", "NNBaselines.CSE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CSE_UNet_Encoder.dconv_up1", "NNBaselines.CSE_UNet_Encoder.conv_last", "NNBaselines.CSE_UNet_Encoder.dconv_down1", "NNBaselines.CSE_UNet_Encoder.dconv_down2", "NNBaselines.CSE_UNet_Encoder.dconv_down3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "cse_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "cse_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "cse_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CSE_UNet_Full.__init__": [[313, 344], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_1", "=", "CSE", "(", "self", ".", "w1", ")", "\n", "self", ".", "cse_u1", "=", "CSE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_2", "=", "CSE", "(", "self", ".", "w2", ")", "\n", "self", ".", "cse_u2", "=", "CSE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_3", "=", "CSE", "(", "self", ".", "w3", ")", "\n", "self", ".", "cse_u3", "=", "CSE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CSE_UNet_Full.forward": [[345, 362], ["NNBaselines.CSE_UNet_Full.cse_1", "NNBaselines.CSE_UNet_Full.cse_2", "NNBaselines.CSE_UNet_Full.cse_3", "NNBaselines.CSE_UNet_Full.dconv_down4", "NNBaselines.CSE_UNet_Full.bridge", "NNBaselines.CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CSE_UNet_Full.cse_u3", "NNBaselines.CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CSE_UNet_Full.cse_u2", "NNBaselines.CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CSE_UNet_Full.cse_u1", "NNBaselines.CSE_UNet_Full.conv_last", "NNBaselines.CSE_UNet_Full.dconv_down1", "NNBaselines.CSE_UNet_Full.dconv_down2", "NNBaselines.CSE_UNet_Full.dconv_down3", "NNBaselines.CSE_UNet_Full.dconv_up3", "NNBaselines.CSE_UNet_Full.dconv_up2", "NNBaselines.CSE_UNet_Full.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "cse_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "cse_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "cse_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cse_u3", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cse_u2", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cse_u1", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.Deeper_CSE_UNet_Full.__init__": [[365, 398], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.CSE", "NNBaselines.CSE", "NNBaselines.double_conv", "NNBaselines.first_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.first_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up0", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w1", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_1", "=", "CSE", "(", "self", ".", "w1", ")", "\n", "self", ".", "cse_u1", "=", "CSE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_2", "=", "CSE", "(", "self", ".", "w2", ")", "\n", "self", ".", "cse_u2", "=", "CSE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "cse_3", "=", "CSE", "(", "self", ".", "w3", ")", "\n", "self", ".", "cse_u3", "=", "CSE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "dconv_down0", "=", "first_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w1", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.Deeper_CSE_UNet_Full.forward": [[399, 420], ["NNBaselines.Deeper_CSE_UNet_Full.dconv_down0", "NNBaselines.Deeper_CSE_UNet_Full.cse_1", "NNBaselines.Deeper_CSE_UNet_Full.cse_2", "NNBaselines.Deeper_CSE_UNet_Full.cse_3", "NNBaselines.Deeper_CSE_UNet_Full.dconv_down4", "NNBaselines.Deeper_CSE_UNet_Full.bridge", "NNBaselines.Deeper_CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CSE_UNet_Full.cse_u3", "NNBaselines.Deeper_CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CSE_UNet_Full.cse_u2", "NNBaselines.Deeper_CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CSE_UNet_Full.cse_u1", "NNBaselines.Deeper_CSE_UNet_Full.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CSE_UNet_Full.dconv_up0", "NNBaselines.Deeper_CSE_UNet_Full.conv_last", "NNBaselines.Deeper_CSE_UNet_Full.dconv_down1", "NNBaselines.Deeper_CSE_UNet_Full.dconv_down2", "NNBaselines.Deeper_CSE_UNet_Full.dconv_down3", "NNBaselines.Deeper_CSE_UNet_Full.dconv_up3", "NNBaselines.Deeper_CSE_UNet_Full.dconv_up2", "NNBaselines.Deeper_CSE_UNet_Full.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv0", "=", "self", ".", "dconv_down0", "(", "x", ")", "\n", "conv1", "=", "self", ".", "cse_1", "(", "self", ".", "dconv_down1", "(", "conv0", ")", ")", "\n", "conv2", "=", "self", ".", "cse_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "cse_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cse_u3", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cse_u2", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cse_u1", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv0", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up0", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal_UNet_All.__init__": [[425, 457], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "GCNonLocal", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "GCNonLocal", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "GCNonLocal", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "GCNonLocal", "(", "self", ".", "w4", ")", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1_d", "=", "GCNonLocal", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "se_2_d", "=", "GCNonLocal", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "se_3_d", "=", "GCNonLocal", "(", "self", ".", "w3", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal_UNet_All.forward": [[458, 475], ["NNBaselines.GCNonLocal_UNet_All.se_1", "NNBaselines.GCNonLocal_UNet_All.se_2", "NNBaselines.GCNonLocal_UNet_All.se_3", "NNBaselines.GCNonLocal_UNet_All.dconv_down4", "NNBaselines.GCNonLocal_UNet_All.se_4", "NNBaselines.GCNonLocal_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_All.se_3_d", "NNBaselines.GCNonLocal_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_All.se_2_d", "NNBaselines.GCNonLocal_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_All.se_1_d", "NNBaselines.GCNonLocal_UNet_All.conv_last", "NNBaselines.GCNonLocal_UNet_All.dconv_down1", "NNBaselines.GCNonLocal_UNet_All.dconv_down2", "NNBaselines.GCNonLocal_UNet_All.dconv_down3", "NNBaselines.GCNonLocal_UNet_All.bridge", "NNBaselines.GCNonLocal_UNet_All.dconv_up3", "NNBaselines.GCNonLocal_UNet_All.dconv_up2", "NNBaselines.GCNonLocal_UNet_All.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3_d", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2_d", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1_d", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal_UNet_Decoder.__init__": [[478, 505], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "GCNonLocal", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "GCNonLocal", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "GCNonLocal", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal_UNet_Decoder.forward": [[506, 523], ["NNBaselines.GCNonLocal_UNet_Decoder.dconv_down1", "NNBaselines.GCNonLocal_UNet_Decoder.dconv_down2", "NNBaselines.GCNonLocal_UNet_Decoder.dconv_down3", "NNBaselines.GCNonLocal_UNet_Decoder.dconv_down4", "NNBaselines.GCNonLocal_UNet_Decoder.bridge", "NNBaselines.GCNonLocal_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_Decoder.se_3", "NNBaselines.GCNonLocal_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_Decoder.se_2", "NNBaselines.GCNonLocal_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_Decoder.se_1", "NNBaselines.GCNonLocal_UNet_Decoder.conv_last", "NNBaselines.GCNonLocal_UNet_Decoder.dconv_up3", "NNBaselines.GCNonLocal_UNet_Decoder.dconv_up2", "NNBaselines.GCNonLocal_UNet_Decoder.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "dconv_down1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "dconv_down2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "dconv_down3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal_UNet_Encoder.__init__": [[526, 554], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.GCNonLocal", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "GCNonLocal", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "GCNonLocal", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "GCNonLocal", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "GCNonLocal", "(", "self", ".", "w4", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GCNonLocal_UNet_Encoder.forward": [[555, 572], ["NNBaselines.GCNonLocal_UNet_Encoder.se_1", "NNBaselines.GCNonLocal_UNet_Encoder.se_2", "NNBaselines.GCNonLocal_UNet_Encoder.se_3", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_down4", "NNBaselines.GCNonLocal_UNet_Encoder.se_4", "NNBaselines.GCNonLocal_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_up3", "NNBaselines.GCNonLocal_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_up2", "NNBaselines.GCNonLocal_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_up1", "NNBaselines.GCNonLocal_UNet_Encoder.conv_last", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_down1", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_down2", "NNBaselines.GCNonLocal_UNet_Encoder.dconv_down3", "NNBaselines.GCNonLocal_UNet_Encoder.bridge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM_UNet_All.__init__": [[578, 610], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "CBAM", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "CBAM", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "CBAM", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "CBAM", "(", "self", ".", "w4", ")", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1_d", "=", "CBAM", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "se_2_d", "=", "CBAM", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "se_3_d", "=", "CBAM", "(", "self", ".", "w3", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM_UNet_All.forward": [[611, 628], ["NNBaselines.CBAM_UNet_All.se_1", "NNBaselines.CBAM_UNet_All.se_2", "NNBaselines.CBAM_UNet_All.se_3", "NNBaselines.CBAM_UNet_All.dconv_down4", "NNBaselines.CBAM_UNet_All.se_4", "NNBaselines.CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_All.se_3_d", "NNBaselines.CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_All.se_2_d", "NNBaselines.CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_All.se_1_d", "NNBaselines.CBAM_UNet_All.conv_last", "NNBaselines.CBAM_UNet_All.dconv_down1", "NNBaselines.CBAM_UNet_All.dconv_down2", "NNBaselines.CBAM_UNet_All.dconv_down3", "NNBaselines.CBAM_UNet_All.bridge", "NNBaselines.CBAM_UNet_All.dconv_up3", "NNBaselines.CBAM_UNet_All.dconv_up2", "NNBaselines.CBAM_UNet_All.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3_d", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2_d", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1_d", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.Deeper_CBAM_UNet_All.__init__": [[631, 665], ["torch.Module.__init__", "NNBaselines.first_conv", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.first_conv", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.first_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.first_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up0", "=", "first_conv", "(", "self", ".", "w1", "+", "self", ".", "w1", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "CBAM", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "CBAM", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "CBAM", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "CBAM", "(", "self", ".", "w4", ")", "\n", "#", "\n", "self", ".", "dconv_down0", "=", "first_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w1", ",", "step", "=", "2", ")", "\n", "self", ".", "se_1_d", "=", "CBAM", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "se_2_d", "=", "CBAM", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "se_3_d", "=", "CBAM", "(", "self", ".", "w3", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.Deeper_CBAM_UNet_All.forward": [[666, 687], ["NNBaselines.Deeper_CBAM_UNet_All.dconv_down0", "NNBaselines.Deeper_CBAM_UNet_All.se_1", "NNBaselines.Deeper_CBAM_UNet_All.se_2", "NNBaselines.Deeper_CBAM_UNet_All.se_3", "NNBaselines.Deeper_CBAM_UNet_All.dconv_down4", "NNBaselines.Deeper_CBAM_UNet_All.se_4", "NNBaselines.Deeper_CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CBAM_UNet_All.se_3_d", "NNBaselines.Deeper_CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CBAM_UNet_All.se_2_d", "NNBaselines.Deeper_CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CBAM_UNet_All.se_1_d", "NNBaselines.Deeper_CBAM_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.Deeper_CBAM_UNet_All.dconv_up0", "NNBaselines.Deeper_CBAM_UNet_All.conv_last", "NNBaselines.Deeper_CBAM_UNet_All.dconv_down1", "NNBaselines.Deeper_CBAM_UNet_All.dconv_down2", "NNBaselines.Deeper_CBAM_UNet_All.dconv_down3", "NNBaselines.Deeper_CBAM_UNet_All.bridge", "NNBaselines.Deeper_CBAM_UNet_All.dconv_up3", "NNBaselines.Deeper_CBAM_UNet_All.dconv_up2", "NNBaselines.Deeper_CBAM_UNet_All.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv0", "=", "self", ".", "dconv_down0", "(", "x", ")", "\n", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "conv0", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3_d", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2_d", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1_d", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv0", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up0", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM_UNet_Decoder.__init__": [[690, 717], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "CBAM", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "CBAM", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "CBAM", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM_UNet_Decoder.forward": [[718, 735], ["NNBaselines.CBAM_UNet_Decoder.dconv_down1", "NNBaselines.CBAM_UNet_Decoder.dconv_down2", "NNBaselines.CBAM_UNet_Decoder.dconv_down3", "NNBaselines.CBAM_UNet_Decoder.dconv_down4", "NNBaselines.CBAM_UNet_Decoder.bridge", "NNBaselines.CBAM_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_Decoder.se_3", "NNBaselines.CBAM_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_Decoder.se_2", "NNBaselines.CBAM_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_Decoder.se_1", "NNBaselines.CBAM_UNet_Decoder.conv_last", "NNBaselines.CBAM_UNet_Decoder.dconv_up3", "NNBaselines.CBAM_UNet_Decoder.dconv_up2", "NNBaselines.CBAM_UNet_Decoder.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "dconv_down1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "dconv_down2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "dconv_down3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM_UNet_Encoder.__init__": [[738, 766], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.CBAM", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "CBAM", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "CBAM", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "CBAM", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "CBAM", "(", "self", ".", "w4", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.CBAM_UNet_Encoder.forward": [[767, 784], ["NNBaselines.CBAM_UNet_Encoder.se_1", "NNBaselines.CBAM_UNet_Encoder.se_2", "NNBaselines.CBAM_UNet_Encoder.se_3", "NNBaselines.CBAM_UNet_Encoder.dconv_down4", "NNBaselines.CBAM_UNet_Encoder.se_4", "NNBaselines.CBAM_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_Encoder.dconv_up3", "NNBaselines.CBAM_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_Encoder.dconv_up2", "NNBaselines.CBAM_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.CBAM_UNet_Encoder.dconv_up1", "NNBaselines.CBAM_UNet_Encoder.conv_last", "NNBaselines.CBAM_UNet_Encoder.dconv_down1", "NNBaselines.CBAM_UNet_Encoder.dconv_down2", "NNBaselines.CBAM_UNet_Encoder.dconv_down3", "NNBaselines.CBAM_UNet_Encoder.bridge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE_UNet_All.__init__": [[790, 822], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "GE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "GE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "GE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "GE", "(", "self", ".", "w4", ")", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1_d", "=", "GE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "se_2_d", "=", "GE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "se_3_d", "=", "GE", "(", "self", ".", "w3", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE_UNet_All.forward": [[823, 840], ["NNBaselines.GE_UNet_All.se_1", "NNBaselines.GE_UNet_All.se_2", "NNBaselines.GE_UNet_All.se_3", "NNBaselines.GE_UNet_All.dconv_down4", "NNBaselines.GE_UNet_All.se_4", "NNBaselines.GE_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_All.se_3_d", "NNBaselines.GE_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_All.se_2_d", "NNBaselines.GE_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_All.se_1_d", "NNBaselines.GE_UNet_All.conv_last", "NNBaselines.GE_UNet_All.dconv_down1", "NNBaselines.GE_UNet_All.dconv_down2", "NNBaselines.GE_UNet_All.dconv_down3", "NNBaselines.GE_UNet_All.bridge", "NNBaselines.GE_UNet_All.dconv_up3", "NNBaselines.GE_UNet_All.dconv_up2", "NNBaselines.GE_UNet_All.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3_d", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2_d", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1_d", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE_UNet_Decoder.__init__": [[843, 870], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "GE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "GE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "GE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE_UNet_Decoder.forward": [[871, 888], ["NNBaselines.GE_UNet_Decoder.dconv_down1", "NNBaselines.GE_UNet_Decoder.dconv_down2", "NNBaselines.GE_UNet_Decoder.dconv_down3", "NNBaselines.GE_UNet_Decoder.dconv_down4", "NNBaselines.GE_UNet_Decoder.bridge", "NNBaselines.GE_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_Decoder.se_3", "NNBaselines.GE_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_Decoder.se_2", "NNBaselines.GE_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_Decoder.se_1", "NNBaselines.GE_UNet_Decoder.conv_last", "NNBaselines.GE_UNet_Decoder.dconv_up3", "NNBaselines.GE_UNet_Decoder.dconv_up2", "NNBaselines.GE_UNet_Decoder.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "dconv_down1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "dconv_down2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "dconv_down3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE_UNet_Encoder.__init__": [[891, 919], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.GE", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "GE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "GE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "GE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "GE", "(", "self", ".", "w4", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.GE_UNet_Encoder.forward": [[920, 937], ["NNBaselines.GE_UNet_Encoder.se_1", "NNBaselines.GE_UNet_Encoder.se_2", "NNBaselines.GE_UNet_Encoder.se_3", "NNBaselines.GE_UNet_Encoder.dconv_down4", "NNBaselines.GE_UNet_Encoder.se_4", "NNBaselines.GE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_Encoder.dconv_up3", "NNBaselines.GE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_Encoder.dconv_up2", "NNBaselines.GE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.GE_UNet_Encoder.dconv_up1", "NNBaselines.GE_UNet_Encoder.conv_last", "NNBaselines.GE_UNet_Encoder.dconv_down1", "NNBaselines.GE_UNet_Encoder.dconv_down2", "NNBaselines.GE_UNet_Encoder.dconv_down3", "NNBaselines.GE_UNet_Encoder.bridge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE_UNet_All.__init__": [[942, 974], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "SE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "SE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "SE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "SE", "(", "self", ".", "w4", ")", "\n", "#", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1_d", "=", "SE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "se_2_d", "=", "SE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "se_3_d", "=", "SE", "(", "self", ".", "w3", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE_UNet_All.forward": [[975, 992], ["NNBaselines.SE_UNet_All.se_1", "NNBaselines.SE_UNet_All.se_2", "NNBaselines.SE_UNet_All.se_3", "NNBaselines.SE_UNet_All.dconv_down4", "NNBaselines.SE_UNet_All.se_4", "NNBaselines.SE_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_All.se_3_d", "NNBaselines.SE_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_All.se_2_d", "NNBaselines.SE_UNet_All.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_All.se_1_d", "NNBaselines.SE_UNet_All.conv_last", "NNBaselines.SE_UNet_All.dconv_down1", "NNBaselines.SE_UNet_All.dconv_down2", "NNBaselines.SE_UNet_All.dconv_down3", "NNBaselines.SE_UNet_All.bridge", "NNBaselines.SE_UNet_All.dconv_up3", "NNBaselines.SE_UNet_All.dconv_up2", "NNBaselines.SE_UNet_All.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3_d", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2_d", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1_d", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE_UNet_Decoder.__init__": [[995, 1022], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "SE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "SE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "SE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE_UNet_Decoder.forward": [[1023, 1040], ["NNBaselines.SE_UNet_Decoder.dconv_down1", "NNBaselines.SE_UNet_Decoder.dconv_down2", "NNBaselines.SE_UNet_Decoder.dconv_down3", "NNBaselines.SE_UNet_Decoder.dconv_down4", "NNBaselines.SE_UNet_Decoder.bridge", "NNBaselines.SE_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_Decoder.se_3", "NNBaselines.SE_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_Decoder.se_2", "NNBaselines.SE_UNet_Decoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_Decoder.se_1", "NNBaselines.SE_UNet_Decoder.conv_last", "NNBaselines.SE_UNet_Decoder.dconv_up3", "NNBaselines.SE_UNet_Decoder.dconv_up2", "NNBaselines.SE_UNet_Decoder.dconv_up1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "dconv_down1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "dconv_down2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "dconv_down3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_3", "(", "self", ".", "dconv_up3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_2", "(", "self", ".", "dconv_up2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "se_1", "(", "self", ".", "dconv_up1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE_UNet_Encoder.__init__": [[1043, 1071], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.SE", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "se_1", "=", "SE", "(", "self", ".", "w1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "se_2", "=", "SE", "(", "self", ".", "w2", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "se_3", "=", "SE", "(", "self", ".", "w3", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "se_4", "=", "SE", "(", "self", ".", "w4", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.SE_UNet_Encoder.forward": [[1072, 1089], ["NNBaselines.SE_UNet_Encoder.se_1", "NNBaselines.SE_UNet_Encoder.se_2", "NNBaselines.SE_UNet_Encoder.se_3", "NNBaselines.SE_UNet_Encoder.dconv_down4", "NNBaselines.SE_UNet_Encoder.se_4", "NNBaselines.SE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_Encoder.dconv_up3", "NNBaselines.SE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_Encoder.dconv_up2", "NNBaselines.SE_UNet_Encoder.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.SE_UNet_Encoder.dconv_up1", "NNBaselines.SE_UNet_Encoder.conv_last", "NNBaselines.SE_UNet_Encoder.dconv_down1", "NNBaselines.SE_UNet_Encoder.dconv_down2", "NNBaselines.SE_UNet_Encoder.dconv_down3", "NNBaselines.SE_UNet_Encoder.bridge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "se_1", "(", "self", ".", "dconv_down1", "(", "x", ")", ")", "\n", "conv2", "=", "self", ".", "se_2", "(", "self", ".", "dconv_down2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "se_3", "(", "self", ".", "dconv_down3", "(", "conv2", ")", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "se_4", "(", "self", ".", "bridge", "(", "conv4", ")", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.UNet.__init__": [[1093, 1123], ["torch.Module.__init__", "NNBaselines.single_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ",", "class_no", ")", ":", "\n", "#", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#", "\n", "if", "class_no", "==", "2", ":", "\n", "#", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "#", "\n", "", "else", ":", "\n", "#", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "#", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "econv0", "=", "single_conv", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "econv1", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "econv2", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "econv3", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "self", ".", "bridge", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w4", ",", "out_channels", "=", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "dconv3", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w4", "+", "self", ".", "w4", ",", "out_channels", "=", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv2", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w3", "+", "self", ".", "w3", ",", "out_channels", "=", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv1", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w2", "+", "self", ".", "w2", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv0", "=", "double_conv", "(", "in_channels", "=", "self", ".", "w1", "+", "self", ".", "w1", ",", "out_channels", "=", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "dconv_last", "=", "nn", ".", "Conv2d", "(", "self", ".", "w1", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.UNet.forward": [[1124, 1154], ["NNBaselines.UNet.econv0", "NNBaselines.UNet.econv1", "NNBaselines.UNet.econv2", "NNBaselines.UNet.econv3", "NNBaselines.UNet.bridge", "NNBaselines.UNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.UNet.dconv3", "NNBaselines.UNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.UNet.dconv2", "NNBaselines.UNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.UNet.dconv1", "NNBaselines.UNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.UNet.dconv0", "NNBaselines.UNet.dconv_last", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.pad", "torch.pad", "torch.pad", "torch.pad.size", "NNBaselines.UNet.size", "NNBaselines.UNet.size", "torch.pad.size", "NNBaselines.UNet.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x0", "=", "self", ".", "econv0", "(", "x", ")", "\n", "x1", "=", "self", ".", "econv1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "econv2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "econv3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "bridge", "(", "x3", ")", "\n", "\n", "y", "=", "self", ".", "upsample", "(", "x4", ")", "\n", "\n", "if", "y", ".", "size", "(", ")", "[", "2", "]", "!=", "x3", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "\n", "            ", "diffY", "=", "torch", ".", "tensor", "(", "[", "x3", ".", "size", "(", ")", "[", "2", "]", "-", "y", ".", "size", "(", ")", "[", "2", "]", "]", ")", "\n", "diffX", "=", "torch", ".", "tensor", "(", "[", "x3", ".", "size", "(", ")", "[", "3", "]", "-", "y", ".", "size", "(", ")", "[", "3", "]", "]", ")", "\n", "#", "\n", "y", "=", "F", ".", "pad", "(", "y", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "\n", "", "y3", "=", "torch", ".", "cat", "(", "[", "y", ",", "x3", "]", ",", "dim", "=", "1", ")", "\n", "y3", "=", "self", ".", "dconv3", "(", "y3", ")", "\n", "y2", "=", "self", ".", "upsample", "(", "y3", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "[", "y2", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "y2", "=", "self", ".", "dconv2", "(", "y2", ")", "\n", "y1", "=", "self", ".", "upsample", "(", "y2", ")", "\n", "y1", "=", "torch", ".", "cat", "(", "[", "y1", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "y1", "=", "self", ".", "dconv1", "(", "y1", ")", "\n", "y0", "=", "self", ".", "upsample", "(", "y1", ")", "\n", "y0", "=", "torch", ".", "cat", "(", "[", "y0", ",", "x0", "]", ",", "dim", "=", "1", ")", "\n", "y0", "=", "self", ".", "dconv0", "(", "y0", ")", "\n", "y", "=", "self", ".", "dconv_last", "(", "y0", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.DeeperUNet.__init__": [[1164, 1193], ["torch.Module.__init__", "NNBaselines.first_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.first_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "#", "\n", "self", ".", "dconv_down0", "=", "first_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w1", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "#", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up0", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w1", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "#", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "#", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.DeeperUNet.forward": [[1194, 1215], ["NNBaselines.DeeperUNet.dconv_down0", "NNBaselines.DeeperUNet.dconv_down1", "NNBaselines.DeeperUNet.dconv_down2", "NNBaselines.DeeperUNet.dconv_down3", "NNBaselines.DeeperUNet.dconv_down4", "NNBaselines.DeeperUNet.bridge", "NNBaselines.DeeperUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DeeperUNet.dconv_up3", "NNBaselines.DeeperUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DeeperUNet.dconv_up2", "NNBaselines.DeeperUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DeeperUNet.dconv_up1", "NNBaselines.DeeperUNet.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.DeeperUNet.dconv_up0", "NNBaselines.DeeperUNet.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv0", "=", "self", ".", "dconv_down0", "(", "x", ")", "\n", "conv1", "=", "self", ".", "dconv_down1", "(", "conv0", ")", "\n", "conv2", "=", "self", ".", "dconv_down2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "dconv_down3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "dconv_down4", "(", "conv3", ")", "\n", "conv4", "=", "self", ".", "bridge", "(", "conv4", ")", "\n", "x", "=", "self", ".", "upsample", "(", "conv4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up1", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv0", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dconv_up0", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.AttentionUNet.__init__": [[1218, 1255], ["torch.Module.__init__", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "NNBaselines.double_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "NNBaselines.Attention_block", "NNBaselines.Attention_block", "NNBaselines.Attention_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "width", ")", ":", "\n", "        ", "super", "(", "AttentionUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.attention_visual = visulisation", "\n", "class_no", "=", "2", "\n", "if", "class_no", ">", "2", ":", "\n", "            ", "self", ".", "final_in", "=", "class_no", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_in", "=", "1", "\n", "\n", "", "self", ".", "w1", "=", "width", "\n", "self", ".", "w2", "=", "width", "*", "2", "\n", "self", ".", "w3", "=", "width", "*", "4", "\n", "self", ".", "w4", "=", "width", "*", "8", "\n", "\n", "self", ".", "dconv_down1", "=", "double_conv", "(", "in_ch", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_down2", "=", "double_conv", "(", "self", ".", "w1", ",", "self", ".", "w2", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down3", "=", "double_conv", "(", "self", ".", "w2", ",", "self", ".", "w3", ",", "step", "=", "2", ")", "\n", "self", ".", "dconv_down4", "=", "double_conv", "(", "self", ".", "w3", ",", "self", ".", "w4", ",", "step", "=", "2", ")", "\n", "\n", "self", ".", "bridge", "=", "double_conv", "(", "self", ".", "w4", ",", "self", ".", "w4", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up3", "=", "double_conv", "(", "self", ".", "w3", "+", "self", ".", "w4", ",", "self", ".", "w3", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up2", "=", "double_conv", "(", "self", ".", "w2", "+", "self", ".", "w3", ",", "self", ".", "w2", ",", "step", "=", "1", ")", "\n", "self", ".", "dconv_up1", "=", "double_conv", "(", "self", ".", "w1", "+", "self", ".", "w2", ",", "self", ".", "w1", ",", "step", "=", "1", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "a3_match_res", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "a2_match_res", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "a1_match_res", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "attention_3", "=", "Attention_block", "(", "self", ".", "w4", ",", "self", ".", "w3", ")", "\n", "\n", "self", ".", "attention_2", "=", "Attention_block", "(", "self", ".", "w3", ",", "self", ".", "w2", ")", "\n", "\n", "self", ".", "attention_1", "=", "Attention_block", "(", "self", ".", "w2", ",", "self", ".", "w1", ")", "\n", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "width", ",", "self", ".", "final_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.AttentionUNet.forward": [[1256, 1300], ["NNBaselines.AttentionUNet.dconv_down1", "NNBaselines.AttentionUNet.dconv_down2", "NNBaselines.AttentionUNet.dconv_down3", "NNBaselines.AttentionUNet.dconv_down4", "NNBaselines.AttentionUNet.bridge", "NNBaselines.AttentionUNet.attention_3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.AttentionUNet.dconv_up3", "NNBaselines.AttentionUNet.attention_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.AttentionUNet.dconv_up2", "NNBaselines.AttentionUNet.attention_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NNBaselines.AttentionUNet.dconv_up1", "NNBaselines.AttentionUNet.conv_last", "NNBaselines.AttentionUNet.a3_match_res", "NNBaselines.AttentionUNet.a2_match_res", "NNBaselines.AttentionUNet.a1_match_res", "NNBaselines.AttentionUNet.upsample", "NNBaselines.AttentionUNet.upsample", "NNBaselines.AttentionUNet.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#", "\n", "# if self.attention_visual is True:", "\n", "#     attention_weights = []", "\n", "#     trunk_features = []", "\n", "#", "\n", "        ", "s1", "=", "self", ".", "dconv_down1", "(", "x", ")", "\n", "s2", "=", "self", ".", "dconv_down2", "(", "s1", ")", "\n", "s3", "=", "self", ".", "dconv_down3", "(", "s2", ")", "\n", "s4", "=", "self", ".", "dconv_down4", "(", "s3", ")", "\n", "s4", "=", "self", ".", "bridge", "(", "s4", ")", "\n", "#", "\n", "attn_3", "=", "self", ".", "attention_3", "(", "self", ".", "a3_match_res", "(", "s4", ")", ",", "s3", ")", "\n", "a_s3", "=", "attn_3", "*", "s3", "+", "s3", "\n", "#", "\n", "# if self.attention_visual is True:", "\n", "#     attention_weights.append(attn_3)", "\n", "#     trunk_features.append(s3)", "\n", "#", "\n", "output", "=", "torch", ".", "cat", "(", "[", "a_s3", ",", "self", ".", "upsample", "(", "s4", ")", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "dconv_up3", "(", "output", ")", "\n", "#", "\n", "attn_2", "=", "self", ".", "attention_2", "(", "self", ".", "a2_match_res", "(", "output", ")", ",", "s2", ")", "\n", "a_s2", "=", "attn_2", "*", "s2", "+", "s2", "\n", "#", "\n", "# if self.attention_visual is True:", "\n", "#     attention_weights.append(attn_2)", "\n", "#     trunk_features.append(s2)", "\n", "#", "\n", "output", "=", "torch", ".", "cat", "(", "[", "a_s2", ",", "self", ".", "upsample", "(", "output", ")", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "dconv_up2", "(", "output", ")", "\n", "#", "\n", "attn_1", "=", "self", ".", "attention_1", "(", "self", ".", "a1_match_res", "(", "output", ")", ",", "s1", ")", "\n", "a_s1", "=", "attn_1", "*", "s1", "+", "s1", "\n", "#", "\n", "# if self.attention_visual is True:", "\n", "#     attention_weights.append(attn_1)", "\n", "#     trunk_features.append(s1)", "\n", "#", "\n", "output", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "self", ".", "upsample", "(", "output", ")", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "dconv_up1", "(", "output", ")", "\n", "output", "=", "self", ".", "conv_last", "(", "output", ")", "\n", "#", "\n", "return", "output", "\n", "# if self.attention_visual is False:", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.first_conv": [[11, 16], ["torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["None"], ["def", "first_conv", "(", "in_channels", ",", "out_channels", ",", "step", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "5", ",", "stride", "=", "step", ",", "padding", "=", "2", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.single_conv": [[19, 25], ["torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "single_conv", "(", "in_channels", ",", "out_channels", ",", "step", ")", ":", "\n", "#", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "step", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.double_conv": [[28, 38], ["torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "double_conv", "(", "in_channels", ",", "out_channels", ",", "step", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "step", ",", "\n", "padding", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNBaselines.dilated_conv": [[41, 49], ["torch.Sequential", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "dilated_conv", "(", "in_channels", ",", "out_channels", ",", "step", ",", "dilation", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "step", ",", "padding", "=", "dilation", ",", "groups", "=", "1", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "groups", "=", "1", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__init__": [[34, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgs_folder", ",", "labels_folder", ",", "augmentation", ")", ":", "\n", "\n", "# 1. Initialize file paths or a list of file names.", "\n", "        ", "self", ".", "imgs_folder", "=", "imgs_folder", "\n", "self", ".", "labels_folder", "=", "labels_folder", "\n", "self", ".", "data_augmentation", "=", "augmentation", "\n", "# self.transform = transforms", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__getitem__": [[42, 272], ["glob.glob", "glob.glob", "glob.glob.sort", "glob.glob.sort", "tifffile.imread", "numpy.array", "tifffile.imread", "numpy.array", "os.path.split", "os.path.splitext", "len", "len", "numpy.shape", "os.path.join", "os.path.join", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "random.uniform", "min", "numpy.transpose", "numpy.shape", "numpy.expand_dims", "min", "numpy.transpose", "numpy.expand_dims", "numpy.shape", "range", "numpy.flip().copy", "numpy.flip().copy", "random.uniform", "numpy.flip().copy", "numpy.flip().copy", "numpy.shape", "range", "numpy.flip().copy", "numpy.shape", "range", "numpy.flip().copy", "random.uniform", "numpy.flip", "numpy.flip", "numpy.flip().copy", "numpy.random.normal", "numpy.flip().copy", "numpy.shape", "range", "numpy.flip().copy", "numpy.flip().copy", "numpy.random.normal", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.shape", "range", "numpy.flip().copy", "numpy.flip().copy", "numpy.random.normal", "numpy.flip", "numpy.flip().copy", "numpy.flip().copy", "numpy.shape", "range", "numpy.flip().copy", "numpy.flip", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip().copy", "numpy.shape", "range", "numpy.flip().copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip().copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# 1. Read one data from file (e.g. using num py.fromfile, PIL.Image.open).", "\n", "# 2. Preprocess the data (e.g. torchvision.Transform).", "\n", "# 3. Return a data pair (e.g. image and label).", "\n", "\n", "        ", "all_images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "'*.tif'", ")", ")", "\n", "all_labels", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "labels_folder", ",", "'*.tif'", ")", ")", "\n", "# sort all in the same order", "\n", "all_labels", ".", "sort", "(", ")", "\n", "all_images", ".", "sort", "(", ")", "\n", "#", "\n", "# label = Image.open(all_labels[index])", "\n", "label", "=", "tiff", ".", "imread", "(", "all_labels", "[", "index", "]", ")", "\n", "label_origin", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "'float32'", ")", "\n", "image", "=", "tiff", ".", "imread", "(", "all_images", "[", "index", "]", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "'float32'", ")", "\n", "#", "\n", "labelname", "=", "all_labels", "[", "index", "]", "\n", "path_label", ",", "labelname", "=", "os", ".", "path", ".", "split", "(", "labelname", ")", "\n", "labelname", ",", "labelext", "=", "os", ".", "path", ".", "splitext", "(", "labelname", ")", "\n", "#", "\n", "c_amount", "=", "len", "(", "np", ".", "shape", "(", "label", ")", ")", "\n", "# Reshaping everyting to make sure the order: channel x height x width", "\n", "if", "c_amount", "==", "3", ":", "\n", "#", "\n", "            ", "d1", ",", "d2", ",", "d3", "=", "np", ".", "shape", "(", "label", ")", "\n", "#", "\n", "if", "d1", "!=", "min", "(", "d1", ",", "d2", ",", "d3", ")", ":", "\n", "#", "\n", "# label = np.reshape(label, (d3, d1, d2))", "\n", "                ", "label", "=", "np", ".", "transpose", "(", "label_origin", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "c", "=", "d3", "\n", "h", "=", "d1", "\n", "w", "=", "d2", "\n", "", "else", ":", "\n", "                ", "c", "=", "d1", "\n", "h", "=", "d2", "\n", "w", "=", "d3", "\n", "#", "\n", "", "", "elif", "c_amount", "==", "2", ":", "\n", "            ", "h", ",", "w", "=", "np", ".", "shape", "(", "label", ")", "\n", "# label = np.reshape(label_origin, (1, h, w))", "\n", "label", "=", "np", ".", "expand_dims", "(", "label_origin", ",", "axis", "=", "0", ")", "\n", "#", "\n", "", "c_amount", "=", "len", "(", "np", ".", "shape", "(", "image", ")", ")", "\n", "#", "\n", "if", "c_amount", "==", "3", ":", "\n", "#", "\n", "            ", "d1", ",", "d2", ",", "d3", "=", "np", ".", "shape", "(", "image", ")", "\n", "#", "\n", "if", "d1", "!=", "min", "(", "d1", ",", "d2", ",", "d3", ")", ":", "\n", "#", "\n", "# image = np.reshape(image, (d3, d1, d2))", "\n", "                ", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "#", "\n", "", "", "elif", "c_amount", "==", "2", ":", "\n", "#", "\n", "            ", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "#", "\n", "", "if", "self", ".", "data_augmentation", "==", "'full'", ":", "\n", "# augmentation:", "\n", "            ", "augmentation", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "#", "\n", "if", "augmentation", "<", "0.2", ":", "\n", "#", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "#", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "#", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "#", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "\n", "", "elif", "augmentation", "<", "0.4", ":", "\n", "#", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "#", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "#", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "#", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "\n", "# elif augmentation < 0.375:", "\n", "#     #", "\n", "#     c, h, w = np.shape(image)", "\n", "#     #", "\n", "#     for channel in range(c):", "\n", "#         #", "\n", "#         image[channel, :, :] = np.flip(image[channel, :, :], axis=1).copy()", "\n", "#         #", "\n", "#     label = np.flip(label, axis=2).copy()", "\n", "\n", "", "elif", "augmentation", "<", "0.6", ":", "\n", "#", "\n", "                ", "mean", "=", "0.0", "\n", "sigma", "=", "0.15", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "sigma", ",", "image", ".", "shape", ")", "\n", "mask_overflow_upper", "=", "image", "+", "noise", ">=", "1.0", "\n", "mask_overflow_lower", "=", "image", "+", "noise", "<", "0.0", "\n", "noise", "[", "mask_overflow_upper", "]", "=", "1.0", "\n", "noise", "[", "mask_overflow_lower", "]", "=", "0.0", "\n", "image", "+=", "noise", "\n", "\n", "# elif augmentation < 0.625:", "\n", "#     #", "\n", "#     c, h, w = np.shape(image)", "\n", "#     #", "\n", "#     for channel in range(c):", "\n", "#         #", "\n", "#         channel_ratio = random.uniform(0, 1)", "\n", "#         #", "\n", "#         image[channel, :, :] = image[channel, :, :] * channel_ratio", "\n", "\n", "# elif augmentation < 0.75:", "\n", "#     #", "\n", "#     c, h, w = np.shape(image)", "\n", "#     #", "\n", "#     for channel in range(c):", "\n", "#         #", "\n", "#         channel_ratio = random.uniform(0, 1)", "\n", "#         #", "\n", "#         image[channel, :, :] = image[channel, :, :] * channel_ratio", "\n", "#         image[channel, :, :] = np.flip(image[channel, :, :], axis=0).copy()", "\n", "#         image[channel, :, :] = np.flip(image[channel, :, :], axis=1).copy()", "\n", "#         #", "\n", "#     label = np.flip(label, axis=1).copy()", "\n", "#     label = np.flip(label, axis=2).copy()", "\n", "\n", "", "elif", "augmentation", "<", "0.8", ":", "\n", "#", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "#", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "#", "\n", "# channel_ratio = random.uniform(0, 1)", "\n", "# image[channel, :, :] = image[channel, :, :] * channel_ratio", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "#", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "#", "\n", "mean", "=", "0.0", "\n", "sigma", "=", "0.15", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "sigma", ",", "image", ".", "shape", ")", "\n", "mask_overflow_upper", "=", "image", "+", "noise", ">=", "1.0", "\n", "mask_overflow_lower", "=", "image", "+", "noise", "<", "0.0", "\n", "noise", "[", "mask_overflow_upper", "]", "=", "1.0", "\n", "noise", "[", "mask_overflow_lower", "]", "=", "0.0", "\n", "image", "+=", "noise", "\n", "\n", "", "", "elif", "self", ".", "data_augmentation", "==", "'flip'", ":", "\n", "# augmentation:", "\n", "            ", "augmentation", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "#", "\n", "if", "augmentation", ">", "0.5", "or", "augmentation", "==", "0.5", ":", "\n", "#", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "#", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "#", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "#", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "\n", "", "", "elif", "self", ".", "data_augmentation", "==", "'all_flip'", ":", "\n", "# augmentation:", "\n", "            ", "augmentation", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "\n", "if", "augmentation", "<=", "0.25", ":", "\n", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "\n", "", "elif", "augmentation", "<=", "0.5", ":", "\n", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "\n", "", "elif", "augmentation", "<=", "0.75", ":", "\n", "\n", "                ", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "image", "[", "channel", ",", ":", ",", ":", "]", "=", "np", ".", "flip", "(", "image", "[", "channel", ",", ":", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "label", "=", "label", "\n", "image", "=", "image", "\n", "\n", "", "", "elif", "self", ".", "data_augmentation", "==", "'Gaussian'", ":", "\n", "\n", "            ", "mean", "=", "0.0", "\n", "sigma", "=", "0.15", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "sigma", ",", "image", ".", "shape", ")", "\n", "mask_overflow_upper", "=", "image", "+", "noise", ">=", "1.0", "\n", "mask_overflow_lower", "=", "image", "+", "noise", "<", "0.0", "\n", "noise", "[", "mask_overflow_upper", "]", "=", "1.0", "\n", "noise", "[", "mask_overflow_lower", "]", "=", "0.0", "\n", "image", "+=", "noise", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "label", "=", "label", "\n", "image", "=", "image", "\n", "\n", "", "c", ",", "h", ",", "w", "=", "np", ".", "shape", "(", "image", ")", "\n", "\n", "# if h == 512 or w == 512:", "\n", "#     #", "\n", "#     image = image[:, 0::2, 0::2]", "\n", "#     label = label[:, 0::2, 0::2]", "\n", "#     #", "\n", "# elif h == 224 or w == 224:", "\n", "#", "\n", "#     image = image[:, 0::2, 0::2]", "\n", "#     label = label[:, 0::2, 0::2]", "\n", "#", "\n", "return", "image", ",", "label", ",", "labelname", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.CustomDataset.__len__": [[273, 276], ["len", "glob.glob", "os.path.join"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# You should change 0 to the total size of your dataset.", "\n", "        ", "return", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "'*.tif'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.fgsm_attack": [[21, 30], ["data_grad.sign", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "fgsm_attack", "(", "image", ",", "epsilon", ",", "data_grad", ")", ":", "\n", "# Collect the element-wise sign of the data gradient", "\n", "    ", "sign_data_grad", "=", "data_grad", ".", "sign", "(", ")", "\n", "# Create the perturbed image by adjusting each pixel of the input image", "\n", "perturbed_image", "=", "image", "+", "epsilon", "*", "sign_data_grad", "\n", "# Adding clipping to maintain [0,1] range", "\n", "perturbed_image", "=", "torch", ".", "clamp", "(", "perturbed_image", ",", "0", ",", "1", ")", "\n", "# Return the perturbed image", "\n", "return", "perturbed_image", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.evaluate": [[281, 366], ["model.eval", "enumerate", "testimg.to.to", "testlabel.to.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model", "torch.sigmoid", "torch.sigmoid", "NNLoss.dice_loss", "model.zero_grad", "NNLoss.dice_loss.backward", "NNUtils.fgsm_attack", "model", "torch.sigmoid", "torch.sigmoid", "NNMetrics.segmentation_scores", "NNMetrics.f1_score", "torch.where", "torch.where", "torch.where", "torch.where", "NNMetrics.hd95"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.dice_loss", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.fgsm_attack", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.segmentation_scores", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.f1_score", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.hd95"], ["", "", "def", "evaluate", "(", "evaluatedata", ",", "model", ",", "device", ",", "reverse_mode", ",", "class_no", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "f1", "=", "0", "\n", "test_iou", "=", "0", "\n", "test_h_dist", "=", "0", "\n", "recall", "=", "0", "\n", "precision", "=", "0", "\n", "\n", "FPs_Ns", "=", "0", "\n", "FNs_Ps", "=", "0", "\n", "FPs_Ps", "=", "0", "\n", "FNs_Ns", "=", "0", "\n", "TPs", "=", "0", "\n", "TNs", "=", "0", "\n", "FNs", "=", "0", "\n", "FPs", "=", "0", "\n", "Ps", "=", "0", "\n", "Ns", "=", "0", "\n", "\n", "effective_h", "=", "0", "\n", "\n", "for", "j", ",", "(", "testimg", ",", "testlabel", ",", "testname", ")", "in", "enumerate", "(", "evaluatedata", ")", ":", "\n", "# validate batch size will be set up as 2", "\n", "# j will be close enough to the", "\n", "\n", "        ", "testimg", "=", "testimg", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "testimg", ".", "requires_grad", "=", "True", "\n", "\n", "testlabel", "=", "testlabel", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "threshold", "=", "torch", ".", "tensor", "(", "[", "0.5", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "upper", "=", "torch", ".", "tensor", "(", "[", "1.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "lower", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "testoutput", "=", "model", "(", "testimg", ")", "\n", "\n", "prob_testoutput", "=", "torch", ".", "sigmoid", "(", "testoutput", ")", "\n", "\n", "# attack testing data:", "\n", "loss", "=", "dice_loss", "(", "prob_testoutput", ",", "testlabel", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "data_grad", "=", "testimg", ".", "grad", ".", "data", "\n", "perturbed_data", "=", "fgsm_attack", "(", "testimg", ",", "0.2", ",", "data_grad", ")", "\n", "prob_testoutput", "=", "model", "(", "perturbed_data", ")", "\n", "prob_testoutput", "=", "torch", ".", "sigmoid", "(", "prob_testoutput", ")", "\n", "\n", "if", "reverse_mode", "is", "True", ":", "\n", "\n", "            ", "testoutput", "=", "torch", ".", "where", "(", "prob_testoutput", "<", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "testoutput", "=", "torch", ".", "where", "(", "prob_testoutput", ">", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "", "mean_iu_", "=", "segmentation_scores", "(", "testlabel", ",", "testoutput", ",", "class_no", ")", "\n", "\n", "if", "(", "testoutput", "==", "1", ")", ".", "sum", "(", ")", ">", "1", "and", "(", "testlabel", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "\n", "            ", "h_dis95_", "=", "hd95", "(", "testoutput", ",", "testlabel", ",", "class_no", ")", "\n", "test_h_dist", "+=", "h_dis95_", "\n", "effective_h", "=", "effective_h", "+", "1", "\n", "\n", "", "f1_", ",", "recall_", ",", "precision_", ",", "TP", ",", "TN", ",", "FP", ",", "FN", ",", "P", ",", "N", "=", "f1_score", "(", "testlabel", ",", "testoutput", ",", "class_no", ")", "\n", "\n", "f1", "+=", "f1_", "\n", "test_iou", "+=", "mean_iu_", "\n", "recall", "+=", "recall_", "\n", "precision", "+=", "precision_", "\n", "TPs", "+=", "TP", "\n", "TNs", "+=", "TN", "\n", "FPs", "+=", "FP", "\n", "FNs", "+=", "FN", "\n", "Ps", "+=", "P", "\n", "Ns", "+=", "N", "\n", "FNs_Ps", "+=", "(", "FN", "+", "1e-10", ")", "/", "(", "P", "+", "1e-10", ")", "\n", "FPs_Ns", "+=", "(", "FP", "+", "1e-10", ")", "/", "(", "N", "+", "1e-10", ")", "\n", "FNs_Ns", "+=", "(", "FN", "+", "1e-10", ")", "/", "(", "N", "+", "1e-10", ")", "\n", "FPs_Ps", "+=", "(", "FP", "+", "1e-10", ")", "/", "(", "P", "+", "1e-10", ")", "\n", "\n", "", "return", "test_iou", "/", "(", "j", "+", "1", ")", ",", "f1", "/", "(", "j", "+", "1", ")", ",", "recall", "/", "(", "j", "+", "1", ")", ",", "precision", "/", "(", "j", "+", "1", ")", ",", "FPs_Ns", "/", "(", "j", "+", "1", ")", ",", "FPs_Ps", "/", "(", "j", "+", "1", ")", ",", "FNs_Ns", "/", "(", "j", "+", "1", ")", ",", "FNs_Ps", "/", "(", "j", "+", "1", ")", ",", "FPs", "/", "(", "j", "+", "1", ")", ",", "FNs", "/", "(", "j", "+", "1", ")", ",", "TPs", "/", "(", "j", "+", "1", ")", ",", "TNs", "/", "(", "j", "+", "1", ")", ",", "Ps", "/", "(", "j", "+", "1", ")", ",", "Ns", "/", "(", "j", "+", "1", ")", ",", "test_h_dist", "/", "(", "effective_h", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.test": [[368, 504], ["glob.glob", "open", "open.write", "open.close", "print", "os.path.join", "torch.load", "torch.load", "torch.load.eval", "enumerate", "os.mkdir", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "testimg.to.to", "testlabel.to.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.load.", "torch.sigmoid", "torch.sigmoid", "NNMetrics.segmentation_scores", "test_iou.append", "NNMetrics.f1_score", "test_f1.append", "test_recall.append", "test_precision.append", "NNLoss.dice_loss", "torch.load.zero_grad", "NNLoss.dice_loss.backward", "NNUtils.fgsm_attack", "torch.load.", "torch.sigmoid", "torch.sigmoid", "NNMetrics.segmentation_scores", "test_iou_adv.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "NNMetrics.hd95", "test_h_dist.append", "NNMetrics.hd95", "test_h_dist_adv.append", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.segmentation_scores", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.f1_score", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNLoss.dice_loss", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.fgsm_attack", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.segmentation_scores", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.hd95", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNMetrics.hd95"], ["", "def", "test", "(", "\n", "testdata", ",", "\n", "models_path", ",", "\n", "device", ",", "\n", "reverse_mode", ",", "\n", "class_no", ",", "\n", "save_path", ")", ":", "\n", "\n", "    ", "all_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "models_path", ",", "'*.pt'", ")", ")", "\n", "\n", "test_f1", "=", "[", "]", "\n", "test_iou", "=", "[", "]", "\n", "test_h_dist", "=", "[", "]", "\n", "test_recall", "=", "[", "]", "\n", "test_precision", "=", "[", "]", "\n", "\n", "test_iou_adv", "=", "[", "]", "\n", "test_h_dist_adv", "=", "[", "]", "\n", "\n", "for", "model", "in", "all_models", ":", "\n", "\n", "        ", "model", "=", "torch", ".", "load", "(", "model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "j", ",", "(", "testimg", ",", "testlabel", ",", "testname", ")", "in", "enumerate", "(", "testdata", ")", ":", "\n", "# validate batch size will be set up as 2", "\n", "# testimg = torch.from_numpy(testimg).to(device=device, dtype=torch.float32)", "\n", "# testlabel = torch.from_numpy(testlabel).to(device=device, dtype=torch.float32)", "\n", "\n", "            ", "testimg", "=", "testimg", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "testimg", ".", "requires_grad", "=", "True", "\n", "\n", "testlabel", "=", "testlabel", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "threshold", "=", "torch", ".", "tensor", "(", "[", "0.5", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "upper", "=", "torch", ".", "tensor", "(", "[", "1.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "lower", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# c, h, w = testimg.size()", "\n", "# testimg = testimg.expand(1, c, h, w)", "\n", "\n", "testoutput", "=", "model", "(", "testimg", ")", "\n", "# (todo) add for multi-class", "\n", "prob_testoutput", "=", "torch", ".", "sigmoid", "(", "testoutput", ")", "\n", "\n", "if", "class_no", "==", "2", ":", "\n", "\n", "                ", "if", "reverse_mode", "is", "True", ":", "\n", "\n", "                    ", "testoutput", "=", "torch", ".", "where", "(", "prob_testoutput", "<", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                    ", "testoutput", "=", "torch", ".", "where", "(", "prob_testoutput", ">", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "# metrics before attack:", "\n", "", "", "mean_iu_", "=", "segmentation_scores", "(", "testlabel", ",", "testoutput", ",", "class_no", ")", "\n", "test_iou", ".", "append", "(", "mean_iu_", ")", "\n", "\n", "if", "(", "testoutput", "==", "1", ")", ".", "sum", "(", ")", ">", "1", "and", "(", "testlabel", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                ", "h_dis95_", "=", "hd95", "(", "testoutput", ",", "testlabel", ",", "class_no", ")", "\n", "test_h_dist", ".", "append", "(", "h_dis95_", ")", "\n", "\n", "", "f1_", ",", "recall_", ",", "precision_", ",", "TP", ",", "TN", ",", "FP", ",", "FN", ",", "P", ",", "N", "=", "f1_score", "(", "testlabel", ",", "testoutput", ",", "class_no", ")", "\n", "test_f1", ".", "append", "(", "f1_", ")", "\n", "test_recall", ".", "append", "(", "recall_", ")", "\n", "test_precision", ".", "append", "(", "precision_", ")", "\n", "\n", "# attack testing data:", "\n", "loss", "=", "dice_loss", "(", "prob_testoutput", ",", "testlabel", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "data_grad", "=", "testimg", ".", "grad", ".", "data", "\n", "perturbed_data", "=", "fgsm_attack", "(", "testimg", ",", "0.2", ",", "data_grad", ")", "\n", "prob_testoutput_adv", "=", "model", "(", "perturbed_data", ")", "\n", "prob_testoutput_adv", "=", "torch", ".", "sigmoid", "(", "prob_testoutput_adv", ")", "\n", "\n", "if", "class_no", "==", "2", ":", "\n", "\n", "                ", "if", "reverse_mode", "is", "True", ":", "\n", "\n", "                    ", "testoutput_adv", "=", "torch", ".", "where", "(", "prob_testoutput_adv", "<", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                    ", "testoutput_adv", "=", "torch", ".", "where", "(", "prob_testoutput_adv", ">", "threshold", ",", "upper", ",", "lower", ")", "\n", "\n", "", "", "mean_iu_adv_", "=", "segmentation_scores", "(", "testlabel", ",", "testoutput_adv", ",", "class_no", ")", "\n", "test_iou_adv", ".", "append", "(", "mean_iu_adv_", ")", "\n", "\n", "if", "(", "testoutput_adv", "==", "1", ")", ".", "sum", "(", ")", ">", "1", "and", "(", "testlabel", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                ", "h_dis95_adv_", "=", "hd95", "(", "testoutput_adv", ",", "testlabel", ",", "class_no", ")", "\n", "test_h_dist_adv", ".", "append", "(", "h_dis95_adv_", ")", "\n", "\n", "# store the test metrics", "\n", "\n", "", "", "", "prediction_map_path", "=", "save_path", "+", "'/Test_result'", "\n", "\n", "try", ":", "\n", "\n", "        ", "os", ".", "mkdir", "(", "prediction_map_path", ")", "\n", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "\n", "            ", "raise", "\n", "\n", "", "pass", "\n", "\n", "# save numerical results:", "\n", "", "result_dictionary", "=", "{", "\n", "'Test IoU mean'", ":", "str", "(", "np", ".", "mean", "(", "test_iou", ")", ")", ",", "\n", "'Test IoU std'", ":", "str", "(", "np", ".", "std", "(", "test_iou", ")", ")", ",", "\n", "'Test f1 mean'", ":", "str", "(", "np", ".", "mean", "(", "test_f1", ")", ")", ",", "\n", "'Test f1 std'", ":", "str", "(", "np", ".", "std", "(", "test_f1", ")", ")", ",", "\n", "'Test H-dist mean'", ":", "str", "(", "np", ".", "mean", "(", "test_h_dist", ")", ")", ",", "\n", "'Test H-dist std'", ":", "str", "(", "np", ".", "std", "(", "test_h_dist", ")", ")", ",", "\n", "'Test precision mean'", ":", "str", "(", "np", ".", "mean", "(", "test_precision", ")", ")", ",", "\n", "'Test precision std'", ":", "str", "(", "np", ".", "std", "(", "test_precision", ")", ")", ",", "\n", "'Test recall mean'", ":", "str", "(", "np", ".", "mean", "(", "test_recall", ")", ")", ",", "\n", "'Test recall std'", ":", "str", "(", "np", ".", "std", "(", "test_recall", ")", ")", ",", "\n", "'Test IoU attack mean'", ":", "str", "(", "np", ".", "mean", "(", "test_iou_adv", ")", ")", ",", "\n", "'Test IoU attack std'", ":", "str", "(", "np", ".", "std", "(", "test_iou_adv", ")", ")", ",", "\n", "'Test H-dist attack mean'", ":", "str", "(", "np", ".", "mean", "(", "test_h_dist_adv", ")", ")", ",", "\n", "'Test H-dist attack std'", ":", "str", "(", "np", ".", "std", "(", "test_h_dist_adv", ")", ")", ",", "\n", "}", "\n", "\n", "ff_path", "=", "prediction_map_path", "+", "'/test_results.txt'", "\n", "ff", "=", "open", "(", "ff_path", ",", "'w'", ")", "\n", "ff", ".", "write", "(", "str", "(", "result_dictionary", ")", ")", "\n", "ff", ".", "close", "(", ")", "\n", "\n", "print", "(", "\n", "'Test h-dist: {:.4f}, '", "\n", "'Val iou: {:.4f}, '", ".", "format", "(", "np", ".", "mean", "(", "test_h_dist", ")", ",", "np", ".", "mean", "(", "test_iou", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.weights_init": [[508, 515], ["isinstance", "torch.init.kaiming_uniform_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.None.NNUtils.get_upsampling_weight": [[519, 533], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "abs", "abs", "range", "range"], "function", ["None"], ["", "", "def", "get_upsampling_weight", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "    ", "\"\"\"Make a 2D bilinear kernel suitable for upsampling\"\"\"", "\n", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "        ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "        ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weight", "[", "range", "(", "in_channels", ")", ",", "range", "(", "out_channels", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", ".", "float", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.chunks": [[23, 29], ["range", "len"], "function", ["None"], ["def", "chunks", "(", "l", ",", "n", ")", ":", "\n", "# l: the whole list to be divided", "\n", "# n: amount of elements for each subgroup", "\n", "# Yield successive n-sized chunks from l", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.unzip_all": [[50, 67], ["os.listdir", "print", "print", "print", "os.path.join", "os.listdir", "os.path.join", "os.path.join.replace", "print", "gzip.open", "open", "shutil.copyfileobj"], "function", ["None"], ["", "", "def", "unzip_all", "(", "dirName", ")", ":", "\n", "# unzip all files with extension as '.gz'", "\n", "    ", "listOfFile", "=", "os", ".", "listdir", "(", "dirName", ")", "\n", "# Iterate over all the entries", "\n", "for", "entry", "in", "listOfFile", ":", "\n", "        ", "fullPath", "=", "os", ".", "path", ".", "join", "(", "dirName", ",", "entry", ")", "\n", "AllZips", "=", "os", ".", "listdir", "(", "fullPath", ")", "\n", "for", "Zip", "in", "AllZips", ":", "\n", "            ", "fullZipPath", "=", "os", ".", "path", ".", "join", "(", "fullPath", ",", "Zip", ")", "\n", "savePath", "=", "fullZipPath", ".", "replace", "(", "'.gz'", ",", "''", ")", "\n", "with", "gzip", ".", "open", "(", "fullZipPath", ",", "'rb'", ")", "as", "f_in", ":", "\n", "                ", "with", "open", "(", "savePath", ",", "'wb'", ")", "as", "f_out", ":", "\n", "                    ", "shutil", ".", "copyfileobj", "(", "f_in", ",", "f_out", ")", "\n", "", "", "print", "(", "savePath", "+", "' is unzipped and saved'", ")", "\n", "", "", "print", "(", "'\\n'", ")", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'All done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.delete_all": [[69, 84], ["os.listdir", "print", "print", "print", "os.path.join", "os.listdir", "os.path.join", "print", "os.remove"], "function", ["None"], ["", "def", "delete_all", "(", "dirName", ")", ":", "\n", "# unzip all files with extension as '.gz'", "\n", "    ", "listOfFile", "=", "os", ".", "listdir", "(", "dirName", ")", "\n", "# Iterate over all the entries", "\n", "for", "entry", "in", "listOfFile", ":", "\n", "        ", "fullPath", "=", "os", ".", "path", ".", "join", "(", "dirName", ",", "entry", ")", "\n", "AllZips", "=", "os", ".", "listdir", "(", "fullPath", ")", "\n", "for", "Zip", "in", "AllZips", ":", "\n", "            ", "fullZipPath", "=", "os", ".", "path", ".", "join", "(", "fullPath", ",", "Zip", ")", "\n", "if", "'.gz'", "in", "fullZipPath", ":", "\n", "                ", "os", ".", "remove", "(", "fullZipPath", ")", "\n", "", "print", "(", "fullZipPath", "+", "' is deleted'", ")", "\n", "", "", "print", "(", "'\\n'", ")", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'All done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.generate_patches": [[86, 271], ["print", "print", "print", "os.listdir", "all_modalities.sort", "nibabel.load", "t1.get_fdata.get_fdata", "nibabel.load", "t2.get_fdata.get_fdata", "nibabel.load", "t1ce.get_fdata.get_fdata", "nibabel.load", "flair.get_fdata.get_fdata", "nibabel.load", "gt.get_fdata.get_fdata", "os.path.splitext", "fullfilename.split", "range", "os.path.join", "os.path.join", "t1_non_zero.std", "t2_non_zero.std", "t1ce_non_zero.std", "flair_non_zero.std", "os.path.join", "os.path.join", "numpy.shape", "numpy.asarray", "int", "int", "numpy.asarray", "numpy.reshape", "numpy.asarray", "numpy.reshape", "numpy.asarray", "numpy.reshape", "numpy.asarray", "numpy.reshape", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "enumerate", "enumerate", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "t1_non_zero.mean", "t2_non_zero.mean", "t1ce_non_zero.mean", "flair_non_zero.mean", "numpy.ceil", "int", "numpy.ceil", "int", "str", "str", "numpy.floor", "numpy.floor", "numpy.count_nonzero", "numpy.count_nonzero", "np.reshape.max", "np.reshape.max", "np.reshape.max", "np.reshape.max", "tifffile.imsave", "print", "tifffile.imsave", "print", "print", "tifffile.imsave", "print", "tifffile.imsave", "print", "random.random", "numpy.unique", "tifffile.imsave", "print", "tifffile.imsave", "print"], "function", ["None"], ["", "def", "generate_patches", "(", "data_folder", ",", "save_folder_mother", ",", "new_size", ",", "save_everything", ",", "tag_class", ",", "tag_category", ")", ":", "\n", "# data_folder: prepared source data folder", "\n", "# save_folder_mother: the save folder", "\n", "# group_number: the fold index for cross-validation", "\n", "# new_size: target size of images to be stored", "\n", "# save_everything; a flag to control whether we should save the data or not", "\n", "# case_folder:", "\n", "#    - t1, t2, t1ce, flair and seg", "\n", "    ", "for", "item", "in", "data_folder", ":", "\n", "        ", "print", "(", "item", ")", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'\\n'", ")", "\n", "all_sub_folders", "=", "os", ".", "listdir", "(", "item", ")", "\n", "all_modalities", "=", "[", "os", ".", "path", ".", "join", "(", "item", ",", "x", ")", "for", "index", ",", "x", "in", "enumerate", "(", "\n", "all_sub_folders", ")", "if", "'seg'", "not", "in", "x", "]", "\n", "# force all in the same order: flair, t1, t1ce, t2", "\n", "all_modalities", ".", "sort", "(", ")", "\n", "gt_path", "=", "[", "os", ".", "path", ".", "join", "(", "item", ",", "x", ")", "for", "index", ",", "x", "in", "enumerate", "(", "\n", "all_sub_folders", ")", "if", "'seg'", "in", "x", "]", "\n", "#         for p in all_modalities_lgg: print (p)", "\n", "#         print('\\n')", "\n", "# read all modalities for case for validation", "\n", "t1", "=", "nib", ".", "load", "(", "all_modalities", "[", "0", "]", ")", "\n", "t1", "=", "t1", ".", "get_fdata", "(", ")", "\n", "t2", "=", "nib", ".", "load", "(", "all_modalities", "[", "1", "]", ")", "\n", "t2", "=", "t2", ".", "get_fdata", "(", ")", "\n", "t1ce", "=", "nib", ".", "load", "(", "all_modalities", "[", "2", "]", ")", "\n", "t1ce", "=", "t1ce", ".", "get_fdata", "(", ")", "\n", "flair", "=", "nib", ".", "load", "(", "all_modalities", "[", "3", "]", ")", "\n", "flair", "=", "flair", ".", "get_fdata", "(", ")", "\n", "# normalise based on all non-zero elements:", "\n", "t1_non_zero", "=", "t1", "[", "np", ".", "nonzero", "(", "t1", ")", "]", "\n", "t2_non_zero", "=", "t2", "[", "np", ".", "nonzero", "(", "t2", ")", "]", "\n", "t1ce_non_zero", "=", "t1ce", "[", "np", ".", "nonzero", "(", "t1ce", ")", "]", "\n", "flair_non_zero", "=", "flair", "[", "np", ".", "nonzero", "(", "flair", ")", "]", "\n", "#", "\n", "t1", "=", "(", "t1", "-", "t1_non_zero", ".", "mean", "(", ")", ")", "/", "t1_non_zero", ".", "std", "(", ")", "\n", "t2", "=", "(", "t2", "-", "t2_non_zero", ".", "mean", "(", ")", ")", "/", "t2_non_zero", ".", "std", "(", ")", "\n", "t1ce", "=", "(", "t1ce", "-", "t1ce_non_zero", ".", "mean", "(", ")", ")", "/", "t1ce_non_zero", ".", "std", "(", ")", "\n", "flair", "=", "(", "flair", "-", "flair_non_zero", ".", "mean", "(", ")", ")", "/", "flair_non_zero", ".", "std", "(", ")", "\n", "# ground truth of lgg case for validation:", "\n", "gt_path", "=", "gt_path", "[", "0", "]", "\n", "gt", "=", "nib", ".", "load", "(", "gt_path", ")", "\n", "gt", "=", "gt", ".", "get_fdata", "(", ")", "\n", "# merge labels:", "\n", "# necrotic core + non-enhancing tumour core (1)", "\n", "# edema (2)", "\n", "# enhancing tumour (4)", "\n", "if", "tag_class", "==", "'WT'", ":", "\n", "            ", "gt", "[", "gt", "==", "0", "]", "=", "0", "\n", "gt", "[", "gt", "==", "1", "]", "=", "1", "\n", "gt", "[", "gt", "==", "2", "]", "=", "1", "\n", "# gt[gt == 3] = 0", "\n", "gt", "[", "gt", "==", "4", "]", "=", "1", "\n", "", "elif", "tag_class", "==", "'ET'", ":", "\n", "            ", "gt", "[", "gt", "==", "0", "]", "=", "0", "\n", "gt", "[", "gt", "==", "1", "]", "=", "0", "\n", "gt", "[", "gt", "==", "2", "]", "=", "0", "\n", "# gt[gt == 3] = 0", "\n", "gt", "[", "gt", "==", "4", "]", "=", "1", "\n", "", "elif", "tag_class", "==", "'TC'", ":", "\n", "            ", "gt", "[", "gt", "==", "0", "]", "=", "0", "\n", "gt", "[", "gt", "==", "1", "]", "=", "1", "\n", "gt", "[", "gt", "==", "2", "]", "=", "0", "\n", "# gt[gt == 3] = 0", "\n", "gt", "[", "gt", "==", "4", "]", "=", "1", "\n", "", "elif", "tag_class", "==", "'All'", ":", "\n", "            ", "gt", "[", "gt", "==", "0", "]", "=", "0", "\n", "gt", "[", "gt", "==", "1", "]", "=", "1", "\n", "gt", "[", "gt", "==", "2", "]", "=", "2", "\n", "gt", "[", "gt", "==", "4", "]", "=", "3", "\n", "\n", "", "height", ",", "width", ",", "slice_no", "=", "gt", ".", "shape", "\n", "# extract case number and name:", "\n", "fullfilename", ",", "extenstion", "=", "os", ".", "path", ".", "splitext", "(", "gt_path", ")", "\n", "dirpath_parts", "=", "fullfilename", ".", "split", "(", "'/'", ")", "\n", "case_index", "=", "dirpath_parts", "[", "-", "1", "]", "\n", "for", "no", "in", "range", "(", "slice_no", ")", ":", "\n", "# create store names:", "\n", "            ", "gt_slice_store_name", "=", "case_index", "+", "'_gt_'", "+", "str", "(", "no", ")", "+", "'.tif'", "\n", "img_slice_store_name", "=", "case_index", "+", "'_slice_'", "+", "str", "(", "no", ")", "+", "'.tif'", "\n", "# switch store path:", "\n", "label_store_path", "=", "save_folder_mother", "+", "'/'", "+", "tag_category", "+", "'/labels'", "\n", "patch_store_path", "=", "save_folder_mother", "+", "'/'", "+", "tag_category", "+", "'/patches'", "\n", "# if train is False:", "\n", "#     label_store_path = save_folder_mother + '/' + \\", "\n", "#         str(group_number + 1) + '/validate/labels'", "\n", "#     patch_store_path = save_folder_mother + '/' + \\", "\n", "#         str(group_number + 1) + '/validate/patches'", "\n", "# else:", "\n", "#     label_store_path = save_folder_mother + '/' + \\", "\n", "#         str(group_number + 1) + '/train/labels'", "\n", "#     patch_store_path = save_folder_mother + '/' + \\", "\n", "#         str(group_number + 1) + '/train/patches'", "\n", "#", "\n", "label_store_path_full", "=", "os", ".", "path", ".", "join", "(", "\n", "label_store_path", ",", "gt_slice_store_name", ")", "\n", "patch_store_path_full", "=", "os", ".", "path", ".", "join", "(", "\n", "patch_store_path", ",", "img_slice_store_name", ")", "\n", "# store ground truth patches:", "\n", "gt_slice", "=", "gt", "[", ":", ",", ":", ",", "no", "]", "\n", "#", "\n", "# gt_slice = binary_fill_holes(gt_slice).astype(int)", "\n", "#", "\n", "h", ",", "w", "=", "np", ".", "shape", "(", "gt_slice", ")", "\n", "gt_slice", "=", "np", ".", "asarray", "(", "gt_slice", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "left", "=", "int", "(", "np", ".", "ceil", "(", "(", "w", "-", "new_size", ")", "/", "2", ")", ")", "\n", "right", "=", "w", "-", "int", "(", "np", ".", "floor", "(", "(", "w", "-", "new_size", ")", "/", "2", ")", ")", "\n", "top", "=", "int", "(", "np", ".", "ceil", "(", "(", "h", "-", "new_size", ")", "/", "2", ")", ")", "\n", "bottom", "=", "h", "-", "int", "(", "np", ".", "floor", "(", "(", "h", "-", "new_size", ")", "/", "2", ")", ")", "\n", "gt_slice", "=", "gt_slice", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "# if save_everything is True:", "\n", "#     # im.save(label_store_path_full, \"TIFF\")", "\n", "#     imsave(label_store_path_full, gt_slice)", "\n", "#     print(gt_slice_store_name + ' ground truth is stored')", "\n", "# concatenate slices for image data:", "\n", "t1_slice", "=", "t1", "[", ":", ",", ":", ",", "no", "]", "\n", "t1_slice", "=", "np", ".", "asarray", "(", "t1_slice", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "t1_slice", "=", "t1_slice", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "t1_slice", "=", "np", ".", "reshape", "(", "t1_slice", ",", "(", "1", ",", "new_size", ",", "new_size", ")", ")", "\n", "#", "\n", "t2_slice", "=", "t2", "[", ":", ",", ":", ",", "no", "]", "\n", "t2_slice", "=", "np", ".", "asarray", "(", "t2_slice", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "t2_slice", "=", "t2_slice", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "t2_slice", "=", "np", ".", "reshape", "(", "t2_slice", ",", "(", "1", ",", "new_size", ",", "new_size", ")", ")", "\n", "#", "\n", "t1ce_slice", "=", "t1ce", "[", ":", ",", ":", ",", "no", "]", "\n", "t1ce_slice", "=", "np", ".", "asarray", "(", "t1ce_slice", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "t1ce_slice", "=", "t1ce_slice", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "t1ce_slice", "=", "np", ".", "reshape", "(", "t1ce_slice", ",", "(", "1", ",", "new_size", ",", "new_size", ")", ")", "\n", "#", "\n", "flair_slice", "=", "flair", "[", ":", ",", ":", ",", "no", "]", "\n", "flair_slice", "=", "np", ".", "asarray", "(", "flair_slice", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "flair_slice", "=", "flair_slice", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "flair_slice", "=", "np", ".", "reshape", "(", "flair_slice", ",", "(", "1", ",", "new_size", ",", "new_size", ")", ")", "\n", "#", "\n", "multi_modal_slice", "=", "t1_slice", "\n", "multi_modal_slice", "=", "np", ".", "concatenate", "(", "\n", "(", "multi_modal_slice", ",", "t2_slice", ")", ",", "axis", "=", "0", ")", "\n", "multi_modal_slice", "=", "np", ".", "concatenate", "(", "\n", "(", "multi_modal_slice", ",", "t1ce_slice", ")", ",", "axis", "=", "0", ")", "\n", "multi_modal_slice", "=", "np", ".", "concatenate", "(", "\n", "(", "multi_modal_slice", ",", "flair_slice", ")", ",", "axis", "=", "0", ")", "\n", "#", "\n", "if", "save_everything", "is", "True", ":", "\n", "#", "\n", "                ", "if", "t1_slice", ".", "max", "(", ")", ">", "0", "and", "t2_slice", ".", "max", "(", ")", ">", "0", "and", "t1ce_slice", ".", "max", "(", ")", ">", "0", "and", "flair_slice", ".", "max", "(", ")", ">", "0", ":", "\n", "#", "\n", "                    ", "non_zero_gt", "=", "np", ".", "count_nonzero", "(", "gt_slice", ")", "\n", "#", "\n", "non_zero_slice", "=", "np", ".", "count_nonzero", "(", "t2_slice", ")", "\n", "#", "\n", "if", "tag_class", "==", "'ET'", ":", "\n", "#", "\n", "                        ", "if", "non_zero_gt", ">", "1", ":", "\n", "#", "\n", "                            ", "imsave", "(", "patch_store_path_full", ",", "multi_modal_slice", ")", "\n", "print", "(", "img_slice_store_name", "+", "' of '", "+", "tag_category", "+", "' of '", "+", "tag_class", "+", "'image slice is stored'", ")", "\n", "imsave", "(", "label_store_path_full", ",", "gt_slice", ")", "\n", "print", "(", "gt_slice_store_name", "+", "' of '", "+", "tag_category", "+", "' of '", "+", "tag_class", "+", "' ground truth is stored'", ")", "\n", "#", "\n", "", "elif", "non_zero_slice", ">", "1000", ":", "\n", "#", "\n", "                            ", "augmentation", "=", "random", ".", "random", "(", ")", "\n", "#", "\n", "if", "augmentation", ">", "0.5", ":", "\n", "#", "\n", "# this condition is because otherwise it will be way too many useless training samples (e.g. containing zero information) saved", "\n", "                                ", "imsave", "(", "patch_store_path_full", ",", "multi_modal_slice", ")", "\n", "print", "(", "img_slice_store_name", "+", "' of '", "+", "tag_category", "+", "' of '", "+", "tag_class", "+", "'image slice is stored'", ")", "\n", "imsave", "(", "label_store_path_full", ",", "gt_slice", ")", "\n", "print", "(", "gt_slice_store_name", "+", "' of '", "+", "tag_category", "+", "' of '", "+", "tag_class", "+", "' ground truth is stored'", ")", "\n", "", "", "", "else", ":", "\n", "#", "\n", "# if non_zero_gt > 1 or non_zero_slice > 500:", "\n", "                        ", "if", "0.0", "in", "gt_slice", "and", "1.0", "in", "gt_slice", "and", "2.0", "in", "gt_slice", "and", "3.0", "in", "gt_slice", ":", "\n", "#", "\n", "                            ", "print", "(", "np", ".", "unique", "(", "gt_slice", ")", ")", "\n", "#", "\n", "imsave", "(", "patch_store_path_full", ",", "multi_modal_slice", ")", "\n", "print", "(", "img_slice_store_name", "+", "' of '", "+", "tag_category", "+", "' of '", "+", "tag_class", "+", "'image slice is stored'", ")", "\n", "imsave", "(", "label_store_path_full", ",", "gt_slice", ")", "\n", "print", "(", "gt_slice_store_name", "+", "' of '", "+", "tag_category", "+", "' of '", "+", "tag_class", "+", "' ground truth is stored'", ")", "\n", "\n", "", "", "", "", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.prepare_data": [[273, 334], ["os.listdir", "os.listdir", "numpy.random.choice", "numpy.random.choice", "str", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "int", "os.path.join", "int", "os.path.join", "list", "enumerate", "os.path.isdir", "enumerate", "os.path.isdir", "preprocessing_brats.chunks", "list", "str", "os.path.join", "os.path.join", "preprocessing_brats.chunks", "list", "list", "len", "preprocessing_brats.chunks", "preprocessing_brats.chunks", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.chunks", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.chunks", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.chunks", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.chunks"], ["", "", "", "def", "prepare_data", "(", "data_folder", ",", "LGG_cases", ",", "HGG_cases", ",", "tag_class", ")", ":", "\n", "\n", "    ", "save_folder_mother", "=", "data_folder", "+", "'/'", "+", "tag_class", "+", "'_L'", "+", "str", "(", "LGG_cases", ")", "+", "'_H'", "+", "str", "(", "HGG_cases", ")", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder_mother", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "pass", "\n", "\n", "image_train", "=", "save_folder_mother", "+", "'/train/patches'", "\n", "label_train", "=", "save_folder_mother", "+", "'/train/labels'", "\n", "image_validate", "=", "save_folder_mother", "+", "'/validate/patches'", "\n", "label_validate", "=", "save_folder_mother", "+", "'/validate/labels'", "\n", "image_test", "=", "save_folder_mother", "+", "'/test/patches'", "\n", "label_test", "=", "save_folder_mother", "+", "'/test/labels'", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "image_train", ")", "\n", "os", ".", "makedirs", "(", "label_train", ")", "\n", "os", ".", "makedirs", "(", "image_validate", ")", "\n", "os", ".", "makedirs", "(", "label_validate", ")", "\n", "os", ".", "makedirs", "(", "image_test", ")", "\n", "os", ".", "makedirs", "(", "label_test", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "pass", "\n", "\n", "lowgrade_folder", "=", "data_folder", "+", "'/LGG'", "\n", "highgrade_folder", "=", "data_folder", "+", "'/HGG'", "\n", "all_lowgrade_cases", "=", "os", ".", "listdir", "(", "lowgrade_folder", ")", "\n", "all_highgrade_cases", "=", "os", ".", "listdir", "(", "highgrade_folder", ")", "\n", "# randonly pick up cases from low grade and high grade separately:", "\n", "random_lowgrade_cases", "=", "np", ".", "random", ".", "choice", "(", "\n", "all_lowgrade_cases", ",", "int", "(", "LGG_cases", ")", ")", "\n", "random_lowgrade_cases", "=", "[", "os", ".", "path", ".", "join", "(", "lowgrade_folder", ",", "x", ")", "for", "index", ",", "x", "in", "enumerate", "(", "\n", "random_lowgrade_cases", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "lowgrade_folder", ",", "x", ")", ")", "]", "\n", "random_highgrade_cases", "=", "np", ".", "random", ".", "choice", "(", "\n", "all_highgrade_cases", ",", "int", "(", "HGG_cases", ")", ")", "\n", "random_highgrade_cases", "=", "[", "os", ".", "path", ".", "join", "(", "highgrade_folder", ",", "x", ")", "for", "index", ",", "x", "in", "enumerate", "(", "\n", "random_highgrade_cases", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "highgrade_folder", ",", "x", ")", ")", "]", "\n", "\n", "fold_amount", "=", "10", "\n", "\n", "if", "LGG_cases", ">", "0", "and", "HGG_cases", "==", "0", ":", "\n", "        ", "subgroups_lowgrade", "=", "list", "(", "\n", "chunks", "(", "random_lowgrade_cases", ",", "len", "(", "random_lowgrade_cases", ")", "//", "fold_amount", ")", ")", "\n", "return", "random_lowgrade_cases", ",", "subgroups_lowgrade", ",", "save_folder_mother", "\n", "", "elif", "HGG_cases", ">", "0", "and", "LGG_cases", "==", "0", ":", "\n", "        ", "subgroups_highgrade", "=", "list", "(", "\n", "chunks", "(", "random_highgrade_cases", ",", "len", "(", "random_highgrade_cases", ")", "//", "fold_amount", ")", ")", "\n", "return", "random_highgrade_cases", ",", "subgroups_highgrade", ",", "save_folder_mother", "\n", "", "elif", "HGG_cases", ">", "0", "and", "LGG_cases", ">", "0", ":", "\n", "        ", "subgroups_lowgrade", "=", "list", "(", "\n", "chunks", "(", "random_lowgrade_cases", ",", "len", "(", "random_lowgrade_cases", ")", "//", "fold_amount", ")", ")", "\n", "subgroups_highgrade", "=", "list", "(", "\n", "chunks", "(", "random_highgrade_cases", ",", "len", "(", "random_highgrade_cases", ")", "//", "fold_amount", ")", ")", "\n", "return", "random_highgrade_cases", ",", "random_lowgrade_cases", ",", "subgroups_highgrade", ",", "subgroups_lowgrade", ",", "save_folder_mother", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.single_loop": [[336, 350], ["list", "preprocessing_brats.generate_patches", "preprocessing_brats.generate_patches", "preprocessing_brats.generate_patches", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.generate_patches", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.generate_patches", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.generate_patches"], ["", "", "def", "single_loop", "(", "total_cases", ",", "validate_cases_groups", ",", "save_folder_mother", ",", "new_size", ",", "tag_class", ")", ":", "\n", "# for group_number, sub_group in enumerate(validate_cases_groups):", "\n", "\n", "    ", "validation", "=", "validate_cases_groups", "[", "0", "]", "\n", "test", "=", "validate_cases_groups", "[", "1", "]", "+", "validate_cases_groups", "[", "2", "]", "\n", "training", "=", "list", "(", "set", "(", "total_cases", ")", "-", "set", "(", "validation", ")", "-", "set", "(", "test", ")", ")", "\n", "\n", "# print(training)", "\n", "\n", "generate_patches", "(", "validation", ",", "save_folder_mother", ",", "new_size", ",", "save_everything", "=", "True", ",", "tag_class", "=", "tag_class", ",", "tag_category", "=", "'validate'", ")", "\n", "\n", "generate_patches", "(", "training", ",", "save_folder_mother", ",", "new_size", ",", "save_everything", "=", "True", ",", "tag_class", "=", "tag_class", ",", "tag_category", "=", "'train'", ")", "\n", "\n", "generate_patches", "(", "test", ",", "save_folder_mother", ",", "new_size", ",", "save_everything", "=", "True", ",", "tag_class", "=", "tag_class", ",", "tag_category", "=", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.main_loop": [[352, 371], ["preprocessing_brats.prepare_data", "preprocessing_brats.single_loop", "preprocessing_brats.prepare_data", "preprocessing_brats.single_loop", "preprocessing_brats.prepare_data", "preprocessing_brats.single_loop", "preprocessing_brats.single_loop"], "function", ["home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.prepare_data", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.single_loop", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.prepare_data", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.single_loop", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.prepare_data", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.single_loop", "home.repos.pwc.inspect_result.moucheng2017_Pay_Attention_To_Mistakes.preprocessing.preprocessing_brats.single_loop"], ["", "def", "main_loop", "(", "data_folder", ",", "lgg_amount", ",", "hgg_amount", ",", "new_size", ",", "tag_class", ")", ":", "\n", "\n", "    ", "if", "lgg_amount", ">", "0", "and", "hgg_amount", "==", "0", ":", "\n", "        ", "total_lowgrade_cases", ",", "subgroups_lowgrade", ",", "save_folder_mother", "=", "prepare_data", "(", "\n", "data_folder", ",", "LGG_cases", "=", "lgg_amount", ",", "HGG_cases", "=", "hgg_amount", ",", "tag_class", "=", "tag_class", ")", "\n", "single_loop", "(", "total_lowgrade_cases", ",", "subgroups_lowgrade", ",", "\n", "save_folder_mother", ",", "new_size", ",", "tag_class", "=", "tag_class", ")", "\n", "", "elif", "hgg_amount", ">", "0", "and", "lgg_amount", "==", "0", ":", "\n", "        ", "total_highgrade_cases", ",", "subgroups_highgrade", ",", "save_folder_mother", "=", "prepare_data", "(", "\n", "data_folder", ",", "LGG_cases", "=", "lgg_amount", ",", "HGG_cases", "=", "hgg_amount", ",", "tag_class", "=", "tag_class", ")", "\n", "single_loop", "(", "total_highgrade_cases", ",", "subgroups_highgrade", ",", "\n", "save_folder_mother", ",", "new_size", ",", "tag_class", "=", "tag_class", ")", "\n", "", "elif", "hgg_amount", ">", "0", "and", "lgg_amount", ">", "0", ":", "\n", "        ", "total_highgrade_cases", ",", "total_lowgrade_cases", ",", "subgroups_highgrade", ",", "subgroups_lowgrade", ",", "save_folder_mother", "=", "prepare_data", "(", "\n", "data_folder", ",", "LGG_cases", "=", "lgg_amount", ",", "HGG_cases", "=", "hgg_amount", ",", "tag_class", "=", "tag_class", ")", "\n", "single_loop", "(", "total_lowgrade_cases", ",", "subgroups_lowgrade", ",", "\n", "save_folder_mother", ",", "new_size", ",", "tag_class", "=", "tag_class", ")", "\n", "single_loop", "(", "total_highgrade_cases", ",", "subgroups_highgrade", ",", "\n", "save_folder_mother", ",", "new_size", ",", "tag_class", "=", "tag_class", ")", "\n", "\n"]]}