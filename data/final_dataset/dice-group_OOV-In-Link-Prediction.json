{"home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.None.hypothesis_testing.get_results": [[8, 16], ["dict", "os.listdir", "open", "json.load"], "function", ["None"], ["def", "get_results", "(", "path", "=", "'results'", ",", "dataset", "=", "'wnrr'", ")", ":", "\n", "    ", "r", "=", "dict", "(", ")", "\n", "for", "i", "in", "(", "i", "for", "i", "in", "os", ".", "listdir", "(", "path", ")", ")", ":", "\n", "        ", "if", "dataset", "in", "i", ":", "\n", "            ", "with", "open", "(", "path", "+", "'/'", "+", "i", ",", "'r'", ")", "as", "json_file", ":", "\n", "                ", "settings", "=", "json", ".", "load", "(", "json_file", ")", "\n", "r", "[", "i", "]", "=", "settings", "\n", "", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.None.clean_datasets.clean_dataset": [[5, 12], ["None"], "function", ["None"], ["def", "clean_dataset", "(", "triples", ":", "List", ",", "entities", ",", "relations", ")", "->", "Generator", ":", "\n", "    ", "for", "t", "in", "triples", ":", "\n", "\n", "        ", "s", ",", "p", ",", "o", "=", "t", "\n", "\n", "if", "(", "s", "in", "entities", ")", "and", "(", "p", "in", "relations", ")", "and", "(", "o", "in", "entities", ")", ":", "\n", "            ", "yield", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.None.clean_datasets.store": [[14, 20], ["open", "writer.write"], "function", ["None"], ["", "", "", "def", "store", "(", "triples", ",", "full_path", ")", ":", "\n", "    ", "with", "open", "(", "full_path", ",", "'w'", ")", "as", "writer", ":", "\n", "        ", "for", "t", "in", "triples", ":", "\n", "            ", "s", ",", "p", ",", "o", "=", "t", "\n", "t_str", "=", "s", "+", "'\\t'", "+", "p", "+", "'\\t'", "+", "o", "+", "'\\n'", "\n", "writer", ".", "write", "(", "t_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.eval.Evaluator.__init__": [[7, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "entity_idxs", ",", "relation_idxs", ",", "sp_vocab", ",", "so_vocab", ",", "po_vocab", ")", ":", "\n", "        ", "self", ".", "entity_idxs", "=", "entity_idxs", "\n", "self", ".", "relation_idxs", "=", "relation_idxs", "\n", "self", ".", "sp_vocab", "=", "sp_vocab", "\n", "self", ".", "po_vocab", "=", "po_vocab", "\n", "self", ".", "so_vocab", "=", "so_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.eval.Evaluator.filtered_link_prediction": [[14, 87], ["dict", "sum", "dict", "dict", "dict.items", "dict.items", "torch.Tensor().long", "torch.Tensor().long", "model.score_sp", "pred_tail[].item", "torch.sort", "sort_tail_idxs.cpu().numpy.cpu().numpy.cpu().numpy", "torch.Tensor().long", "torch.Tensor().long", "model.score_po", "pred_head[].item", "torch.sort", "sort_head_idxs.cpu().numpy.cpu().numpy.cpu().numpy", "dict.setdefault().append", "range", "reciprocal_ranks.append", "numpy.array().sum", "p.numel", "len", "sum", "sum", "model.parameters", "torch.Tensor", "torch.Tensor", "sort_tail_idxs.cpu().numpy.cpu().numpy.cpu", "numpy.where", "torch.Tensor", "torch.Tensor", "sort_head_idxs.cpu().numpy.cpu().numpy.cpu", "numpy.where", "dict.setdefault", "dict.setdefault().append", "numpy.array", "len", "len", "dict.setdefault"], "methods", ["None"], ["", "def", "filtered_link_prediction", "(", "self", ",", "triples", ",", "model", ")", ":", "\n", "        ", "results", "=", "dict", "(", ")", "\n", "\n", "num_param", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "results", "[", "'Number_param'", "]", "=", "num_param", "\n", "reciprocal_ranks", "=", "[", "]", "\n", "hits", "=", "dict", "(", ")", "\n", "reciprocal_rank_per_relation", "=", "dict", "(", ")", "\n", "\n", "for", "t", "in", "triples", ":", "\n", "# 1. Get a test triple", "\n", "            ", "s_str", ",", "p_str", ",", "o_str", "=", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "\n", "# 2. Map (1) to indexes.", "\n", "s_idx", "=", "self", ".", "entity_idxs", "[", "s_str", "]", "\n", "p_idx", "=", "self", ".", "relation_idxs", "[", "p_str", "]", "\n", "o_idx", "=", "self", ".", "entity_idxs", "[", "o_str", "]", "\n", "\n", "# 3. Convert index into tensor", "\n", "s1", "=", "torch", ".", "Tensor", "(", "[", "s_idx", "]", ")", ".", "long", "(", ")", "\n", "p1", "=", "torch", ".", "Tensor", "(", "[", "p_idx", "]", ")", ".", "long", "(", ")", "\n", "\n", "# 4. Compute the filtered rank of the missing tail entity", "\n", "pred_tail", "=", "model", ".", "score_sp", "(", "s1", ",", "p1", ")", "# scores of all objects for (s,p,?)", "\n", "pred_tail", "=", "pred_tail", "[", "0", "]", "\n", "# 4.1 {x | (s,p,x) in Train or Valid or Test }", "\n", "filt", "=", "self", ".", "sp_vocab", "[", "(", "s_idx", ",", "p_idx", ")", "]", "\n", "target_value", "=", "pred_tail", "[", "o_idx", "]", ".", "item", "(", ")", "\n", "pred_tail", "[", "filt", "]", "=", "-", "np", ".", "Inf", "\n", "pred_tail", "[", "o_idx", "]", "=", "target_value", "\n", "_", ",", "sort_tail_idxs", "=", "torch", ".", "sort", "(", "pred_tail", ",", "descending", "=", "True", ")", "\n", "sort_tail_idxs", "=", "sort_tail_idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_of_missing_tail_entity", "=", "np", ".", "where", "(", "sort_tail_idxs", "==", "o_idx", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# 5. Compute the filtered rank of missing head entity", "\n", "p1", "=", "torch", ".", "Tensor", "(", "[", "p_idx", "]", ")", ".", "long", "(", ")", "\n", "o1", "=", "torch", ".", "Tensor", "(", "[", "o_idx", "]", ")", ".", "long", "(", ")", "\n", "pred_head", "=", "model", ".", "score_po", "(", "p1", ",", "o1", ")", "\n", "pred_head", "=", "pred_head", "[", "0", "]", "\n", "\n", "# 5.1 {x | (x,p,o) in Train or Valid or Test }", "\n", "filt", "=", "self", ".", "po_vocab", "[", "(", "p_idx", ",", "o_idx", ")", "]", "\n", "target_value", "=", "pred_head", "[", "s_idx", "]", ".", "item", "(", ")", "\n", "pred_head", "[", "filt", "]", "=", "0.0", "\n", "pred_head", "[", "s_idx", "]", "=", "target_value", "\n", "_", ",", "sort_head_idxs", "=", "torch", ".", "sort", "(", "pred_head", ",", "descending", "=", "True", ")", "\n", "sort_head_idxs", "=", "sort_head_idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_of_missing_head_entity", "=", "np", ".", "where", "(", "sort_head_idxs", "==", "s_idx", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# Add 1 because np.where(.) start from 0. Perfect prediction (1/0) hence ill defined.", "\n", "rank_of_missing_tail_entity", "+=", "1", "\n", "rank_of_missing_head_entity", "+=", "1", "\n", "\n", "reciprocal_rank_per_relation", ".", "setdefault", "(", "p_str", ",", "[", "]", ")", ".", "append", "(", "\n", "(", "1", "/", "rank_of_missing_head_entity", ")", "+", "(", "1", "/", "rank_of_missing_tail_entity", ")", ")", "\n", "\n", "for", "hits_level", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "                ", "I", "=", "1", "if", "rank_of_missing_head_entity", "<=", "hits_level", "else", "0", "\n", "I", "+=", "1", "if", "rank_of_missing_tail_entity", "<=", "hits_level", "else", "0", "\n", "if", "I", ">", "0", ":", "\n", "                    ", "hits", ".", "setdefault", "(", "hits_level", ",", "[", "]", ")", ".", "append", "(", "I", ")", "\n", "\n", "", "", "reciprocal_ranks", ".", "append", "(", "1", "/", "rank_of_missing_tail_entity", "+", "1", "/", "rank_of_missing_head_entity", ")", "\n", "\n", "", "reciprocal_ranks", "=", "np", ".", "array", "(", "reciprocal_ranks", ")", ".", "sum", "(", ")", "/", "(", "2", "*", "len", "(", "triples", ")", ")", "\n", "results", "[", "'MRR'", "]", "=", "reciprocal_ranks", "\n", "for", "hits_level", ",", "scores", "in", "hits", ".", "items", "(", ")", ":", "\n", "            ", "results", "[", "f'Hits@{hits_level}'", "]", "=", "sum", "(", "scores", ")", "/", "(", "2", "*", "len", "(", "triples", ")", ")", "\n", "\n", "# Link prediction per relation", "\n", "", "for", "k", ",", "v", "in", "reciprocal_rank_per_relation", ".", "items", "(", ")", ":", "\n", "# ranks => sum of head and tail entities given a relation", "\n", "            ", "results", "[", "f'MRR_{k}'", "]", "=", "sum", "(", "v", ")", "/", "(", "2", "*", "len", "(", "v", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.eval.Evaluator.filtered_relation_prediction": [[88, 141], ["dict", "sum", "dict", "dict.items", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.arange().long", "model.score_spo", "predictions[].item", "torch.sort", "sort_idxs.cpu().numpy.cpu().numpy.cpu().numpy", "range", "reciprocal_ranks.append", "numpy.array().sum", "len", "p.numel", "sum", "len", "model.parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.arange", "torch.Tensor().long.repeat", "torch.Tensor().long.repeat", "sort_idxs.cpu().numpy.cpu().numpy.cpu", "numpy.where", "dict.setdefault().append", "numpy.array", "len", "len", "len", "dict.setdefault"], "methods", ["None"], ["", "def", "filtered_relation_prediction", "(", "self", ",", "triples", ",", "model", ")", ":", "\n", "        ", "results", "=", "dict", "(", ")", "\n", "\n", "num_param", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "results", "[", "'Number_param'", "]", "=", "num_param", "\n", "reciprocal_ranks", "=", "[", "]", "\n", "hits", "=", "dict", "(", ")", "\n", "\n", "for", "t", "in", "triples", ":", "\n", "# 1. Get a test triple", "\n", "            ", "s_str", ",", "p_str", ",", "o_str", "=", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "\n", "# 2. Map (1) to indexes.", "\n", "s_idx", "=", "self", ".", "entity_idxs", "[", "s_str", "]", "\n", "p_idx", "=", "self", ".", "relation_idxs", "[", "p_str", "]", "\n", "o_idx", "=", "self", ".", "entity_idxs", "[", "o_str", "]", "\n", "\n", "# 3. Convert index into tensor", "\n", "s1", "=", "torch", ".", "Tensor", "(", "[", "s_idx", "]", ")", ".", "long", "(", ")", "\n", "p1", "=", "torch", ".", "Tensor", "(", "[", "p_idx", "]", ")", ".", "long", "(", ")", "\n", "o1", "=", "torch", ".", "Tensor", "(", "[", "o_idx", "]", ")", ".", "long", "(", ")", "\n", "\n", "all_relations", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "relation_idxs", ")", ")", ".", "long", "(", ")", "\n", "\n", "# 2. Predict missing relations", "\n", "predictions", "=", "model", ".", "score_spo", "(", "s", "=", "s1", ".", "repeat", "(", "len", "(", "self", ".", "relation_idxs", ")", ",", ")", ",", "\n", "p", "=", "all_relations", ",", "\n", "o", "=", "o1", ".", "repeat", "(", "len", "(", "self", ".", "relation_idxs", ")", ",", ")", ")", "\n", "# 4.1 {x | (s,x,o) in Train or Valid or Test }", "\n", "filt", "=", "self", ".", "so_vocab", "[", "(", "s_idx", ",", "o_idx", ")", "]", "\n", "target_value", "=", "predictions", "[", "p1", "]", ".", "item", "(", ")", "\n", "predictions", "[", "filt", "]", "=", "-", "np", ".", "Inf", "\n", "predictions", "[", "p1", "]", "=", "target_value", "\n", "\n", "_", ",", "sort_idxs", "=", "torch", ".", "sort", "(", "predictions", ",", "descending", "=", "True", ")", "\n", "sort_idxs", "=", "sort_idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_of_missing_relation", "=", "np", ".", "where", "(", "sort_idxs", "==", "p_idx", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# Add 1 because np.where(.) start from 0. Perfect prediction (1/0) hence ill defined.", "\n", "rank_of_missing_relation", "+=", "1", "\n", "\n", "for", "hits_level", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "                ", "I", "=", "1", "if", "rank_of_missing_relation", "<=", "hits_level", "else", "0", "\n", "if", "I", ">", "0", ":", "\n", "                    ", "hits", ".", "setdefault", "(", "hits_level", ",", "[", "]", ")", ".", "append", "(", "I", ")", "\n", "\n", "", "", "reciprocal_ranks", ".", "append", "(", "1", "/", "rank_of_missing_relation", ")", "\n", "\n", "", "reciprocal_ranks", "=", "np", ".", "array", "(", "reciprocal_ranks", ")", ".", "sum", "(", ")", "/", "(", "len", "(", "triples", ")", ")", "\n", "results", "[", "'MRR'", "]", "=", "reciprocal_ranks", "\n", "for", "hits_level", ",", "scores", "in", "hits", ".", "items", "(", ")", ":", "\n", "            ", "results", "[", "f'Hits@{hits_level}'", "]", "=", "sum", "(", "scores", ")", "/", "(", "len", "(", "triples", ")", ")", "\n", "\n", "", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.__init__": [[11, 15], ["data.Dataset.load_data", "data.Dataset.load_data", "data.Dataset.load_data"], "methods", ["home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.load_data", "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.load_data", "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.load_data"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_data", "=", "self", ".", "load_data", "(", "data_dir", ",", "data_type", "=", "\"train\"", ")", "\n", "self", ".", "valid_data", "=", "self", ".", "load_data", "(", "data_dir", ",", "data_type", "=", "\"valid\"", ")", "\n", "self", ".", "test_data", "=", "self", ".", "load_data", "(", "data_dir", ",", "data_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.load_data": [[16, 22], ["open", "f.read().strip().split", "i.split", "f.read().strip", "f.read"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_data", "(", "data_dir", ",", "data_type", ")", ":", "\n", "        ", "with", "open", "(", "\"%s%s.txt\"", "%", "(", "data_dir", ",", "data_type", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "data", "=", "[", "i", ".", "split", "(", ")", "for", "i", "in", "data", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.get_relations": [[23, 27], ["sorted", "list", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_relations", "(", "data", ")", ":", "\n", "        ", "relations", "=", "sorted", "(", "list", "(", "set", "(", "[", "d", "[", "1", "]", "for", "d", "in", "data", "]", ")", ")", ")", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.get_entities": [[28, 32], ["sorted", "list", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_entities", "(", "data", ")", ":", "\n", "        ", "entities", "=", "sorted", "(", "list", "(", "set", "(", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "+", "[", "d", "[", "2", "]", "for", "d", "in", "data", "]", ")", ")", ")", "\n", "return", "entities", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.get_mappings": [[33, 48], ["dict", "dict", "dict", "dict.setdefault().append", "dict.setdefault().append", "dict.setdefault().append", "dict.setdefault", "dict.setdefault", "dict.setdefault"], "methods", ["None"], ["", "def", "get_mappings", "(", "self", ",", "triples", ",", "entity_idxs", ",", "relation_idxs", ")", ":", "\n", "        ", "sp_vocab", "=", "dict", "(", ")", "\n", "po_vocab", "=", "dict", "(", ")", "\n", "so_vocab", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "triples", ":", "\n", "            ", "s", ",", "p", ",", "o", "=", "i", "[", "0", "]", ",", "i", "[", "1", "]", ",", "i", "[", "2", "]", "\n", "s_idx", ",", "p_idx", ",", "o_idx", "=", "entity_idxs", "[", "s", "]", ",", "relation_idxs", "[", "p", "]", ",", "entity_idxs", "[", "o", "]", "\n", "\n", "sp_vocab", ".", "setdefault", "(", "(", "s_idx", ",", "p_idx", ")", ",", "[", "]", ")", ".", "append", "(", "o_idx", ")", "\n", "so_vocab", ".", "setdefault", "(", "(", "s_idx", ",", "o_idx", ")", ",", "[", "]", ")", ".", "append", "(", "p_idx", ")", "\n", "\n", "po_vocab", ".", "setdefault", "(", "(", "p_idx", ",", "o_idx", ")", ",", "[", "]", ")", ".", "append", "(", "s_idx", ")", "\n", "\n", "", "return", "sp_vocab", ",", "so_vocab", ",", "po_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.descriptive_statistics": [[49, 133], ["dict", "dict", "dict", "set().union", "print", "print", "print", "print", "print", "enumerate", "print", "numpy.array", "numpy.array", "print", "print", "print", "dict.setdefault().append", "dict.setdefault().append", "dict.setdefault().append", "set", "sorted", "print", "set", "dict.keys", "len", "len", "dict.setdefault", "dict.setdefault", "dict.setdefault", "dict.keys", "len", "len", "len", "dict.items", "dict.items", "numpy.array.mean", "numpy.array.std", "numpy.array.mean", "numpy.array.std", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "descriptive_statistics", "(", "data", ",", "info", ")", ":", "\n", "        ", "directed_nodes", "=", "dict", "(", ")", "\n", "in_directed_nodes", "=", "dict", "(", ")", "\n", "edges", "=", "dict", "(", ")", "\n", "\n", "# 1. Iterate over triples and create", "\n", "# Given (e_i,r_j,e_k)", "\n", "# 1.2. e_i => r_j, e_k mapping => Directed Mapping", "\n", "# 1.3. e_k => r_j, e_i mapping => Reverse directed mapping", "\n", "# 1.4. r_j => e_k, e_i => Relation mapping", "\n", "\n", "for", "i", "in", "data", ":", "\n", "            ", "h", ",", "r", ",", "t", "=", "i", "[", "0", "]", ",", "i", "[", "1", "]", ",", "i", "[", "2", "]", "\n", "directed_nodes", ".", "setdefault", "(", "h", ",", "[", "]", ")", ".", "append", "(", "(", "r", ",", "t", ")", ")", "\n", "in_directed_nodes", ".", "setdefault", "(", "t", ",", "[", "]", ")", ".", "append", "(", "(", "h", ",", "r", ")", ")", "\n", "edges", ".", "setdefault", "(", "r", ",", "[", "]", ")", ".", "append", "(", "(", "h", ",", "t", ")", ")", "\n", "\n", "# Unique entities", "\n", "", "unique_entities", "=", "set", "(", "directed_nodes", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "in_directed_nodes", ".", "keys", "(", ")", ")", ")", "\n", "\n", "print", "(", "f'############### DESCRIPTION {info} ###############'", ")", "\n", "print", "(", "f'Number of triples = {len(data)}'", ")", "\n", "print", "(", "f'Number of unique entities = {len(unique_entities)}'", ")", "\n", "print", "(", "f'Number of relations = {len(edges)}'", ")", "\n", "print", "(", "'Most frequent relations'", ")", "\n", "\n", "for", "it", ",", "k", "in", "enumerate", "(", "sorted", "(", "edges", ",", "key", "=", "lambda", "k", ":", "len", "(", "edges", "[", "k", "]", ")", ",", "reverse", "=", "True", ")", ")", ":", "\n", "            ", "if", "it", "==", "20", ":", "\n", "                ", "break", "\n", "", "print", "(", "f'{it}. {k} freq. {len(edges[k])}'", ")", "\n", "\n", "", "print", "(", "'\\n'", ")", "\n", "# Degree of nodes.", "\n", "out_degrees", "=", "np", ".", "array", "(", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "directed_nodes", ".", "items", "(", ")", "]", ")", "\n", "in_degrees", "=", "np", ".", "array", "(", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "in_directed_nodes", ".", "items", "(", ")", "]", ")", "\n", "print", "(", "f'{in_degrees.mean():.3f}+-{in_degrees.std():.3f} indegree of a node.'", ")", "\n", "print", "(", "f'{out_degrees.mean():.3f}+-{out_degrees.std():.3f} outdegree of a node.'", ")", "\n", "print", "(", "'#'", "*", "10", ")", "\n", "\n", "\"\"\"\n        for k, v in edges.items():\n            G.add_edges_from(list(v), label=k)\n\n        degree_sequence = sorted([degree for node, degree in G.degree()], reverse=True)  # degree sequence\n        degreeCount = collections.Counter(degree_sequence)\n        deg, cnt = zip(*degreeCount.items())\n\n        plt.bar(deg, cnt)\n        plt.title(f\"Degree Histogram {info}\")\n        plt.ylabel(\"Count\")\n        plt.xlabel(\"Degree\")\n        plt.tight_layout()\n        plt.show()\n        \"\"\"", "\n", "\n", "\"\"\"\n        \n        # = Unable to allocate 12.3 GiB for an array with shape (40559, 40559) and data type float64\n        L = nx.normalized_laplacian_matrix(G)\n        e = np.linalg.eigvals(L.A)\n        print(\"Largest eigenvalue:\", max(e))\n        print(\"Smallest eigenvalue:\", min(e))\n        plt.hist(e)  # histogram with 100 bins\n        #plt.xlim(0, 2)  # eigenvalues between 0 and 2\n        plt.show()\n        \"\"\"", "\n", "\"\"\"\n        Seem to take time\n        print(\"Betweenness\")\n        b = nx.betweenness_centrality(G)\n        for v in G.nodes():\n            print(f\"{v:2} {b[v]:.3f}\")\n\n        print(\"Degree centrality\")\n        d = nx.degree_centrality(G)\n        for v in G.nodes():\n            print(f\"{v:2} {d[v]:.3f}\")\n\n        print(\"Closeness centrality\")\n        c = nx.closeness_centrality(G)\n        for v in G.nodes():\n            print(f\"{v:2} {c[v]:.3f}\")\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dice-group_OOV-In-Link-Prediction.util.data.Dataset.describe_oov": [[134, 186], ["set", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "set.add", "set.add", "triples_contain_oov.append", "triples_contain_oov_entity_head.append", "triples_contain_oov_entity_tail.append", "triples_contain_oov_entity_both_position.append", "len", "len", "len", "len", "len", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "len", "len"], "methods", ["None"], ["", "def", "describe_oov", "(", "self", ",", "data", ",", "entities", ",", "info", ")", ":", "\n", "        ", "triples_contain_oov_entity_both_position", "=", "[", "]", "\n", "triples_contain_oov_entity_head", "=", "[", "]", "\n", "triples_contain_oov_entity_tail", "=", "[", "]", "\n", "\n", "triples_contain_oov", "=", "[", "]", "\n", "\n", "found_entities", "=", "set", "(", ")", "\n", "for", "i", "in", "data", ":", "\n", "            ", "h", ",", "r", ",", "t", "=", "i", "[", "0", "]", ",", "i", "[", "1", "]", ",", "i", "[", "2", "]", "\n", "\n", "found_entities", ".", "add", "(", "h", ")", "\n", "found_entities", ".", "add", "(", "t", ")", "\n", "\n", "# 1. The head or tail entity is an OOV entity.", "\n", "if", "(", "h", "not", "in", "entities", ")", "or", "(", "t", "not", "in", "entities", ")", ":", "\n", "                ", "triples_contain_oov", ".", "append", "(", "i", ")", "\n", "\n", "# 2. The head entity is an OOV entity.", "\n", "if", "h", "not", "in", "entities", ":", "\n", "                    ", "triples_contain_oov_entity_head", ".", "append", "(", "i", ")", "\n", "\n", "# 3. The tail entity is an OOV entity.", "\n", "", "if", "t", "not", "in", "entities", ":", "\n", "                    ", "triples_contain_oov_entity_tail", ".", "append", "(", "i", ")", "\n", "\n", "# 4. The head and the tail entities are OOV entities.", "\n", "", "if", "(", "h", "not", "in", "entities", ")", "and", "(", "t", "not", "in", "entities", ")", ":", "\n", "                    ", "triples_contain_oov_entity_both_position", ".", "append", "(", "i", ")", "\n", "", "", "", "print", "(", "'\\n'", ")", "\n", "print", "(", "f'############### DESCRIPTION {info} ###############'", ")", "\n", "print", "(", "f'{len(found_entities - entities)} out-of-vocabulary entities.'", ")", "\n", "\n", "print", "(", "\n", "f'{len(triples_contain_oov)} triples contain OOV entities. \\t {len(triples_contain_oov) / len(data) * 100:.3f} % of triples contain OOV entities'", ")", "\n", "\n", "print", "(", "f'{len(triples_contain_oov_entity_head)} triples contain OOV entities in the head position.'", ")", "\n", "print", "(", "f'{len(triples_contain_oov_entity_tail)} triples contain OOV entities in the tail position.'", ")", "\n", "print", "(", "f'{len(triples_contain_oov_entity_tail)} triples contain OOV entities in the head and tail positions.'", ")", "\n", "\n", "print", "(", "'#'", "*", "100", ")", "\n", "print", "(", "\n", "f'Freq. of relations occurring with oov entities: \\n{collections.Counter([i[1] for i in triples_contain_oov])}'", ")", "\n", "\n", "print", "(", "\n", "f'Freq. of relations occurring with oov entities in the head position: \\n{collections.Counter([i[1] for i in triples_contain_oov_entity_head])}'", ")", "\n", "\n", "print", "(", "\n", "f'Freq. of relations occurring with oov entities in the tail position: \\n{collections.Counter([i[1] for i in triples_contain_oov_entity_tail])}'", ")", "\n", "\n", "print", "(", "\n", "f'Frequency of relations occurring with oov entities in the head and tail position: \\n{collections.Counter([i[1] for i in triples_contain_oov_entity_tail])}'", ")", "\n", "", "", ""]]}