{"home.repos.pwc.inspect_result.blackPython_mipae.None.models.dcgan_conv.__init__": [[7, 13], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "dcgan_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.dcgan_conv.forward": [[15, 17], ["models.dcgan_conv.main"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.dcgan_upconv.__init__": [[20, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "dcgan_upconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nin", ",", "nout", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.dcgan_upconv.forward": [[28, 30], ["models.dcgan_upconv.main"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.pose_encoder.__init__": [[32, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "models.dcgan_conv", "models.dcgan_conv", "models.dcgan_conv", "models.dcgan_conv", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nc", "=", "1", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", "pose_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "64", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 64 x 64", "\n", "dcgan_conv", "(", "nc", ",", "nf", ")", ",", "\n", "# state size. (nf) x 32 x 32", "\n", "dcgan_conv", "(", "nf", ",", "nf", "*", "2", ")", ",", "\n", "# state size. (nf*2) x 16 x 16", "\n", "dcgan_conv", "(", "nf", "*", "2", ",", "nf", "*", "4", ")", ",", "\n", "# state size. (nf*4) x 8 x 8", "\n", "dcgan_conv", "(", "nf", "*", "4", ",", "nf", "*", "8", ")", ",", "\n", "# state size. (nf*8) x 4 x 4", "\n", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "pose_dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pose_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.pose_encoder.forward": [[51, 57], ["models.pose_encoder.main().squeeze", "torch.functional.normalize", "torch.functional.normalize", "models.pose_encoder.main"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "input", ")", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "normalize", "(", "output", ",", "p", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.content_encoder.__init__": [[59, 75], ["torch.Module.__init__", "models.dcgan_conv", "models.dcgan_conv", "models.dcgan_conv", "models.dcgan_conv", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "content_dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "content_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "64", "\n", "# input is (nc) x 64 x 64", "\n", "self", ".", "c1", "=", "dcgan_conv", "(", "nc", ",", "nf", ")", "\n", "# state size. (nf) x 32 x 32", "\n", "self", ".", "c2", "=", "dcgan_conv", "(", "nf", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 16 x 16", "\n", "self", ".", "c3", "=", "dcgan_conv", "(", "nf", "*", "2", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 8 x 8", "\n", "self", ".", "c4", "=", "dcgan_conv", "(", "nf", "*", "4", ",", "nf", "*", "8", ")", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "content_dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "content_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.content_encoder.forward": [[77, 84], ["models.content_encoder.c1", "models.content_encoder.c2", "models.content_encoder.c3", "models.content_encoder.c4", "models.content_encoder.c5", "models.content_encoder.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "\n", "h2", "=", "self", ".", "c2", "(", "h1", ")", "\n", "h3", "=", "self", ".", "c3", "(", "h2", ")", "\n", "h4", "=", "self", ".", "c4", "(", "h3", ")", "\n", "h5", "=", "self", ".", "c5", "(", "h4", ")", "\n", "return", "h5", ".", "squeeze", "(", ")", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.decoder.__init__": [[87, 109], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "models.dcgan_upconv", "models.dcgan_upconv", "models.dcgan_upconv", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "content_dim", ",", "pose_dim", ",", "nc", "=", "1", ",", "skips", "=", "True", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "64", "\n", "self", ".", "skips", "=", "skips", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "content_dim", "+", "pose_dim", ",", "nf", "*", "8", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "mul_coff", "=", "2", "if", "skips", "else", "1", "\n", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "upc2", "=", "dcgan_upconv", "(", "nf", "*", "8", "*", "mul_coff", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 8 x 8", "\n", "self", ".", "upc3", "=", "dcgan_upconv", "(", "nf", "*", "4", "*", "mul_coff", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 16 x 16", "\n", "self", ".", "upc4", "=", "dcgan_upconv", "(", "nf", "*", "2", "*", "mul_coff", ",", "nf", ")", "\n", "# state size. (nf) x 32 x 32", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nf", "*", "mul_coff", ",", "nc", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "# state size. (nc) x 64 x 64", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.decoder.forward": [[112, 127], ["models.decoder.upc1", "models.decoder.upc2", "models.decoder.upc3", "models.decoder.upc4", "models.decoder.upc5", "models.decoder.upc2", "models.decoder.upc3", "models.decoder.upc4", "models.decoder.upc5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "content", ",", "pose", "=", "input", "\n", "content", ",", "skip", "=", "content", "\n", "d1", "=", "self", ".", "upc1", "(", "torch", ".", "cat", "(", "[", "content", ",", "pose", "]", ",", "1", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "if", "self", ".", "skips", ":", "\n", "            ", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "\n", "output", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "d2", "=", "self", ".", "upc2", "(", "d1", ")", "\n", "d3", "=", "self", ".", "upc3", "(", "d2", ")", "\n", "d4", "=", "self", ".", "upc4", "(", "d3", ")", "\n", "output", "=", "self", ".", "upc5", "(", "d4", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.lp_decoder.__init__": [[129, 149], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "models.dcgan_upconv", "models.dcgan_upconv", "models.dcgan_upconv", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "nf", "=", "64", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "nf", "*", "8", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "upc2", "=", "dcgan_upconv", "(", "nf", "*", "8", "*", "2", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 8 x 8", "\n", "self", ".", "upc3", "=", "dcgan_upconv", "(", "nf", "*", "4", "*", "2", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 16 x 16", "\n", "self", ".", "upc4", "=", "dcgan_upconv", "(", "nf", "*", "2", "*", "2", ",", "nf", ")", "\n", "# state size. (nf) x 32 x 32", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nf", "*", "2", ",", "nc", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "# state size. (nc) x 64 x 64", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.lp_decoder.forward": [[152, 160], ["models.lp_decoder.upc1", "models.lp_decoder.upc2", "models.lp_decoder.upc3", "models.lp_decoder.upc4", "models.lp_decoder.upc5", "vec.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "vec", ",", "skip", "=", "input", "\n", "d1", "=", "self", ".", "upc1", "(", "vec", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ")", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "\n", "output", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.scene_discriminator.__init__": [[163, 172], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nf", "=", "512", ")", ":", "\n", "        ", "super", "(", "scene_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pose_dim", "=", "pose_dim", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "pose_dim", "*", "2", ",", "nf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "nf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.scene_discriminator.forward": [[174, 177], ["models.scene_discriminator.main", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "torch", ".", "cat", "(", "input", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "pose_dim", "*", "2", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.vae_scene_discriminator.__init__": [[179, 199], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nf", "=", "1024", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pose_dim", "=", "pose_dim", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "pose_dim", "*", "2", ",", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "nf", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "nf", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "nf", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "nf", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "nf", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.vae_scene_discriminator.forward": [[201, 204], ["models.vae_scene_discriminator.main", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "torch", ".", "cat", "(", "input", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "pose_dim", "*", "2", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.Classifier.__init__": [[206, 212], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "num_classes", ",", "nf", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "nf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "nf", ",", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.Classifier.forward": [[214, 216], ["models.Classifier.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.content_encoder_lstm.__init__": [[218, 222], ["torch.Module.__init__", "lstm.lstm.lstm"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "g_dims", ",", "content_encoder", ",", "batch_size", ",", "rnn_size", "=", "256", ",", "rnn_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "content_encoder", "=", "content_encoder", "\n", "self", ".", "content_rnn", "=", "lstm", "(", "g_dims", ",", "g_dims", ",", "rnn_size", ",", "rnn_layers", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.models.content_encoder_lstm.forward": [[223, 232], ["x.transpose_", "models.content_encoder_lstm.content_rnn.init_hidden", "range", "models.content_encoder_lstm.content_encoder", "models.content_encoder_lstm.content_rnn"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.init_hidden"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ".", "transpose_", "(", "0", ",", "1", ")", "\n", "B", "=", "x", ".", "shape", "[", "1", "]", "\n", "lstm_hidden", "=", "self", ".", "content_rnn", ".", "init_hidden", "(", "batch_size", "=", "B", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "hidden", ",", "skip", "=", "self", ".", "content_encoder", "(", "x", "[", "i", "]", ")", "\n", "h_content", ",", "lstm_hidden", "=", "self", ".", "content_rnn", "(", "hidden", ",", "lstm_hidden", ")", "\n", "\n", "", "return", "h_content", ",", "skip", "", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.pose_encoder.__init__": [[6, 10], ["torch.Module.__init__", "resnet_128.resnet18"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nc", "=", "1", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", "pose_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "resnet18", "(", "pose_dim", ",", "nc", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.pose_encoder.forward": [[11, 18], ["resnet_128.pose_encoder.main", "torch.functional.normalize", "torch.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "normalize", "(", "output", ",", "p", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet_128.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_128.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.conv3x3", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.BasicBlock.forward": [[37, 54], ["resnet_128.BasicBlock.conv1", "resnet_128.BasicBlock.bn1", "resnet_128.BasicBlock.relu", "resnet_128.BasicBlock.conv2", "resnet_128.BasicBlock.bn2", "resnet_128.BasicBlock.relu", "resnet_128.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.Bottleneck.__init__": [[59, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.Bottleneck.forward": [[72, 93], ["resnet_128.Bottleneck.conv1", "resnet_128.Bottleneck.bn1", "resnet_128.Bottleneck.relu", "resnet_128.Bottleneck.conv2", "resnet_128.Bottleneck.bn2", "resnet_128.Bottleneck.relu", "resnet_128.Bottleneck.conv3", "resnet_128.Bottleneck.bn3", "resnet_128.Bottleneck.relu", "resnet_128.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.resnet18.__init__": [[96, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_128.resnet18._make_layer", "resnet_128.resnet18._make_layer", "resnet_128.resnet18._make_layer", "resnet_128.resnet18._make_layer", "resnet_128.resnet18._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_128.resnet18.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nc", "=", "3", ")", ":", "\n", "    ", "block", "=", "BasicBlock", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "resnet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "1024", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "1024", ",", "pose_dim", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "bn_out", "=", "nn", ".", "BatchNorm2d", "(", "pose_dim", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.resnet18._make_layer": [[122, 138], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.resnet18.forward": [[139, 156], ["resnet_128.resnet18.conv1", "resnet_128.resnet18.bn1", "resnet_128.resnet18.relu", "resnet_128.resnet18.maxpool", "resnet_128.resnet18.layer1", "resnet_128.resnet18.layer2", "resnet_128.resnet18.layer3", "resnet_128.resnet18.layer4", "resnet_128.resnet18.layer5", "resnet_128.resnet18.conv_out", "resnet_128.resnet18.bn_out", "resnet_128.resnet18.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_out", "(", "x", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_128.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["", "", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_dsprites.StaticDSprites.__init__": [[7, 16], ["numpy.load", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "num_sprites", "=", "2", ",", "color", "=", "True", ",", "return_factors", "=", "True", ")", ":", "\n", "        ", "zip_file", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"dsprites_ndarray_co1sh3sc6or40x32y32_64x64.npz\"", ")", ",", "\"r\"", ")", "\n", "self", ".", "num_sprites", "=", "num_sprites", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "return_factors", "=", "return_factors", "\n", "self", ".", "seed_is_set", "=", "False", "\n", "\n", "self", ".", "data", "=", "zip_file", "[", "\"imgs\"", "]", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_dsprites.StaticDSprites.set_seed": [[17, 22], ["numpy.random.seed", "random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_dsprites.StaticDSprites.__len__": [[23, 25], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_dsprites.StaticDSprites.get_data_index": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_data_index", "(", "self", ",", "shape", ",", "scale", ",", "so", ",", "sx", ",", "sy", ")", ":", "\n", "        ", "return", "sy", "+", "32", "*", "sx", "+", "32", "*", "32", "*", "so", "+", "32", "*", "32", "*", "40", "*", "scale", "+", "32", "*", "32", "*", "40", "*", "6", "*", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_dsprites.StaticDSprites.__getitem__": [[29, 58], ["static_dsprites.StaticDSprites.set_seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.array", "numpy.array", "numpy.copy", "numpy.random.randint", "range", "x.sum.sum.sum", "static_dsprites.StaticDSprites.data[].astype", "static_dsprites.StaticDSprites.get_data_index"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.set_seed", "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.get_data_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "f_c", "=", "np", ".", "zeros", "(", "(", "3", "*", "self", ".", "num_sprites", "+", "1", "if", "self", ".", "color", "else", "0", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "f_p", "=", "np", ".", "zeros", "(", "(", "2", "*", "self", ".", "num_sprites", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "x", "=", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "num_sprites", ")", ":", "\n", "            ", "shape_idx", "=", "np", ".", "random", ".", "randint", "(", "3", ")", "\n", "scale_index", "=", "np", ".", "random", ".", "randint", "(", "6", ")", "\n", "so", "=", "np", ".", "random", ".", "randint", "(", "40", ")", "\n", "sx", "=", "np", ".", "random", ".", "randint", "(", "32", ")", "\n", "sy", "=", "np", ".", "random", ".", "randint", "(", "32", ")", "\n", "f_c", "[", "3", "*", "n", ":", "(", "3", "*", "(", "n", "+", "1", ")", ")", "]", "=", "np", ".", "array", "(", "[", "shape_idx", ",", "scale_index", ",", "so", "]", ")", "\n", "f_p", "[", "2", "*", "n", ":", "(", "2", "*", "(", "n", "+", "1", ")", ")", "]", "=", "np", ".", "array", "(", "[", "sx", ",", "sy", "]", ")", "\n", "x", "[", ":", ",", ":", ",", "n", "]", "=", "np", ".", "copy", "(", "self", ".", "data", "[", "self", ".", "get_data_index", "(", "shape_idx", ",", "scale_index", ",", "so", ",", "sx", ",", "sy", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "if", "self", ".", "color", ":", "\n", "            ", "front", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_sprites", ")", "\n", "f_c", "[", "-", "1", "]", "=", "front", "\n", "for", "cc", "in", "range", "(", "self", ".", "num_sprites", ")", ":", "\n", "                ", "if", "cc", "!=", "front", ":", "\n", "                    ", "x", "[", ":", ",", ":", ",", "cc", "]", "[", "x", "[", ":", ",", ":", ",", "front", "]", ">", "0", "]", "=", "0", "\n", "", "", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "sum", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "x", "[", "x", ">", "1", "]", "=", "1", "\n", "\n", "", "if", "self", ".", "return_factors", ":", "\n", "            ", "return", "[", "f_c", ",", "f_p", "]", ",", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.compute_disentanglement_metric.get_data_batch": [[48, 53], ["seq[].transpose_().transpose_", "seq[].transpose_"], "function", ["None"], ["def", "get_data_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "seq", "in", "data_loader", ":", "\n", "            ", "seq", "[", "1", "]", ".", "transpose_", "(", "2", ",", "3", ")", ".", "transpose_", "(", "1", ",", "2", ")", "\n", "yield", "seq", "\n", "", "", "", "data_generator", "=", "get_data_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_mnist.MovingMNIST.__init__": [[9, 29], ["torchvision.datasets.MNIST", "len", "torchvision.transforms.Compose", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "num_digits", "=", "2", ",", "image_size", "=", "64", ",", "color", "=", "True", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "path", "=", "data_root", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_digits", "=", "num_digits", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "step_length", "=", "0.1", "\n", "self", ".", "digit_size", "=", "32", "\n", "self", ".", "seed_is_set", "=", "False", "# multi threaded loading", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "\n", "self", ".", "data", "=", "datasets", ".", "MNIST", "(", "\n", "path", ",", "\n", "train", "=", "train", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Scale", "(", "self", ".", "digit_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", ")", "\n", "\n", "self", ".", "N", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_mnist.MovingMNIST.set_seed": [[30, 34], ["numpy.random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_mnist.MovingMNIST.__len__": [[35, 37], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_mnist.MovingMNIST.__getitem__": [[38, 99], ["moving_mnist.MovingMNIST.set_seed", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "range", "x.sum.sum.sum", "numpy.copy", "digit.numpy", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.set_seed"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "image_size", "=", "self", ".", "image_size", "\n", "digit_size", "=", "self", ".", "digit_size", "\n", "x", "=", "np", ".", "zeros", "(", "(", "self", ".", "seq_len", ",", "\n", "image_size", ",", "\n", "image_size", ",", "\n", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "num_digits", ")", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "N", ")", "\n", "digit", ",", "_", "=", "self", ".", "data", "[", "idx", "]", "\n", "\n", "sx", "=", "np", ".", "random", ".", "randint", "(", "image_size", "-", "digit_size", ")", "\n", "sy", "=", "np", ".", "random", ".", "randint", "(", "image_size", "-", "digit_size", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "4", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "4", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "                ", "if", "sy", "<", "0", ":", "\n", "                    ", "sy", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dy", "=", "-", "dy", "\n", "", "else", ":", "\n", "                        ", "dy", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "", "", "elif", "sy", ">=", "image_size", "-", "32", ":", "\n", "                    ", "sy", "=", "image_size", "-", "32", "-", "1", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dy", "=", "-", "dy", "\n", "", "else", ":", "\n", "                        ", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "0", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "\n", "", "", "if", "sx", "<", "0", ":", "\n", "                    ", "sx", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dx", "=", "-", "dx", "\n", "", "else", ":", "\n", "                        ", "dx", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "", "", "elif", "sx", ">=", "image_size", "-", "32", ":", "\n", "                    ", "sx", "=", "image_size", "-", "32", "-", "1", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dx", "=", "-", "dx", "\n", "", "else", ":", "\n", "                        ", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "0", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "\n", "", "", "x", "[", "t", ",", "sy", ":", "sy", "+", "32", ",", "sx", ":", "sx", "+", "32", ",", "n", "]", "=", "np", ".", "copy", "(", "digit", ".", "numpy", "(", ")", ")", "\n", "sy", "+=", "dy", "\n", "sx", "+=", "dx", "\n", "# pick on digit to be in front", "\n", "", "", "front", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_digits", ")", "\n", "if", "self", ".", "color", ":", "\n", "            ", "for", "cc", "in", "range", "(", "self", ".", "num_digits", ")", ":", "\n", "                ", "if", "cc", "!=", "front", ":", "\n", "                    ", "x", "[", ":", ",", ":", ",", ":", ",", "cc", "]", "[", "x", "[", ":", ",", ":", ",", ":", ",", "front", "]", ">", "0", "]", "=", "0", "\n", "", "", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "sum", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "x", "[", "x", ">", "1", "]", "=", "1", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.__init__": [[33, 91], ["torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "solver.Solver.load_checkpoint_or_initialize", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "solver.Solver.__init__.get_training_batch"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.load_checkpoint_or_initialize"], ["    ", "def", "__init__", "(", "self", ",", "nets", ",", "optims", ",", "args", ",", "estimators", "=", "{", "}", ",", "extra_keys", "=", "{", "}", ")", ":", "\n", "        ", "torch", ".", "set_default_dtype", "(", "torch", ".", "float32", ")", "\n", "self", ".", "cpu", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "args", "=", "args", ".", "__dict__", "\n", "for", "key", "in", "args", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "args", "[", "key", "]", ")", "\n", "\n", "", "self", ".", "nets", "=", "nets", "\n", "self", ".", "estimators", "=", "estimators", "\n", "self", ".", "optims", "=", "optims", "\n", "self", ".", "extra_keys", "=", "extra_keys", "\n", "\n", "self", ".", "load_checkpoint_or_initialize", "(", "extra_keys", ")", "\n", "\n", "for", "name", "in", "self", ".", "nets", ":", "\n", "           ", "self", ".", "nets", "[", "name", "]", "=", "nn", ".", "DataParallel", "(", "self", ".", "nets", "[", "name", "]", ")", "\n", "\n", "", "if", "self", ".", "dataset", "==", "\"mnist\"", ":", "\n", "            ", "train_data", "=", "MovingMNIST", "(", "True", ",", "self", ".", "data_root", ",", "seq_len", "=", "self", ".", "input_frames", "+", "self", ".", "target_frames", ",", "color", "=", "self", ".", "color", ",", "deterministic", "=", "self", ".", "deterministic", ")", "\n", "test_data", "=", "MovingMNIST", "(", "False", ",", "self", ".", "data_root", ",", "seq_len", "=", "self", ".", "input_frames", "+", "self", ".", "target_frames", ",", "color", "=", "self", ".", "color", ",", "deterministic", "=", "self", ".", "deterministic", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"dsprites\"", ":", "\n", "            ", "train_data", "=", "MovingDSprites", "(", "True", ",", "self", ".", "data_root", ",", "seq_len", "=", "self", ".", "input_frames", "+", "self", ".", "target_frames", ",", "color", "=", "self", ".", "color", ",", "rotate", "=", "self", ".", "rotate_sprites", ",", "deterministic", "=", "self", ".", "deterministic", ")", "\n", "test_data", "=", "MovingDSprites", "(", "False", ",", "self", ".", "data_root", ",", "seq_len", "=", "self", ".", "input_frames", "+", "self", ".", "target_frames", ",", "color", "=", "self", ".", "color", ",", "rotate", "=", "self", ".", "rotate_sprites", ",", "deterministic", "=", "self", ".", "deterministic", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"mpi3d_real\"", ":", "\n", "            ", "train_data", "=", "Mpi3dReal", "(", "True", ",", "self", ".", "data_root", ",", "seq_len", "=", "self", ".", "input_frames", "+", "self", ".", "target_frames", ",", "deterministic", "=", "self", ".", "deterministic", ")", "\n", "test_data", "=", "Mpi3dReal", "(", "False", ",", "self", ".", "data_root", ",", "seq_len", "=", "self", ".", "input_frames", "+", "self", ".", "target_frames", ",", "deterministic", "=", "self", ".", "deterministic", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "self", ".", "dataset_len", "=", "len", "(", "train_data", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "5", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "5", ",", "drop_last", "=", "True", ")", "\n", "\n", "def", "get_training_batch", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "for", "sequence", "in", "train_loader", ":", "\n", "                    ", "sequence", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "yield", "sequence", "\n", "\n", "", "", "", "def", "get_test_batch", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "for", "sequence", "in", "test_loader", ":", "\n", "                    ", "sequence", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "yield", "sequence", "\n", "\n", "", "", "", "self", ".", "train_generator", "=", "get_training_batch", "(", ")", "\n", "self", ".", "test_generator", "=", "get_test_batch", "(", ")", "\n", "\n", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "\"eval\"", ")", "\n", "\n", "self", ".", "train_summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ")", "\n", "self", ".", "test_summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "eval_dir", ")", "\n", "\n", "#Writing hyperparameters summary", "\n", "for", "name", "in", "args", ":", "\n", "            ", "self", ".", "train_summary_writer", ".", "add_text", "(", "\"Hyperparameters/\"", "+", "name", ",", "str", "(", "args", "[", "name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.set_mode": [[92, 99], ["solver.Solver.nets[].train", "solver.Solver.nets[].eval"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train"], ["", "", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "for", "net", "in", "self", ".", "nets", ":", "\n", "                ", "self", ".", "nets", "[", "net", "]", ".", "train", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "net", "in", "self", ".", "nets", ":", "\n", "                ", "self", ".", "nets", "[", "net", "]", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.load_checkpoint_or_initialize": [[101, 129], ["sorted", "glob.glob", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "solver.Solver.nets[].load_state_dict", "solver.Solver.estimators[].load_state_dict", "solver.Solver.optims[].load_state_dict", "setattr", "setattr", "solver.Solver.nets[].apply"], "methods", ["None"], ["", "", "", "def", "load_checkpoint_or_initialize", "(", "self", ",", "extra_keys", ")", ":", "\n", "# Here the extra_keys should be a dict (containing default values)", "\n", "        ", "chkp_files", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "log_dir", "+", "\"/\"", "+", "self", ".", "name", "+", "r\"-*.pth\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ",", "reverse", "=", "True", ")", "\n", "\n", "checkpoint", "=", "None", "\n", "if", "chkp_files", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "chkp_files", "[", "0", "]", ",", "map_location", "=", "self", ".", "cpu", ")", "\n", "\n", "", "if", "checkpoint", ":", "\n", "            ", "for", "name", "in", "self", ".", "nets", ":", "\n", "                ", "self", ".", "nets", "[", "name", "]", ".", "load_state_dict", "(", "checkpoint", "[", "name", "]", ")", "\n", "\n", "", "for", "name", "in", "self", ".", "estimators", ":", "\n", "                ", "self", ".", "estimators", "[", "name", "]", ".", "load_state_dict", "(", "checkpoint", "[", "name", "]", ")", "\n", "", "for", "name", "in", "self", ".", "optims", ":", "\n", "                ", "self", ".", "optims", "[", "name", "]", ".", "load_state_dict", "(", "checkpoint", "[", "name", "]", ")", "\n", "\n", "", "for", "name", "in", "extra_keys", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "checkpoint", "[", "name", "]", ")", "\n", "\n", "", "self", ".", "global_itr", "=", "checkpoint", "[", "\"global_itr\"", "]", "\n", "\n", "", "else", ":", "\n", "            ", "for", "name", "in", "extra_keys", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "extra_keys", "[", "name", "]", ")", "\n", "", "for", "name", "in", "self", ".", "nets", ":", "\n", "                ", "self", ".", "nets", "[", "name", "]", ".", "apply", "(", "utils", ".", "init_weights", ")", "\n", "", "self", ".", "global_itr", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.save_checkpoint": [[131, 148], ["sorted", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "solver.Solver.nets[].module.state_dict", "solver.Solver.estimators[].state_dict", "solver.Solver.optims[].state_dict", "getattr", "glob.glob", "len", "os.remove", "str"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save"], ["", "", "def", "save_checkpoint", "(", "self", ",", "extra_keys", "=", "[", "]", ")", ":", "\n", "        ", "checkpoint", "=", "{", "\"global_itr\"", ":", "self", ".", "global_itr", "}", "\n", "for", "name", "in", "self", ".", "nets", ":", "\n", "            ", "checkpoint", "[", "name", "]", "=", "self", ".", "nets", "[", "name", "]", ".", "module", ".", "state_dict", "(", ")", "\n", "", "for", "name", "in", "self", ".", "estimators", ":", "\n", "            ", "checkpoint", "[", "name", "]", "=", "self", ".", "estimators", "[", "name", "]", ".", "state_dict", "(", ")", "\n", "", "for", "name", "in", "self", ".", "optims", ":", "\n", "            ", "checkpoint", "[", "name", "]", "=", "self", ".", "optims", "[", "name", "]", ".", "state_dict", "(", ")", "\n", "", "for", "name", "in", "extra_keys", ":", "\n", "            ", "checkpoint", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "", "chkp_files", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "log_dir", "+", "\"/\"", "+", "self", ".", "name", "+", "r\"-*.pth\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ",", "reverse", "=", "True", ")", "\n", "if", "len", "(", "chkp_files", ")", "==", "self", ".", "max_checkpoints", ":", "\n", "            ", "os", ".", "remove", "(", "chkp_files", "[", "-", "1", "]", ")", "\n", "", "chkp_path", "=", "self", ".", "log_dir", "+", "\"/\"", "+", "self", ".", "name", "+", "\"-\"", "+", "str", "(", "self", ".", "global_itr", ")", "+", "\".pth\"", "\n", "\n", "torch", ".", "save", "(", "checkpoint", ",", "chkp_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train": [[149, 165], ["solver.Solver.save_checkpoint", "solver.Solver.set_mode", "tqdm.tqdm.tqdm", "solver.Solver.set_mode", "solver.Solver.eval_step", "range", "solver.Solver.train_step", "solver.Solver.save_checkpoint", "str", "str"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.save_checkpoint", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.set_mode", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.set_mode", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverLstm.eval_step", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverLstm.train_step", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "while", "self", ".", "global_itr", "<", "self", ".", "niters", ":", "\n", "            ", "self", ".", "set_mode", "(", "\"train\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "self", ".", "epoch_size", ")", ",", "desc", "=", "\"[\"", "+", "str", "(", "self", ".", "global_itr", ")", "+", "\"/\"", "+", "str", "(", "self", ".", "niters", ")", "+", "\"]\"", ")", ":", "\n", "                ", "self", ".", "train_step", "(", "summary", "=", "(", "i", "==", "0", "and", "self", ".", "global_itr", "%", "self", ".", "summary_freq", "==", "0", ")", ")", "\n", "\n", "", "self", ".", "set_mode", "(", "\"eval\"", ")", "\n", "self", ".", "eval_step", "(", ")", "\n", "\n", "if", "self", ".", "global_itr", "%", "self", ".", "checkpoint_freq", "==", "0", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", "self", ".", "extra_keys", ")", "\n", "\n", "", "self", ".", "global_itr", "+=", "1", "\n", "\n", "", "self", ".", "save_checkpoint", "(", "self", ".", "extra_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train_step": [[166, 168], ["NotImplementedError"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "summary", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.eval_step": [[169, 171], ["NotImplementedError"], "methods", ["None"], ["", "def", "eval_step", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverAutoencoder.__init__": [[173, 224], ["models.scene_discriminator().cuda", "itertools.chain", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "solver.Solver.__init__", "models.content_encoder().cuda", "models.pose_encoder().cuda", "vgg_64.encoder().cuda", "resnet_64.pose_encoder().cuda", "vgg_64.drnet_decoder().cuda", "models.decoder().cuda", "models.content_encoder_lstm", "models.scene_discriminator().cuda.parameters", "models.scene_discriminator", "models.content_encoder", "models.pose_encoder", "vgg_64.encoder", "resnet_64.pose_encoder", "vgg_64.drnet_decoder", "models.decoder", "models.content_encoder_lstm.parameters", "resnet_64.pose_encoder().cuda.parameters", "models.decoder().cuda.parameters"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "args", ".", "deterministic", "=", "True", "\n", "if", "args", ".", "dataset", "in", "[", "\"mnist\"", ",", "\"dsprites\"", "]", ":", "\n", "            ", "content_encoder", "=", "models", ".", "content_encoder", "(", "args", ".", "g_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "position_encoder", "=", "models", ".", "pose_encoder", "(", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ",", "normalize", "=", "args", ".", "normalize_position", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "content_encoder", "=", "vgg_64", ".", "encoder", "(", "args", ".", "g_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "position_encoder", "=", "resnet_64", ".", "pose_encoder", "(", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"mpi3d_real\"", ":", "\n", "            ", "decoder", "=", "vgg_64", ".", "drnet_decoder", "(", "args", ".", "g_dims", ",", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "decoder", "=", "models", ".", "decoder", "(", "args", ".", "g_dims", ",", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ",", "skips", "=", "args", ".", "skips", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "content_frames", "=", "1", "\n", "if", "args", ".", "content_lstm", ":", "\n", "            ", "content_encoder", "=", "models", ".", "content_encoder_lstm", "(", "args", ".", "g_dims", ",", "content_encoder", ",", "args", ".", "batch_size", ")", "\n", "self", ".", "content_frames", "=", "args", ".", "input_frames", "\n", "\n", "", "discriminator", "=", "models", ".", "scene_discriminator", "(", "args", ".", "z_dims", ")", ".", "cuda", "(", ")", "\n", "nets", "=", "{", "\n", "\"content_encoder\"", ":", "content_encoder", ",", "\n", "\"position_encoder\"", ":", "position_encoder", ",", "\n", "\"decoder\"", ":", "decoder", ",", "\n", "\"discriminator\"", ":", "discriminator", ",", "\n", "}", "\n", "\n", "self", ".", "encoder_decoder_parameters", "=", "itertools", ".", "chain", "(", "*", "[", "\n", "content_encoder", ".", "parameters", "(", ")", ",", "\n", "position_encoder", ".", "parameters", "(", ")", ",", "\n", "decoder", ".", "parameters", "(", ")", ",", "\n", "]", ")", "\n", "\n", "encoder_decoder_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "encoder_decoder_parameters", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "(", "args", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "\n", "discriminator_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "discriminator", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "(", "args", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "\n", "optims", "=", "{", "\n", "\"encoder_decoder_optim\"", ":", "encoder_decoder_optim", ",", "\n", "\"discriminator_optim\"", ":", "discriminator_optim", ",", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "nets", ",", "optims", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverAutoencoder.train_step": [[225, 327], ["next().cuda().transpose", "Ep().detach", "Ep().detach", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "C", "C", "discriminator_optim.zero_grad", "mi_estimators.discriminator_loss.backward", "discriminator_optim.step", "random.randint", "next().cuda().transpose", "Ec", "[].detach", "Ep", "Ep().detach", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "D", "encoder_decoder_optim.zero_grad", "loss.backward", "encoder_decoder_optim.step", "mi_estimators.discriminator_loss", "utils.log_gradients", "solver.SolverAutoencoder.train_summary_writer.add_scalar", "x[].squeeze", "x[].squeeze", "x[].squeeze", "x[].squeeze", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "C", "mi_estimators.emily_sd_loss", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "C", "C", "utils.log_gradients", "utils.log_gradients", "utils.log_gradients", "solver.SolverAutoencoder.train_summary_writer.add_images", "solver.SolverAutoencoder.train_summary_writer.add_images", "solver.SolverAutoencoder.train_summary_writer.add_scalar", "solver.SolverAutoencoder.train_summary_writer.add_scalar", "solver.SolverAutoencoder.train_summary_writer.add_scalar", "solver.SolverAutoencoder.train_summary_writer.add_scalar", "next().cuda", "Ep", "Ep", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "next().cuda", "random.randint", "Ep", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mi_estimators.js_mi_lower_bound", "mi_estimators.js_fgan_lower_bound", "NotImplementedError", "Ec", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "mi_estimators.smile_mi_lower_bound", "NotImplementedError", "next", "mi_estimators.smile_lower_bound", "next", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.discriminator_loss", "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.log_gradients", "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.emily_sd_loss", "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.log_gradients", "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.log_gradients", "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.log_gradients", "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.js_mi_lower_bound", "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.js_fgan_lower_bound", "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.smile_mi_lower_bound", "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.smile_lower_bound"], ["", "def", "train_step", "(", "self", ",", "summary", "=", "False", ")", ":", "\n", "        ", "Ec", "=", "self", ".", "nets", "[", "\"content_encoder\"", "]", "\n", "Ep", "=", "self", ".", "nets", "[", "\"position_encoder\"", "]", "\n", "D", "=", "self", ".", "nets", "[", "\"decoder\"", "]", "\n", "C", "=", "self", ".", "nets", "[", "\"discriminator\"", "]", "\n", "\n", "encoder_decoder_optim", "=", "self", ".", "optims", "[", "\"encoder_decoder_optim\"", "]", "\n", "discriminator_optim", "=", "self", ".", "optims", "[", "\"discriminator_optim\"", "]", "\n", "\n", "#Train discriminator", "\n", "x", "=", "next", "(", "self", ".", "train_generator", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "h_p1", "=", "Ep", "(", "x", "[", "random", ".", "randint", "(", "0", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", "-", "1", ")", "]", ")", ".", "detach", "(", ")", "\n", "h_p2", "=", "Ep", "(", "x", "[", "random", ".", "randint", "(", "0", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", "-", "1", ")", "]", ")", ".", "detach", "(", ")", "\n", "\n", "rp", "=", "torch", ".", "randperm", "(", "self", ".", "batch_size", ")", ".", "cuda", "(", ")", "\n", "h_p2_perm", "=", "h_p2", "[", "rp", "]", "\n", "\n", "out_true", "=", "C", "(", "[", "h_p1", ",", "h_p2", "]", ")", "\n", "out_false", "=", "C", "(", "[", "h_p1", ",", "h_p2_perm", "]", ")", "\n", "\n", "if", "self", ".", "sd_loss", "==", "\"emily\"", ":", "\n", "            ", "disc_loss", "=", "mi_estimators", ".", "discriminator_loss", "(", "out_true", ",", "out_false", ")", "\n", "", "elif", "self", ".", "sd_loss", "==", "\"js\"", ":", "\n", "            ", "disc_loss", "=", "-", "1", "*", "mi_estimators", ".", "js_fgan_lower_bound", "(", "out_true", ",", "out_false", ")", "\n", "", "elif", "self", ".", "sd_loss", "==", "\"smile\"", ":", "\n", "            ", "disc_loss", "=", "-", "1", "*", "mi_estimators", ".", "smile_lower_bound", "(", "out_true", ",", "out_false", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "discriminator_optim", ".", "zero_grad", "(", ")", "\n", "disc_loss", ".", "backward", "(", ")", "\n", "\n", "if", "summary", ":", "\n", "            ", "utils", ".", "log_gradients", "(", "C", ",", "self", ".", "train_summary_writer", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n", "", "discriminator_optim", ".", "step", "(", ")", "\n", "if", "summary", ":", "\n", "            ", "self", ".", "train_summary_writer", ".", "add_scalar", "(", "\"discriminator_loss\"", ",", "disc_loss", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n", "", "k", "=", "random", ".", "randint", "(", "self", ".", "content_frames", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", "-", "self", ".", "content_frames", ")", "\n", "\n", "x", "=", "next", "(", "self", ".", "train_generator", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "dataset", "!=", "\"lpc\"", ":", "\n", "            ", "x_c1", "=", "x", "[", "0", ":", "self", ".", "content_frames", "]", ".", "squeeze", "(", "0", ")", "\n", "x_c2", "=", "x", "[", "k", ":", "(", "k", "+", "self", ".", "content_frames", ")", "]", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "x_c1", "=", "x", "[", "k", ":", "(", "k", "+", "self", ".", "content_frames", ")", "]", ".", "squeeze", "(", "0", ")", "\n", "x_c2", "=", "x", "[", "0", ":", "self", ".", "content_frames", "]", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "x_p1", "=", "x", "[", "k", "]", "\n", "x_p2", "=", "x", "[", "random", ".", "randint", "(", "0", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", "-", "1", ")", "]", "\n", "\n", "h_content", ",", "skips", "=", "Ec", "(", "x_c1", ")", "\n", "h_content_1", "=", "Ec", "(", "x_c2", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "h_position", "=", "Ep", "(", "x_p1", ")", "\n", "h_position_1", "=", "Ep", "(", "x_p2", ")", ".", "detach", "(", ")", "\n", "\n", "sim_loss", "=", "F", ".", "mse_loss", "(", "h_content", ",", "h_content_1", ")", "\n", "\n", "x_rec", "=", "D", "(", "[", "[", "h_content", ",", "skips", "]", ",", "h_position", "]", ")", "\n", "if", "self", ".", "recon_loss_type", "==", "\"mse\"", ":", "\n", "            ", "rec_loss", "=", "F", ".", "mse_loss", "(", "x_rec", ",", "x_p1", ")", "\n", "", "elif", "self", ".", "recon_loss_type", "==", "\"l1\"", ":", "\n", "            ", "rec_loss", "=", "F", ".", "l1_loss", "(", "x_rec", ",", "x_p1", ")", "\n", "\n", "", "if", "self", ".", "sd_loss", "==", "\"emily\"", ":", "\n", "            ", "out", "=", "C", "(", "[", "h_position", ",", "h_position_1", "]", ")", "\n", "sd_loss", "=", "mi_estimators", ".", "emily_sd_loss", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "rp", "=", "torch", ".", "randperm", "(", "self", ".", "batch_size", ")", ".", "cuda", "(", ")", "\n", "h_p2_perm", "=", "h_position_1", "[", "rp", "]", "\n", "\n", "out_true", "=", "C", "(", "[", "h_position", ",", "h_position_1", "]", ")", "\n", "out_false", "=", "C", "(", "[", "h_position", ",", "h_p2_perm", "]", ")", "\n", "\n", "if", "self", ".", "sd_loss", "==", "\"js\"", ":", "\n", "                ", "sd_loss", "=", "mi_estimators", ".", "js_mi_lower_bound", "(", "out_true", ",", "out_false", ")", "\n", "", "elif", "self", ".", "sd_loss", "==", "\"smile\"", ":", "\n", "                ", "sd_loss", "=", "mi_estimators", ".", "smile_mi_lower_bound", "(", "out_true", ",", "out_false", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "loss", "=", "self", ".", "sim_weight", "*", "sim_loss", "+", "rec_loss", "+", "self", ".", "sd_weight", "*", "sd_loss", "\n", "\n", "encoder_decoder_optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "summary", ":", "\n", "            ", "utils", ".", "log_gradients", "(", "Ec", ",", "self", ".", "train_summary_writer", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "utils", ".", "log_gradients", "(", "Ep", ",", "self", ".", "train_summary_writer", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "utils", ".", "log_gradients", "(", "D", ",", "self", ".", "train_summary_writer", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n", "", "encoder_decoder_optim", ".", "step", "(", ")", "\n", "\n", "if", "summary", ":", "\n", "            ", "self", ".", "train_summary_writer", ".", "add_images", "(", "\"predicted_image\"", ",", "x_rec", "[", ":", "10", "]", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "self", ".", "train_summary_writer", ".", "add_images", "(", "\"target_image\"", ",", "x_p1", "[", ":", "10", "]", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "self", ".", "train_summary_writer", ".", "add_scalar", "(", "\"sim_loss\"", ",", "sim_loss", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "self", ".", "train_summary_writer", ".", "add_scalar", "(", "\"sd_loss\"", ",", "sd_loss", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "self", ".", "train_summary_writer", ".", "add_scalar", "(", "\"recon_loss\"", ",", "rec_loss", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "self", ".", "train_summary_writer", ".", "add_scalar", "(", "\"total_loss\"", ",", "loss", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverAutoencoder.eval_step": [[328, 369], ["torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "[].transpose", "[].transpose", "Ec", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.SolverAutoencoder.test_summary_writer.add_image", "[].transpose", "random.randint", "Ec", "Ep", "Ep", "D", "D", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.SolverAutoencoder.test_summary_writer.add_images", "x_target[].squeeze", "Ep", "position_list.append", "D", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "map", "map", "x[].squeeze", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat.split", "x_source[].split", "next().cuda", "next().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].transpose.squeeze", "[].transpose.squeeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "next().cuda", "next", "next", "next"], "methods", ["None"], ["", "", "def", "eval_step", "(", "self", ")", ":", "\n", "        ", "Ec", "=", "self", ".", "nets", "[", "\"content_encoder\"", "]", "\n", "Ep", "=", "self", ".", "nets", "[", "\"position_encoder\"", "]", "\n", "D", "=", "self", ".", "nets", "[", "\"decoder\"", "]", "\n", "\n", "with", "torch", ".", "autograd", ".", "no_grad", "(", ")", ":", "\n", "#Checking disentanglement", "\n", "            ", "x_source", "=", "next", "(", "self", ".", "test_generator", ")", ".", "cuda", "(", ")", "[", ":", "10", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "x_target", "=", "next", "(", "self", ".", "test_generator", ")", ".", "cuda", "(", ")", "[", ":", "10", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "h_c", "=", "Ec", "(", "x_target", "[", "0", ":", "self", ".", "content_frames", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "position_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "input_frames", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", ")", ":", "\n", "                ", "h_p", "=", "Ep", "(", "x_source", "[", "i", "]", ")", "\n", "position_list", ".", "append", "(", "h_p", "[", "0", "]", "[", "None", "]", ")", "\n", "", "x_source", "=", "x_source", "[", ":", ",", "0", "]", "[", ":", ",", "None", "]", "\n", "generated_images", "=", "[", "]", "\n", "for", "h_p", "in", "position_list", ":", "\n", "                ", "x_pred", "=", "D", "(", "[", "h_c", ",", "torch", ".", "cat", "(", "[", "h_p", "]", "*", "10", ",", "0", ")", "]", ")", "\n", "generated_images", ".", "append", "(", "x_pred", ")", "\n", "\n", "", "generated_images", "=", "torch", ".", "cat", "(", "[", "x_target", "[", "self", ".", "input_frames", "-", "1", "]", "]", "+", "generated_images", ",", "dim", "=", "3", ")", "\n", "generated_images", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "squeeze", "(", "0", ")", ",", "generated_images", ".", "split", "(", "1", ",", "0", ")", ")", ")", "\n", "generated_images", "=", "torch", ".", "cat", "(", "generated_images", ",", "dim", "=", "1", ")", "\n", "source_images", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "squeeze", "(", "0", ")", ",", "x_source", "[", "self", ".", "input_frames", ":", "(", "self", ".", "input_frames", "+", "self", ".", "target_frames", ")", ",", "0", "]", ".", "split", "(", "1", ",", "0", ")", ")", ")", "\n", "source_images", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "x_source", "[", "0", ",", "0", "]", ")", "]", "+", "source_images", ",", "dim", "=", "2", ")", "\n", "analogy_image", "=", "torch", ".", "cat", "(", "[", "source_images", ",", "generated_images", "]", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "test_summary_writer", ".", "add_image", "(", "\"analogy_test\"", ",", "analogy_image", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n", "#Checking reconstruction", "\n", "x", "=", "next", "(", "self", ".", "test_generator", ")", ".", "cuda", "(", ")", "[", ":", "10", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", "-", "1", ")", "\n", "h_c", "=", "Ec", "(", "x", "[", "0", ":", "self", ".", "content_frames", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "h_p_1", "=", "Ep", "(", "x", "[", "1", "]", ")", "\n", "h_p_2", "=", "Ep", "(", "x", "[", "k", "]", ")", "\n", "x_pred_1", "=", "D", "(", "[", "h_c", ",", "h_p_1", "]", ")", "\n", "x_pred_2", "=", "D", "(", "[", "h_c", ",", "h_p_2", "]", ")", "\n", "\n", "rec_image", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x_pred_1", ",", "x_pred_2", "]", ",", "3", ")", "\n", "\n", "self", ".", "test_summary_writer", ".", "add_images", "(", "\"rec_test\"", ",", "rec_image", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverLstm.__init__": [[371, 408], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet_64.pose_encoder().cuda.load_state_dict", "vgg_64.encoder().cuda.load_state_dict", "models.decoder().cuda.load_state_dict", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "solver.SolverLstm.Ep.train", "solver.SolverLstm.Ec.train", "solver.SolverLstm.D.train", "lstm.lstm.lstm().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "solver.Solver.__init__", "models.content_encoder().cuda", "models.pose_encoder().cuda", "vgg_64.encoder().cuda", "resnet_64.pose_encoder().cuda", "vgg_64.drnet_decoder().cuda", "models.decoder().cuda", "lstm.lstm().cuda.parameters", "lstm.lstm.lstm", "models.content_encoder", "models.pose_encoder", "vgg_64.encoder", "resnet_64.pose_encoder", "vgg_64.drnet_decoder", "models.decoder"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train", "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "args", ".", "deterministic", "=", "True", "\n", "encoder_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "encoder_checkpoint", ")", "\n", "if", "args", ".", "dataset", "in", "[", "\"mnist\"", ",", "\"dsprites\"", "]", ":", "\n", "            ", "Ec", "=", "models", ".", "content_encoder", "(", "args", ".", "g_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "Ep", "=", "models", ".", "pose_encoder", "(", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "Ec", "=", "vgg_64", ".", "encoder", "(", "args", ".", "g_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "Ep", "=", "resnet_64", ".", "pose_encoder", "(", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"mpi3d_real\"", ":", "\n", "            ", "D", "=", "vgg_64", ".", "drnet_decoder", "(", "args", ".", "g_dims", ",", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "D", "=", "models", ".", "decoder", "(", "args", ".", "g_dims", ",", "args", ".", "z_dims", ",", "nc", "=", "args", ".", "num_channels", ",", "skips", "=", "args", ".", "skips", ")", ".", "cuda", "(", ")", "\n", "\n", "", "Ep", ".", "load_state_dict", "(", "encoder_checkpoint", "[", "\"position_encoder\"", "]", ")", "\n", "Ec", ".", "load_state_dict", "(", "encoder_checkpoint", "[", "\"content_encoder\"", "]", ")", "\n", "D", ".", "load_state_dict", "(", "encoder_checkpoint", "[", "\"decoder\"", "]", ")", "\n", "self", ".", "Ep", "=", "nn", ".", "DataParallel", "(", "Ep", ")", "\n", "self", ".", "Ec", "=", "nn", ".", "DataParallel", "(", "Ec", ")", "\n", "self", ".", "D", "=", "nn", ".", "DataParallel", "(", "D", ")", "\n", "self", ".", "Ep", ".", "train", "(", ")", "\n", "self", ".", "Ec", ".", "train", "(", ")", "\n", "self", ".", "D", ".", "train", "(", ")", "\n", "\n", "lstm_model", "=", "lstm", "(", "args", ".", "g_dims", "+", "args", ".", "z_dims", ",", "args", ".", "z_dims", ",", "args", ".", "rnn_size", ",", "args", ".", "rnn_layers", ",", "args", ".", "batch_size", ")", ".", "cuda", "(", ")", "\n", "nets", "=", "{", "\"lstm\"", ":", "lstm_model", "}", "\n", "\n", "lstm_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "lstm_model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "(", "args", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "\n", "optims", "=", "{", "\"lstm_optim\"", ":", "lstm_optim", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "nets", ",", "optims", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverLstm.train_step": [[409, 434], ["lstm_model.module.init_hidden", "next().cuda().transpose", "[].detach", "range", "lstm_optim.zero_grad", "mse.backward", "lstm_optim.step", "solver.SolverLstm.Ep().detach", "lstm_model", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "utils.log_gradients", "solver.SolverLstm.train_summary_writer.add_scalar", "next().cuda", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "solver.SolverLstm.Ec", "solver.SolverLstm.Ep", "next"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.init_hidden", "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.log_gradients"], ["", "def", "train_step", "(", "self", ",", "summary", "=", "False", ")", ":", "\n", "        ", "lstm_model", "=", "self", ".", "nets", "[", "\"lstm\"", "]", "\n", "lstm_optim", "=", "self", ".", "optims", "[", "\"lstm_optim\"", "]", "\n", "hidden", "=", "lstm_model", ".", "module", ".", "init_hidden", "(", ")", "\n", "x", "=", "next", "(", "self", ".", "train_generator", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "h_c", "=", "self", ".", "Ec", "(", "x", "[", "self", ".", "input_frames", "-", "1", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "h_p", "=", "[", "self", ".", "Ep", "(", "x", "[", "i", "]", ")", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "self", ".", "input_frames", "+", "self", ".", "target_frames", ")", "]", "\n", "\n", "mse", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "input_frames", "+", "self", ".", "target_frames", ")", ":", "\n", "            ", "pose_pred", ",", "hidden", "=", "lstm_model", "(", "torch", ".", "cat", "(", "[", "h_p", "[", "i", "-", "1", "]", ",", "h_c", "]", ",", "1", ")", ",", "hidden", ")", "\n", "mse", "+=", "F", ".", "mse_loss", "(", "pose_pred", ",", "h_p", "[", "i", "]", ")", "\n", "\n", "", "lstm_optim", ".", "zero_grad", "(", ")", "\n", "mse", ".", "backward", "(", ")", "\n", "\n", "if", "summary", ":", "\n", "            ", "utils", ".", "log_gradients", "(", "lstm_model", ",", "self", ".", "train_summary_writer", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n", "", "lstm_optim", ".", "step", "(", ")", "\n", "\n", "if", "summary", ":", "\n", "            ", "self", ".", "train_summary_writer", ".", "add_scalar", "(", "\"mse_loss\"", ",", "mse", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.solver.SolverLstm.eval_step": [[435, 452], ["next().cuda().transpose", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "torch.autograd.no_grad", "lstm_model.module.init_hidden", "solver.SolverLstm.Ec", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "solver.SolverLstm.test_summary_writer.add_video", "solver.SolverLstm.test_summary_writer.add_video", "next().cuda", "solver.SolverLstm.Ep", "lstm_model", "h_p_pred.append", "solver.SolverLstm.D", "x[].transpose", "x_pred[].transpose", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "next"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.init_hidden"], ["", "", "def", "eval_step", "(", "self", ")", ":", "\n", "        ", "x", "=", "next", "(", "self", ".", "test_generator", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "lstm_model", "=", "self", ".", "nets", "[", "\"lstm\"", "]", "\n", "with", "torch", ".", "autograd", ".", "no_grad", "(", ")", ":", "\n", "            ", "hidden", "=", "lstm_model", ".", "module", ".", "init_hidden", "(", ")", "\n", "h_c", "=", "self", ".", "Ec", "(", "x", "[", "self", ".", "input_frames", "-", "1", "]", ")", "\n", "h_p", "=", "[", "self", ".", "Ep", "(", "x", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "input_frames", "+", "self", ".", "target_frames", "-", "1", ")", "]", "\n", "# h_p_pred = [lstm_model(torch.cat([pose,h_c[0]],1)) for pose in h_p]", "\n", "h_p_pred", "=", "[", "]", "\n", "for", "pose", "in", "h_p", ":", "\n", "                ", "pose_pred", ",", "hidden", "=", "lstm_model", "(", "torch", ".", "cat", "(", "[", "pose", ",", "h_c", "[", "0", "]", "]", ",", "1", ")", ",", "hidden", ")", "\n", "h_p_pred", ".", "append", "(", "pose_pred", ")", "\n", "", "x_pred", "=", "[", "self", ".", "D", "(", "[", "h_c", ",", "pose", "]", ")", "for", "pose", "in", "h_p_pred", "]", "\n", "x_pred", "=", "torch", ".", "stack", "(", "x_pred", ",", "0", ")", "\n", "\n", "self", ".", "test_summary_writer", ".", "add_video", "(", "\"target_video\"", ",", "x", "[", "1", ":", ",", ":", "5", "]", ".", "transpose", "(", "0", ",", "1", ")", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "self", ".", "test_summary_writer", ".", "add_video", "(", "\"predicted_video\"", ",", "x_pred", "[", ":", ",", ":", "5", "]", ".", "transpose", "(", "0", ",", "1", ")", ",", "global_step", "=", "self", ".", "global_itr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.compute_ssim_psnr_lpips.get_data_batch": [[68, 73], ["seq.transpose_().transpose_", "seq.transpose_"], "function", ["None"], ["def", "get_data_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "seq", "in", "data_loader", ":", "\n", "            ", "seq", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "yield", "seq", "\n", "", "", "", "data_generator", "=", "get_data_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.lstm.__init__": [[6, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.LSTMCell", "torch.LSTMCell", "range"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "n_layers", ",", "batch_size", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", "lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LSTMCell", "(", "hidden_size", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ",", "\n", "#nn.BatchNorm1d(output_size),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.lstm.init_hidden": [[21, 29], ["range", "hidden.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "hidden", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", ".", "append", "(", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ")", ")", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.lstm.forward": [[30, 42], ["lstm.lstm.embed", "range", "lstm.lstm.output", "input.view", "torch.functional.normalize", "torch.functional.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embed", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "input_size", ")", ")", "\n", "h_in", "=", "embedded", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", "[", "i", "]", "=", "self", ".", "lstm", "[", "i", "]", "(", "h_in", ",", "hidden", "[", "i", "]", ")", "\n", "h_in", "=", "hidden", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "output", "=", "self", ".", "output", "(", "h_in", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "normalize", "(", "output", ",", "p", "=", "2", ")", ",", "hidden", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.__init__": [[44, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTMCell", "torch.LSTMCell", "range"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "n_layers", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "gaussian_lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LSTMCell", "(", "hidden_size", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "mu_net", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "self", ".", "logvar_net", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.init_hidden": [[56, 65], ["range", "hidden.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "hidden", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", ".", "append", "(", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ")", ")", "\n", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.reparameterize": [[66, 70], ["logvar.mul().exp_", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal.mul().add_", "torch.normal.mul().add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "logvar.mul", "torch.normal.mul", "torch.normal.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "torch", ".", "normal", "(", "torch", ".", "zeros_like", "(", "std", ")", ",", "torch", ".", "ones_like", "(", "std", ")", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.forward": [[71, 82], ["lstm.gaussian_lstm.embed", "range", "lstm.gaussian_lstm.mu_net", "lstm.gaussian_lstm.logvar_net().clamp", "lstm.gaussian_lstm.reparameterize", "lstm.gaussian_lstm.mul().exp_", "input.view", "lstm.gaussian_lstm.logvar_net", "lstm.gaussian_lstm.mul"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.lstm.gaussian_lstm.reparameterize"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embed", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "input_size", ")", ")", "\n", "h_in", "=", "embedded", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", "[", "i", "]", "=", "self", ".", "lstm", "[", "i", "]", "(", "h_in", ",", "hidden", "[", "i", "]", ")", "\n", "h_in", "=", "hidden", "[", "i", "]", "[", "0", "]", "\n", "", "mu", "=", "self", ".", "mu_net", "(", "h_in", ")", "\n", "logvar", "=", "self", ".", "logvar_net", "(", "h_in", ")", ".", "clamp", "(", "-", "5", ",", "5", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "return", "z", ",", "mu", ",", "std", ",", "hidden", "", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.vgg_layer.__init__": [[5, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "vgg_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.vgg_layer.forward": [[13, 15], ["vgg_64.vgg_layer.main"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.encoder.__init__": [[17, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 64 x 64", "\n", "self", ".", "c1", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "nc", ",", "64", ")", ",", "\n", "vgg_layer", "(", "64", ",", "64", ")", ",", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "c2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "128", ")", ",", "\n", ")", "\n", "# 16 x 16 ", "\n", "self", ".", "c3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "c4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 4 x 4", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.encoder.forward": [[50, 57], ["vgg_64.encoder.c1", "vgg_64.encoder.c2", "vgg_64.encoder.c3", "vgg_64.encoder.c4", "vgg_64.encoder.c5", "vgg_64.encoder.mp", "vgg_64.encoder.mp", "vgg_64.encoder.mp", "vgg_64.encoder.mp", "vgg_64.encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "# 64 -> 32", "\n", "h2", "=", "self", ".", "c2", "(", "self", ".", "mp", "(", "h1", ")", ")", "# 32 -> 16", "\n", "h3", "=", "self", ".", "c3", "(", "self", ".", "mp", "(", "h2", ")", ")", "# 16 -> 8", "\n", "h4", "=", "self", ".", "c4", "(", "self", ".", "mp", "(", "h3", ")", ")", "# 8 -> 4", "\n", "h5", "=", "self", ".", "c5", "(", "self", ".", "mp", "(", "h4", ")", ")", "# 4 -> 1", "\n", "return", "h5", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.decoder.__init__": [[60, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 1 x 1 -> 4 x 4", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "512", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "upc2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", "*", "2", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "256", ")", "\n", ")", "\n", "# 16 x 16", "\n", "self", ".", "upc3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", "*", "2", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "128", ")", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "upc4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", "*", "2", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "64", ")", "\n", ")", "\n", "# 64 x 64", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", "*", "2", ",", "64", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "nc", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.decoder.forward": [[94, 106], ["vgg_64.decoder.upc1", "vgg_64.decoder.up", "vgg_64.decoder.upc2", "vgg_64.decoder.up", "vgg_64.decoder.upc3", "vgg_64.decoder.up", "vgg_64.decoder.upc4", "vgg_64.decoder.up", "vgg_64.decoder.upc5", "vec.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "vec", ",", "skip", "=", "input", "\n", "d1", "=", "self", ".", "upc1", "(", "vec", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ")", "# 1 -> 4", "\n", "up1", "=", "self", ".", "up", "(", "d1", ")", "# 4 -> 8", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "up1", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "# 8 x 8", "\n", "up2", "=", "self", ".", "up", "(", "d2", ")", "# 8 -> 16 ", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "up2", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "# 16 x 16 ", "\n", "up3", "=", "self", ".", "up", "(", "d3", ")", "# 8 -> 32 ", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "up3", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "# 32 x 32", "\n", "up4", "=", "self", ".", "up", "(", "d4", ")", "# 32 -> 64", "\n", "output", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "up4", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "# 64 x 64", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.drnet_decoder.__init__": [[108, 110], ["vgg_64.decoder.__init__"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["     ", "def", "__init__", "(", "self", ",", "content_dim", ",", "pose_dim", ",", "nc", "=", "1", ",", "skips", "=", "True", ")", ":", "\n", "         ", "super", "(", ")", ".", "__init__", "(", "content_dim", "+", "pose_dim", ",", "nc", "=", "nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_64.drnet_decoder.forward": [[111, 117], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "vgg_64.decoder.forward"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "         ", "content", ",", "pose", "=", "input", "\n", "content", ",", "skips", "=", "content", "\n", "\n", "vec", "=", "torch", ".", "cat", "(", "[", "content", ",", "pose", "]", ",", "1", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "[", "vec", ",", "skips", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.pose_encoder.__init__": [[6, 10], ["torch.Module.__init__", "resnet_64.resnet18"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nc", "=", "1", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", "pose_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "resnet18", "(", "pose_dim", ",", "nc", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.pose_encoder.forward": [[11, 17], ["resnet_64.pose_encoder.main", "torch.functional.normalize", "torch.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "normalize", "(", "output", ",", "p", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.cotent_encoder.__init__": [[19, 22], ["torch.Module.__init__", "resnet_64.resnet18"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "resnet18", "(", "pose_dim", ",", "nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.cotent_encoder.forward": [[23, 26], ["resnet_64.cotent_encoder.main"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "return", "output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "resnet_64.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_64.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.conv3x3", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.BasicBlock.forward": [[45, 62], ["resnet_64.BasicBlock.conv1", "resnet_64.BasicBlock.bn1", "resnet_64.BasicBlock.relu", "resnet_64.BasicBlock.conv2", "resnet_64.BasicBlock.bn2", "resnet_64.BasicBlock.relu", "resnet_64.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.Bottleneck.__init__": [[67, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.Bottleneck.forward": [[80, 101], ["resnet_64.Bottleneck.conv1", "resnet_64.Bottleneck.bn1", "resnet_64.Bottleneck.relu", "resnet_64.Bottleneck.conv2", "resnet_64.Bottleneck.bn2", "resnet_64.Bottleneck.relu", "resnet_64.Bottleneck.conv3", "resnet_64.Bottleneck.bn3", "resnet_64.Bottleneck.relu", "resnet_64.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18.__init__": [[104, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_64.resnet18._make_layer", "resnet_64.resnet18._make_layer", "resnet_64.resnet18._make_layer", "resnet_64.resnet18._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_64.resnet18.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer", "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "pose_dim", ",", "nc", "=", "3", ")", ":", "\n", "    ", "block", "=", "BasicBlock", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "resnet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "512", ",", "pose_dim", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "bn_out", "=", "nn", ".", "BatchNorm2d", "(", "pose_dim", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18._make_layer": [[129, 145], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.resnet18.forward": [[146, 162], ["resnet_64.resnet18.conv1", "resnet_64.resnet18.bn1", "resnet_64.resnet18.relu", "resnet_64.resnet18.maxpool", "resnet_64.resnet18.layer1", "resnet_64.resnet18.layer2", "resnet_64.resnet18.layer3", "resnet_64.resnet18.layer4", "resnet_64.resnet18.conv_out", "resnet_64.resnet18.bn_out", "resnet_64.resnet18.tanh", "resnet_64.resnet18.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_out", "(", "x", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.resnet_64.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_dsprites.MovingDSprites.__init__": [[8, 32], ["numpy.load", "len", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "num_sprites", "=", "2", ",", "color", "=", "True", ",", "rotate", "=", "True", ",", "deterministic", "=", "True", ",", "return_factors", "=", "False", ")", ":", "\n", "        ", "zip_file", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"dsprites_ndarray_co1sh3sc6or40x32y32_64x64.npz\"", ")", ",", "\"r\"", ")", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_sprites", "=", "num_sprites", "\n", "self", ".", "seed_is_set", "=", "False", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "rotate", "=", "rotate", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "return_factors", "=", "return_factors", "\n", "\n", "if", "not", "rotate", ":", "\n", "            ", "if", "train", ":", "\n", "                ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"dsprites_train_split.npy\"", ")", ",", "\"r\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"dsprites_test_split.npy\"", ")", ",", "\"r\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "train", ":", "\n", "                ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"dsprites_no_rot_train_split.npy\"", ")", ",", "\"r\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"dsprites_no_rot_test_split.npy\"", ")", ",", "\"r\"", ")", "\n", "\n", "", "", "self", ".", "data", "=", "zip_file", "[", "\"imgs\"", "]", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_dsprites.MovingDSprites.set_seed": [[33, 38], ["numpy.random.seed", "random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_dsprites.MovingDSprites.__len__": [[39, 41], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.moving_dsprites.MovingDSprites.__getitem__": [[42, 118], ["moving_dsprites.MovingDSprites.set_seed", "numpy.zeros", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "numpy.random.randint", "range", "x.sum.sum.sum", "random.choice", "numpy.random.randint", "random.choice", "numpy.random.randint", "numpy.copy", "numpy.stack", "moving_dsprites.MovingDSprites.data[].astype", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.set_seed"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "x", "=", "np", ".", "zeros", "(", "(", "self", ".", "seq_len", ",", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "factors", "=", "np", ".", "zeros", "(", "(", "self", ".", "seq_len", ",", "5", "*", "self", ".", "num_sprites", ")", ")", "\n", "# factors = np.zeros((self.seq_len, 8))", "\n", "for", "n", "in", "range", "(", "self", ".", "num_sprites", ")", ":", "\n", "            ", "if", "self", ".", "rotate", ":", "\n", "                ", "shape_idx", ",", "scale_idx", "=", "random", ".", "choice", "(", "self", ".", "data_split", ")", "\n", "so", "=", "np", ".", "random", ".", "randint", "(", "40", ")", "\n", "", "else", ":", "\n", "                ", "shape_idx", ",", "scale_idx", ",", "so", "=", "random", ".", "choice", "(", "self", ".", "data_split", ")", "\n", "\n", "", "sx", "=", "np", ".", "random", ".", "randint", "(", "32", ")", "\n", "sy", "=", "np", ".", "random", ".", "randint", "(", "32", ")", "\n", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "if", "self", ".", "rotate", ":", "\n", "                ", "do", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "                ", "do", "=", "0", "\n", "\n", "", "for", "t", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "                ", "if", "sy", "<", "0", ":", "\n", "                    ", "sy", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dy", "=", "-", "dy", "\n", "", "else", ":", "\n", "                        ", "dy", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "", "", "elif", "sy", ">=", "31", ":", "\n", "                    ", "sy", "=", "31", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dy", "=", "-", "dy", "\n", "", "else", ":", "\n", "                        ", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "0", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "\n", "", "", "if", "sx", "<", "0", ":", "\n", "                    ", "sx", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dx", "=", "-", "dx", "\n", "", "else", ":", "\n", "                        ", "dx", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "", "", "elif", "sx", ">=", "31", ":", "\n", "                    ", "sx", "=", "31", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dx", "=", "-", "dx", "\n", "", "else", ":", "\n", "                        ", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "0", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "2", ",", "3", ")", "\n", "\n", "", "", "so", "=", "so", "%", "40", "\n", "data_index", "=", "sy", "+", "32", "*", "sx", "+", "32", "*", "32", "*", "so", "+", "32", "*", "32", "*", "40", "*", "scale_idx", "+", "32", "*", "32", "*", "40", "*", "6", "*", "shape_idx", "\n", "x", "[", "t", ",", ":", ",", ":", ",", "n", "]", "=", "np", ".", "copy", "(", "self", ".", "data", "[", "data_index", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "# factors[t,:] = np.stack([shape_idx, scale_idx, so, sx, sy, dx, dy, do])", "\n", "factors", "[", "t", ",", "n", "*", "5", ":", "(", "5", "*", "(", "n", "+", "1", ")", ")", "]", "=", "np", ".", "stack", "(", "[", "shape_idx", ",", "scale_idx", ",", "so", ",", "sx", ",", "sy", "]", ")", "\n", "sy", "+=", "dy", "\n", "sx", "+=", "dx", "\n", "so", "+=", "do", "\n", "\n", "", "front", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_sprites", ")", "\n", "\n", "", "if", "self", ".", "color", ":", "\n", "            ", "for", "cc", "in", "range", "(", "self", ".", "num_sprites", ")", ":", "\n", "                ", "if", "cc", "!=", "front", ":", "\n", "                    ", "x", "[", ":", ",", ":", ",", ":", ",", "cc", "]", "[", "x", "[", ":", ",", ":", ",", ":", ",", "front", "]", ">", "0", "]", "=", "0", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "sum", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "x", "[", "x", ">", "1", "]", "=", "1", "\n", "", "if", "not", "self", ".", "return_factors", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "factors", ",", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_mpi3d_toy.Mpi3dToy.__init__": [[7, 13], ["numpy.load", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "return_factors", "=", "False", ")", ":", "\n", "        ", "self", ".", "seed_is_set", "=", "False", "\n", "self", ".", "return_factors", "=", "return_factors", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_toy_images.npy\"", ")", ",", "\"r\"", ")", "\n", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_mpi3d_toy.Mpi3dToy.set_seed": [[14, 19], ["numpy.random.seed", "random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_mpi3d_toy.Mpi3dToy.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_mpi3d_toy.Mpi3dToy.get_data_index": [[23, 25], ["None"], "methods", ["None"], ["", "def", "get_data_index", "(", "self", ",", "color", ",", "shape", ",", "size", ",", "cam_height", ",", "backgroud_color", ",", "el", ",", "az", ")", ":", "\n", "        ", "return", "color", "*", "115200", "+", "shape", "*", "28800", "+", "size", "*", "14400", "+", "cam_height", "*", "4800", "+", "backgroud_color", "*", "1600", "+", "el", "*", "40", "+", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_mpi3d_toy.Mpi3dToy.__getitem__": [[26, 47], ["static_mpi3d_toy.Mpi3dToy.set_seed", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.array", "numpy.array", "static_mpi3d_toy.Mpi3dToy.data[].astype", "static_mpi3d_toy.Mpi3dToy.get_data_index"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.set_seed", "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.get_data_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "\n", "color_idx", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "shape_idx", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "size_idx", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "cam_idx", "=", "np", ".", "random", ".", "randint", "(", "3", ")", "\n", "back_idx", "=", "np", ".", "random", ".", "randint", "(", "3", ")", "\n", "\n", "s_el", "=", "np", ".", "random", ".", "randint", "(", "40", ")", "\n", "s_az", "=", "np", ".", "random", ".", "randint", "(", "40", ")", "\n", "\n", "f_c", "=", "np", ".", "array", "(", "[", "color_idx", ",", "shape_idx", ",", "size_idx", ",", "cam_idx", ",", "back_idx", "]", ")", "\n", "f_p", "=", "np", ".", "array", "(", "[", "s_el", ",", "s_az", "]", ")", "\n", "\n", "x", "=", "self", ".", "data", "[", "self", ".", "get_data_index", "(", "color_idx", ",", "shape_idx", ",", "size_idx", ",", "cam_idx", ",", "back_idx", ",", "s_el", ",", "s_az", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "if", "self", ".", "return_factors", ":", "\n", "            ", "return", "[", "f_c", ",", "f_p", "]", ",", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.static_mpi3d_toy.Mpi3dReal.__init__": [[49, 55], ["numpy.load", "len", "os.path.join"], "methods", ["None"], ["        ", "def", "__init__", "(", "self", ",", "data_root", ",", "return_factors", "=", "False", ")", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "False", "\n", "self", ".", "return_factors", "=", "return_factors", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_real_images.npy\"", ")", ",", "\"r\"", ")", "\n", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.train_autoencoder.main": [[4, 7], ["solver.SolverAutoencoder", "solver.SolverAutoencoder.train"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "solver", "=", "SolverAutoencoder", "(", "args", ")", "\n", "solver", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.test_autoencoder.get_data_batch": [[53, 58], ["seq.transpose_().transpose_", "seq.transpose_"], "function", ["None"], ["def", "get_data_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "seq", "in", "data_loader", ":", "\n", "            ", "seq", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "yield", "seq", "\n", "", "", "", "data_generator", "=", "get_data_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.critics.TimeVariantLatentCritic.__init__": [[10, 39], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "critics.TimeVariantLatentCritic.net_tcn.apply", "critics.TimeVariantLatentCritic.net_fc.apply", "torch.nn.Conv1d", "torch.nn.LeakyReLU", "torch.nn.Conv1d", "torch.nn.LeakyReLU", "torch.nn.Conv1d", "torch.nn.LeakyReLU", "torch.nn.Conv1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.init.xavier_normal_", "classname.find", "classname.find", "torch.nn.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "nout", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "nout", "=", "nout", "\n", "self", ".", "net_tcn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "z_dim", ",", "128", ",", "2", ",", "stride", "=", "2", ")", ",", "##Input 10x16", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "2", ",", "stride", "=", "2", ")", ",", "#Input 128X8", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "2", ",", "stride", "=", "2", ")", ",", "#Input 256X4", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "2", ",", "stride", "=", "2", ")", ",", "#Input 512X2", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "self", ".", "net_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1024", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "nout", ")", "\n", ")", "\n", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "\n", "if", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "\"leaky_relu\"", ",", "0.2", ")", ")", "\n", "\n", "", "", "self", ".", "net_tcn", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "net_fc", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.critics.TimeVariantLatentCritic.single_negative_sample": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "single_negative_sample", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.critics.TimeVariantLatentCritic.forward": [[45, 57], ["utils.shuffle_time", "critics.TimeVariantLatentCritic.forward.apply_critic"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.utils.shuffle_time"], ["", "def", "forward", "(", "self", ",", "joint_samples", ")", ":", "\n", "        ", "def", "apply_critic", "(", "z", ")", ":", "\n", "            ", "z", "=", "z", ".", "transpose", "(", "1", ",", "2", ")", "\n", "hidden", "=", "self", ".", "net_tcn", "(", "z", ")", ".", "squeeze", "(", "2", ")", "\n", "return", "self", ".", "net_fc", "(", "hidden", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "marginal_samples", "=", "utils", ".", "shuffle_time", "(", "joint_samples", ")", "\n", "\n", "f_true", "=", "apply_critic", "(", "joint_samples", ")", "\n", "f_false", "=", "apply_critic", "(", "marginal_samples", ")", "\n", "\n", "return", "f_true", ",", "f_false", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.critics.ImageLatentCritic.__init__": [[60, 69], ["torch.nn.Module.__init__", "models.pose_encoder", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "frame_encoding", "=", "128", ",", "nc", "=", "1", ",", "nout", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "frame_encoder", "=", "models", ".", "pose_encoder", "(", "frame_encoding", ",", "nc", "=", "nc", ")", "\n", "self", ".", "z_embed_net", "=", "nn", ".", "Linear", "(", "z_dim", ",", "128", ")", "\n", "\n", "self", ".", "net_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "nout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.critics.ImageLatentCritic.forward": [[71, 86], ["utils.shuffle_dim", "critics.ImageLatentCritic.forward.apply_critic"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.utils.shuffle_dim"], ["", "def", "forward", "(", "self", ",", "joint_samples", ")", ":", "\n", "        ", "def", "apply_critic", "(", "images", ",", "z", ")", ":", "\n", "            ", "image_hidden", "=", "self", ".", "frame_encoder", "(", "images", ")", "\n", "z_hidden", "=", "self", ".", "z_embed_net", "(", "z", ")", "\n", "output", "=", "self", ".", "net_fc", "(", "torch", ".", "cat", "(", "[", "image_hidden", ",", "z_hidden", "]", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "output", "\n", "\n", "", "assert", "(", "len", "(", "joint_samples", ")", "==", "2", ")", "\n", "\n", "marginal_samples", "=", "utils", ".", "shuffle_dim", "(", "joint_samples", ")", "\n", "\n", "f_true", "=", "apply_critic", "(", "*", "joint_samples", ")", "\n", "f_false", "=", "apply_critic", "(", "*", "marginal_samples", ")", "\n", "\n", "return", "f_true", ",", "f_false", "", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.PersistanceFVD.__init__": [[131, 143], ["tensorflow.placeholder", "tensorflow.placeholder", "meteric_utils.compute_fvd_embedding", "meteric_utils.compute_fvd_embedding", "metrics.calculate_fvd", "tensorflow.stop_gradient", "tensorflow.Session", "meteric_utils.PersistanceFVD.__sess.run", "meteric_utils.PersistanceFVD.__sess.run", "tensorflow.global_variables_initializer", "tensorflow.tables_initializer"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.compute_fvd_embedding", "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.compute_fvd_embedding", "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.calculate_fvd"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", "=", "16", ",", "video_length", "=", "30", ")", ":", "\n", "        ", "self", ".", "video_length", "=", "video_length", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "real_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "batch_size", ",", "video_length", ",", "64", ",", "64", ",", "3", ")", ")", "\n", "self", ".", "fake_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "batch_size", ",", "video_length", ",", "64", ",", "64", ",", "3", ")", ")", "\n", "self", ".", "real_embed", "=", "compute_fvd_embedding", "(", "self", ".", "real_placeholder", ")", "\n", "self", ".", "fake_embed", "=", "compute_fvd_embedding", "(", "self", ".", "fake_placeholder", ")", "\n", "self", ".", "fvd_graph", "=", "fvd", ".", "calculate_fvd", "(", "self", ".", "real_embed", ",", "self", ".", "fake_embed", ")", "\n", "self", ".", "fvd_graph", "=", "tf", ".", "stop_gradient", "(", "self", ".", "fvd_graph", ")", "\n", "self", ".", "__sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "__sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "__sess", ".", "run", "(", "tf", ".", "tables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.PersistanceFVD.__call__": [[144, 156], ["meteric_utils.PersistanceFVD.__sess.run", "numpy.repeat", "numpy.repeat", "numpy.repeat.transpose", "numpy.repeat.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "real_frames", ",", "fake_frames", ")", ":", "\n", "        ", "\"\"\"\n            real_frames, fake_frames : 5D numpy ndarrays [video_length,batch_size,num_channels,64,64]\n            returns: fvd distance between the videos\n        \"\"\"", "\n", "real_frames", ",", "fake_frames", "=", "real_frames", ".", "transpose", "(", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ")", "*", "255.0", ",", "fake_frames", ".", "transpose", "(", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ")", "*", "255.0", "\n", "if", "real_frames", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "real_frames", "=", "np", ".", "repeat", "(", "real_frames", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "fake_frames", "=", "np", ".", "repeat", "(", "fake_frames", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "self", ".", "__sess", ".", "run", "(", "self", ".", "fvd_graph", ",", "{", "\n", "self", ".", "real_placeholder", ":", "real_frames", ",", "\n", "self", ".", "fake_placeholder", ":", "fake_frames", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils._compute_mi_cd": [[13, 82], ["numpy.empty", "numpy.empty", "numpy.empty", "sklearn.neighbors.NearestNeighbors", "numpy.unique", "numpy.sum", "sklearn.neighbors.NearestNeighbors.set_params", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.radius_neighbors", "numpy.array", "max", "len", "c.reshape.reshape", "numpy.all", "numpy.sum", "numpy.mean", "min", "sklearn.neighbors.NearestNeighbors.set_params", "sklearn.neighbors.NearestNeighbors.fit", "numpy.nextafter", "numpy.mean", "scipy.special.digamma", "sklearn.neighbors.NearestNeighbors.kneighbors", "scipy.special.digamma", "numpy.mean", "scipy.special.digamma", "scipy.special.digamma"], "function", ["None"], ["def", "_compute_mi_cd", "(", "c", ",", "d", ",", "n_neighbors", ")", ":", "\n", "    ", "\"\"\"Compute mutual information between continuous and discrete variables.\n\n    Parameters\n    ----------\n    c : ndarray, shape (n_samples,)\n        Samples of a continuous random variable.\n\n    d : ndarray, shape (n_samples,)\n        Samples of a discrete random variable.\n\n    n_neighbors : int\n        Number of nearest neighbors to search for each point, see [1]_.\n\n    Returns\n    -------\n    mi : float\n        Estimated mutual information. If it turned out to be negative it is\n        replace by 0.\n\n    Notes\n    -----\n    True mutual information can't be negative. If its estimate by a numerical\n    method is negative, it means (providing the method is adequate) that the\n    mutual information is close to 0 and replacing it by 0 is a reasonable\n    strategy.\n\n    References\n    ----------\n    .. [1] B. C. Ross \"Mutual Information between Discrete and Continuous\n       Data Sets\". PLoS ONE 9(2), 2014.\n    \"\"\"", "\n", "n_samples", "=", "c", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "c", ".", "shape", ")", "==", "1", ":", "\n", "        ", "c", "=", "c", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "", "radius", "=", "np", ".", "empty", "(", "n_samples", ")", "\n", "label_counts", "=", "np", ".", "empty", "(", "n_samples", ")", "\n", "k_all", "=", "np", ".", "empty", "(", "n_samples", ")", "\n", "nn", "=", "NearestNeighbors", "(", ")", "\n", "\n", "for", "label", "in", "np", ".", "unique", "(", "d", ",", "axis", "=", "0", ")", ":", "\n", "        ", "mask", "=", "np", ".", "all", "(", "d", "==", "label", ",", "axis", "=", "-", "1", ")", "\n", "count", "=", "np", ".", "sum", "(", "mask", ")", "\n", "if", "count", ">", "1", ":", "\n", "            ", "k", "=", "min", "(", "n_neighbors", ",", "count", "-", "1", ")", "\n", "nn", ".", "set_params", "(", "n_neighbors", "=", "k", ")", "\n", "nn", ".", "fit", "(", "c", "[", "mask", "]", ")", "\n", "r", "=", "nn", ".", "kneighbors", "(", ")", "[", "0", "]", "\n", "radius", "[", "mask", "]", "=", "np", ".", "nextafter", "(", "r", "[", ":", ",", "-", "1", "]", ",", "0", ")", "\n", "k_all", "[", "mask", "]", "=", "k", "\n", "", "label_counts", "[", "mask", "]", "=", "count", "\n", "\n", "# Ignore points with unique labels.", "\n", "", "mask", "=", "label_counts", ">", "1", "\n", "n_samples", "=", "np", ".", "sum", "(", "mask", ")", "\n", "label_counts", "=", "label_counts", "[", "mask", "]", "\n", "k_all", "=", "k_all", "[", "mask", "]", "\n", "c", "=", "c", "[", "mask", "]", "\n", "radius", "=", "radius", "[", "mask", "]", "\n", "\n", "nn", ".", "set_params", "(", "algorithm", "=", "'kd_tree'", ")", "\n", "nn", ".", "fit", "(", "c", ")", "\n", "ind", "=", "nn", ".", "radius_neighbors", "(", "radius", "=", "radius", ",", "return_distance", "=", "False", ")", "\n", "m_all", "=", "np", ".", "array", "(", "[", "i", ".", "size", "for", "i", "in", "ind", "]", ")", "\n", "\n", "mi", "=", "(", "digamma", "(", "n_samples", ")", "+", "np", ".", "mean", "(", "digamma", "(", "k_all", ")", ")", "-", "\n", "np", ".", "mean", "(", "digamma", "(", "label_counts", ")", ")", "-", "\n", "np", ".", "mean", "(", "digamma", "(", "m_all", "+", "1", ")", ")", ")", "\n", "return", "max", "(", "0", ",", "mi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.discrete_entropy": [[83, 86], ["numpy.unique", "ndd.entropy"], "function", ["None"], ["", "def", "discrete_entropy", "(", "x", ")", ":", "\n", "    ", "_", ",", "count", "=", "np", ".", "unique", "(", "x", ",", "return_counts", "=", "True", ",", "axis", "=", "0", ")", "\n", "return", "ndd", ".", "entropy", "(", "count", ",", "estimator", "=", "\"Grassberger\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.mig_metric": [[87, 101], ["zip", "meteric_utils.discrete_entropy", "meteric_utils.discrete_entropy", "meteric_utils._compute_mi_cd", "meteric_utils._compute_mi_cd", "print"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.discrete_entropy", "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.discrete_entropy", "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils._compute_mi_cd", "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils._compute_mi_cd"], ["", "def", "mig_metric", "(", "representations", ",", "factors", ")", ":", "\n", "    ", "z_c", ",", "z_p", "=", "representations", "\n", "f_c", ",", "f_p", "=", "factors", "\n", "e_f_c", ",", "e_f_p", "=", "discrete_entropy", "(", "f_c", ")", ",", "discrete_entropy", "(", "f_p", ")", "\n", "score", "=", "0", "\n", "for", "factor", ",", "entropy", "in", "zip", "(", "[", "f_c", ",", "f_p", "]", ",", "[", "e_f_c", ",", "e_f_p", "]", ")", ":", "\n", "        ", "content_mutual", "=", "_compute_mi_cd", "(", "z_c", ",", "factor", ",", "3", ")", "\n", "position_mutual", "=", "_compute_mi_cd", "(", "z_p", ",", "factor", ",", "3", ")", "\n", "print", "(", "content_mutual", ",", "position_mutual", ")", "\n", "score", "+=", "(", "content_mutual", "-", "position_mutual", "if", "content_mutual", ">", "position_mutual", "else", "position_mutual", "-", "content_mutual", ")", "/", "entropy", "\n", "\n", "", "score", "/=", "2", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.compute_fvd_embedding": [[102, 111], ["metrics.preprocess", "tensorflow.split", "tensorflow.concat", "tf.split.get_shape().as_list", "metrics.create_id3_embedding", "tf.split.get_shape"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.preprocess", "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.create_id3_embedding"], ["", "def", "compute_fvd_embedding", "(", "videos", ")", ":", "\n", "    ", "batch_size", "=", "videos", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "videos", "=", "fvd", ".", "preprocess", "(", "videos", ",", "(", "224", ",", "224", ")", ")", "\n", "videos", "=", "tf", ".", "split", "(", "videos", ",", "batch_size", "//", "16", ",", "axis", "=", "0", ")", "\n", "embedings", "=", "[", "]", "\n", "for", "video", "in", "videos", ":", "\n", "        ", "embedings", "=", "fvd", ".", "create_id3_embedding", "(", "video", ")", "\n", "", "embedings", "=", "tf", ".", "concat", "(", "embedings", ",", "axis", "=", "0", ")", "\n", "return", "embedings", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.compute_fvd": [[112, 129], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "meteric_utils.compute_fvd_embedding", "meteric_utils.compute_fvd_embedding", "metrics.calculate_fvd", "tensorflow.stop_gradient", "print", "numpy.repeat", "numpy.repeat", "tensorflow.Session", "sess.run", "sess.run", "sess.run", "np.repeat.transpose", "np.repeat.transpose", "tensorflow.global_variables_initializer", "tensorflow.tables_initializer"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.compute_fvd_embedding", "home.repos.pwc.inspect_result.blackPython_mipae.None.meteric_utils.compute_fvd_embedding", "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.calculate_fvd"], ["", "def", "compute_fvd", "(", "real_frames", ",", "fake_frames", ")", ":", "\n", "    ", "real_frames", ",", "fake_frames", "=", "real_frames", ".", "transpose", "(", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ")", "*", "255.0", ",", "fake_frames", ".", "transpose", "(", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ")", "*", "255.0", "\n", "if", "real_frames", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "real_frames", "=", "np", ".", "repeat", "(", "real_frames", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "fake_frames", "=", "np", ".", "repeat", "(", "fake_frames", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "", "real_frames", "=", "tf", ".", "convert_to_tensor", "(", "real_frames", ")", "\n", "fake_frames", "=", "tf", ".", "convert_to_tensor", "(", "fake_frames", ")", "\n", "real_embed", "=", "compute_fvd_embedding", "(", "real_frames", ")", "\n", "fake_embed", "=", "compute_fvd_embedding", "(", "fake_frames", ")", "\n", "fvd_graph", "=", "fvd", ".", "calculate_fvd", "(", "real_embed", ",", "fake_embed", ")", "\n", "fvd_graph", "=", "tf", ".", "stop_gradient", "(", "fvd_graph", ")", "\n", "print", "(", "\"running\"", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "tables_initializer", "(", ")", ")", "\n", "result", "=", "sess", ".", "run", "(", "fvd_graph", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.results_utils.pad_const": [[4, 14], ["list", "torch.cat", "range", "torch.ones().cuda", "len", "torch.ones"], "function", ["None"], ["def", "pad_const", "(", "x", ",", "const", "=", "1", ",", "thickness", "=", "2", ",", "axis", "=", "None", ")", ":", "\n", "    ", "if", "not", "axis", ":", "\n", "        ", "axis", "=", "list", "(", "range", "(", "len", "(", "x", ".", "shape", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "axis", ":", "\n", "        ", "curr_shape", "=", "x", ".", "shape", "\n", "padding", "=", "torch", ".", "ones", "(", "curr_shape", "[", "0", ":", "i", "]", "+", "(", "thickness", ",", ")", "+", "curr_shape", "[", "(", "i", "+", "1", ")", ":", "]", ",", "dtype", "=", "x", ".", "dtype", ")", ".", "cuda", "(", ")", "*", "const", "\n", "x", "=", "torch", ".", "cat", "(", "[", "padding", ",", "x", ",", "padding", "]", ",", "dim", "=", "i", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.__init__": [[7, 20], ["numpy.load", "len", "os.path.join", "numpy.load", "numpy.load", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "seed_is_set", "=", "False", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_toy_images.npy\"", ")", ",", "\"r\"", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_toy_train_split.npy\"", ")", ",", "\"r\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_toy_test_split.npy\"", ")", ",", "\"r\"", ")", "\n", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.set_seed": [[21, 26], ["numpy.random.seed", "random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.__len__": [[27, 29], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.get_data_index": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_data_index", "(", "self", ",", "color", ",", "shape", ",", "size", ",", "cam_height", ",", "backgroud_color", ",", "el", ",", "az", ")", ":", "\n", "        ", "return", "color", "*", "115200", "+", "shape", "*", "28800", "+", "size", "*", "14400", "+", "cam_height", "*", "4800", "+", "backgroud_color", "*", "1600", "+", "el", "*", "40", "+", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.__getitem__": [[33, 79], ["mpi3d_toy.Mpi3dToy.set_seed", "numpy.zeros", "random.choice", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "mpi3d_toy.Mpi3dToy.get_data_index", "numpy.copy", "numpy.random.randint", "numpy.random.randint", "mpi3d_toy.Mpi3dToy.data[].astype", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.set_seed", "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dToy.get_data_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "\n", "x", "=", "np", ".", "zeros", "(", "(", "self", ".", "seq_len", ",", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "color", ",", "shape", ",", "size", ",", "cam_height", ",", "background_color", "=", "random", ".", "choice", "(", "self", ".", "data_split", ")", "\n", "\n", "s_el", "=", "np", ".", "random", ".", "randint", "(", "40", ")", "\n", "s_az", "=", "np", ".", "random", ".", "randint", "(", "40", ")", "\n", "\n", "d_el", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "d_az", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "            ", "if", "s_el", "<", "0", ":", "\n", "                ", "s_el", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                    ", "d_el", "=", "-", "d_el", "\n", "", "else", ":", "\n", "                    ", "d_el", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "d_az", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "", "", "elif", "s_el", ">=", "40", ":", "\n", "                ", "s_el", "=", "39", "\n", "if", "self", ".", "deterministic", ":", "\n", "                    ", "d_el", "=", "-", "d_el", "\n", "", "else", ":", "\n", "                    ", "d_el", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "0", ")", "\n", "d_az", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "\n", "", "", "if", "s_az", "<", "0", ":", "\n", "                ", "s_az", "=", "40", "+", "s_az", "\n", "s_el", "=", "39", "-", "s_el", "\n", "d_el", "=", "-", "d_el", "\n", "", "elif", "s_az", ">=", "40", ":", "\n", "                ", "s_az", "=", "s_az", "-", "40", "\n", "s_el", "=", "39", "-", "s_el", "\n", "d_el", "=", "-", "d_el", "\n", "\n", "\n", "", "s_az", "=", "s_az", "%", "40", "\n", "data_index", "=", "self", ".", "get_data_index", "(", "color", ",", "shape", ",", "size", ",", "cam_height", ",", "background_color", ",", "s_el", ",", "s_az", ")", "\n", "x", "[", "t", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "copy", "(", "self", ".", "data", "[", "data_index", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", ")", "\n", "s_el", "+=", "d_el", "\n", "s_az", "+=", "d_az", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mpi3d_toy.Mpi3dReal.__init__": [[81, 94], ["numpy.load", "len", "os.path.join", "numpy.load", "numpy.load", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "seed_is_set", "=", "False", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_real_images.npy\"", ")", ",", "\"r\"", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_toy_train_split.npy\"", ")", ",", "\"r\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_split", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mpi3d_toy_test_split.npy\"", ")", ",", "\"r\"", ")", "\n", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.test_lstm.get_data_batch": [[55, 60], ["seq.transpose_().transpose_", "seq.transpose_"], "function", ["None"], ["def", "get_data_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "seq", "in", "data_loader", ":", "\n", "            ", "seq", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "yield", "seq", "\n", "", "", "", "data_generator", "=", "get_data_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main": [[4, 7], ["solver.SolverLstm", "solver.SolverLstm.train"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.solver.Solver.train"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "solver", "=", "SolverLstm", "(", "args", ")", "\n", "solver", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_128.vgg_layer.__init__": [[5, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "vgg_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_128.vgg_layer.forward": [[13, 15], ["vgg_128.vgg_layer.main"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.None.train_lstm.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_128.content_encoder.__init__": [[17, 54], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "content_dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "content_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 128 x 128", "\n", "self", ".", "c1", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "nc", ",", "64", ")", ",", "\n", "vgg_layer", "(", "64", ",", "64", ")", ",", "\n", ")", "\n", "# 64 x 64", "\n", "self", ".", "c2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "128", ")", ",", "\n", ")", "\n", "# 32 x 32 ", "\n", "self", ".", "c3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", ")", "\n", "# 16 x 16", "\n", "self", ".", "c4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 4 x 4", "\n", "self", ".", "c6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "content_dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "content_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_128.content_encoder.forward": [[55, 63], ["vgg_128.content_encoder.c1", "vgg_128.content_encoder.c2", "vgg_128.content_encoder.c3", "vgg_128.content_encoder.c4", "vgg_128.content_encoder.c5", "vgg_128.content_encoder.c6", "vgg_128.content_encoder.mp", "vgg_128.content_encoder.mp", "vgg_128.content_encoder.mp", "vgg_128.content_encoder.mp", "vgg_128.content_encoder.mp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "# 128 -> 64", "\n", "h2", "=", "self", ".", "c2", "(", "self", ".", "mp", "(", "h1", ")", ")", "# 64 -> 32", "\n", "h3", "=", "self", ".", "c3", "(", "self", ".", "mp", "(", "h2", ")", ")", "# 32 -> 16", "\n", "h4", "=", "self", ".", "c4", "(", "self", ".", "mp", "(", "h3", ")", ")", "# 16 -> 8", "\n", "h5", "=", "self", ".", "c5", "(", "self", ".", "mp", "(", "h4", ")", ")", "# 8 -> 4", "\n", "h6", "=", "self", ".", "c6", "(", "self", ".", "mp", "(", "h5", ")", ")", "# 4 -> 1", "\n", "return", "h6", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", ",", "h5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_128.decoder.__init__": [[66, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "content_dim", ",", "pose_dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1 x 1 -> 4 x 4", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "content_dim", "+", "pose_dim", ",", "512", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "upc2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", "*", "2", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", "\n", ")", "\n", "# 16 x 16", "\n", "self", ".", "upc3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", "*", "2", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "256", ")", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "upc4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", "*", "2", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "128", ")", "\n", ")", "\n", "# 64 x 64", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", "*", "2", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "64", ")", "\n", ")", "\n", "# 128 x 128", "\n", "self", ".", "upc6", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", "*", "2", ",", "64", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "nc", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.vgg_128.decoder.forward": [[105, 120], ["vgg_128.decoder.upc1", "vgg_128.decoder.up", "vgg_128.decoder.upc2", "vgg_128.decoder.up", "vgg_128.decoder.upc3", "vgg_128.decoder.up", "vgg_128.decoder.upc4", "vgg_128.decoder.up", "vgg_128.decoder.upc5", "vgg_128.decoder.up", "vgg_128.decoder.upc6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "content", ",", "pose", "=", "input", "\n", "content", ",", "skip", "=", "content", "\n", "d1", "=", "self", ".", "upc1", "(", "torch", ".", "cat", "(", "[", "content", ",", "pose", "]", ",", "1", ")", ")", "# 1 -> 4", "\n", "up1", "=", "self", ".", "up", "(", "d1", ")", "# 4 -> 8", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "up1", ",", "skip", "[", "4", "]", "]", ",", "1", ")", ")", "# 8 x 8", "\n", "up2", "=", "self", ".", "up", "(", "d2", ")", "# 8 -> 16 ", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "up2", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "# 16 x 16", "\n", "up3", "=", "self", ".", "up", "(", "d3", ")", "# 16 -> 32 ", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "up3", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "# 32 x 32", "\n", "up4", "=", "self", ".", "up", "(", "d4", ")", "# 32 -> 64", "\n", "d5", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "up4", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "# 64 x 64", "\n", "up5", "=", "self", ".", "up", "(", "d5", ")", "# 64 -> 128", "\n", "output", "=", "self", ".", "upc6", "(", "torch", ".", "cat", "(", "[", "up5", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "# 128 x 128", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.log_gradients": [[10, 16], ["module.named_parameters", "tag.replace.replace", "summary_writer.add_scalar", "summary_writer.add_histogram", "value.grad.norm"], "function", ["None"], ["def", "log_gradients", "(", "module", ",", "summary_writer", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "for", "tag", ",", "value", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "replace", "(", "\".\"", ",", "\"/\"", ")", "\n", "if", "value", ".", "grad", "is", "not", "None", ":", "\n", "            ", "summary_writer", ".", "add_scalar", "(", "tag", "+", "\"/grad_norm\"", ",", "value", ".", "grad", ".", "norm", "(", ")", ",", "global_step", "=", "global_step", ")", "\n", "summary_writer", ".", "add_histogram", "(", "tag", "+", "\"/grad\"", ",", "value", ".", "grad", ",", "global_step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.init_weights": [[17, 25], ["m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "classname.find", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.shuffle_dim": [[26, 33], ["torch.randperm", "torch.randperm", "torch.randperm", "perm_variables.append"], "function", ["None"], ["", "", "def", "shuffle_dim", "(", "variables", ",", "axis", "=", "0", ")", ":", "\n", "    ", "perm_variables", "=", "[", "]", "\n", "for", "variable", "in", "variables", ":", "\n", "        ", "B", "=", "variable", ".", "shape", "[", "0", "]", "\n", "perm", "=", "torch", ".", "randperm", "(", "B", ")", "\n", "perm_variables", ".", "append", "(", "variable", "[", "perm", "]", ")", "\n", "", "return", "perm_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.shuffle_time": [[34, 44], ["variables.split", "torch.cat", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.randperm", "perm_variables.append"], "function", ["None"], ["", "def", "shuffle_time", "(", "variables", ")", ":", "\n", "    ", "B", "=", "variables", ".", "shape", "[", "0", "]", "\n", "\n", "perm_variables", "=", "[", "]", "\n", "for", "z_t", "in", "variables", ".", "split", "(", "1", ",", "1", ")", ":", "\n", "        ", "perm", "=", "torch", ".", "randperm", "(", "B", ")", "\n", "perm_z_t", "=", "z_t", "[", "perm", "]", "\n", "perm_variables", ".", "append", "(", "perm_z_t", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "perm_variables", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.utils.save_gif": [[45, 81], ["os.path.split", "Popen", "Popen.communicate", "os.makedirs", "Popen.stdin.write", "IOError", "os.path.exists", "image.tostring", "err.decode"], "function", ["None"], ["", "def", "save_gif", "(", "gif_fname", ",", "images", ",", "fps", ")", ":", "\n", "    ", "\"\"\" \n    To generate a gif from image files, first generate palette from images\n    and then generate the gif from the images and the palette.\n    ffmpeg -i input_%02d.jpg -vf palettegen -y palette.png\n    ffmpeg -i input_%02d.jpg -i palette.png -lavfi paletteuse -y output.gif\n\n    Alternatively, use a filter to map the input images to both the palette\n    and gif commands, while also passing the palette to the gif command.\n    ffmpeg -i input_%02d.jpg -filter_complex \"[0:v]split[x][z];[z]palettegen[y];[x][y]paletteuse\" -y output.gif\n\n    To directly pass in numpy images, use rawvideo format and `-i -` option.\n    \"\"\"", "\n", "from", "subprocess", "import", "Popen", ",", "PIPE", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "gif_fname", ")", "\n", "if", "head", "and", "not", "os", ".", "path", ".", "exists", "(", "head", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "head", ")", "\n", "", "h", ",", "w", ",", "c", "=", "images", "[", "0", "]", ".", "shape", "\n", "cmd", "=", "[", "'ffmpeg'", ",", "'-y'", ",", "\n", "'-f'", ",", "'rawvideo'", ",", "\n", "'-vcodec'", ",", "'rawvideo'", ",", "\n", "'-r'", ",", "'%.02f'", "%", "fps", ",", "\n", "'-s'", ",", "'%dx%d'", "%", "(", "w", ",", "h", ")", ",", "\n", "'-pix_fmt'", ",", "{", "1", ":", "'gray'", ",", "3", ":", "'rgb24'", ",", "4", ":", "'rgba'", "}", "[", "c", "]", ",", "\n", "'-i'", ",", "'-'", ",", "\n", "'-filter_complex'", ",", "'[0:v]split[x][z];[z]palettegen[y];[x][y]paletteuse'", ",", "\n", "'-r'", ",", "'%.02f'", "%", "fps", ",", "\n", "'%s'", "%", "gif_fname", "]", "\n", "proc", "=", "Popen", "(", "cmd", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "for", "image", "in", "images", ":", "\n", "        ", "proc", ".", "stdin", ".", "write", "(", "image", ".", "tostring", "(", ")", ")", "\n", "", "out", ",", "err", "=", "proc", ".", "communicate", "(", ")", "\n", "if", "proc", ".", "returncode", ":", "\n", "        ", "err", "=", "'\\n'", ".", "join", "(", "[", "' '", ".", "join", "(", "cmd", ")", ",", "err", ".", "decode", "(", "'utf8'", ")", "]", ")", "\n", "raise", "IOError", "(", "err", ")", "\n", "", "del", "proc", "\n", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.discriminator_loss": [[11, 16], ["torch.sigmoid", "torch.sigmoid", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.binary_cross_entropy", "torch.binary_cross_entropy"], "function", ["None"], ["def", "discriminator_loss", "(", "out_true", ",", "out_false", ")", ":", "\n", "    ", "out_true", ",", "out_false", "=", "F", ".", "sigmoid", "(", "out_true", ")", ",", "F", ".", "sigmoid", "(", "out_false", ")", "\n", "target_ones", ",", "target_zeros", "=", "torch", ".", "ones_like", "(", "out_true", ")", ",", "torch", ".", "zeros_like", "(", "out_false", ")", "\n", "return", "0.5", "*", "F", ".", "binary_cross_entropy", "(", "out_true", ",", "target_ones", ")", "+", "0.5", "*", "F", ".", "binary_cross_entropy", "(", "out_false", ",", "target_zeros", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.emily_sd_loss": [[17, 20], ["torch.binary_cross_entropy", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "emily_sd_loss", "(", "x", ")", ":", "\n", "    ", "target", "=", "torch", ".", "ones_like", "(", "x", ")", "*", "0.5", "\n", "return", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "x", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.donsker_vardhan_lower_bound": [[25, 27], ["math.log", "out_true.mean", "out_false.logsumexp"], "function", ["None"], ["", "def", "donsker_vardhan_lower_bound", "(", "out_true", ",", "out_false", ")", ":", "\n", "    ", "return", "out_true", ".", "mean", "(", ")", "-", "out_false", ".", "logsumexp", "(", "0", ")", "+", "math", ".", "log", "(", "out_false", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.tuba_lower_bound": [[28, 35], ["out_true.mean", "out_false.logsumexp().exp", "out_false.logsumexp"], "function", ["None"], ["", "def", "tuba_lower_bound", "(", "out_true", ",", "out_false", ",", "log_baseline", "=", "None", ")", ":", "\n", "    ", "if", "log_baseline", "is", "not", "None", ":", "\n", "        ", "out_true", "=", "out_true", "-", "log_baseline", "\n", "out_false", "=", "out_false", "-", "log_baseline", "\n", "", "joint_term", "=", "out_true", ".", "mean", "(", ")", "\n", "marg_term", "=", "out_false", ".", "logsumexp", "(", "0", ")", ".", "exp", "(", ")", "/", "out_false", ".", "shape", "[", "0", "]", "\n", "return", "joint_term", "-", "marg_term", "+", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.nwj_lower_bound": [[36, 38], ["mi_estimators.tuba_lower_bound"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.tuba_lower_bound"], ["", "def", "nwj_lower_bound", "(", "out_true", ",", "out_false", ")", ":", "\n", "    ", "return", "tuba_lower_bound", "(", "out_true", ",", "out_false", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.js_fgan_lower_bound": [[39, 41], ["torch.softplus().mean", "torch.softplus().mean", "torch.softplus", "torch.softplus"], "function", ["None"], ["", "def", "js_fgan_lower_bound", "(", "out_true", ",", "out_false", ")", ":", "\n", "    ", "return", "-", "1", "*", "F", ".", "softplus", "(", "-", "1", "*", "out_true", ")", ".", "mean", "(", ")", "-", "F", ".", "softplus", "(", "out_false", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.js_mi_lower_bound": [[42, 44], ["mi_estimators.nwj_lower_bound"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.nwj_lower_bound"], ["", "def", "js_mi_lower_bound", "(", "out_true", ",", "out_false", ")", ":", "\n", "    ", "return", "nwj_lower_bound", "(", "out_true", "+", "1", ",", "out_false", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.smile_lower_bound": [[45, 49], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mi_estimators.js_fgan_lower_bound"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.js_fgan_lower_bound"], ["", "def", "smile_lower_bound", "(", "out_true", ",", "out_false", ",", "clamp", "=", "5.0", ")", ":", "\n", "    ", "out_true", "=", "torch", ".", "clamp", "(", "out_true", ",", "-", "1", "*", "clamp", ",", "clamp", ")", "\n", "out_false", "=", "torch", ".", "clamp", "(", "out_false", ",", "-", "1", "*", "clamp", ",", "clamp", ")", "\n", "return", "js_fgan_lower_bound", "(", "out_true", ",", "out_false", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.smile_mi_lower_bound": [[50, 54], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mi_estimators.donsker_vardhan_lower_bound"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.None.mi_estimators.donsker_vardhan_lower_bound"], ["", "def", "smile_mi_lower_bound", "(", "out_true", ",", "out_false", ",", "clamp", "=", "5.0", ")", ":", "\n", "    ", "out_true", "=", "torch", ".", "clamp", "(", "out_true", ",", "-", "1", "*", "clamp", ",", "clamp", ")", "\n", "out_false", "=", "torch", ".", "clamp", "(", "out_false", ",", "-", "1", "*", "clamp", ",", "clamp", ")", "\n", "return", "donsker_vardhan_lower_bound", "(", "out_true", ",", "out_false", ")", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.metrics.psnr": [[11, 16], ["torch.mse_loss().mean", "torch.log10", "torch.log10", "torch.mse_loss"], "function", ["None"], ["def", "psnr", "(", "prediction", ",", "target", ")", ":", "\n", "    ", "\"\"\" Assuming inputs are 5D tensors [T,B,NC,H,W] \"\"\"", "\n", "mse", "=", "F", ".", "mse_loss", "(", "prediction", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "psnr", "=", "10", "*", "torch", ".", "log10", "(", "1.0", "/", "mse", ")", "\n", "return", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.metrics._ssim_wrapper": [[17, 22], ["ssim.ssim_loss", "ssim.ssim_loss.mean().view", "sample.view", "gt.view", "ssim.ssim_loss.mean"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.metrics.ssim.ssim_loss"], ["", "def", "_ssim_wrapper", "(", "sample", ",", "gt", ")", ":", "\n", "    ", "nt", ",", "bsz", "=", "sample", ".", "shape", "[", "0", "]", ",", "sample", ".", "shape", "[", "1", "]", "\n", "img_shape", "=", "sample", ".", "shape", "[", "2", ":", "]", "\n", "ssim", "=", "ssim_loss", "(", "sample", ".", "view", "(", "nt", "*", "bsz", ",", "*", "img_shape", ")", ",", "gt", ".", "view", "(", "nt", "*", "bsz", ",", "*", "img_shape", ")", ",", "max_val", "=", "1.", ",", "reduction", "=", "'none'", ")", "\n", "return", "ssim", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ")", ".", "view", "(", "nt", ",", "bsz", ",", "img_shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.metrics._lpips_wrapper": [[23, 37], ["lpips.loss.PerceptualLoss.", "lpips_model.view", "lpips.loss.PerceptualLoss", "sample.repeat", "gt.repeat", "sample.repeat.view", "gt.repeat.view"], "function", ["None"], ["", "def", "_lpips_wrapper", "(", "sample", ",", "gt", ",", "lpips_path", ")", ":", "\n", "    ", "global", "lpips_model", "\n", "if", "lpips_model", "is", "None", ":", "\n", "        ", "lpips_model", "=", "PerceptualLoss", "(", "lpips_path", ")", "\n", "", "nt", ",", "bsz", "=", "sample", ".", "shape", "[", "0", "]", ",", "sample", ".", "shape", "[", "1", "]", "\n", "img_shape", "=", "sample", ".", "shape", "[", "2", ":", "]", "\n", "if", "img_shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "sample_", "=", "sample", ".", "repeat", "(", "1", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "gt_", "=", "gt", ".", "repeat", "(", "1", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "sample_", "=", "sample", "\n", "gt_", "=", "gt", "\n", "", "lpips", "=", "lpips_model", "(", "sample_", ".", "view", "(", "nt", "*", "bsz", ",", "3", ",", "*", "img_shape", "[", "1", ":", "]", ")", ",", "gt_", ".", "view", "(", "nt", "*", "bsz", ",", "3", ",", "*", "img_shape", "[", "1", ":", "]", ")", ")", "\n", "return", "lpips", ".", "view", "(", "nt", ",", "bsz", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.preprocess": [[36, 58], ["videos.shape.as_list", "tensorflow.reshape", "tensorflow.image.resize_bilinear", "tensorflow.reshape", "tensorflow.print", "tensorflow.print", "list", "tensorflow.reduce_max", "tensorflow.reduce_min"], "function", ["None"], ["def", "preprocess", "(", "videos", ",", "target_resolution", ")", ":", "\n", "  ", "\"\"\"Runs some preprocessing on the videos for I3D model.\n\n  Args:\n    videos: <T>[batch_size, num_frames, height, width, depth] The videos to be\n      preprocessed. We don't care about the specific dtype of the videos, it can\n      be anything that tf.image.resize_bilinear accepts. Values are expected to\n      be in the range 0-255.\n    target_resolution: (width, height): target video resolution\n\n  Returns:\n    videos: <float32>[batch_size, num_frames, height, width, depth]\n  \"\"\"", "\n", "videos_shape", "=", "videos", ".", "shape", ".", "as_list", "(", ")", "\n", "all_frames", "=", "tf", ".", "reshape", "(", "videos", ",", "[", "-", "1", "]", "+", "videos_shape", "[", "-", "3", ":", "]", ")", "\n", "resized_videos", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "all_frames", ",", "size", "=", "target_resolution", ")", "\n", "target_shape", "=", "[", "videos_shape", "[", "0", "]", ",", "-", "1", "]", "+", "list", "(", "target_resolution", ")", "+", "[", "3", "]", "\n", "output_videos", "=", "tf", ".", "reshape", "(", "resized_videos", ",", "target_shape", ")", "\n", "ops", "=", "[", "tf", ".", "print", "(", "\"output_videos  Max:\"", ",", "tf", ".", "reduce_max", "(", "output_videos", ")", ")", ",", "tf", ".", "print", "(", "\"output_videos  Min:\"", ",", "tf", ".", "reduce_min", "(", "output_videos", ")", ")", "]", "\n", "#scaled_videos = 2. * tf.cast(output_videos, tf.float32) / 255. - 1", "\n", "scaled_videos", "=", "2.", "*", "output_videos", "/", "255.", "-", "1", "\n", "return", "scaled_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance._is_in_graph": [[60, 67], ["tensorflow.get_default_graph().get_tensor_by_name", "tensorflow.get_default_graph"], "function", ["None"], ["", "def", "_is_in_graph", "(", "tensor_name", ")", ":", "\n", "  ", "\"\"\"Checks whether a given tensor does exists in the graph.\"\"\"", "\n", "try", ":", "\n", "    ", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "tensor_name", ")", "\n", "", "except", "KeyError", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.create_id3_embedding": [[69, 133], ["int", "tensorflow.get_default_graph().get_tensor_by_name", "six.ensure_str().replace", "tensorflow.Assert", "tensorflow.Assert", "tensorflow.assert_equal", "tensorflow.control_dependencies", "tensorflow.identity", "frechet_video_distance._is_in_graph", "tensorflow_hub.Module", "hub.Module.", "tensorflow.get_default_graph", "six.ensure_str", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance._is_in_graph"], ["", "def", "create_id3_embedding", "(", "videos", ")", ":", "\n", "  ", "\"\"\"Embeds the given videos using the Inflated 3D Convolution network.\n\n  Downloads the graph of the I3D from tf.hub and adds it to the graph on the\n  first call.\n\n  Args:\n    videos: <float32>[batch_size, num_frames, height=224, width=224, depth=3].\n      Expected range is [-1, 1].\n\n  Returns:\n    embedding: <float32>[batch_size, embedding_size]. embedding_size depends\n               on the model used.\n\n  Raises:\n    ValueError: when a provided embedding_layer is not supported.\n  \"\"\"", "\n", "\n", "batch_size", "=", "16", "\n", "module_spec", "=", "\"https://tfhub.dev/deepmind/i3d-kinetics-400/1\"", "\n", "\n", "\n", "# Making sure that we import the graph separately for", "\n", "# each different input video tensor.", "\n", "module_name", "=", "\"fvd_kinetics-400_id3_module_\"", "+", "six", ".", "ensure_str", "(", "\n", "videos", ".", "name", ")", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", "\n", "\n", "assert_ops", "=", "[", "\n", "tf", ".", "Assert", "(", "\n", "tf", ".", "reduce_max", "(", "videos", ")", "<=", "1.001", ",", "\n", "[", "\"max value in frame is > 1\"", ",", "videos", "]", ")", ",", "\n", "tf", ".", "Assert", "(", "\n", "tf", ".", "reduce_min", "(", "videos", ")", ">=", "-", "1.001", ",", "\n", "[", "\"min value in frame is < -1\"", ",", "videos", "]", ")", ",", "\n", "tf", ".", "assert_equal", "(", "\n", "tf", ".", "shape", "(", "videos", ")", "[", "0", "]", ",", "\n", "batch_size", ",", "[", "\"invalid frame batch size: \"", ",", "\n", "tf", ".", "shape", "(", "videos", ")", "]", ",", "\n", "summarize", "=", "6", ")", ",", "\n", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "assert_ops", ")", ":", "\n", "    ", "videos", "=", "tf", ".", "identity", "(", "videos", ")", "\n", "\n", "", "module_scope", "=", "\"%s_apply_default/\"", "%", "module_name", "\n", "\n", "# To check whether the module has already been loaded into the graph, we look", "\n", "# for a given tensor name. If this tensor name exists, we assume the function", "\n", "# has been called before and the graph was imported. Otherwise we import it.", "\n", "# Note: in theory, the tensor could exist, but have wrong shapes.", "\n", "# This will happen if create_id3_embedding is called with a frames_placehoder", "\n", "# of wrong size/batch size, because even though that will throw a tf.Assert", "\n", "# on graph-execution time, it will insert the tensor (with wrong shape) into", "\n", "# the graph. This is why we need the following assert.", "\n", "video_batch_size", "=", "int", "(", "videos", ".", "shape", "[", "0", "]", ")", "\n", "assert", "video_batch_size", "in", "[", "batch_size", ",", "-", "1", ",", "None", "]", ",", "\"Invalid batch size\"", "\n", "tensor_name", "=", "module_scope", "+", "\"RGB/inception_i3d/Mean:0\"", "\n", "if", "not", "_is_in_graph", "(", "tensor_name", ")", ":", "\n", "    ", "i3d_model", "=", "hub", ".", "Module", "(", "module_spec", ",", "name", "=", "module_name", ")", "\n", "i3d_model", "(", "videos", ")", "\n", "\n", "# gets the kinetics-i3d-400-logits layer", "\n", "", "tensor_name", "=", "module_scope", "+", "\"RGB/inception_i3d/Mean:0\"", "\n", "tensor", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "tensor_name", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.frechet_video_distance.calculate_fvd": [[135, 148], ["tensorflow_gan.eval.frechet_classifier_distance_from_activations"], "function", ["None"], ["", "def", "calculate_fvd", "(", "real_activations", ",", "\n", "generated_activations", ")", ":", "\n", "  ", "\"\"\"Returns a list of ops that compute metrics as funcs of activations.\n\n  Args:\n    real_activations: <float32>[num_samples, embedding_size]\n    generated_activations: <float32>[num_samples, embedding_size]\n\n  Returns:\n    A scalar that contains the requested FVD.\n  \"\"\"", "\n", "return", "tfgan", ".", "eval", ".", "frechet_classifier_distance_from_activations", "(", "\n", "real_activations", ",", "generated_activations", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.ssim._fspecial_gaussian": [[9, 18], ["torch.tensor", "grid.softmax.view", "grid.softmax.softmax", "grid.softmax.view", "kernel.expand().contiguous.expand().contiguous", "torch.tensor.view", "torch.tensor.view", "kernel.expand().contiguous.expand", "range"], "function", ["None"], ["def", "_fspecial_gaussian", "(", "size", ",", "channel", ",", "sigma", ")", ":", "\n", "    ", "coords", "=", "torch", ".", "tensor", "(", "[", "(", "x", "-", "(", "size", "-", "1.", ")", "/", "2.", ")", "for", "x", "in", "range", "(", "size", ")", "]", ")", "\n", "coords", "=", "-", "coords", "**", "2", "/", "(", "2.", "*", "sigma", "**", "2", ")", "\n", "grid", "=", "coords", ".", "view", "(", "1", ",", "-", "1", ")", "+", "coords", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "grid", "=", "grid", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "grid", "=", "grid", ".", "softmax", "(", "-", "1", ")", "\n", "kernel", "=", "grid", ".", "view", "(", "1", ",", "1", ",", "size", ",", "size", ")", "\n", "kernel", "=", "kernel", ".", "expand", "(", "channel", ",", "1", ",", "size", ",", "size", ")", ".", "contiguous", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.ssim._ssim": [[20, 40], ["torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d"], "function", ["None"], ["", "def", "_ssim", "(", "input", ",", "target", ",", "max_val", ",", "k1", ",", "k2", ",", "channel", ",", "kernel", ")", ":", "\n", "    ", "c1", "=", "(", "k1", "*", "max_val", ")", "**", "2", "\n", "c2", "=", "(", "k2", "*", "max_val", ")", "**", "2", "\n", "\n", "mu1", "=", "conv2d", "(", "input", ",", "kernel", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "conv2d", "(", "target", ",", "kernel", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "conv2d", "(", "input", "*", "input", ",", "kernel", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "conv2d", "(", "target", "*", "target", ",", "kernel", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "conv2d", "(", "input", "*", "target", ",", "kernel", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "v1", "=", "2", "*", "sigma12", "+", "c2", "\n", "v2", "=", "sigma1_sq", "+", "sigma2_sq", "+", "c2", "\n", "\n", "ssim", "=", "(", "(", "2", "*", "mu1_mu2", "+", "c1", ")", "*", "v1", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "c1", ")", "*", "v2", ")", "\n", "return", "ssim", ",", "v1", "/", "v2", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.metrics.ssim.ssim_loss": [[42, 78], ["input.expand.dim", "input.expand.size", "_fspecial_gaussian.to", "ssim._ssim", "input.expand.size", "target.expand.size", "ValueError", "torch.nn._reduction.legacy_get_string", "input.expand.expand", "target.expand.expand", "ssim._fspecial_gaussian", "input.expand.dim", "input.expand.dim", "target.expand.dim", "target.expand.dim", "input.expand.expand", "target.expand.expand", "torch.mean", "torch.sum", "input.expand.size", "target.expand.size", "input.expand.dim", "input.expand.dim", "input.expand.dim", "target.expand.dim", "target.expand.dim", "target.expand.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.metrics.ssim._ssim", "home.repos.pwc.inspect_result.blackPython_mipae.metrics.ssim._fspecial_gaussian"], ["", "def", "ssim_loss", "(", "input", ",", "target", ",", "max_val", ",", "filter_size", "=", "11", ",", "k1", "=", "0.01", ",", "k2", "=", "0.03", ",", "\n", "sigma", "=", "1.5", ",", "kernel", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "r\"\"\"ssim_loss(input, target, max_val, filter_size, k1, k2,\n                  sigma, kernel=None, size_average=None, reduce=None, reduction='mean') -> Tensor\n    Measures the structural similarity index (SSIM) error.\n    See :class:`~torch.nn.SSIMLoss` for details.\n    \"\"\"", "\n", "\n", "if", "input", ".", "size", "(", ")", "!=", "target", ".", "size", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected input size ({}) to match target size ({}).'", "\n", ".", "format", "(", "input", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "if", "size_average", "is", "not", "None", "or", "reduce", "is", "not", "None", ":", "\n", "        ", "reduction", "=", "_Reduction", ".", "legacy_get_string", "(", "size_average", ",", "reduce", ")", "\n", "\n", "", "dim", "=", "input", ".", "dim", "(", ")", "\n", "if", "dim", "==", "2", ":", "\n", "        ", "input", "=", "input", ".", "expand", "(", "1", ",", "1", ",", "input", ".", "dim", "(", "-", "2", ")", ",", "input", ".", "dim", "(", "-", "1", ")", ")", "\n", "target", "=", "target", ".", "expand", "(", "1", ",", "1", ",", "target", ".", "dim", "(", "-", "2", ")", ",", "target", ".", "dim", "(", "-", "1", ")", ")", "\n", "", "elif", "dim", "==", "3", ":", "\n", "        ", "input", "=", "input", ".", "expand", "(", "1", ",", "input", ".", "dim", "(", "-", "3", ")", ",", "input", ".", "dim", "(", "-", "2", ")", ",", "input", ".", "dim", "(", "-", "1", ")", ")", "\n", "target", "=", "target", ".", "expand", "(", "1", ",", "target", ".", "dim", "(", "-", "3", ")", ",", "target", ".", "dim", "(", "-", "2", ")", ",", "target", ".", "dim", "(", "-", "1", ")", ")", "\n", "", "elif", "dim", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected 2, 3, or 4 dimensions (got {})'", ".", "format", "(", "dim", ")", ")", "\n", "\n", "", "_", ",", "channel", ",", "_", ",", "_", "=", "input", ".", "size", "(", ")", "\n", "\n", "if", "kernel", "is", "None", ":", "\n", "        ", "kernel", "=", "_fspecial_gaussian", "(", "filter_size", ",", "channel", ",", "sigma", ")", "\n", "", "kernel", "=", "kernel", ".", "to", "(", "device", "=", "input", ".", "device", ")", "\n", "\n", "ret", ",", "_", "=", "_ssim", "(", "input", ",", "target", ",", "max_val", ",", "k1", ",", "k2", ",", "channel", ",", "kernel", ")", "\n", "\n", "if", "reduction", "!=", "'none'", ":", "\n", "        ", "ret", "=", "torch", ".", "mean", "(", "ret", ")", "if", "reduction", "==", "'mean'", "else", "torch", ".", "sum", "(", "ret", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.PNetLin.__init__": [[28, 63], ["torch.Module.__init__", "networks_basic.ScalingLayer", "len", "net_type", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'vgg'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "spatial", "=", "False", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNetLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.PNetLin.forward": [[64, 93], ["range", "range", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.scaling_layer", "networks_basic.PNetLin.scaling_layer", "loss.normalize_tensor", "loss.normalize_tensor", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.PNetLin.lins[].model", "range", "networks_basic.PNetLin.lins[].model", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.normalize_tensor", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.normalize_tensor", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.upsample", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.spatial_average", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.upsample", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.spatial_average"], ["", "", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.ScalingLayer.__init__": [[95, 99], ["torch.Module.__init__", "networks_basic.ScalingLayer.register_buffer", "networks_basic.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.ScalingLayer.forward": [[100, 102], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.NetLinLayer.__init__": [[106, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.Dist2LogitLayer.__init__": [[116, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.Dist2LogitLayer.forward": [[128, 130], ["networks_basic.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.BCERankingLoss.__init__": [[132, 137], ["torch.Module.__init__", "networks_basic.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.BCERankingLoss.forward": [[138, 142], ["networks_basic.BCERankingLoss.net.forward", "networks_basic.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.FakeNet.__init__": [[145, 149], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.L2.forward": [[152, 166], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "loss.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "loss.l2", "loss.tensor2np", "loss.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss.tensor2tensorlab", "loss.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.l2", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2np", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2np", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2tensorlab", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "l2", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.DSSIM.forward": [[169, 181], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "loss.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "loss.dssim().astype", "loss.dssim", "loss.dssim", "loss.tensor2im", "loss.tensor2im", "loss.tensor2np", "loss.tensor2np", "loss.tensor2tensorlab", "loss.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.dssim", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.dssim", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2np", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2np", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2tensorlab", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "1.", "*", "util", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "util", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.spatial_average": [[17, 19], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.upsample": [[20, 25], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_H", "=", "64", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", "=", "in_tens", ".", "shape", "[", "2", "]", "\n", "scale_factor", "=", "1.", "*", "out_H", "/", "in_H", "\n", "\n", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.print_network": [[182, 188], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.name": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.initialize": [[27, 104], ["base_model.BaseModel.initialize", "list", "networks_basic.PNetLin", "dist_model.DistModel.net.parameters", "networks_basic.BCERankingLoss", "list", "torch.optim.Adam", "dist_model.DistModel.net.eval", "dist_model.DistModel.net.to", "torch.nn.DataParallel", "print", "networks_basic.print_network", "print", "print", "dist_model.DistModel.net.load_state_dict", "networks_basic.PNetLin", "dist_model.DistModel.rankLoss.net.parameters", "dist_model.DistModel.rankLoss.to", "torch.load", "networks_basic.L2", "networks_basic.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.initialize", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.networks_basic.print_network"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['net-lin'] for linearly calibrated network\n                    ['net'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            spatial_shape - if given, output spatial shape. if None then spatial shape is determined automatically via spatial_factor (see below).\n            spatial_factor - if given, specifies upsampling factor relative to the largest spatial extent of a convolutional layer. if None then resized to size of input images.\n            spatial_order - spline order of filter for upsampling in spatial mode, by default 1 (bilinear).\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "use_gpu", "=", "use_gpu", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'net-lin'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "pnet_type", "=", "net", ",", "\n", "use_dropout", "=", "True", ",", "spatial", "=", "spatial", ",", "version", "=", "version", ",", "lpips", "=", "True", ")", "\n", "kw", "=", "{", "}", "\n", "if", "not", "use_gpu", ":", "\n", "                ", "kw", "[", "'map_location'", "]", "=", "'cpu'", "\n", "\n", "", "if", "(", "not", "is_train", ")", ":", "\n", "                ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "**", "kw", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "elif", "(", "self", ".", "model", "==", "'net'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_type", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "networks", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.forward": [[105, 114], ["dist_model.DistModel.net.forward"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.optimize_parameters": [[116, 122], ["dist_model.DistModel.forward_train", "dist_model.DistModel.optimizer_net.zero_grad", "dist_model.DistModel.backward_train", "dist_model.DistModel.optimizer_net.step", "dist_model.DistModel.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.forward_train", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.backward_train", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.clamp_weights": [[123, 127], ["dist_model.DistModel.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.set_input": [[128, 143], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "dist_model.DistModel.input_ref.to", "dist_model.DistModel.input_p0.to", "dist_model.DistModel.input_p1.to", "dist_model.DistModel.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.forward_train": [[144, 157], ["dist_model.DistModel.forward", "dist_model.DistModel.forward", "dist_model.DistModel.compute_accuracy", "torch.autograd.Variable().view", "dist_model.DistModel.rankLoss.forward", "dist_model.DistModel.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.compute_accuracy", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "# print(self.net.module.scaling_layer.shift)", "\n", "# print(torch.norm(self.net.module.net.slice1[0].weight).item(), torch.norm(self.net.module.lin0.model[1].weight).item())", "\n", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.backward_train": [[158, 160], ["torch.mean().backward", "torch.mean"], "methods", ["None"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.compute_accuracy": [[161, 166], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.get_current_errors": [[167, 175], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "dist_model.DistModel.loss_total.data.cpu().numpy", "dist_model.DistModel.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.get_current_visuals": [[176, 190], ["loss.tensor2im", "loss.tensor2im", "loss.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "dist_model.DistModel.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.save": [[191, 197], ["dist_model.DistModel.save_network", "dist_model.DistModel.save_network", "dist_model.DistModel.save_network"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.DistModel.update_learning_rate": [[198, 207], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.score_2afc_dataset": [[208, 242], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["None"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches\n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.dist_model.score_jnd_dataset": [[243, 281], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "loss.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.voc_ap"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "util", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.squeezenet.__init__": [[7, 35], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.squeezenet.forward": [[36, 55], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.alexnet.__init__": [[58, 80], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.alexnet.forward": [[81, 96], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.vgg16.__init__": [[98, 120], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.vgg16.forward": [[121, 136], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.resnet.__init__": [[140, 162], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.pretrained_networks.resnet.forward": [[163, 182], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.PerceptualLoss.__init__": [[14, 24], ["super().__init__", "dist_model.DistModel", "loss.PerceptualLoss.model.initialize"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.initialize"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'rgb'", ",", "spatial", "=", "False", ",", "use_gpu", "=", "True", ",", "\n", "gpu_ids", "=", "[", "0", "]", ")", ":", "# VGG using our perceptually-learned weights (LPIPS metric)", "\n", "# def __init__(self, model='net', net='vgg', use_gpu=True): # \"default\" way of using VGG as a perceptual loss", "\n", "        ", "super", "(", "PerceptualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model", "=", "dist_model", ".", "DistModel", "(", ")", "\n", "self", ".", "model", ".", "initialize", "(", "model", "=", "model", ",", "net", "=", "net", ",", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ",", "model_path", "=", "model_path", ",", "\n", "spatial", "=", "self", ".", "spatial", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.PerceptualLoss.forward": [[25, 40], ["loss.PerceptualLoss.model.forward"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Pred and target are Variables.\n        If normalize is True, assumes the images are between [0,1] and then scales them between [-1,+1]\n        If normalize is False, assumes the images are already between [-1,+1]\n\n        Inputs pred and target are Nx3xHxW\n        Output pytorch Variable N long\n        \"\"\"", "\n", "\n", "if", "normalize", ":", "\n", "            ", "target", "=", "2", "*", "target", "-", "1", "\n", "pred", "=", "2", "*", "pred", "-", "1", "\n", "\n", "", "return", "self", ".", "model", ".", "forward", "(", "target", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.normalize_tensor": [[41, 44], ["torch.sqrt", "torch.sum"], "function", ["None"], ["", "", "def", "normalize_tensor", "(", "in_feat", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "in_feat", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "in_feat", "/", "(", "norm_factor", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.l2": [[45, 47], ["numpy.mean"], "function", ["None"], ["", "def", "l2", "(", "p0", ",", "p1", ",", "range", "=", "255.", ")", ":", "\n", "    ", "return", ".5", "*", "np", ".", "mean", "(", "(", "p0", "/", "range", "-", "p1", "/", "range", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.psnr": [[48, 50], ["numpy.log10", "numpy.mean"], "function", ["None"], ["", "def", "psnr", "(", "p0", ",", "p1", ",", "peak", "=", "255.", ")", ":", "\n", "    ", "return", "10", "*", "np", ".", "log10", "(", "peak", "**", "2", "/", "np", ".", "mean", "(", "(", "1.", "*", "p0", "-", "1.", "*", "p1", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.dssim": [[51, 53], ["skimage.measure.compare_ssim"], "function", ["None"], ["", "def", "dssim", "(", "p0", ",", "p1", ",", "range", "=", "255.", ")", ":", "\n", "    ", "return", "(", "1", "-", "compare_ssim", "(", "p0", ",", "p1", ",", "data_range", "=", "range", ",", "multichannel", "=", "True", ")", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.rgb2lab": [[101, 104], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.rgb2lab"], ["", "", "def", "rgb2lab", "(", "input", ")", ":", "\n", "    ", "from", "skimage", "import", "color", "\n", "return", "color", ".", "rgb2lab", "(", "input", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2np": [[61, 64], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], ["", "def", "tensor2np", "(", "tensor_obj", ")", ":", "\n", "# change dimension of a tensor object into a numpy array", "\n", "    ", "return", "tensor_obj", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.np2tensor": [[65, 68], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], ["", "def", "np2tensor", "(", "np_obj", ")", ":", "\n", "# change dimenion of np array into tensor array", "\n", "    ", "return", "torch", ".", "Tensor", "(", "np_obj", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2tensorlab": [[69, 82], ["loss.tensor2im", "color.rgb2lab", "loss.np2tensor"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.rgb2lab", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.np2tensor"], ["", "def", "tensor2tensorlab", "(", "image_tensor", ",", "to_norm", "=", "True", ",", "mc_only", "=", "False", ")", ":", "\n", "# image tensor to lab tensor", "\n", "    ", "from", "skimage", "import", "color", "\n", "\n", "img", "=", "tensor2im", "(", "image_tensor", ")", "\n", "img_lab", "=", "color", ".", "rgb2lab", "(", "img", ")", "\n", "if", "(", "mc_only", ")", ":", "\n", "        ", "img_lab", "[", ":", ",", ":", ",", "0", "]", "=", "img_lab", "[", ":", ",", ":", ",", "0", "]", "-", "50", "\n", "", "if", "(", "to_norm", "and", "not", "mc_only", ")", ":", "\n", "        ", "img_lab", "[", ":", ",", ":", ",", "0", "]", "=", "img_lab", "[", ":", ",", ":", ",", "0", "]", "-", "50", "\n", "img_lab", "=", "img_lab", "/", "100.", "\n", "\n", "", "return", "np2tensor", "(", "img_lab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensorlab2tensor": [[83, 100], ["warnings.filterwarnings", "loss.tensor2np", "numpy.clip", "color.rgb2lab", "loss.np2tensor", "loss.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "loss.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2np", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.rgb2lab", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.np2tensor", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.im2tensor", "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.im2tensor"], ["", "def", "tensorlab2tensor", "(", "lab_tensor", ",", "return_inbnd", "=", "False", ")", ":", "\n", "    ", "from", "skimage", "import", "color", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "lab", "=", "tensor2np", "(", "lab_tensor", ")", "*", "100.", "\n", "lab", "[", ":", ",", ":", ",", "0", "]", "=", "lab", "[", ":", ",", ":", ",", "0", "]", "+", "50", "\n", "\n", "rgb_back", "=", "255.", "*", "np", ".", "clip", "(", "color", ".", "lab2rgb", "(", "lab", ".", "astype", "(", "'float'", ")", ")", ",", "0", ",", "1", ")", "\n", "if", "(", "return_inbnd", ")", ":", "\n", "# convert back to lab, see if we match", "\n", "        ", "lab_back", "=", "color", ".", "rgb2lab", "(", "rgb_back", ".", "astype", "(", "'uint8'", ")", ")", "\n", "mask", "=", "1.", "*", "np", ".", "isclose", "(", "lab_back", ",", "lab", ",", "atol", "=", "2.", ")", "\n", "mask", "=", "np2tensor", "(", "np", ".", "prod", "(", "mask", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "return", "(", "im2tensor", "(", "rgb_back", ")", ",", "mask", ")", "\n", "", "else", ":", "\n", "        ", "return", "im2tensor", "(", "rgb_back", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2im": [[150, 155], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def tensor2im(image_tensor, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "cent", ")", "*", "factor", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.im2tensor": [[156, 160], ["torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.tensor2vec": [[114, 116], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], ["", "def", "tensor2vec", "(", "vector_tensor", ")", ":", "\n", "    ", "return", "vector_tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.loss.voc_ap": [[117, 149], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.name": [[11, 13], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.initialize": [[14, 17], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "use_gpu", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.forward": [[18, 20], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.get_image_paths": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.optimize_parameters": [[24, 26], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.get_current_visuals": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.get_current_errors": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save": [[33, 35], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save_network": [[37, 41], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.load_network": [[43, 48], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.update_learning_rate": [[49, 51], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save_done": [[55, 58], ["np.save", "np.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.blackPython_mipae.lpips.base_model.BaseModel.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "\n"]]}