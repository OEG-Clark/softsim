{"home.repos.pwc.inspect_result.mjq11302010044_TPGSR.None.main.main": [[10, 19], ["interfaces.super_resolution.TextSR", "interfaces.super_resolution.TextSR.test", "interfaces.super_resolution.TextSR.demo", "interfaces.super_resolution.TextSR.train"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.test", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.demo", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train"], ["def", "main", "(", "config", ",", "args", ",", "opt_TPG", ")", ":", "\n", "    ", "Mission", "=", "TextSR", "(", "config", ",", "args", ",", "opt_TPG", ")", "\n", "\n", "if", "args", ".", "test", ":", "\n", "        ", "Mission", ".", "test", "(", ")", "\n", "", "elif", "args", ".", "demo", ":", "\n", "        ", "Mission", ".", "demo", "(", ")", "\n", "", "else", ":", "\n", "        ", "Mission", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.strLabelConverterForAttention.__init__": [[17, 27], ["alphabet.split", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "sep", ")", ":", "\n", "        ", "self", ".", "_scanned_list", "=", "False", "\n", "self", ".", "_out_of_list", "=", "''", "\n", "self", ".", "_ignore_case", "=", "True", "\n", "self", ".", "sep", "=", "sep", "\n", "self", ".", "alphabet", "=", "alphabet", ".", "split", "(", "sep", ")", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "item", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.strLabelConverterForAttention.scan": [[28, 52], ["range", "tuple", "len", "range", "text.append", "len", "[].lower", "open", "open.write", "open.close", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close"], ["", "", "def", "scan", "(", "self", ",", "text", ")", ":", "\n", "# print(text)", "\n", "        ", "text_tmp", "=", "text", "\n", "text", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "text_tmp", ")", ")", ":", "\n", "            ", "text_result", "=", "''", "\n", "for", "j", "in", "range", "(", "len", "(", "text_tmp", "[", "i", "]", ")", ")", ":", "\n", "                ", "chara", "=", "text_tmp", "[", "i", "]", "[", "j", "]", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "text_tmp", "[", "i", "]", "[", "j", "]", "\n", "if", "chara", "not", "in", "self", ".", "alphabet", ":", "\n", "                    ", "if", "chara", "in", "self", ".", "_out_of_list", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_out_of_list", "+=", "chara", "\n", "file_out_of_list", "=", "open", "(", "\"out_of_list.txt\"", ",", "\"a+\"", ")", "\n", "file_out_of_list", ".", "write", "(", "chara", "+", "\"\\n\"", ")", "\n", "file_out_of_list", ".", "close", "(", ")", "\n", "print", "(", "'\" %s \" is not in alphabet...'", "%", "chara", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "text_result", "+=", "chara", "\n", "", "", "text", ".", "append", "(", "text_result", ")", "\n", "", "text_result", "=", "tuple", "(", "text", ")", "\n", "self", ".", "_scanned_list", "=", "True", "\n", "return", "text_result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.strLabelConverterForAttention.encode": [[53, 78], ["isinstance", "utils_moran.strLabelConverterForAttention.scan", "isinstance", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "utils_moran.strLabelConverterForAttention.encode", "len", "char.lower"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.strLabelConverterForAttention.scan", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode"], ["", "def", "encode", "(", "self", ",", "text", ",", "scanned", "=", "True", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n\n        Args:\n            text (str or list of str): texts to convert.\n\n        Returns:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n        \"\"\"", "\n", "self", ".", "_scanned_list", "=", "scanned", "\n", "if", "not", "self", ".", "_scanned_list", ":", "\n", "            ", "text", "=", "self", ".", "scan", "(", "text", ")", "\n", "\n", "", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "text", "=", "[", "\n", "self", ".", "dict", "[", "char", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "char", "]", "\n", "for", "char", "in", "text", "\n", "]", "\n", "length", "=", "[", "len", "(", "text", ")", "]", "\n", "", "elif", "isinstance", "(", "text", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "length", "=", "[", "len", "(", "s", ")", "for", "s", "in", "text", "]", "\n", "text", "=", "''", ".", "join", "(", "text", ")", "\n", "text", ",", "_", "=", "self", ".", "encode", "(", "text", ")", "\n", "", "return", "(", "torch", ".", "LongTensor", "(", "text", ")", ",", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.strLabelConverterForAttention.decode": [[79, 108], ["length.numel", "range", "t.numel", "t.numel", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "utils_moran.strLabelConverterForAttention.decode", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ")", "\n", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "]", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "LongTensor", "(", "[", "l", "]", ")", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.averager.__init__": [[112, 114], ["utils_moran.averager.reset"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.averager.add": [[115, 125], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.averager.reset": [[126, 129], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.averager.val": [[130, 135], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.loadData": [[136, 143], ["utils_moran.get_torch_version", "v.resize_().copy_", "v.data.resize_().copy_", "v.resize_", "v.data.resize_", "data.size", "data.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.get_torch_version"], ["", "", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "    ", "major", ",", "_", "=", "get_torch_version", "(", ")", "\n", "\n", "if", "major", ">=", "1", ":", "\n", "        ", "v", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "v", ".", "data", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_moran.get_torch_version": [[144, 151], ["str().split", "int", "int", "str"], "function", ["None"], ["", "", "def", "get_torch_version", "(", ")", ":", "\n", "    ", "\"\"\"\n    Find pytorch version and return it as integers\n    for major and minor versions\n    \"\"\"", "\n", "torch_version", "=", "str", "(", "torch", ".", "__version__", ")", ".", "split", "(", "\".\"", ")", "\n", "return", "int", "(", "torch_version", "[", "0", "]", ")", ",", "int", "(", "torch_version", "[", "1", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_regularizers.regularizer_orth": [[16, 42], ["classname.find", "m.weight.data.clone", "torch.mm.size", "torch.mm.permute().contiguous().view", "torch.svd", "torch.svd", "torch.mm", "torch.mm", "torch.mm.view().permute", "torch.mm", "torch.mm", "v.t", "torch.mm.permute().contiguous", "torch.diag", "torch.diag", "torch.mm.view", "torch.mm.permute"], "function", ["None"], ["def", "regularizer_orth", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    # ----------------------------------------\n    # SVD Orthogonal Regularization\n    # ----------------------------------------\n    # Applies regularization to the training by performing the\n    # orthogonalization technique described in the paper\n    # This function is to be called by the torch.nn.Module.apply() method,\n    # which applies svd_orthogonalization() to every layer of the model.\n    # usage: net.apply(regularizer_orth)\n    # ----------------------------------------\n    \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "w", "=", "m", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "c_out", ",", "c_in", ",", "f1", ",", "f2", "=", "w", ".", "size", "(", ")", "\n", "# dtype = m.weight.data.type()", "\n", "w", "=", "w", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "f1", "*", "f2", "*", "c_in", ",", "c_out", ")", "\n", "# self.netG.apply(svd_orthogonalization)", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "w", ")", "\n", "s", "[", "s", ">", "1.5", "]", "=", "s", "[", "s", ">", "1.5", "]", "-", "1e-4", "\n", "s", "[", "s", "<", "0.5", "]", "=", "s", "[", "s", "<", "0.5", "]", "+", "1e-4", "\n", "w", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "u", ",", "torch", ".", "diag", "(", "s", ")", ")", ",", "v", ".", "t", "(", ")", ")", "\n", "m", ".", "weight", ".", "data", "=", "w", ".", "view", "(", "f1", ",", "f2", ",", "c_in", ",", "c_out", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "# .type(dtype)", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_regularizers.regularizer_orth2": [[47, 71], ["classname.find", "m.weight.data.clone", "torch.mm.size", "torch.mm.permute().contiguous().view", "torch.svd", "torch.svd", "s.mean", "torch.mm", "torch.mm", "torch.mm.view().permute", "torch.mm", "torch.mm", "v.t", "torch.mm.permute().contiguous", "torch.diag", "torch.diag", "torch.mm.view", "torch.mm.permute"], "function", ["None"], ["", "", "def", "regularizer_orth2", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    # ----------------------------------------\n    # Applies regularization to the training by performing the\n    # orthogonalization technique described in the paper\n    # This function is to be called by the torch.nn.Module.apply() method,\n    # which applies svd_orthogonalization() to every layer of the model.\n    # usage: net.apply(regularizer_orth2)\n    # ----------------------------------------\n    \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "w", "=", "m", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "c_out", ",", "c_in", ",", "f1", ",", "f2", "=", "w", ".", "size", "(", ")", "\n", "# dtype = m.weight.data.type()", "\n", "w", "=", "w", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "f1", "*", "f2", "*", "c_in", ",", "c_out", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "w", ")", "\n", "s_mean", "=", "s", ".", "mean", "(", ")", "\n", "s", "[", "s", ">", "1.5", "*", "s_mean", "]", "=", "s", "[", "s", ">", "1.5", "*", "s_mean", "]", "-", "1e-4", "\n", "s", "[", "s", "<", "0.5", "*", "s_mean", "]", "=", "s", "[", "s", "<", "0.5", "*", "s_mean", "]", "+", "1e-4", "\n", "w", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "u", ",", "torch", ".", "diag", "(", "s", ")", ")", ",", "v", ".", "t", "(", ")", ")", "\n", "m", ".", "weight", ".", "data", "=", "w", ".", "view", "(", "f1", ",", "f2", ",", "c_in", ",", "c_out", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "# .type(dtype)", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_regularizers.regularizer_clip": [[74, 96], ["m.weight.data.clone", "classname.find", "classname.find", "m.bias.data.clone"], "function", ["None"], ["", "", "def", "regularizer_clip", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    # ----------------------------------------\n    # usage: net.apply(regularizer_clip)\n    # ----------------------------------------\n    \"\"\"", "\n", "eps", "=", "1e-4", "\n", "c_min", "=", "-", "1.5", "\n", "c_max", "=", "1.5", "\n", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "w", "=", "m", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "w", "[", "w", ">", "c_max", "]", "-=", "eps", "\n", "w", "[", "w", "<", "c_min", "]", "+=", "eps", "\n", "m", ".", "weight", ".", "data", "=", "w", "\n", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "b", "=", "m", ".", "bias", ".", "data", ".", "clone", "(", ")", "\n", "b", "[", "b", ">", "c_max", "]", "-=", "eps", "\n", "b", "[", "b", "<", "c_min", "]", "+=", "eps", "\n", "m", ".", "bias", ".", "data", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.strLabelConverter.__init__": [[21, 31], ["enumerate", "alphabet.lower.lower.lower"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "ignore_case", "=", "True", ")", ":", "\n", "        ", "self", ".", "_ignore_case", "=", "ignore_case", "\n", "if", "self", ".", "_ignore_case", ":", "\n", "            ", "alphabet", "=", "alphabet", ".", "lower", "(", ")", "\n", "", "self", ".", "alphabet", "=", "alphabet", "+", "'-'", "# for `-1` index", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "alphabet", ")", ":", "\n", "# NOTE: 0 is reserved for 'blank' required by wrap_ctc", "\n", "            ", "self", ".", "dict", "[", "char", "]", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.strLabelConverter.encode": [[32, 53], ["isinstance", "isinstance", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "utils_crnn.strLabelConverter.encode", "len", "char.lower"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode"], ["", "", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n\n        Args:\n            text (str or list of str): texts to convert.\n\n        Returns:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n        \"\"\"", "\n", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "text", "=", "[", "\n", "self", ".", "dict", "[", "char", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "char", "]", "\n", "for", "char", "in", "text", "\n", "]", "\n", "length", "=", "[", "len", "(", "text", ")", "]", "\n", "", "elif", "isinstance", "(", "text", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "length", "=", "[", "len", "(", "s", ")", "for", "s", "in", "text", "]", "\n", "text", "=", "''", ".", "join", "(", "text", ")", "\n", "text", ",", "_", "=", "self", ".", "encode", "(", "text", ")", "\n", "", "return", "(", "torch", ".", "IntTensor", "(", "text", ")", ",", "torch", ".", "IntTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.strLabelConverter.decode": [[54, 90], ["length.numel", "range", "t.numel", "t.numel", "range", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "utils_crnn.strLabelConverter.decode", "char_list.append", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ",", "raw", "=", "False", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ")", "\n", "if", "raw", ":", "\n", "                ", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "-", "1", "]", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                    ", "if", "t", "[", "i", "]", "!=", "0", "and", "(", "not", "(", "i", ">", "0", "and", "t", "[", "i", "-", "1", "]", "==", "t", "[", "i", "]", ")", ")", ":", "\n", "                        ", "char_list", ".", "append", "(", "self", ".", "alphabet", "[", "t", "[", "i", "]", "-", "1", "]", ")", "\n", "", "", "return", "''", ".", "join", "(", "char_list", ")", "\n", "", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "IntTensor", "(", "[", "l", "]", ")", ",", "raw", "=", "raw", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.averager.__init__": [[95, 97], ["utils_crnn.averager.reset"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.averager.add": [[98, 108], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.averager.reset": [[109, 112], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.averager.val": [[113, 118], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.oneHot": [[120, 131], ["v_length.size", "v_length.max", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "v[].view().long", "v_onehot[].scatter_", "torch.FloatTensor", "torch.FloatTensor", "v[].view"], "function", ["None"], ["", "", "def", "oneHot", "(", "v", ",", "v_length", ",", "nc", ")", ":", "\n", "    ", "batchSize", "=", "v_length", ".", "size", "(", "0", ")", "\n", "maxLength", "=", "v_length", ".", "max", "(", ")", "\n", "v_onehot", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "maxLength", ",", "nc", ")", ".", "fill_", "(", "0", ")", "\n", "acc", "=", "0", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "        ", "length", "=", "v_length", "[", "i", "]", "\n", "label", "=", "v", "[", "acc", ":", "acc", "+", "length", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "v_onehot", "[", "i", ",", ":", "length", "]", ".", "scatter_", "(", "1", ",", "label", ",", "1.0", ")", "\n", "acc", "+=", "length", "\n", "", "return", "v_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.loadData": [[133, 135], ["v.data.resize_().copy_", "v.data.resize_", "data.size"], "function", ["None"], ["", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "    ", "v", ".", "data", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.prettyPrint": [[137, 141], ["print", "print", "str", "v.data.type", "v.size", "v.max", "v.min", "v.mean"], "function", ["None"], ["", "def", "prettyPrint", "(", "v", ")", ":", "\n", "    ", "print", "(", "'Size {0}, Type: {1}'", ".", "format", "(", "str", "(", "v", ".", "size", "(", ")", ")", ",", "v", ".", "data", ".", "type", "(", ")", ")", ")", "\n", "print", "(", "'| Max: %f | Min: %f | Mean: %f'", "%", "(", "v", ".", "max", "(", ")", ".", "data", "[", "0", "]", ",", "v", ".", "min", "(", ")", ".", "data", "[", "0", "]", ",", "\n", "v", ".", "mean", "(", ")", ".", "data", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_crnn.assureRatio": [[143, 150], ["main.size", "torch.UpsamplingBilinear2d", "nn.UpsamplingBilinear2d."], "function", ["None"], ["", "def", "assureRatio", "(", "img", ")", ":", "\n", "    ", "\"\"\"Ensure imgH <= imgW.\"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "if", "h", ">", "w", ":", "\n", "        ", "main", "=", "nn", ".", "UpsamplingBilinear2d", "(", "size", "=", "(", "h", ",", "h", ")", ",", "scale_factor", "=", "None", ")", "\n", "img", "=", "main", "(", "img", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.deleteLayer": [[20, 27], ["list", "model.named_children", "isinstance", "utils_bnorm.deleteLayer"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.deleteLayer"], ["def", "deleteLayer", "(", "model", ",", "layer_type", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    '''", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "layer_type", ")", ":", "\n", "            ", "del", "model", ".", "_modules", "[", "k", "]", "\n", "", "deleteLayer", "(", "m", ",", "layer_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.merge_bn": [[32, 64], ["list", "model.named_children", "utils_bnorm.merge_bn", "m.running_var.clone().add_().pow_", "isinstance", "b.add_().mul_", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "torch.Tensor().zero_().type", "torch.Tensor().zero_().type", "torch.Parameter", "w.mul_", "w.mul_", "isinstance", "b.mul_().add_", "w.type", "m.running_var.clone().add_", "m.running_var.clone().add_().pow_.view().expand_as", "m.running_var.clone().add_().pow_.view().expand_as", "b.add_", "w.mul_", "w.mul_", "torch.Tensor().zero_", "torch.Tensor().zero_", "m.weight.data.view().expand_as", "m.weight.data.view().expand_as", "b.mul_", "m.running_var.clone", "m.running_var.clone().add_().pow_.view", "m.running_var.clone().add_().pow_.view", "torch.Tensor", "torch.Tensor", "w.size", "w.size", "m.weight.data.view", "m.weight.data.view", "w.size", "w.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.merge_bn"], ["", "", "def", "merge_bn", "(", "model", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    merge all 'Conv+BN' (or 'TConv+BN') into 'Conv' (or 'TConv')\n    based on https://github.com/pytorch/pytorch/pull/901\n    '''", "\n", "prev_m", "=", "None", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ")", "and", "(", "isinstance", "(", "prev_m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "prev_m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "prev_m", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "\n", "            ", "w", "=", "prev_m", ".", "weight", ".", "data", "\n", "\n", "if", "prev_m", ".", "bias", "is", "None", ":", "\n", "                ", "zeros", "=", "torch", ".", "Tensor", "(", "prev_m", ".", "out_channels", ")", ".", "zero_", "(", ")", ".", "type", "(", "w", ".", "type", "(", ")", ")", "\n", "prev_m", ".", "bias", "=", "nn", ".", "Parameter", "(", "zeros", ")", "\n", "", "b", "=", "prev_m", ".", "bias", ".", "data", "\n", "\n", "invstd", "=", "m", ".", "running_var", ".", "clone", "(", ")", ".", "add_", "(", "m", ".", "eps", ")", ".", "pow_", "(", "-", "0.5", ")", "\n", "if", "isinstance", "(", "prev_m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "w", ".", "mul_", "(", "invstd", ".", "view", "(", "1", ",", "w", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w", ".", "mul_", "(", "invstd", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "b", ".", "add_", "(", "-", "m", ".", "running_mean", ")", ".", "mul_", "(", "invstd", ")", "\n", "if", "m", ".", "affine", ":", "\n", "                ", "if", "isinstance", "(", "prev_m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                    ", "w", ".", "mul_", "(", "m", ".", "weight", ".", "data", ".", "view", "(", "1", ",", "w", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                    ", "w", ".", "mul_", "(", "m", ".", "weight", ".", "data", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "b", ".", "mul_", "(", "m", ".", "weight", ".", "data", ")", ".", "add_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n", "", "del", "model", ".", "_modules", "[", "k", "]", "\n", "", "prev_m", "=", "m", "\n", "merge_bn", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.add_bn": [[69, 79], ["list", "model.named_children", "utils_bnorm.add_bn", "isinstance", "isinstance", "isinstance", "torch.BatchNorm2d", "nn.BatchNorm2d.weight.data.fill_", "torch.Sequential"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.add_bn"], ["", "", "def", "add_bn", "(", "model", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    '''", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "            ", "b", "=", "nn", ".", "BatchNorm2d", "(", "m", ".", "out_channels", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "b", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "new_m", "=", "nn", ".", "Sequential", "(", "model", ".", "_modules", "[", "k", "]", ",", "b", ")", "\n", "model", ".", "_modules", "[", "k", "]", "=", "new_m", "\n", "", "add_bn", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.tidy_sequential": [[84, 92], ["list", "model.named_children", "isinstance", "utils_bnorm.tidy_sequential", "m.__len__", "m.__getitem__"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_bnorm.tidy_sequential", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__len__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__getitem__"], ["", "", "def", "tidy_sequential", "(", "model", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    '''", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "if", "m", ".", "__len__", "(", ")", "==", "1", ":", "\n", "                ", "model", ".", "_modules", "[", "k", "]", "=", "m", ".", "__getitem__", "(", "0", ")", "\n", "", "", "tidy_sequential", "(", "m", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.is_image_file": [[29, 31], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.get_timestamp": [[33, 35], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imshow": [[37, 45], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "numpy.squeeze", "matplotlib.title", "matplotlib.colorbar"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imshow"], ["", "def", "imshow", "(", "x", ",", "title", "=", "None", ",", "cbar", "=", "False", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "squeeze", "(", "x", ")", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "'gray'", ")", "\n", "if", "title", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "if", "cbar", ":", "\n", "        ", "plt", ".", "colorbar", "(", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.surf": [[47, 58], ["matplotlib.figure", "matplotlib.axes", "numpy.arange", "numpy.arange", "numpy.meshgrid", "plt.axes.plot_surface", "matplotlib.show"], "function", ["None"], ["", "def", "surf", "(", "Z", ",", "cmap", "=", "'rainbow'", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "ax3", "=", "plt", ".", "axes", "(", "projection", "=", "'3d'", ")", "\n", "\n", "w", ",", "h", "=", "Z", ".", "shape", "[", ":", "2", "]", "\n", "xx", "=", "np", ".", "arange", "(", "0", ",", "w", ",", "1", ")", "\n", "yy", "=", "np", ".", "arange", "(", "0", ",", "h", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "xx", ",", "yy", ")", "\n", "ax3", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cmap", ")", "\n", "#ax3.contour(X,Y,Z, zdim='z',offset=-2\uff0ccmap=cmap)", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.get_image_paths": [[67, 72], ["sorted", "utils_image._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image._get_paths_from_images"], ["def", "get_image_paths", "(", "dataroot", ")", ":", "\n", "    ", "paths", "=", "None", "# return None if dataroot is None", "\n", "if", "dataroot", "is", "not", "None", ":", "\n", "        ", "paths", "=", "sorted", "(", "_get_paths_from_images", "(", "dataroot", ")", ")", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image._get_paths_from_images": [[74, 84], ["os.path.isdir", "sorted", "os.walk", "sorted", "utils_image.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.is_image_file"], ["", "def", "_get_paths_from_images", "(", "path", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "path", ")", ",", "'{:s} is not a valid directory'", ".", "format", "(", "path", ")", "\n", "images", "=", "[", "]", "\n", "for", "dirpath", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "path", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "fname", ")", "\n", "images", ".", "append", "(", "img_path", ")", "\n", "", "", "", "assert", "images", ",", "'{:s} has no valid image file'", ".", "format", "(", "path", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.patches_from_image": [[93, 110], ["list", "list", "list.append", "list.append", "patches.append", "numpy.arange", "numpy.arange", "patches.append"], "function", ["None"], ["def", "patches_from_image", "(", "img", ",", "p_size", "=", "512", ",", "p_overlap", "=", "64", ",", "p_max", "=", "800", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "patches", "=", "[", "]", "\n", "if", "w", ">", "p_max", "and", "h", ">", "p_max", ":", "\n", "        ", "w1", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "w", "-", "p_size", ",", "p_size", "-", "p_overlap", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "h1", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "h", "-", "p_size", ",", "p_size", "-", "p_overlap", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "w1", ".", "append", "(", "w", "-", "p_size", ")", "\n", "h1", ".", "append", "(", "h", "-", "p_size", ")", "\n", "# print(w1)", "\n", "# print(h1)", "\n", "for", "i", "in", "w1", ":", "\n", "            ", "for", "j", "in", "h1", ":", "\n", "                ", "patches", ".", "append", "(", "img", "[", "i", ":", "i", "+", "p_size", ",", "j", ":", "j", "+", "p_size", ",", ":", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "patches", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imssave": [[112, 122], ["os.path.splitext", "enumerate", "os.path.basename", "os.path.join", "cv2.imwrite", "os.path.dirname", "str"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite"], ["", "def", "imssave", "(", "imgs", ",", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    imgs: list, N images of size WxHxC\n    \"\"\"", "\n", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "if", "img", ".", "ndim", "==", "3", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "new_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "img_name", "+", "str", "(", "'_{:04d}'", ".", "format", "(", "i", ")", ")", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "new_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.split_imageset": [[124, 143], ["utils_image.get_image_paths", "utils_image.imread_uint", "utils_image.patches_from_image", "utils_image.imssave", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.patches_from_image", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imssave"], ["", "", "def", "split_imageset", "(", "original_dataroot", ",", "taget_dataroot", ",", "n_channels", "=", "3", ",", "p_size", "=", "512", ",", "p_overlap", "=", "96", ",", "p_max", "=", "800", ")", ":", "\n", "    ", "\"\"\"\n    split the large images from original_dataroot into small overlapped images with size (p_size)x(p_size), \n    and save them into taget_dataroot; only the images with larger size than (p_max)x(p_max)\n    will be splitted.\n\n    Args:\n        original_dataroot:\n        taget_dataroot:\n        p_size: size of small images\n        p_overlap: patch size in training is a good choice\n        p_max: images with smaller size than (p_max)x(p_max) keep unchanged.\n    \"\"\"", "\n", "paths", "=", "get_image_paths", "(", "original_dataroot", ")", "\n", "for", "img_path", "in", "paths", ":", "\n", "# img_name, ext = os.path.splitext(os.path.basename(img_path))", "\n", "        ", "img", "=", "imread_uint", "(", "img_path", ",", "n_channels", "=", "n_channels", ")", "\n", "patches", "=", "patches_from_image", "(", "img", ",", "p_size", ",", "p_overlap", ",", "p_max", ")", "\n", "imssave", "(", "patches", ",", "os", ".", "path", ".", "join", "(", "taget_dataroot", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", ")", "\n", "#if original_dataroot == taget_dataroot:", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir": [[153, 156], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdirs": [[158, 164], ["isinstance", "utils_image.mkdir", "utils_image.mkdir"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir_and_rename": [[166, 172], ["os.path.exists", "os.makedirs", "print", "os.rename", "utils_image.get_timestamp"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imread_uint": [[185, 198], ["cv2.imread", "numpy.expand_dims", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["def", "imread_uint", "(", "path", ",", "n_channels", "=", "3", ")", ":", "\n", "#  input: path", "\n", "# output: HxWx3(RGB or GGG), or HxWx1 (G)", "\n", "    ", "if", "n_channels", "==", "1", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "0", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "# HxWx1", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# BGR or G", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "# GGG", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# RGB", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imsave": [[203, 208], ["numpy.squeeze", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite"], ["", "def", "imsave", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite": [[209, 214], ["numpy.squeeze", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite"], ["", "def", "imwrite", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.read_img": [[220, 231], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["", "def", "read_img", "(", "path", ")", ":", "\n", "# read image by cv2", "\n", "# return: Numpy float32, HWC, BGR, [0,1]", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "# some images have 4 channels", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.uint2single": [[249, 252], ["numpy.float32"], "function", ["None"], ["def", "uint2single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single2uint": [[254, 257], ["numpy.uint8", "img.clip"], "function", ["None"], ["", "def", "single2uint", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint8", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "255.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.uint162single": [[259, 262], ["numpy.float32"], "function", ["None"], ["", "def", "uint162single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "65535.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single2uint16": [[264, 267], ["numpy.uint16", "img.clip"], "function", ["None"], ["", "def", "single2uint16", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint16", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "65535.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.uint2tensor4": [[275, 279], ["torch.from_numpy().permute().float().div().unsqueeze", "numpy.expand_dims", "torch.from_numpy().permute().float().div", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor4", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.uint2tensor3": [[282, 286], ["torch.from_numpy().permute().float().div", "numpy.expand_dims", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor3", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.tensor2uint": [[289, 294], ["np.transpose.data.squeeze().float().clamp_().cpu().numpy", "numpy.uint8", "numpy.transpose", "np.transpose.data.squeeze().float().clamp_().cpu", "np.transpose.data.squeeze().float().clamp_", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2uint", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "return", "np", ".", "uint8", "(", "(", "img", "*", "255.0", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single2tensor3": [[302, 304], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor3", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single2tensor4": [[307, 309], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.tensor2single": [[312, 318], ["np.transpose.data.squeeze().float().cpu().numpy", "numpy.transpose", "np.transpose.data.squeeze().float().cpu", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2single", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.tensor2single3": [[320, 327], ["np.expand_dims.data.squeeze().float().cpu().numpy", "numpy.transpose", "np.expand_dims.data.squeeze().float().cpu", "numpy.expand_dims", "np.expand_dims.data.squeeze().float", "np.expand_dims.data.squeeze"], "function", ["None"], ["", "def", "tensor2single3", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single2tensor5": [[329, 331], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor5", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single32tensor5": [[333, 335], ["torch.from_numpy().float().unsqueeze().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single32tensor5", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.single42tensor4": [[337, 339], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single42tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.tensor2img": [[342, 367], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array of BGR channel order\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# squeeze first, then clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.uint8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img": [[380, 399], ["numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90"], "function", ["None"], ["def", "augment_img", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ")", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "img", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4": [[401, 420], ["img.rot90().flip", "img.flip", "img.rot90", "img.rot90", "img.rot90().flip", "img.rot90", "img.rot90", "img.rot90", "img.rot90().flip", "img.rot90"], "function", ["None"], ["", "", "def", "augment_img_tensor4", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "1", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "3", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "2", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "1", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "2", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "3", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor": [[422, 439], ["img.size", "img.data.cpu().numpy", "utils_image.augment_img", "torch.from_numpy", "img_tensor.permute.type_as", "len", "numpy.transpose", "numpy.ascontiguousarray", "len", "img_tensor.permute.permute", "img.data.cpu", "len", "numpy.transpose", "len", "img_tensor.permute.permute"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img"], ["", "", "def", "augment_img_tensor", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "img_size", "=", "img", ".", "size", "(", ")", "\n", "img_np", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "2", ",", "3", ",", "1", ",", "0", ")", ")", "\n", "", "img_np", "=", "augment_img", "(", "img_np", ",", "mode", "=", "mode", ")", "\n", "img_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img_np", ")", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "img_tensor", ".", "type_as", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_np3": [[441, 467], ["img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose"], "function", ["None"], ["", "def", "augment_img_np3", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "img", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_imgs": [[469, 485], ["utils_image.augment_imgs._augment"], "function", ["None"], ["", "", "def", "augment_imgs", "(", "img_list", ",", "hflip", "=", "True", ",", "rot", "=", "True", ")", ":", "\n", "# horizontal flip OR rotate", "\n", "    ", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot90", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "img", ")", ":", "\n", "        ", "if", "hflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "if", "vflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "if", "rot90", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "return", "img", "\n", "\n", "", "return", "[", "_augment", "(", "img", ")", "for", "img", "in", "img_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.modcrop": [[494, 508], ["numpy.copy", "ValueError"], "function", ["None"], ["def", "modcrop", "(", "img_in", ",", "scale", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "H", ",", "W", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", "]", "\n", "", "elif", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong img ndim: [{:d}].'", ".", "format", "(", "img", ".", "ndim", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.shave": [[510, 516], ["numpy.copy"], "function", ["None"], ["", "def", "shave", "(", "img_in", ",", "border", "=", "0", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "img", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.rgb2ycbcr": [[529, 551], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.ycbcr2rgb": [[553, 571], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], ["", "def", "ycbcr2rgb", "(", "img", ")", ":", "\n", "    ", "'''same as matlab ycbcr2rgb\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "0.00456621", ",", "0.00456621", ",", "0.00456621", "]", ",", "[", "0", ",", "-", "0.00153632", ",", "0.00791071", "]", ",", "\n", "[", "0.00625893", ",", "-", "0.00318811", ",", "0", "]", "]", ")", "*", "255.0", "+", "[", "-", "222.921", ",", "135.576", ",", "-", "276.836", "]", "\n", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.bgr2ycbcr": [[573, 595], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''bgr version of rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.channel_convert": [[597, 609], ["cv2.cvtColor", "numpy.expand_dims", "utils_image.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.bgr2ycbcr"], ["", "def", "channel_convert", "(", "in_c", ",", "tar_type", ",", "img_list", ")", ":", "\n", "# conversion among BGR, gray and y", "\n", "    ", "if", "in_c", "==", "3", "and", "tar_type", "==", "'gray'", ":", "# BGR to gray", "\n", "        ", "gray_list", "=", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "gray_list", "]", "\n", "", "elif", "in_c", "==", "3", "and", "tar_type", "==", "'y'", ":", "# BGR to y", "\n", "        ", "y_list", "=", "[", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "y_list", "]", "\n", "", "elif", "in_c", "==", "1", "and", "tar_type", "==", "'RGB'", ":", "# gray/y to BGR", "\n", "        ", "return", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "for", "img", "in", "img_list", "]", "\n", "", "else", ":", "\n", "        ", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_psnr": [[621, 637], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "ValueError", "float", "math.log10", "math.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "    ", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_ssim": [[642, 667], ["ValueError", "utils_image.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "utils_image.ssim", "utils_image.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", "[", ":", ",", ":", ",", "i", "]", ",", "img2", "[", ":", ",", ":", ",", "i", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.ssim": [[669, 690], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.cubic": [[700, 706], ["torch.abs"], "function", ["None"], ["def", "cubic", "(", "x", ")", ":", "\n", "    ", "absx", "=", "torch", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "absx", "**", "2", "\n", "absx3", "=", "absx", "**", "3", "\n", "return", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", "*", "(", "(", "absx", "<=", "1", ")", ".", "type_as", "(", "absx", ")", ")", "+", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", "*", "(", "(", "(", "absx", ">", "1", ")", "*", "(", "absx", "<=", "2", ")", ")", ".", "type_as", "(", "absx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_weights_indices": [[708, 761], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "utils_image.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "utils_image.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.cubic", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.cubic"], ["", "def", "calculate_weights_indices", "(", "in_length", ",", "out_length", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "    ", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "# Use a modified kernel to simultaneously interpolate and antialias- larger kernel width", "\n", "        ", "kernel_width", "=", "kernel_width", "/", "scale", "\n", "\n", "# Output-space coordinates", "\n", "", "x", "=", "torch", ".", "linspace", "(", "1", ",", "out_length", ",", "out_length", ")", "\n", "\n", "# Input-space coordinates. Calculate the inverse mapping such that 0.5", "\n", "# in output space maps to 0.5 in input space, and 0.5+scale in output", "\n", "# space maps to 1.5 in input space.", "\n", "u", "=", "x", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1", "/", "scale", ")", "\n", "\n", "# What is the left-most pixel that can be involved in the computation?", "\n", "left", "=", "torch", ".", "floor", "(", "u", "-", "kernel_width", "/", "2", ")", "\n", "\n", "# What is the maximum number of pixels that can be involved in the", "\n", "# computation?  Note: it's OK to use an extra pixel here; if the", "\n", "# corresponding weights are all zero, it will be eliminated at the end", "\n", "# of this function.", "\n", "P", "=", "math", ".", "ceil", "(", "kernel_width", ")", "+", "2", "\n", "\n", "# The indices of the input pixels involved in computing the k-th output", "\n", "# pixel are in row k of the indices matrix.", "\n", "indices", "=", "left", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "+", "torch", ".", "linspace", "(", "0", ",", "P", "-", "1", ",", "P", ")", ".", "view", "(", "\n", "1", ",", "P", ")", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# The weights used to compute the k-th output pixel are in row k of the", "\n", "# weights matrix.", "\n", "distance_to_center", "=", "u", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "-", "indices", "\n", "# apply cubic kernel", "\n", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "        ", "weights", "=", "scale", "*", "cubic", "(", "distance_to_center", "*", "scale", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "cubic", "(", "distance_to_center", ")", "\n", "# Normalize the weights matrix so that each row sums to 1.", "\n", "", "weights_sum", "=", "torch", ".", "sum", "(", "weights", ",", "1", ")", ".", "view", "(", "out_length", ",", "1", ")", "\n", "weights", "=", "weights", "/", "weights_sum", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# If a column in weights is all zero, get rid of it. only consider the first and last column.", "\n", "weights_zero_tmp", "=", "torch", ".", "sum", "(", "(", "weights", "==", "0", ")", ",", "0", ")", "\n", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "0", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "-", "1", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "", "weights", "=", "weights", ".", "contiguous", "(", ")", "\n", "indices", "=", "indices", ".", "contiguous", "(", ")", "\n", "sym_len_s", "=", "-", "indices", ".", "min", "(", ")", "+", "1", "\n", "sym_len_e", "=", "indices", ".", "max", "(", ")", "-", "in_length", "\n", "indices", "=", "indices", "+", "sym_len_s", "-", "1", "\n", "return", "weights", ",", "indices", ",", "int", "(", "sym_len_s", ")", ",", "int", "(", "sym_len_e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imresize": [[766, 834], ["img.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "img.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "img.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: pytorch tensor, CHW or HW [0,1]", "\n", "# output: CHW or HW [0,1] w/o round", "\n", "    ", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "0", ")", "\n", "", "in_C", ",", "in_H", ",", "in_W", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", ":", "sym_len_Hs", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", "-", "sym_len_He", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "j", ",", "i", ",", ":", "]", "=", "img_aug", "[", "j", ",", "idx", ":", "idx", "+", "kernel_width", ",", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", ":", "sym_len_Ws", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", "-", "sym_len_We", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "out_W", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", "j", ",", ":", ",", "i", "]", "=", "out_1_aug", "[", "j", ",", ":", ",", "idx", ":", "idx", "+", "kernel_width", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "", "return", "out_2", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imresize_np": [[839, 910], ["torch.from_numpy", "torch.from_numpy.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "torch.from_numpy.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "torch.from_numpy.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize_np", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: Numpy, HWC or HW [0,1]", "\n", "# output: HWC or HW [0,1] w/o round", "\n", "    ", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "2", ")", "\n", "\n", "", "in_H", ",", "in_W", ",", "in_C", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ",", "in_C", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", "sym_len_Hs", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", "-", "sym_len_He", ":", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "i", ",", ":", ",", "j", "]", "=", "img_aug", "[", "idx", ":", "idx", "+", "kernel_width", ",", ":", ",", "j", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ",", "in_C", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", "sym_len_Ws", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", "-", "sym_len_We", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "out_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", ":", ",", "i", ",", "j", "]", "=", "out_1_aug", "[", ":", ",", "idx", ":", "idx", "+", "kernel_width", ",", "j", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "\n", "", "return", "out_2", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics._normalize_text": [[15, 18], ["text.lower", "filter"], "function", ["None"], ["def", "_normalize_text", "(", "text", ")", ":", "\n", "    ", "text", "=", "''", ".", "join", "(", "filter", "(", "lambda", "x", ":", "x", "in", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", ",", "text", ")", ")", "\n", "return", "text", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_aster": [[20, 69], ["utils.to_numpy.size", "len", "utils.to_numpy", "utils.to_numpy", "range", "range", "dataset.char2id.keys", "range", "pred_list.append", "range", "targ_list.append", "utils.to_numpy.dim", "utils.to_numpy.dim", "utils.to_numpy.size", "utils.to_numpy.size", "metrics._normalize_text", "metrics._normalize_text", "targ_list_i.append", "pred_list_i.append", "IPython.embed"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text"], ["", "def", "get_string_aster", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "# label_seq", "\n", "    ", "assert", "output", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "2", "\n", "\n", "end_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "EOS", "]", "\n", "unknown_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "UNKNOWN", "]", "\n", "num_samples", ",", "max_len_labels", "=", "output", ".", "size", "(", ")", "\n", "num_classes", "=", "len", "(", "dataset", ".", "char2id", ".", "keys", "(", ")", ")", "\n", "assert", "num_samples", "==", "target", ".", "size", "(", "0", ")", "and", "max_len_labels", "==", "target", ".", "size", "(", "1", ")", "\n", "output", "=", "to_numpy", "(", "output", ")", "\n", "target", "=", "to_numpy", "(", "target", ")", "\n", "\n", "# list of char list", "\n", "pred_list", ",", "targ_list", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "pred_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "            ", "if", "output", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "                ", "if", "output", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "                    ", "try", ":", "\n", "                        ", "pred_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "output", "[", "i", ",", "j", "]", "]", ")", "\n", "", "except", ":", "\n", "                        ", "embed", "(", "header", "=", "'problem'", ")", "\n", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "pred_list", ".", "append", "(", "pred_list_i", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "targ_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "            ", "if", "target", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "                ", "if", "target", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "                    ", "targ_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "target", "[", "i", ",", "j", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "targ_list", ".", "append", "(", "targ_list_i", ")", "\n", "\n", "# char list to string", "\n", "# if dataset.lowercase:", "\n", "", "if", "True", ":", "\n", "# pred_list = [''.join(pred).lower() for pred in pred_list]", "\n", "# targ_list = [''.join(targ).lower() for targ in targ_list]", "\n", "        ", "pred_list", "=", "[", "_normalize_text", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "_normalize_text", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "", "else", ":", "\n", "        ", "pred_list", "=", "[", "''", ".", "join", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "''", ".", "join", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "\n", "", "return", "pred_list", ",", "targ_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_crnn": [[71, 89], ["outputs_.permute().contiguous", "predict_result.append", "outputs_.permute", "torch.max", "torch.max"], "function", ["None"], ["", "def", "get_string_crnn", "(", "outputs_", ",", "alphabet", "=", "'-0123456789abcdefghijklmnopqrstuvwxyz'", ")", ":", "\n", "    ", "outputs", "=", "outputs_", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "predict_result", "=", "[", "]", "\n", "for", "output", "in", "outputs", ":", "\n", "        ", "max_index", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "\n", "out_str", "=", "\"\"", "\n", "last", "=", "\"\"", "\n", "for", "i", "in", "max_index", ":", "\n", "            ", "if", "alphabet", "[", "i", "]", "!=", "last", ":", "\n", "                ", "if", "i", "!=", "0", ":", "\n", "                    ", "out_str", "+=", "alphabet", "[", "i", "]", "\n", "last", "=", "alphabet", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "last", "=", "\"\"", "\n", "\n", "", "", "", "predict_result", ".", "append", "(", "out_str", ")", "\n", "", "return", "predict_result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics._lexicon_search": [[91, 98], ["numpy.asarray", "numpy.argmin", "np.asarray.append", "editdistance.eval", "metrics._normalize_text", "metrics._normalize_text"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text"], ["", "def", "_lexicon_search", "(", "lexicon", ",", "word", ")", ":", "\n", "    ", "edit_distances", "=", "[", "]", "\n", "for", "lex_word", "in", "lexicon", ":", "\n", "        ", "edit_distances", ".", "append", "(", "editdistance", ".", "eval", "(", "_normalize_text", "(", "lex_word", ")", ",", "_normalize_text", "(", "word", ")", ")", ")", "\n", "", "edit_distances", "=", "np", ".", "asarray", "(", "edit_distances", ",", "dtype", "=", "np", ".", "int", ")", "\n", "argmin", "=", "np", ".", "argmin", "(", "edit_distances", ")", "\n", "return", "lexicon", "[", "argmin", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.Accuracy": [[100, 106], ["metrics.get_string_aster", "len", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_aster"], ["", "def", "Accuracy", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.Accuracy_with_lexicon": [[108, 145], ["metrics.get_string_aster", "accuracys.append", "len", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "zip", "sum", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "zip", "zip", "sum", "zip", "zip", "sum", "zip", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_aster", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search"], ["", "def", "Accuracy_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "accuracys", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "return", "accuracys", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.EditDistance": [[147, 153], ["metrics.get_string_aster", "sum", "editdistance.eval", "zip"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_aster", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "def", "EditDistance", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "eds", "=", "sum", "(", "ed_list", ")", "\n", "return", "eds", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.EditDistance_with_lexicon": [[155, 192], ["metrics.get_string_aster", "sum", "eds.append", "editdistance.eval", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "zip", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "zip", "zip", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_aster", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "def", "EditDistance_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "eds", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "", "return", "eds", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.RecPostProcess": [[194, 207], ["metrics.get_string_aster", "output.size", "utils.to_numpy", "enumerate", "min", "math.exp", "score_list.append", "len", "sum", "map"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.metrics.get_string_aster", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy"], ["", "def", "RecPostProcess", "(", "output", ",", "target", ",", "score", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "max_len_labels", "=", "output", ".", "size", "(", "1", ")", "\n", "score_list", "=", "[", "]", "\n", "\n", "score", "=", "to_numpy", "(", "score", ")", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "pred_list", ")", ":", "\n", "        ", "len_pred", "=", "len", "(", "pred", ")", "+", "1", "# eos should be included", "\n", "len_pred", "=", "min", "(", "max_len_labels", ",", "len_pred", ")", "# maybe the predicted string don't include a eos.", "\n", "score_i", "=", "score", "[", "i", ",", ":", "len_pred", "]", "\n", "score_i", "=", "math", ".", "exp", "(", "sum", "(", "map", "(", "math", ".", "log", ",", "score_i", ")", ")", ")", "\n", "score_list", ".", "append", "(", "score_i", ")", "\n", "", "return", "pred_list", ",", "targ_list", ",", "score_list", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_receptivefield.outFromIn": [[20, 38], ["math.ceil", "math.floor", "math.floor"], "function", ["None"], ["def", "outFromIn", "(", "conv", ",", "layerIn", ")", ":", "\n", "    ", "n_in", "=", "layerIn", "[", "0", "]", "\n", "j_in", "=", "layerIn", "[", "1", "]", "\n", "r_in", "=", "layerIn", "[", "2", "]", "\n", "start_in", "=", "layerIn", "[", "3", "]", "\n", "k", "=", "conv", "[", "0", "]", "\n", "s", "=", "conv", "[", "1", "]", "\n", "p", "=", "conv", "[", "2", "]", "\n", "\n", "n_out", "=", "math", ".", "floor", "(", "(", "n_in", "-", "k", "+", "2", "*", "p", ")", "/", "s", ")", "+", "1", "\n", "actualP", "=", "(", "n_out", "-", "1", ")", "*", "s", "-", "n_in", "+", "k", "\n", "pR", "=", "math", ".", "ceil", "(", "actualP", "/", "2", ")", "\n", "pL", "=", "math", ".", "floor", "(", "actualP", "/", "2", ")", "\n", "\n", "j_out", "=", "j_in", "*", "s", "\n", "r_out", "=", "r_in", "+", "(", "k", "-", "1", ")", "*", "j_in", "\n", "start_out", "=", "start_in", "+", "(", "(", "k", "-", "1", ")", "/", "2", "-", "pL", ")", "*", "j_in", "\n", "return", "n_out", ",", "j_out", ",", "r_out", ",", "start_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_receptivefield.printLayer": [[39, 42], ["print", "print"], "function", ["None"], ["", "def", "printLayer", "(", "layer", ",", "layer_name", ")", ":", "\n", "    ", "print", "(", "layer_name", "+", "\":\"", ")", "\n", "print", "(", "\" n features: %s  jump: %s  receptive size: %s  start: %s \"", "%", "(", "layer", "[", "0", "]", ",", "layer", "[", "1", "]", ",", "layer", "[", "2", "]", ",", "layer", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.SSIM.__init__": [[54, 60], ["super().__init__", "ssim_psnr.create_window"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.SSIM.forward": [[61, 79], ["img1.size", "ssim_psnr._ssim", "ssim_psnr.create_window", "window.cuda.cuda.type_as", "ssim_psnr.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr._ssim", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "img1", "=", "img1", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.calculate_psnr": [[9, 16], ["float", "torch.log10", "torch.log10", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 1]", "\n", "\n", "    ", "mse", "=", "(", "(", "img1", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "*", "255", "-", "img2", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "*", "255", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "torch", ".", "log10", "(", "255.0", "/", "torch", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.gaussian": [[18, 21], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["", "def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.create_window": [[23, 28], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "ssim_psnr.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr._ssim": [[30, 51], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.ssim": [[81, 90], ["img1.size", "ssim_psnr.create_window", "window.cuda.type_as", "ssim_psnr._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr.create_window", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.ssim_psnr._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.main": [[12, 66], ["sorted", "enumerate", "print", "glob.glob", "print", "print", "calculate_PSNR_SSIM.calculate_psnr", "calculate_PSNR_SSIM.calculate_ssim", "print", "PSNR_all.append", "SSIM_all.append", "os.path.splitext", "cv2.imread", "cv2.imread", "calculate_PSNR_SSIM.bgr2ycbcr", "calculate_PSNR_SSIM.bgr2ycbcr", "os.path.basename", "os.path.join", "ValueError", "sum", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.calculate_ssim", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.bgr2ycbcr", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.bgr2ycbcr"], ["def", "main", "(", ")", ":", "\n", "# Configurations", "\n", "\n", "# GT - Ground-truth;", "\n", "# Gen: Generated / Restored / Recovered images", "\n", "    ", "folder_GT", "=", "'/mnt/SSD/xtwang/BasicSR_datasets/val_set5/Set5'", "\n", "folder_Gen", "=", "'/home/xtwang/Projects/BasicSR/results/RRDB_PSNR_x4/set5'", "\n", "\n", "crop_border", "=", "4", "\n", "suffix", "=", "''", "# suffix for Gen images", "\n", "test_Y", "=", "False", "# True: test Y channel only; False: test RGB channels", "\n", "\n", "PSNR_all", "=", "[", "]", "\n", "SSIM_all", "=", "[", "]", "\n", "img_list", "=", "sorted", "(", "glob", ".", "glob", "(", "folder_GT", "+", "'/*'", ")", ")", "\n", "\n", "if", "test_Y", ":", "\n", "        ", "print", "(", "'Testing Y channel.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Testing RGB channels.'", ")", "\n", "\n", "", "for", "i", ",", "img_path", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "base_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "im_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "/", "255.", "\n", "im_Gen", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "folder_Gen", ",", "base_name", "+", "suffix", "+", "'.png'", ")", ")", "/", "255.", "\n", "\n", "if", "test_Y", "and", "im_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "# evaluate on Y channel in YCbCr color space", "\n", "            ", "im_GT_in", "=", "bgr2ycbcr", "(", "im_GT", ")", "\n", "im_Gen_in", "=", "bgr2ycbcr", "(", "im_Gen", ")", "\n", "", "else", ":", "\n", "            ", "im_GT_in", "=", "im_GT", "\n", "im_Gen_in", "=", "im_Gen", "\n", "\n", "# crop borders", "\n", "", "if", "im_GT_in", ".", "ndim", "==", "3", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "", "elif", "im_GT_in", ".", "ndim", "==", "2", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong image dimension: {}. Should be 2 or 3.'", ".", "format", "(", "im_GT_in", ".", "ndim", ")", ")", "\n", "\n", "# calculate PSNR and SSIM", "\n", "", "PSNR", "=", "calculate_psnr", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "\n", "SSIM", "=", "calculate_ssim", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "print", "(", "'{:3d} - {:25}. \\tPSNR: {:.6f} dB, \\tSSIM: {:.6f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "base_name", ",", "PSNR", ",", "SSIM", ")", ")", "\n", "PSNR_all", ".", "append", "(", "PSNR", ")", "\n", "SSIM_all", ".", "append", "(", "SSIM", ")", "\n", "", "print", "(", "'Average: PSNR: {:.6f} dB, SSIM: {:.6f}'", ".", "format", "(", "\n", "sum", "(", "PSNR_all", ")", "/", "len", "(", "PSNR_all", ")", ",", "\n", "sum", "(", "SSIM_all", ")", "/", "len", "(", "SSIM_all", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.calculate_psnr": [[68, 76], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim": [[78, 99], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.calculate_ssim": [[101, 120], ["ValueError", "calculate_PSNR_SSIM.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "calculate_PSNR_SSIM.ssim", "calculate_PSNR_SSIM.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.bgr2ycbcr": [[122, 144], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.logger_print.__init__": [[57, 60], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_path", "=", "\"default.log\"", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "log_path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.logger_print.write": [[61, 64], ["utils_logger.logger_print.terminal.write", "utils_logger.logger_print.log.write"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "# write the message", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.logger_print.flush": [[65, 67], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log": [[16, 18], ["print", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "log", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S:\"", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.logger_info": [[27, 47], ["logging.getLogger", "logging.getLogger.hasHandlers", "print", "print", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "logger_info", "(", "logger_name", ",", "log_path", "=", "'default_logger.log'", ")", ":", "\n", "    ", "''' set up logger\n    modified by Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "log", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "if", "log", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "print", "(", "'LogHandlers exist!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'LogHandlers setup!'", ")", "\n", "level", "=", "logging", ".", "INFO", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d : %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_path", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "setLevel", "(", "level", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "# print(len(log.handlers))", "\n", "\n", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.get_vocabulary": [[7, 28], ["list.append", "list.append", "list.append", "list", "list", "list", "KeyError"], "function", ["None"], ["    ", "'''\n    voc_type: str: one of 'LOWERCASE', 'ALLCASES', 'ALLCASES_SYMBOLS'\n    '''", "\n", "voc", "=", "None", "\n", "types", "=", "[", "'digit'", ",", "'lower'", ",", "'upper'", ",", "'all'", "]", "\n", "if", "voc_type", "==", "'digit'", ":", "\n", "        ", "voc", "=", "list", "(", "string", ".", "digits", ")", "\n", "", "elif", "voc_type", "==", "'lower'", ":", "\n", "      ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ")", "\n", "", "elif", "voc_type", "==", "'upper'", ":", "\n", "        ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", "\n", "", "elif", "voc_type", "==", "'all'", ":", "\n", "        ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", "+", "string", ".", "punctuation", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'voc_type Error'", ")", "\n", "\n", "# update the voc with specifical chars", "\n", "", "voc", ".", "append", "(", "EOS", ")", "\n", "voc", ".", "append", "(", "PADDING", ")", "\n", "voc", ".", "append", "(", "UNKNOWN", ")", "\n", "\n", "return", "voc", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.char2id": [[30, 32], ["dict", "zip", "range", "len"], "function", ["None"], ["\n", "## param voc: the list of vocabulary", "\n", "", "def", "char2id", "(", "voc", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.id2char": [[33, 35], ["dict", "zip", "range", "len"], "function", ["None"], ["    ", "return", "dict", "(", "zip", "(", "voc", ",", "range", "(", "len", "(", "voc", ")", ")", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.labels2strs": [[36, 57], ["to_numpy", "range", "labels.unsqueeze.ndimension", "labels.unsqueeze.unsqueeze", "labels.unsqueeze.dim", "strings.append", "string.append"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy"], ["", "def", "id2char", "(", "voc", ")", ":", "\n", "    ", "return", "dict", "(", "zip", "(", "range", "(", "len", "(", "voc", ")", ")", ",", "voc", ")", ")", "\n", "\n", "\n", "", "def", "labels2strs", "(", "labels", ",", "id2char", ",", "char2id", ")", ":", "\n", "# labels: batch_size x len_seq", "\n", "    ", "if", "labels", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "labels", "=", "labels", ".", "unsqueeze", "(", "0", ")", "\n", "", "assert", "labels", ".", "dim", "(", ")", "==", "2", "\n", "labels", "=", "to_numpy", "(", "labels", ")", "\n", "strings", "=", "[", "]", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "label", "=", "labels", "[", "i", "]", "\n", "string", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "            ", "if", "l", "==", "char2id", "[", "'EOS'", "]", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "string", ".", "append", "(", "id2char", "[", "l", "]", ")", "\n", "", "", "string", "=", "''", ".", "join", "(", "string", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.to_numpy": [[63, 70], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", ".", "__module__", "!=", "'numpy'", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.to_torch": [[72, 79], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], ["", "def", "to_torch", "(", "ndarray", ")", ":", "\n", "    ", "if", "type", "(", "ndarray", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "ndarray", ")", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n", "", "return", "ndarray", "\n", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.get_uperleft_denominator": [[21, 32], ["utils_deblur.psf2otf", "numpy.expand_dims", "numpy.expand_dims", "numpy.fft.fft2", "numpy.abs", "numpy.conj"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.psf2otf"], ["def", "get_uperleft_denominator", "(", "img", ",", "kernel", ")", ":", "\n", "    ", "'''\n    img: HxWxC\n    kernel: hxw\n    denominator: HxWx1\n    upperleft: HxWxC\n    '''", "\n", "V", "=", "psf2otf", "(", "kernel", ",", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "denominator", "=", "np", ".", "expand_dims", "(", "np", ".", "abs", "(", "V", ")", "**", "2", ",", "axis", "=", "2", ")", "\n", "upperleft", "=", "np", ".", "expand_dims", "(", "np", ".", "conj", "(", "V", ")", ",", "axis", "=", "2", ")", "*", "np", ".", "fft", ".", "fft2", "(", "img", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "return", "upperleft", ",", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.get_uperleft_denominator_pytorch": [[34, 45], ["utils_deblur.p2o", "utils_deblur.cmul", "utils_deblur.cconj", "utils_deblur.rfft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.p2o", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cmul", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cconj", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.rfft"], ["", "def", "get_uperleft_denominator_pytorch", "(", "img", ",", "kernel", ")", ":", "\n", "    ", "'''\n    img: NxCxHxW\n    kernel: Nx1xhxw\n    denominator: Nx1xHxW\n    upperleft: NxCxHxWx2\n    '''", "\n", "V", "=", "p2o", "(", "kernel", ",", "img", ".", "shape", "[", "-", "2", ":", "]", ")", "# Nx1xHxWx2", "\n", "denominator", "=", "V", "[", "...", ",", "0", "]", "**", "2", "+", "V", "[", "...", ",", "1", "]", "**", "2", "# Nx1xHxW", "\n", "upperleft", "=", "cmul", "(", "cconj", "(", "V", ")", ",", "rfft", "(", "img", ")", ")", "# Nx1xHxWx2 * NxCxHxWx2", "\n", "return", "upperleft", ",", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.c2c": [[47, 49], ["torch.from_numpy", "numpy.stack", "numpy.float32", "numpy.float32"], "function", ["None"], ["", "def", "c2c", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "[", "np", ".", "float32", "(", "x", ".", "real", ")", ",", "np", ".", "float32", "(", "x", ".", "imag", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.r2c": [[51, 53], ["torch.stack", "torch.zeros_like"], "function", ["None"], ["", "def", "r2c", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "stack", "(", "[", "x", ",", "torch", ".", "zeros_like", "(", "x", ")", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.cdiv": [[55, 60], ["torch.stack"], "function", ["None"], ["", "def", "cdiv", "(", "x", ",", "y", ")", ":", "\n", "    ", "a", ",", "b", "=", "x", "[", "...", ",", "0", "]", ",", "x", "[", "...", ",", "1", "]", "\n", "c", ",", "d", "=", "y", "[", "...", ",", "0", "]", ",", "y", "[", "...", ",", "1", "]", "\n", "cd2", "=", "c", "**", "2", "+", "d", "**", "2", "\n", "return", "torch", ".", "stack", "(", "[", "(", "a", "*", "c", "+", "b", "*", "d", ")", "/", "cd2", ",", "(", "b", "*", "c", "-", "a", "*", "d", ")", "/", "cd2", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.cabs": [[62, 64], ["torch.pow"], "function", ["None"], ["", "def", "cabs", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "pow", "(", "x", "[", "...", ",", "0", "]", "**", "2", "+", "x", "[", "...", ",", "1", "]", "**", "2", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.cmul": [[66, 75], ["torch.stack"], "function", ["None"], ["", "def", "cmul", "(", "t1", ",", "t2", ")", ":", "\n", "    ", "'''\n    complex multiplication\n    t1: NxCxHxWx2\n    output: NxCxHxWx2\n    '''", "\n", "real1", ",", "imag1", "=", "t1", "[", "...", ",", "0", "]", ",", "t1", "[", "...", ",", "1", "]", "\n", "real2", ",", "imag2", "=", "t2", "[", "...", ",", "0", "]", ",", "t2", "[", "...", ",", "1", "]", "\n", "return", "torch", ".", "stack", "(", "[", "real1", "*", "real2", "-", "imag1", "*", "imag2", ",", "real1", "*", "imag2", "+", "imag1", "*", "real2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.cconj": [[77, 86], ["t.clone"], "function", ["None"], ["", "def", "cconj", "(", "t", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "'''\n    # complex's conjugation\n    t: NxCxHxWx2\n    output: NxCxHxWx2\n    '''", "\n", "c", "=", "t", ".", "clone", "(", ")", "if", "not", "inplace", "else", "t", "\n", "c", "[", "...", ",", "1", "]", "*=", "-", "1", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.rfft": [[88, 90], ["torch.rfft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.rfft"], ["", "def", "rfft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "rfft", "(", "t", ",", "2", ",", "onesided", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.irfft": [[92, 94], ["torch.irfft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.irfft"], ["", "def", "irfft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "irfft", "(", "t", ",", "2", ",", "onesided", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fft": [[96, 98], ["torch.fft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.fft"], ["", "def", "fft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "fft", "(", "t", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.ifft": [[100, 102], ["torch.ifft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.ifft"], ["", "def", "ifft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "ifft", "(", "t", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.p2o": [[104, 118], ["torch.zeros().type_as", "otf[].copy_", "enumerate", "torch.rfft", "torch.sum", "torch.tensor().type_as", "torch.roll", "torch.zeros", "torch.tensor().type_as", "torch.log2", "torch.tensor", "int", "torch.tensor().type_as", "torch.abs", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.rfft"], ["", "def", "p2o", "(", "psf", ",", "shape", ")", ":", "\n", "    ", "'''\n    # psf: NxCxhxw\n    # shape: [H,W]\n    # otf: NxCxHxWx2\n    '''", "\n", "otf", "=", "torch", ".", "zeros", "(", "psf", ".", "shape", "[", ":", "-", "2", "]", "+", "shape", ")", ".", "type_as", "(", "psf", ")", "\n", "otf", "[", "...", ",", ":", "psf", ".", "shape", "[", "2", "]", ",", ":", "psf", ".", "shape", "[", "3", "]", "]", ".", "copy_", "(", "psf", ")", "\n", "for", "axis", ",", "axis_size", "in", "enumerate", "(", "psf", ".", "shape", "[", "2", ":", "]", ")", ":", "\n", "        ", "otf", "=", "torch", ".", "roll", "(", "otf", ",", "-", "int", "(", "axis_size", "/", "2", ")", ",", "dims", "=", "axis", "+", "2", ")", "\n", "", "otf", "=", "torch", ".", "rfft", "(", "otf", ",", "2", ",", "onesided", "=", "False", ")", "\n", "n_ops", "=", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "psf", ".", "shape", ")", ".", "type_as", "(", "psf", ")", "*", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "psf", ".", "shape", ")", ".", "type_as", "(", "psf", ")", ")", ")", "\n", "otf", "[", "...", ",", "1", "]", "[", "torch", ".", "abs", "(", "otf", "[", "...", ",", "1", "]", ")", "<", "n_ops", "*", "2.22e-16", "]", "=", "torch", ".", "tensor", "(", "0", ")", ".", "type_as", "(", "psf", ")", "\n", "return", "otf", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.otf2psf": [[122, 150], ["numpy.array", "numpy.fft.ifftn", "enumerate", "numpy.sum", "numpy.real_if_close", "numpy.roll", "type", "type", "numpy.array", "numpy.array", "max", "np.pad.flatten().reshape", "np.pad.flatten().reshape", "numpy.pad", "numpy.pad", "numpy.any", "numpy.floor", "numpy.ceil", "np.floor.astype", "range", "numpy.floor().astype", "numpy.size", "numpy.size", "print", "len", "numpy.take", "numpy.log2", "np.pad.flatten", "numpy.size", "np.pad.flatten", "numpy.size", "range", "numpy.floor", "max", "max", "numpy.size", "numpy.size"], "function", ["None"], ["", "def", "otf2psf", "(", "otf", ",", "outsize", "=", "None", ")", ":", "\n", "    ", "insize", "=", "np", ".", "array", "(", "otf", ".", "shape", ")", "\n", "psf", "=", "np", ".", "fft", ".", "ifftn", "(", "otf", ",", "axes", "=", "(", "0", ",", "1", ")", ")", "\n", "for", "axis", ",", "axis_size", "in", "enumerate", "(", "insize", ")", ":", "\n", "        ", "psf", "=", "np", ".", "roll", "(", "psf", ",", "np", ".", "floor", "(", "axis_size", "/", "2", ")", ".", "astype", "(", "int", ")", ",", "axis", "=", "axis", ")", "\n", "", "if", "type", "(", "outsize", ")", "!=", "type", "(", "None", ")", ":", "\n", "        ", "insize", "=", "np", ".", "array", "(", "otf", ".", "shape", ")", "\n", "outsize", "=", "np", ".", "array", "(", "outsize", ")", "\n", "n", "=", "max", "(", "np", ".", "size", "(", "outsize", ")", ",", "np", ".", "size", "(", "insize", ")", ")", "\n", "# outsize = postpad(outsize(:), n, 1);", "\n", "# insize = postpad(insize(:) , n, 1);", "\n", "colvec_out", "=", "outsize", ".", "flatten", "(", ")", ".", "reshape", "(", "(", "np", ".", "size", "(", "outsize", ")", ",", "1", ")", ")", "\n", "colvec_in", "=", "insize", ".", "flatten", "(", ")", ".", "reshape", "(", "(", "np", ".", "size", "(", "insize", ")", ",", "1", ")", ")", "\n", "outsize", "=", "np", ".", "pad", "(", "colvec_out", ",", "(", "(", "0", ",", "max", "(", "0", ",", "n", "-", "np", ".", "size", "(", "colvec_out", ")", ")", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"constant\"", ")", "\n", "insize", "=", "np", ".", "pad", "(", "colvec_in", ",", "(", "(", "0", ",", "max", "(", "0", ",", "n", "-", "np", ".", "size", "(", "colvec_in", ")", ")", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"constant\"", ")", "\n", "\n", "pad", "=", "(", "insize", "-", "outsize", ")", "/", "2", "\n", "if", "np", ".", "any", "(", "pad", "<", "0", ")", ":", "\n", "            ", "print", "(", "\"otf2psf error: OUTSIZE must be smaller than or equal than OTF size\"", ")", "\n", "", "prepad", "=", "np", ".", "floor", "(", "pad", ")", "\n", "postpad", "=", "np", ".", "ceil", "(", "pad", ")", "\n", "dims_start", "=", "prepad", ".", "astype", "(", "int", ")", "\n", "dims_end", "=", "(", "insize", "-", "postpad", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dims_start", ".", "shape", ")", ")", ":", "\n", "            ", "psf", "=", "np", ".", "take", "(", "psf", ",", "range", "(", "dims_start", "[", "i", "]", "[", "0", "]", ",", "dims_end", "[", "i", "]", "[", "0", "]", ")", ",", "axis", "=", "i", ")", "\n", "", "", "n_ops", "=", "np", ".", "sum", "(", "otf", ".", "size", "*", "np", ".", "log2", "(", "otf", ".", "shape", ")", ")", "\n", "psf", "=", "np", ".", "real_if_close", "(", "psf", ",", "tol", "=", "n_ops", ")", "\n", "return", "psf", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.psf2otf": [[153, 200], ["numpy.array", "numpy.all", "utils_deblur.zero_pad", "enumerate", "numpy.fft.fft2", "numpy.sum", "numpy.real_if_close", "type", "type", "numpy.zeros", "len", "np.roll.reshape", "numpy.roll", "numpy.log2", "int"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.zero_pad"], ["", "def", "psf2otf", "(", "psf", ",", "shape", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert point-spread function to optical transfer function.\n    Compute the Fast Fourier Transform (FFT) of the point-spread\n    function (PSF) array and creates the optical transfer function (OTF)\n    array that is not influenced by the PSF off-centering.\n    By default, the OTF array is the same size as the PSF array.\n    To ensure that the OTF is not altered due to PSF off-centering, PSF2OTF\n    post-pads the PSF array (down or to the right) with zeros to match\n    dimensions specified in OUTSIZE, then circularly shifts the values of\n    the PSF array up (or to the left) until the central pixel reaches (1,1)\n    position.\n    Parameters\n    ----------\n    psf : `numpy.ndarray`\n        PSF array\n    shape : int\n        Output shape of the OTF array\n    Returns\n    -------\n    otf : `numpy.ndarray`\n        OTF array\n    Notes\n    -----\n    Adapted from MATLAB psf2otf function\n    \"\"\"", "\n", "if", "type", "(", "shape", ")", "==", "type", "(", "None", ")", ":", "\n", "        ", "shape", "=", "psf", ".", "shape", "\n", "", "shape", "=", "np", ".", "array", "(", "shape", ")", "\n", "if", "np", ".", "all", "(", "psf", "==", "0", ")", ":", "\n", "# return np.zeros_like(psf)", "\n", "        ", "return", "np", ".", "zeros", "(", "shape", ")", "\n", "", "if", "len", "(", "psf", ".", "shape", ")", "==", "1", ":", "\n", "        ", "psf", "=", "psf", ".", "reshape", "(", "(", "1", ",", "psf", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "inshape", "=", "psf", ".", "shape", "\n", "psf", "=", "zero_pad", "(", "psf", ",", "shape", ",", "position", "=", "'corner'", ")", "\n", "for", "axis", ",", "axis_size", "in", "enumerate", "(", "inshape", ")", ":", "\n", "        ", "psf", "=", "np", ".", "roll", "(", "psf", ",", "-", "int", "(", "axis_size", "/", "2", ")", ",", "axis", "=", "axis", ")", "\n", "# Compute the OTF", "\n", "", "otf", "=", "np", ".", "fft", ".", "fft2", "(", "psf", ",", "axes", "=", "(", "0", ",", "1", ")", ")", "\n", "# Estimate the rough number of operations involved in the FFT", "\n", "# and discard the PSF imaginary part if within roundoff error", "\n", "# roundoff error  = machine epsilon = sys.float_info.epsilon", "\n", "# or np.finfo().eps", "\n", "n_ops", "=", "np", ".", "sum", "(", "psf", ".", "size", "*", "np", ".", "log2", "(", "psf", ".", "shape", ")", ")", "\n", "otf", "=", "np", ".", "real_if_close", "(", "otf", ",", "tol", "=", "n_ops", ")", "\n", "return", "otf", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.zero_pad": [[202, 242], ["numpy.asarray", "numpy.asarray", "numpy.alltrue", "numpy.any", "numpy.any", "numpy.zeros", "numpy.indices", "ValueError", "ValueError", "numpy.any", "ValueError"], "function", ["None"], ["", "def", "zero_pad", "(", "image", ",", "shape", ",", "position", "=", "'corner'", ")", ":", "\n", "    ", "\"\"\"\n    Extends image to a certain size with zeros\n    Parameters\n    ----------\n    image: real 2d `numpy.ndarray`\n        Input image\n    shape: tuple of int\n        Desired output shape of the image\n    position : str, optional\n        The position of the input image in the output one:\n            * 'corner'\n                top-left corner (default)\n            * 'center'\n                centered\n    Returns\n    -------\n    padded_img: real `numpy.ndarray`\n        The zero-padded image\n    \"\"\"", "\n", "shape", "=", "np", ".", "asarray", "(", "shape", ",", "dtype", "=", "int", ")", "\n", "imshape", "=", "np", ".", "asarray", "(", "image", ".", "shape", ",", "dtype", "=", "int", ")", "\n", "if", "np", ".", "alltrue", "(", "imshape", "==", "shape", ")", ":", "\n", "        ", "return", "image", "\n", "", "if", "np", ".", "any", "(", "shape", "<=", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ZERO_PAD: null or negative shape given\"", ")", "\n", "", "dshape", "=", "shape", "-", "imshape", "\n", "if", "np", ".", "any", "(", "dshape", "<", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ZERO_PAD: target size smaller than source one\"", ")", "\n", "", "pad_img", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "idx", ",", "idy", "=", "np", ".", "indices", "(", "imshape", ")", "\n", "if", "position", "==", "'center'", ":", "\n", "        ", "if", "np", ".", "any", "(", "dshape", "%", "2", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"ZERO_PAD: source and target shapes \"", "\n", "\"have different parity.\"", ")", "\n", "", "offx", ",", "offy", "=", "dshape", "//", "2", "\n", "", "else", ":", "\n", "        ", "offx", ",", "offy", "=", "(", "0", ",", "0", ")", "\n", "", "pad_img", "[", "idx", "+", "offx", ",", "idy", "+", "offy", "]", "=", "image", "\n", "return", "pad_img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.opt_fft_size": [[249, 297], ["numpy.zeros", "range", "numpy.zeros", "range", "len", "len"], "function", ["None"], ["def", "opt_fft_size", "(", "n", ")", ":", "\n", "    ", "'''\n    Kai Zhang (github: https://github.com/cszn)\n    03/03/2019\n    #  opt_fft_size.m\n    # compute an optimal data length for Fourier transforms\n    # written by Sunghyun Cho (sodomau@postech.ac.kr)\n    # persistent opt_fft_size_LUT;\n    '''", "\n", "\n", "LUT_size", "=", "2048", "\n", "# print(\"generate opt_fft_size_LUT\")", "\n", "opt_fft_size_LUT", "=", "np", ".", "zeros", "(", "LUT_size", ")", "\n", "\n", "e2", "=", "1", "\n", "while", "e2", "<=", "LUT_size", ":", "\n", "        ", "e3", "=", "e2", "\n", "while", "e3", "<=", "LUT_size", ":", "\n", "            ", "e5", "=", "e3", "\n", "while", "e5", "<=", "LUT_size", ":", "\n", "                ", "e7", "=", "e5", "\n", "while", "e7", "<=", "LUT_size", ":", "\n", "                    ", "if", "e7", "<=", "LUT_size", ":", "\n", "                        ", "opt_fft_size_LUT", "[", "e7", "-", "1", "]", "=", "e7", "\n", "", "if", "e7", "*", "11", "<=", "LUT_size", ":", "\n", "                        ", "opt_fft_size_LUT", "[", "e7", "*", "11", "-", "1", "]", "=", "e7", "*", "11", "\n", "", "if", "e7", "*", "13", "<=", "LUT_size", ":", "\n", "                        ", "opt_fft_size_LUT", "[", "e7", "*", "13", "-", "1", "]", "=", "e7", "*", "13", "\n", "", "e7", "=", "e7", "*", "7", "\n", "", "e5", "=", "e5", "*", "5", "\n", "", "e3", "=", "e3", "*", "3", "\n", "", "e2", "=", "e2", "*", "2", "\n", "\n", "", "nn", "=", "0", "\n", "for", "i", "in", "range", "(", "LUT_size", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "if", "opt_fft_size_LUT", "[", "i", "-", "1", "]", "!=", "0", ":", "\n", "            ", "nn", "=", "i", "-", "1", "\n", "", "else", ":", "\n", "            ", "opt_fft_size_LUT", "[", "i", "-", "1", "]", "=", "nn", "+", "1", "\n", "\n", "", "", "m", "=", "np", ".", "zeros", "(", "len", "(", "n", ")", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "n", ")", ")", ":", "\n", "        ", "nn", "=", "n", "[", "c", "]", "\n", "if", "nn", "<=", "LUT_size", ":", "\n", "            ", "m", "[", "c", "]", "=", "opt_fft_size_LUT", "[", "nn", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "m", "[", "c", "]", "=", "-", "1", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.wrap_boundary_liu": [[299, 312], ["utils_deblur.wrap_boundary", "numpy.stack", "utils_deblur.wrap_boundary", "range"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.wrap_boundary", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.wrap_boundary"], ["", "def", "wrap_boundary_liu", "(", "img", ",", "img_size", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Reducing boundary artifacts in image deconvolution\n    Renting Liu, Jiaya Jia\n    ICIP 2008\n    \"\"\"", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "ret", "=", "wrap_boundary", "(", "img", ",", "img_size", ")", "\n", "", "elif", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "ret", "=", "[", "wrap_boundary", "(", "img", "[", ":", ",", ":", ",", "i", "]", ",", "img_size", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "ret", "=", "np", ".", "stack", "(", "ret", ",", "2", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.wrap_boundary": [[314, 379], ["numpy.shape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.vstack", "int", "int", "numpy.arange", "numpy.arange", "utils_deblur.solve_min_laplacian", "utils_deblur.solve_min_laplacian", "utils_deblur.solve_min_laplacian", "utils_deblur.solve_min_laplacian", "utils_deblur.solve_min_laplacian", "utils_deblur.solve_min_laplacian", "numpy.hstack", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian"], ["", "def", "wrap_boundary", "(", "img", ",", "img_size", ")", ":", "\n", "\n", "    ", "\"\"\"\n    python code from:\n    https://github.com/ys-koshelev/nla_deblur/blob/90fe0ab98c26c791dcbdf231fe6f938fca80e2a0/boundaries.py\n    Reducing boundary artifacts in image deconvolution\n    Renting Liu, Jiaya Jia\n    ICIP 2008\n    \"\"\"", "\n", "(", "H", ",", "W", ")", "=", "np", ".", "shape", "(", "img", ")", "\n", "H_w", "=", "int", "(", "img_size", "[", "0", "]", ")", "-", "H", "\n", "W_w", "=", "int", "(", "img_size", "[", "1", "]", ")", "-", "W", "\n", "\n", "# ret = np.zeros((img_size[0], img_size[1]));", "\n", "alpha", "=", "1", "\n", "HG", "=", "img", "[", ":", ",", ":", "]", "\n", "\n", "r_A", "=", "np", ".", "zeros", "(", "(", "alpha", "*", "2", "+", "H_w", ",", "W", ")", ")", "\n", "r_A", "[", ":", "alpha", ",", ":", "]", "=", "HG", "[", "-", "alpha", ":", ",", ":", "]", "\n", "r_A", "[", "-", "alpha", ":", ",", ":", "]", "=", "HG", "[", ":", "alpha", ",", ":", "]", "\n", "a", "=", "np", ".", "arange", "(", "H_w", ")", "/", "(", "H_w", "-", "1", ")", "\n", "# r_A(alpha+1:end-alpha, 1) = (1-a)*r_A(alpha,1) + a*r_A(end-alpha+1,1)", "\n", "r_A", "[", "alpha", ":", "-", "alpha", ",", "0", "]", "=", "(", "1", "-", "a", ")", "*", "r_A", "[", "alpha", "-", "1", ",", "0", "]", "+", "a", "*", "r_A", "[", "-", "alpha", ",", "0", "]", "\n", "# r_A(alpha+1:end-alpha, end) = (1-a)*r_A(alpha,end) + a*r_A(end-alpha+1,end)", "\n", "r_A", "[", "alpha", ":", "-", "alpha", ",", "-", "1", "]", "=", "(", "1", "-", "a", ")", "*", "r_A", "[", "alpha", "-", "1", ",", "-", "1", "]", "+", "a", "*", "r_A", "[", "-", "alpha", ",", "-", "1", "]", "\n", "\n", "r_B", "=", "np", ".", "zeros", "(", "(", "H", ",", "alpha", "*", "2", "+", "W_w", ")", ")", "\n", "r_B", "[", ":", ",", ":", "alpha", "]", "=", "HG", "[", ":", ",", "-", "alpha", ":", "]", "\n", "r_B", "[", ":", ",", "-", "alpha", ":", "]", "=", "HG", "[", ":", ",", ":", "alpha", "]", "\n", "a", "=", "np", ".", "arange", "(", "W_w", ")", "/", "(", "W_w", "-", "1", ")", "\n", "r_B", "[", "0", ",", "alpha", ":", "-", "alpha", "]", "=", "(", "1", "-", "a", ")", "*", "r_B", "[", "0", ",", "alpha", "-", "1", "]", "+", "a", "*", "r_B", "[", "0", ",", "-", "alpha", "]", "\n", "r_B", "[", "-", "1", ",", "alpha", ":", "-", "alpha", "]", "=", "(", "1", "-", "a", ")", "*", "r_B", "[", "-", "1", ",", "alpha", "-", "1", "]", "+", "a", "*", "r_B", "[", "-", "1", ",", "-", "alpha", "]", "\n", "\n", "if", "alpha", "==", "1", ":", "\n", "        ", "A2", "=", "solve_min_laplacian", "(", "r_A", "[", "alpha", "-", "1", ":", ",", ":", "]", ")", "\n", "B2", "=", "solve_min_laplacian", "(", "r_B", "[", ":", ",", "alpha", "-", "1", ":", "]", ")", "\n", "r_A", "[", "alpha", "-", "1", ":", ",", ":", "]", "=", "A2", "\n", "r_B", "[", ":", ",", "alpha", "-", "1", ":", "]", "=", "B2", "\n", "", "else", ":", "\n", "        ", "A2", "=", "solve_min_laplacian", "(", "r_A", "[", "alpha", "-", "1", ":", "-", "alpha", "+", "1", ",", ":", "]", ")", "\n", "r_A", "[", "alpha", "-", "1", ":", "-", "alpha", "+", "1", ",", ":", "]", "=", "A2", "\n", "B2", "=", "solve_min_laplacian", "(", "r_B", "[", ":", ",", "alpha", "-", "1", ":", "-", "alpha", "+", "1", "]", ")", "\n", "r_B", "[", ":", ",", "alpha", "-", "1", ":", "-", "alpha", "+", "1", "]", "=", "B2", "\n", "", "A", "=", "r_A", "\n", "B", "=", "r_B", "\n", "\n", "r_C", "=", "np", ".", "zeros", "(", "(", "alpha", "*", "2", "+", "H_w", ",", "alpha", "*", "2", "+", "W_w", ")", ")", "\n", "r_C", "[", ":", "alpha", ",", ":", "]", "=", "B", "[", "-", "alpha", ":", ",", ":", "]", "\n", "r_C", "[", "-", "alpha", ":", ",", ":", "]", "=", "B", "[", ":", "alpha", ",", ":", "]", "\n", "r_C", "[", ":", ",", ":", "alpha", "]", "=", "A", "[", ":", ",", "-", "alpha", ":", "]", "\n", "r_C", "[", ":", ",", "-", "alpha", ":", "]", "=", "A", "[", ":", ",", ":", "alpha", "]", "\n", "\n", "if", "alpha", "==", "1", ":", "\n", "        ", "C2", "=", "C2", "=", "solve_min_laplacian", "(", "r_C", "[", "alpha", "-", "1", ":", ",", "alpha", "-", "1", ":", "]", ")", "\n", "r_C", "[", "alpha", "-", "1", ":", ",", "alpha", "-", "1", ":", "]", "=", "C2", "\n", "", "else", ":", "\n", "        ", "C2", "=", "solve_min_laplacian", "(", "r_C", "[", "alpha", "-", "1", ":", "-", "alpha", "+", "1", ",", "alpha", "-", "1", ":", "-", "alpha", "+", "1", "]", ")", "\n", "r_C", "[", "alpha", "-", "1", ":", "-", "alpha", "+", "1", ",", "alpha", "-", "1", ":", "-", "alpha", "+", "1", "]", "=", "C2", "\n", "", "C", "=", "r_C", "\n", "# return C", "\n", "A", "=", "A", "[", "alpha", "-", "1", ":", "-", "alpha", "-", "1", ",", ":", "]", "\n", "B", "=", "B", "[", ":", ",", "alpha", ":", "-", "alpha", "]", "\n", "C", "=", "C", "[", "alpha", ":", "-", "alpha", ",", "alpha", ":", "-", "alpha", "]", "\n", "ret", "=", "np", ".", "vstack", "(", "(", "np", ".", "hstack", "(", "(", "img", ",", "B", ")", ")", ",", "np", ".", "hstack", "(", "(", "A", ",", "C", ")", ")", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.solve_min_laplacian": [[381, 438], ["numpy.shape", "numpy.zeros", "numpy.zeros", "numpy.meshgrid", "numpy.arange", "numpy.arange", "numpy.transpose", "numpy.transpose", "numpy.arange", "numpy.arange", "numpy.transpose", "numpy.transpose", "numpy.ix_", "scipy.fftpack.dst", "scipy.fftpack.dst", "scipy.fftpack.idst", "scipy.fftpack.idst", "numpy.ix_", "scipy.fftpack.dst", "scipy.fftpack.dst", "numpy.cos", "numpy.cos", "scipy.fftpack.idst", "scipy.fftpack.idst", "numpy.ix_", "numpy.transpose", "numpy.transpose", "numpy.ix_", "numpy.transpose", "numpy.transpose", "numpy.ix_", "numpy.ix_"], "function", ["None"], ["", "def", "solve_min_laplacian", "(", "boundary_image", ")", ":", "\n", "    ", "(", "H", ",", "W", ")", "=", "np", ".", "shape", "(", "boundary_image", ")", "\n", "\n", "# Laplacian", "\n", "f", "=", "np", ".", "zeros", "(", "(", "H", ",", "W", ")", ")", "\n", "# boundary image contains image intensities at boundaries", "\n", "boundary_image", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "0", "\n", "j", "=", "np", ".", "arange", "(", "2", ",", "H", ")", "-", "1", "\n", "k", "=", "np", ".", "arange", "(", "2", ",", "W", ")", "-", "1", "\n", "f_bp", "=", "np", ".", "zeros", "(", "(", "H", ",", "W", ")", ")", "\n", "f_bp", "[", "np", ".", "ix_", "(", "j", ",", "k", ")", "]", "=", "-", "4", "*", "boundary_image", "[", "np", ".", "ix_", "(", "j", ",", "k", ")", "]", "+", "boundary_image", "[", "np", ".", "ix_", "(", "j", ",", "k", "+", "1", ")", "]", "+", "boundary_image", "[", "np", ".", "ix_", "(", "j", ",", "k", "-", "1", ")", "]", "+", "boundary_image", "[", "np", ".", "ix_", "(", "j", "-", "1", ",", "k", ")", "]", "+", "boundary_image", "[", "np", ".", "ix_", "(", "j", "+", "1", ",", "k", ")", "]", "\n", "\n", "del", "(", "j", ",", "k", ")", "\n", "f1", "=", "f", "-", "f_bp", "# subtract boundary points contribution", "\n", "del", "(", "f_bp", ",", "f", ")", "\n", "\n", "# DST Sine Transform algo starts here", "\n", "f2", "=", "f1", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "\n", "del", "(", "f1", ")", "\n", "\n", "# compute sine tranform", "\n", "if", "f2", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "tt", "=", "fftpack", ".", "dst", "(", "f2", ",", "type", "=", "1", ",", "axis", "=", "0", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "tt", "=", "fftpack", ".", "dst", "(", "f2", ",", "type", "=", "1", ")", "/", "2", "\n", "\n", "", "if", "tt", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "f2sin", "=", "np", ".", "transpose", "(", "fftpack", ".", "dst", "(", "np", ".", "transpose", "(", "tt", ")", ",", "type", "=", "1", ",", "axis", "=", "0", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "        ", "f2sin", "=", "np", ".", "transpose", "(", "fftpack", ".", "dst", "(", "np", ".", "transpose", "(", "tt", ")", ",", "type", "=", "1", ")", "/", "2", ")", "\n", "", "del", "(", "f2", ")", "\n", "\n", "# compute Eigen Values", "\n", "[", "x", ",", "y", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "1", ",", "W", "-", "1", ")", ",", "np", ".", "arange", "(", "1", ",", "H", "-", "1", ")", ")", "\n", "denom", "=", "(", "2", "*", "np", ".", "cos", "(", "np", ".", "pi", "*", "x", "/", "(", "W", "-", "1", ")", ")", "-", "2", ")", "+", "(", "2", "*", "np", ".", "cos", "(", "np", ".", "pi", "*", "y", "/", "(", "H", "-", "1", ")", ")", "-", "2", ")", "\n", "\n", "# divide", "\n", "f3", "=", "f2sin", "/", "denom", "\n", "del", "(", "f2sin", ",", "x", ",", "y", ")", "\n", "\n", "# compute Inverse Sine Transform", "\n", "if", "f3", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "tt", "=", "fftpack", ".", "idst", "(", "f3", "*", "2", ",", "type", "=", "1", ",", "axis", "=", "1", ")", "/", "(", "2", "*", "(", "f3", ".", "shape", "[", "1", "]", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "tt", "=", "fftpack", ".", "idst", "(", "f3", "*", "2", ",", "type", "=", "1", ",", "axis", "=", "0", ")", "/", "(", "2", "*", "(", "f3", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "\n", "", "del", "(", "f3", ")", "\n", "if", "tt", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "img_tt", "=", "np", ".", "transpose", "(", "fftpack", ".", "idst", "(", "np", ".", "transpose", "(", "tt", ")", "*", "2", ",", "type", "=", "1", ")", "/", "(", "2", "*", "(", "tt", ".", "shape", "[", "0", "]", "+", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "img_tt", "=", "np", ".", "transpose", "(", "fftpack", ".", "idst", "(", "np", ".", "transpose", "(", "tt", ")", "*", "2", ",", "type", "=", "1", ",", "axis", "=", "0", ")", "/", "(", "2", "*", "(", "tt", ".", "shape", "[", "1", "]", "+", "1", ")", ")", ")", "\n", "", "del", "(", "tt", ")", "\n", "\n", "# put solution in inner points; outer points obtained from boundary image", "\n", "img_direct", "=", "boundary_image", "\n", "img_direct", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "0", "\n", "img_direct", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "img_tt", "\n", "return", "img_direct", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_average": [[460, 463], ["numpy.ones"], "function", ["None"], ["def", "fspecial_average", "(", "hsize", "=", "3", ")", ":", "\n", "    ", "\"\"\"Smoothing filter\"\"\"", "\n", "return", "np", ".", "ones", "(", "(", "hsize", ",", "hsize", ")", ")", "/", "hsize", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_disk": [[465, 485], ["numpy.ceil", "numpy.meshgrid", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "abs", "abs", "abs", "abs", "numpy.sqrt", "numpy.sqrt", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs"], "function", ["None"], ["", "def", "fspecial_disk", "(", "radius", ")", ":", "\n", "    ", "\"\"\"Disk filter\"\"\"", "\n", "raise", "(", "NotImplemented", ")", "\n", "rad", "=", "0.6", "\n", "crad", "=", "np", ".", "ceil", "(", "rad", "-", "0.5", ")", "\n", "[", "x", ",", "y", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "-", "crad", ",", "crad", "+", "1", ")", ",", "np", ".", "arange", "(", "-", "crad", ",", "crad", "+", "1", ")", ")", "\n", "maxxy", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "maxxy", "[", "abs", "(", "x", ")", ">=", "abs", "(", "y", ")", "]", "=", "abs", "(", "x", ")", "[", "abs", "(", "x", ")", ">=", "abs", "(", "y", ")", "]", "\n", "maxxy", "[", "abs", "(", "y", ")", ">=", "abs", "(", "x", ")", "]", "=", "abs", "(", "y", ")", "[", "abs", "(", "y", ")", ">=", "abs", "(", "x", ")", "]", "\n", "minxy", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "minxy", "[", "abs", "(", "x", ")", "<=", "abs", "(", "y", ")", "]", "=", "abs", "(", "x", ")", "[", "abs", "(", "x", ")", "<=", "abs", "(", "y", ")", "]", "\n", "minxy", "[", "abs", "(", "y", ")", "<=", "abs", "(", "x", ")", "]", "=", "abs", "(", "y", ")", "[", "abs", "(", "y", ")", "<=", "abs", "(", "x", ")", "]", "\n", "m1", "=", "(", "rad", "**", "2", "<", "(", "maxxy", "+", "0.5", ")", "**", "2", "+", "(", "minxy", "-", "0.5", ")", "**", "2", ")", "*", "(", "minxy", "-", "0.5", ")", "+", "(", "rad", "**", "2", ">=", "(", "maxxy", "+", "0.5", ")", "**", "2", "+", "(", "minxy", "-", "0.5", ")", "**", "2", ")", "*", "np", ".", "sqrt", "(", "(", "rad", "**", "2", "+", "0j", ")", "-", "(", "maxxy", "+", "0.5", ")", "**", "2", ")", "\n", "m2", "=", "(", "rad", "**", "2", ">", "(", "maxxy", "-", "0.5", ")", "**", "2", "+", "(", "minxy", "+", "0.5", ")", "**", "2", ")", "*", "(", "minxy", "+", "0.5", ")", "+", "(", "rad", "**", "2", "<=", "(", "maxxy", "-", "0.5", ")", "**", "2", "+", "(", "minxy", "+", "0.5", ")", "**", "2", ")", "*", "np", ".", "sqrt", "(", "(", "rad", "**", "2", "+", "0j", ")", "-", "(", "maxxy", "-", "0.5", ")", "**", "2", ")", "\n", "h", "=", "None", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_gaussian": [[487, 499], ["numpy.meshgrid", "numpy.exp", "np.exp.sum", "numpy.arange", "numpy.arange", "np.exp.max", "scipy.finfo"], "function", ["None"], ["", "def", "fspecial_gaussian", "(", "hsize", ",", "sigma", ")", ":", "\n", "    ", "hsize", "=", "[", "hsize", ",", "hsize", "]", "\n", "siz", "=", "[", "(", "hsize", "[", "0", "]", "-", "1.0", ")", "/", "2.0", ",", "(", "hsize", "[", "1", "]", "-", "1.0", ")", "/", "2.0", "]", "\n", "std", "=", "sigma", "\n", "[", "x", ",", "y", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "-", "siz", "[", "1", "]", ",", "siz", "[", "1", "]", "+", "1", ")", ",", "np", ".", "arange", "(", "-", "siz", "[", "0", "]", ",", "siz", "[", "0", "]", "+", "1", ")", ")", "\n", "arg", "=", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "std", "*", "std", ")", "\n", "h", "=", "np", ".", "exp", "(", "arg", ")", "\n", "h", "[", "h", "<", "scipy", ".", "finfo", "(", "float", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "sumh", "=", "h", ".", "sum", "(", ")", "\n", "if", "sumh", "!=", "0", ":", "\n", "        ", "h", "=", "h", "/", "sumh", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_laplacian": [[501, 508], ["max", "numpy.array", "numpy.min"], "function", ["None"], ["", "def", "fspecial_laplacian", "(", "alpha", ")", ":", "\n", "    ", "alpha", "=", "max", "(", "[", "0", ",", "min", "(", "[", "alpha", ",", "1", "]", ")", "]", ")", "\n", "h1", "=", "alpha", "/", "(", "alpha", "+", "1", ")", "\n", "h2", "=", "(", "1", "-", "alpha", ")", "/", "(", "alpha", "+", "1", ")", "\n", "h", "=", "[", "[", "h1", ",", "h2", ",", "h1", "]", ",", "[", "h2", ",", "-", "4", "/", "(", "alpha", "+", "1", ")", ",", "h2", "]", ",", "[", "h1", ",", "h2", ",", "h1", "]", "]", "\n", "h", "=", "np", ".", "array", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_log": [[510, 512], ["None"], "function", ["None"], ["", "def", "fspecial_log", "(", "hsize", ",", "sigma", ")", ":", "\n", "    ", "raise", "(", "NotImplemented", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_motion": [[514, 516], ["None"], "function", ["None"], ["", "def", "fspecial_motion", "(", "motion_len", ",", "theta", ")", ":", "\n", "    ", "raise", "(", "NotImplemented", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_prewitt": [[518, 520], ["numpy.array"], "function", ["None"], ["", "def", "fspecial_prewitt", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_sobel": [[522, 524], ["numpy.array"], "function", ["None"], ["", "def", "fspecial_sobel", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial": [[526, 547], ["utils_deblur.fspecial_average", "utils_deblur.fspecial_disk", "utils_deblur.fspecial_gaussian", "utils_deblur.fspecial_laplacian", "utils_deblur.fspecial_log", "utils_deblur.fspecial_motion", "utils_deblur.fspecial_prewitt", "utils_deblur.fspecial_sobel"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_average", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_disk", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_gaussian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_laplacian", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_motion", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_prewitt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_sobel"], ["", "def", "fspecial", "(", "filter_type", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''\n    python code from:\n    https://github.com/ronaldosena/imagens-medicas-2/blob/40171a6c259edec7827a6693a93955de2bd39e76/Aulas/aula_2_-_uniform_filter/matlab_fspecial.py\n    '''", "\n", "if", "filter_type", "==", "'average'", ":", "\n", "        ", "return", "fspecial_average", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'disk'", ":", "\n", "        ", "return", "fspecial_disk", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'gaussian'", ":", "\n", "        ", "return", "fspecial_gaussian", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'laplacian'", ":", "\n", "        ", "return", "fspecial_laplacian", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'log'", ":", "\n", "        ", "return", "fspecial_log", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'motion'", ":", "\n", "        ", "return", "fspecial_motion", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'prewitt'", ":", "\n", "        ", "return", "fspecial_prewitt", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "filter_type", "==", "'sobel'", ":", "\n", "        ", "return", "fspecial_sobel", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_gauss": [[549, 553], ["numpy.exp", "numpy.exp.sum"], "function", ["None"], ["", "", "def", "fspecial_gauss", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "x", ",", "y", "=", "mgrid", "[", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", ",", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", "]", "\n", "g", "=", "exp", "(", "-", "(", "(", "x", "**", "2", "+", "y", "**", "2", ")", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", ")", "\n", "return", "g", "/", "g", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.blurkernel_synthesis": [[555, 585], ["utils_deblur.randomTrajectory", "utils_deblur.kernelFromTrajectory", "numpy.pad", "numpy.random.randint", "cv2.resize", "numpy.sum", "utils_deblur.fspecial_gaussian", "numpy.sum", "random.randint", "random.randint", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.randomTrajectory", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.kernelFromTrajectory", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_gaussian"], ["", "def", "blurkernel_synthesis", "(", "h", "=", "37", ",", "w", "=", "None", ")", ":", "\n", "# https://github.com/tkkcc/prior/blob/879a0b6c117c810776d8cc6b63720bf29f7d0cc4/util/gen_kernel.py", "\n", "    ", "w", "=", "h", "if", "w", "is", "None", "else", "w", "\n", "kdims", "=", "[", "h", ",", "w", "]", "\n", "x", "=", "randomTrajectory", "(", "250", ")", "\n", "k", "=", "None", "\n", "while", "k", "is", "None", ":", "\n", "        ", "k", "=", "kernelFromTrajectory", "(", "x", ")", "\n", "\n", "# center pad to kdims", "\n", "", "pad_width", "=", "(", "(", "kdims", "[", "0", "]", "-", "k", ".", "shape", "[", "0", "]", ")", "//", "2", ",", "(", "kdims", "[", "1", "]", "-", "k", ".", "shape", "[", "1", "]", ")", "//", "2", ")", "\n", "pad_width", "=", "[", "(", "pad_width", "[", "0", "]", ",", ")", ",", "(", "pad_width", "[", "1", "]", ",", ")", "]", "\n", "\n", "if", "pad_width", "[", "0", "]", "[", "0", "]", "<", "0", "or", "pad_width", "[", "1", "]", "[", "0", "]", "<", "0", ":", "\n", "        ", "k", "=", "k", "[", "0", ":", "h", ",", "0", ":", "h", "]", "\n", "", "else", ":", "\n", "        ", "k", "=", "pad", "(", "k", ",", "pad_width", ",", "\"constant\"", ")", "\n", "", "x1", ",", "x2", "=", "k", ".", "shape", "\n", "if", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "==", "1", ":", "\n", "        ", "k", "=", "cv2", ".", "resize", "(", "k", ",", "(", "random", ".", "randint", "(", "x1", ",", "5", "*", "x1", ")", ",", "random", ".", "randint", "(", "x2", ",", "5", "*", "x2", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "y1", ",", "y2", "=", "k", ".", "shape", "\n", "k", "=", "k", "[", "(", "y1", "-", "x1", ")", "//", "2", ":", "(", "y1", "-", "x1", ")", "//", "2", "+", "x1", ",", "(", "y2", "-", "x2", ")", "//", "2", ":", "(", "y2", "-", "x2", ")", "//", "2", "+", "x2", "]", "\n", "\n", "", "if", "sum", "(", "k", ")", "<", "0.1", ":", "\n", "        ", "k", "=", "fspecial_gaussian", "(", "h", ",", "0.1", "+", "6", "*", "np", ".", "random", ".", "rand", "(", "1", ")", ")", "\n", "", "k", "=", "k", "/", "sum", "(", "k", ")", "\n", "# import matplotlib.pyplot as plt", "\n", "# plt.imshow(k, interpolation=\"nearest\", cmap=\"gray\")", "\n", "# plt.show()", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.kernelFromTrajectory": [[587, 616], ["numpy.round().astype", "numpy.zeros", "numpy.min", "max", "numpy.min", "max", "numpy.arange", "numpy.arange", "range", "scipy.signal.convolve2d", "range", "numpy.sum", "numpy.sum", "utils_deblur.fspecial_gauss", "numpy.sum", "numpy.log", "numpy.round", "numpy.sum", "numpy.random.rand", "numpy.min"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.fspecial_gauss", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "kernelFromTrajectory", "(", "x", ")", ":", "\n", "    ", "h", "=", "5", "-", "log", "(", "rand", "(", ")", ")", "/", "0.15", "\n", "h", "=", "round", "(", "min", "(", "[", "h", ",", "27", "]", ")", ")", ".", "astype", "(", "int", ")", "\n", "h", "=", "h", "+", "1", "-", "h", "%", "2", "\n", "w", "=", "h", "\n", "k", "=", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "xmin", "=", "min", "(", "x", "[", "0", "]", ")", "\n", "xmax", "=", "max", "(", "x", "[", "0", "]", ")", "\n", "ymin", "=", "min", "(", "x", "[", "1", "]", ")", "\n", "ymax", "=", "max", "(", "x", "[", "1", "]", ")", "\n", "xthr", "=", "arange", "(", "xmin", ",", "xmax", ",", "(", "xmax", "-", "xmin", ")", "/", "w", ")", "\n", "ythr", "=", "arange", "(", "ymin", ",", "ymax", ",", "(", "ymax", "-", "ymin", ")", "/", "h", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "xthr", ".", "size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "ythr", ".", "size", ")", ":", "\n", "            ", "idx", "=", "(", "\n", "(", "x", "[", "0", ",", ":", "]", ">=", "xthr", "[", "i", "-", "1", "]", ")", "\n", "&", "(", "x", "[", "0", ",", ":", "]", "<", "xthr", "[", "i", "]", ")", "\n", "&", "(", "x", "[", "1", ",", ":", "]", ">=", "ythr", "[", "j", "-", "1", "]", ")", "\n", "&", "(", "x", "[", "1", ",", ":", "]", "<", "ythr", "[", "j", "]", ")", "\n", ")", "\n", "k", "[", "i", "-", "1", ",", "j", "-", "1", "]", "=", "sum", "(", "idx", ")", "\n", "", "", "if", "sum", "(", "k", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "k", "=", "k", "/", "sum", "(", "k", ")", "\n", "k", "=", "convolve2d", "(", "k", ",", "fspecial_gauss", "(", "3", ",", "1", ")", ",", "\"same\"", ")", "\n", "k", "=", "k", "/", "sum", "(", "k", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.randomTrajectory": [[618, 633], ["numpy.zeros", "numpy.random.randn", "numpy.zeros", "range", "utils_deblur.rot3D", "numpy.random.randn", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.rot3D"], ["", "def", "randomTrajectory", "(", "T", ")", ":", "\n", "    ", "x", "=", "zeros", "(", "(", "3", ",", "T", ")", ")", "\n", "v", "=", "randn", "(", "3", ",", "T", ")", "\n", "r", "=", "zeros", "(", "(", "3", ",", "T", ")", ")", "\n", "trv", "=", "1", "/", "1", "\n", "trr", "=", "2", "*", "pi", "/", "T", "\n", "for", "t", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "        ", "F_rot", "=", "randn", "(", "3", ")", "/", "(", "t", "+", "1", ")", "+", "r", "[", ":", ",", "t", "-", "1", "]", "\n", "F_trans", "=", "randn", "(", "3", ")", "/", "(", "t", "+", "1", ")", "\n", "r", "[", ":", ",", "t", "]", "=", "r", "[", ":", ",", "t", "-", "1", "]", "+", "trr", "*", "F_rot", "\n", "v", "[", ":", ",", "t", "]", "=", "v", "[", ":", ",", "t", "-", "1", "]", "+", "trv", "*", "F_trans", "\n", "st", "=", "v", "[", ":", ",", "t", "]", "\n", "st", "=", "rot3D", "(", "st", ",", "r", "[", ":", ",", "t", "]", ")", "\n", "x", "[", ":", ",", "t", "]", "=", "x", "[", ":", ",", "t", "-", "1", "]", "+", "st", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_deblur.rot3D": [[635, 642], ["numpy.array", "numpy.array", "numpy.array", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "function", ["None"], ["", "def", "rot3D", "(", "x", ",", "r", ")", ":", "\n", "    ", "Rx", "=", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "cos", "(", "r", "[", "0", "]", ")", ",", "-", "sin", "(", "r", "[", "0", "]", ")", "]", ",", "[", "0", ",", "sin", "(", "r", "[", "0", "]", ")", ",", "cos", "(", "r", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "array", "(", "[", "[", "cos", "(", "r", "[", "1", "]", ")", ",", "0", ",", "sin", "(", "r", "[", "1", "]", ")", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "sin", "(", "r", "[", "1", "]", ")", ",", "0", ",", "cos", "(", "r", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "array", "(", "[", "[", "cos", "(", "r", "[", "2", "]", ")", ",", "-", "sin", "(", "r", "[", "2", "]", ")", ",", "0", "]", ",", "[", "sin", "(", "r", "[", "2", "]", ")", ",", "cos", "(", "r", "[", "2", "]", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "Rz", "@", "Ry", "@", "Rx", "\n", "x", "=", "R", "@", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_flops": [[27, 47], ["utils_modelsummary.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.FloatTensor().to", "torch.FloatTensor().to", "add_flops_counting_methods.", "utils_modelsummary.print_model_with_flops", "add_flops_counting_methods.eval", "list", "torch.FloatTensor", "torch.FloatTensor", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_flops_counting_methods", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.start_flops_count", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.compute_average_flops_cost", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.stop_flops_count", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.print_model_with_flops", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["def", "get_model_flops", "(", "model", ",", "input_res", ",", "print_per_layer_stat", "=", "True", ",", "\n", "input_constructor", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", ",", "'Please provide the size of the input image.'", "\n", "assert", "len", "(", "input_res", ")", ">=", "3", ",", "'Input image should have 3 dimensions.'", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "list", "(", "flops_model", ".", "parameters", "(", ")", ")", "[", "-", "1", "]", ".", "device", "\n", "batch", "=", "torch", ".", "FloatTensor", "(", "1", ",", "*", "input_res", ")", ".", "to", "(", "device", ")", "\n", "_", "=", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "return", "flops_count", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_activation": [[48, 65], ["utils_modelsummary.add_activation_counting_methods", "add_activation_counting_methods.eval().start_activation_count", "add_activation_counting_methods.compute_average_activation_cost", "add_activation_counting_methods.stop_activation_count", "type", "len", "input_constructor", "add_activation_counting_methods.", "torch.FloatTensor().to", "torch.FloatTensor().to", "add_activation_counting_methods.", "add_activation_counting_methods.eval", "list", "torch.FloatTensor", "torch.FloatTensor", "add_activation_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_activation_counting_methods", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.start_activation_count", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.compute_average_activation_cost", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.stop_activation_count", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "def", "get_model_activation", "(", "model", ",", "input_res", ",", "input_constructor", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", ",", "'Please provide the size of the input image.'", "\n", "assert", "len", "(", "input_res", ")", ">=", "3", ",", "'Input image should have 3 dimensions.'", "\n", "activation_model", "=", "add_activation_counting_methods", "(", "model", ")", "\n", "activation_model", ".", "eval", "(", ")", ".", "start_activation_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "activation_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "list", "(", "activation_model", ".", "parameters", "(", ")", ")", "[", "-", "1", "]", ".", "device", "\n", "batch", "=", "torch", ".", "FloatTensor", "(", "1", ",", "*", "input_res", ")", ".", "to", "(", "device", ")", "\n", "_", "=", "activation_model", "(", "batch", ")", "\n", "\n", "", "activation_count", ",", "num_conv", "=", "activation_model", ".", "compute_average_activation_cost", "(", ")", "\n", "activation_model", ".", "stop_activation_count", "(", ")", "\n", "\n", "return", "activation_count", ",", "num_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_complexity_info": [[67, 90], ["utils_modelsummary.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "utils_modelsummary.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.FloatTensor", "torch.FloatTensor", "add_flops_counting_methods.", "utils_modelsummary.print_model_with_flops", "add_flops_counting_methods.eval", "utils_modelsummary.flops_to_string", "utils_modelsummary.params_to_string"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_flops_counting_methods", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.start_flops_count", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.compute_average_flops_cost", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_parameters_number", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.stop_flops_count", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.print_model_with_flops", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.flops_to_string", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.params_to_string"], ["", "def", "get_model_complexity_info", "(", "model", ",", "input_res", ",", "print_per_layer_stat", "=", "True", ",", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "3", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "torch", ".", "FloatTensor", "(", "1", ",", "*", "input_res", ")", "\n", "_", "=", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.flops_to_string": [[92, 111], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.params_to_string": [[113, 120], ["str", "str", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ")", ":", "\n", "    ", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.print_model_with_flops": [[122, 158], ["model.compute_average_flops_cost", "model.apply", "print", "model.apply", "utils_modelsummary.is_supported_instance", "utils_modelsummary..accumulate_flops", "accumulate_flops.__get__", "flops_repr.__get__", "hasattr", "hasattr", "utils_modelsummary..children", "m.accumulate_flops", "utils_modelsummary.flops_to_string", "utils_modelsummary..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.compute_average_flops_cost", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.flops_to_string"], ["", "", "def", "print_model_with_flops", "(", "model", ",", "units", "=", "'GMac'", ",", "precision", "=", "3", ")", ":", "\n", "    ", "total_flops", "=", "model", ".", "compute_average_flops_cost", "(", ")", "\n", "\n", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "', '", ".", "join", "(", "[", "flops_to_string", "(", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "]", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_parameters_number": [[160, 163], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_flops_counting_methods": [[165, 176], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "# embed()", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.compute_average_flops_cost": [[178, 193], ["utils_modelsummary..modules", "utils_modelsummary.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean flops consumption per image.\n\n    \"\"\"", "\n", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.start_flops_count": [[195, 205], ["utils_modelsummary..apply"], "function", ["None"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.stop_flops_count": [[207, 217], ["utils_modelsummary..apply"], "function", ["None"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.reset_flops_count": [[219, 228], ["utils_modelsummary..apply"], "function", ["None"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_flops_counter_hook_function": [[230, 246], ["utils_modelsummary.is_supported_instance", "hasattr", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance"], ["", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "ReLU", ",", "nn", ".", "PReLU", ",", "nn", ".", "ELU", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU6", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "relu_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "linear_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "bn_flops_counter_hook", ")", "\n", "", "else", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "empty_flops_counter_hook", ")", "\n", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.remove_flops_counter_hook_function": [[248, 253], ["utils_modelsummary.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_flops_counter_variable_or_reset": [[255, 258], ["utils_modelsummary.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance"], ["", "", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance": [[261, 272], ["isinstance"], "function", ["None"], ["", "", "def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "\n", "(", "\n", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ",", "\n", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "Linear", ",", "\n", "nn", ".", "ReLU", ",", "nn", ".", "PReLU", ",", "nn", ".", "ELU", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU6", ",", "\n", ")", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.conv_flops_counter_hook": [[274, 295], ["list", "list", "int", "numpy.prod", "int", "int", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "# input = input[0]", "\n", "\n", "    ", "batch_size", "=", "output", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "overall_conv_flops", "=", "int", "(", "conv_per_position_flops", ")", "*", "int", "(", "active_elements_count", ")", "\n", "\n", "# overall_flops = overall_conv_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_conv_flops", ")", "\n", "# conv_module.__output_dims__ = output_dims", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.relu_flops_counter_hook": [[298, 301], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "# print(module.__flops__, id(module))", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.linear_flops_counter_hook": [[305, 313], ["len", "int", "int"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "if", "len", "(", "input", ".", "shape", ")", "==", "1", ":", "\n", "        ", "batch_size", "=", "1", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "0", "]", "*", "output", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "output", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.bn_flops_counter_hook": [[315, 329], ["int", "numpy.prod"], "function", ["None"], ["", "", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "# input = input[0]", "\n", "# TODO: need to check here", "\n", "# batch_flops = np.prod(input.shape)", "\n", "# if module.affine:", "\n", "#     batch_flops *= 2", "\n", "# module.__flops__ += int(batch_flops)", "\n", "    ", "batch", "=", "output", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "channels", "=", "module", ".", "num_features", "\n", "batch_flops", "=", "batch", "*", "channels", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_activation_counting_methods": [[332, 343], ["start_activation_count.__get__", "stop_activation_count.__get__", "reset_activation_count.__get__", "compute_average_activation_cost.__get__", "net_main_module.reset_activation_count"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.reset_activation_count"], ["", "def", "add_activation_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "# embed()", "\n", "    ", "net_main_module", ".", "start_activation_count", "=", "start_activation_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_activation_count", "=", "stop_activation_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_activation_count", "=", "reset_activation_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_activation_cost", "=", "compute_average_activation_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_activation_count", "(", ")", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.compute_average_activation_cost": [[345, 361], ["utils_modelsummary..modules", "utils_modelsummary.is_supported_instance_for_activation"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance_for_activation"], ["", "def", "compute_average_activation_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean activation consumption per image.\n\n    \"\"\"", "\n", "\n", "activation_sum", "=", "0", "\n", "num_conv", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "            ", "activation_sum", "+=", "module", ".", "__activation__", "\n", "num_conv", "+=", "module", ".", "__num_conv__", "\n", "", "", "return", "activation_sum", ",", "num_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.start_activation_count": [[363, 373], ["utils_modelsummary..apply"], "function", ["None"], ["", "def", "start_activation_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean activation consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_activation_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.stop_activation_count": [[375, 385], ["utils_modelsummary..apply"], "function", ["None"], ["", "def", "stop_activation_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean activation consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "remove_activation_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.reset_activation_count": [[387, 396], ["utils_modelsummary..apply"], "function", ["None"], ["", "def", "reset_activation_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_activation_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_activation_counter_hook_function": [[398, 406], ["utils_modelsummary.is_supported_instance_for_activation", "hasattr", "isinstance", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance_for_activation"], ["", "def", "add_activation_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__activation_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_activation_counter_hook", ")", "\n", "module", ".", "__activation_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.remove_activation_counter_hook_function": [[408, 413], ["utils_modelsummary.is_supported_instance_for_activation", "hasattr", "module.__activation_handle__.remove"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance_for_activation"], ["", "", "", "def", "remove_activation_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__activation_handle__'", ")", ":", "\n", "            ", "module", ".", "__activation_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__activation_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.add_activation_counter_variable_or_reset": [[415, 419], ["utils_modelsummary.is_supported_instance_for_activation"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance_for_activation"], ["", "", "", "def", "add_activation_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "        ", "module", ".", "__activation__", "=", "0", "\n", "module", ".", "__num_conv__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.is_supported_instance_for_activation": [[421, 429], ["isinstance"], "function", ["None"], ["", "", "def", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "\n", "(", "\n", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ",", "\n", ")", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.conv_activation_counter_hook": [[430, 441], ["output.numel"], "function", ["None"], ["", "def", "conv_activation_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the activations in the convolutional operation.\n    Reference: Ilija Radosavovic, Raj Prateek Kosaraju, Ross Girshick, Kaiming He, Piotr Doll\u00e1r, Designing Network Design Spaces.\n    :param module:\n    :param input:\n    :param output:\n    :return:\n    \"\"\"", "\n", "module", ".", "__activation__", "+=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__num_conv__", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.empty_flops_counter_hook": [[443, 445], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.upsample_flops_counter_hook": [[447, 454], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.pool_flops_counter_hook": [[456, 459], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.dconv_flops_counter_hook": [[461, 480], ["list", "int", "numpy.prod"], "function", ["None"], ["", "def", "dconv_flops_counter_hook", "(", "dconv_module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "m_channels", ",", "in_channels", ",", "kernel_dim1", ",", "_", ",", "=", "dconv_module", ".", "weight", ".", "shape", "\n", "out_channels", ",", "_", ",", "kernel_dim2", ",", "_", ",", "=", "dconv_module", ".", "projection", ".", "shape", "\n", "# groups = dconv_module.groups", "\n", "\n", "# filters_per_channel = out_channels // groups", "\n", "conv_per_position_flops1", "=", "kernel_dim1", "**", "2", "*", "in_channels", "*", "m_channels", "\n", "conv_per_position_flops2", "=", "kernel_dim2", "**", "2", "*", "out_channels", "*", "m_channels", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "overall_conv_flops", "=", "(", "conv_per_position_flops1", "+", "conv_per_position_flops2", ")", "*", "active_elements_count", "\n", "overall_flops", "=", "overall_conv_flops", "\n", "\n", "dconv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "# dconv_module.__output_dims__ = output_dims", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.find_last_checkpoint": [[20, 47], ["glob.glob", "os.path.join", "max", "os.path.join", "re.findall", "iter_exist.append", "int"], "function", ["None"], ["def", "find_last_checkpoint", "(", "save_dir", ",", "net_type", "=", "'G'", ")", ":", "\n", "    ", "\"\"\"\n    # ---------------------------------------\n    # Kai Zhang (github: https://github.com/cszn)\n    # 03/Mar/2019\n    # ---------------------------------------\n    Args:\n        save_dir: model folder\n        net_type: 'G' or 'D'\n\n    Return:\n        init_iter: iteration number\n        init_path: model path\n    # ---------------------------------------\n    \"\"\"", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'*_{}.pth'", ".", "format", "(", "net_type", ")", ")", ")", "\n", "if", "file_list", ":", "\n", "        ", "iter_exist", "=", "[", "]", "\n", "for", "file_", "in", "file_list", ":", "\n", "            ", "iter_current", "=", "re", ".", "findall", "(", "r\"(\\d+)_{}.pth\"", ".", "format", "(", "net_type", ")", ",", "file_", ")", "\n", "iter_exist", ".", "append", "(", "int", "(", "iter_current", "[", "0", "]", ")", ")", "\n", "", "init_iter", "=", "max", "(", "iter_exist", ")", "\n", "init_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.pth'", ".", "format", "(", "init_iter", ",", "net_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "init_iter", "=", "0", "\n", "init_path", "=", "None", "\n", "", "return", "init_iter", ",", "init_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_mode": [[49, 87], ["utils_model.test", "utils_model.test_pad", "utils_model.test_split", "utils_model.test_x8", "utils_model.test_split_x8"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.test", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_pad", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_x8", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split_x8"], ["", "def", "test_mode", "(", "model", ",", "L", ",", "mode", "=", "0", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "'''\n    # ---------------------------------------\n    # Kai Zhang (github: https://github.com/cszn)\n    # 03/Mar/2019\n    # ---------------------------------------\n    Args:\n        model: trained model\n        L: input Low-quality image\n        mode:\n            (0) normal: test(model, L)\n            (1) pad: test_pad(model, L, modulo=16)\n            (2) split: test_split(model, L, refield=32, min_size=256, sf=1, modulo=1)\n            (3) x8: test_x8(model, L, modulo=1) ^_^\n            (4) split and x8: test_split_x8(model, L, refield=32, min_size=256, sf=1, modulo=1)\n        refield: effective receptive filed of the network, 32 is enough\n            useful when split, i.e., mode=2, 4\n        min_size: min_sizeXmin_size image, e.g., 256X256 image\n            useful when split, i.e., mode=2, 4\n        sf: scale factor for super-resolution, otherwise 1\n        modulo: 1 if split\n            useful when pad, i.e., mode=1\n\n    Returns:\n        E: estimated image\n    # ---------------------------------------\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "E", "=", "test", "(", "model", ",", "L", ")", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "E", "=", "test_pad", "(", "model", ",", "L", ",", "modulo", ",", "sf", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "E", "=", "test_split", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "E", "=", "test_x8", "(", "model", ",", "L", ",", "modulo", ",", "sf", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "E", "=", "test_split_x8", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test": [[96, 99], ["model"], "function", ["None"], ["def", "test", "(", "model", ",", "L", ")", ":", "\n", "    ", "E", "=", "model", "(", "L", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_pad": [[108, 116], ["int", "int", "model", "L.size", "torch.nn.ReplicationPad2d", "numpy.ceil", "numpy.ceil"], "function", ["None"], ["def", "test_pad", "(", "model", ",", "L", ",", "modulo", "=", "16", ",", "sf", "=", "1", ")", ":", "\n", "    ", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "paddingBottom", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "modulo", ")", "*", "modulo", "-", "h", ")", "\n", "paddingRight", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "modulo", ")", "*", "modulo", "-", "w", ")", "\n", "L", "=", "torch", ".", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "paddingRight", ",", "0", ",", "paddingBottom", ")", ")", "(", "L", ")", "\n", "E", "=", "model", "(", "L", ")", "\n", "E", "=", "E", "[", "...", ",", ":", "h", "*", "sf", ",", ":", "w", "*", "sf", "]", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split_fn": [[125, 163], ["L.size", "model", "slice", "slice", "slice", "slice", "torch.zeros().type_as", "torch.nn.ReplicationPad2d", "Es[].size", "model", "utils_model.test_split_fn", "torch.zeros", "int", "int", "range", "range", "numpy.ceil", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split_fn"], ["def", "test_split_fn", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        model: trained model\n        L: input Low-quality image\n        refield: effective receptive filed of the network, 32 is enough\n        min_size: min_sizeXmin_size image, e.g., 256X256 image\n        sf: scale factor for super-resolution, otherwise 1\n        modulo: 1 if split\n\n    Returns:\n        E: estimated result\n    \"\"\"", "\n", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "if", "h", "*", "w", "<=", "min_size", "**", "2", ":", "\n", "        ", "L", "=", "torch", ".", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "int", "(", "np", ".", "ceil", "(", "w", "/", "modulo", ")", "*", "modulo", "-", "w", ")", ",", "0", ",", "int", "(", "np", ".", "ceil", "(", "h", "/", "modulo", ")", "*", "modulo", "-", "h", ")", ")", ")", "(", "L", ")", "\n", "E", "=", "model", "(", "L", ")", "\n", "E", "=", "E", "[", "...", ",", ":", "h", "*", "sf", ",", ":", "w", "*", "sf", "]", "\n", "", "else", ":", "\n", "        ", "top", "=", "slice", "(", "0", ",", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "bottom", "=", "slice", "(", "h", "-", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "h", ")", "\n", "left", "=", "slice", "(", "0", ",", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "right", "=", "slice", "(", "w", "-", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "w", ")", "\n", "Ls", "=", "[", "L", "[", "...", ",", "top", ",", "left", "]", ",", "L", "[", "...", ",", "top", ",", "right", "]", ",", "L", "[", "...", ",", "bottom", ",", "left", "]", ",", "L", "[", "...", ",", "bottom", ",", "right", "]", "]", "\n", "\n", "if", "h", "*", "w", "<=", "4", "*", "(", "min_size", "**", "2", ")", ":", "\n", "            ", "Es", "=", "[", "model", "(", "Ls", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "", "else", ":", "\n", "            ", "Es", "=", "[", "test_split_fn", "(", "model", ",", "Ls", "[", "i", "]", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "\n", "", "b", ",", "c", "=", "Es", "[", "0", "]", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "E", "=", "torch", ".", "zeros", "(", "b", ",", "c", ",", "sf", "*", "h", ",", "sf", "*", "w", ")", ".", "type_as", "(", "L", ")", "\n", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "0", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "1", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "2", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "3", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split": [[172, 175], ["utils_model.test_split_fn"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split_fn"], ["def", "test_split", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E", "=", "test_split_fn", "(", "model", ",", "L", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_x8": [[184, 194], ["range", "torch.stack", "torch.stack.mean", "utils_model.test_pad", "len", "utils.utils_image.augment_img_tensor4", "range", "utils.utils_image.augment_img_tensor4", "utils.utils_image.augment_img_tensor4"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_pad", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4"], ["def", "test_x8", "(", "model", ",", "L", ",", "modulo", "=", "1", ",", "sf", "=", "1", ")", ":", "\n", "    ", "E_list", "=", "[", "test_pad", "(", "model", ",", "util", ".", "augment_img_tensor4", "(", "L", ",", "mode", "=", "i", ")", ",", "modulo", "=", "modulo", ",", "sf", "=", "sf", ")", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "E_list", ")", ")", ":", "\n", "        ", "if", "i", "==", "3", "or", "i", "==", "5", ":", "\n", "            ", "E_list", "[", "i", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "i", "]", ",", "mode", "=", "8", "-", "i", ")", "\n", "", "else", ":", "\n", "            ", "E_list", "[", "i", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "i", "]", ",", "mode", "=", "i", ")", "\n", "", "", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split_x8": [[203, 213], ["enumerate", "torch.stack", "torch.stack.mean", "utils_model.test_split_fn", "range", "utils.utils_image.augment_img_tensor4", "range", "len", "utils.utils_image.augment_img_tensor4", "utils.utils_image.augment_img_tensor4"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.test_split_fn", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.augment_img_tensor4"], ["def", "test_split_x8", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E_list", "=", "[", "test_split_fn", "(", "model", ",", "util", ".", "augment_img_tensor4", "(", "L", ",", "mode", "=", "i", ")", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "range", "(", "len", "(", "E_list", ")", ")", ")", ":", "\n", "        ", "if", "i", "==", "3", "or", "i", "==", "5", ":", "\n", "            ", "E_list", "[", "k", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "k", "]", ",", "mode", "=", "8", "-", "i", ")", "\n", "", "else", ":", "\n", "            ", "E_list", "[", "k", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "k", "]", ",", "mode", "=", "i", ")", "\n", "", "", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.print_model": [[232, 235], ["utils_model.describe_model", "print"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.describe_model"], ["def", "print_model", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_model", "(", "model", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.print_params": [[240, 243], ["utils_model.describe_params", "print"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.describe_params"], ["", "def", "print_params", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_params", "(", "model", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.info_model": [[255, 258], ["utils_model.describe_model"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.describe_model"], ["def", "info_model", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_model", "(", "model", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.info_params": [[263, 266], ["utils_model.describe_params"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.describe_params"], ["", "def", "info_params", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_params", "(", "model", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.describe_model": [[278, 286], ["isinstance", "sum", "str", "map", "model.parameters", "x.numel"], "function", ["None"], ["def", "describe_model", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "'models name: {}'", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", "+", "'\\n'", "\n", "msg", "+=", "'Params number: {}'", ".", "format", "(", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", ")", "+", "'\\n'", "\n", "msg", "+=", "'Net structure:\\n{}'", ".", "format", "(", "str", "(", "model", ")", ")", "+", "'\\n'", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_model.describe_params": [[291, 301], ["isinstance", "model.state_dict().items", "model.state_dict", "param.data.clone().float", "param.data.clone", "param.data.clone().float.mean", "param.data.clone().float.min", "param.data.clone().float.max", "param.data.clone().float.std"], "function", ["None"], ["", "def", "describe_params", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "' | {:^6s} | {:^6s} | {:^6s} | {:^6s} || {:<20s}'", ".", "format", "(", "'mean'", ",", "'min'", ",", "'max'", ",", "'std'", ",", "'shape'", ",", "'param_name'", ")", "+", "'\\n'", "\n", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "'num_batches_tracked'", "in", "name", ":", "\n", "            ", "v", "=", "param", ".", "data", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "msg", "+=", "' | {:>6.3f} | {:>6.3f} | {:>6.3f} | {:>6.3f} | {} || {:s}'", ".", "format", "(", "v", ".", "mean", "(", ")", ",", "v", ".", "min", "(", ")", ",", "v", ".", "max", "(", ")", ",", "v", ".", "std", "(", ")", ",", "v", ".", "shape", ",", "name", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_matconvnet.weights2tensor": [[20, 66], ["torch.from_numpy", "x.flatten.transpose", "numpy.squeeze", "numpy.ascontiguousarray", "x.flatten.transpose", "x.flatten.reshape", "x.flatten.flatten"], "function", ["None"], ["def", "weights2tensor", "(", "x", ",", "squeeze", "=", "False", ",", "in_features", "=", "None", ",", "out_features", "=", "None", ")", ":", "\n", "    ", "\"\"\"Modified version of https://github.com/albanie/pytorch-mcn\n    Adjust memory layout and load weights as torch tensor\n    Args:\n        x (ndaray): a numpy array, corresponding to a set of network weights\n           stored in column major order\n        squeeze (bool) [False]: whether to squeeze the tensor (i.e. remove\n           singletons from the trailing dimensions. So after converting to\n           pytorch layout (C_out, C_in, H, W), if the shape is (A, B, 1, 1)\n           it will be reshaped to a matrix with shape (A,B).\n        in_features (int :: None): used to reshape weights for a linear block.\n        out_features (int :: None): used to reshape weights for a linear block.\n    Returns:\n        torch.tensor: a permuted sets of weights, matching the pytorch layout\n        convention\n    \"\"\"", "\n", "if", "x", ".", "ndim", "==", "4", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "# for FFDNet, pixel-shuffle layer", "\n", "#        if x.shape[1]==13:", "\n", "#            x=x[:,[0,2,1,3,  4,6,5,7, 8,10,9,11, 12],:,:]", "\n", "#        if x.shape[0]==12:   ", "\n", "#            x=x[[0,2,1,3,  4,6,5,7, 8,10,9,11],:,:,:]", "\n", "#        if x.shape[1]==5:", "\n", "#            x=x[:,[0,2,1,3,  4],:,:]", "\n", "#        if x.shape[0]==4:   ", "\n", "#            x=x[[0,2,1,3],:,:,:]", "\n", "## for SRMD, pixel-shuffle layer", "\n", "#        if x.shape[0]==12:   ", "\n", "#            x=x[[0,2,1,3,  4,6,5,7, 8,10,9,11],:,:,:]", "\n", "#        if x.shape[0]==27:", "\n", "#            x=x[[0,3,6,1,4,7,2,5,8, 0+9,3+9,6+9,1+9,4+9,7+9,2+9,5+9,8+9, 0+18,3+18,6+18,1+18,4+18,7+18,2+18,5+18,8+18],:,:,:]", "\n", "#        if x.shape[0]==48:   ", "\n", "#            x=x[[0,4,8,12,1,5,9,13,2,6,10,14,3,7,11,15,  0+16,4+16,8+16,12+16,1+16,5+16,9+16,13+16,2+16,6+16,10+16,14+16,3+16,7+16,11+16,15+16,  0+32,4+32,8+32,12+32,1+32,5+32,9+32,13+32,2+32,6+32,10+32,14+32,3+32,7+32,11+32,15+32],:,:,:]", "\n", "\n", "", "elif", "x", ".", "ndim", "==", "3", ":", "# add by Kai", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "x", "=", "x", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "", "elif", "x", ".", "ndim", "==", "2", ":", "\n", "        ", "if", "x", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "", "", "if", "squeeze", ":", "\n", "        ", "if", "in_features", "and", "out_features", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "(", "out_features", ",", "in_features", ")", ")", "\n", "", "x", "=", "np", ".", "squeeze", "(", "x", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_matconvnet.save_model": [[68, 73], ["network.state_dict", "network.state_dict.items", "torch.save", "param.cpu"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["", "def", "save_model", "(", "network", ",", "save_path", ")", ":", "\n", "    ", "state_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "for", "key", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "state_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_params.show_kv": [[7, 10], ["net.items", "print"], "function", ["None"], ["def", "show_kv", "(", "net", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "net", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_params.rgb2gray_net": [[64, 85], ["in_new_filter.unsqueeze_"], "function", ["None"], ["def", "rgb2gray_net", "(", "net", ",", "only_input", "=", "True", ")", ":", "\n", "\n", "    ", "if", "only_input", ":", "\n", "        ", "in_filter", "=", "net", "[", "'0.weight'", "]", "\n", "in_new_filter", "=", "in_filter", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "0.2989", "+", "in_filter", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "0.587", "+", "in_filter", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "0.114", "\n", "in_new_filter", ".", "unsqueeze_", "(", "1", ")", "\n", "net", "[", "'0.weight'", "]", "=", "in_new_filter", "\n", "\n", "#    out_filter = pretrained_net['model.13.weight']", "\n", "#    out_new_filter = out_filter[0, :, :, :] * 0.2989 + out_filter[1, :, :, :] * 0.587 + \\", "\n", "#        out_filter[2, :, :, :] * 0.114", "\n", "#    out_new_filter.unsqueeze_(0)", "\n", "#    crt_net['model.13.weight'] = out_new_filter", "\n", "#    out_bias = pretrained_net['model.13.bias']", "\n", "#    out_new_bias = out_bias[0] * 0.2989 + out_bias[1] * 0.587 + out_bias[2] * 0.114", "\n", "#    out_new_bias = torch.Tensor(1).fill_(out_new_bias)", "\n", "#    crt_net['model.13.bias'] = out_new_bias", "\n", "\n", "#    torch.save(crt_net, '../pretrained_tmp.pth')", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.NoneDict.__missing__": [[54, 56], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.loadmat": [[7, 16], ["scipy.loadmat", "utils_mat.dict_to_nonedict", "utils_mat._check_keys"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.loadmat", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict_to_nonedict", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat._check_keys"], ["def", "loadmat", "(", "filename", ")", ":", "\n", "    ", "'''\n    this function should be called instead of direct spio.loadmat\n    as it cures the problem of not properly recovering python dictionaries\n    from mat files. It calls the function check keys to cure all entries\n    which are still mat-objects\n    '''", "\n", "data", "=", "spio", ".", "loadmat", "(", "filename", ",", "struct_as_record", "=", "False", ",", "squeeze_me", "=", "True", ")", "\n", "return", "dict_to_nonedict", "(", "_check_keys", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat._check_keys": [[17, 26], ["isinstance", "utils_mat._todict"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat._todict"], ["", "def", "_check_keys", "(", "dict", ")", ":", "\n", "    ", "'''\n    checks if entries in dictionary are mat-objects. If yes\n    todict is called to change them to nested dictionaries\n    '''", "\n", "for", "key", "in", "dict", ":", "\n", "        ", "if", "isinstance", "(", "dict", "[", "key", "]", ",", "spio", ".", "matlab", ".", "mio5_params", ".", "mat_struct", ")", ":", "\n", "            ", "dict", "[", "key", "]", "=", "_todict", "(", "dict", "[", "key", "]", ")", "\n", "", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat._todict": [[27, 39], ["isinstance", "utils_mat._todict"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat._todict"], ["", "def", "_todict", "(", "matobj", ")", ":", "\n", "    ", "'''\n    A recursive function which constructs from matobjects nested dictionaries\n    '''", "\n", "dict", "=", "{", "}", "\n", "for", "strg", "in", "matobj", ".", "_fieldnames", ":", "\n", "        ", "elem", "=", "matobj", ".", "__dict__", "[", "strg", "]", "\n", "if", "isinstance", "(", "elem", ",", "spio", ".", "matlab", ".", "mio5_params", ".", "mat_struct", ")", ":", "\n", "            ", "dict", "[", "strg", "]", "=", "_todict", "(", "elem", ")", "\n", "", "else", ":", "\n", "            ", "dict", "[", "strg", "]", "=", "elem", "\n", "", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.dict_to_nonedict": [[41, 51], ["isinstance", "dict", "opt.items", "utils_mat.NoneDict", "isinstance", "utils_mat.dict_to_nonedict", "utils_mat.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict_to_nonedict", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict_to_nonedict"], ["", "def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.mat2json": [[58, 89], ["utils_mat.loadmat", "pd.Series().to_json.pop", "pd.Series().to_json.pop", "pd.Series().to_json.pop", "pandas.Series().to_json", "pandas.Series", "open", "f.write", "os.path.splitext", "os.path.split"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.loadmat", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write"], ["", "", "def", "mat2json", "(", "mat_path", "=", "None", ",", "filepath", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Converts .mat file to .json and writes new file\n    Parameters\n    ----------\n    mat_path: Str\n        path/filename .mat\u5b58\u653e\u8def\u5f84\n    filepath: Str\n        \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6210json, \u6dfb\u52a0\u8fd9\u4e00\u8def\u5f84. \u5426\u5219\u4e0d\u4fdd\u5b58\n    Returns\n        \u8fd4\u56de\u8f6c\u5316\u7684\u5b57\u5178\n    -------\n    None\n    Examples\n    --------\n    >>> mat2json(blah blah)\n    \"\"\"", "\n", "\n", "matlabFile", "=", "loadmat", "(", "mat_path", ")", "\n", "#pop all those dumb fields that don't let you jsonize file", "\n", "matlabFile", ".", "pop", "(", "'__header__'", ")", "\n", "matlabFile", ".", "pop", "(", "'__version__'", ")", "\n", "matlabFile", ".", "pop", "(", "'__globals__'", ")", "\n", "#jsonize the file - orientation is 'index'", "\n", "matlabFile", "=", "pd", ".", "Series", "(", "matlabFile", ")", ".", "to_json", "(", ")", "\n", "\n", "if", "filepath", ":", "\n", "        ", "json_path", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "mat_path", ")", "[", "1", "]", ")", "[", "0", "]", "+", "'.json'", "\n", "with", "open", "(", "json_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "matlabFile", ")", "\n", "", "", "return", "matlabFile", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.__init__": [[38, 45], ["enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ")", ":", "\n", "        ", "self", ".", "alphabet", "=", "alphabet", "+", "'-'", "# for `-1` index", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "alphabet", ")", ":", "\n", "# NOTE: 0 is reserved for 'blank' required by wrap_ctc", "\n", "            ", "self", ".", "dict", "[", "char", "]", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode": [[46, 69], ["isinstance", "isinstance", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "util.strLabelConverter.encode", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode"], ["", "", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n\n        Args:\n            text (str or list of str): texts to convert.\n\n        Returns:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n        \"\"\"", "\n", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "from", "IPython", "import", "embed", "\n", "# embed()", "\n", "text", "=", "[", "\n", "self", ".", "dict", "[", "char", "]", "\n", "for", "char", "in", "text", "\n", "]", "\n", "length", "=", "[", "len", "(", "text", ")", "]", "\n", "", "elif", "isinstance", "(", "text", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "length", "=", "[", "len", "(", "s", ")", "for", "s", "in", "text", "]", "\n", "text", "=", "''", ".", "join", "(", "text", ")", "\n", "text", ",", "_", "=", "self", ".", "encode", "(", "text", ")", "\n", "", "return", "(", "torch", ".", "IntTensor", "(", "text", ")", ",", "torch", ".", "IntTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode": [[70, 106], ["length.numel", "range", "t.numel", "t.numel", "range", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "util.strLabelConverter.decode", "char_list.append", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ",", "raw", "=", "False", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ")", "\n", "if", "raw", ":", "\n", "                ", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "-", "1", "]", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                    ", "if", "t", "[", "i", "]", "!=", "0", "and", "(", "not", "(", "i", ">", "0", "and", "t", "[", "i", "-", "1", "]", "==", "t", "[", "i", "]", ")", ")", ":", "\n", "                        ", "char_list", ".", "append", "(", "self", ".", "alphabet", "[", "t", "[", "i", "]", "-", "1", "]", ")", "\n", "", "", "return", "''", ".", "join", "(", "char_list", ")", "\n", "", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "IntTensor", "(", "[", "l", "]", ")", ",", "raw", "=", "raw", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.__init__": [[111, 113], ["util.averager.reset"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add": [[114, 124], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.reset": [[125, 128], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.val": [[129, 134], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt": [[12, 25], ["str_.replace.lower", "str_.replace.replace"], "function", ["None"], ["def", "str_filt", "(", "str_", ",", "voc_type", ")", ":", "\n", "    ", "alpha_dict", "=", "{", "\n", "'digit'", ":", "string", ".", "digits", ",", "\n", "'lower'", ":", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ",", "\n", "'upper'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", ",", "\n", "'all'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", "+", "string", ".", "punctuation", "\n", "}", "\n", "if", "voc_type", "==", "'lower'", ":", "\n", "        ", "str_", "=", "str_", ".", "lower", "(", ")", "\n", "", "for", "char", "in", "str_", ":", "\n", "        ", "if", "char", "not", "in", "alpha_dict", "[", "voc_type", "]", ":", "#voc_type", "\n", "            ", "str_", "=", "str_", ".", "replace", "(", "char", ",", "''", ")", "\n", "", "", "return", "str_", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.oneHot": [[136, 147], ["v_length.size", "v_length.max", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "v[].view().long", "v_onehot[].scatter_", "torch.FloatTensor", "torch.FloatTensor", "v[].view"], "function", ["None"], ["", "", "def", "oneHot", "(", "v", ",", "v_length", ",", "nc", ")", ":", "\n", "    ", "batchSize", "=", "v_length", ".", "size", "(", "0", ")", "\n", "maxLength", "=", "v_length", ".", "max", "(", ")", "\n", "v_onehot", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "maxLength", ",", "nc", ")", ".", "fill_", "(", "0", ")", "\n", "acc", "=", "0", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "        ", "length", "=", "v_length", "[", "i", "]", "\n", "label", "=", "v", "[", "acc", ":", "acc", "+", "length", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "v_onehot", "[", "i", ",", ":", "length", "]", ".", "scatter_", "(", "1", ",", "label", ",", "1.0", ")", "\n", "acc", "+=", "length", "\n", "", "return", "v_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.loadData": [[149, 152], ["v.resize_().copy_", "v.resize_", "data.size"], "function", ["None"], ["", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "# v.data.resize_(data.size()).copy_(data)", "\n", "    ", "v", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.prettyPrint": [[153, 157], ["print", "print", "str", "v.data.type", "v.size", "v.max", "v.min", "v.mean"], "function", ["None"], ["", "def", "prettyPrint", "(", "v", ")", ":", "\n", "    ", "print", "(", "'Size {0}, Type: {1}'", ".", "format", "(", "str", "(", "v", ".", "size", "(", ")", ")", ",", "v", ".", "data", ".", "type", "(", ")", ")", ")", "\n", "print", "(", "'| Max: %f | Min: %f | Mean: %f'", "%", "(", "v", ".", "max", "(", ")", ".", "data", "[", "0", "]", ",", "v", ".", "min", "(", ")", ".", "data", "[", "0", "]", ",", "\n", "v", ".", "mean", "(", ")", ".", "data", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.assureRatio": [[159, 166], ["main.size", "torch.UpsamplingBilinear2d", "nn.UpsamplingBilinear2d."], "function", ["None"], ["", "def", "assureRatio", "(", "img", ")", ":", "\n", "    ", "\"\"\"Ensure imgH <= imgW.\"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "if", "h", ">", "w", ":", "\n", "        ", "main", "=", "nn", ".", "UpsamplingBilinear2d", "(", "size", "=", "(", "h", ",", "h", ")", ",", "scale_factor", "=", "None", ")", "\n", "img", "=", "main", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.NoneDict.__missing__": [[179, 181], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.get_timestamp": [[19, 21], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'_%y%m%d_%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.parse": [[23, 96], ["json.loads", "opt[].items", "opt[].items", "os.path.join", "os.path.join", "print", "open", "os.path.join", "os.path.join", "os.path.join", "phase.split", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "str", "line.split"], "function", ["None"], ["", "def", "parse", "(", "opt_path", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "# ----------------------------------------", "\n", "# remove comments starting with '//'", "\n", "# ----------------------------------------", "\n", "    ", "json_str", "=", "''", "\n", "with", "open", "(", "opt_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'//'", ")", "[", "0", "]", "+", "'\\n'", "\n", "json_str", "+=", "line", "\n", "\n", "# ----------------------------------------", "\n", "# initialize opt", "\n", "# ----------------------------------------", "\n", "", "", "opt", "=", "json", ".", "loads", "(", "json_str", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "opt", "[", "'opt_path'", "]", "=", "opt_path", "\n", "opt", "[", "'is_train'", "]", "=", "is_train", "\n", "\n", "# ----------------------------------------", "\n", "# set default", "\n", "# ----------------------------------------", "\n", "if", "'merge_bn'", "not", "in", "opt", ":", "\n", "        ", "opt", "[", "'merge_bn'", "]", "=", "False", "\n", "opt", "[", "'merge_bn_startpoint'", "]", "=", "-", "1", "\n", "\n", "", "if", "'scale'", "not", "in", "opt", ":", "\n", "        ", "opt", "[", "'scale'", "]", "=", "1", "\n", "\n", "# ----------------------------------------", "\n", "# datasets", "\n", "# ----------------------------------------", "\n", "", "for", "phase", ",", "dataset", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "phase", "=", "phase", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset", "[", "'phase'", "]", "=", "phase", "\n", "dataset", "[", "'scale'", "]", "=", "opt", "[", "'scale'", "]", "# broadcast", "\n", "dataset", "[", "'n_channels'", "]", "=", "opt", "[", "'n_channels'", "]", "# broadcast", "\n", "if", "'dataroot_H'", "in", "dataset", "and", "dataset", "[", "'dataroot_H'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_H'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_H'", "]", ")", "\n", "", "if", "'dataroot_L'", "in", "dataset", "and", "dataset", "[", "'dataroot_L'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_L'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_L'", "]", ")", "\n", "\n", "# ----------------------------------------", "\n", "# path", "\n", "# ----------------------------------------", "\n", "", "", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "path", "and", "key", "in", "opt", "[", "'path'", "]", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "key", "]", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "\n", "", "", "path_task", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "opt", "[", "'task'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'task'", "]", "=", "path_task", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "path_task", "\n", "opt", "[", "'path'", "]", "[", "'options'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'options'", ")", "\n", "\n", "if", "is_train", ":", "\n", "        ", "opt", "[", "'path'", "]", "[", "'models'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'models'", ")", "\n", "opt", "[", "'path'", "]", "[", "'images'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'images'", ")", "\n", "", "else", ":", "# test", "\n", "        ", "opt", "[", "'path'", "]", "[", "'images'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'test_images'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# network", "\n", "# ----------------------------------------", "\n", "", "opt", "[", "'netG'", "]", "[", "'scale'", "]", "=", "opt", "[", "'scale'", "]", "if", "'scale'", "in", "opt", "else", "1", "\n", "\n", "# ----------------------------------------", "\n", "# GPU devices", "\n", "# ----------------------------------------", "\n", "gpu_list", "=", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt", "[", "'gpu_ids'", "]", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu_list", "\n", "print", "(", "'export CUDA_VISIBLE_DEVICES='", "+", "gpu_list", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.find_last_checkpoint": [[98, 120], ["glob.glob", "os.path.join", "max", "os.path.join", "re.findall", "iter_exist.append", "int"], "function", ["None"], ["", "def", "find_last_checkpoint", "(", "save_dir", ",", "net_type", "=", "'G'", ")", ":", "\n", "    ", "\"\"\"\n    Args: \n        save_dir: model folder\n        net_type: 'G' or 'D'\n\n    Return:\n        init_iter: iteration number\n        init_path: model path\n    \"\"\"", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'*_{}.pth'", ".", "format", "(", "net_type", ")", ")", ")", "\n", "if", "file_list", ":", "\n", "        ", "iter_exist", "=", "[", "]", "\n", "for", "file_", "in", "file_list", ":", "\n", "            ", "iter_current", "=", "re", ".", "findall", "(", "r\"(\\d+)_{}.pth\"", ".", "format", "(", "net_type", ")", ",", "file_", ")", "\n", "iter_exist", ".", "append", "(", "int", "(", "iter_current", "[", "0", "]", ")", ")", "\n", "", "init_iter", "=", "max", "(", "iter_exist", ")", "\n", "init_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.pth'", ".", "format", "(", "init_iter", ",", "net_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "init_iter", "=", "0", "\n", "init_path", "=", "None", "\n", "", "return", "init_iter", ",", "init_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save": [[129, 137], ["os.path.split", "os.path.splitext", "os.path.join", "open", "json.dump", "utils_option.get_timestamp"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.get_timestamp"], ["def", "save", "(", "opt", ")", ":", "\n", "    ", "opt_path", "=", "opt", "[", "'opt_path'", "]", "\n", "opt_path_copy", "=", "opt", "[", "'path'", "]", "[", "'options'", "]", "\n", "dirname", ",", "filename_ext", "=", "os", ".", "path", ".", "split", "(", "opt_path", ")", "\n", "filename", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "filename_ext", ")", "\n", "dump_path", "=", "os", ".", "path", ".", "join", "(", "opt_path_copy", ",", "filename", "+", "get_timestamp", "(", ")", "+", "ext", ")", "\n", "with", "open", "(", "dump_path", ",", "'w'", ")", "as", "dump_file", ":", "\n", "        ", "json", ".", "dump", "(", "opt", ",", "dump_file", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict2str": [[146, 156], ["opt.items", "isinstance", "utils_option.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict2str"], ["def", "dict2str", "(", "opt", ",", "indent_l", "=", "1", ")", ":", "\n", "    ", "msg", "=", "''", "\n", "for", "k", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "':[\\n'", "\n", "msg", "+=", "dict2str", "(", "v", ",", "indent_l", "+", "1", ")", "\n", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "']\\n'", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict_to_nonedict": [[166, 176], ["isinstance", "dict", "opt.items", "utils_option.NoneDict", "isinstance", "utils_option.dict_to_nonedict", "utils_option.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict_to_nonedict", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.dict_to_nonedict"], ["def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.anisotropic_Gaussian": [[35, 54], ["numpy.dot", "numpy.array", "numpy.array", "numpy.dot", "utils_sisr.gm_blur_kernel", "numpy.array", "numpy.array", "numpy.dot", "numpy.linalg.inv", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.gm_blur_kernel"], ["def", "anisotropic_Gaussian", "(", "ksize", "=", "15", ",", "theta", "=", "np", ".", "pi", ",", "l1", "=", "6", ",", "l2", "=", "6", ")", ":", "\n", "    ", "\"\"\" generate an anisotropic Gaussian kernel\n    Args:\n        ksize : e.g., 15, kernel size\n        theta : [0,  pi], rotation angle range\n        l1    : [0.1,50], scaling of eigenvalues\n        l2    : [0.1,l1], scaling of eigenvalues\n        If l1 = l2, will get an isotropic Gaussian kernel.\n    Returns:\n        k     : kernel\n    \"\"\"", "\n", "\n", "v", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", ",", "np", ".", "array", "(", "[", "1.", ",", "0.", "]", ")", ")", "\n", "V", "=", "np", ".", "array", "(", "[", "[", "v", "[", "0", "]", ",", "v", "[", "1", "]", "]", ",", "[", "v", "[", "1", "]", ",", "-", "v", "[", "0", "]", "]", "]", ")", "\n", "D", "=", "np", ".", "array", "(", "[", "[", "l1", ",", "0", "]", ",", "[", "0", ",", "l2", "]", "]", ")", "\n", "Sigma", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "V", ",", "D", ")", ",", "np", ".", "linalg", ".", "inv", "(", "V", ")", ")", "\n", "k", "=", "gm_blur_kernel", "(", "mean", "=", "[", "0", ",", "0", "]", ",", "cov", "=", "Sigma", ",", "size", "=", "ksize", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.gm_blur_kernel": [[56, 67], ["numpy.zeros", "range", "range", "numpy.sum", "scipy.multivariate_normal.pdf"], "function", ["None"], ["", "def", "gm_blur_kernel", "(", "mean", ",", "cov", ",", "size", "=", "15", ")", ":", "\n", "    ", "center", "=", "size", "/", "2.0", "+", "0.5", "\n", "k", "=", "np", ".", "zeros", "(", "[", "size", ",", "size", "]", ")", "\n", "for", "y", "in", "range", "(", "size", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "size", ")", ":", "\n", "            ", "cy", "=", "y", "-", "center", "+", "1", "\n", "cx", "=", "x", "-", "center", "+", "1", "\n", "k", "[", "y", ",", "x", "]", "=", "ss", ".", "multivariate_normal", ".", "pdf", "(", "[", "cx", ",", "cy", "]", ",", "mean", "=", "mean", ",", "cov", "=", "cov", ")", "\n", "\n", "", "", "k", "=", "k", "/", "np", ".", "sum", "(", "k", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.get_pca_matrix": [[76, 89], ["numpy.dot", "scipy.linalg.eigh", "scipy.linalg.eigh", "scipy.linalg.eigh"], "function", ["None"], ["def", "get_pca_matrix", "(", "x", ",", "dim_pca", "=", "15", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: 225x10000 matrix\n        dim_pca: 15\n    Returns:\n        pca_matrix: 15x225\n    \"\"\"", "\n", "C", "=", "np", ".", "dot", "(", "x", ",", "x", ".", "T", ")", "\n", "w", ",", "v", "=", "scipy", ".", "linalg", ".", "eigh", "(", "C", ")", "\n", "pca_matrix", "=", "v", "[", ":", ",", "-", "dim_pca", ":", "]", ".", "T", "\n", "\n", "return", "pca_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.show_pca": [[91, 98], ["range", "numpy.reshape", "utils.utils_image.surf", "int", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.surf"], ["", "def", "show_pca", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    x: PCA projection matrix, e.g., 15x225\n    \"\"\"", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "xc", "=", "np", ".", "reshape", "(", "x", "[", "i", ",", ":", "]", ",", "(", "int", "(", "np", ".", "sqrt", "(", "x", ".", "shape", "[", "1", "]", ")", ")", ",", "-", "1", ")", ",", "order", "=", "\"F\"", ")", "\n", "util", ".", "surf", "(", "xc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cal_pca_matrix": [[100, 121], ["numpy.zeros", "range", "utils_sisr.get_pca_matrix", "scipy.savemat", "utils_sisr.anisotropic_Gaussian", "numpy.reshape", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.get_pca_matrix", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.anisotropic_Gaussian"], ["", "", "def", "cal_pca_matrix", "(", "path", "=", "'PCA_matrix.mat'", ",", "ksize", "=", "15", ",", "l_max", "=", "12.0", ",", "dim_pca", "=", "15", ",", "num_samples", "=", "500", ")", ":", "\n", "    ", "kernels", "=", "np", ".", "zeros", "(", "[", "ksize", "*", "ksize", ",", "num_samples", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "\n", "        ", "theta", "=", "np", ".", "pi", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "l1", "=", "0.1", "+", "l_max", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "l2", "=", "0.1", "+", "(", "l1", "-", "0.1", ")", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "k", "=", "anisotropic_Gaussian", "(", "ksize", "=", "ksize", ",", "theta", "=", "theta", "[", "0", "]", ",", "l1", "=", "l1", "[", "0", "]", ",", "l2", "=", "l2", "[", "0", "]", ")", "\n", "\n", "# util.imshow(k)", "\n", "\n", "kernels", "[", ":", ",", "i", "]", "=", "np", ".", "reshape", "(", "k", ",", "(", "-", "1", ")", ",", "order", "=", "\"F\"", ")", "# k.flatten(order='F')", "\n", "\n", "# io.savemat('k.mat', {'k': kernels})", "\n", "\n", "", "pca_matrix", "=", "get_pca_matrix", "(", "kernels", ",", "dim_pca", "=", "dim_pca", ")", "\n", "\n", "io", ".", "savemat", "(", "path", ",", "{", "'p'", ":", "pca_matrix", "}", ")", "\n", "\n", "return", "pca_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.shifted_anisotropic_Gaussian": [[130, 170], ["numpy.array", "numpy.array", "numpy.diag", "numpy.array", "numpy.meshgrid", "ZZ.transpose", "numpy.random.rand", "numpy.linalg.inv", "range", "range", "numpy.stack", "numpy.exp", "numpy.sum", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.squeeze", "numpy.sin"], "function", ["None"], ["def", "shifted_anisotropic_Gaussian", "(", "k_size", "=", "np", ".", "array", "(", "[", "15", ",", "15", "]", ")", ",", "scale_factor", "=", "np", ".", "array", "(", "[", "4", ",", "4", "]", ")", ",", "min_var", "=", "0.6", ",", "max_var", "=", "10.", ",", "noise_level", "=", "0", ")", ":", "\n", "    ", "\"\"\"\"\n    # modified version of https://github.com/assafshocher/BlindSR_dataset_generator\n    # Kai Zhang\n    # min_var = 0.175 * sf  # variance of the gaussian kernel will be sampled between min_var and max_var\n    # max_var = 2.5 * sf\n    \"\"\"", "\n", "# Set random eigen-vals (lambdas) and angle (theta) for COV matrix", "\n", "lambda_1", "=", "min_var", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "max_var", "-", "min_var", ")", "\n", "lambda_2", "=", "min_var", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "max_var", "-", "min_var", ")", "\n", "theta", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "np", ".", "pi", "# random theta", "\n", "noise", "=", "-", "noise_level", "+", "np", ".", "random", ".", "rand", "(", "*", "k_size", ")", "*", "noise_level", "*", "2", "\n", "\n", "# Set COV matrix using Lambdas and Theta", "\n", "LAMBDA", "=", "np", ".", "diag", "(", "[", "lambda_1", ",", "lambda_2", "]", ")", "\n", "Q", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "SIGMA", "=", "Q", "@", "LAMBDA", "@", "Q", ".", "T", "\n", "INV_SIGMA", "=", "np", ".", "linalg", ".", "inv", "(", "SIGMA", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "# Set expectation position (shifting kernel for aligned image)", "\n", "MU", "=", "k_size", "//", "2", "-", "0.5", "*", "(", "scale_factor", "-", "1", ")", "# - 0.5 * (scale_factor - k_size % 2)", "\n", "MU", "=", "MU", "[", "None", ",", "None", ",", ":", ",", "None", "]", "\n", "\n", "# Create meshgrid for Gaussian", "\n", "[", "X", ",", "Y", "]", "=", "np", ".", "meshgrid", "(", "range", "(", "k_size", "[", "0", "]", ")", ",", "range", "(", "k_size", "[", "1", "]", ")", ")", "\n", "Z", "=", "np", ".", "stack", "(", "[", "X", ",", "Y", "]", ",", "2", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "# Calcualte Gaussian for every pixel of the kernel", "\n", "ZZ", "=", "Z", "-", "MU", "\n", "ZZ_t", "=", "ZZ", ".", "transpose", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "raw_kernel", "=", "np", ".", "exp", "(", "-", "0.5", "*", "np", ".", "squeeze", "(", "ZZ_t", "@", "INV_SIGMA", "@", "ZZ", ")", ")", "*", "(", "1", "+", "noise", ")", "\n", "\n", "# shift the kernel so it will be centered", "\n", "#raw_kernel_centered = kernel_shift(raw_kernel, scale_factor)", "\n", "\n", "# Normalize the kernel and return", "\n", "#kernel = raw_kernel_centered / np.sum(raw_kernel_centered)", "\n", "kernel", "=", "raw_kernel", "/", "np", ".", "sum", "(", "raw_kernel", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.gen_kernel": [[172, 214], ["numpy.array", "numpy.array", "random.choice", "numpy.array", "numpy.diag", "numpy.array", "numpy.meshgrid", "ZZ.transpose", "numpy.random.rand", "numpy.linalg.inv", "range", "range", "numpy.stack", "numpy.exp", "numpy.sum", "numpy.random.rand", "numpy.random.rand", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.squeeze", "numpy.sin"], "function", ["None"], ["", "def", "gen_kernel", "(", "k_size", "=", "np", ".", "array", "(", "[", "25", ",", "25", "]", ")", ",", "scale_factor", "=", "np", ".", "array", "(", "[", "4", ",", "4", "]", ")", ",", "min_var", "=", "0.6", ",", "max_var", "=", "12.", ",", "noise_level", "=", "0", ")", ":", "\n", "    ", "\"\"\"\"\n    # modified version of https://github.com/assafshocher/BlindSR_dataset_generator\n    # Kai Zhang\n    # min_var = 0.175 * sf  # variance of the gaussian kernel will be sampled between min_var and max_var\n    # max_var = 2.5 * sf\n    \"\"\"", "\n", "sf", "=", "random", ".", "choice", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "scale_factor", "=", "np", ".", "array", "(", "[", "sf", ",", "sf", "]", ")", "\n", "# Set random eigen-vals (lambdas) and angle (theta) for COV matrix", "\n", "lambda_1", "=", "min_var", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "max_var", "-", "min_var", ")", "\n", "lambda_2", "=", "min_var", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "max_var", "-", "min_var", ")", "\n", "theta", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "np", ".", "pi", "# random theta", "\n", "noise", "=", "0", "#-noise_level + np.random.rand(*k_size) * noise_level * 2", "\n", "\n", "# Set COV matrix using Lambdas and Theta", "\n", "LAMBDA", "=", "np", ".", "diag", "(", "[", "lambda_1", ",", "lambda_2", "]", ")", "\n", "Q", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "SIGMA", "=", "Q", "@", "LAMBDA", "@", "Q", ".", "T", "\n", "INV_SIGMA", "=", "np", ".", "linalg", ".", "inv", "(", "SIGMA", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "# Set expectation position (shifting kernel for aligned image)", "\n", "MU", "=", "k_size", "//", "2", "-", "0.5", "*", "(", "scale_factor", "-", "1", ")", "# - 0.5 * (scale_factor - k_size % 2)", "\n", "MU", "=", "MU", "[", "None", ",", "None", ",", ":", ",", "None", "]", "\n", "\n", "# Create meshgrid for Gaussian", "\n", "[", "X", ",", "Y", "]", "=", "np", ".", "meshgrid", "(", "range", "(", "k_size", "[", "0", "]", ")", ",", "range", "(", "k_size", "[", "1", "]", ")", ")", "\n", "Z", "=", "np", ".", "stack", "(", "[", "X", ",", "Y", "]", ",", "2", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "# Calcualte Gaussian for every pixel of the kernel", "\n", "ZZ", "=", "Z", "-", "MU", "\n", "ZZ_t", "=", "ZZ", ".", "transpose", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "raw_kernel", "=", "np", ".", "exp", "(", "-", "0.5", "*", "np", ".", "squeeze", "(", "ZZ_t", "@", "INV_SIGMA", "@", "ZZ", ")", ")", "*", "(", "1", "+", "noise", ")", "\n", "\n", "# shift the kernel so it will be centered", "\n", "#raw_kernel_centered = kernel_shift(raw_kernel, scale_factor)", "\n", "\n", "# Normalize the kernel and return", "\n", "#kernel = raw_kernel_centered / np.sum(raw_kernel_centered)", "\n", "kernel", "=", "raw_kernel", "/", "np", ".", "sum", "(", "raw_kernel", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.bicubic_degradation": [[223, 233], ["utils.utils_image.imresize_np"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imresize_np"], ["def", "bicubic_degradation", "(", "x", ",", "sf", "=", "3", ")", ":", "\n", "    ", "'''\n    Args:\n        x: HxWxC image, [0, 1]\n        sf: down-scale factor\n    Return:\n        bicubicly downsampled LR image\n    '''", "\n", "x", "=", "util", ".", "imresize_np", "(", "x", ",", "scale", "=", "1", "/", "sf", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.srmd_degradation": [[235, 257], ["scipy.ndimage.filters.convolve", "numpy.expand_dims"], "function", ["None"], ["", "def", "srmd_degradation", "(", "x", ",", "k", ",", "sf", "=", "3", ")", ":", "\n", "    ", "''' blur + bicubic downsampling\n    Args:\n        x: HxWxC image, [0, 1]\n        k: hxw, double\n        sf: down-scale factor\n    Return:\n        downsampled LR image\n    Reference:\n        @inproceedings{zhang2018learning,\n          title={Learning a single convolutional super-resolution network for multiple degradations},\n          author={Zhang, Kai and Zuo, Wangmeng and Zhang, Lei},\n          booktitle={IEEE Conference on Computer Vision and Pattern Recognition},\n          pages={3262--3271},\n          year={2018}\n        }\n    '''", "\n", "x", "=", "ndimage", ".", "filters", ".", "convolve", "(", "x", ",", "np", ".", "expand_dims", "(", "k", ",", "axis", "=", "2", ")", ",", "mode", "=", "'wrap'", ")", "# 'nearest' | 'mirror'", "\n", "# print(\"type before:\", type(x))", "\n", "# x = bicubic_degradation(x, sf=1)", "\n", "# print(\"type after:\", type(x))", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.dpsr_degradation": [[259, 280], ["utils_sisr.bicubic_degradation", "scipy.ndimage.filters.convolve", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.bicubic_degradation"], ["", "def", "dpsr_degradation", "(", "x", ",", "k", ",", "sf", "=", "3", ")", ":", "\n", "\n", "    ", "''' bicubic downsampling + blur\n    Args:\n        x: HxWxC image, [0, 1]\n        k: hxw, double\n        sf: down-scale factor\n    Return:\n        downsampled LR image\n    Reference:\n        @inproceedings{zhang2019deep,\n          title={Deep Plug-and-Play Super-Resolution for Arbitrary Blur Kernels},\n          author={Zhang, Kai and Zuo, Wangmeng and Zhang, Lei},\n          booktitle={IEEE Conference on Computer Vision and Pattern Recognition},\n          pages={1671--1681},\n          year={2019}\n        }\n    '''", "\n", "x", "=", "bicubic_degradation", "(", "x", ",", "sf", "=", "sf", ")", "\n", "x", "=", "ndimage", ".", "filters", ".", "convolve", "(", "x", ",", "np", ".", "expand_dims", "(", "k", ",", "axis", "=", "2", ")", ",", "mode", "=", "'wrap'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.classical_degradation": [[282, 297], ["scipy.ndimage.filters.convolve", "numpy.expand_dims"], "function", ["None"], ["", "def", "classical_degradation", "(", "x", ",", "k", ",", "sf", "=", "3", ")", ":", "\n", "    ", "''' blur + downsampling\n\n    Args:\n        x: HxWxC image, [0, 1]/[0, 255]\n        k: hxw, double\n        sf: down-scale factor\n\n    Return:\n        downsampled LR image\n    '''", "\n", "x", "=", "ndimage", ".", "filters", ".", "convolve", "(", "x", ",", "np", ".", "expand_dims", "(", "k", ",", "axis", "=", "2", ")", ",", "mode", "=", "'wrap'", ")", "\n", "#x = filters.correlate(x, np.expand_dims(np.flip(k), axis=2))", "\n", "st", "=", "0", "\n", "return", "x", "[", "st", ":", ":", "sf", ",", "st", ":", ":", "sf", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.modcrop_np": [[299, 310], ["numpy.copy"], "function", ["None"], ["", "def", "modcrop_np", "(", "img", ",", "sf", ")", ":", "\n", "    ", "'''\n    Args:\n        img: numpy image, WxH or WxHxC\n        sf: scale factor\n    Return:\n        cropped image\n    '''", "\n", "w", ",", "h", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "im", "=", "np", ".", "copy", "(", "img", ")", "\n", "return", "im", "[", ":", "w", "-", "w", "%", "sf", ",", ":", "h", "-", "h", "%", "sf", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.shift_pixel": [[319, 346], ["numpy.clip", "numpy.clip", "numpy.arange", "numpy.arange", "range", "scipy.interpolate.interp2d", "scipy.interpolate.interp2d"], "function", ["None"], ["def", "shift_pixel", "(", "x", ",", "sf", ",", "upper_left", "=", "True", ")", ":", "\n", "    ", "\"\"\"shift pixel for super-resolution with different scale factors\n    Args:\n        x: WxHxC or WxH, image or kernel\n        sf: scale factor\n        upper_left: shift direction\n    \"\"\"", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "shift", "=", "(", "sf", "-", "1", ")", "*", "0.5", "\n", "xv", ",", "yv", "=", "np", ".", "arange", "(", "0", ",", "w", ",", "1.0", ")", ",", "np", ".", "arange", "(", "0", ",", "h", ",", "1.0", ")", "\n", "if", "upper_left", ":", "\n", "        ", "x1", "=", "xv", "+", "shift", "\n", "y1", "=", "yv", "+", "shift", "\n", "", "else", ":", "\n", "        ", "x1", "=", "xv", "-", "shift", "\n", "y1", "=", "yv", "-", "shift", "\n", "\n", "", "x1", "=", "np", ".", "clip", "(", "x1", ",", "0", ",", "w", "-", "1", ")", "\n", "y1", "=", "np", ".", "clip", "(", "y1", ",", "0", ",", "h", "-", "1", ")", "\n", "\n", "if", "x", ".", "ndim", "==", "2", ":", "\n", "        ", "x", "=", "interp2d", "(", "xv", ",", "yv", ",", "x", ")", "(", "x1", ",", "y1", ")", "\n", "", "if", "x", ".", "ndim", "==", "3", ":", "\n", "        ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "x", "[", ":", ",", ":", ",", "i", "]", "=", "interp2d", "(", "xv", ",", "yv", ",", "x", "[", ":", ",", ":", ",", "i", "]", ")", "(", "x1", ",", "y1", ")", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.splits": [[355, 364], ["torch.stack", "torch.cat", "torch.chunk", "torch.chunk"], "function", ["None"], ["def", "splits", "(", "a", ",", "sf", ")", ":", "\n", "    ", "'''\n    a: tensor NxCxWxHx2\n    sf: scale factor\n    out: tensor NxCx(W/sf)x(H/sf)x2x(sf^2)\n    '''", "\n", "b", "=", "torch", ".", "stack", "(", "torch", ".", "chunk", "(", "a", ",", "sf", ",", "dim", "=", "2", ")", ",", "dim", "=", "5", ")", "\n", "b", "=", "torch", ".", "cat", "(", "torch", ".", "chunk", "(", "b", ",", "sf", ",", "dim", "=", "3", ")", ",", "dim", "=", "5", ")", "\n", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.c2c": [[366, 368], ["torch.from_numpy", "numpy.stack", "numpy.float32", "numpy.float32"], "function", ["None"], ["", "def", "c2c", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "[", "np", ".", "float32", "(", "x", ".", "real", ")", ",", "np", ".", "float32", "(", "x", ".", "imag", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.r2c": [[370, 372], ["torch.stack", "torch.zeros_like"], "function", ["None"], ["", "def", "r2c", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "stack", "(", "[", "x", ",", "torch", ".", "zeros_like", "(", "x", ")", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cdiv": [[374, 379], ["torch.stack"], "function", ["None"], ["", "def", "cdiv", "(", "x", ",", "y", ")", ":", "\n", "    ", "a", ",", "b", "=", "x", "[", "...", ",", "0", "]", ",", "x", "[", "...", ",", "1", "]", "\n", "c", ",", "d", "=", "y", "[", "...", ",", "0", "]", ",", "y", "[", "...", ",", "1", "]", "\n", "cd2", "=", "c", "**", "2", "+", "d", "**", "2", "\n", "return", "torch", ".", "stack", "(", "[", "(", "a", "*", "c", "+", "b", "*", "d", ")", "/", "cd2", ",", "(", "b", "*", "c", "-", "a", "*", "d", ")", "/", "cd2", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.csum": [[381, 383], ["torch.stack"], "function", ["None"], ["", "def", "csum", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "torch", ".", "stack", "(", "[", "x", "[", "...", ",", "0", "]", "+", "y", ",", "x", "[", "...", ",", "1", "]", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cabs": [[385, 387], ["torch.pow"], "function", ["None"], ["", "def", "cabs", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "pow", "(", "x", "[", "...", ",", "0", "]", "**", "2", "+", "x", "[", "...", ",", "1", "]", "**", "2", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cmul": [[389, 398], ["torch.stack"], "function", ["None"], ["", "def", "cmul", "(", "t1", ",", "t2", ")", ":", "\n", "    ", "'''\n    complex multiplication\n    t1: NxCxHxWx2\n    output: NxCxHxWx2\n    '''", "\n", "real1", ",", "imag1", "=", "t1", "[", "...", ",", "0", "]", ",", "t1", "[", "...", ",", "1", "]", "\n", "real2", ",", "imag2", "=", "t2", "[", "...", ",", "0", "]", ",", "t2", "[", "...", ",", "1", "]", "\n", "return", "torch", ".", "stack", "(", "[", "real1", "*", "real2", "-", "imag1", "*", "imag2", ",", "real1", "*", "imag2", "+", "imag1", "*", "real2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cconj": [[400, 409], ["t.clone"], "function", ["None"], ["", "def", "cconj", "(", "t", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "'''\n    # complex's conjugation\n    t: NxCxHxWx2\n    output: NxCxHxWx2\n    '''", "\n", "c", "=", "t", ".", "clone", "(", ")", "if", "not", "inplace", "else", "t", "\n", "c", "[", "...", ",", "1", "]", "*=", "-", "1", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.rfft": [[411, 413], ["torch.rfft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.rfft"], ["", "def", "rfft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "rfft", "(", "t", ",", "2", ",", "onesided", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.irfft": [[415, 417], ["torch.irfft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.irfft"], ["", "def", "irfft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "irfft", "(", "t", ",", "2", ",", "onesided", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.fft": [[419, 421], ["torch.fft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.fft"], ["", "def", "fft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "fft", "(", "t", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.ifft": [[423, 425], ["torch.ifft"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.ifft"], ["", "def", "ifft", "(", "t", ")", ":", "\n", "    ", "return", "torch", ".", "ifft", "(", "t", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.p2o": [[427, 444], ["torch.zeros().type_as", "otf[].copy_", "enumerate", "torch.rfft", "torch.sum", "torch.tensor().type_as", "torch.roll", "torch.zeros", "torch.tensor().type_as", "torch.log2", "torch.tensor", "int", "torch.tensor().type_as", "torch.abs", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.rfft"], ["", "def", "p2o", "(", "psf", ",", "shape", ")", ":", "\n", "    ", "'''\n    Args:\n        psf: NxCxhxw\n        shape: [H,W]\n\n    Returns:\n        otf: NxCxHxWx2\n    '''", "\n", "otf", "=", "torch", ".", "zeros", "(", "psf", ".", "shape", "[", ":", "-", "2", "]", "+", "shape", ")", ".", "type_as", "(", "psf", ")", "\n", "otf", "[", "...", ",", ":", "psf", ".", "shape", "[", "2", "]", ",", ":", "psf", ".", "shape", "[", "3", "]", "]", ".", "copy_", "(", "psf", ")", "\n", "for", "axis", ",", "axis_size", "in", "enumerate", "(", "psf", ".", "shape", "[", "2", ":", "]", ")", ":", "\n", "        ", "otf", "=", "torch", ".", "roll", "(", "otf", ",", "-", "int", "(", "axis_size", "/", "2", ")", ",", "dims", "=", "axis", "+", "2", ")", "\n", "", "otf", "=", "torch", ".", "rfft", "(", "otf", ",", "2", ",", "onesided", "=", "False", ")", "\n", "n_ops", "=", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "psf", ".", "shape", ")", ".", "type_as", "(", "psf", ")", "*", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "psf", ".", "shape", ")", ".", "type_as", "(", "psf", ")", ")", ")", "\n", "otf", "[", "...", ",", "1", "]", "[", "torch", ".", "abs", "(", "otf", "[", "...", ",", "1", "]", ")", "<", "n_ops", "*", "2.22e-16", "]", "=", "torch", ".", "tensor", "(", "0", ")", ".", "type_as", "(", "psf", ")", "\n", "return", "otf", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.INVLS_pytorch": [[452, 474], ["utils_sisr.cmul", "torch.mean", "torch.mean", "utils_sisr.cdiv", "utils_sisr.cmul", "torch.irfft", "utils_sisr.splits", "utils_sisr.splits", "utils_sisr.csum", "cdiv.repeat"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cmul", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cdiv", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.cmul", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.irfft", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.splits", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.splits", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.csum"], ["def", "INVLS_pytorch", "(", "FB", ",", "FBC", ",", "F2B", ",", "FR", ",", "tau", ",", "sf", "=", "2", ")", ":", "\n", "    ", "'''\n    FB: NxCxWxHx2\n    F2B: NxCxWxHx2\n\n    x1 = FB.*FR;\n    FBR = BlockMM(nr,nc,Nb,m,x1);\n    invW = BlockMM(nr,nc,Nb,m,F2B);\n    invWBR = FBR./(invW + tau*Nb);\n    fun = @(block_struct) block_struct.data.*invWBR;\n    FCBinvWBR = blockproc(FBC,[nr,nc],fun);\n    FX = (FR-FCBinvWBR)/tau;\n    Xest = real(ifft2(FX));\n    '''", "\n", "x1", "=", "cmul", "(", "FB", ",", "FR", ")", "\n", "FBR", "=", "torch", ".", "mean", "(", "splits", "(", "x1", ",", "sf", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "invW", "=", "torch", ".", "mean", "(", "splits", "(", "F2B", ",", "sf", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "invWBR", "=", "cdiv", "(", "FBR", ",", "csum", "(", "invW", ",", "tau", ")", ")", "\n", "FCBinvWBR", "=", "cmul", "(", "FBC", ",", "invWBR", ".", "repeat", "(", "1", ",", "1", ",", "sf", ",", "sf", ",", "1", ")", ")", "\n", "FX", "=", "(", "FR", "-", "FCBinvWBR", ")", "/", "tau", "\n", "Xest", "=", "torch", ".", "irfft", "(", "FX", ",", "2", ",", "onesided", "=", "False", ")", "\n", "return", "Xest", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.real2complex": [[476, 478], ["torch.stack", "torch.zeros_like"], "function", ["None"], ["", "def", "real2complex", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "stack", "(", "[", "x", ",", "torch", ".", "zeros_like", "(", "x", ")", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.modcrop": [[480, 488], ["img.clone"], "function", ["None"], ["", "def", "modcrop", "(", "img", ",", "sf", ")", ":", "\n", "    ", "'''\n    img: tensor image, NxCxWxH or CxWxH or WxH\n    sf: scale factor\n    '''", "\n", "w", ",", "h", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "im", "=", "img", ".", "clone", "(", ")", "\n", "return", "im", "[", "...", ",", ":", "w", "-", "w", "%", "sf", ",", ":", "h", "-", "h", "%", "sf", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample": [[490, 498], ["torch.zeros().type_as", "z[].copy_", "torch.zeros"], "function", ["None"], ["", "def", "upsample", "(", "x", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "'''\n    x: tensor image, NxCxWxH\n    '''", "\n", "st", "=", "(", "sf", "-", "1", ")", "//", "2", "if", "center", "else", "0", "\n", "z", "=", "torch", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "sf", ",", "x", ".", "shape", "[", "3", "]", "*", "sf", ")", ")", ".", "type_as", "(", "x", ")", "\n", "z", "[", "...", ",", "st", ":", ":", "sf", ",", "st", ":", ":", "sf", "]", ".", "copy_", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample": [[500, 503], ["None"], "function", ["None"], ["", "def", "downsample", "(", "x", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "st", "=", "(", "sf", "-", "1", ")", "//", "2", "if", "center", "else", "0", "\n", "return", "x", "[", "...", ",", "st", ":", ":", "sf", ",", "st", ":", ":", "sf", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.circular_pad": [[505, 514], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "circular_pad", "(", "x", ",", "pad", ")", ":", "\n", "    ", "'''\n    # x[N, 1, W, H] -> x[N, 1, W + 2 pad, H + 2 pad] (pariodic padding)\n    '''", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", "[", ":", ",", ":", ",", "0", ":", "pad", ",", ":", "]", "]", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "pad", "]", "]", ",", "dim", "=", "3", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", "-", "2", "*", "pad", ":", "-", "pad", ",", ":", "]", ",", "x", "]", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", ":", ",", "-", "2", "*", "pad", ":", "-", "pad", "]", ",", "x", "]", ",", "dim", "=", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.pad_circular": [[516, 530], ["range", "utils_sisr.dim_pad_circular", "dim_pad_circular.dim"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.dim_pad_circular"], ["", "def", "pad_circular", "(", "input", ",", "padding", ")", ":", "\n", "# type: (Tensor, List[int]) -> Tensor", "\n", "    ", "\"\"\"\n    Arguments\n    :param input: tensor of shape :math:`(N, C_{\\text{in}}, H, [W, D]))`\n    :param padding: (tuple): m-elem tuple where m is the degree of convolution\n    Returns\n    :return: tensor of shape :math:`(N, C_{\\text{in}}, [D + 2 * padding[0],\n                                     H + 2 * padding[1]], W + 2 * padding[2]))`\n    \"\"\"", "\n", "offset", "=", "3", "\n", "for", "dimension", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "offset", "+", "1", ")", ":", "\n", "        ", "input", "=", "dim_pad_circular", "(", "input", ",", "padding", "[", "dimension", "]", ",", "dimension", "+", "offset", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.dim_pad_circular": [[532, 539], ["torch.cat", "torch.cat", "slice", "slice", "slice", "slice"], "function", ["None"], ["", "def", "dim_pad_circular", "(", "input", ",", "padding", ",", "dimension", ")", ":", "\n", "# type: (Tensor, int, int) -> Tensor", "\n", "    ", "input", "=", "torch", ".", "cat", "(", "[", "input", ",", "input", "[", "[", "slice", "(", "None", ")", "]", "*", "(", "dimension", "-", "1", ")", "+", "\n", "[", "slice", "(", "0", ",", "padding", ")", "]", "]", "]", ",", "dim", "=", "dimension", "-", "1", ")", "\n", "input", "=", "torch", ".", "cat", "(", "[", "input", "[", "[", "slice", "(", "None", ")", "]", "*", "(", "dimension", "-", "1", ")", "+", "\n", "[", "slice", "(", "-", "2", "*", "padding", ",", "-", "padding", ")", "]", "]", ",", "input", "]", ",", "dim", "=", "dimension", "-", "1", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.imfilter": [[541, 549], ["utils_sisr.pad_circular", "torch.nn.functional.conv2d"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.pad_circular"], ["", "def", "imfilter", "(", "x", ",", "k", ")", ":", "\n", "    ", "'''\n    x: image, NxcxHxW\n    k: kernel, cx1xhxw\n    '''", "\n", "x", "=", "pad_circular", "(", "x", ",", "padding", "=", "(", "(", "k", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "//", "2", ",", "(", "k", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "//", "2", ")", ")", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "x", ",", "k", ",", "groups", "=", "x", ".", "shape", "[", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.G": [[551, 564], ["utils_sisr.downsample", "utils_sisr.imfilter"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.imfilter"], ["", "def", "G", "(", "x", ",", "k", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "'''\n    x: image, NxcxHxW\n    k: kernel, cx1xhxw\n    sf: scale factor\n    center: the first one or the moddle one\n\n    Matlab function:\n    tmp = imfilter(x,h,'circular');\n    y = downsample2(tmp,K);\n    '''", "\n", "x", "=", "downsample", "(", "imfilter", "(", "x", ",", "k", ")", ",", "sf", "=", "sf", ",", "center", "=", "center", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.Gt": [[566, 579], ["utils_sisr.imfilter", "utils_sisr.upsample"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.imfilter", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample"], ["", "def", "Gt", "(", "x", ",", "k", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "'''\n    x: image, NxcxHxW\n    k: kernel, cx1xhxw\n    sf: scale factor\n    center: the first one or the moddle one\n\n    Matlab function:\n    tmp = upsample2(x,K);\n    y = imfilter(tmp,h,'circular');\n    '''", "\n", "x", "=", "imfilter", "(", "upsample", "(", "x", ",", "sf", "=", "sf", ",", "center", "=", "center", ")", ",", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.interpolation_down": [[581, 593], ["torch.zeros_like", "x.mul", "torch.tensor", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "interpolation_down", "(", "x", ",", "sf", ",", "center", "=", "False", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "if", "center", ":", "\n", "        ", "start", "=", "torch", ".", "tensor", "(", "(", "sf", "-", "1", ")", "//", "2", ")", "\n", "mask", "[", "...", ",", "start", ":", ":", "sf", ",", "start", ":", ":", "sf", "]", "=", "torch", ".", "tensor", "(", "1", ")", ".", "type_as", "(", "x", ")", "\n", "LR", "=", "x", "[", "...", ",", "start", ":", ":", "sf", ",", "start", ":", ":", "sf", "]", "\n", "", "else", ":", "\n", "        ", "mask", "[", "...", ",", ":", ":", "sf", ",", ":", ":", "sf", "]", "=", "torch", ".", "tensor", "(", "1", ")", ".", "type_as", "(", "x", ")", "\n", "LR", "=", "x", "[", "...", ",", ":", ":", "sf", ",", ":", ":", "sf", "]", "\n", "", "y", "=", "x", ".", "mul", "(", "mask", ")", "\n", "\n", "return", "LR", ",", "y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.blockproc": [[602, 616], ["numpy.split", "numpy.concatenate", "range", "numpy.split", "xblocks_proc.append", "range", "fun", "yblocks_proc.append", "numpy.concatenate"], "function", ["None"], ["def", "blockproc", "(", "im", ",", "blocksize", ",", "fun", ")", ":", "\n", "    ", "xblocks", "=", "np", ".", "split", "(", "im", ",", "range", "(", "blocksize", "[", "0", "]", ",", "im", ".", "shape", "[", "0", "]", ",", "blocksize", "[", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "xblocks_proc", "=", "[", "]", "\n", "for", "xb", "in", "xblocks", ":", "\n", "        ", "yblocks", "=", "np", ".", "split", "(", "xb", ",", "range", "(", "blocksize", "[", "1", "]", ",", "im", ".", "shape", "[", "1", "]", ",", "blocksize", "[", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "yblocks_proc", "=", "[", "]", "\n", "for", "yb", "in", "yblocks", ":", "\n", "            ", "yb_proc", "=", "fun", "(", "yb", ")", "\n", "yblocks_proc", ".", "append", "(", "yb_proc", ")", "\n", "", "xblocks_proc", ".", "append", "(", "np", ".", "concatenate", "(", "yblocks_proc", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "proc", "=", "np", ".", "concatenate", "(", "xblocks_proc", ",", "axis", "=", "0", ")", "\n", "\n", "return", "proc", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.fun_reshape": [[618, 620], ["numpy.reshape"], "function", ["None"], ["", "def", "fun_reshape", "(", "a", ")", ":", "\n", "    ", "return", "np", ".", "reshape", "(", "a", ",", "(", "-", "1", ",", "1", ",", "a", ".", "shape", "[", "-", "1", "]", ")", ",", "order", "=", "'F'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.fun_mul": [[622, 624], ["None"], "function", ["None"], ["", "def", "fun_mul", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "*", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.BlockMM": [[626, 640], ["utils_sisr.blockproc", "numpy.reshape", "numpy.sum", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.blockproc"], ["", "def", "BlockMM", "(", "nr", ",", "nc", ",", "Nb", ",", "m", ",", "x1", ")", ":", "\n", "    ", "'''\n    myfun = @(block_struct) reshape(block_struct.data,m,1);\n    x1 = blockproc(x1,[nr nc],myfun);\n    x1 = reshape(x1,m,Nb);\n    x1 = sum(x1,2);\n    x = reshape(x1,nr,nc);\n    '''", "\n", "fun", "=", "fun_reshape", "\n", "x1", "=", "blockproc", "(", "x1", ",", "blocksize", "=", "(", "nr", ",", "nc", ")", ",", "fun", "=", "fun", ")", "\n", "x1", "=", "np", ".", "reshape", "(", "x1", ",", "(", "m", ",", "Nb", ",", "x1", ".", "shape", "[", "-", "1", "]", ")", ",", "order", "=", "'F'", ")", "\n", "x1", "=", "np", ".", "sum", "(", "x1", ",", "1", ")", "\n", "x", "=", "np", ".", "reshape", "(", "x1", ",", "(", "nr", ",", "nc", ",", "x1", ".", "shape", "[", "-", "1", "]", ")", ",", "order", "=", "'F'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.INVLS": [[642, 661], ["utils_sisr.BlockMM", "utils_sisr.BlockMM", "utils_sisr.blockproc", "numpy.real", "numpy.fft.ifft2", "utils_sisr.fun_mul"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.BlockMM", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.BlockMM", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.blockproc", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.fun_mul"], ["", "def", "INVLS", "(", "FB", ",", "FBC", ",", "F2B", ",", "FR", ",", "tau", ",", "Nb", ",", "nr", ",", "nc", ",", "m", ")", ":", "\n", "    ", "'''\n    x1 = FB.*FR;\n    FBR = BlockMM(nr,nc,Nb,m,x1);\n    invW = BlockMM(nr,nc,Nb,m,F2B);\n    invWBR = FBR./(invW + tau*Nb);\n    fun = @(block_struct) block_struct.data.*invWBR;\n    FCBinvWBR = blockproc(FBC,[nr,nc],fun);\n    FX = (FR-FCBinvWBR)/tau;\n    Xest = real(ifft2(FX));\n    '''", "\n", "x1", "=", "FB", "*", "FR", "\n", "FBR", "=", "BlockMM", "(", "nr", ",", "nc", ",", "Nb", ",", "m", ",", "x1", ")", "\n", "invW", "=", "BlockMM", "(", "nr", ",", "nc", ",", "Nb", ",", "m", ",", "F2B", ")", "\n", "invWBR", "=", "FBR", "/", "(", "invW", "+", "tau", "*", "Nb", ")", "\n", "FCBinvWBR", "=", "blockproc", "(", "FBC", ",", "[", "nr", ",", "nc", "]", ",", "lambda", "im", ":", "fun_mul", "(", "im", ",", "invWBR", ")", ")", "\n", "FX", "=", "(", "FR", "-", "FCBinvWBR", ")", "/", "tau", "\n", "Xest", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft2", "(", "FX", ",", "axes", "=", "(", "0", ",", "1", ")", ")", ")", "\n", "return", "Xest", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.psf2otf": [[663, 710], ["numpy.array", "numpy.all", "utils_sisr.zero_pad", "enumerate", "numpy.fft.fft2", "numpy.sum", "numpy.real_if_close", "type", "type", "numpy.zeros", "len", "np.roll.reshape", "numpy.roll", "numpy.log2", "int"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.zero_pad"], ["", "def", "psf2otf", "(", "psf", ",", "shape", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert point-spread function to optical transfer function.\n    Compute the Fast Fourier Transform (FFT) of the point-spread\n    function (PSF) array and creates the optical transfer function (OTF)\n    array that is not influenced by the PSF off-centering.\n    By default, the OTF array is the same size as the PSF array.\n    To ensure that the OTF is not altered due to PSF off-centering, PSF2OTF\n    post-pads the PSF array (down or to the right) with zeros to match\n    dimensions specified in OUTSIZE, then circularly shifts the values of\n    the PSF array up (or to the left) until the central pixel reaches (1,1)\n    position.\n    Parameters\n    ----------\n    psf : `numpy.ndarray`\n        PSF array\n    shape : int\n        Output shape of the OTF array\n    Returns\n    -------\n    otf : `numpy.ndarray`\n        OTF array\n    Notes\n    -----\n    Adapted from MATLAB psf2otf function\n    \"\"\"", "\n", "if", "type", "(", "shape", ")", "==", "type", "(", "None", ")", ":", "\n", "        ", "shape", "=", "psf", ".", "shape", "\n", "", "shape", "=", "np", ".", "array", "(", "shape", ")", "\n", "if", "np", ".", "all", "(", "psf", "==", "0", ")", ":", "\n", "# return np.zeros_like(psf)", "\n", "        ", "return", "np", ".", "zeros", "(", "shape", ")", "\n", "", "if", "len", "(", "psf", ".", "shape", ")", "==", "1", ":", "\n", "        ", "psf", "=", "psf", ".", "reshape", "(", "(", "1", ",", "psf", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "inshape", "=", "psf", ".", "shape", "\n", "psf", "=", "zero_pad", "(", "psf", ",", "shape", ",", "position", "=", "'corner'", ")", "\n", "for", "axis", ",", "axis_size", "in", "enumerate", "(", "inshape", ")", ":", "\n", "        ", "psf", "=", "np", ".", "roll", "(", "psf", ",", "-", "int", "(", "axis_size", "/", "2", ")", ",", "axis", "=", "axis", ")", "\n", "# Compute the OTF", "\n", "", "otf", "=", "np", ".", "fft", ".", "fft2", "(", "psf", ",", "axes", "=", "(", "0", ",", "1", ")", ")", "\n", "# Estimate the rough number of operations involved in the FFT", "\n", "# and discard the PSF imaginary part if within roundoff error", "\n", "# roundoff error  = machine epsilon = sys.float_info.epsilon", "\n", "# or np.finfo().eps", "\n", "n_ops", "=", "np", ".", "sum", "(", "psf", ".", "size", "*", "np", ".", "log2", "(", "psf", ".", "shape", ")", ")", "\n", "otf", "=", "np", ".", "real_if_close", "(", "otf", ",", "tol", "=", "n_ops", ")", "\n", "return", "otf", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.zero_pad": [[712, 752], ["numpy.asarray", "numpy.asarray", "numpy.alltrue", "numpy.any", "numpy.any", "numpy.zeros", "numpy.indices", "ValueError", "ValueError", "numpy.any", "ValueError"], "function", ["None"], ["", "def", "zero_pad", "(", "image", ",", "shape", ",", "position", "=", "'corner'", ")", ":", "\n", "    ", "\"\"\"\n    Extends image to a certain size with zeros\n    Parameters\n    ----------\n    image: real 2d `numpy.ndarray`\n        Input image\n    shape: tuple of int\n        Desired output shape of the image\n    position : str, optional\n        The position of the input image in the output one:\n            * 'corner'\n                top-left corner (default)\n            * 'center'\n                centered\n    Returns\n    -------\n    padded_img: real `numpy.ndarray`\n        The zero-padded image\n    \"\"\"", "\n", "shape", "=", "np", ".", "asarray", "(", "shape", ",", "dtype", "=", "int", ")", "\n", "imshape", "=", "np", ".", "asarray", "(", "image", ".", "shape", ",", "dtype", "=", "int", ")", "\n", "if", "np", ".", "alltrue", "(", "imshape", "==", "shape", ")", ":", "\n", "        ", "return", "image", "\n", "", "if", "np", ".", "any", "(", "shape", "<=", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ZERO_PAD: null or negative shape given\"", ")", "\n", "", "dshape", "=", "shape", "-", "imshape", "\n", "if", "np", ".", "any", "(", "dshape", "<", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ZERO_PAD: target size smaller than source one\"", ")", "\n", "", "pad_img", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "idx", ",", "idy", "=", "np", ".", "indices", "(", "imshape", ")", "\n", "if", "position", "==", "'center'", ":", "\n", "        ", "if", "np", ".", "any", "(", "dshape", "%", "2", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"ZERO_PAD: source and target shapes \"", "\n", "\"have different parity.\"", ")", "\n", "", "offx", ",", "offy", "=", "dshape", "//", "2", "\n", "", "else", ":", "\n", "        ", "offx", ",", "offy", "=", "(", "0", ",", "0", ")", "\n", "", "pad_img", "[", "idx", "+", "offx", ",", "idy", "+", "offy", "]", "=", "image", "\n", "return", "pad_img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample_np": [[754, 759], ["numpy.zeros"], "function", ["None"], ["", "def", "upsample_np", "(", "x", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "st", "=", "(", "sf", "-", "1", ")", "//", "2", "if", "center", "else", "0", "\n", "z", "=", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", "*", "sf", ",", "x", ".", "shape", "[", "1", "]", "*", "sf", ",", "x", ".", "shape", "[", "2", "]", ")", ")", "\n", "z", "[", "st", ":", ":", "sf", ",", "st", ":", ":", "sf", ",", "...", "]", "=", "x", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample_np": [[761, 764], ["None"], "function", ["None"], ["", "def", "downsample_np", "(", "x", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "st", "=", "(", "sf", "-", "1", ")", "//", "2", "if", "center", "else", "0", "\n", "return", "x", "[", "st", ":", ":", "sf", ",", "st", ":", ":", "sf", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.imfilter_np": [[766, 773], ["scipy.ndimage.filters.convolve", "numpy.expand_dims"], "function", ["None"], ["", "def", "imfilter_np", "(", "x", ",", "k", ")", ":", "\n", "    ", "'''\n    x: image, NxcxHxW\n    k: kernel, cx1xhxw\n    '''", "\n", "x", "=", "ndimage", ".", "filters", ".", "convolve", "(", "x", ",", "np", ".", "expand_dims", "(", "k", ",", "axis", "=", "2", ")", ",", "mode", "=", "'wrap'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.G_np": [[775, 786], ["utils_sisr.downsample_np", "utils_sisr.imfilter_np"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample_np", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.imfilter_np"], ["", "def", "G_np", "(", "x", ",", "k", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "'''\n    x: image, NxcxHxW\n    k: kernel, cx1xhxw\n\n    Matlab function:\n    tmp = imfilter(x,h,'circular');\n    y = downsample2(tmp,K);\n    '''", "\n", "x", "=", "downsample_np", "(", "imfilter_np", "(", "x", ",", "k", ")", ",", "sf", "=", "sf", ",", "center", "=", "center", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.Gt_np": [[788, 799], ["utils_sisr.imfilter_np", "utils_sisr.upsample_np"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.imfilter_np", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample_np"], ["", "def", "Gt_np", "(", "x", ",", "k", ",", "sf", "=", "3", ",", "center", "=", "False", ")", ":", "\n", "    ", "'''\n    x: image, NxcxHxW\n    k: kernel, cx1xhxw\n\n    Matlab function:\n    tmp = upsample2(x,K);\n    y = imfilter(tmp,h,'circular');\n    '''", "\n", "x", "=", "imfilter_np", "(", "upsample_np", "(", "x", ",", "sf", "=", "sf", ",", "center", "=", "center", ")", ",", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.visualization_utils.recognition_vis": [[24, 38], ["to_numpy.permute", "to_numpy", "evaluation_metrics.metrics.get_str_list", "enumerate", "zip", "os.path.join", "PIL.Image.fromarray", "Image.fromarray.save", "pred.lower", "target.lower", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["def", "recognition_vis", "(", "images", ",", "preds", ",", "targets", ",", "scores", ",", "dataset", ",", "vis_dir", ")", ":", "\n", "  ", "images", "=", "images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "images", "=", "to_numpy", "(", "images", ")", "\n", "images", "=", "(", "images", "*", "0.5", "+", "0.5", ")", "*", "255", "\n", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "preds", ",", "targets", ",", "dataset", ")", "\n", "for", "id", ",", "(", "image", ",", "pred", ",", "target", ",", "score", ")", "in", "enumerate", "(", "zip", "(", "images", ",", "pred_list", ",", "targ_list", ",", "scores", ")", ")", ":", "\n", "    ", "if", "pred", ".", "lower", "(", ")", "==", "target", ".", "lower", "(", ")", ":", "\n", "      ", "flag", "=", "'right'", "\n", "", "else", ":", "\n", "      ", "flag", "=", "'error'", "\n", "", "file_name", "=", "'{:}_{:}_{:}_{:}_{:.3f}.jpg'", ".", "format", "(", "flag", ",", "id", ",", "pred", ",", "target", ",", "score", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", "\n", "image", ".", "save", "(", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.visualization_utils._save_plot_pool": [[41, 44], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["", "", "def", "_save_plot_pool", "(", "vis_image", ",", "save_file_path", ")", ":", "\n", "  ", "vis_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "vis_image", ")", ")", "\n", "vis_image", ".", "save", "(", "save_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.visualization_utils.stn_vis": [[46, 124], ["raw_images.unsqueeze.size", "to_numpy", "ctrl_points.astype.astype", "raw_images.unsqueeze.permute", "to_numpy", "rectified_images.unsqueeze.permute", "to_numpy", "raw_images.unsqueeze.astype", "rectified_images.unsqueeze.astype", "range", "raw_images.unsqueeze.ndimension", "raw_images.unsqueeze.unsqueeze", "rectified_images.unsqueeze.unsqueeze", "matplotlib.figure", "ax[].imshow", "ax[].scatter", "ax[].imshow", "matplotlib.show", "io.BytesIO", "matplotlib.savefig", "matplotlib.close", "io.BytesIO.seek", "PIL.Image.open", "numpy.asarray().astype", "io.BytesIO.close", "vis_images.append", "evaluation_metrics.metrics.get_str_list", "enumerate", "plt.figure.add_subplot", "a.set_xticklabels", "a.set_yticklabels", "a.axis", "zip", "os.path.join", "file_path_list.append", "multiprocessing.Pool", "pool.starmap", "range", "numpy.asarray", "pred.lower", "target.lower", "os.cpu_count", "zip"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imshow", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imshow", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list"], ["", "def", "stn_vis", "(", "raw_images", ",", "rectified_images", ",", "ctrl_points", ",", "preds", ",", "targets", ",", "real_scores", ",", "pred_scores", ",", "dataset", ",", "vis_dir", ")", ":", "\n", "  ", "\"\"\"\n    raw_images: images without rectification\n    rectified_images: rectified images with stn\n    ctrl_points: predicted ctrl points\n    preds: predicted label sequences\n    targets: target label sequences\n    real_scores: scores of recognition model\n    pred_scores: predicted scores by the score branch\n    dataset: xxx\n    vis_dir: xxx\n  \"\"\"", "\n", "if", "raw_images", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "    ", "raw_images", "=", "raw_images", ".", "unsqueeze", "(", "0", ")", "\n", "rectified_images", "=", "rectified_images", ".", "unsqueeze", "(", "0", ")", "\n", "", "batch_size", ",", "_", ",", "raw_height", ",", "raw_width", "=", "raw_images", ".", "size", "(", ")", "\n", "\n", "# translate the coordinates of ctrlpoints to image size", "\n", "ctrl_points", "=", "to_numpy", "(", "ctrl_points", ")", "\n", "ctrl_points", "[", ":", ",", ":", ",", "0", "]", "=", "ctrl_points", "[", ":", ",", ":", ",", "0", "]", "*", "(", "raw_width", "-", "1", ")", "\n", "ctrl_points", "[", ":", ",", ":", ",", "1", "]", "=", "ctrl_points", "[", ":", ",", ":", ",", "1", "]", "*", "(", "raw_height", "-", "1", ")", "\n", "ctrl_points", "=", "ctrl_points", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "# tensors to pil images", "\n", "raw_images", "=", "raw_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "raw_images", "=", "to_numpy", "(", "raw_images", ")", "\n", "raw_images", "=", "(", "raw_images", "*", "0.5", "+", "0.5", ")", "*", "255", "\n", "rectified_images", "=", "rectified_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "rectified_images", "=", "to_numpy", "(", "rectified_images", ")", "\n", "rectified_images", "=", "(", "rectified_images", "*", "0.5", "+", "0.5", ")", "*", "255", "\n", "\n", "# draw images on canvas", "\n", "vis_images", "=", "[", "]", "\n", "num_sub_plot", "=", "2", "\n", "raw_images", "=", "raw_images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "rectified_images", "=", "rectified_images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "[", "fig", ".", "add_subplot", "(", "num_sub_plot", ",", "1", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num_sub_plot", ")", "]", "\n", "for", "a", "in", "ax", ":", "\n", "      ", "a", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "a", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "a", ".", "axis", "(", "'off'", ")", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "raw_images", "[", "i", "]", ")", "\n", "ax", "[", "0", "]", ".", "scatter", "(", "ctrl_points", "[", "i", ",", ":", ",", "0", "]", ",", "ctrl_points", "[", "i", ",", ":", ",", "1", "]", ",", "marker", "=", "'+'", ",", "s", "=", "5", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "rectified_images", "[", "i", "]", ")", "\n", "# plt.subplots_adjust(wspace=0, hspace=0)", "\n", "plt", ".", "show", "(", ")", "\n", "buffer_", "=", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buffer_", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "buffer_", ".", "seek", "(", "0", ")", "\n", "dataPIL", "=", "Image", ".", "open", "(", "buffer_", ")", "\n", "data", "=", "np", ".", "asarray", "(", "dataPIL", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "buffer_", ".", "close", "(", ")", "\n", "\n", "vis_images", ".", "append", "(", "data", ")", "\n", "\n", "# save to disk", "\n", "", "if", "vis_dir", "is", "None", ":", "\n", "    ", "return", "vis_images", "\n", "", "else", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "preds", ",", "targets", ",", "dataset", ")", "\n", "file_path_list", "=", "[", "]", "\n", "for", "id", ",", "(", "image", ",", "pred", ",", "target", ",", "real_score", ")", "in", "enumerate", "(", "zip", "(", "vis_images", ",", "pred_list", ",", "targ_list", ",", "real_scores", ")", ")", ":", "\n", "      ", "if", "pred", ".", "lower", "(", ")", "==", "target", ".", "lower", "(", ")", ":", "\n", "        ", "flag", "=", "'right'", "\n", "", "else", ":", "\n", "        ", "flag", "=", "'error'", "\n", "", "if", "pred_scores", "is", "None", ":", "\n", "        ", "file_name", "=", "'{:}_{:}_{:}_{:}_{:.3f}.png'", ".", "format", "(", "flag", ",", "id", ",", "pred", ",", "target", ",", "real_score", ")", "\n", "", "else", ":", "\n", "        ", "file_name", "=", "'{:}_{:}_{:}_{:}_{:.3f}_{:.3f}.png'", ".", "format", "(", "flag", ",", "id", ",", "pred", ",", "target", ",", "real_score", ",", "pred_scores", "[", "id", "]", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", "\n", "file_path_list", ".", "append", "(", "file_path", ")", "\n", "\n", "", "with", "Pool", "(", "os", ".", "cpu_count", "(", ")", ")", "as", "pool", ":", "\n", "      ", "pool", ".", "starmap", "(", "_save_plot_pool", ",", "zip", "(", "vis_images", ",", "file_path_list", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.__init__": [[22, 36], ["os.path.dirname", "mox.file.File", "osutils.mkdir_if_missing", "open", "mox.file.exists", "mox.file.make_dirs", "print", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.osutils.mkdir_if_missing"], ["  ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "    ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "      ", "if", "global_args", ".", "run_on_remote", ":", "\n", "        ", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "fpath", ")", "\n", "if", "not", "mox", ".", "file", ".", "exists", "(", "dir_name", ")", ":", "\n", "          ", "mox", ".", "file", ".", "make_dirs", "(", "dir_name", ")", "\n", "print", "(", "'=> making dir '", ",", "dir_name", ")", "\n", "", "self", ".", "file", "=", "mox", ".", "file", ".", "File", "(", "fpath", ",", "'w'", ")", "\n", "# self.file = open(fpath, 'w')", "\n", "", "else", ":", "\n", "        ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.__del__": [[37, 39], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close"], ["", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "    ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.__enter__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.__exit__": [[43, 45], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "    ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write": [[46, 50], ["logging.Logger.console.write", "logging.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "    ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.flush": [[51, 56], ["logging.Logger.console.flush", "logging.Logger.file.flush", "os.fsync", "logging.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "    ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.close": [[57, 61], ["logging.Logger.console.close", "logging.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.__init__": [[64, 69], ["tensorflow.summary.FileWriter", "osutils.mkdir_if_missing"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.osutils.mkdir_if_missing"], ["  ", "def", "__init__", "(", "self", ",", "log_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "      ", "mkdir_if_missing", "(", "log_dir", ")", "\n", "", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.scalar_summary": [[70, 75], ["tensorflow.Summary", "logging.TFLogger.writer.add_summary", "logging.TFLogger.writer.flush", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.flush"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.image_summary": [[76, 99], ["enumerate", "tensorflow.Summary", "logging.TFLogger.writer.add_summary", "logging.TFLogger.writer.flush", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "      ", "try", ":", "\n", "        ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "        ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.histo_summary": [[100, 127], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logging.TFLogger.writer.add_summary", "logging.TFLogger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.flush"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "      ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "      ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close": [[128, 130], ["logging.TFLogger.writer.close"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "writer", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.osutils.mkdir_if_missing": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir_path", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "    ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "      ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.osutils.make_symlink_if_not_exists": [[14, 27], ["os.system", "os.makedirs"], "function", ["None"], ["", "", "", "def", "make_symlink_if_not_exists", "(", "real_path", ",", "link_path", ")", ":", "\n", "  ", "'''\n  param real_path: str the path linked\n  param link_path: str the path with only the symbol\n  '''", "\n", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "real_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "    ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "      ", "raise", "\n", "\n", "", "", "cmd", "=", "'ln -s {0} {1}'", ".", "format", "(", "real_path", ",", "link_path", ")", "\n", "os", ".", "system", "(", "cmd", ")", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.serialization.read_json": [[21, 25], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "  ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.serialization.write_json": [[27, 31], ["osutils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.osutils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "  ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.serialization.save_checkpoint": [[33, 50], ["print", "os.dirname", "torch.save", "mox.file.copy", "osutils.mkdir_if_missing", "torch.save", "mox.file.exists", "mox.file.make_dirs", "print", "mox.file.copy", "os.dirname", "shutil.copy", "os.join", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "  ", "print", "(", "'=> saving checkpoint '", ",", "fpath", ")", "\n", "if", "run_on_remote", ":", "\n", "    ", "dir_name", "=", "osp", ".", "dirname", "(", "fpath", ")", "\n", "if", "not", "mox", ".", "file", ".", "exists", "(", "dir_name", ")", ":", "\n", "      ", "mox", ".", "file", ".", "make_dirs", "(", "dir_name", ")", "\n", "print", "(", "'=> makding dir '", ",", "dir_name", ")", "\n", "", "local_path", "=", "\"local_checkpoint.pth.tar\"", "\n", "torch", ".", "save", "(", "state", ",", "local_path", ")", "\n", "mox", ".", "file", ".", "copy", "(", "local_path", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "      ", "mox", ".", "file", ".", "copy", "(", "local_path", ",", "osp", ".", "join", "(", "dir_name", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "      ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.serialization.load_checkpoint": [[52, 67], ["mox.file.shift", "torch.load", "print", "os.isfile", "torch.load", "print", "ValueError"], "function", ["None"], ["", "", "", "def", "load_checkpoint", "(", "fpath", ")", ":", "\n", "  ", "if", "run_on_remote", ":", "\n", "    ", "mox", ".", "file", ".", "shift", "(", "'os'", ",", "'mox'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "fpath", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "    ", "load_path", "=", "fpath", "\n", "\n", "if", "osp", ".", "isfile", "(", "load_path", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "load_path", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "load_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.serialization.copy_state_dict": [[69, 90], ["model.state_dict", "set", "state_dict.items", "isinstance", "tgt_state[].copy_", "set.add", "set", "len", "print", "name.startswith", "param.size", "tgt_state[].size", "print", "model.state_dict.keys", "param.size", "tgt_state[].size", "len"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add"], ["", "", "", "def", "copy_state_dict", "(", "state_dict", ",", "model", ",", "strip", "=", "None", ")", ":", "\n", "  ", "tgt_state", "=", "model", ".", "state_dict", "(", ")", "\n", "copied_names", "=", "set", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "    ", "if", "strip", "is", "not", "None", "and", "name", ".", "startswith", "(", "strip", ")", ":", "\n", "      ", "name", "=", "name", "[", "len", "(", "strip", ")", ":", "]", "\n", "", "if", "name", "not", "in", "tgt_state", ":", "\n", "      ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "Parameter", ")", ":", "\n", "      ", "param", "=", "param", ".", "data", "\n", "", "if", "param", ".", "size", "(", ")", "!=", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "      ", "print", "(", "'mismatch:'", ",", "name", ",", "param", ".", "size", "(", ")", ",", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ")", "\n", "continue", "\n", "", "tgt_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "copied_names", ".", "add", "(", "name", ")", "\n", "\n", "", "missing", "=", "set", "(", "tgt_state", ".", "keys", "(", ")", ")", "-", "copied_names", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "      ", "print", "(", "\"missing keys in state_dict:\"", ",", "missing", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy": [[6, 13], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_torch": [[15, 22], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.__init__": [[40, 236], ["object.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "utils.ssim_psnr.SSIM", "utils.utils_moran.strLabelConverterForAttention", "utils.utils_crnn.strLabelConverter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "args", ",", "opt_TPG", "=", "None", ")", ":", "\n", "        ", "super", "(", "TextBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "scale_factor", "=", "self", ".", "config", ".", "TRAIN", ".", "down_sample_scale", "\n", "self", ".", "opt_TPG", "=", "opt_TPG", "\n", "\n", "# print(\"data goes here:\")", "\n", "\n", "# lmdbDataset_realIC15", "\n", "\n", "picked", "=", "\"SVT\"", "\n", "\n", "syn_datasets", "=", "{", "\n", "\"IC15\"", ":", "lmdbDataset_realIC15", ",", "\n", "\"SynthText\"", ":", "lmdbDataset_realIC15", ",", "\n", "\"SVT\"", ":", "lmdbDataset_realSVT", ",", "\n", "\"COCO-Text\"", ":", "lmdbDataset_realCOCOText", ",", "\n", "\"BadSet\"", ":", "lmdbDataset_realBadSet", ",", "\n", "\"IIIT5K\"", ":", "lmdbDataset_realIIIT", "\n", "}", "\n", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "            ", "align_type", "=", "\"random\"", "\n", "", "else", ":", "\n", "            ", "align_type", "=", "\"fixed\"", "\n", "\n", "", "align_types", "=", "{", "\n", "\"random\"", ":", "alignCollate_syn_random_reso", ",", "\n", "\"fixed\"", ":", "alignCollate_syn", "\n", "}", "\n", "\n", "if", "self", ".", "args", ".", "syn", ":", "\n", "            ", "if", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_cascade'", ":", "\n", "# self.align_collate = alignCollate_syn", "\n", "# self.load_dataset = lmdbDataset", "\n", "\n", "# self.align_collate_val = alignCollate_real", "\n", "# self.load_dataset_val = lmdbDataset_real", "\n", "\n", "                ", "self", ".", "align_collate", "=", "align_types", "[", "align_type", "]", "#alignCollate_real # align_types[align_type]#alignCollate_syn", "\n", "self", ".", "load_dataset", "=", "syn_datasets", "[", "picked", "]", "\n", "\n", "# self.align_collate_val = alignCollate_syn", "\n", "# self.load_dataset_val = lmdbDataset_realCOCOText", "\n", "\n", "self", ".", "align_collate_val", "=", "align_types", "[", "align_type", "]", "#alignCollate_realWTL # align_types[align_type]#alignCollate_syn", "\n", "self", ".", "load_dataset_val", "=", "syn_datasets", "[", "picked", "]", "# lmdbDataset_real #", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srcnn_tl'", ":", "\n", "                ", "self", ".", "align_collate", "=", "align_types", "[", "align_type", "]", "\n", "self", ".", "load_dataset", "=", "syn_datasets", "[", "picked", "]", "\n", "\n", "self", ".", "align_collate_val", "=", "align_types", "[", "align_type", "]", "\n", "self", ".", "load_dataset_val", "=", "syn_datasets", "[", "picked", "]", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srresnet_tl'", ":", "\n", "                ", "self", ".", "align_collate", "=", "align_types", "[", "align_type", "]", "\n", "self", ".", "load_dataset", "=", "syn_datasets", "[", "picked", "]", "\n", "\n", "self", ".", "align_collate_val", "=", "align_types", "[", "align_type", "]", "\n", "self", ".", "load_dataset_val", "=", "syn_datasets", "[", "picked", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "align_collate", "=", "align_types", "[", "align_type", "]", "\n", "self", ".", "load_dataset", "=", "syn_datasets", "[", "picked", "]", "\n", "\n", "self", ".", "align_collate_val", "=", "align_types", "[", "align_type", "]", "\n", "self", ".", "load_dataset_val", "=", "syn_datasets", "[", "picked", "]", "\n", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "mixed", ":", "\n", "            ", "self", ".", "align_collate", "=", "alignCollate_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_mix", "\n", "\n", "", "elif", "self", ".", "args", ".", "ic15sr", ":", "\n", "            ", "if", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_cascade'", ":", "\n", "# self.align_collate = alignCollate_syn", "\n", "# self.load_dataset = lmdbDataset", "\n", "\n", "# self.align_collate_val = alignCollate_real", "\n", "# self.load_dataset_val = lmdbDataset_real", "\n", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_realIC15TextSR", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_realIC15TextSR", "\n", "", "else", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_realIC15TextSR", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_real", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_realIC15TextSR", "\n", "\n", "\n", "", "", "else", ":", "\n", "# print(\"data goes here:\")", "\n", "            ", "if", "self", ".", "args", ".", "arch", "==", "\"tsrn\"", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "# alignCollate_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "self", ".", "align_collate", "\n", "self", ".", "load_dataset_val", "=", "self", ".", "load_dataset", "\n", "\n", "# if self.args.go_test:", "\n", "# self.load_dataset_val = lmdbDataset_realIC15", "\n", "# self.load_dataset_val = lmdbDataset_real", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_realForTest", "#lmdbDataset_real", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"sem_tsrn\"", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollateW2V_real", "\n", "self", ".", "load_dataset", "=", "lmdbDatasetWithW2V_real", "\n", "\n", "self", ".", "load_dataset_val", "=", "lmdbDatasetWithW2V_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"tsrn_c2f\"", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollatec2f_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"tsrn_tl\"", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_wmask'", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_cascade'", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "#lmdbDataset_realForTest #lmdbDataset_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srcnn_tl'", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srresnet_tl'", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'rdn_tl'", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'vdsr_tl'", ":", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_realWTLAMask", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "alignCollate_realWTL", "\n", "self", ".", "load_dataset_val", "=", "lmdbDataset_real", "\n", "\n", "", "else", ":", "\n", "\n", "# print(\"go here:\")", "\n", "\n", "                ", "self", ".", "align_collate", "=", "alignCollate_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "\n", "self", ".", "align_collate_val", "=", "self", ".", "align_collate", "\n", "self", ".", "load_dataset_val", "=", "self", ".", "load_dataset", "\n", "\n", "", "", "self", ".", "resume", "=", "args", ".", "resume", "if", "args", ".", "resume", "is", "not", "None", "else", "config", ".", "TRAIN", ".", "resume", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "if", "args", ".", "batch_size", "is", "not", "None", "else", "self", ".", "config", ".", "TRAIN", ".", "batch_size", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "alpha_dict", "=", "{", "\n", "'digit'", ":", "string", ".", "digits", ",", "\n", "'lower'", ":", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ",", "\n", "'upper'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", ",", "\n", "'all'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", "+", "string", ".", "punctuation", "\n", "}", "\n", "self", ".", "test_data_dir", "=", "self", ".", "args", ".", "test_data_dir", "if", "self", ".", "args", ".", "test_data_dir", "is", "not", "None", "else", "self", ".", "config", ".", "TEST", ".", "test_data_dir", "\n", "self", ".", "voc_type", "=", "self", ".", "config", ".", "TRAIN", ".", "voc_type", "\n", "self", ".", "alphabet", "=", "alpha_dict", "[", "self", ".", "voc_type", "]", "\n", "self", ".", "max_len", "=", "config", ".", "TRAIN", ".", "max_len", "\n", "self", ".", "vis_dir", "=", "self", ".", "args", ".", "vis_dir", "if", "self", ".", "args", ".", "vis_dir", "is", "not", "None", "else", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "vis_dir", "\n", "self", ".", "cal_psnr", "=", "ssim_psnr", ".", "calculate_psnr", "\n", "self", ".", "cal_ssim", "=", "ssim_psnr", ".", "SSIM", "(", ")", "\n", "self", ".", "mask", "=", "self", ".", "args", ".", "mask", "\n", "alphabet_moran", "=", "':'", ".", "join", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", "+", "'$'", ")", "\n", "self", ".", "converter_moran", "=", "utils_moran", ".", "strLabelConverterForAttention", "(", "alphabet_moran", ",", "':'", ")", "\n", "self", ".", "converter_crnn", "=", "utils_crnn", ".", "strLabelConverter", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_train_data": [[237, 257], ["isinstance", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.ConcatDataset", "TypeError", "dataset_list.append", "int", "base.TextBase.align_collate", "base.TextBase.load_dataset"], "methods", ["None"], ["", "def", "get_train_data", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "if", "isinstance", "(", "cfg", ".", "train_data_dir", ",", "list", ")", ":", "\n", "            ", "dataset_list", "=", "[", "]", "\n", "for", "data_dir_", "in", "cfg", ".", "train_data_dir", ":", "\n", "                ", "dataset_list", ".", "append", "(", "\n", "self", ".", "load_dataset", "(", "root", "=", "data_dir_", ",", "\n", "voc_type", "=", "cfg", ".", "voc_type", ",", "\n", "max_len", "=", "cfg", ".", "max_len", ")", ")", "\n", "", "train_dataset", "=", "dataset", ".", "ConcatDataset", "(", "dataset_list", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'check trainRoot'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "cfg", ".", "workers", ")", ",", "\n", "collate_fn", "=", "self", ".", "align_collate", "(", "imgH", "=", "cfg", ".", "height", ",", "imgW", "=", "cfg", ".", "width", ",", "down_sample_scale", "=", "cfg", ".", "down_sample_scale", ",", "\n", "mask", "=", "self", ".", "mask", ",", "train", "=", "True", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "return", "train_dataset", ",", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_val_data": [[258, 268], ["isinstance", "base.TextBase.get_test_data", "dataset_list.append", "loader_list.append"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_test_data"], ["", "def", "get_val_data", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "assert", "isinstance", "(", "cfg", ".", "VAL", ".", "val_data_dir", ",", "list", ")", "\n", "dataset_list", "=", "[", "]", "\n", "loader_list", "=", "[", "]", "\n", "for", "data_dir_", "in", "cfg", ".", "VAL", ".", "val_data_dir", ":", "\n", "            ", "val_dataset", ",", "val_loader", "=", "self", ".", "get_test_data", "(", "data_dir_", ")", "\n", "dataset_list", ".", "append", "(", "val_dataset", ")", "\n", "loader_list", ".", "append", "(", "val_loader", ")", "\n", "", "return", "dataset_list", ",", "loader_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_test_data": [[269, 292], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "base.TextBase.load_dataset_val", "base.TextBase.load_dataset_val", "int", "base.TextBase.align_collate_val"], "methods", ["None"], ["", "def", "get_test_data", "(", "self", ",", "dir_", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "self", ".", "args", ".", "test_data_dir", "\n", "\n", "if", "self", ".", "args", ".", "go_test", ":", "\n", "            ", "test_dataset", "=", "self", ".", "load_dataset_val", "(", "root", "=", "dir_", ",", "\n", "voc_type", "=", "cfg", ".", "voc_type", ",", "\n", "max_len", "=", "cfg", ".", "max_len", ",", "\n", "test", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "test_dataset", "=", "self", ".", "load_dataset_val", "(", "root", "=", "dir_", ",", "#load_dataset", "\n", "voc_type", "=", "cfg", ".", "voc_type", ",", "\n", "max_len", "=", "cfg", ".", "max_len", ",", "\n", "test", "=", "True", ",", "\n", ")", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "int", "(", "cfg", ".", "workers", ")", ",", "\n", "collate_fn", "=", "self", ".", "align_collate_val", "(", "imgH", "=", "cfg", ".", "height", ",", "imgW", "=", "cfg", ".", "width", ",", "down_sample_scale", "=", "cfg", ".", "down_sample_scale", ",", "\n", "mask", "=", "self", ".", "mask", ",", "train", "=", "False", ")", ",", "\n", "drop_last", "=", "False", ")", "\n", "return", "test_dataset", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.generator_init": [[293, 426], ["vdsr.VDSR_TL.tsrn.TSRN", "loss.image_loss.ImageLoss", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "ptflops.get_model_complexity_info", "print", "print", "print", "print", "model.vdsr.VDSR_TL.to", "vdsr.VDSR_TL.tsrn.TSRN_C2F", "loss.image_loss.ImageLoss", "torch.MSELoss.keys", "torch.MSELoss.to", "print", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "vdsr.VDSR_TL.tsrn.SEM_TSRN", "loss.image_loss.ImageLoss", "loss.semantic_loss.SemanticLoss", "image_crit[].to", "torch.MSELoss.keys", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "os.path.isdir", "os.path.isdir", "vdsr.VDSR_TL.tsrn.TSRN_TL", "loss.image_loss.ImageLoss", "range", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.vdsr.VDSR_TL.load_state_dict", "model.vdsr.VDSR_TL.load_state_dict", "model.vdsr.VDSR_TL.load_state_dict", "model.vdsr.VDSR_TL.load_state_dict", "vdsr.VDSR_TL.tsrn.TSRN_TL", "loss.image_loss.ImageLoss", "range", "vdsr.VDSR_TL.tsrn.TSRN_TL", "loss.image_loss.ImageLoss", "range", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "vdsr.VDSR_TL.bicubic.BICUBIC", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "os.path.join", "[].items", "[].items", "vdsr.VDSR_TL.srcnn.SRCNN", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "vdsr.VDSR_TL.vdsr.VDSR", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "vdsr.VDSR_TL.srresnet.SRResNet", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "str", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "vdsr.VDSR_TL.esrgan.RRDBNet", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "os.path.join", "vdsr.VDSR_TL.rdn.RDN", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "vdsr.VDSR_TL.edsr.EDSR", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "vdsr.VDSR_TL.lapsrn.LapSRN", "vdsr.VDSR_TL.lapsrn.L1_Charbonnier_loss", "str", "vdsr.VDSR_TL.srcnn.SRCNN_TL", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "vdsr.VDSR_TL.srresnet.SRResNet_TL", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "vdsr.VDSR_TL.rdn.RDN_TL", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "vdsr.VDSR_TL.vdsr.VDSR_TL", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_complexity_info"], ["", "def", "generator_init", "(", "self", ",", "iter", "=", "-", "1", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "if", "self", ".", "args", ".", "arch", "==", "'tsrn'", ":", "\n", "            ", "model", "=", "tsrn", ".", "TSRN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "image_crit", "=", "image_loss", ".", "ImageLoss", "(", "gradient", "=", "self", ".", "args", ".", "gradient", ",", "loss_weight", "=", "[", "1", ",", "1e-4", "]", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_c2f'", ":", "\n", "            ", "model", "=", "tsrn", ".", "TSRN_C2F", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "image_crit", "=", "image_loss", ".", "ImageLoss", "(", "gradient", "=", "self", ".", "args", ".", "gradient", ",", "loss_weight", "=", "[", "1", ",", "1e-4", "]", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'sem_tsrn'", ":", "\n", "            ", "model", "=", "tsrn", ".", "SEM_TSRN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "image_loss_com", "=", "image_loss", ".", "ImageLoss", "(", "gradient", "=", "self", ".", "args", ".", "gradient", ",", "loss_weight", "=", "[", "1", ",", "1e-4", "]", ")", "\n", "semantic_loss_com", "=", "semantic_loss", ".", "SemanticLoss", "(", ")", "\n", "image_crit", "=", "{", "\"image_loss\"", ":", "image_loss_com", ",", "\"semantic_loss\"", ":", "semantic_loss_com", "}", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_tl'", ":", "\n", "            ", "model", "=", "tsrn", ".", "TSRN_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "\n", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "\n", "image_crit", "=", "image_loss", ".", "ImageLoss", "(", "gradient", "=", "self", ".", "args", ".", "gradient", ",", "loss_weight", "=", "[", "1", ",", "1e-4", "]", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_wmask'", ":", "\n", "            ", "model", "=", "tsrn", ".", "TSRN_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "\n", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "image_crit", "=", "image_loss", ".", "ImageLoss", "(", "gradient", "=", "self", ".", "args", ".", "gradient", ",", "loss_weight", "=", "[", "1", ",", "1e-4", "]", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_cascade'", ":", "\n", "            ", "model", "=", "tsrn", ".", "TSRN_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "\n", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "\n", "image_crit", "=", "image_loss", ".", "ImageLoss", "(", "gradient", "=", "self", ".", "args", ".", "gradient", ",", "loss_weight", "=", "[", "1", ",", "1e-4", "]", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'bicubic'", "and", "self", ".", "args", ".", "test", ":", "\n", "            ", "model", "=", "bicubic", ".", "BICUBIC", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srcnn'", ":", "\n", "            ", "model", "=", "srcnn", ".", "SRCNN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'vdsr'", ":", "\n", "            ", "model", "=", "vdsr", ".", "VDSR", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srres'", ":", "\n", "            ", "model", "=", "srresnet", ".", "SRResNet", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'esrgan'", ":", "\n", "            ", "model", "=", "esrgan", ".", "RRDBNet", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'rdn'", ":", "\n", "            ", "model", "=", "rdn", ".", "RDN", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'edsr'", ":", "\n", "            ", "model", "=", "edsr", ".", "EDSR", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'lapsrn'", ":", "\n", "            ", "model", "=", "lapsrn", ".", "LapSRN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "lapsrn", ".", "L1_Charbonnier_loss", "(", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srcnn_tl'", ":", "\n", "            ", "model", "=", "srcnn", ".", "SRCNN_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srresnet_tl'", ":", "\n", "            ", "model", "=", "srresnet", ".", "SRResNet_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'rdn_tl'", ":", "\n", "            ", "model", "=", "rdn", ".", "RDN_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'vdsr_tl'", ":", "\n", "            ", "model", "=", "vdsr", ".", "VDSR_TL", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "0", ")", ":", "\n", "# input = torch.randn(1, 3, 16, 64).to(self.device)", "\n", "# tp_in = torch.randn(1, 37, 1, 25).to(self.device)", "\n", "# net = models.densenet161()", "\n", "            ", "macs", ",", "params", "=", "ptflops", ".", "get_model_complexity_info", "(", "model", ",", "(", "4", ",", "16", ",", "64", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"---------------- SR Module -----------------\"", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "print", "(", "\"--------------------------------------------\"", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "arch", "!=", "'bicubic'", ":", "\n", "            ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "arch", "==", "'sem_tsrn'", ":", "\n", "                ", "for", "k", "in", "image_crit", ".", "keys", "(", ")", ":", "\n", "                    ", "image_crit", "[", "k", "]", "=", "image_crit", "[", "k", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "else", ":", "\n", "                ", "image_crit", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "cfg", ".", "ngpu", ">", "1", ":", "\n", "\n", "                ", "print", "(", "\"multi_gpu\"", ",", "self", ".", "device", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "arch", "==", "'sem_tsrn'", ":", "\n", "                    ", "for", "k", "in", "image_crit", ".", "keys", "(", ")", ":", "\n", "                        ", "image_crit", "[", "k", "]", "=", "torch", ".", "nn", ".", "DataParallel", "(", "image_crit", "[", "k", "]", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "image_crit", "=", "torch", ".", "nn", ".", "DataParallel", "(", "image_crit", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "\n", "", "", "if", "self", ".", "resume", "is", "not", "''", ":", "\n", "                ", "print", "(", "'loading pre-trained model from %s '", "%", "self", ".", "resume", ")", "\n", "if", "self", ".", "config", ".", "TRAIN", ".", "ngpu", "==", "1", ":", "\n", "# if is dir, we need to initialize the model list", "\n", "                    ", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "resume", ")", ":", "\n", "                        ", "model", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "resume", ",", "\"model_best_\"", "+", "str", "(", "iter", ")", "+", "\".pth\"", ")", "\n", ")", "[", "'state_dict_G'", "]", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "resume", ")", "[", "'state_dict_G'", "]", ")", "\n", "", "", "else", ":", "\n", "\n", "                    ", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "resume", ")", ":", "\n", "                        ", "model", ".", "load_state_dict", "(", "\n", "{", "'module.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "resume", ",", "\"model_best_\"", "+", "str", "(", "iter", ")", "+", "\".pth\"", ")", "\n", ")", "[", "'state_dict_G'", "]", ".", "items", "(", ")", "}", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "load_state_dict", "(", "\n", "{", "'module.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "torch", ".", "load", "(", "self", ".", "resume", ")", "[", "'state_dict_G'", "]", ".", "items", "(", ")", "}", ")", "\n", "", "", "", "", "return", "{", "'model'", ":", "model", ",", "'crit'", ":", "image_crit", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.optimizer_init": [[427, 487], ["type", "type", "list", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "list", "model.parameters", "torch.SGD", "torch.SGD", "torch.SGD", "list", "type", "list", "torch.SGD", "torch.SGD", "torch.SGD", "type", "list", "torch.SGD", "torch.SGD", "torch.SGD", "m.parameters", "recg.parameters", "list", "model.parameters", "list", "model.parameters", "list", "m.parameters", "list", "m.parameters", "model.recognizer.parameters", "list", "list", "model.parameters", "model.parameters", "model.recognizer.parameters"], "methods", ["None"], ["", "def", "optimizer_init", "(", "self", ",", "model", ",", "recognizer", "=", "None", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "\n", "# print(\"recognizer:\", recognizer)", "\n", "\n", "if", "not", "recognizer", "is", "None", ":", "\n", "\n", "            ", "if", "type", "(", "recognizer", ")", "==", "list", ":", "\n", "                ", "if", "cfg", ".", "optimizer", "==", "\"Adam\"", ":", "\n", "\n", "# print(\"model:\", type(model.parameters()), model.parameters())", "\n", "                    ", "rec_params", "=", "[", "]", "\n", "model_params", "=", "[", "]", "\n", "for", "recg", "in", "recognizer", ":", "\n", "                        ", "rec_params", "+=", "list", "(", "recg", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "type", "(", "model", ")", "==", "list", ":", "\n", "                        ", "for", "m", "in", "model", ":", "\n", "                            ", "model_params", "+=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "model_params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "model_params", "+", "rec_params", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "betas", "=", "(", "cfg", ".", "beta1", ",", "0.999", ")", ")", "\n", "", "elif", "cfg", ".", "optimizer", "==", "\"SGD\"", ":", "\n", "                    ", "optimizer", "=", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "rec_params", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "momentum", "=", "0.9", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "cfg", ".", "optimizer", "==", "\"Adam\"", ":", "\n", "\n", "# print(\"model:\", type(model.parameters()), model.parameters())", "\n", "                    ", "model_params", "=", "[", "]", "\n", "if", "type", "(", "model", ")", "==", "list", ":", "\n", "                        ", "for", "m", "in", "model", ":", "\n", "                            ", "model_params", "+=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "model_params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "model_params", "+", "list", "(", "recognizer", ".", "parameters", "(", ")", ")", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "betas", "=", "(", "cfg", ".", "beta1", ",", "0.999", ")", ")", "\n", "", "elif", "cfg", ".", "optimizer", "==", "\"SGD\"", ":", "\n", "                    ", "optimizer", "=", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "list", "(", "recognizer", ".", "parameters", "(", ")", ")", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "momentum", "=", "0.9", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "model_params", "=", "[", "]", "\n", "if", "type", "(", "model", ")", "==", "list", ":", "\n", "                ", "for", "m", "in", "model", ":", "\n", "                    ", "model_params", "+=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "model_params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "cfg", ".", "optimizer", "==", "\"Adam\"", ":", "\n", "                ", "optimizer", "=", "optim", ".", "Adam", "(", "model_params", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "betas", "=", "(", "cfg", ".", "beta1", ",", "0.999", ")", ")", "\n", "", "elif", "cfg", ".", "optimizer", "==", "\"SGD\"", ":", "\n", "                ", "optimizer", "=", "optim", ".", "SGD", "(", "model_params", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "momentum", "=", "0.9", ")", "\n", "\n", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.tripple_display": [[490, 516], ["range", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.utils.make_grid", "os.path.join", "os.path.join", "im_name.replace.replace.replace", "transforms.Compose.cpu", "tensor_out.cpu", "tensor_target.cpu", "os.path.exists", "os.mkdir", "str", "os.path.exists", "os.mkdir", "torchvision.utils.save_image", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir"], ["", "def", "tripple_display", "(", "self", ",", "image_in", ",", "image_out", ",", "image_target", ",", "pred_str_lr", ",", "pred_str_sr", ",", "label_strs", ",", "index", ")", ":", "\n", "        ", "for", "i", "in", "(", "range", "(", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "n_vis", ")", ")", ":", "\n", "# embed()", "\n", "            ", "tensor_in", "=", "image_in", "[", "i", "]", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "image_target", ".", "shape", "[", "-", "2", "]", ",", "image_target", ".", "shape", "[", "-", "1", "]", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", ")", "\n", "\n", "tensor_in", "=", "transform", "(", "tensor_in", ".", "cpu", "(", ")", ")", "\n", "tensor_out", "=", "image_out", "[", "i", "]", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor_target", "=", "image_target", "[", "i", "]", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "images", "=", "(", "[", "tensor_in", ",", "tensor_out", ".", "cpu", "(", ")", ",", "tensor_target", ".", "cpu", "(", ")", "]", ")", "\n", "vis_im", "=", "torch", ".", "stack", "(", "images", ")", "\n", "vis_im", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "vis_im", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "out_root", "=", "os", ".", "path", ".", "join", "(", "'./demo'", ",", "self", ".", "vis_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_root", ",", "str", "(", "index", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "out_path", ")", "\n", "", "im_name", "=", "pred_str_lr", "[", "i", "]", "+", "'_'", "+", "pred_str_sr", "[", "i", "]", "+", "'_'", "+", "label_strs", "[", "i", "]", "+", "'_.png'", "\n", "im_name", "=", "im_name", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "if", "index", "is", "not", "0", ":", "\n", "                ", "torchvision", ".", "utils", ".", "save_image", "(", "vis_im", ",", "os", ".", "path", ".", "join", "(", "out_path", ",", "im_name", ")", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.test_display": [[517, 545], ["range", "image_in[].cpu", "image_out[].cpu", "image_target[].cpu", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.utils.make_grid", "os.path.join", "im_name.replace.replace.replace", "torchvision.utils.save_image", "str_filt", "str_filt", "str_filt", "str_filt", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir"], ["", "", "", "def", "test_display", "(", "self", ",", "image_in", ",", "image_out", ",", "image_target", ",", "pred_str_lr", ",", "pred_str_sr", ",", "label_strs", ",", "str_filt", ")", ":", "\n", "        ", "visualized", "=", "0", "\n", "for", "i", "in", "(", "range", "(", "image_in", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "True", ":", "\n", "                ", "if", "(", "str_filt", "(", "pred_str_lr", "[", "i", "]", ",", "'lower'", ")", "!=", "str_filt", "(", "label_strs", "[", "i", "]", ",", "'lower'", ")", ")", "and", "(", "str_filt", "(", "pred_str_sr", "[", "i", "]", ",", "'lower'", ")", "==", "str_filt", "(", "label_strs", "[", "i", "]", ",", "'lower'", ")", ")", ":", "\n", "                    ", "visualized", "+=", "1", "\n", "tensor_in", "=", "image_in", "[", "i", "]", ".", "cpu", "(", ")", "\n", "tensor_out", "=", "image_out", "[", "i", "]", ".", "cpu", "(", ")", "\n", "tensor_target", "=", "image_target", "[", "i", "]", ".", "cpu", "(", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "image_target", ".", "shape", "[", "-", "2", "]", ",", "image_target", ".", "shape", "[", "-", "1", "]", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", ")", "\n", "tensor_in", "=", "transform", "(", "tensor_in", ")", "\n", "images", "=", "(", "[", "tensor_in", ",", "tensor_out", ",", "tensor_target", "]", ")", "\n", "vis_im", "=", "torch", ".", "stack", "(", "images", ")", "\n", "vis_im", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "vis_im", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "out_root", "=", "os", ".", "path", ".", "join", "(", "'./display'", ",", "self", ".", "vis_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "", "im_name", "=", "pred_str_lr", "[", "i", "]", "+", "'_'", "+", "pred_str_sr", "[", "i", "]", "+", "'_'", "+", "label_strs", "[", "i", "]", "+", "'_.png'", "\n", "im_name", "=", "im_name", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "vis_im", ",", "os", ".", "path", ".", "join", "(", "out_root", ",", "im_name", ")", ",", "padding", "=", "0", ")", "\n", "", "", "", "return", "visualized", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.save_checkpoint": [[546, 586], ["os.path.join", "print", "range", "os.path.exists", "os.mkdir", "len", "netG.module.state_dict", "sum", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "type", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "type", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "param.nelement", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.recognizer.state_dict", "os.path.join", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.recognizer.state_dict", "os.path.join", "netG.module.parameters", "recognizer[].state_dict", "os.path.join", "recognizer[].state_dict", "os.path.join", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["", "def", "save_checkpoint", "(", "self", ",", "netG_list", ",", "epoch", ",", "iters", ",", "best_acc_dict", ",", "best_model_info", ",", "is_best", ",", "converge_list", ",", "recognizer", "=", "None", ")", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "'ckpt'", ",", "self", ".", "vis_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "ckpt_path", ")", "\n", "\n", "", "print", "(", "\"Into saving checkpoints...\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "netG_list", ")", ")", ":", "\n", "            ", "netG", "=", "netG_list", "[", "i", "]", "\n", "save_dict", "=", "{", "\n", "'state_dict_G'", ":", "netG", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'info'", ":", "{", "'arch'", ":", "self", ".", "args", ".", "arch", ",", "'iters'", ":", "iters", ",", "'epochs'", ":", "epoch", ",", "'batch_size'", ":", "self", ".", "batch_size", ",", "\n", "'voc_type'", ":", "self", ".", "voc_type", ",", "'up_scale_factor'", ":", "self", ".", "scale_factor", "}", ",", "\n", "'best_history_res'", ":", "best_acc_dict", ",", "\n", "'best_model_info'", ":", "best_model_info", ",", "\n", "'param_num'", ":", "sum", "(", "[", "param", ".", "nelement", "(", ")", "for", "param", "in", "netG", ".", "module", ".", "parameters", "(", ")", "]", ")", ",", "\n", "'converge'", ":", "converge_list", ",", "\n", "}", "\n", "\n", "if", "is_best", ":", "\n", "                ", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'model_best_'", "+", "str", "(", "i", ")", "+", "'.pth'", ")", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'checkpoint.pth'", ")", ")", "\n", "\n", "", "", "if", "is_best", ":", "\n", "# torch.save(save_dict, os.path.join(ckpt_path, 'model_best.pth'))", "\n", "            ", "if", "not", "recognizer", "is", "None", ":", "\n", "                ", "if", "type", "(", "recognizer", ")", "==", "list", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "recognizer", ")", ")", ":", "\n", "                        ", "torch", ".", "save", "(", "recognizer", "[", "i", "]", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'recognizer_best_'", "+", "str", "(", "i", ")", "+", "'.pth'", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "recognizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'recognizer_best.pth'", ")", ")", "\n", "", "", "", "else", ":", "\n", "# torch.save(save_dict, os.path.join(ckpt_path, 'checkpoint.pth'))", "\n", "            ", "if", "not", "recognizer", "is", "None", ":", "\n", "                ", "if", "type", "(", "recognizer", ")", "==", "list", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "recognizer", ")", ")", ":", "\n", "                        ", "torch", ".", "save", "(", "recognizer", "[", "i", "]", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'recognizer_'", "+", "str", "(", "i", ")", "+", "'.pth'", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "recognizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'recognizer.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.MORAN_init": [[587, 607], ["model.moran.MORAN", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "len", "k.replace", "alphabet.split", "range"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "", "", "", "def", "MORAN_init", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "alphabet", "=", "':'", ".", "join", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", "+", "'$'", ")", "\n", "MORAN", "=", "moran", ".", "MORAN", "(", "1", ",", "len", "(", "alphabet", ".", "split", "(", "':'", ")", ")", ",", "256", ",", "32", ",", "100", ",", "BidirDecoder", "=", "True", ",", "\n", "inputDataType", "=", "'torch.cuda.FloatTensor'", ",", "CUDA", "=", "True", ")", "\n", "model_path", "=", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "moran_pretrained", "\n", "print", "(", "'loading pre-trained moran model from %s'", "%", "model_path", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "MORAN_state_dict_rename", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "# remove `module.`", "\n", "MORAN_state_dict_rename", "[", "name", "]", "=", "v", "\n", "", "MORAN", ".", "load_state_dict", "(", "MORAN_state_dict_rename", ")", "\n", "\n", "MORAN", "=", "MORAN", ".", "to", "(", "self", ".", "device", ")", "\n", "MORAN", "=", "torch", ".", "nn", ".", "DataParallel", "(", "MORAN", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "for", "p", "in", "MORAN", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "MORAN", ".", "eval", "(", ")", "\n", "return", "MORAN", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_moran_data": [[608, 633], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "base.TextBase.converter_moran.encode", "utils.utils_moran.loadData", "utils.utils_moran.loadData", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "new_input.append", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.loadData", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.loadData"], ["", "def", "parse_moran_data", "(", "self", ",", "imgs_input", ")", ":", "\n", "\n", "        ", "in_width", "=", "self", ".", "config", ".", "TRAIN", ".", "width", "if", "self", ".", "config", ".", "TRAIN", ".", "width", "!=", "128", "else", "100", "\n", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "            ", "batch_size", "=", "len", "(", "imgs_input", ")", "\n", "new_input", "=", "[", "]", "\n", "for", "img", "in", "imgs_input", ":", "\n", "                ", "new_input", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "img", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "in_width", ")", ",", "mode", "=", "'bicubic'", ")", ")", "\n", "", "imgs_input", "=", "torch", ".", "cat", "(", "new_input", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "imgs_input", ".", "shape", "[", "0", "]", "\n", "imgs_input", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "imgs_input", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "in_width", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "\n", "", "R", "=", "imgs_input", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "imgs_input", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "imgs_input", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "text", "=", "torch", ".", "LongTensor", "(", "batch_size", "*", "5", ")", "\n", "length", "=", "torch", ".", "IntTensor", "(", "batch_size", ")", "\n", "max_iter", "=", "20", "\n", "t", ",", "l", "=", "self", ".", "converter_moran", ".", "encode", "(", "[", "'0'", "*", "max_iter", "]", "*", "batch_size", ")", "\n", "utils_moran", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils_moran", ".", "loadData", "(", "length", ",", "l", ")", "\n", "return", "tensor", ",", "length", ",", "text", ",", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.CRNN_init": [[634, 661], ["model.to.crnn.CRNN", "model.to.to.to", "ptflops.get_model_complexity_info", "print", "print", "print", "print", "base.AsterInfo", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.to.to.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_complexity_info"], ["", "def", "CRNN_init", "(", "self", ",", "recognizer_path", "=", "None", ",", "opt", "=", "None", ")", ":", "\n", "        ", "model", "=", "crnn", ".", "CRNN", "(", "32", ",", "1", ",", "37", ",", "256", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "macs", ",", "params", "=", "ptflops", ".", "get_model_complexity_info", "(", "model", ",", "(", "1", ",", "32", ",", "100", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"---------------- TP Module -----------------\"", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "print", "(", "\"--------------------------------------------\"", ")", "\n", "\n", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "model_path", "=", "recognizer_path", "if", "not", "recognizer_path", "is", "None", "else", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "crnn_pretrained", "\n", "print", "(", "'loading pretrained crnn model from %s'", "%", "model_path", ")", "\n", "stat_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "# print(\"stat_dict:\", stat_dict.keys())", "\n", "# if recognizer_path is None:", "\n", "try", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "stat_dict", ")", "\n", "# else:", "\n", "", "except", "Exception", ":", "\n", "            ", "model", "=", "stat_dict", "\n", "# model #.eval()", "\n", "# model.eval()", "\n", "\n", "", "return", "model", ",", "aster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.CRNNRes18_init": [[662, 680], ["model.to.crnn.CRNN_ResNet18", "model.to.to.to", "base.AsterInfo", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "CRNNRes18_init", "(", "self", ",", "recognizer_path", "=", "None", ",", "opt", "=", "None", ")", ":", "\n", "        ", "model", "=", "crnn", ".", "CRNN_ResNet18", "(", "32", ",", "1", ",", "37", ",", "256", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "model_path", "=", "recognizer_path", "if", "not", "recognizer_path", "is", "None", "else", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "crnn_pretrained", "\n", "print", "(", "'loading pretrained crnn model from %s'", "%", "model_path", ")", "\n", "stat_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "# print(\"stat_dict:\", stat_dict.keys())", "\n", "# if recognizer_path is None:", "\n", "#     if stat_dict == model.state_dict():", "\n", "#         model.load_state_dict(stat_dict)", "\n", "# else:", "\n", "#     model = stat_dict", "\n", "\n", "# model #.eval()", "\n", "# model.eval()", "\n", "return", "model", ",", "aster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.TPG_init": [[681, 719], ["model.to.crnn.Model", "ptflops.get_model_complexity_info", "print", "print", "print", "print", "model.to.to.to", "base.AsterInfo", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.to.to.state_dict().keys", "torch.load.keys", "torch.load.keys", "torch.load.keys", "model.to.to.state_dict", "model.to.to.load_state_dict", "model.to.to.state_dict", "print", "key.replace", "key.replace", "key.replace"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_complexity_info"], ["", "def", "TPG_init", "(", "self", ",", "recognizer_path", "=", "None", ",", "opt", "=", "None", ")", ":", "\n", "        ", "model", "=", "crnn", ".", "Model", "(", "opt", ")", "\n", "\n", "macs", ",", "params", "=", "ptflops", ".", "get_model_complexity_info", "(", "model", ",", "(", "1", ",", "32", ",", "100", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"---------------- TP Module -----------------\"", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "print", "(", "\"--------------------------------------------\"", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "model_path", "=", "recognizer_path", "if", "not", "recognizer_path", "is", "None", "else", "opt", ".", "saved_model", "\n", "print", "(", "'loading pretrained TPG model from %s'", "%", "model_path", ")", "\n", "stat_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "\n", "model_keys", "=", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "#print(\"state_dict:\", len(stat_dict))", "\n", "#if type(stat_dict) == list:", "\n", "#    print(\"state_dict:\", len(stat_dict))", "\n", "#    stat_dict = stat_dict[0]#.state_dict()", "\n", "#load_keys = stat_dict.keys()", "\n", "\n", "# if recognizer_path is None:", "\n", "try", ":", "\n", "# model.load_state_dict(stat_dict)", "\n", "            ", "load_keys", "=", "stat_dict", ".", "keys", "(", ")", "\n", "man_load_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "stat_dict", ":", "\n", "                ", "if", "not", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "in", "man_load_dict", ":", "\n", "                    ", "print", "(", "\"Key not match\"", ",", "key", ",", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ")", "\n", "", "man_load_dict", "[", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "]", "=", "stat_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "man_load_dict", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "model", "=", "stat_dict", "\n", "\n", "", "return", "model", ",", "aster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_SEED_data": [[720, 757], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.functional.interpolate.to().sub_().div_", "torch.nn.functional.interpolate.to().sub_().div_", "torch.nn.functional.interpolate.to().sub_().div_", "new_input.append", "label_encs.to.to.to", "embeds_.to.to.to", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "range", "torch.nn.functional.interpolate.to().sub_", "torch.nn.functional.interpolate.to().sub_", "torch.nn.functional.interpolate.to().sub_", "torch.nn.functional.interpolate.to", "torch.nn.functional.interpolate.to", "torch.nn.functional.interpolate.to"], "methods", ["None"], ["", "def", "parse_SEED_data", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "input_dict", "=", "{", "}", "\n", "# if global_args.evaluate_with_lexicon:", "\n", "# imgs, label_encs, lengths, file_name = inputs", "\n", "# else:", "\n", "#     # imgs, label_encs, lengths = inputs", "\n", "#     imgs, label_encs, lengths, embeds_ = inputs", "\n", "\n", "imgs_input", "=", "inputs", "\n", "\n", "in_width", "=", "self", ".", "config", ".", "TRAIN", ".", "width", "if", "self", ".", "config", ".", "TRAIN", ".", "width", "!=", "128", "else", "100", "\n", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "            ", "batch_size", "=", "len", "(", "imgs_input", ")", "\n", "new_input", "=", "[", "]", "\n", "for", "img", "in", "imgs_input", ":", "\n", "                ", "new_input", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "img", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "in_width", ")", ",", "mode", "=", "'bicubic'", ")", ")", "\n", "", "imgs_input", "=", "torch", ".", "cat", "(", "new_input", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "imgs_input", ".", "shape", "[", "0", "]", "\n", "imgs_input", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "imgs_input", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "in_width", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "\n", "", "label_encs", ",", "lengths", ",", "file_namem", ",", "embeds_", "=", "None", ",", "[", "25", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", "None", ",", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "images", "=", "imgs_input", ".", "to", "(", "self", ".", "device", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "if", "label_encs", "is", "not", "None", ":", "\n", "                ", "label_encs", "=", "label_encs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "embeds_", "is", "not", "None", ":", "\n", "                ", "embeds_", "=", "embeds_", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "input_dict", "[", "'images'", "]", "=", "images", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "label_encs", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "lengths", "\n", "input_dict", "[", "'rec_embeds'", "]", "=", "embeds_", "\n", "# if global_args.evaluate_with_lexicon:", "\n", "#     input_dict['file_name'] = file_name", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.SEED_init": [[758, 804], ["ModelBuilder", "ptflops.get_model_complexity_info", "print", "print", "print", "print", "base.AsterInfo", "print", "model.to.to.state_dict().keys", "load_checkpoint", "model.to.to.load_state_dict", "model.to.to.to", "model.to.to.state_dict"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_modelsummary.get_model_complexity_info", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.serialization.load_checkpoint"], ["", "def", "SEED_init", "(", "self", ",", "recognizer_path", "=", "None", ",", "opt", "=", "None", ")", ":", "\n", "\n", "        ", "model", "=", "ModelBuilder", "(", "arch", "=", "\"ResNet_ASTER\"", ",", "rec_num_classes", "=", "94", "+", "3", ",", "\n", "sDim", "=", "512", ",", "attDim", "=", "512", ",", "max_len_labels", "=", "100", ",", "\n", "eos", "=", "94", ",", "STN_ON", "=", "True", ")", "#test_dataset.char2id[test_dataset.EOS]", "\n", "\n", "macs", ",", "params", "=", "ptflops", ".", "get_model_complexity_info", "(", "model", ",", "(", "3", ",", "32", ",", "100", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"---------------- TP Module -----------------\"", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "print", "(", "\"--------------------------------------------\"", ")", "\n", "\n", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "model_path", "=", "recognizer_path", "if", "not", "recognizer_path", "is", "None", "else", "\"./se_aster.tar\"", "\n", "print", "(", "'loading pretrained TPG model from %s'", "%", "model_path", ")", "\n", "# stat_dict = torch.load(model_path)", "\n", "\n", "model_keys", "=", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "#print(\"state_dict:\", len(stat_dict))", "\n", "#if type(stat_dict) == list:", "\n", "#    print(\"state_dict:\", len(stat_dict))", "\n", "#    stat_dict = stat_dict[0]#.state_dict()", "\n", "#load_keys = stat_dict.keys()", "\n", "\n", "# if recognizer_path is None:", "\n", "'''\n        try:\n            # model.load_state_dict(stat_dict)\n            load_keys = stat_dict.keys()\n            man_load_dict = model.state_dict()\n            for key in stat_dict:\n                if not key.replace(\"module.\", \"\") in man_load_dict:\n                    print(\"Key not match\", key, key.replace(\"module.\", \"\"))\n                man_load_dict[key.replace(\"module.\", \"\")] = stat_dict[key]\n            model.load_state_dict(man_load_dict)\n        except Exception:\n            model = stat_dict\n        '''", "\n", "checkpoint", "=", "load_checkpoint", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "model", ",", "aster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data": [[806, 830], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "new_input.append", "len", "img.unsqueeze.unsqueeze.unsqueeze", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "parse_crnn_data", "(", "self", ",", "imgs_input", ")", ":", "\n", "\n", "        ", "in_width", "=", "self", ".", "config", ".", "TRAIN", ".", "width", "if", "self", ".", "config", ".", "TRAIN", ".", "width", "!=", "128", "else", "100", "\n", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "            ", "batch_size", "=", "len", "(", "imgs_input", ")", "\n", "new_input", "=", "[", "]", "\n", "for", "img", "in", "imgs_input", ":", "\n", "# print(\"img:\", img.shape)", "\n", "                ", "if", "len", "(", "img", ".", "shape", ")", "<", "4", ":", "\n", "                    ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "", "new_input", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "img", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "in_width", ")", ",", "mode", "=", "'bicubic'", ")", ")", "\n", "", "imgs_input", "=", "torch", ".", "cat", "(", "new_input", ",", "0", ")", "\n", "", "else", ":", "\n", "\n", "            ", "batch_size", "=", "imgs_input", ".", "shape", "[", "0", "]", "\n", "imgs_input", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "imgs_input", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "in_width", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "\n", "# imgs_input = torch.nn.functional.interpolate(imgs_input, (32, in_width), mode='bicubic')", "\n", "", "R", "=", "imgs_input", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "imgs_input", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "imgs_input", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.Aster_init": [[831, 843], ["base.AsterInfo", "model.recognizer.RecognizerBuilder", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "print", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "range"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "def", "Aster_init", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "aster", "=", "recognizer", ".", "RecognizerBuilder", "(", "arch", "=", "'ResNet_ASTER'", ",", "rec_num_classes", "=", "aster_info", ".", "rec_num_classes", ",", "\n", "sDim", "=", "512", ",", "attDim", "=", "512", ",", "max_len_labels", "=", "aster_info", ".", "max_len", ",", "\n", "eos", "=", "aster_info", ".", "char2id", "[", "aster_info", ".", "EOS", "]", ",", "STN_ON", "=", "True", ")", "\n", "aster", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "rec_pretrained", ")", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'load pred_trained aster model from %s'", "%", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "rec_pretrained", ")", "\n", "aster", "=", "aster", ".", "to", "(", "self", ".", "device", ")", "\n", "aster", "=", "torch", ".", "nn", ".", "DataParallel", "(", "aster", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "aster", ".", "eval", "(", ")", "\n", "return", "aster", ",", "aster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_aster_data": [[844, 865], ["base.AsterInfo", "torch.nn.functional.interpolate.to", "torch.nn.functional.interpolate.to", "torch.nn.functional.interpolate.to", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "new_input.append", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "parse_aster_data", "(", "self", ",", "imgs_input", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "input_dict", "=", "{", "}", "\n", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "            ", "batch_size", "=", "len", "(", "imgs_input", ")", "\n", "new_input", "=", "[", "]", "\n", "for", "img", "in", "imgs_input", ":", "\n", "                ", "new_input", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "img", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "128", ")", ",", "mode", "=", "'bicubic'", ")", ")", "\n", "", "imgs_input", "=", "torch", ".", "cat", "(", "new_input", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "imgs_input", ".", "shape", "[", "0", "]", "\n", "imgs_input", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "imgs_input", "[", ":", ",", ":", "3", ",", "...", "]", ",", "(", "32", ",", "128", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "\n", "", "images_input", "=", "imgs_input", ".", "to", "(", "self", ".", "device", ")", "\n", "input_dict", "[", "'images'", "]", "=", "images_input", "*", "2", "-", "1", "\n", "batch_size", "=", "images_input", ".", "shape", "[", "0", "]", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "torch", ".", "IntTensor", "(", "batch_size", ",", "aster_info", ".", "max_len", ")", ".", "fill_", "(", "1", ")", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "[", "aster_info", ".", "max_len", "]", "*", "batch_size", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.AsterInfo.__init__": [[868, 880], ["object.__init__", "utils.labelmaps.get_vocabulary", "dict", "dict", "len", "zip", "zip", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.get_vocabulary"], ["    ", "def", "__init__", "(", "self", ",", "voc_type", ")", ":", "\n", "        ", "super", "(", "AsterInfo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "assert", "voc_type", "in", "[", "'digit'", ",", "'lower'", ",", "'upper'", ",", "'all'", "]", "\n", "self", ".", "EOS", "=", "'EOS'", "\n", "self", ".", "max_len", "=", "100", "\n", "self", ".", "PADDING", "=", "'PADDING'", "\n", "self", ".", "UNKNOWN", "=", "'UNKNOWN'", "\n", "self", ".", "voc", "=", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "self", ".", "EOS", ",", "PADDING", "=", "self", ".", "PADDING", ",", "UNKNOWN", "=", "self", ".", "UNKNOWN", ")", "\n", "self", ".", "char2id", "=", "dict", "(", "zip", "(", "self", ".", "voc", ",", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ")", ")", "\n", "self", ".", "id2char", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ",", "self", ".", "voc", ")", ")", "\n", "self", ".", "rec_num_classes", "=", "len", "(", "self", ".", "voc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.cal_conf": [[51, 74], ["numpy.transpose", "cv2.cvtColor", "cv2.Laplacian().var", "super_resolution.TextSR.parse_crnn_data", "rec_model", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.permute().data.cpu().numpy", "torch.nn.functional.softmax.permute().data.cpu().numpy", "torch.nn.functional.softmax.permute().data.cpu().numpy", "numpy.argmax", "SR_confidence.append", "numpy.sum", "float", "image_lr[].data.cpu().numpy", "cv2.Laplacian", "torch.nn.functional.softmax.permute().data.cpu", "torch.nn.functional.softmax.permute().data.cpu", "torch.nn.functional.softmax.permute().data.cpu", "numpy.arange", "numpy.sum", "image_lr[].data.cpu", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data"], ["    ", "def", "cal_conf", "(", "self", ",", "images_lr", ",", "rec_model", ")", ":", "\n", "        ", "SR_confidence", "=", "[", "]", "\n", "for", "image_lr", "in", "images_lr", ":", "\n", "            ", "img_np", "=", "image_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "*", "255", "\n", "# print(\"img_np:\", img_np.shape)", "\n", "img_np", "=", "np", ".", "transpose", "(", "(", "img_np", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img_np_L", "=", "cv2", ".", "cvtColor", "(", "img_np", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "l_var", "=", "cv2", ".", "Laplacian", "(", "img_np_L", ",", "cv2", ".", "CV_64F", ")", ".", "var", "(", ")", "\n", "# print(\"img_up:\", np.unique(img_np), img_np.shape)", "\n", "\n", "aster_dict_hr", "=", "self", ".", "parse_crnn_data", "(", "image_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs_lr", "=", "rec_model", "(", "aster_dict_hr", ")", "\n", "label_vecs_lr", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_lr", ",", "-", "1", ")", "\n", "# [26, 1, 37] - > [1, 26, 37]", "\n", "SR_conf", "=", "label_vecs_lr", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "conf_idx", "=", "np", ".", "argmax", "(", "SR_conf", "[", "0", ",", ":", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "picked_score", "=", "SR_conf", "[", "0", ",", "np", ".", "arange", "(", "SR_conf", ".", "shape", "[", "1", "]", ")", ",", "conf_idx", "]", "\n", "\n", "SR_conf", "=", "np", ".", "sum", "(", "picked_score", "*", "(", "conf_idx", ">", "0", ")", ")", "/", "float", "(", "np", ".", "sum", "(", "conf_idx", ">", "0", ")", "+", "1e-10", ")", "\n", "SR_confidence", ".", "append", "(", "SR_conf", ")", "\n", "\n", "", "return", "SR_confidence", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.train": [[75, 540], ["super_resolution.TextSR.get_train_data", "super_resolution.TextSR.get_val_data", "super_resolution.TextSR.generator_init", "os.path.join", "tensorboardX.SummaryWriter", "aster.eval", "dict", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "range", "range", "os.path.isdir", "os.makedirs", "print", "os.popen", "super_resolution.TextSR.CRNN_init", "crnn.eval", "os.path.join", "os.path.isfile", "aster_student.train", "super_resolution.TextSR.optimizer_init", "super_resolution.TextSR.optimizer_init", "os.path.exists", "os.makedirs", "zip", "model.train", "enumerate", "model_list.append", "super_resolution.TextSR.Aster_init", "super_resolution.TextSR.CRNN_init", "super_resolution.TextSR.CRNN_init", "range", "super_resolution.TextSR.generator_init", "super_resolution.TextSR.MORAN_init", "isinstance", "os.path.join", "os.path.isfile", "aster_student_.train", "aster_student.append", "len", "images_hr.to.to.to", "super_resolution.TextSR.zero_grad", "loss_im.backward", "super_resolution.TextSR.step", "print", "enumerate", "super_resolution.TextSR.save_checkpoint", "super_resolution.TextSR.resume.split", "type", "val_loader_dir.split", "model.parameters", "images_lr.to.to.to", "images_lr.to.to.to", "model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "super_resolution.TextSR.results_recorder.add_scalar", "print", "print", "super_resolution.TextSR.eval", "converge_list.append", "float", "sum", "sum", "print", "super_resolution.TextSR.save_checkpoint", "len", "image_crit().mean", "model", "model.parameters", "super_resolution.TextSR.config.TRAIN.VAL.val_data_dir[].split", "model.eval", "model.parameters", "aster_student.eval", "aster_student.parameters", "aster_student.parameters", "aster_student.train", "model.parameters", "model.train", "float", "print", "print", "current_acc_dict.values", "current_acc_dict.values", "super_resolution.TextSR.resume.split", "str", "loss_img.mean", "model", "float", "datetime.datetime.datetime.now().strftime", "len", "float", "float", "float", "float", "super_resolution.TextSR.results_recorder.add_scalar", "image_crit", "image_crit().mean", "image_crit().mean", "super_resolution.TextSR.parse_crnn_data", "aster_student", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "super_resolution.TextSR.parse_crnn_data", "aster().detach", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "model", "stu.eval", "stu.parameters", "float", "stu.parameters", "stu.train", "image_crit().mean", "sem_loss", "super_resolution.TextSR.parse_crnn_data", "aster().detach", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "range", "model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "datetime.datetime.datetime.now", "image_crit", "image_crit", "aster", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "super_resolution.TextSR.parse_crnn_data", "stu_model", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "drop_vec.to.to.to", "image_crit().mean", "image_crit", "aster", "text_label.sum().squeeze", "text_pos.reshape", "ctc_loss", "loss_recog_distill_each.mean.mean.mean", "drop_vec.to.to.view", "image_crit().mean", "super_resolution.TextSR.results_recorder.add_scalar", "super_resolution.TextSR.results_recorder.add_scalar", "super_resolution.TextSR.results_recorder.add_scalar", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "stu_model.log_softmax", "weighted_mask.long().to", "predicted_length.long().to", "text_pos.reshape.long", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "sem_loss", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "int", "image_crit", "text_label.sum", "image_crit", "ssim().mean", "float", "float", "float", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "weighted_mask.long", "predicted_length.long", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "weighted_tics.float", "ssim"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_train_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_val_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.CRNN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.optimizer_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.optimizer_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.Aster_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.CRNN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.CRNN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.MORAN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.save_checkpoint", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.save_checkpoint", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.calculate_PSNR_SSIM.ssim"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "TP_Generator_dict", "=", "{", "\n", "\"CRNN\"", ":", "self", ".", "CRNN_init", ",", "\n", "\"OPT\"", ":", "self", ".", "TPG_init", "\n", "}", "\n", "\n", "tpg_opt", "=", "self", ".", "opt_TPG", "\n", "\n", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "train_dataset", ",", "train_loader", "=", "self", ".", "get_train_data", "(", ")", "\n", "val_dataset_list", ",", "val_loader_list", "=", "self", ".", "get_val_data", "(", ")", "\n", "model_dict", "=", "self", ".", "generator_init", "(", "0", ")", "\n", "model", ",", "image_crit", "=", "model_dict", "[", "'model'", "]", ",", "model_dict", "[", "'crit'", "]", "\n", "\n", "model_list", "=", "[", "model", "]", "\n", "if", "not", "self", ".", "args", ".", "sr_share", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", "-", "1", ")", ":", "\n", "                ", "model_sep", "=", "self", ".", "generator_init", "(", "i", "+", "1", ")", "[", "'model'", "]", "\n", "model_list", ".", "append", "(", "model_sep", ")", "\n", "\n", "", "", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "\"tensorboard\"", ",", "self", ".", "vis_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "tensorboard_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tensorboard_dir", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Directory exist, remove events...\"", ")", "\n", "os", ".", "popen", "(", "\"rm \"", "+", "tensorboard_dir", "+", "\"/*\"", ")", "\n", "\n", "", "self", ".", "results_recorder", "=", "SummaryWriter", "(", "tensorboard_dir", ")", "\n", "\n", "aster", ",", "aster_info", "=", "TP_Generator_dict", "[", "self", ".", "args", ".", "tpg", "]", "(", "recognizer_path", "=", "None", ",", "opt", "=", "tpg_opt", ")", "\n", "\n", "test_bible", "=", "{", "}", "\n", "\n", "if", "self", ".", "args", ".", "test_model", "==", "\"CRNN\"", ":", "\n", "            ", "crnn", ",", "aster_info", "=", "self", ".", "CRNN_init", "(", ")", "\n", "crnn", ".", "eval", "(", ")", "\n", "test_bible", "[", "\"CRNN\"", "]", "=", "{", "\n", "'model'", ":", "crnn", ",", "\n", "'data_in_fn'", ":", "self", ".", "parse_crnn_data", ",", "\n", "'string_process'", ":", "get_string_crnn", "\n", "}", "\n", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"ASTER\"", ":", "\n", "            ", "aster_real", ",", "aster_real_info", "=", "self", ".", "Aster_init", "(", ")", "\n", "aster_info", "=", "aster_real_info", "\n", "test_bible", "[", "\"ASTER\"", "]", "=", "{", "\n", "'model'", ":", "aster_real", ",", "\n", "'data_in_fn'", ":", "self", ".", "parse_aster_data", ",", "\n", "'string_process'", ":", "get_string_aster", "\n", "}", "\n", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "            ", "moran", "=", "self", ".", "MORAN_init", "(", ")", "\n", "if", "isinstance", "(", "moran", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "moran", ".", "device_ids", "=", "[", "0", "]", "\n", "", "test_bible", "[", "\"MORAN\"", "]", "=", "{", "\n", "'model'", ":", "moran", ",", "\n", "'data_in_fn'", ":", "self", ".", "parse_moran_data", ",", "\n", "'string_process'", ":", "get_string_crnn", "\n", "}", "\n", "\n", "\n", "# print(\"self.args.arch:\", self.args.arch)", "\n", "\n", "", "if", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl_wmask\"", ",", "\"tsrn_tl\"", "]", ":", "\n", "            ", "recognizer_path", "=", "os", ".", "path", ".", "join", "(", "\"/\"", ".", "join", "(", "self", ".", "resume", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", ",", "\"recognizer_best.pth\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "recognizer_path", ")", ":", "\n", "                ", "aster_student", ",", "aster_stu_info", "=", "self", ".", "CRNN_init", "(", "recognizer_path", "=", "recognizer_path", ")", "\n", "", "else", ":", "\n", "                ", "aster_student", ",", "aster_stu_info", "=", "self", ".", "CRNN_init", "(", "recognizer_path", "=", "None", ")", "\n", "", "aster_student", ".", "train", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "            ", "aster_student", "=", "[", "]", "\n", "stu_iter", "=", "self", ".", "args", ".", "stu_iter", "\n", "\n", "for", "i", "in", "range", "(", "stu_iter", ")", ":", "\n", "                ", "recognizer_path", "=", "os", ".", "path", ".", "join", "(", "\"/\"", ".", "join", "(", "self", ".", "resume", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", ",", "\"recognizer_best_\"", "+", "str", "(", "i", ")", "+", "\".pth\"", ")", "\n", "# print(\"recognizer_path:\", recognizer_path)", "\n", "if", "os", ".", "path", ".", "isfile", "(", "recognizer_path", ")", ":", "\n", "                    ", "aster_student_", ",", "aster_stu_info", "=", "TP_Generator_dict", "[", "self", ".", "args", ".", "tpg", "]", "(", "recognizer_path", "=", "recognizer_path", ",", "opt", "=", "tpg_opt", ")", "#", "\n", "", "else", ":", "\n", "                    ", "aster_student_", ",", "aster_stu_info", "=", "TP_Generator_dict", "[", "self", ".", "args", ".", "tpg", "]", "(", "recognizer_path", "=", "None", ",", "opt", "=", "tpg_opt", ")", "\n", "\n", "", "if", "type", "(", "aster_student_", ")", "==", "list", ":", "\n", "                    ", "aster_student_", "=", "aster_student_", "[", "i", "]", "\n", "\n", "", "aster_student_", ".", "train", "(", ")", "\n", "aster_student", ".", "append", "(", "aster_student_", ")", "\n", "\n", "", "", "aster", ".", "eval", "(", ")", "\n", "# Recognizer needs to be fixed:", "\n", "# aster", "\n", "if", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl_wmask\"", ",", "\"tsrn_tl\"", "]", "+", "ABLATION_SET", ":", "\n", "            ", "optimizer_G", "=", "self", ".", "optimizer_init", "(", "model_list", ",", "recognizer", "=", "aster_student", ")", "\n", "", "else", ":", "\n", "            ", "optimizer_G", "=", "self", ".", "optimizer_init", "(", "model_list", ")", "\n", "# for p in aster.parameters():", "\n", "#     p.requires_grad = False", "\n", "\n", "#print(\"cfg:\", cfg.ckpt_dir)", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "ckpt_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cfg", ".", "ckpt_dir", ")", "\n", "", "best_history_acc", "=", "dict", "(", "\n", "zip", "(", "[", "val_loader_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "val_loader_dir", "in", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "val_data_dir", "]", ",", "\n", "[", "0", "]", "*", "len", "(", "val_loader_list", ")", ")", ")", "\n", "best_model_acc", "=", "copy", ".", "deepcopy", "(", "best_history_acc", ")", "\n", "best_model_psnr", "=", "copy", ".", "deepcopy", "(", "best_history_acc", ")", "\n", "best_model_ssim", "=", "copy", ".", "deepcopy", "(", "best_history_acc", ")", "\n", "best_acc", "=", "0", "\n", "converge_list", "=", "[", "]", "\n", "lr", "=", "cfg", ".", "lr", "\n", "\n", "for", "model", "in", "model_list", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "cfg", ".", "epochs", ")", ":", "\n", "\n", "            ", "for", "j", ",", "data", "in", "(", "enumerate", "(", "train_loader", ")", ")", ":", "\n", "\n", "                ", "iters", "=", "len", "(", "train_loader", ")", "*", "epoch", "+", "j", "+", "1", "\n", "if", "not", "self", ".", "args", ".", "go_test", ":", "\n", "                    ", "for", "model", "in", "model_list", ":", "\n", "                        ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                            ", "p", ".", "requires_grad", "=", "True", "\n", "", "", "if", "self", ".", "args", ".", "syn", ":", "\n", "                        ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "identity", "=", "data", "\n", "", "else", ":", "\n", "                        ", "if", "self", ".", "args", ".", "arch", "==", "\"tsrn\"", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"sem_tsrn\"", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "word_vec", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"tsrn_c2f\"", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "image_coar_gt", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"tsrn_tl\"", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "label_vecs", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn_tl_wmask'", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "label_vecs", ",", "weighted_mask", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "label_vecs", ",", "weighted_mask", ",", "weighted_tics", "=", "data", "\n", "text_label", "=", "label_vecs", "\n", "", "else", ":", "\n", "                            ", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "\n", "", "", "if", "self", ".", "args", ".", "syn", ":", "\n", "#images_lr = nn.functional.interpolate(images_hr, (self.config.TRAIN.height // self.scale_factor,", "\n", "#                                                  self.config.TRAIN.width // self.scale_factor),", "\n", "#                                      mode='bicubic')", "\n", "                        ", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                        ", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "", "images_hr", "=", "images_hr", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "loss_ssim", "=", "0.", "\n", "\n", "if", "self", ".", "args", ".", "arch", "==", "\"tsrn\"", ":", "\n", "                        ", "image_sr", "=", "model", "(", "images_lr", ")", "\n", "loss_img", "=", "loss_im", "=", "image_crit", "(", "image_sr", ",", "images_hr", ")", ".", "mean", "(", ")", "*", "100", "\n", "loss_recog_distill", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"sem_tsrn\"", ":", "\n", "# print(\"keys:\", image_crit.keys())", "\n", "                        ", "image_sr", ",", "all_pred_vecs", "=", "model", "(", "images_lr", ",", "word_vec", ")", "\n", "\n", "# print(\"shape:\", image_sr.shape, image_masks.unsqueeze(1).shape)", "\n", "\n", "loss_img", "=", "image_crit", "[", "\"image_loss\"", "]", "(", "image_sr", ",", "images_hr", ")", "\n", "# print(\"loss:\", loss_img.shape)", "\n", "loss_img", "=", "loss_img", ".", "mean", "(", ")", "*", "100", "\n", "loss_sem", "=", "image_crit", "[", "\"semantic_loss\"", "]", "\n", "\n", "loss_sem_cal", "=", "0.", "\n", "\n", "loss_im", "=", "loss_img", "+", "loss_sem_cal", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"tsrn_c2f\"", ":", "\n", "\n", "                        ", "image_sr", ",", "image_coar", "=", "model", "(", "images_lr", ")", "\n", "\n", "loss_img", "=", "image_crit", "(", "image_sr", ",", "images_hr", ")", ".", "mean", "(", ")", "*", "100", "\n", "loss_coar", "=", "image_crit", "(", "image_coar", ",", "image_coar_gt", ")", ".", "mean", "(", ")", "*", "100", "\n", "\n", "loss_im", "=", "loss_img", "+", "loss_coar", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl\"", ",", "\"tsrn_tl_wmask\"", "]", ":", "\n", "\n", "###############################################", "\n", "                        ", "aster_dict_lr", "=", "self", ".", "parse_crnn_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs_logits", "=", "aster_student", "(", "aster_dict_lr", ")", "\n", "label_vecs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_logits", ",", "-", "1", ")", "\n", "\n", "aster_dict_hr", "=", "self", ".", "parse_crnn_data", "(", "images_hr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs_logits_hr", "=", "aster", "(", "aster_dict_hr", ")", ".", "detach", "(", ")", "\n", "label_vecs_hr", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_logits_hr", ",", "-", "1", ")", "\n", "\n", "# label_vecs[label_vecs > 0.5] = 1.", "\n", "# print(\"label_vecs:\", np.unique(label_vecs.data.cpu().numpy()))", "\n", "'''\n                        ##############\n                        # val: [T, B] <- [T, B, C]\n                        label_val, label_indices = torch.max(label_vecs, -1)\n                        label_indices = label_indices.view(label_indices.shape[0], label_indices.shape[1], 1)\n                        new_label_vecs = torch.zeros(label_vecs.shape).float().to(label_vecs.device)\n                        new_label_vecs.scatter_(2, label_indices, 1)\n                        # label_vecs[label_vecs > 0.5] = 1.\n                        noise = (torch.rand(label_vecs.shape) - 0.5) * 0.2\n                        label_vecs = new_label_vecs.to(label_vecs.device) + noise.to(label_vecs.device)\n                        ##############\n                        '''", "\n", "\n", "# [T, B, C] -> [B, T, C] -> [B, 1, T, C]", "\n", "label_vecs_final", "=", "label_vecs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "###############################################", "\n", "\n", "image_sr", "=", "model", "(", "images_lr", ",", "label_vecs_final", ")", "\n", "\n", "loss_img", "=", "image_crit", "(", "image_sr", ",", "images_hr", ",", "grad_mask", "=", "weighted_mask", ")", ".", "mean", "(", ")", "*", "100", "\n", "# loss_recog_distill# = torch.abs(label_vecs - label_vecs_hr).mean() * 100", "\n", "loss_recog_distill", "=", "sem_loss", "(", "label_vecs", ",", "label_vecs_hr", ")", "*", "100", "\n", "loss_im", "=", "loss_img", "+", "loss_recog_distill", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "\n", "                        ", "aster_dict_hr", "=", "self", ".", "parse_crnn_data", "(", "images_hr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs_logits_hr", "=", "aster", "(", "aster_dict_hr", ")", ".", "detach", "(", ")", "\n", "label_vecs_hr", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_logits_hr", ",", "-", "1", ")", "\n", "\n", "cascade_images", "=", "images_lr", "\n", "\n", "loss_img", "=", "0.", "\n", "loss_recog_distill", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "                            ", "if", "self", ".", "args", ".", "tpg_share", ":", "\n", "                                ", "tpg_pick", "=", "0", "\n", "", "else", ":", "\n", "                                ", "tpg_pick", "=", "i", "\n", "", "stu_model", "=", "aster_student", "[", "tpg_pick", "]", "\n", "\n", "# Detach from last iteration", "\n", "# cascade_images = cascade_images.detach()", "\n", "\n", "aster_dict_lr", "=", "self", ".", "parse_crnn_data", "(", "cascade_images", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "\n", "label_vecs_logits", "=", "stu_model", "(", "aster_dict_lr", ")", "\n", "label_vecs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_logits", ",", "-", "1", ")", "\n", "\n", "label_vecs_final", "=", "label_vecs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "'''\n                            #####################################################\n                            # Sample shift\n                            # [N, C, H, W]\n\n                            N, C, H, W = label_vecs_final.shape\n                            half_N = int(N / 4)\n                            all_samples = torch.ones(N)\n                            picked_samples = torch.zeros(half_N)\n                            # First half to be the LR samples\n                            all_samples[:half_N] = picked_samples\n\n                            all_samples = Variable(all_samples).to(label_vecs_final.device).reshape(-1, 1, 1, 1)\n                            # print(\"all_samples:\", all_samples.shape, label_vecs_final.shape, label_vecs_final_hr.shape)\n                            label_fusion = all_samples * label_vecs_final + (1 - all_samples) * label_vecs_final_hr\n\n                            #####################################################\n                            '''", "\n", "# image for cascading", "\n", "if", "self", ".", "args", ".", "sr_share", ":", "\n", "                                ", "pick", "=", "0", "\n", "", "else", ":", "\n", "                                ", "pick", "=", "i", "\n", "\n", "", "if", "self", ".", "args", ".", "use_label", ":", "\n", "# [B, L]", "\n", "                                ", "text_sum", "=", "text_label", ".", "sum", "(", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "# print(\"text_sum:\", text_sum.shape)", "\n", "text_pos", "=", "(", "text_sum", ">", "0", ")", ".", "float", "(", ")", ".", "sum", "(", "1", ")", "\n", "text_len", "=", "text_pos", ".", "reshape", "(", "-", "1", ")", "\n", "predicted_length", "=", "torch", ".", "ones", "(", "label_vecs_logits", ".", "shape", "[", "1", "]", ")", "*", "label_vecs_logits", ".", "shape", "[", "0", "]", "\n", "\n", "fsup_sem_loss", "=", "ctc_loss", "(", "\n", "label_vecs_logits", ".", "log_softmax", "(", "2", ")", ",", "\n", "weighted_mask", ".", "long", "(", ")", ".", "to", "(", "label_vecs_logits", ".", "device", ")", ",", "\n", "predicted_length", ".", "long", "(", ")", ".", "to", "(", "label_vecs_logits", ".", "device", ")", ",", "\n", "text_len", ".", "long", "(", ")", "\n", ")", "\n", "\n", "# fsup_sem_loss = Variable(weighted_tics.float()).to(fsup_sem_loss.device)", "\n", "loss_recog_distill_each", "=", "(", "fsup_sem_loss", "*", "Variable", "(", "weighted_tics", ".", "float", "(", ")", ")", ".", "to", "(", "fsup_sem_loss", ".", "device", ")", ")", "# .mean()", "\n", "# print('loss_recog_distill_each:', loss_recog_distill_each)", "\n", "loss_recog_distill_each", "=", "loss_recog_distill_each", ".", "mean", "(", ")", "\n", "loss_recog_distill", "+=", "loss_recog_distill_each", "\n", "\n", "# [N, C, H, W] -> [N, T, C]", "\n", "# text_label = text_label.squeeze(2).permute(2, 0, 1)", "\n", "", "if", "self", ".", "args", ".", "use_distill", ":", "\n", "# print(\"label_vecs_hr:\", label_vecs_hr.shape)", "\n", "                                ", "loss_recog_distill_each", "=", "sem_loss", "(", "label_vecs", ",", "label_vecs_hr", ")", "*", "100", "\n", "loss_recog_distill", "+=", "loss_recog_distill_each", "# * (1 + 0.5 * i)", "\n", "\n", "# prior dropout", "\n", "", "device", "=", "label_vecs_final", ".", "device", "\n", "# drop_vec = (torch.rand(images_lr.shape[0]) > 0.33).float().to(device)", "\n", "drop_vec", "=", "torch", ".", "ones", "(", "images_lr", ".", "shape", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "drop_vec", "[", ":", "int", "(", "images_lr", ".", "shape", "[", "0", "]", "//", "4", ")", "]", "=", "0.", "\n", "drop_vec", "=", "drop_vec", ".", "to", "(", "device", ")", "\n", "# print(\"drop_vex:\", drop_vec.shape, drop_vec)", "\n", "label_vecs_final", "=", "label_vecs_final", "*", "drop_vec", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "cascade_images", "=", "model_list", "[", "pick", "]", "(", "images_lr", ",", "label_vecs_final", ")", "\n", "loss_img_each", "=", "image_crit", "(", "cascade_images", ",", "images_hr", ")", ".", "mean", "(", ")", "*", "100", "\n", "loss_img", "+=", "loss_img_each", "\n", "\n", "if", "self", ".", "args", ".", "ssim_loss", ":", "\n", "\n", "                                ", "loss_ssim", "=", "(", "1", "-", "ssim", "(", "cascade_images", ",", "images_hr", ")", ".", "mean", "(", ")", ")", "*", "10.", "\n", "loss_img", "+=", "loss_ssim", "\n", "#loss_img += loss_img_each # * (1 + 0.5 * i)", "\n", "#loss_img += loss_ssim  # * (1 + 0.5 * i)", "\n", "\n", "", "if", "iters", "%", "5", "==", "0", "and", "i", "==", "self", ".", "args", ".", "stu_iter", "-", "1", ":", "\n", "\n", "                                ", "self", ".", "results_recorder", ".", "add_scalar", "(", "'loss/distill'", ",", "float", "(", "loss_recog_distill_each", ".", "data", ")", "*", "100", ",", "\n", "global_step", "=", "iters", ")", "\n", "\n", "self", ".", "results_recorder", ".", "add_scalar", "(", "'loss/SR'", ",", "float", "(", "loss_img_each", ".", "data", ")", "*", "100", ",", "\n", "global_step", "=", "iters", ")", "\n", "\n", "self", ".", "results_recorder", ".", "add_scalar", "(", "'loss/SSIM'", ",", "float", "(", "loss_ssim", ")", "*", "100", ",", "\n", "global_step", "=", "iters", ")", "\n", "\n", "", "", "loss_im", "=", "loss_img", "+", "loss_recog_distill", "\n", "\n", "\n", "", "else", ":", "\n", "                        ", "if", "self", ".", "args", ".", "arch", "in", "[", "\"srcnn\"", ",", "\"rdn\"", ",", "\"vdsr\"", "]", ":", "\n", "                            ", "channel_num", "=", "3", "\n", "", "else", ":", "\n", "                            ", "channel_num", "=", "4", "\n", "\n", "", "image_sr", "=", "model", "(", "images_lr", "[", ":", ",", ":", "channel_num", ",", "...", "]", ")", "\n", "loss_img", "=", "loss_im", "=", "image_crit", "(", "image_sr", ",", "images_hr", "[", ":", ",", ":", "channel_num", ",", "...", "]", ")", ".", "mean", "(", ")", "*", "100", "\n", "loss_recog_distill", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "\n", "", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "loss_im", ".", "backward", "(", ")", "\n", "\n", "for", "model", "in", "model_list", ":", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "0.25", ")", "\n", "", "optimizer_G", ".", "step", "(", ")", "\n", "if", "iters", "%", "5", "==", "0", ":", "\n", "\n", "                        ", "self", ".", "results_recorder", ".", "add_scalar", "(", "'loss/total'", ",", "float", "(", "loss_im", ".", "data", ")", "*", "100", ",", "\n", "global_step", "=", "iters", ")", "\n", "\n", "\n", "# torch.cuda.empty_cache()", "\n", "", "if", "iters", "%", "cfg", ".", "displayInterval", "==", "0", ":", "\n", "                        ", "print", "(", "'[{}]\\t'", "\n", "'Epoch: [{}][{}/{}]\\t'", "\n", "'vis_dir={:s}\\t'", "\n", "'loss_total: {:.3f} \\t'", "\n", "'loss_im: {:.3f} \\t'", "\n", "'loss_ssim: {:.3f} \\t'", "\n", "'loss_teaching: {:.3f} \\t'", "\n", "'{:.3f} \\t'", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "epoch", ",", "j", "+", "1", ",", "len", "(", "train_loader", ")", ",", "\n", "self", ".", "vis_dir", ",", "\n", "float", "(", "loss_im", ".", "data", ")", ",", "\n", "float", "(", "loss_img", ".", "data", ")", ",", "\n", "float", "(", "loss_ssim", ")", ",", "\n", "float", "(", "loss_recog_distill", ".", "data", ")", ",", "\n", "lr", ")", ")", "\n", "\n", "", "", "if", "iters", "%", "cfg", ".", "VAL", ".", "valInterval", "==", "0", "or", "self", ".", "args", ".", "go_test", ":", "\n", "                    ", "print", "(", "'======================================================'", ")", "\n", "current_acc_dict", "=", "{", "}", "\n", "for", "k", ",", "val_loader", "in", "enumerate", "(", "val_loader_list", ")", ":", "\n", "                        ", "data_name", "=", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "val_data_dir", "[", "k", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "print", "(", "'evaling %s'", "%", "data_name", ")", "\n", "for", "model", "in", "model_list", ":", "\n", "                            ", "model", ".", "eval", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "if", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl\"", ",", "\"tsrn_tl_wmask\"", "]", ":", "\n", "                            ", "aster_student", ".", "eval", "(", ")", "\n", "for", "p", "in", "aster_student", ".", "parameters", "(", ")", ":", "\n", "                                ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "elif", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "                            ", "for", "stu", "in", "aster_student", ":", "\n", "                                ", "stu", ".", "eval", "(", ")", "\n", "for", "p", "in", "stu", ".", "parameters", "(", ")", ":", "\n", "                                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "else", ":", "\n", "                            ", "aster_student", "=", "aster", "\n", "\n", "# Tuned TPG for recognition:", "\n", "# test_bible[self.args.test_model]['model'] = aster#aster_student[-1]", "\n", "\n", "", "metrics_dict", "=", "self", ".", "eval", "(", "\n", "model_list", ",", "\n", "val_loader", ",", "\n", "image_crit", ",", "\n", "iters", ",", "\n", "[", "test_bible", "[", "self", ".", "args", ".", "test_model", "]", ",", "aster_student", ",", "aster", "]", ",", "#", "\n", "aster_info", "\n", ")", "\n", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "# print(metrics_dict)", "\n", "                            ", "if", "key", "in", "[", "\"cnt_psnr_avg\"", ",", "\"cnt_ssim_avg\"", ",", "\"psnr_avg\"", ",", "\"ssim_avg\"", ",", "\"accuracy\"", "]", ":", "\n", "                                ", "self", ".", "results_recorder", ".", "add_scalar", "(", "'eval/'", "+", "key", "+", "\"_\"", "+", "data_name", ",", "float", "(", "metrics_dict", "[", "key", "]", ")", ",", "\n", "global_step", "=", "iters", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl\"", ",", "\"tsrn_tl_wmask\"", "]", ":", "\n", "                            ", "for", "p", "in", "aster_student", ".", "parameters", "(", ")", ":", "\n", "                                ", "p", ".", "requires_grad", "=", "True", "\n", "", "aster_student", ".", "train", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "                            ", "for", "stu", "in", "aster_student", ":", "\n", "                                ", "for", "p", "in", "stu", ".", "parameters", "(", ")", ":", "\n", "                                    ", "p", ".", "requires_grad", "=", "True", "\n", "", "stu", ".", "train", "(", ")", "\n", "\n", "", "", "for", "model", "in", "model_list", ":", "\n", "                            ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                                ", "p", ".", "requires_grad", "=", "True", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "", "converge_list", ".", "append", "(", "{", "'iterator'", ":", "iters", ",", "\n", "'acc'", ":", "metrics_dict", "[", "'accuracy'", "]", ",", "\n", "'psnr'", ":", "metrics_dict", "[", "'psnr_avg'", "]", ",", "\n", "'ssim'", ":", "metrics_dict", "[", "'ssim_avg'", "]", "}", ")", "\n", "acc", "=", "metrics_dict", "[", "'accuracy'", "]", "\n", "current_acc_dict", "[", "data_name", "]", "=", "float", "(", "acc", ")", "\n", "if", "acc", ">", "best_history_acc", "[", "data_name", "]", ":", "\n", "                            ", "best_history_acc", "[", "data_name", "]", "=", "float", "(", "acc", ")", "\n", "best_history_acc", "[", "'epoch'", "]", "=", "epoch", "\n", "print", "(", "'best_%s = %.2f%%*'", "%", "(", "data_name", ",", "best_history_acc", "[", "data_name", "]", "*", "100", ")", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "print", "(", "'best_%s = %.2f%%'", "%", "(", "data_name", ",", "best_history_acc", "[", "data_name", "]", "*", "100", ")", ")", "\n", "\n", "# if self.args.go_test:", "\n", "#     break", "\n", "", "", "if", "self", ".", "args", ".", "go_test", ":", "\n", "                        ", "break", "\n", "", "if", "sum", "(", "current_acc_dict", ".", "values", "(", ")", ")", ">", "best_acc", ":", "\n", "                        ", "best_acc", "=", "sum", "(", "current_acc_dict", ".", "values", "(", ")", ")", "\n", "best_model_acc", "=", "current_acc_dict", "\n", "best_model_acc", "[", "'epoch'", "]", "=", "epoch", "\n", "best_model_psnr", "[", "data_name", "]", "=", "metrics_dict", "[", "'psnr_avg'", "]", "\n", "best_model_ssim", "[", "data_name", "]", "=", "metrics_dict", "[", "'ssim_avg'", "]", "\n", "best_model_info", "=", "{", "'accuracy'", ":", "best_model_acc", ",", "'psnr'", ":", "best_model_psnr", ",", "'ssim'", ":", "best_model_ssim", "}", "\n", "print", "(", "'saving best model'", ")", "\n", "self", ".", "save_checkpoint", "(", "model_list", ",", "epoch", ",", "iters", ",", "best_history_acc", ",", "best_model_info", ",", "True", ",", "converge_list", ",", "recognizer", "=", "aster_student", ")", "\n", "\n", "", "", "if", "iters", "%", "cfg", ".", "saveInterval", "==", "0", ":", "\n", "                    ", "best_model_info", "=", "{", "'accuracy'", ":", "best_model_acc", ",", "'psnr'", ":", "best_model_psnr", ",", "'ssim'", ":", "best_model_ssim", "}", "\n", "self", ".", "save_checkpoint", "(", "model_list", ",", "epoch", ",", "iters", ",", "best_history_acc", ",", "best_model_info", ",", "False", ",", "converge_list", ",", "recognizer", "=", "aster_student", ")", "\n", "", "", "if", "self", ".", "args", ".", "go_test", ":", "\n", "                ", "break", "\n", "", "", "", "def", "eval", "(", "self", ",", "model_list", ",", "val_loader", ",", "image_crit", ",", "index", ",", "aster", ",", "aster_info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval": [[540, 1348], ["enumerate", "print", "print", "round", "round", "round", "round", "print", "print", "os.path.join", "open", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "sum", "sum", "range", "round", "round.item", "round.item", "range", "print", "print", "print", "print", "print", "print", "print", "open.close", "range", "os.path.isdir", "os.makedirs", "len", "images_lr.to.to.to", "images_hr.to.to.to", "print", "super_resolution.TextSR.cal_conf", "type", "metric_dict[].append", "metric_dict[].append", "metric_dict[].append", "metric_dict[].append", "len", "len", "len", "datetime.datetime.datetime.now().strftime", "float", "float", "round", "print", "super_resolution.TextSR.resume.split", "images_lr[].unsqueeze.to", "image_hr.to", "range", "super_resolution.TextSR.parse_crnn_data", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "range", "super_resolution.TextSR.cal_psnr", "super_resolution.TextSR.cal_ssim", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "super_resolution.TextSR.cal_psnr", "super_resolution.TextSR.cal_ssim", "range", "utils.util.str_filt", "utils.util.str_filt", "numpy.transpose().astype", "numpy.transpose().astype", "numpy.transpose().astype", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.zeros", "range", "len", "torch.functional.interpolate.append", "predict_result_sr.append", "super_resolution.TextSR.parse_crnn_data", "super_resolution.TextSR.parse_crnn_data", "super_resolution.TextSR.parse_crnn_data", "preds.max", "super_resolution.TextSR.converter_moran.decode", "preds.max", "super_resolution.TextSR.converter_moran.decode", "utils.util.str_filt", "utils.util.str_filt", "len", "sr.squeeze.squeeze.squeeze", "lr.squeeze.squeeze.squeeze", "hr.squeeze.squeeze.squeeze", "sr.squeeze.squeeze.data.cpu().numpy", "os.path.join", "os.path.join", "cv2.imwrite", "cv2.imwrite", "print", "cv2.imwrite", "datetime.datetime.datetime.now", "len", "images_lr[].unsqueeze.unsqueeze", "SR_stat.append", "SR_stat.append", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "super_resolution.TextSR.parse_crnn_data", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "range", "range", "range", "super_resolution.TextSR.parse_crnn_data", "super_resolution.TextSR.parse_crnn_data", "super_resolution.TextSR.parse_crnn_data", "preds.max", "super_resolution.TextSR.converter_moran.decode", "type", "type", "range", "range", "utils.util.str_filt", "numpy.transpose", "numpy.transpose", "numpy.transpose", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.join", "cv2.cvtColor", "cv2.imwrite", "cv2.imwrite", "numpy.zeros", "str", "range", "torch.functional.interpolate.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "super_resolution.TextSR.parse_crnn_data", "label_vecs_hr_pos.permute().unsqueeze().permute", "label_vecs_hr_pos.permute().unsqueeze().permute.max", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "super_resolution.TextSR.parse_crnn_data", "stu_model", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.functional.interpolate.append", "len", "torch.functional.interpolate.append", "preds.max", "super_resolution.TextSR.converter_moran.decode", "range", "predict_result_lr.append", "range", "predict_result_hr.append", "type", "sr.squeeze.squeeze.data.cpu", "label.lower", "numpy.zeros.astype", "os.path.join", "cv2.cvtColor", "os.path.join", "cv2.cvtColor", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "len", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.interpolate.unsqueeze", "torch.nn.functional.interpolate.unsqueeze", "torch.nn.functional.interpolate.unsqueeze", "len", "images_lr[].unsqueeze.unsqueeze", "SR_stat.append", "SR_stat.append", "preds.max", "super_resolution.TextSR.converter_moran.decode", "type", "range", "pred.split", "pred.split", "super_resolution.TextSR.split", "pred.split", "super_resolution.TextSR.split", "label.lower", "numpy.zeros.astype", "label.lower", "numpy.zeros.astype", "len", "cascade_image.unsqueeze.unsqueeze.unsqueeze", "len", "images_lr[].unsqueeze", "new_cascade_images.append", "super_resolution.TextSR.parse_crnn_data", "stu_model", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "torch.nn.functional.softmax.permute().unsqueeze().permute", "new_cascade_images.append", "label_vecs_hr_pos.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "type", "range", "range", "print", "predict_result_sr_.append", "lr.squeeze.squeeze.data.cpu().numpy", "hr.squeeze.squeeze.data.cpu().numpy", "str", "str", "SR_stat.append", "SR_stat.append", "range", "predict_result_sr_.append", "pred.split", "super_resolution.TextSR.split", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "torch.nn.functional.softmax.permute().unsqueeze", "label_vecs_hr_pos.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "pred.split", "super_resolution.TextSR.split", "lr.squeeze.squeeze.data.cpu", "hr.squeeze.squeeze.data.cpu", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax.permute", "type", "type", "type", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.cal_conf", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data"], ["", "", "", "def", "eval", "(", "self", ",", "model_list", ",", "val_loader", ",", "image_crit", ",", "index", ",", "aster", ",", "aster_info", ")", ":", "\n", "\n", "        ", "n_correct", "=", "0", "\n", "n_correct_lr", "=", "0", "\n", "n_correct_hr", "=", "0", "\n", "sum_images", "=", "0", "\n", "metric_dict", "=", "{", "'psnr_lr'", ":", "[", "]", ",", "'ssim_lr'", ":", "[", "]", ",", "'cnt_psnr_lr'", ":", "[", "]", ",", "'cnt_ssim_lr'", ":", "[", "]", ",", "'psnr'", ":", "[", "]", ",", "'ssim'", ":", "[", "]", ",", "'cnt_psnr'", ":", "[", "]", ",", "'cnt_ssim'", ":", "[", "]", ",", "'accuracy'", ":", "0.0", ",", "'psnr_avg'", ":", "0.0", ",", "'ssim_avg'", ":", "0.0", "}", "\n", "counters", "=", "{", "i", ":", "0", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", "}", "\n", "wrong_cnt", "=", "0", "\n", "\n", "go_SR", "=", "0", "\n", "go_LR", "=", "0", "\n", "\n", "LRR_SRW", "=", "0", "\n", "LRW_SRR", "=", "0", "\n", "LRW_SRW", "=", "0", "\n", "LRR_SRR", "=", "0", "\n", "#SR_stat = []", "\n", "\n", "if", "vis", ":", "\n", "            ", "vis_dir", "=", "\"image_\"", "+", "self", ".", "resume", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "vis_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "vis_dir", ")", "\n", "", "identity_file", "=", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "\"identity.txt\"", ")", "\n", "\n", "i_f", "=", "open", "(", "identity_file", ",", "\"a+\"", ")", "\n", "\n", "# device = model_list[0].device", "\n", "\n", "# macs, params = thop.profile(model_list[0], inputs=(input, tp_in))", "\n", "# macs, params = clever_format([macs, params], \"%.3f\")", "\n", "\n", "# print(\"--------------------------------------------\")", "\n", "# print(\"The calculated computational info is: \")", "\n", "# print(\"Flops(G):\", macs)", "\n", "# print(\"params(M):\", params)", "\n", "# print(\"--------------------------------------------\")", "\n", "\n", "\n", "", "for", "i", ",", "data", "in", "(", "enumerate", "(", "val_loader", ")", ")", ":", "\n", "            ", "SR_stat", "=", "[", "]", "\n", "SR_tick", "=", "False", "\n", "\n", "if", "self", ".", "args", ".", "syn", ":", "\n", "                ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "identity", "=", "data", "\n", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "args", ".", "arch", "==", "\"tsrn\"", ":", "\n", "# print(\"len:\", len(data))", "\n", "                    ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "_", ",", "_", ",", "_", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"sem_tsrn\"", ":", "\n", "                    ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "word_vec", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "\"tsrn_c2f\"", ":", "\n", "                    ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "image_mx", "=", "data", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl\"", ",", "\"tsrn_tl_wmask\"", "]", "+", "ABLATION_SET", ":", "\n", "                    ", "images_hr", ",", "images_lr", ",", "label_strs", ",", "label_vecs_gt", "=", "data", "\n", "", "else", ":", "\n", "                    ", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "", "", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                ", "val_batch_size", "=", "len", "(", "images_lr", ")", "\n", "images_lr", "=", "[", "image_lr", ".", "to", "(", "self", ".", "device", ")", "for", "image_lr", "in", "images_lr", "]", "\n", "images_hr", "=", "[", "image_hr", ".", "to", "(", "self", ".", "device", ")", "for", "image_hr", "in", "images_hr", "]", "\n", "", "else", ":", "\n", "                ", "val_batch_size", "=", "images_lr", ".", "shape", "[", "0", "]", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "images_hr", "=", "images_hr", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "syn", ":", "\n", "#images_lr = nn.functional.interpolate(images_hr, (self.config.TRAIN.height // self.scale_factor,", "\n", "#                                             self.config.TRAIN.width // self.scale_factor),", "\n", "#                                 mode='bicubic')", "\n", "# images_hr = nn.functional.interpolate(images_lr,", "\n", "#                                       (self.config.TRAIN.height, self.config.TRAIN.width),", "\n", "#                                       mode='bicubic')", "\n", "                ", "pass", "\n", "##############################################################", "\n", "# Evaluating SR confidence", "\n", "", "SR_confidence", "=", "[", "]", "\n", "iter_i", "=", "i", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                ", "print", "(", "\"iter:\"", ",", "i", "*", "self", ".", "args", ".", "batch_size", ")", "\n", "SR_confidence", "=", "self", ".", "cal_conf", "(", "images_lr", ",", "aster", "[", "-", "1", "]", ")", "\n", "##############################################################", "\n", "\n", "", "if", "self", ".", "args", ".", "arch", "==", "\"tsrn\"", ":", "\n", "                ", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                    ", "images_sr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images_lr", ")", ")", ":", "\n", "                        ", "image_lr", "=", "images_lr", "[", "i", "]", "\n", "if", "len", "(", "image_lr", ".", "shape", ")", "<", "4", ":", "\n", "                            ", "image_lr", "=", "image_lr", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "SR_confidence", "[", "i", "]", ">", "0.9", "and", "image_lr", ".", "shape", "[", "-", "2", "]", ">", "16", ":", "\n", "\n", "                            ", "SR_stat", ".", "append", "(", "\"LR\"", ")", "\n", "\n", "image_sr", "=", "image_lr", "\n", "go_LR", "+=", "1", "\n", "", "else", ":", "\n", "\n", "                            ", "SR_stat", ".", "append", "(", "\"SR\"", ")", "\n", "\n", "image_sr", "=", "model_list", "[", "0", "]", "(", "image_lr", ")", "\n", "go_SR", "+=", "1", "\n", "", "images_sr", ".", "append", "(", "image_sr", ")", "\n", "", "SR_tick", "=", "True", "\n", "", "else", ":", "\n", "                    ", "images_sr", "=", "model_list", "[", "0", "]", "(", "images_lr", ")", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "arch", "in", "[", "\"tsrn_tl\"", ",", "\"tsrn_tl_wmask\"", "]", ":", "\n", "\n", "###############################################", "\n", "                ", "aster_dict_hr", "=", "self", ".", "parse_crnn_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs", "=", "aster", "[", "1", "]", "(", "aster_dict_hr", ")", "\n", "label_vecs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs", ",", "-", "1", ")", "\n", "\n", "'''\n                ##############\n                # val: [T, B] <- [T, B, C]\n                label_val, label_indices = torch.max(label_vecs, -1)\n                label_indices = label_indices.view(label_indices.shape[0], label_indices.shape[1], 1)\n                new_label_vecs = torch.zeros(label_vecs.shape).float().to(label_vecs.device)\n                new_label_vecs.scatter_(2, label_indices, 1)\n                # label_vecs[label_vecs > 0.5] = 1.\n                noise = (torch.rand(label_vecs.shape) - 0.5) * 0.2\n                label_vecs = new_label_vecs.to(label_vecs.device) + noise.to(label_vecs.device)\n                ##############\n                '''", "\n", "# [T, B, C] -> [B, T, C] -> [B, 1, T, C]", "\n", "label_vecs", "=", "label_vecs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "###############################################", "\n", "\n", "images_sr", "=", "model_list", "[", "0", "]", "(", "images_lr", ",", "label_vecs", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "\n", "                ", "cascade_images", "=", "images_lr", "\n", "\n", "images_sr", "=", "[", "]", "\n", "\n", "if", "vis", ":", "\n", "\n", "                    ", "aster_dict_hr", "=", "self", ".", "parse_crnn_data", "(", "images_hr", ")", "\n", "label_vecs_hr", "=", "aster", "[", "0", "]", "[", "'model'", "]", "(", "aster_dict_hr", ")", "\n", "label_vecs_hr", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_hr", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "\n", "                    ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "                        ", "new_cascade_images", "=", "[", "]", "\n", "# if i > 0:", "\n", "#     SR_confidence = self.cal_conf(cascade_images, aster[1][i])", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "cascade_images", ")", ")", ":", "\n", "# print(\"cascade_images:\", len(cascade_images), j)", "\n", "                            ", "cascade_image", "=", "cascade_images", "[", "j", "]", "\n", "if", "len", "(", "cascade_image", ".", "shape", ")", "<", "4", ":", "\n", "                                ", "cascade_image", "=", "cascade_image", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "len", "(", "images_lr", "[", "j", "]", ".", "shape", ")", "<", "4", ":", "\n", "                                ", "image_lr", "=", "images_lr", "[", "j", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                                ", "image_lr", "=", "images_lr", "[", "j", "]", "\n", "\n", "", "if", "SR_confidence", "[", "j", "]", ">", "0.85", "and", "image_lr", ".", "shape", "[", "-", "2", "]", ">", "16", ":", "# SR_confidence > 0.9 or", "\n", "                                ", "if", "i", "==", "self", ".", "args", ".", "stu_iter", "-", "1", ":", "\n", "                                    ", "go_LR", "+=", "1", "\n", "SR_stat", ".", "append", "(", "\"LR\"", ")", "\n", "", "new_cascade_images", ".", "append", "(", "image_lr", ")", "\n", "", "else", ":", "\n", "                                ", "if", "i", "==", "self", ".", "args", ".", "stu_iter", "-", "1", ":", "\n", "                                    ", "go_SR", "+=", "1", "\n", "SR_stat", ".", "append", "(", "\"SR\"", ")", "\n", "", "if", "self", ".", "args", ".", "tpg_share", ":", "\n", "                                    ", "tpg_pick", "=", "0", "\n", "", "else", ":", "\n", "                                    ", "tpg_pick", "=", "i", "\n", "\n", "", "stu_model", "=", "aster", "[", "1", "]", "[", "tpg_pick", "]", "\n", "aster_dict_lr", "=", "self", ".", "parse_crnn_data", "(", "cascade_image", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs_logits", "=", "stu_model", "(", "aster_dict_lr", ")", "\n", "\n", "label_vecs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_logits", ",", "-", "1", ")", "\n", "label_vecs_final", "=", "label_vecs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "args", ".", "sr_share", ":", "\n", "                                    ", "pick", "=", "0", "\n", "", "else", ":", "\n", "                                    ", "pick", "=", "i", "\n", "\n", "", "cascade_image", "=", "model_list", "[", "pick", "]", "(", "image_lr", ",", "label_vecs_final", ")", "\n", "new_cascade_images", ".", "append", "(", "cascade_image", ")", "\n", "", "", "cascade_images", "=", "new_cascade_images", "\n", "images_sr", ".", "append", "(", "cascade_images", ")", "\n", "", "", "else", ":", "\n", "# Get char mask", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "aster_dict_hr", "=", "self", ".", "parse_crnn_data", "(", "images_hr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "label_vecs_hr", "=", "aster", "[", "1", "]", "[", "0", "]", "(", "aster_dict_hr", ")", "\n", "label_vecs_hr_pos", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_hr", ",", "-", "1", ")", "[", "...", ",", "1", ":", "]", "\n", "\n", "char_prob", "=", "label_vecs_hr_pos", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "prob_val", ",", "prob_ind", "=", "char_prob", ".", "max", "(", "1", ")", "\n", "# prob_val = (prob_val >= 0.1).float()", "\n", "prob_val", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "prob_val", ".", "unsqueeze", "(", "1", ")", ",", "images_hr", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "# prob_val = (prob_val >= 0.01).float()", "\n", "# print(\"prob_val:\", prob_val.shape)", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "\n", "                        ", "if", "self", ".", "args", ".", "tpg_share", ":", "\n", "                            ", "tpg_pick", "=", "0", "\n", "", "else", ":", "\n", "                            ", "tpg_pick", "=", "i", "\n", "\n", "", "stu_model", "=", "aster", "[", "1", "]", "[", "tpg_pick", "]", "\n", "aster_dict_lr", "=", "self", ".", "parse_crnn_data", "(", "cascade_images", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "#", "\n", "label_vecs_logits", "=", "stu_model", "(", "aster_dict_lr", ")", "\n", "\n", "label_vecs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "label_vecs_logits", ",", "-", "1", ")", "\n", "label_vecs_final", "=", "label_vecs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "args", ".", "sr_share", ":", "\n", "                            ", "pick", "=", "0", "\n", "", "else", ":", "\n", "                            ", "pick", "=", "i", "\n", "\n", "", "cascade_images", "=", "model_list", "[", "pick", "]", "(", "images_lr", ",", "label_vecs_final", "*", "1.", ")", "\n", "images_sr", ".", "append", "(", "cascade_images", ")", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "args", ".", "arch", "in", "[", "\"srcnn\"", ",", "\"rdn\"", ",", "\"vdsr\"", "]", ":", "\n", "                    ", "channel_num", "=", "3", "\n", "", "else", ":", "\n", "                    ", "channel_num", "=", "4", "\n", "\n", "", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                    ", "images_sr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images_lr", ")", ")", ":", "\n", "                        ", "image_lr", "=", "images_lr", "[", "i", "]", "\n", "if", "len", "(", "image_lr", ".", "shape", ")", "<", "4", ":", "\n", "                            ", "image_lr", "=", "image_lr", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "SR_confidence", "[", "i", "]", ">", "0.9", "or", "image_lr", ".", "shape", "[", "-", "2", "]", ">", "32", ":", "\n", "                            ", "image_sr", "=", "image_lr", "[", ":", ",", ":", "channel_num", ",", "...", "]", "\n", "SR_stat", ".", "append", "(", "\"LR\"", ")", "\n", "go_LR", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "image_sr", "=", "model_list", "[", "0", "]", "(", "image_lr", "[", ":", ",", ":", "channel_num", ",", "...", "]", ")", "\n", "SR_stat", ".", "append", "(", "\"SR\"", ")", "\n", "go_SR", "+=", "1", "\n", "", "images_sr", ".", "append", "(", "image_sr", ")", "\n", "", "SR_tick", "=", "True", "\n", "", "else", ":", "\n", "                    ", "images_sr", "=", "model_list", "[", "0", "]", "(", "images_lr", "[", ":", ",", ":", "channel_num", ",", "...", "]", ")", "\n", "\n", "", "", "aster_dict_lr", "=", "aster", "[", "0", "]", "[", "\"data_in_fn\"", "]", "(", "images_lr", ")", "# [:, :3, ...]", "\n", "aster_dict_hr", "=", "aster", "[", "0", "]", "[", "\"data_in_fn\"", "]", "(", "images_hr", ")", "# [:, :3, ...]", "\n", "\n", "# if not self.args.random_reso:", "\n", "\n", "if", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "# aster_output_sr = aster[0][\"model\"](*aster_dict_sr)", "\n", "# LR", "\n", "                ", "aster_output_lr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "\n", "aster_dict_lr", "[", "0", "]", ",", "\n", "aster_dict_lr", "[", "1", "]", ",", "\n", "aster_dict_lr", "[", "2", "]", ",", "\n", "aster_dict_lr", "[", "3", "]", ",", "\n", "test", "=", "True", ",", "\n", "debug", "=", "True", "\n", ")", "\n", "# HR", "\n", "aster_output_hr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "\n", "aster_dict_hr", "[", "0", "]", ",", "\n", "aster_dict_hr", "[", "1", "]", ",", "\n", "aster_dict_hr", "[", "2", "]", ",", "\n", "aster_dict_hr", "[", "3", "]", ",", "\n", "test", "=", "True", ",", "\n", "debug", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                ", "aster_output_lr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "aster_dict_lr", ")", "\n", "aster_output_hr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "aster_dict_hr", ")", "\n", "\n", "# print(\"\u8f93\u51fa\",aster_output_lr.shape)", "\n", "# outputs_lr = aster_output_lr.permute(1, 0, 2).contiguous()", "\n", "# outputs_hr = aster_output_hr.permute(1, 0, 2).contiguous()", "\n", "# outputs = aster_output_sr", "\n", "#             print(\"\u53d6\u6700\u5927\u524d\", outputs)", "\n", "# outputs = torch.max(outputs,1)[1]", "\n", "# print(\"\u53d6\u6700\u5927\u540e\",outputs)", "\n", "\n", "", "if", "type", "(", "images_sr", ")", "==", "list", ":", "\n", "                ", "predict_result_sr", "=", "[", "]", "\n", "\n", "if", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "\n", "                    ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "                        ", "image", "=", "images_sr", "[", "i", "]", "\n", "\n", "aster_dict_sr", "=", "aster", "[", "0", "]", "[", "\"data_in_fn\"", "]", "(", "image", ")", "\n", "if", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "# aster_output_sr = aster[0][\"model\"](*aster_dict_sr)", "\n", "                            ", "aster_output_sr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "\n", "aster_dict_sr", "[", "0", "]", ",", "\n", "aster_dict_sr", "[", "1", "]", ",", "\n", "aster_dict_sr", "[", "2", "]", ",", "\n", "aster_dict_sr", "[", "3", "]", ",", "\n", "test", "=", "True", ",", "\n", "debug", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "aster_output_sr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "aster_dict_sr", ")", "\n", "# outputs_sr = aster_output_sr.permute(1, 0, 2).contiguous()", "\n", "", "if", "self", ".", "args", ".", "test_model", "==", "\"CRNN\"", ":", "\n", "                            ", "predict_result_sr_", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "aster_output_sr", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"ASTER\"", ":", "\n", "                            ", "predict_result_sr_", ",", "_", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "\n", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", ",", "\n", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "\n", "dataset", "=", "aster_info", "\n", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "                            ", "preds", ",", "preds_reverse", "=", "aster_output_sr", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "aster_dict_sr", "[", "1", "]", ".", "data", ")", "\n", "if", "type", "(", "sim_preds", ")", "==", "list", ":", "\n", "                                ", "predict_result_sr_", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "", "else", ":", "\n", "                                ", "predict_result_sr_", "=", "[", "sim_preds", ".", "split", "(", "'$'", ")", "[", "0", "]", "]", "# [pred.split('$')[0] for pred in sim_preds]", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"SEED\"", ":", "\n", "                            ", "predict_result_sr_", "=", "[", "]", "\n", "output_logits", "=", "aster_output_sr", "[", "\"output\"", "]", "[", "\"pred_rec\"", "]", "\n", "\n", "# print(\"predict_result_sr_:\", predict_result_sr_.shape, predict_result_sr_)", "\n", "\n", "alphabet", "=", "string", ".", "printable", "[", ":", "-", "6", "]", "\n", "for", "i", "in", "range", "(", "output_logits", ".", "shape", "[", "0", "]", ")", ":", "\n", "                                ", "out_str", "=", "''", "\n", "for", "j", "in", "range", "(", "output_logits", ".", "shape", "[", "1", "]", ")", ":", "\n", "                                    ", "if", "output_logits", "[", "i", "]", "[", "j", "]", "<", "94", ":", "\n", "                                        ", "out_str", "+=", "alphabet", "[", "output_logits", "[", "i", "]", "[", "j", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "break", "\n", "# print(\"out_str:\", out_str)", "\n", "", "", "predict_result_sr_", ".", "append", "(", "out_str", ")", "\n", "", "", "predict_result_sr", ".", "append", "(", "predict_result_sr_", ")", "\n", "\n", "#if self.args.random_reso:", "\n", "#    img_sr = self.parse_crnn_data(images_sr[-1])", "\n", "#    img_hr = self.parse_crnn_data(images_hr)", "\n", "#else:", "\n", "#    img_sr = images_sr[-1]", "\n", "#    img_hr = images_hr", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                            ", "img_sr", "=", "self", ".", "parse_crnn_data", "(", "images_sr", "[", "-", "1", "]", ")", "\n", "img_hr", "=", "self", ".", "parse_crnn_data", "(", "images_hr", ")", "\n", "img_lr", "=", "self", ".", "parse_crnn_data", "(", "images_lr", ")", "\n", "", "else", ":", "\n", "                            ", "img_sr", "=", "images_sr", "[", "-", "1", "]", "\n", "img_hr", "=", "images_hr", "\n", "img_lr", "=", "images_lr", "\n", "", "", "", "else", ":", "\n", "                    ", "aster_dict_sr", "=", "aster", "[", "0", "]", "[", "\"data_in_fn\"", "]", "(", "images_sr", ")", "\n", "# print(\"aster_dict_sr:\", aster_dict_sr.shape)", "\n", "if", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "# aster_output_sr = aster[0][\"model\"](*aster_dict_sr)", "\n", "                        ", "aster_output_sr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "\n", "aster_dict_sr", "[", "0", "]", ",", "\n", "aster_dict_sr", "[", "1", "]", ",", "\n", "aster_dict_sr", "[", "2", "]", ",", "\n", "aster_dict_sr", "[", "3", "]", ",", "\n", "test", "=", "True", ",", "\n", "debug", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "aster_output_sr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "aster_dict_sr", ")", "\n", "# outputs_sr = aster_output_sr.permute(1, 0, 2).contiguous()", "\n", "", "if", "self", ".", "args", ".", "test_model", "==", "\"CRNN\"", ":", "\n", "                        ", "predict_result_sr", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "aster_output_sr", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"ASTER\"", ":", "\n", "                        ", "predict_result_sr", ",", "_", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "\n", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", ",", "\n", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "\n", "dataset", "=", "aster_info", "\n", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "                        ", "preds", ",", "preds_reverse", "=", "aster_output_sr", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "aster_dict_sr", "[", "1", "]", ".", "data", ")", "\n", "if", "type", "(", "sim_preds", ")", "==", "list", ":", "\n", "                            ", "predict_result_sr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "", "else", ":", "\n", "                            ", "predict_result_sr", "=", "[", "sim_preds", ".", "split", "(", "'$'", ")", "[", "0", "]", "]", "# [pred.split('$')[0] for pred in sim_preds]", "\n", "# img_sr = self.parse_crnn_data(images_sr)", "\n", "# img_hr = self.parse_crnn_data(images_hr)", "\n", "", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"SEED\"", ":", "\n", "                        ", "predict_result_sr_", "=", "[", "]", "\n", "output_logits", "=", "aster_output_sr", "[", "\"output\"", "]", "[", "\"pred_rec\"", "]", "\n", "\n", "# print(\"predict_result_sr_:\", predict_result_sr_.shape, predict_result_sr_)", "\n", "\n", "alphabet", "=", "string", ".", "printable", "[", ":", "-", "6", "]", "\n", "for", "i", "in", "range", "(", "output_logits", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "out_str", "=", "''", "\n", "for", "j", "in", "range", "(", "output_logits", ".", "shape", "[", "1", "]", ")", ":", "\n", "                                ", "if", "output_logits", "[", "i", "]", "[", "j", "]", "<", "94", ":", "\n", "                                    ", "out_str", "+=", "alphabet", "[", "output_logits", "[", "i", "]", "[", "j", "]", "]", "\n", "", "else", ":", "\n", "                                    ", "break", "\n", "", "", "print", "(", "\"out_str:\"", ",", "out_str", ")", "\n", "predict_result_sr_", ".", "append", "(", "out_str", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                        ", "img_sr", "=", "self", ".", "parse_crnn_data", "(", "images_sr", ")", "\n", "img_hr", "=", "self", ".", "parse_crnn_data", "(", "images_hr", ")", "\n", "img_lr", "=", "self", ".", "parse_crnn_data", "(", "images_lr", ")", "\n", "", "else", ":", "\n", "                        ", "img_sr", "=", "images_sr", "[", "-", "1", "]", "\n", "img_hr", "=", "images_hr", "\n", "img_lr", "=", "images_lr", "\n", "# print(\"predict_result_sr_:\", predict_result_sr_)", "\n", "# print(\"images_sr[-1]:\", images_sr[-1].shape, images_hr.shape)", "\n", "\n", "#if images_sr[-1].shape != images_hr.shape:", "\n", "#    images_sr = [", "\n", "#        nn.functional.interpolate(images_sr[k], (images_hr.shape[2], images_hr.shape[3]))", "\n", "#                for k in range(self.args.stu_iter)", "\n", "#                 ]", "\n", "# img_lr = torch.nn.functional.interpolate(img_lr, img_sr.shape[-2:], mode=\"bicubic\")", "\n", "\n", "", "", "prob_val", "=", "img_hr", "[", ":", ",", ":", "1", ",", "...", "]", "\n", "\n", "metric_dict", "[", "'psnr'", "]", ".", "append", "(", "self", ".", "cal_psnr", "(", "img_sr", ",", "img_hr", ")", ")", "\n", "metric_dict", "[", "'ssim'", "]", ".", "append", "(", "self", ".", "cal_ssim", "(", "img_sr", ",", "img_hr", ")", ")", "\n", "\n", "# del prob_val", "\n", "", "else", ":", "\n", "\n", "                ", "aster_dict_sr", "=", "aster", "[", "0", "]", "[", "\"data_in_fn\"", "]", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "if", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "# aster_output_sr = aster[0][\"model\"](*aster_dict_sr)", "\n", "                    ", "aster_output_sr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "\n", "aster_dict_sr", "[", "0", "]", ",", "\n", "aster_dict_sr", "[", "1", "]", ",", "\n", "aster_dict_sr", "[", "2", "]", ",", "\n", "aster_dict_sr", "[", "3", "]", ",", "\n", "test", "=", "True", ",", "\n", "debug", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "aster_output_sr", "=", "aster", "[", "0", "]", "[", "\"model\"", "]", "(", "aster_dict_sr", ")", "\n", "# outputs_sr = aster_output_sr.permute(1, 0, 2).contiguous()", "\n", "", "if", "self", ".", "args", ".", "test_model", "==", "\"CRNN\"", ":", "\n", "                    ", "predict_result_sr", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "aster_output_sr", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"ASTER\"", ":", "\n", "                    ", "predict_result_sr", ",", "_", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "\n", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", ",", "\n", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "\n", "dataset", "=", "aster_info", "\n", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "                    ", "preds", ",", "preds_reverse", "=", "aster_output_sr", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "aster_dict_sr", "[", "1", "]", ".", "data", ")", "\n", "predict_result_sr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "\n", "", "if", "images_sr", ".", "shape", "!=", "images_hr", ".", "shape", ":", "\n", "                    ", "images_sr", "=", "nn", ".", "functional", ".", "interpolate", "(", "images_sr", ",", "(", "images_hr", ".", "shape", "[", "2", "]", ",", "images_hr", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "", "metric_dict", "[", "'psnr'", "]", ".", "append", "(", "self", ".", "cal_psnr", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "metric_dict", "[", "'ssim'", "]", ".", "append", "(", "self", ".", "cal_ssim", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "# aster_dict_sr = aster[0][\"data_in_fn\"](images_sr[:, :3, :, :])", "\n", "# aster_output_sr = aster[0][\"model\"](aster_dict_sr)", "\n", "# outputs_sr = aster_output_sr.permute(1, 0, 2).contiguous()", "\n", "# predict_result_sr = aster[0][\"string_process\"](aster_output_sr)", "\n", "\n", "# predict_result_lr = aster[0][\"string_process\"](outputs_lr)", "\n", "# predict_result_hr = aster[0][\"string_process\"](outputs_hr)", "\n", "\n", "", "if", "self", ".", "args", ".", "test_model", "==", "\"CRNN\"", ":", "\n", "                ", "predict_result_lr", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "aster_output_lr", ")", "\n", "predict_result_hr", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "aster_output_hr", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"ASTER\"", ":", "\n", "                ", "predict_result_lr", ",", "_", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "\n", "aster_output_lr", "[", "'output'", "]", "[", "'pred_rec'", "]", ",", "\n", "aster_dict_lr", "[", "'rec_targets'", "]", ",", "\n", "dataset", "=", "aster_info", "\n", ")", "\n", "predict_result_hr", ",", "_", "=", "aster", "[", "0", "]", "[", "\"string_process\"", "]", "(", "\n", "aster_output_hr", "[", "'output'", "]", "[", "'pred_rec'", "]", ",", "\n", "aster_dict_hr", "[", "'rec_targets'", "]", ",", "\n", "dataset", "=", "aster_info", "\n", ")", "\n", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"MORAN\"", ":", "\n", "### LR ###", "\n", "                ", "preds", ",", "preds_reverse", "=", "aster_output_lr", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "aster_dict_lr", "[", "1", "]", ".", "data", ")", "\n", "# predict_result_lr = [pred.split('$')[0] for pred in sim_preds]", "\n", "\n", "if", "type", "(", "sim_preds", ")", "==", "list", ":", "\n", "                    ", "predict_result_lr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "", "else", ":", "\n", "                    ", "predict_result_lr", "=", "[", "sim_preds", ".", "split", "(", "'$'", ")", "[", "0", "]", "]", "\n", "\n", "### HR ###", "\n", "", "preds", ",", "preds_reverse", "=", "aster_output_hr", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "aster_dict_hr", "[", "1", "]", ".", "data", ")", "\n", "# predict_result_hr = [pred.split('$')[0] for pred in sim_preds]", "\n", "\n", "if", "type", "(", "sim_preds", ")", "==", "list", ":", "\n", "                    ", "predict_result_hr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "", "else", ":", "\n", "                    ", "predict_result_hr", "=", "[", "sim_preds", ".", "split", "(", "'$'", ")", "[", "0", "]", "]", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "test_model", "==", "\"SEED\"", ":", "\n", "                ", "predict_result_lr", "=", "[", "]", "\n", "output_logits", "=", "aster_output_lr", "[", "\"output\"", "]", "[", "\"pred_rec\"", "]", "\n", "\n", "# print(\"predict_result_sr_:\", predict_result_sr_.shape, predict_result_sr_)", "\n", "\n", "alphabet", "=", "string", ".", "printable", "[", ":", "-", "6", "]", "\n", "for", "i", "in", "range", "(", "output_logits", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "out_str", "=", "''", "\n", "for", "j", "in", "range", "(", "output_logits", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "if", "output_logits", "[", "i", "]", "[", "j", "]", "<", "94", ":", "\n", "                            ", "out_str", "+=", "alphabet", "[", "output_logits", "[", "i", "]", "[", "j", "]", "]", "\n", "", "else", ":", "\n", "                            ", "break", "\n", "# print(\"out_str:\", out_str)", "\n", "", "", "predict_result_lr", ".", "append", "(", "out_str", ")", "\n", "\n", "", "predict_result_hr", "=", "[", "]", "\n", "output_logits", "=", "aster_output_hr", "[", "\"output\"", "]", "[", "\"pred_rec\"", "]", "\n", "\n", "# print(\"predict_result_sr_:\", predict_result_sr_.shape, predict_result_sr_)", "\n", "\n", "alphabet", "=", "string", ".", "printable", "[", ":", "-", "6", "]", "\n", "for", "i", "in", "range", "(", "output_logits", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "out_str", "=", "''", "\n", "for", "j", "in", "range", "(", "output_logits", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "if", "output_logits", "[", "i", "]", "[", "j", "]", "<", "94", ":", "\n", "                            ", "out_str", "+=", "alphabet", "[", "output_logits", "[", "i", "]", "[", "j", "]", "]", "\n", "", "else", ":", "\n", "                            ", "break", "\n", "# print(\"out_str:\", out_str)", "\n", "", "", "predict_result_hr", ".", "append", "(", "out_str", ")", "\n", "\n", "\n", "# print(\"\u6807\u7b7e\",label_strs)", "\n", "# pred_rec_lr = aster_output_lr['output']['pred_rec']", "\n", "# pred_rec_sr = aster_output_sr['output']['pred_rec']", "\n", "# pred_str_lr, _ = get_str_list(pred_rec_lr, aster_dict_lr['rec_targets'], dataset=aster_info)", "\n", "# pred_str_sr, _ = get_str_list(pred_rec_sr, aster_dict_sr['rec_targets'], dataset=aster_info)", "\n", "", "", "cnt", "=", "0", "\n", "'''\n            for pred, target in zip(predict_result_sr, label_strs):\n                # if cnt % 100 == 0:\n                #     print(\"\u9884\u6d4b\u7ed3\u679c{0}|\u6807\u7b7e{1}\".format(pred,target))\n                if pred == str_filt(target, 'lower'):\n                    n_correct += 1\n\n                cnt += 1\n\n            cnt_lr = 0\n            for pred, target in zip(predict_result_lr, label_strs):\n                # if cnt % 100 == 0:\n                #     print(\"\u9884\u6d4b\u7ed3\u679c{0}|\u6807\u7b7e{1}\".format(pred,target))\n                if pred == str_filt(target, 'lower'):\n                    n_correct_lr += 1\n\n                cnt_lr += 1\n\n            cnt_hr = 0\n            for pred, target in zip(predict_result_hr, label_strs):\n                # if cnt % 100 == 0:\n                #     print(\"\u9884\u6d4b\u7ed3\u679c{0}|\u6807\u7b7e{1}\".format(pred,target))\n                if pred == str_filt(target, 'lower'):\n                    n_correct_hr += 1\n\n                cnt_hr += 1\n            '''", "\n", "\n", "\n", "for", "batch_i", "in", "range", "(", "len", "(", "images_lr", ")", ")", ":", "\n", "\n", "                ", "lr_wrong", "=", "True", "\n", "sr_wrong", "=", "True", "\n", "hr_wrong", "=", "True", "\n", "\n", "label", "=", "label_strs", "[", "batch_i", "]", "\n", "if", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "                    ", "for", "k", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "                        ", "if", "predict_result_sr", "[", "k", "]", "[", "batch_i", "]", "==", "str_filt", "(", "label", ",", "'lower'", ")", ":", "\n", "                            ", "counters", "[", "k", "]", "+=", "1", "\n", "\n", "# print(\"predict_result_sr:\", predict_result_sr)", "\n", "\n", "", "", "if", "predict_result_sr", "[", "-", "1", "]", "[", "batch_i", "]", "==", "str_filt", "(", "label", ",", "'lower'", ")", ":", "\n", "                        ", "sr_wrong", "=", "False", "\n", "\n", "", "", "else", ":", "\n", "                    ", "if", "predict_result_sr", "[", "batch_i", "]", "==", "str_filt", "(", "label", ",", "'lower'", ")", ":", "\n", "                        ", "sr_wrong", "=", "False", "\n", "n_correct", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "iswrong", "=", "True", "\n", "", "", "if", "predict_result_lr", "[", "batch_i", "]", "==", "str_filt", "(", "label", ",", "'lower'", ")", ":", "\n", "                    ", "lr_wrong", "=", "False", "\n", "n_correct_lr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "iswrong", "=", "True", "\n", "", "if", "predict_result_hr", "[", "batch_i", "]", "==", "str_filt", "(", "label", ",", "'lower'", ")", ":", "\n", "                    ", "hr_wrong", "=", "False", "\n", "n_correct_hr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "iswrong", "=", "True", "\n", "\n", "", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "                    ", "if", "SR_stat", "[", "i", "]", "==", "\"SR\"", ":", "\n", "                        ", "if", "lr_wrong", "and", "not", "sr_wrong", ":", "\n", "                            ", "LRW_SRR", "+=", "1", "\n", "", "if", "not", "lr_wrong", "and", "sr_wrong", ":", "\n", "                            ", "LRR_SRW", "+=", "1", "\n", "", "if", "lr_wrong", "and", "sr_wrong", ":", "\n", "                            ", "LRW_SRW", "+=", "1", "\n", "", "if", "not", "lr_wrong", "and", "not", "sr_wrong", ":", "\n", "                            ", "LRR_SRR", "+=", "1", "\n", "", "", "", "if", "vis", ":", "\n", "# if (lr_wrong and not sr_wrong) or (hr_wrong and not sr_wrong):", "\n", "#     # print(\"identity:\", identity)", "\n", "#     i_f.write(identity[i] + \",\" + predict_result_lr[i] + \",\" + predict_result_sr[-1][i] + \",\" + predict_result_hr[i] + \"\\n\")", "\n", "\n", "                    ", "if", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "#all_label_vecs = {", "\n", "#    'lr': label_vecs_lr.permute(1, 0, 2).unsqueeze(1).permute(0, 3, 1, 2),", "\n", "#    'sr': label_vecs.permute(1, 0, 2).unsqueeze(1).permute(0, 3, 1, 2),", "\n", "#    'hr': label_vecs_hr.permute(1, 0, 2).unsqueeze(1).permute(0, 3, 1, 2),", "\n", "#    # 'tl': label_vecs_gt,", "\n", "#}", "\n", "                        ", "pass", "\n", "\n", "", "sr", ",", "lr", ",", "hr", "=", "images_sr", "[", "-", "1", "]", "[", "batch_i", "]", "if", "type", "(", "images_sr", ")", "is", "list", "else", "images_sr", "[", "batch_i", "]", ",", "images_lr", "[", "batch_i", "]", ",", "images_hr", "[", "batch_i", "]", "\n", "# print(\"prob_val:\", prob_val.shape)", "\n", "# prob_val_i = prob_val[i, :3, :, :]", "\n", "# char_mask = images_hr[i, 3:, :, :]", "\n", "\n", "if", "len", "(", "sr", ".", "shape", ")", ">", "3", ":", "\n", "                        ", "sr", "=", "sr", ".", "squeeze", "(", "0", ")", "\n", "lr", "=", "lr", ".", "squeeze", "(", "0", ")", "\n", "hr", "=", "hr", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "sr", "=", "sr", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255", "\n", "# sr = (sr >= 0) * sr", "\n", "sr", "[", "sr", "<", "0", "]", "=", "0.", "\n", "sr", "[", "sr", ">", "255", "]", "=", "255.", "\n", "# print(\"sr:\", np.unique(sr))", "\n", "sr", "=", "np", ".", "transpose", "(", "sr", "[", ":", "3", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "lr", "=", "np", ".", "transpose", "(", "lr", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "3", "]", "*", "255", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "hr", "=", "np", ".", "transpose", "(", "hr", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "3", "]", "*", "255", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# prob_val_i = np.transpose(prob_val_i.data.cpu().numpy() * 255, (1, 2, 0)).astype(np.uint8)", "\n", "# char_mask = np.transpose(char_mask.data.cpu().numpy() * 255, (1, 2, 0)).astype(np.uint8)", "\n", "\n", "# lH, lW = lr.shape[:2]", "\n", "# lr = cv2.resize(lr, (100, 32), interpolation=cv2.INTER_CUBIC)", "\n", "# lr = cv2.resize(lr, (lW, lH), interpolation=cv2.INTER_CUBIC)", "\n", "\n", "\n", "if", "SR_stat", "[", "batch_i", "]", "==", "\"SR\"", ":", "\n", "\n", "                        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "vis_dir", "+", "\"_LR\"", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "vis_dir", "+", "\"_LR\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "vis_dir", "+", "\"_SR\"", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "vis_dir", "+", "\"_SR\"", ")", "\n", "\n", "", "LR_image", "=", "os", ".", "path", ".", "join", "(", "vis_dir", "+", "\"_LR\"", ",", "str", "(", "batch_i", "+", "self", ".", "args", ".", "batch_size", "*", "iter_i", ")", "+", "\"_\"", "+", "label", "+", "'.jpg'", ")", "\n", "SR_image", "=", "os", ".", "path", ".", "join", "(", "vis_dir", "+", "\"_SR\"", ",", "str", "(", "batch_i", "+", "self", ".", "args", ".", "batch_size", "*", "iter_i", ")", "+", "\"_\"", "+", "label", "+", "'.jpg'", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "LR_image", ",", "lr", ")", "\n", "cv2", ".", "imwrite", "(", "SR_image", ",", "sr", ")", "\n", "\n", "print", "(", "SR_image", ")", "\n", "", "lr", "=", "cv2", ".", "resize", "(", "lr", ",", "(", "128", ",", "32", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sr", "=", "cv2", ".", "resize", "(", "sr", ",", "(", "128", ",", "32", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "hr", "=", "cv2", ".", "resize", "(", "hr", ",", "(", "128", ",", "32", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "# prob_val_i = cv2.resize(prob_val_i, (128, 32), interpolation=cv2.INTER_CUBIC)", "\n", "# char_mask = cv2.resize(char_mask, (128, 32), interpolation=cv2.INTER_CUBIC)", "\n", "\n", "paddimg_im", "=", "np", ".", "zeros", "(", "(", "sr", ".", "shape", "[", "0", "]", "+", "lr", ".", "shape", "[", "0", "]", "+", "hr", ".", "shape", "[", "0", "]", "+", "hr", ".", "shape", "[", "0", "]", "+", "hr", ".", "shape", "[", "0", "]", "+", "25", ",", "sr", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "paddimg_im", "[", ":", "lr", ".", "shape", "[", "0", "]", ",", ":", "lr", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "lr", "\n", "paddimg_im", "[", "lr", ".", "shape", "[", "0", "]", "+", "5", ":", "lr", ".", "shape", "[", "0", "]", "+", "sr", ".", "shape", "[", "0", "]", "+", "5", ",", ":", "sr", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "sr", "\n", "paddimg_im", "[", "lr", ".", "shape", "[", "0", "]", "+", "sr", ".", "shape", "[", "0", "]", "+", "10", ":", "lr", ".", "shape", "[", "0", "]", "+", "sr", ".", "shape", "[", "0", "]", "+", "10", "+", "hr", ".", "shape", "[", "0", "]", ",", ":", "hr", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "hr", "\n", "# paddimg_im[prob_val_i.shape[0] + lr.shape[0] + sr.shape[0] + 15:prob_val_i.shape[0] + lr.shape[0] + sr.shape[0] + 15 + hr.shape[0],", "\n", "# :prob_val_i.shape[1], :] = cv2.cvtColor(prob_val_i, cv2.COLOR_GRAY2BGR)", "\n", "# paddimg_im[", "\n", "# prob_val_i.shape[0] + char_mask.shape[0] + lr.shape[0] + sr.shape[0] + 20:prob_val_i.shape[0] + char_mask.shape[0] + lr.shape[0] + sr.shape[", "\n", "#     0] + 20 + hr.shape[0], :char_mask.shape[1], :] = cv2.cvtColor(char_mask, cv2.COLOR_GRAY2BGR)", "\n", "\n", "if", "lr_wrong", "and", "not", "sr_wrong", ":", "\n", "                        ", "file_name", "=", "\"lrw_srr_lr_sr_hr_\"", "+", "str", "(", "wrong_cnt", ")", "+", "'_'", "+", "predict_result_lr", "[", "batch_i", "]", "+", "'_'", "+", "(", "predict_result_sr", "[", "-", "1", "]", "[", "batch_i", "]", "if", "type", "(", "images_sr", ")", "is", "list", "else", "predict_result_sr", "[", "batch_i", "]", ")", "+", "'_'", "+", "predict_result_hr", "[", "batch_i", "]", "+", "\"_\"", "+", "label", ".", "lower", "(", ")", "+", "'_.jpg'", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", ",", "cv2", ".", "cvtColor", "(", "paddimg_im", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "", "elif", "not", "lr_wrong", "and", "sr_wrong", ":", "\n", "                        ", "file_name", "=", "\"lrr_srw_lr_sr_hr_\"", "+", "str", "(", "wrong_cnt", ")", "+", "'_'", "+", "predict_result_lr", "[", "batch_i", "]", "+", "'_'", "+", "(", "predict_result_sr", "[", "-", "1", "]", "[", "batch_i", "]", "if", "type", "(", "images_sr", ")", "is", "list", "else", "predict_result_sr", "[", "\n", "batch_i", "]", ")", "+", "'_'", "+", "predict_result_hr", "[", "batch_i", "]", "+", "\"_\"", "+", "label", ".", "lower", "(", ")", "+", "'_.jpg'", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", ",", "\n", "cv2", ".", "cvtColor", "(", "paddimg_im", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "", "else", ":", "\n", "                        ", "file_name", "=", "\"gogogo_\"", "+", "str", "(", "wrong_cnt", ")", "+", "'_'", "+", "predict_result_lr", "[", "batch_i", "]", "+", "'_'", "+", "(", "predict_result_sr", "[", "-", "1", "]", "[", "batch_i", "]", "if", "type", "(", "images_sr", ")", "is", "list", "else", "predict_result_sr", "[", "\n", "i", "]", ")", "+", "'_'", "+", "predict_result_hr", "[", "batch_i", "]", "+", "\"_\"", "+", "label", ".", "lower", "(", ")", "+", "'_.jpg'", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", ",", "\n", "cv2", ".", "cvtColor", "(", "paddimg_im", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "", "wrong_cnt", "+=", "1", "\n", "\n", "# label_vecs, label_vecs_lr, label_vecs_hr, label_vecs_gt", "\n", "if", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "                        ", "h", ",", "w", "=", "26", "*", "4", ",", "37", "*", "4", "\n", "\n", "tp_image", "=", "np", ".", "zeros", "(", "(", "(", "26", "*", "4", "+", "10", ")", "*", "4", ",", "37", "*", "4", "+", "10", ")", ")", "*", "255.", "\n", "cnt", "=", "0", "\n", "'''\n                        for key in all_label_vecs:\n                            # [37, 26]\n                            image = all_label_vecs[key][i].squeeze(1).data.cpu().numpy() * 255\n                            image_np = image.astype(np.uint8).transpose(1, 0)\n                            # print(\"image_np:\", image_np.shape)\n                            image_np = cv2.resize(image_np, (w, h))\n                            # print(\"image_np:\", image_np.shape, tp_image[((h + 5) * cnt):((h + 5) * (cnt)) + h, :w].shape)\n                            tp_image[((h + 5) * cnt):((h + 5) * (cnt)) + h, 5:w + 5] = image_np\n                            cnt += 1\n                        cv2.imwrite(os.path.join(vis_dir, \"tp_\" + file_name), tp_image.astype(np.uint8))\n                        '''", "\n", "# print(\"show:\", label_vecs.shape, label_vecs_lr.shape, label_vecs_hr.shape, label_vecs_gt.shape)", "\n", "\n", "", "", "", "'''\n            for pred, target in zip(pred_str_sr, label_strs):\n                if pred == str_filt(target, 'lower'):\n                    n_correct += 1\n            '''", "\n", "#loss_im = image_crit[\"image_loss\"](images_sr, images_hr).mean()", "\n", "# loss_rec = aster_output_sr['losses']['loss_rec'].mean()", "\n", "sum_images", "+=", "val_batch_size", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "psnr_avg", "=", "sum", "(", "metric_dict", "[", "'psnr'", "]", ")", "/", "(", "len", "(", "metric_dict", "[", "'psnr'", "]", ")", "+", "1e-10", ")", "\n", "ssim_avg", "=", "sum", "(", "metric_dict", "[", "'ssim'", "]", ")", "/", "(", "len", "(", "metric_dict", "[", "'ssim'", "]", ")", "+", "1e-10", ")", "\n", "\n", "print", "(", "'[{}]\\t'", "\n", "\n", "'PSNR {:.2f} | SSIM {:.4f}\\t'", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "float", "(", "psnr_avg", ")", ",", "float", "(", "ssim_avg", ")", ")", ")", "\n", "print", "(", "'save display images'", ")", "\n", "# self.tripple_display(images_lr, images_sr, images_hr, pred_str_lr, pred_str_sr, label_strs, index)", "\n", "\n", "if", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "            ", "acc", "=", "{", "i", ":", "0", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "                ", "acc", "[", "i", "]", "=", "round", "(", "counters", "[", "i", "]", "/", "sum_images", ",", "4", ")", "\n", "", "", "else", ":", "\n", "            ", "accuracy", "=", "round", "(", "n_correct", "/", "sum_images", ",", "4", ")", "\n", "", "accuracy_lr", "=", "round", "(", "n_correct_lr", "/", "sum_images", ",", "4", ")", "\n", "accuracy_hr", "=", "round", "(", "n_correct_hr", "/", "sum_images", ",", "4", ")", "\n", "psnr_avg", "=", "round", "(", "psnr_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "ssim_avg", "=", "round", "(", "ssim_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "\n", "if", "self", ".", "args", ".", "arch", "in", "ABLATION_SET", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "stu_iter", ")", ":", "\n", "                ", "print", "(", "'sr_accuray_iter'", "+", "str", "(", "i", ")", "+", "': %.2f%%'", "%", "(", "acc", "[", "i", "]", "*", "100", ")", ")", "\n", "", "accuracy", "=", "acc", "[", "self", ".", "args", ".", "stu_iter", "-", "1", "]", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'sr_accuray: %.2f%%'", "%", "(", "accuracy", "*", "100", ")", ")", "\n", "", "print", "(", "'lr_accuray: %.2f%%'", "%", "(", "accuracy_lr", "*", "100", ")", ")", "\n", "print", "(", "'hr_accuray: %.2f%%'", "%", "(", "accuracy_hr", "*", "100", ")", ")", "\n", "if", "self", ".", "args", ".", "random_reso", ":", "\n", "            ", "print", "(", "'LR rate: %.2f%%'", "%", "(", "go_LR", "/", "sum_images", "*", "100", ")", ")", "\n", "print", "(", "'SR rate: %.2f%%'", "%", "(", "go_SR", "/", "sum_images", "*", "100", ")", ")", "\n", "print", "(", "'LRW_SRR rate: %.2f%%'", "%", "(", "LRW_SRR", "/", "sum_images", "*", "100", ")", ")", "\n", "print", "(", "'LRR_SRW rate: %.2f%%'", "%", "(", "LRR_SRW", "/", "sum_images", "*", "100", ")", ")", "\n", "print", "(", "'LRR_SRR rate: %.2f%%'", "%", "(", "LRR_SRR", "/", "sum_images", "*", "100", ")", ")", "\n", "print", "(", "'LRW_SRW rate: %.2f%%'", "%", "(", "LRW_SRW", "/", "sum_images", "*", "100", ")", ")", "\n", "", "metric_dict", "[", "'accuracy'", "]", "=", "accuracy", "\n", "metric_dict", "[", "'psnr_avg'", "]", "=", "psnr_avg", "\n", "metric_dict", "[", "'ssim_avg'", "]", "=", "ssim_avg", "\n", "\n", "# if self.args.arch in [\"tsrn_tl\", \"tsrn_tl_wmask\"]:", "\n", "#     aster[1].train()", "\n", "\n", "if", "vis", ":", "\n", "            ", "i_f", ".", "close", "(", ")", "\n", "\n", "", "return", "metric_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.test": [[1349, 1434], ["super_resolution.TextSR.generator_init", "super_resolution.TextSR.get_test_data", "print", "time.time", "enumerate", "time.time", "round", "round", "round", "float", "print", "super_resolution.TextSR.args.test_data_dir.split", "super_resolution.TextSR.MORAN_init", "super_resolution.TextSR.eval", "model.parameters", "model.eval", "images_lr.to.to.to", "images_hr.to.to.to", "time.time", "model", "time.time", "metric_dict[].append", "metric_dict[].append", "zip", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "sum", "len", "sum", "len", "round.item", "round.item", "super_resolution.TextSR.Aster_init", "aster.eval", "super_resolution.TextSR.cal_psnr", "super_resolution.TextSR.cal_ssim", "super_resolution.TextSR.parse_moran_data", "super_resolution.TextSR.", "preds.transpose().contiguous().view.transpose().contiguous().view.max", "super_resolution.TextSR.converter_moran.decode", "super_resolution.TextSR.CRNN_init", "super_resolution.TextSR.eval", "super_resolution.TextSR.parse_aster_data", "aster", "get_str_list", "super_resolution.TextSR.parse_aster_data", "aster", "get_str_list", "utils.util.str_filt", "utils.util.str_filt", "datetime.datetime.datetime.now().strftime", "len", "pred.split", "super_resolution.TextSR.parse_crnn_data", "super_resolution.TextSR.", "super_resolution.TextSR.max", "preds.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "super_resolution.TextSR.converter_crnn.decode", "datetime.datetime.datetime.now", "preds.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "super_resolution.TextSR.size", "preds.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.get_test_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.MORAN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.Aster_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_moran_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.CRNN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_aster_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_aster_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "generator_init", "(", ")", "\n", "model", ",", "image_crit", "=", "model_dict", "[", "'model'", "]", ",", "model_dict", "[", "'crit'", "]", "\n", "test_data", ",", "test_loader", "=", "self", ".", "get_test_data", "(", "self", ".", "test_data_dir", ")", "\n", "data_name", "=", "self", ".", "args", ".", "test_data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "print", "(", "'evaling %s'", "%", "data_name", ")", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "            ", "moran", "=", "self", ".", "MORAN_init", "(", ")", "\n", "moran", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "            ", "aster", ",", "aster_info", "=", "self", ".", "Aster_init", "(", ")", "\n", "aster", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "            ", "crnn", "=", "self", ".", "CRNN_init", "(", ")", "\n", "crnn", ".", "eval", "(", ")", "\n", "# print(sum(p.numel() for p in moran.parameters()))", "\n", "", "if", "self", ".", "args", ".", "arch", "!=", "'bicubic'", ":", "\n", "            ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "", "n_correct", "=", "0", "\n", "sum_images", "=", "0", "\n", "metric_dict", "=", "{", "'psnr'", ":", "[", "]", ",", "'ssim'", ":", "[", "]", ",", "'accuracy'", ":", "0.0", ",", "'psnr_avg'", ":", "0.0", ",", "'ssim_avg'", ":", "0.0", "}", "\n", "current_acc_dict", "=", "{", "data_name", ":", "0", "}", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "=", "0", "\n", "for", "i", ",", "data", "in", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "            ", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "val_batch_size", "=", "images_lr", ".", "shape", "[", "0", "]", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "images_hr", "=", "images_hr", ".", "to", "(", "self", ".", "device", ")", "\n", "sr_beigin", "=", "time", ".", "time", "(", ")", "\n", "images_sr", "=", "model", "(", "images_hr", ")", "\n", "\n", "# images_sr = images_lr", "\n", "sr_end", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "+=", "sr_end", "-", "sr_beigin", "\n", "metric_dict", "[", "'psnr'", "]", ".", "append", "(", "self", ".", "cal_psnr", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "metric_dict", "[", "'ssim'", "]", ".", "append", "(", "self", ".", "cal_ssim", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "                ", "moran_input", "=", "self", ".", "parse_moran_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "moran_output", "=", "moran", "(", "moran_input", "[", "0", "]", ",", "moran_input", "[", "1", "]", ",", "moran_input", "[", "2", "]", ",", "moran_input", "[", "3", "]", ",", "test", "=", "True", ",", "\n", "debug", "=", "True", ")", "\n", "preds", ",", "preds_reverse", "=", "moran_output", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "moran_input", "[", "1", "]", ".", "data", ")", "\n", "pred_str_sr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "                ", "aster_dict_sr", "=", "self", ".", "parse_aster_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_sr", "=", "aster", "(", "aster_dict_sr", "[", "\"images\"", "]", ")", "\n", "pred_rec_sr", "=", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_sr", ",", "_", "=", "get_str_list", "(", "pred_rec_sr", ",", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "\n", "aster_dict_lr", "=", "self", ".", "parse_aster_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_lr", "=", "aster", "(", "aster_dict_lr", ")", "\n", "pred_rec_lr", "=", "aster_output_lr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_lr", ",", "_", "=", "get_str_list", "(", "pred_rec_lr", ",", "aster_dict_lr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "                ", "crnn_input", "=", "self", ".", "parse_crnn_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "crnn_output", "=", "crnn", "(", "crnn_input", "[", "\"images\"", "]", ")", "\n", "_", ",", "preds", "=", "crnn_output", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "crnn_output", ".", "size", "(", "0", ")", "]", "*", "val_batch_size", ")", "\n", "pred_str_sr", "=", "self", ".", "converter_crnn", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "", "for", "pred", ",", "target", "in", "zip", "(", "pred_str_sr", ",", "label_strs", ")", ":", "\n", "                ", "if", "str_filt", "(", "pred", ",", "'lower'", ")", "==", "str_filt", "(", "target", ",", "'lower'", ")", ":", "\n", "                    ", "n_correct", "+=", "1", "\n", "", "", "sum_images", "+=", "val_batch_size", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "print", "(", "'Evaluation: [{}][{}/{}]\\t'", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "i", "+", "1", ",", "len", "(", "test_loader", ")", ",", ")", ")", "\n", "# self.test_display(images_lr, images_sr, images_hr, pred_str_lr, pred_str_sr, label_strs, str_filt)", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "psnr_avg", "=", "sum", "(", "metric_dict", "[", "'psnr'", "]", ")", "/", "len", "(", "metric_dict", "[", "'psnr'", "]", ")", "\n", "ssim_avg", "=", "sum", "(", "metric_dict", "[", "'ssim'", "]", ")", "/", "len", "(", "metric_dict", "[", "'ssim'", "]", ")", "\n", "acc", "=", "round", "(", "n_correct", "/", "sum_images", ",", "4", ")", "\n", "fps", "=", "sum_images", "/", "(", "time_end", "-", "time_begin", ")", "\n", "psnr_avg", "=", "round", "(", "psnr_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "ssim_avg", "=", "round", "(", "ssim_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "current_acc_dict", "[", "data_name", "]", "=", "float", "(", "acc", ")", "\n", "# result = {'accuracy': current_acc_dict, 'fps': fps}", "\n", "result", "=", "{", "'accuracy'", ":", "current_acc_dict", ",", "'psnr_avg'", ":", "psnr_avg", ",", "'ssim_avg'", ":", "ssim_avg", ",", "'fps'", ":", "fps", "}", "\n", "print", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.demo": [[1435, 1524], ["super_resolution.TextSR.generator_init", "time.time", "tqdm.tqdm.tqdm", "len", "time.time", "print", "PIL.Image.open", "img.resize.resize.resize", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "super_resolution.TextSR.MORAN_init", "super_resolution.TextSR.eval", "model.parameters", "model.eval", "os.listdir", "super_resolution.TextSR.demo.transform_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.MORAN_init", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "def", "demo", "(", "self", ")", ":", "\n", "        ", "mask_", "=", "self", ".", "args", ".", "mask", "\n", "\n", "def", "transform_", "(", "path", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "256", ",", "32", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "img_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "\n", "if", "mask_", ":", "\n", "                ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "mask", "=", "transforms", ".", "ToTensor", "(", ")", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", "\n", "", "img_tensor", "=", "img_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img_tensor", "\n", "\n", "", "model_dict", "=", "self", ".", "generator_init", "(", ")", "\n", "model", ",", "image_crit", "=", "model_dict", "[", "'model'", "]", ",", "model_dict", "[", "'crit'", "]", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "            ", "moran", "=", "self", ".", "MORAN_init", "(", ")", "\n", "moran", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "            ", "aster", ",", "aster_info", "=", "self", ".", "Aster_init", "(", ")", "\n", "aster", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "            ", "crnn", "=", "self", ".", "CRNN_init", "(", ")", "\n", "crnn", ".", "eval", "(", ")", "\n", "", "if", "self", ".", "args", ".", "arch", "!=", "'bicubic'", ":", "\n", "            ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "", "n_correct", "=", "0", "\n", "sum_images", "=", "0", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "=", "0", "\n", "for", "im_name", "in", "tqdm", "(", "os", ".", "listdir", "(", "self", ".", "args", ".", "demo_dir", ")", ")", ":", "\n", "            ", "images_lr", "=", "transform_", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "demo_dir", ",", "im_name", ")", ")", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "sr_beigin", "=", "time", ".", "time", "(", ")", "\n", "images_sr", "=", "model", "(", "images_lr", ")", "\n", "\n", "sr_end", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "+=", "sr_end", "-", "sr_beigin", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "                ", "moran_input", "=", "self", ".", "parse_moran_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "moran_output", "=", "moran", "(", "moran_input", "[", "0", "]", ",", "moran_input", "[", "1", "]", ",", "moran_input", "[", "2", "]", ",", "moran_input", "[", "3", "]", ",", "test", "=", "True", ",", "\n", "debug", "=", "True", ")", "\n", "preds", ",", "preds_reverse", "=", "moran_output", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "moran_input", "[", "1", "]", ".", "data", ")", "\n", "pred_str_sr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "\n", "moran_input_lr", "=", "self", ".", "parse_moran_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "moran_output_lr", "=", "moran", "(", "moran_input_lr", "[", "0", "]", ",", "moran_input_lr", "[", "1", "]", ",", "moran_input_lr", "[", "2", "]", ",", "moran_input_lr", "[", "3", "]", ",", "test", "=", "True", ",", "\n", "debug", "=", "True", ")", "\n", "preds_lr", ",", "preds_reverse_lr", "=", "moran_output_lr", "[", "0", "]", "\n", "_", ",", "preds_lr", "=", "preds_lr", ".", "max", "(", "1", ")", "\n", "sim_preds_lr", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds_lr", ".", "data", ",", "moran_input_lr", "[", "1", "]", ".", "data", ")", "\n", "pred_str_lr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds_lr", "]", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "                ", "aster_dict_sr", "=", "self", ".", "parse_aster_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_sr", "=", "aster", "(", "aster_dict_sr", ")", "\n", "pred_rec_sr", "=", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_sr", ",", "_", "=", "get_str_list", "(", "pred_rec_sr", ",", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "\n", "aster_dict_lr", "=", "self", ".", "parse_aster_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_lr", "=", "aster", "(", "aster_dict_lr", ")", "\n", "pred_rec_lr", "=", "aster_output_lr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_lr", ",", "_", "=", "get_str_list", "(", "pred_rec_lr", ",", "aster_dict_lr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "                ", "crnn_input", "=", "self", ".", "parse_crnn_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "crnn_output", "=", "crnn", "(", "crnn_input", ")", "\n", "_", ",", "preds", "=", "crnn_output", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "crnn_output", ".", "size", "(", "0", ")", "]", "*", "val_batch_size", ")", "\n", "pred_str_sr", "=", "self", ".", "converter_crnn", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "\n", "crnn_input_lr", "=", "self", ".", "parse_crnn_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "crnn_output_lr", "=", "crnn", "(", "crnn_input_lr", ")", "\n", "_", ",", "preds_lr", "=", "crnn_output_lr", ".", "max", "(", "2", ")", "\n", "preds_lr", "=", "preds_lr", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "crnn_output_lr", ".", "size", "(", "0", ")", "]", "*", "val_batch_size", ")", "\n", "pred_str_lr", "=", "self", ".", "converter_crnn", ".", "decode", "(", "preds_lr", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "", "print", "(", "pred_str_lr", ",", "'===>'", ",", "pred_str_sr", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "sum_images", "=", "len", "(", "os", ".", "listdir", "(", "self", ".", "args", ".", "demo_dir", ")", ")", "\n", "time_end", "=", "time", ".", "time", "(", ")", "\n", "fps", "=", "sum_images", "/", "(", "time_end", "-", "time_begin", ")", "\n", "print", "(", "'fps='", ",", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.t_split": [[14, 24], ["i.split", "t.split", "list1.append"], "function", ["None"], ["def", "t_split", "(", "txt", ")", ":", "\n", "    ", "list1", "=", "[", "]", "\n", "for", "i", "in", "txt", ":", "\n", "        ", "c", "=", "i", ".", "split", "(", "' '", ")", "\n", "for", "t", "in", "c", ":", "\n", "            ", "tt", "=", "t", ".", "split", "(", "'\\n'", ")", "\n", "for", "ttt", "in", "tt", ":", "\n", "                ", "if", "ttt", "!=", "''", ":", "\n", "                    ", "list1", ".", "append", "(", "ttt", ")", "\n", "", "", "", "", "return", "list1", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.gt_box": [[26, 35], ["range", "numpy.zeros", "range", "list_bbox.append"], "function", ["None"], ["", "def", "gt_box", "(", "contours", ")", ":", "\n", "    ", "list_bbox", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "contours", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "quad_points", "=", "numpy", ".", "zeros", "(", "(", "4", ",", "1", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "            ", "quad_points", "[", "k", "]", "[", "0", "]", "[", "0", "]", "=", "contours", "[", "0", "]", "[", "k", "]", "[", "j", "]", "\n", "quad_points", "[", "k", "]", "[", "0", "]", "[", "1", "]", "=", "contours", "[", "1", "]", "[", "k", "]", "[", "j", "]", "\n", "", "list_bbox", ".", "append", "(", "quad_points", ")", "# quad_points.astype(numpy.int32)", "\n", "", "return", "list_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.crop_rect": [[37, 55], ["range", "len", "list_bbox[].reshape", "numpy.transpose", "math.floor", "math.ceil", "math.floor", "math.ceil", "numpy.zeros", "list_rect.append", "temp1[].min", "temp1[].max", "temp1[].min", "temp1[].max"], "function", ["None"], ["", "def", "crop_rect", "(", "list_bbox", ")", ":", "\n", "    ", "list_rect", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_bbox", ")", ")", ":", "\n", "        ", "temp", "=", "list_bbox", "[", "i", "]", ".", "reshape", "(", "4", ",", "2", ")", "\n", "temp1", "=", "numpy", ".", "transpose", "(", "temp", ")", "\n", "x_min", "=", "math", ".", "floor", "(", "temp1", "[", "0", "]", ".", "min", "(", ")", ")", "\n", "x_max", "=", "math", ".", "ceil", "(", "temp1", "[", "0", "]", ".", "max", "(", ")", ")", "\n", "y_min", "=", "math", ".", "floor", "(", "temp1", "[", "1", "]", ".", "min", "(", ")", ")", "\n", "y_max", "=", "math", ".", "ceil", "(", "temp1", "[", "1", "]", ".", "max", "(", ")", ")", "\n", "\n", "quad_points", "=", "numpy", ".", "zeros", "(", "(", "4", ",", "1", ",", "2", ")", ",", "dtype", "=", "'int32'", ")", "\n", "quad_points", "[", "0", "]", "[", "0", "]", "=", "[", "x_min", ",", "y_min", "]", "\n", "quad_points", "[", "1", "]", "[", "0", "]", "=", "[", "x_max", ",", "y_min", "]", "\n", "quad_points", "[", "2", "]", "[", "0", "]", "=", "[", "x_max", ",", "y_max", "]", "\n", "quad_points", "[", "3", "]", "[", "0", "]", "=", "[", "x_min", ",", "y_max", "]", "\n", "list_rect", ".", "append", "(", "quad_points", ")", "\n", "", "return", "list_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.main": [[57, 144], ["scipy.io.loadmat", "os.getcwd", "tqdm.tqdm", "print", "range", "crop_800k.t_split", "crop_800k.gt_box", "crop_800k.crop_rect", "os.path.join", "cv2.imread", "range", "len", "contours.reshape.reshape", "len", "max", "min", "max", "min", "range", "os.path.join", "cv2.imwrite", "len", "label.replace.replace", "os.path.exists", "os.mkdir", "os.path.join", "open", "json.dumps", "f1.write", "im_name.split", "str", "str", "str", "str", "[].split", "im_name.split", "im_name.split"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.loadmat", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.t_split", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.gt_box", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.crop_800k.crop_rect", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.imwrite", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "m", "=", "loadmat", "(", "args", ".", "gt_path", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "# symbol = ['~','`','!','@','$','#','%','^','&','*','(',')','-','+','=','_',", "\n", "#           '|',',','[',']','\\\\',':',';','\\'','\"','.','?','<','>','/','{','}']", "\n", "symbol", "=", "string", ".", "punctuation", "\n", "count", "=", "0", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "m", "[", "'imnames'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "\n", "        ", "contours", "=", "m", "[", "'wordBB'", "]", "[", "0", "]", "[", "i", "]", "# note: cotours.shape=(2,4,len(labels))", "\n", "if", "len", "(", "contours", ".", "shape", ")", "==", "2", ":", "\n", "            ", "contours", "=", "contours", ".", "reshape", "(", "2", ",", "4", ",", "1", ")", "\n", "", "im_name", "=", "m", "[", "'imnames'", "]", "[", "0", "]", "[", "i", "]", "[", "0", "]", "\n", "txt", "=", "m", "[", "'txt'", "]", "[", "0", "]", "[", "i", "]", "\n", "\n", "labels", "=", "t_split", "(", "txt", ")", "\n", "\n", "BBox", "=", "gt_box", "(", "contours", ")", "# the list of groundtruth boundingboxs,quadrilateral shape", "\n", "RectBox", "=", "crop_rect", "(", "BBox", ")", "# the list of minimum circumscribed rectangle of the BBOXs", "\n", "count", "+=", "contours", ".", "shape", "[", "2", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "syntext_path", ",", "im_name", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "x_min", "=", "max", "(", "RectBox", "[", "j", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "0", ")", "\n", "x_max", "=", "min", "(", "RectBox", "[", "j", "]", "[", "1", "]", "[", "0", "]", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", ")", "\n", "y_min", "=", "max", "(", "RectBox", "[", "j", "]", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "0", ")", "\n", "y_max", "=", "min", "(", "RectBox", "[", "j", "]", "[", "2", "]", "[", "0", "]", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", "\n", "# these 4 lines are used to ensure the box does not stretch out of the image", "\n", "\n", "im1", "=", "im", "[", "y_min", ":", "y_max", ",", "x_min", ":", "x_max", "]", "\n", "label", "=", "labels", "[", "j", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "symbol", ")", ")", ":", "\n", "                ", "label", "=", "label", ".", "replace", "(", "symbol", "[", "idx", "]", ",", "''", ")", "\n", "\n", "", "new_name", "=", "im_name", ".", "split", "(", "'/'", ")", "[", "0", "]", "+", "'_'", "+", "im_name", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_'", "+", "str", "(", "\n", "j", ")", "+", "'_'", "+", "label", "+", "'.jpg'", "\n", "im_new_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "'syntxt_crop'", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_new_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "im_new_path", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "im_new_path", ",", "new_name", ")", ",", "im1", ")", "\n", "\n", "with", "open", "(", "'./syntxt_crop.odgt'", ",", "'a'", ")", "as", "f1", ":", "\n", "                ", "dict1", "=", "{", "'im_path'", ":", "str", "(", "im_new_path", ")", ",", "'im_name'", ":", "str", "(", "new_name", ")", ",", "'label'", ":", "str", "(", "labels", "[", "j", "]", ")", "}", "\n", "js", "=", "json", ".", "dumps", "(", "dict1", ")", "\n", "f1", ".", "write", "(", "js", "+", "'\\n'", ")", "\n", "\n", "", "", "''' \n        plot the bbox and rectangle of each word\n        \n        BBox1=[]\n        for i in range(len(BBox)):\n            BBox1.append(BBox[i].astype(numpy.int32))\n\n        im1=cv2.polylines(im,RectBox,isClosed=True,color=(255,255,255),thickness=1,lineType=8)\n        im2=cv2.polylines(im,BBox1,isClosed=True,color=(255,255,255),thickness=1,lineType=8)\n        '''", "\n", "\n", "'''\n        wordBoundingBox is based on four points (x1,y1),(x2,y2),(x3,y3),(x4,y4)\n        each picture has n BOXes,which is same as the numbers of the labels.\n        (the labels could be splited from the txt)\n        the labels and the wordBBs are of one-to-one correspondence\n        \n        eg.\n        m['wordBB'][0][12]=\n        array([[[144.11255, 280.32397, 425.85638, 508.72253],                    ## x1  \n                [221.60611, 421.7674 , 489.43262, 580.4785 ],                    ## x2\n                [210.23676, 421.62714, 488.78485, 579.8429 ],                    ## x3      k\n                [132.7432 , 280.18372, 425.20862, 508.0869 ]],                   ## x4      |\n                                                                                            |\n               [[203.68845, 384.30234, 359.90906, 360.9495 ],                    ## y1      |\n                [223.97514, 385.26584, 360.70734, 361.85043],                    ## y2      *\n                [267.40524, 405.8596 , 412.29712, 412.47342],                    ## y3\n                [247.11855, 404.8961 , 411.49884, 411.57248]]], dtype=float32)   ## y4\n                ##BOX1##    ##BOX2##    ##BOX3##    ##BOX4##\n                                j----->\n        m['imnames'][0][12]=\n        array(['8/ballet_106_109.jpg'], dtype='<U20')\n        \n        m['txt'][0][12]=\n        array(['the         ', '[Description', 'V8 V12      '], dtype='<U12')\n        \n        t_split(m['txt'][0][12])=\n        ['the', '[Description', 'V8', 'V12']\n        '''", "\n", "", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset.__init__": [[61, 81], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDataset.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "31", ",", "test", "=", "True", ")", ":", "\n", "        ", "super", "(", "lmdbDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset.__len__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset.__getitem__": [[85, 102], ["dataset.lmdbDataset.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.lmdbDataset.get", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "img", "=", "buf2PIL", "(", "txn", ",", "b'image-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", "IOError", "or", "len", "(", "label", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_real.__init__": [[105, 128], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "print", "sys.exit", "dataset.lmdbDataset_real.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_real", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "print", "(", "\"We have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_real.__len__": [[129, 131], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_real.__getitem__": [[132, 150], ["dataset.lmdbDataset_real.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset_real.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.lmdbDataset_real.get", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "img_HR_key", "=", "b'image_hr-%09d'", "%", "index", "# 128*32", "\n", "img_lr_key", "=", "b'image_lr-%09d'", "%", "index", "# 64*16", "\n", "try", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "img_HR_key", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "img_lr_key", ",", "'RGB'", ")", "\n", "\n", "# print(\"img_HR:\", img_HR.size, img_lr.size())", "\n", "\n", "", "except", "IOError", "or", "len", "(", "word", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15TextSR.__init__": [[153, 186], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "print", "range", "len", "print", "len", "os.path.join", "os.path.join", "os.path.join", "dataset.lmdbDataset_realIC15TextSR.hr_impath_list.append", "dataset.lmdbDataset_realIC15TextSR.lr_impath_list.append", "dataset.lmdbDataset_realIC15TextSR.anno_list.append", "root.split", "str().rjust", "str().rjust", "str().rjust", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realIC15TextSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "hr_image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"HR\"", ")", "\n", "lr_image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"LR\"", ")", "\n", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"ANNOTATION\"", ")", "\n", "\n", "hr_image_list", "=", "os", ".", "listdir", "(", "hr_image_dir", ")", "\n", "\n", "self", ".", "hr_impath_list", "=", "[", "]", "\n", "self", ".", "lr_impath_list", "=", "[", "]", "\n", "self", ".", "anno_list", "=", "[", "]", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "mode", "=", "\"train\"", "if", "root", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "==", "\"TRAIN\"", "else", "\"test\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hr_image_list", ")", ")", ":", "\n", "            ", "hr_impath", "=", "os", ".", "path", ".", "join", "(", "hr_image_dir", ",", "mode", "+", "'-hr-'", "+", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "4", ",", "'0'", ")", "+", "\".pgm\"", ")", "\n", "lr_impath", "=", "os", ".", "path", ".", "join", "(", "lr_image_dir", ",", "mode", "+", "'-lr-'", "+", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "4", ",", "'0'", ")", "+", "\".pgm\"", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "mode", "+", "'-annot-'", "+", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "4", ",", "'0'", ")", "+", "\".txt\"", ")", "\n", "\n", "self", ".", "hr_impath_list", ".", "append", "(", "hr_impath", ")", "\n", "self", ".", "lr_impath_list", ".", "append", "(", "lr_impath", ")", "\n", "self", ".", "anno_list", ".", "append", "(", "anno_path", ")", "\n", "\n", "", "self", ".", "nSamples", "=", "len", "(", "self", ".", "anno_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15TextSR.read_pgm": [[187, 210], ["open", "f.read", "re.search().groups", "numpy.frombuffer().reshape", "ValueError", "re.search", "numpy.frombuffer", "int", "int", "len", "int", "int", "int"], "methods", ["None"], ["", "def", "read_pgm", "(", "self", ",", "filename", ",", "byteorder", "=", "'>'", ")", ":", "\n", "        ", "\"\"\"Return image data from a raw PGM file as numpy array.\n\n        Format specification: http://netpbm.sourceforge.net/doc/pgm.html\n\n        \"\"\"", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "buffer", "=", "f", ".", "read", "(", ")", "\n", "", "try", ":", "\n", "            ", "header", ",", "width", ",", "height", ",", "maxval", "=", "re", ".", "search", "(", "\n", "b\"(^P5\\s(?:\\s*#.*[\\r\\n])*\"", "\n", "b\"(\\d+)\\s(?:\\s*#.*[\\r\\n])*\"", "\n", "b\"(\\d+)\\s(?:\\s*#.*[\\r\\n])*\"", "\n", "b\"(\\d+)\\s(?:\\s*#.*[\\r\\n]\\s)*)\"", ",", "buffer", ")", ".", "groups", "(", ")", "\n", "\n", "return", "np", ".", "frombuffer", "(", "buffer", ",", "\n", "dtype", "=", "'u1'", "if", "int", "(", "maxval", ")", "<", "256", "else", "byteorder", "+", "'u2'", ",", "\n", "count", "=", "int", "(", "width", ")", "*", "int", "(", "height", ")", ",", "\n", "offset", "=", "len", "(", "header", ")", "\n", ")", ".", "reshape", "(", "(", "int", "(", "height", ")", ",", "int", "(", "width", ")", ")", ")", "\n", "\n", "", "except", "AttributeError", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not a raw PGM file: '%s'\"", "%", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15TextSR.__len__": [[212, 214], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15TextSR.__getitem__": [[215, 239], ["PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.isfile", "print", "dataset.lmdbDataset_realIC15TextSR.read_pgm", "dataset.lmdbDataset_realIC15TextSR.read_pgm", "[].replace().strip", "utils.str_filt", "cv2.cvtColor", "cv2.cvtColor", "print", "[].replace", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15TextSR.read_pgm", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15TextSR.read_pgm", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "# assert index <= len(self), 'index range error'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "hr_impath_list", "[", "idx", "]", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "self", ".", "hr_impath_list", "[", "idx", "]", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "img_HR_np", "=", "self", ".", "read_pgm", "(", "self", ".", "hr_impath_list", "[", "idx", "]", ",", "byteorder", "=", "'<'", ")", "\n", "img_lr_np", "=", "self", ".", "read_pgm", "(", "self", ".", "lr_impath_list", "[", "idx", "]", ",", "byteorder", "=", "'<'", ")", "\n", "\n", "label_str", "=", "open", "(", "self", ".", "anno_list", "[", "idx", "]", ",", "\"r\"", ")", ".", "readlines", "(", ")", "[", "0", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "label_str", "=", "str_filt", "(", "label_str", ",", "self", ".", "voc_type", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "self", ".", "hr_impath_list", "[", "idx", "]", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "\n", "", "img_HR", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "img_HR_np", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", ")", "\n", "img_lr", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "img_lr_np", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realSVT.__init__": [[243, 269], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realSVT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "\n", "# anno_dir = os.path.join(root, \"ANNOTATION\")", "\n", "\n", "split", "=", "(", "\"svt_\"", "+", "\"train\"", ")", "if", "not", "test", "else", "(", "\"svt_\"", "+", "\"test\"", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"IMG\"", ")", "\n", "self", ".", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"label\"", ")", "\n", "# self.impath_list = os.listdir(image_dir)", "\n", "self", ".", "anno_list", "=", "os", ".", "listdir", "(", "self", ".", "anno_dir", ")", "\n", "\n", "# self.impath_list = []", "\n", "# self.anno_list = []", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "# mode = \"train\" if root.split(\"/\")[-2] == \"TRAIN\" else \"test\"", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "anno_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realSVT.__len__": [[271, 273], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realSVT.__getitem__": [[274, 296], ["os.path.join", "os.path.join", "utils.str_filt", "os.path.isfile", "print", "[].replace", "PIL.Image.open", "print", "anno.split", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "anno", "=", "self", ".", "anno_list", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "anno", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".jpg\"", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_dir", ",", "anno", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "word", "=", "open", "(", "anno_path", ",", "\"r\"", ")", ".", "readlines", "(", ")", "[", "0", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "img_HR", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img_lr", "=", "img_HR", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realForTest.__init__": [[299, 325], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.listdir", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realForTest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "\n", "# anno_dir = os.path.join(root, \"ANNOTATION\")", "\n", "\n", "# split = (\"svt_\" + \"train\") if not test else (\"svt_\" + \"test\")", "\n", "dataset_dir", "=", "root", "#os.path.join(root, split)", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ")", "\n", "# self.anno_dir = os.path.join(dataset_dir, \"label\")", "\n", "# self.impath_list = os.listdir(image_dir)", "\n", "# self.anno_list = os.listdir(self.anno_dir)", "\n", "\n", "self", ".", "impath_list", "=", "os", ".", "listdir", "(", "self", ".", "image_dir", ")", "\n", "# self.anno_list = []", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "# mode = \"train\" if root.split(\"/\")[-2] == \"TRAIN\" else \"test\"", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "impath_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realForTest.__len__": [[327, 329], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realForTest.__getitem__": [[330, 352], ["os.path.join", "utils.str_filt", "os.path.isfile", "print", "PIL.Image.open", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "# anno = self.anno_list[index]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "self", ".", "impath_list", "[", "idx", "]", ")", "\n", "# anno_path = os.path.join(self.anno_dir, anno)", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "word", "=", "\"gogogo\"", "\n", "img_HR", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img_lr", "=", "img_HR", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "# , image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIIIT.__init__": [[355, 381], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realIIIT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "\n", "# anno_dir = os.path.join(root, \"ANNOTATION\")", "\n", "\n", "split", "=", "(", "\"iiit5k_\"", "+", "\"train\"", ")", "if", "not", "test", "else", "(", "\"iiit5k_\"", "+", "\"test\"", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"IMG\"", ")", "\n", "self", ".", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"label\"", ")", "\n", "# self.impath_list = os.listdir(image_dir)", "\n", "self", ".", "anno_list", "=", "os", ".", "listdir", "(", "self", ".", "anno_dir", ")", "\n", "\n", "# self.impath_list = []", "\n", "# self.anno_list = []", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "# mode = \"train\" if root.split(\"/\")[-2] == \"TRAIN\" else \"test\"", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "anno_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIIIT.__len__": [[383, 385], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIIIT.__getitem__": [[386, 408], ["os.path.join", "os.path.join", "utils.str_filt", "os.path.isfile", "print", "[].replace", "PIL.Image.open", "print", "anno.split", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "anno", "=", "self", ".", "anno_list", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "anno", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".jpg\"", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_dir", ",", "anno", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "word", "=", "open", "(", "anno_path", ",", "\"r\"", ")", ".", "readlines", "(", ")", "[", "0", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "img_HR", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img_lr", "=", "img_HR", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realBadSet.__init__": [[411, 432], ["torch.utils.data.Dataset.__init__", "os.listdir", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realBadSet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "\n", "# anno_dir = os.path.join(root, \"ANNOTATION\")", "\n", "\n", "self", ".", "imlist", "=", "os", ".", "listdir", "(", "root", ")", "\n", "self", ".", "image_dir", "=", "root", "\n", "# self.impath_list = []", "\n", "# self.anno_list = []", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "# mode = \"train\" if root.split(\"/\")[-2] == \"TRAIN\" else \"test\"", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "imlist", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realBadSet.__len__": [[434, 436], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realBadSet.__getitem__": [[437, 459], ["os.path.join", "utils.str_filt", "imfile.split", "os.path.isfile", "print", "PIL.Image.open", "print"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "imfile", "=", "self", ".", "imlist", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "imfile", ")", "\n", "\n", "word", "=", "imfile", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "img_HR", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img_lr", "=", "img_HR", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15.__init__": [[462, 483], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDataset_realIC15.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realIC15", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15.__len__": [[486, 488], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realIC15.__getitem__": [[489, 507], ["dataset.lmdbDataset_realIC15.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset_realIC15.get().decode", "dataset.buf2PIL", "str", "dataset.lmdbDataset_realIC15.get", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "img_key", "=", "b'image-%09d'", "%", "index", "# 128*32", "\n", "# img_lr_key = b'image_lr-%09d' % index  # 64*16", "\n", "try", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "img_key", ",", "'RGB'", ")", "\n", "\n", "img_lr", "=", "img_HR", "\n", "# print(\"img:\", img_HR.size, word)", "\n", "# img_lr = buf2PIL(txn, img_lr_key, 'RGB')", "\n", "", "except", "IOError", "or", "len", "(", "word", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "str", "(", "img_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realCOCOText.__init__": [[510, 533], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "open().readlines", "len", "open"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realCOCOText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "gt_file", "=", "\"val_words_gt.txt\"", "\n", "im_dir", "=", "\"val_words\"", "\n", "", "else", ":", "\n", "            ", "gt_file", "=", "\"train_words_gt.txt\"", "\n", "im_dir", "=", "\"train_words\"", "\n", "\n", "", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "im_dir", ")", "\n", "self", ".", "gt_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "gt_file", ")", "\n", "\n", "self", ".", "gtlist", "=", "open", "(", "self", ".", "gt_file", ",", "\"r\"", ")", ".", "readlines", "(", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "self", ".", "gtlist", "=", "self", ".", "gtlist", "[", ":", "3000", "]", "\n", "\n", "", "self", ".", "nSamples", "=", "len", "(", "self", ".", "gtlist", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realCOCOText.__len__": [[534, 536], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_realCOCOText.__getitem__": [[537, 556], ["dataset.lmdbDataset_realCOCOText.gtlist[].replace", "os.path.join", "utils.str_filt", "len", "len", "dataset.lmdbDataset_realCOCOText.split", "PIL.Image.open", "dataset.lmdbDataset_realCOCOText.split", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "# index += 1", "\n", "\n", "gt_anno", "=", "self", ".", "gtlist", "[", "index", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "if", "len", "(", "gt_anno", ".", "split", "(", "\",\"", ")", ")", "<", "2", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "img_id", ",", "label_str", "=", "gt_anno", ".", "split", "(", "\",\"", ")", "[", ":", "2", "]", "\n", "impath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "img_id", "+", "\".jpg\"", ")", "\n", "\n", "try", ":", "\n", "            ", "img_HR", "=", "Image", ".", "open", "(", "impath", ")", "\n", "img_lr", "=", "img_HR", "\n", "# print(\"img:\", img_HR.size, word)", "\n", "# img_lr = buf2PIL(txn, img_lr_key, 'RGB')", "\n", "", "except", "IOError", "or", "len", "(", "label_str", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "label_str", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "impath", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithW2V_real.__init__": [[559, 586], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDatasetWithW2V_real.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", "=", "None", ",", "\n", "voc_type", "=", "'upper'", ",", "\n", "max_len", "=", "100", ",", "\n", "test", "=", "False", ",", "\n", "w2v_lexicons", "=", "\"cc.en.300.bin\"", "\n", ")", ":", "\n", "        ", "super", "(", "lmdbDatasetWithW2V_real", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithW2V_real.__len__": [[589, 591], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithW2V_real.__getitem__": [[592, 612], ["dataset.lmdbDatasetWithW2V_real.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDatasetWithW2V_real.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.lmdbDatasetWithW2V_real.get", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "img_HR_key", "=", "b'image_hr-%09d'", "%", "index", "# 128*32", "\n", "img_lr_key", "=", "b'image_lr-%09d'", "%", "index", "# 64*16", "\n", "try", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "img_HR_key", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "img_lr_key", ",", "'RGB'", ")", "\n", "", "except", "IOError", "or", "len", "(", "word", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "# print(\"HR, LR:\", img_HR.size, img_lr.size)", "\n", "\n", "w2v", "=", "None", "# self.w2v_lexicon.get_numpy_vector(label_str.lower())", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "w2v", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.resizeNormalize.__init__": [[616, 621], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mask", "=", "False", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.resizeNormalize.__call__": [[622, 633], ["img.resize.resize.resize", "dataset.resizeNormalize.toTensor", "img.resize.resize.convert", "numpy.array().mean", "dataset.resizeNormalize.point", "dataset.resizeNormalize.toTensor", "torch.cat", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img_tensor", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "mask", "=", "self", ".", "toTensor", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", "\n", "\n", "", "return", "img_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.Normalize.__init__": [[636, 641], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mask", "=", "False", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.Normalize.__call__": [[642, 653], ["dataset.Normalize.toTensor", "img.convert", "numpy.array().mean", "dataset.Normalize.point", "dataset.Normalize.toTensor", "torch.cat", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "# img = img.resize(self.size, self.interpolation)", "\n", "        ", "img_tensor", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "mask", "=", "self", ".", "toTensor", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", "\n", "\n", "", "return", "img_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.resizeNormalizeRandomCrop.__init__": [[657, 662], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mask", "=", "False", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.resizeNormalizeRandomCrop.__call__": [[663, 687], ["img.resize.resize.resize", "dataset.resizeNormalizeRandomCrop.toTensor", "numpy.array", "PIL.Image.fromarray", "img.resize.resize.resize", "dataset.resizeNormalizeRandomCrop.toTensor", "img.resize.resize.convert", "numpy.array().mean", "dataset.resizeNormalizeRandomCrop.point", "dataset.resizeNormalizeRandomCrop.toTensor", "torch.cat", "numpy.array", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "interval", "=", "None", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "w", "<", "32", "or", "not", "interval", "is", "None", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img_tensor", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "np_img", "=", "np", ".", "array", "(", "img", ")", "\n", "h", ",", "w", "=", "np_img", ".", "shape", "[", ":", "2", "]", "\n", "np_img_crop", "=", "np_img", "[", ":", ",", "int", "(", "w", "*", "interval", "[", "0", "]", ")", ":", "int", "(", "w", "*", "interval", "[", "1", "]", ")", "]", "\n", "# print(\"size:\", self.size, np_img_crop.shape, np_img.shape, interval)", "\n", "img", "=", "Image", ".", "fromarray", "(", "np_img_crop", ")", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img_tensor", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "mask", ":", "\n", "            ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "mask", "=", "self", ".", "toTensor", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", "\n", "\n", "", "return", "img_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.resizeNormalizeKeepRatio.__init__": [[690, 695], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mask", "=", "False", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.resizeNormalizeKeepRatio.__call__": [[696, 764], ["int", "float", "img.resize.resize.resize", "dataset.resizeNormalizeKeepRatio.toTensor().float", "img.resize.resize.resize", "numpy.array", "int", "numpy.zeros", "PIL.Image.fromarray", "dataset.resizeNormalizeKeepRatio.toTensor().float", "img.resize.resize.convert", "numpy.array().mean", "cv2.resize.point", "torch.tensor().float", "PIL.Image.fromarray.astype", "numpy.ones", "dataset.resizeNormalizeKeepRatio.toTensor", "torch.cat().float", "numpy.array", "cv2.resize", "int", "numpy.zeros", "dataset.resizeNormalizeKeepRatio.copy", "numpy.ones", "dataset.resizeNormalizeKeepRatio.toTensor().float", "torch.cat", "dataset.resizeNormalizeKeepRatio.toTensor", "dataset.resizeNormalizeKeepRatio.toTensor", "len", "numpy.array", "torch.tensor", "torch.cat", "dataset.resizeNormalizeKeepRatio.toTensor", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label_str", ")", ":", "\n", "        ", "o_w", ",", "o_h", "=", "img", ".", "size", "\n", "\n", "ratio", "=", "o_w", "/", "float", "(", "o_h", ")", "\n", "re_h", "=", "self", ".", "size", "[", "1", "]", "\n", "re_w", "=", "int", "(", "re_h", "*", "ratio", ")", "\n", "if", "re_w", ">", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img_tensor", "=", "self", ".", "toTensor", "(", "img", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "re_w", ",", "re_h", ")", ",", "self", ".", "interpolation", ")", "\n", "img_np", "=", "np", ".", "array", "(", "img", ")", "\n", "# if len(label_str) > 4:", "\n", "#     print(\"img_np:\", img_np.shape)", "\n", "\n", "shift_w", "=", "int", "(", "(", "self", ".", "size", "[", "0", "]", "-", "img_np", ".", "shape", "[", "1", "]", ")", "/", "2", ")", "\n", "re_img", "=", "np", ".", "zeros", "(", "(", "self", ".", "size", "[", "1", "]", ",", "self", ".", "size", "[", "0", "]", ",", "img_np", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "re_img", "[", ":", ",", "shift_w", ":", "img_np", ".", "shape", "[", "1", "]", "+", "shift_w", "]", "=", "img_np", "\n", "\n", "re_img", "=", "Image", ".", "fromarray", "(", "re_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "img_tensor", "=", "self", ".", "toTensor", "(", "re_img", ")", ".", "float", "(", ")", "\n", "\n", "if", "o_h", "/", "o_w", "<", "0.5", "and", "len", "(", "label_str", ")", ">", "4", ":", "\n", "# cv2.imwrite(\"mask_h_\" + label_str + \".jpg\", re_mask.astype(np.uint8))", "\n", "# cv2.imwrite(\"img_h_\" + label_str + \".jpg\", np.array(re_img))", "\n", "# print(\"img_np_h:\", o_h, o_w, img_np.shape, label_str)", "\n", "                ", "pass", "\n", "\n", "", "", "if", "self", ".", "mask", ":", "\n", "            ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "if", "re_w", ">", "self", ".", "size", "[", "0", "]", ":", "\n", "# img = img.resize(self.size, self.interpolation)", "\n", "\n", "                ", "re_mask_cpy", "=", "np", ".", "ones", "(", "(", "mask", ".", "size", "[", "1", "]", ",", "mask", ".", "size", "[", "0", "]", ")", ")", "\n", "\n", "mask", "=", "self", ".", "toTensor", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "re_w", ",", "re_h", ")", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "shift_w", "=", "int", "(", "(", "self", ".", "size", "[", "0", "]", "-", "mask", ".", "shape", "[", "1", "]", ")", "/", "2", ")", "\n", "\n", "# print(\"resize mask:\", mask.shape)", "\n", "\n", "re_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "size", "[", "1", "]", ",", "self", ".", "size", "[", "0", "]", ")", ")", "\n", "\n", "re_mask_cpy", "=", "re_mask", ".", "copy", "(", ")", "\n", "re_mask_cpy", "[", ":", ",", "shift_w", ":", "mask", ".", "shape", "[", "1", "]", "+", "shift_w", "]", "=", "np", ".", "ones", "(", "mask", ".", "shape", ")", "\n", "\n", "re_mask", "[", ":", ",", "shift_w", ":", "mask", ".", "shape", "[", "1", "]", "+", "shift_w", "]", "=", "mask", "\n", "'''\n                if o_h / o_w > 2 and len(label_str) > 4:\n                    cv2.imwrite(\"mask_\" + label_str + \".jpg\", re_mask.astype(np.uint8))\n                    cv2.imwrite(\"img_\" + label_str + \".jpg\", re_img.astype(np.uint8))\n                    print(\"img_np:\", o_h, o_w, img_np.shape, label_str)\n\n                if o_h / o_w < 0.5 and len(label_str) > 4:\n                    cv2.imwrite(\"mask_h_\" + label_str + \".jpg\", re_mask.astype(np.uint8))\n                    cv2.imwrite(\"img_h_\" + label_str + \".jpg\", re_img.astype(np.uint8))\n                    print(\"img_np_h:\", o_h, o_w, img_np.shape, label_str)\n                '''", "\n", "re_mask", "=", "self", ".", "toTensor", "(", "re_mask", ")", ".", "float", "(", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "re_mask", ")", ",", "0", ")", "\n", "\n", "", "", "return", "img_tensor", ",", "torch", ".", "tensor", "(", "cv2", ".", "resize", "(", "re_mask_cpy", ",", "(", "self", ".", "size", "[", "0", "]", "*", "2", ",", "self", ".", "size", "[", "1", "]", "*", "2", ")", ",", "cv2", ".", "INTER_NEAREST", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_mix.__init__": [[767, 787], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDataset_mix.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_mix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_mix.__len__": [[788, 790], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDataset_mix.__getitem__": [[791, 814], ["dataset.lmdbDataset_mix.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset_mix.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.buf2PIL", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "dataset.buf2PIL", "dataset.lmdbDataset_mix.get", "dataset.buf2PIL"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "if", "self", ".", "test", ":", "\n", "            ", "try", ":", "\n", "                ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "b'image_lr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", ":", "\n", "                ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "b'image-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "img_lr", "=", "img_HR", "\n", "\n", "", "", "else", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "                ", "img_lr", "=", "buf2PIL", "(", "txn", ",", "b'image_lr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "else", ":", "\n", "                ", "img_lr", "=", "img_HR", "\n", "\n", "", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithMask_real.__init__": [[817, 837], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDatasetWithMask_real.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDatasetWithMask_real", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithMask_real.__len__": [[838, 840], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithMask_real.get_mask": [[841, 853], ["numpy.array", "cv2.cvtColor", "numpy.ones", "cv2.Canny", "cv2.dilate", "cv2.GaussianBlur"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "img_hr", "=", "np", ".", "array", "(", "image", ")", "\n", "img_hr_gray", "=", "cv2", ".", "cvtColor", "(", "img_hr", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "hr_canny", "=", "cv2", ".", "Canny", "(", "img_hr_gray", ",", "20", ",", "150", ")", "\n", "hr_canny", "=", "cv2", ".", "dilate", "(", "hr_canny", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "hr_canny", "=", "cv2", ".", "GaussianBlur", "(", "hr_canny", ",", "(", "5", ",", "5", ")", ",", "1", ")", "\n", "weighted_mask", "=", "0.4", "+", "(", "hr_canny", "/", "255.0", ")", "*", "0.5", "\n", "\n", "return", "weighted_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.lmdbDatasetWithMask_real.__getitem__": [[854, 872], ["dataset.lmdbDatasetWithMask_real.env.begin", "str", "utils.str_filt", "dataset.lmdbDatasetWithMask_real.get_mask", "len", "dataset.lmdbDatasetWithMask_real.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.lmdbDatasetWithMask_real.get", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.str_filt", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_realWTLAMask.get_mask", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "img_HR_key", "=", "b'image_hr-%09d'", "%", "index", "# 128*32", "\n", "img_lr_key", "=", "b'image_lr-%09d'", "%", "index", "# 64*16", "\n", "try", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "img_HR_key", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "img_lr_key", ",", "'RGB'", ")", "\n", "", "except", "IOError", "or", "len", "(", "word", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "weighted_mask", "=", "self", ".", "get_mask", "(", "img_HR", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "weighted_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.randomSequentialSampler.__init__": [[877, 880], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.randomSequentialSampler.__iter__": [[881, 896], ["torch.LongTensor().fill_", "range", "iter", "len", "len", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "torch.LongTensor", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "n_batch", "=", "len", "(", "self", ")", "//", "self", ".", "batch_size", "\n", "tail", "=", "len", "(", "self", ")", "%", "self", ".", "batch_size", "\n", "index", "=", "torch", ".", "LongTensor", "(", "len", "(", "self", ")", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "n_batch", ")", ":", "\n", "            ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "batch_index", "=", "random_start", "+", "torch", ".", "arange", "(", "0", ",", "self", ".", "batch_size", ")", "\n", "index", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "=", "batch_index", "\n", "# deal with tail", "\n", "", "if", "tail", ":", "\n", "            ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "tail_index", "=", "random_start", "+", "torch", ".", "arange", "(", "0", ",", "tail", ")", "\n", "index", "[", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", "=", "tail_index", "\n", "\n", "", "return", "iter", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.randomSequentialSampler.__len__": [[897, 899], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn.__init__": [[902, 933], ["len", "dataset.resizeNormalize", "dataset.resizeNormalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "64", ",", "\n", "imgW", "=", "256", ",", "\n", "down_sample_scale", "=", "4", ",", "\n", "keep_ratio", "=", "False", ",", "\n", "min_ratio", "=", "1", ",", "\n", "mask", "=", "False", ",", "\n", "alphabet", "=", "53", ",", "\n", "train", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "self", ".", "down_sample_scale", "=", "down_sample_scale", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "alphabet", "=", "\"0123456789abcdefghijklmnopqrstuvwxyz\"", "\n", "self", ".", "d2a", "=", "\"-\"", "+", "self", ".", "alphabet", "\n", "self", ".", "alsize", "=", "len", "(", "self", ".", "d2a", ")", "\n", "self", ".", "a2d", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "ch", "in", "self", ".", "d2a", ":", "\n", "            ", "self", ".", "a2d", "[", "ch", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "\n", "self", ".", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "self", ".", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn.degradation": [[934, 951], ["numpy.array", "utils.utils_sisr.srmd_degradation", "PIL.Image.fromarray", "numpy.random.seed", "numpy.random.normal", "utils.utils_sisr.srmd_degradation.astype"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.srmd_degradation"], ["", "def", "degradation", "(", "self", ",", "img_L", ")", ":", "\n", "# degradation process, blur + bicubic downsampling + Gaussian noise", "\n", "# if need_degradation:", "\n", "# img_L = util.modcrop(img_L, sf)", "\n", "        ", "img_L", "=", "np", ".", "array", "(", "img_L", ")", "\n", "# print(\"img_L_before:\", img_L.shape, np.unique(img_L))", "\n", "img_L", "=", "sr", ".", "srmd_degradation", "(", "img_L", ",", "kernel", ")", "\n", "\n", "noise_level_img", "=", "0.", "\n", "if", "not", "self", ".", "train", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", "=", "0", ")", "# for reproducibility", "\n", "# print(\"unique:\", np.unique(img_L))", "\n", "", "img_L", "=", "img_L", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_level_img", ",", "img_L", ".", "shape", ")", "\n", "\n", "# print(\"img_L_after:\", img_L_beore.shape, img_L.shape, np.unique(img_L))", "\n", "\n", "return", "Image", ".", "fromarray", "(", "img_L", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn.__call__": [[952, 993], ["zip", "torch.cat", "torch.cat", "dataset.alignCollate_syn.transform", "image.resize", "dataset.alignCollate_syn.transform2", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images", ",", "_", ",", "label_strs", ",", "identity", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "# [self.degradation(image) for image in images]", "\n", "# images_hr = images", "\n", "'''\n        images_lr = [image.resize(\n            (image.size[0] // self.down_sample_scale, image.size[1] // self.down_sample_scale),\n            Image.BICUBIC) for image in images]\n\n        if self.train:\n            if random.random() > 1.5:\n                images_hr = [image.resize(\n                (image.size[0]//self.down_sample_scale, image.size[1]//self.down_sample_scale),\n                Image.BICUBIC) for image in images]\n            else:\n                images_hr = images\n        else:\n            images_hr = images\n            #[image.resize(\n            #    (image.size[0] // self.down_sample_scale, image.size[1] // self.down_sample_scale),\n            #    Image.BICUBIC) for image in images]\n        '''", "\n", "# images_hr = [self.degradation(image) for image in images]", "\n", "images_lr", "=", "images_hr", "=", "images", "\n", "# images_lr = [image.resize(", "\n", "#    (image.size[0] // 2, image.size[1] // 2),", "\n", "#    Image.BICUBIC) for image in images]", "\n", "\n", "images_hr", "=", "[", "self", ".", "transform", "(", "image", ")", "for", "image", "in", "images_hr", "]", "\n", "images_hr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_hr", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "image", ".", "resize", "(", "\n", "(", "image", ".", "size", "[", "0", "]", "//", "self", ".", "down_sample_scale", ",", "image", ".", "size", "[", "1", "]", "//", "self", ".", "down_sample_scale", ")", ",", "\n", "Image", ".", "BICUBIC", ")", "for", "image", "in", "images", "]", "\n", "\n", "# images_lr = [self.degradation(image) for image in images]", "\n", "images_lr", "=", "[", "self", ".", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "return", "images_hr", ",", "images_lr", ",", "label_strs", ",", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn_random_reso.__init__": [[997, 1028], ["len", "dataset.Normalize", "dataset.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "64", ",", "\n", "imgW", "=", "256", ",", "\n", "down_sample_scale", "=", "4", ",", "\n", "keep_ratio", "=", "False", ",", "\n", "min_ratio", "=", "1", ",", "\n", "mask", "=", "False", ",", "\n", "alphabet", "=", "53", ",", "\n", "train", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "self", ".", "down_sample_scale", "=", "down_sample_scale", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "alphabet", "=", "\"0123456789abcdefghijklmnopqrstuvwxyz\"", "\n", "self", ".", "d2a", "=", "\"-\"", "+", "self", ".", "alphabet", "\n", "self", ".", "alsize", "=", "len", "(", "self", ".", "d2a", ")", "\n", "self", ".", "a2d", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "ch", "in", "self", ".", "d2a", ":", "\n", "            ", "self", ".", "a2d", "[", "ch", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "\n", "self", ".", "transform", "=", "Normalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "self", ".", "transform2", "=", "Normalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn_random_reso.degradation": [[1029, 1046], ["numpy.array", "utils.utils_sisr.srmd_degradation", "PIL.Image.fromarray", "numpy.random.seed", "numpy.random.normal", "utils.utils_sisr.srmd_degradation.astype"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.srmd_degradation"], ["", "def", "degradation", "(", "self", ",", "img_L", ")", ":", "\n", "# degradation process, blur + bicubic downsampling + Gaussian noise", "\n", "# if need_degradation:", "\n", "# img_L = util.modcrop(img_L, sf)", "\n", "        ", "img_L", "=", "np", ".", "array", "(", "img_L", ")", "\n", "# print(\"img_L_before:\", img_L.shape, np.unique(img_L))", "\n", "img_L", "=", "sr", ".", "srmd_degradation", "(", "img_L", ",", "kernel", ")", "\n", "\n", "noise_level_img", "=", "0.", "\n", "if", "not", "self", ".", "train", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", "=", "0", ")", "# for reproducibility", "\n", "# print(\"unique:\", np.unique(img_L))", "\n", "", "img_L", "=", "img_L", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_level_img", ",", "img_L", ".", "shape", ")", "\n", "\n", "# print(\"img_L_after:\", img_L_beore.shape, img_L.shape, np.unique(img_L))", "\n", "\n", "return", "Image", ".", "fromarray", "(", "img_L", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn_random_reso.__call__": [[1047, 1090], ["zip", "img.resize", "dataset.alignCollate_syn_random_reso.transform().unsqueeze", "dataset.alignCollate_syn_random_reso.transform2().unsqueeze", "dataset.alignCollate_syn_random_reso.transform", "dataset.alignCollate_syn_random_reso.transform2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images", ",", "_", ",", "label_strs", ",", "identity", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "# [self.degradation(image) for image in images]", "\n", "# images_hr = images", "\n", "'''\n        images_lr = [image.resize(\n            (image.size[0] // self.down_sample_scale, image.size[1] // self.down_sample_scale),\n            Image.BICUBIC) for image in images]\n\n        if self.train:\n            if random.random() > 1.5:\n                images_hr = [image.resize(\n                (image.size[0]//self.down_sample_scale, image.size[1]//self.down_sample_scale),\n                Image.BICUBIC) for image in images]\n            else:\n                images_hr = images\n        else:\n            images_hr = images\n            #[image.resize(\n            #    (image.size[0] // self.down_sample_scale, image.size[1] // self.down_sample_scale),\n            #    Image.BICUBIC) for image in images]\n        '''", "\n", "# images_hr = [self.degradation(image) for image in images]", "\n", "images_lr", "=", "images_hr", "=", "images", "\n", "# images_lr = [image.resize(", "\n", "#    (image.size[0] // 2, image.size[1] // 2),", "\n", "#    Image.BICUBIC) for image in images]", "\n", "\n", "images_hr", "=", "[", "img", ".", "resize", "(", "(", "img", ".", "size", "[", "0", "]", "*", "2", ",", "img", ".", "size", "[", "1", "]", "*", "2", ")", ",", "Image", ".", "BICUBIC", ")", "for", "img", "in", "images_hr", "]", "\n", "images_hr", "=", "[", "self", ".", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "for", "image", "in", "images_hr", "]", "\n", "\n", "# images_hr = torch.cat([t.unsqueeze(0) for t in images_hr], 0)", "\n", "\n", "# images_lr = [image.resize(", "\n", "# (image.size[0]//self.down_sample_scale, image.size[1]//self.down_sample_scale),", "\n", "# Image.BICUBIC) for image in images]", "\n", "\n", "# images_lr = [self.degradation(image) for image in images]", "\n", "images_lr", "=", "[", "self", ".", "transform2", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "for", "image", "in", "images_lr", "]", "\n", "# images_lr = torch.cat([t.unsqueeze(0) for t in images_lr], 0)", "\n", "\n", "return", "images_hr", ",", "images_lr", ",", "label_strs", ",", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn_withcrop.__init__": [[1093, 1123], ["len", "dataset.resizeNormalizeRandomCrop", "dataset.resizeNormalizeRandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "64", ",", "\n", "imgW", "=", "256", ",", "\n", "down_sample_scale", "=", "4", ",", "\n", "keep_ratio", "=", "False", ",", "\n", "min_ratio", "=", "1", ",", "\n", "mask", "=", "False", ",", "\n", "alphabet", "=", "53", ",", "\n", "train", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "self", ".", "down_sample_scale", "=", "down_sample_scale", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "alphabet", "=", "\"0123456789abcdefghijklmnopqrstuvwxyz\"", "\n", "self", ".", "d2a", "=", "\"-\"", "+", "self", ".", "alphabet", "\n", "self", ".", "alsize", "=", "len", "(", "self", ".", "d2a", ")", "\n", "self", ".", "a2d", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "ch", "in", "self", ".", "d2a", ":", "\n", "            ", "self", ".", "a2d", "[", "ch", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "\n", "self", ".", "transform", "=", "resizeNormalizeRandomCrop", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "self", ".", "transform2", "=", "resizeNormalizeRandomCrop", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "\n", "self", ".", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_syn_withcrop.__call__": [[1124, 1136], ["zip", "torch.cat", "torch.cat", "dataset.alignCollate_syn_withcrop.transform", "image.resize", "dataset.alignCollate_syn_withcrop.transform2", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "images_hr", "=", "[", "self", ".", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "images_hr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_hr", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "image", ".", "resize", "(", "(", "image", ".", "size", "[", "0", "]", "//", "self", ".", "down_sample_scale", ",", "image", ".", "size", "[", "1", "]", "//", "self", ".", "down_sample_scale", ")", ",", "Image", ".", "BICUBIC", ")", "for", "image", "in", "images", "]", "\n", "images_lr", "=", "[", "self", ".", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "\n", "return", "images_hr", ",", "images_lr", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_real.__call__": [[1140, 1153], ["zip", "dataset.resizeNormalize", "dataset.resizeNormalize", "torch.cat", "torch.cat", "resizeNormalize.", "resizeNormalize.", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", ",", "_", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "images_HR", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images_HR", "]", "\n", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_HR", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", ",", "_", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_realWTL.__call__": [[1156, 1224], ["zip", "torch.cat", "torch.cat", "torch.zeros", "range", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze().float().permute", "dataset.alignCollate_realWTL.transform", "dataset.alignCollate_realWTL.transform2", "word.lower.lower.lower", "len", "[].long", "torch.zeros", "len", "t.unsqueeze", "t.unsqueeze", "len", "len", "label_batches.append", "label_batches.append", "len", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze().float", "torch.zeros.scatter_", "len", "len", "len", "torch.tensor", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "# transform = resizeNormalize((imgW, imgH), self.mask)", "\n", "# transform2 = resizeNormalize((imgW // self.down_sample_scale, imgH // self.down_sample_scale), self.mask)", "\n", "images_HR", "=", "[", "self", ".", "transform", "(", "image", ")", "for", "image", "in", "images_HR", "]", "\n", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_HR", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "self", ".", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "max_len", "=", "0", "\n", "\n", "label_batches", "=", "[", "]", "\n", "\n", "for", "word", "in", "label_strs", ":", "\n", "            ", "word", "=", "word", ".", "lower", "(", ")", "\n", "# Complement", "\n", "\n", "if", "len", "(", "word", ")", ">", "4", ":", "\n", "                ", "word", "=", "[", "ch", "for", "ch", "in", "word", "]", "\n", "word", "[", "2", "]", "=", "\"e\"", "\n", "word", "=", "\"\"", ".", "join", "(", "word", ")", "\n", "\n", "", "if", "len", "(", "word", ")", "<=", "1", ":", "\n", "                ", "pass", "\n", "", "elif", "len", "(", "word", ")", "<", "26", "and", "len", "(", "word", ")", ">", "1", ":", "\n", "                ", "inter_com", "=", "26", "-", "len", "(", "word", ")", "\n", "# padding = int(inter_com / (len(word) - 1))", "\n", "# new_word = word[0]", "\n", "# for i in range(len(word) - 1):", "\n", "#    new_word += \"-\" * padding + word[i+1]", "\n", "\n", "# word = new_word", "\n", "pass", "\n", "", "else", ":", "\n", "                ", "word", "=", "word", "[", ":", "26", "]", "\n", "\n", "", "label_list", "=", "[", "self", ".", "a2d", "[", "ch", "]", "for", "ch", "in", "word", "if", "ch", "in", "self", ".", "a2d", "]", "\n", "\n", "# shifting:", "\n", "# if len(label_list) > 2:", "\n", "#     if label_list[-1] > 0 and label_list[-1] < self.alsize - 1:", "\n", "#     label_list[-1] = 0", "\n", "\n", "word_len", "=", "len", "(", "word", ")", "\n", "if", "word_len", ">", "max_len", ":", "\n", "                ", "max_len", "=", "word_len", "\n", "# print(\"label_list:\", word, label_list)", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "label_list", ")", "[", ":", ",", "None", "]", ".", "long", "(", ")", "\n", "label_vecs", "=", "torch", ".", "zeros", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "self", ".", "alsize", ")", ")", "\n", "# print(\"labels:\", labels)", "\n", "if", "labels", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "label_batches", ".", "append", "(", "label_vecs", ".", "scatter_", "(", "-", "1", ",", "labels", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "label_batches", ".", "append", "(", "label_vecs", ")", "\n", "", "", "label_rebatches", "=", "torch", ".", "zeros", "(", "(", "len", "(", "label_strs", ")", ",", "max_len", ",", "self", ".", "alsize", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "label_strs", ")", ")", ":", "\n", "            ", "label_rebatches", "[", "idx", "]", "[", ":", "label_batches", "[", "idx", "]", ".", "shape", "[", "0", "]", "]", "=", "label_batches", "[", "idx", "]", "\n", "\n", "", "label_rebatches", "=", "label_rebatches", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# noise = (torch.rand(label_rebatches.shape) - 0.5) * 0.2", "\n", "\n", "# label_rebatches#  += noise", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", ",", "label_rebatches", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_realWTLAMask.get_mask": [[1228, 1238], ["numpy.transpose", "cv2.cvtColor", "numpy.ones", "cv2.Canny", "cv2.dilate", "cv2.GaussianBlur", "torch.tensor().float().unsqueeze", "img_hr[].astype", "image.data.numpy", "torch.tensor().float", "torch.tensor"], "methods", ["None"], ["    ", "def", "get_mask", "(", "self", ",", "image", ")", ":", "\n", "        ", "img_hr", "=", "np", ".", "transpose", "(", "image", ".", "data", ".", "numpy", "(", ")", "*", "255", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img_hr_gray", "=", "cv2", ".", "cvtColor", "(", "img_hr", "[", "...", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "# print(\"img_hr_gray: \", np.unique(img_hr_gray), img_hr_gray.shape)", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "hr_canny", "=", "cv2", ".", "Canny", "(", "img_hr_gray", ",", "20", ",", "150", ")", "\n", "hr_canny", "=", "cv2", ".", "dilate", "(", "hr_canny", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "hr_canny", "=", "cv2", ".", "GaussianBlur", "(", "hr_canny", ",", "(", "5", ",", "5", ")", ",", "1", ")", "\n", "weighted_mask", "=", "0.4", "+", "(", "hr_canny", "/", "255.0", ")", "*", "0.6", "\n", "return", "torch", ".", "tensor", "(", "weighted_mask", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_realWTLAMask.__call__": [[1239, 1324], ["zip", "torch.cat", "torch.cat", "torch.zeros", "range", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze().float().permute", "dataset.alignCollate_realWTLAMask.transform", "dataset.alignCollate_realWTLAMask.transform2", "word.lower.lower.lower", "len", "[].long", "len", "torch.tensor().long", "torch.tensor", "t.unsqueeze", "t.unsqueeze", "len", "len", "len", "weighted_masks.append", "weighted_masks.extend", "torch.zeros", "label_batches.append", "weighted_tics.append", "torch.zeros", "label_batches.append", "weighted_tics.append", "len", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze().float", "torch.zeros.scatter_", "torch.tensor", "len", "len", "torch.tensor", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "# transform = resizeNormalize((imgW, imgH), self.mask)", "\n", "# transform2 = resizeNormalize((imgW // self.down_sample_scale, imgH // self.down_sample_scale), self.mask)", "\n", "images_HR", "=", "[", "self", ".", "transform", "(", "image", ")", "for", "image", "in", "images_HR", "]", "\n", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_HR", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "self", ".", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "# weighted_masks = [self.get_mask(image_HR) for image_HR in images_HR]", "\n", "# weighted_masks = torch.cat([t.unsqueeze(0) for t in weighted_masks], 0)", "\n", "\n", "# print(\"weighted_masks:\", weighted_masks.shape, np.unique(weighted_masks))", "\n", "max_len", "=", "0", "\n", "\n", "label_batches", "=", "[", "]", "\n", "weighted_masks", "=", "[", "]", "\n", "weighted_tics", "=", "[", "]", "\n", "\n", "for", "word", "in", "label_strs", ":", "\n", "            ", "word", "=", "word", ".", "lower", "(", ")", "\n", "# Complement", "\n", "\n", "if", "len", "(", "word", ")", ">", "4", ":", "\n", "# word = [ch for ch in word]", "\n", "# word[2] = \"e\"", "\n", "# word = \"\".join(word)", "\n", "                ", "pass", "\n", "", "if", "len", "(", "word", ")", "<=", "1", ":", "\n", "                ", "pass", "\n", "", "elif", "len", "(", "word", ")", "<", "15", "and", "len", "(", "word", ")", ">", "1", ":", "\n", "# inter_com = 26 - len(word)", "\n", "# padding = int(inter_com / (len(word) - 1))", "\n", "# new_word = word[0]", "\n", "# for i in range(len(word) - 1):", "\n", "#     new_word += \"-\" * padding + word[i+1]", "\n", "\n", "# word = new_word", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "word", "=", "word", "[", ":", "15", "]", "\n", "\n", "", "label_list", "=", "[", "self", ".", "a2d", "[", "ch", "]", "for", "ch", "in", "word", "if", "ch", "in", "self", ".", "a2d", "]", "\n", "\n", "if", "len", "(", "label_list", ")", "<=", "0", ":", "\n", "# blank label", "\n", "                ", "weighted_masks", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "weighted_masks", ".", "extend", "(", "label_list", ")", "\n", "\n", "", "word_len", "=", "len", "(", "word", ")", "\n", "if", "word_len", ">", "max_len", ":", "\n", "                ", "max_len", "=", "word_len", "\n", "# print(\"label_list:\", word, label_list)", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "label_list", ")", "[", ":", ",", "None", "]", ".", "long", "(", ")", "\n", "\n", "# print(\"labels:\", labels)", "\n", "\n", "if", "labels", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "label_vecs", "=", "torch", ".", "zeros", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "self", ".", "alsize", ")", ")", "\n", "# print(label_vecs.scatter_(-1, labels, 1))", "\n", "label_batches", ".", "append", "(", "label_vecs", ".", "scatter_", "(", "-", "1", ",", "labels", ",", "1", ")", ")", "\n", "weighted_tics", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "label_vecs", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "alsize", ")", ")", "\n", "# Assign a blank label", "\n", "label_vecs", "[", "0", ",", "0", "]", "=", "1.", "\n", "label_batches", ".", "append", "(", "label_vecs", ")", "\n", "weighted_tics", ".", "append", "(", "0", ")", "\n", "", "", "label_rebatches", "=", "torch", ".", "zeros", "(", "(", "len", "(", "label_strs", ")", ",", "max_len", ",", "self", ".", "alsize", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "label_strs", ")", ")", ":", "\n", "            ", "label_rebatches", "[", "idx", "]", "[", ":", "label_batches", "[", "idx", "]", ".", "shape", "[", "0", "]", "]", "=", "label_batches", "[", "idx", "]", "\n", "\n", "", "label_rebatches", "=", "label_rebatches", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# noise = (torch.rand(label_rebatches.shape) - 0.5) * 0.2", "\n", "\n", "# label_rebatches += noise", "\n", "\n", "# print(\"images_HR:\", images_HR.shape, images_lr.shape)", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", ",", "label_rebatches", ",", "torch", ".", "tensor", "(", "weighted_masks", ")", ".", "long", "(", ")", ",", "torch", ".", "tensor", "(", "weighted_tics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollate_realWTL_withcrop.__call__": [[1328, 1412], ["zip", "range", "torch.cat", "torch.cat", "torch.zeros", "range", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze().float().permute", "len", "HR_list.append", "LR_list.append", "word.lower.lower.lower", "len", "[].long", "torch.zeros", "len", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "dataset.alignCollate_realWTL_withcrop.transform", "dataset.alignCollate_realWTL_withcrop.transform2", "t.unsqueeze", "t.unsqueeze", "len", "len", "label_batches.append", "label_batches.append", "len", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze().float", "torch.rand", "int", "range", "torch.zeros.scatter_", "len", "len", "len", "torch.tensor", "label_rebatches.unsqueeze().float().permute.unsqueeze().float().permute.unsqueeze", "len", "len"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "\n", "# transform = resizeNormalize((imgW, imgH), self.mask)", "\n", "# transform2 = resizeNormalize((imgW // self.down_sample_scale, imgH // self.down_sample_scale), self.mask)", "\n", "\n", "HR_list", "=", "[", "]", "\n", "LR_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "images_HR", ")", ")", ":", "\n", "\n", "            ", "shift_proportion", "=", "0.4", "*", "random", ".", "random", "(", ")", "\n", "l_shift", "=", "random", ".", "random", "(", ")", "*", "shift_proportion", "\n", "r_shift", "=", "shift_proportion", "-", "l_shift", "\n", "interval", "=", "[", "l_shift", ",", "1", "-", "r_shift", "]", "\n", "HR_list", ".", "append", "(", "self", ".", "transform", "(", "images_HR", "[", "i", "]", ",", "interval", ")", ")", "\n", "LR_list", ".", "append", "(", "self", ".", "transform2", "(", "images_lr", "[", "i", "]", ",", "interval", ")", ")", "\n", "\n", "", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "HR_list", "]", ",", "0", ")", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "LR_list", "]", ",", "0", ")", "\n", "\n", "# images_HR = [self.transform(image) for image in images_HR]", "\n", "# images_HR = torch.cat([t.unsqueeze(0) for t in images_HR], 0)", "\n", "\n", "# images_lr = [self.transform2(image) for image in images_lr]", "\n", "# images_lr = torch.cat([t.unsqueeze(0) for t in images_lr], 0)", "\n", "\n", "max_len", "=", "0", "\n", "\n", "label_batches", "=", "[", "]", "\n", "\n", "for", "word", "in", "label_strs", ":", "\n", "            ", "word", "=", "word", ".", "lower", "(", ")", "\n", "# Complement", "\n", "\n", "if", "len", "(", "word", ")", ">", "4", ":", "\n", "                ", "word", "=", "[", "ch", "for", "ch", "in", "word", "]", "\n", "word", "[", "2", "]", "=", "\"e\"", "\n", "word", "=", "\"\"", ".", "join", "(", "word", ")", "\n", "\n", "", "if", "len", "(", "word", ")", "<=", "1", ":", "\n", "                ", "pass", "\n", "", "elif", "len", "(", "word", ")", "<", "26", "and", "len", "(", "word", ")", ">", "1", ":", "\n", "                ", "inter_com", "=", "26", "-", "len", "(", "word", ")", "\n", "padding", "=", "int", "(", "inter_com", "/", "(", "len", "(", "word", ")", "-", "1", ")", ")", "\n", "new_word", "=", "word", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "word", ")", "-", "1", ")", ":", "\n", "                    ", "new_word", "+=", "\"-\"", "*", "padding", "+", "word", "[", "i", "+", "1", "]", "\n", "\n", "", "word", "=", "new_word", "\n", "", "else", ":", "\n", "                ", "word", "=", "word", "[", ":", "26", "]", "\n", "\n", "", "label_list", "=", "[", "self", ".", "a2d", "[", "ch", "]", "for", "ch", "in", "word", "if", "ch", "in", "self", ".", "a2d", "]", "\n", "\n", "# shifting:", "\n", "# if len(label_list) > 2:", "\n", "#     if label_list[-1] > 0 and label_list[-1] < self.alsize - 1:", "\n", "#     label_list[-1] = 0", "\n", "\n", "word_len", "=", "len", "(", "word", ")", "\n", "if", "word_len", ">", "max_len", ":", "\n", "                ", "max_len", "=", "word_len", "\n", "# print(\"label_list:\", word, label_list)", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "label_list", ")", "[", ":", ",", "None", "]", ".", "long", "(", ")", "\n", "label_vecs", "=", "torch", ".", "zeros", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "self", ".", "alsize", ")", ")", "\n", "# print(\"labels:\", labels)", "\n", "if", "labels", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "label_batches", ".", "append", "(", "label_vecs", ".", "scatter_", "(", "-", "1", ",", "labels", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "label_batches", ".", "append", "(", "label_vecs", ")", "\n", "", "", "label_rebatches", "=", "torch", ".", "zeros", "(", "(", "len", "(", "label_strs", ")", ",", "max_len", ",", "self", ".", "alsize", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "label_strs", ")", ")", ":", "\n", "            ", "label_rebatches", "[", "idx", "]", "[", ":", "label_batches", "[", "idx", "]", ".", "shape", "[", "0", "]", "]", "=", "label_batches", "[", "idx", "]", "\n", "\n", "", "label_rebatches", "=", "label_rebatches", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "noise", "=", "(", "torch", ".", "rand", "(", "label_rebatches", ".", "shape", ")", "-", "0.5", ")", "*", "0.2", "\n", "\n", "label_rebatches", "+=", "noise", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", ",", "label_rebatches", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollateW2V_real.__call__": [[1415, 1445], ["zip", "dataset.resizeNormalize", "dataset.resizeNormalize", "range", "torch.cat", "torch.cat", "len", "resizeNormalize.", "image_lrs.append", "resizeNormalize.", "t.unsqueeze", "range", "t.unsqueeze", "len"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", ",", "w2vs", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "\n", "image_masks", "=", "[", "]", "\n", "image_lrs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "images_lr", ")", ")", ":", "\n", "            ", "image_lr", "=", "transform2", "(", "images_lr", "[", "i", "]", ",", "label_strs", "[", "i", "]", ")", "\n", "image_lrs", ".", "append", "(", "image_lr", ")", "\n", "# image_masks.append(image_mask)", "\n", "\n", "# images_lr = [transform2(images_lr[i], label_strs[i])[0] for i in range(len(images_lr))]", "\n", "", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "image_lrs", "]", ",", "0", ")", "\n", "# image_masks = torch.cat([t.unsqueeze(0) for t in image_masks], 0)", "\n", "\n", "images_HR", "=", "[", "transform", "(", "images_HR", "[", "i", "]", ",", "label_strs", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "images_HR", ")", ")", "]", "\n", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_HR", "]", ",", "0", ")", "\n", "\n", "# print(\"Align:\", type(w2vs), len(w2vs))", "\n", "# w2v_tensors = torch.cat([torch.tensor(w2v)[None, ...] for w2v in w2vs], 0).float()", "\n", "# print(\"Align:\", type(w2vs), len(w2vs), w2v_tensors.shape)", "\n", "w2v_tensors", "=", "None", "\n", "\n", "# print(\"image_HR:\", images_HR.shape, images_lr.shape)", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", ",", "w2v_tensors", "# , image_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.alignCollatec2f_real.__call__": [[1448, 1482], ["zip", "range", "dataset.resizeNormalize", "dataset.resizeNormalize", "torch.cat", "torch.cat", "torch.cat", "len", "numpy.array().astype", "numpy.array().astype", "image_MX.append", "resizeNormalize.", "resizeNormalize.", "resizeNormalize.", "PIL.Image.fromarray", "t.unsqueeze", "t.unsqueeze", "t.unsqueeze", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "# print(\"images_HR:\", images_HR[0], images_lr[0])", "\n", "\n", "image_MX", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "images_HR", ")", ")", ":", "\n", "            ", "HR_i", "=", "np", ".", "array", "(", "images_HR", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "LR_i", "=", "np", ".", "array", "(", "images_lr", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "image_MX", ".", "append", "(", "Image", ".", "fromarray", "(", "(", "(", "HR_i", "+", "LR_i", ")", "/", "2.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "\n", "# print(\"unique:\", np.unique(HR_i))", "\n", "# print(\"unique:\", np.unique(LR_i))", "\n", "\n", "", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "images_HR", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images_HR", "]", "\n", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_HR", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "images_MX", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "image_MX", "]", "\n", "images_MX", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_MX", "]", ",", "0", ")", "\n", "\n", "# print(\"Align:\", type(w2vs), len(w2vs))", "\n", "# w2v_tensors = torch.cat([torch.tensor(w2v)[None, ...] for w2v in w2vs], 0).float()", "\n", "# print(\"Align:\", type(w2vs), len(w2vs), w2v_tensors.shape)", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", ",", "images_MX", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.ConcatDataset.cumsum": [[1494, 1502], ["len", "r.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.ConcatDataset.__init__": [[1503, 1508], ["torch.utils.data.Dataset.__init__", "list", "dataset.ConcatDataset.cumsum", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.ConcatDataset.__len__": [[1509, 1511], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.ConcatDataset.__getitem__": [[1512, 1519], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.ConcatDataset.cummulative_sizes": [[1520, 1525], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "cummulative_sizes", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"cummulative_sizes attribute is renamed to \"", "\n", "\"cumulative_sizes\"", ",", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "return", "self", ".", "cumulative_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.rand_crop": [[37, 42], ["im.crop", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "function", ["None"], ["def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.central_crop": [[44, 49], ["im.crop"], "function", ["None"], ["", "def", "central_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "p1", "=", "(", "(", "(", "1", "-", "scale", ")", "*", "w", "/", "2", ")", ",", "(", "1", "-", "scale", ")", "*", "h", "/", "2", ")", "\n", "p2", "=", "(", "(", "1", "+", "scale", ")", "*", "w", "/", "2", ",", "(", "1", "+", "scale", ")", "*", "h", "/", "2", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.dataset.buf2PIL": [[51, 58], ["txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write"], ["", "def", "buf2PIL", "(", "txn", ",", "key", ",", "type", "=", "'RGB'", ")", ":", "\n", "    ", "imgbuf", "=", "txn", ".", "get", "(", "key", ")", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "im", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "type", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.load_voc.__init__": [[48, 56], ["torch.utils.data.Dataset.__init__", "os.listdir", "os.path.join", "os.listdir.remove"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "super", "(", "load_voc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "im_names", "=", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "for", "name", "in", "im_names", ":", "\n", "            ", "if", "'.jpg'", "not", "in", "name", ":", "\n", "                ", "im_names", ".", "remove", "(", "name", ")", "\n", "", "", "self", ".", "im_path", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "im_name", ")", "for", "im_name", "in", "im_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.load_voc.__len__": [[57, 59], ["voc_data.load_voc.im_path.__len__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "im_path", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.load_voc.__getitem__": [[60, 64], ["PIL.Image.open", "voc_data.rand_crop"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.rand_crop"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_input", "=", "Image", ".", "open", "(", "self", ".", "im_path", "[", "index", "]", ")", "\n", "im_label", "=", "rand_crop", "(", "im_input", ")", "\n", "return", "im_input", ",", "im_label", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.resizeNormalize.__init__": [[67, 71], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.resizeNormalize.__call__": [[72, 80], ["sp_noise.resize", "voc_data.resizeNormalize.toTensor", "sp_noise.sub_().div_", "cv2.cvtColor", "voc_data.sp_noise", "numpy.asarray", "sp_noise.sub_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.sp_noise"], ["", "def", "__call__", "(", "self", ",", "img", ",", "noise", "=", "False", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "if", "noise", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "numpy", ".", "asarray", "(", "img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img", "=", "sp_noise", "(", "img", ",", "0.5", ")", "\n", "", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.alignCollate.__init__": [[84, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "256", ",", "imgW", "=", "256", ",", "down_sample_scale", "=", "1", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "down_sample_scale", "=", "down_sample_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.alignCollate.__call__": [[89, 103], ["zip", "voc_data.resizeNormalize", "voc_data.resizeNormalize", "torch.cat", "torch.cat", "resizeNormalize.", "image.resize", "resizeNormalize.", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_lr", ",", "images_hr", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "True", ")", "\n", "images_hr", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images_hr", "]", "\n", "images_hr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_hr", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "image", ".", "resize", "(", "(", "image", ".", "size", "[", "0", "]", "//", "self", ".", "down_sample_scale", ",", "image", ".", "size", "[", "1", "]", "//", "self", ".", "down_sample_scale", ")", ",", "Image", ".", "BICUBIC", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "return", "images_lr", ",", "images_hr", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.rand_crop": [[24, 30], ["im.crop", "random.uniform", "random.uniform"], "function", ["None"], ["def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "scale", "=", "0.95", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.voc_data.sp_noise": [[32, 45], ["numpy.zeros", "range", "range", "random.random"], "function", ["None"], ["", "def", "sp_noise", "(", "image", ",", "prob", ")", ":", "\n", "    ", "output", "=", "np", ".", "zeros", "(", "image", ".", "shape", ",", "np", ".", "uint8", ")", "\n", "thres", "=", "1", "-", "prob", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "image", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "rdn", "=", "random", ".", "random", "(", ")", "\n", "if", "rdn", "<", "prob", ":", "\n", "                ", "output", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "elif", "rdn", ">", "thres", ":", "\n", "                ", "output", "[", "i", "]", "[", "j", "]", "=", "255", "\n", "", "else", ":", "\n", "                ", "output", "[", "i", "]", "[", "j", "]", "=", "image", "[", "i", "]", "[", "j", "]", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.rand_crop": [[17, 23], ["im.crop", "random.uniform", "random.uniform"], "function", ["None"], ["def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "scale", "=", "0.95", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL": [[25, 34], ["txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "PIL.Image.open().convert", "im.rotate.rotate", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write"], ["", "def", "buf2PIL", "(", "txn", ",", "key", ",", "type", "=", "'RGB'", ",", "degree", "=", "0", ")", ":", "\n", "    ", "imgbuf", "=", "txn", ".", "get", "(", "key", ")", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "im", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "type", ")", "\n", "if", "degree", "is", "not", "0", ":", "\n", "        ", "im", "=", "im", ".", "rotate", "(", "angle", "=", "degree", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.PIL2buf": [[36, 43], ["im.save", "os.remove", "str", "os.path.join", "open", "f.read", "os.path.join", "int", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_option.save"], ["", "def", "PIL2buf", "(", "im", ")", ":", "\n", "    ", "name", "=", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "'.jpg'", "\n", "im", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "name", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "name", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "name", ")", ")", "\n", "return", "imageBin", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.checkImageIsValid": [[45, 54], ["numpy.fromstring", "cv2.imdecode"], "function", ["None"], ["", "def", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "    ", "if", "imageBin", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "imageBuf", "=", "np", ".", "fromstring", "(", "imageBin", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "imageBuf", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "imgH", ",", "imgW", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "if", "imgH", "*", "imgW", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.writeCache": [[56, 62], ["env.begin", "cache.items", "txn.put", "type", "k.encode.encode"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode"], ["", "def", "writeCache", "(", "env", ",", "cache", ")", ":", "\n", "    ", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "        ", "for", "k", ",", "v", "in", "cache", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "k", ")", "is", "not", "bytes", ":", "\n", "                ", "k", "=", "k", ".", "encode", "(", ")", "\n", "", "txn", ".", "put", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb._is_difficult": [[64, 67], ["isinstance", "re.match"], "function", ["None"], ["", "", "", "def", "_is_difficult", "(", "word", ")", ":", "\n", "    ", "assert", "isinstance", "(", "word", ",", "str", ")", "\n", "return", "not", "re", ".", "match", "(", "'^[\\w]+$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.createDataset_detection": [[69, 127], ["len", "lmdb.open", "range", "str().encode", "create_lmdb.writeCache", "print", "len", "len", "len", "os.path.exists", "os.mkdir", "box_x.encode", "box_y.encode", "len", "os.path.exists", "print", "open", "f.read", "labelList[].encode", "open().read", "open().read", "create_lmdb.writeCache", "print", "str", "open", "open"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache"], ["", "def", "createDataset_detection", "(", "outputPath", ",", "imagePathList", ",", "box_x_list", ",", "box_y_list", ",", "\n", "labelList", ",", "region_mask_list", ",", "pixel_mask_list", ")", ":", "\n", "    ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath      : LMDB output path\n      imagePathList   : list of image path\n      labelList       : list of corresponding groundtruth texts\n      box_x_list      : coordinate x of gt_boxed\n      box_y_list      : coordinate y of gt_boxed\n      region_mask_list: region_mask images\n      pixel_mask_list : pixel_mask images\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "box_x_list", ")", "==", "len", "(", "box_y_list", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputPath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "outputPath", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "box_x", "=", "box_x_list", "[", "i", "]", "\n", "box_y", "=", "box_y_list", "[", "i", "]", "\n", "if", "len", "(", "box_x", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "            ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "box_x_Key", "=", "'boxes_x-%09d'", "%", "cnt", "\n", "box_y_Key", "=", "'boxes_y-%09d'", "%", "cnt", "\n", "cache", "[", "box_x_Key", "]", "=", "box_x", ".", "encode", "(", ")", "\n", "cache", "[", "box_y_Key", "]", "=", "box_y", ".", "encode", "(", ")", "\n", "\n", "if", "labelList", ":", "\n", "            ", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "labelKey", "]", "=", "labelList", "[", "i", "]", ".", "encode", "(", ")", "\n", "", "if", "region_mask_list", ":", "\n", "            ", "region_mask_Key", "=", "'region_mask-%09d'", "%", "cnt", "\n", "cache", "[", "region_mask_Key", "]", "=", "open", "(", "region_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "", "if", "pixel_mask_list", ":", "\n", "            ", "pixel_mask_Key", "=", "'pixel_mask-%09d'", "%", "cnt", "\n", "cache", "[", "pixel_mask_Key", "]", "=", "open", "(", "pixel_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "# embed()", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.createDataset_inpainting": [[129, 182], ["len", "lmdb.open", "range", "str().encode", "create_lmdb.writeCache", "print", "len", "len", "len", "os.path.exists", "os.mkdir", "box_x.encode", "box_y.encode", "len", "os.path.exists", "print", "open", "f.read", "labelList[].encode", "open().read", "open().read", "create_lmdb.writeCache", "print", "str", "open", "open"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache"], ["", "def", "createDataset_inpainting", "(", "outputPath", ",", "imagePathList", ",", "labelList", ")", ":", "\n", "    ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath      : LMDB output path\n      imagePathList   : list of image path\n      labelList       : list of corresponding groundtruth texts\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "box_x_list", ")", "==", "len", "(", "box_y_list", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputPath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "outputPath", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "box_x", "=", "box_x_list", "[", "i", "]", "\n", "box_y", "=", "box_y_list", "[", "i", "]", "\n", "if", "len", "(", "box_x", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "            ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "box_x_Key", "=", "'boxes_x-%09d'", "%", "cnt", "\n", "box_y_Key", "=", "'boxes_y-%09d'", "%", "cnt", "\n", "cache", "[", "box_x_Key", "]", "=", "box_x", ".", "encode", "(", ")", "\n", "cache", "[", "box_y_Key", "]", "=", "box_y", ".", "encode", "(", ")", "\n", "\n", "if", "labelList", ":", "\n", "            ", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "labelKey", "]", "=", "labelList", "[", "i", "]", ".", "encode", "(", ")", "\n", "", "if", "region_mask_list", ":", "\n", "            ", "region_mask_Key", "=", "'region_mask-%09d'", "%", "cnt", "\n", "cache", "[", "region_mask_Key", "]", "=", "open", "(", "region_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "", "if", "pixel_mask_list", ":", "\n", "            ", "pixel_mask_Key", "=", "'pixel_mask-%09d'", "%", "cnt", "\n", "cache", "[", "pixel_mask_Key", "]", "=", "open", "(", "pixel_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "# embed()", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.createDataset": [[184, 234], ["len", "lmdb.open", "range", "str().encode", "create_lmdb.writeCache", "print", "len", "len", "os.path.exists", "os.mkdir", "label.encode", "len", "os.path.exists", "print", "open", "f.read", "create_lmdb.writeCache", "print", "str", "create_lmdb.checkImageIsValid", "print"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.checkImageIsValid"], ["", "def", "createDataset", "(", "outputPath", ",", "imagePathList", ",", "labelList", ",", "lexiconList", "=", "None", ",", "checkValid", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath    : LMDB output path\n      imagePathList : list of image path\n      labelList     : list of corresponding groundtruth texts\n      lexiconList   : (optional) list of lexicon lists\n      checkValid    : if true, check the validity of every image\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "labelList", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputPath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "outputPath", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "label", "=", "labelList", "[", "i", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "            ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "if", "checkValid", ":", "\n", "            ", "if", "not", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "                ", "print", "(", "'%s is not a valid image'", "%", "imagePath", ")", "\n", "continue", "\n", "\n", "", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "\n", "cache", "[", "labelKey", "]", "=", "label", ".", "encode", "(", ")", "\n", "if", "lexiconList", ":", "\n", "            ", "lexiconKey", "=", "'lexicon-%09d'", "%", "cnt", "\n", "cache", "[", "lexiconKey", "]", "=", "' '", ".", "join", "(", "lexiconList", "[", "i", "]", ")", "\n", "# embed()", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_800k": [[236, 271], ["tqdm.tqdm", "print", "create_lmdb.createDataset", "os.path.exists", "os.mkdir", "open", "json.loads", "f.readlines", "PIL.Image.open", "len", "os.path.join", "image_labels.append", "image_names.append", "image_paths.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir"], ["", "def", "create_800k", "(", ")", ":", "\n", "    ", "json_path", "=", "'/home/wwj/0_LAB/dataset/SynthText/syntxt_crop.odgt'", "\n", "lmdb_output_path", "=", "'/home/wwj/0_LAB/dataset/LMDB/syn800k_HR2'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lmdb_output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "lmdb_output_path", ")", "\n", "", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "readlines", "(", ")", "[", ":", "]", "\n", "\n", "", "data", "=", "[", "json", ".", "loads", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "image_names", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "portion", "=", "1", "\n", "w_list", "=", "[", "]", "\n", "h_list", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "image_path", "=", "i", "[", "'im_path'", "]", "\n", "image_name", "=", "i", "[", "'im_name'", "]", "\n", "image_label", "=", "i", "[", "'label'", "]", "\n", "\n", "try", ":", "\n", "            ", "temp", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "image_path", ",", "image_name", ")", ")", "\n", "w", "=", "temp", ".", "size", "[", "0", "]", "\n", "h", "=", "temp", ".", "size", "[", "1", "]", "\n", "\n", "if", "h", ">=", "64", "and", "w", ">=", "256", ":", "\n", "                ", "image_labels", ".", "append", "(", "image_label", ")", "\n", "image_names", ".", "append", "(", "image_name", ")", "\n", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "image_path", ",", "image_name", ")", ")", "\n", "\n", "", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "", "", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "\n", "createDataset", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_mat": [[273, 305], ["scipy.io.loadmat", "[].__len__", "tqdm.tqdm", "print", "create_lmdb.createDataset_detection", "os.path.exists", "os.mkdir", "os.path.join", "range", "os.path.join", "PIL.Image.open", "image_labels.append", "image_paths.append", "len"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.loadmat", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__len__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.createDataset_detection", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir"], ["", "def", "create_mat", "(", ")", ":", "\n", "    ", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "\n", "lmdb_output_path", "=", "'../../dataset/LMDB/iiit5k_train'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lmdb_output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "lmdb_output_path", ")", "\n", "", "root", "=", "'../../dataset/IIIT5K'", "\n", "train_gt", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'traindata.mat'", ")", ")", "\n", "length", "=", "train_gt", "[", "'traindata'", "]", "[", "0", "]", ".", "__len__", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "length", ")", ")", ":", "\n", "        ", "im_path", "=", "train_gt", "[", "'traindata'", "]", "[", "0", "]", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "im_gt", "=", "train_gt", "[", "'traindata'", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", "\n", "# lexi_50 = train_gt['traindata'][0][i][2][0]  #len==50", "\n", "# lexi_1k = train_gt['traindata'][0][i][3][0]   #len==1k", "\n", "\n", "try", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "im_path", ")", "\n", "image_label", "=", "im_gt", "\n", "temp", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "# w = temp.size[0]", "\n", "# h = temp.size[1]", "\n", "# portion1 = w / float(h)", "\n", "# w_lsit.append(w)", "\n", "# h_list.append(h)", "\n", "image_labels", ".", "append", "(", "image_label", ")", "\n", "image_paths", ".", "append", "(", "image_path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "# embed()", "\n", "", "", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "createDataset_detection", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_total_text": [[307, 368], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "tqdm.tqdm", "IPython.embed", "print", "create_lmdb.createDataset_detection", "os.path.exists", "os.mkdir", "os.path.join", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "scipy.io.loadmat", "len", "range", "box_x_list.append", "box_y_list.append", "region_mask_list.append", "pixel_mask_list.append", "image_labels.append", "image_paths.append", "len", "str().replace().replace().replace", "str().replace().replace().replace", "box_xs.append", "box_ys.append", "labels.append", "IPython.embed", "name.split", "name.split", "str().replace().replace", "str().replace().replace", "str().replace", "str().replace", "str", "str", "list", "list"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.createDataset_detection", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_mat.loadmat"], ["", "def", "create_total_text", "(", ")", ":", "\n", "    ", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "box_x_list", "=", "[", "]", "\n", "box_y_list", "=", "[", "]", "\n", "region_mask_list", "=", "[", "]", "\n", "pixel_mask_list", "=", "[", "]", "\n", "type", "=", "'Test'", "\n", "lmdb_output_path", "=", "'../../dataset/LMDB/total_text_'", "+", "type", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lmdb_output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "lmdb_output_path", ")", "\n", "", "root", "=", "'../../dataset/total_text'", "\n", "gt_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Groundtruth'", ",", "'Polygon'", ",", "type", ")", "\n", "region_mask_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Text_Region_Mask'", ",", "type", ")", "\n", "pixel_mask_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'groundtruth_pixel'", ",", "type", ")", "\n", "im_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Images'", ",", "type", ")", "\n", "im_names", "=", "os", ".", "listdir", "(", "im_dir", ")", "\n", "\n", "for", "name", "in", "tqdm", "(", "im_names", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "im_dir", ",", "name", ")", "\n", "temp", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "\n", "region_mask_name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", "\n", "pixel_mask_name", "=", "name", "\n", "region_mask_path", "=", "os", ".", "path", ".", "join", "(", "region_mask_dir", ",", "region_mask_name", ")", "\n", "pixel_mask_path", "=", "os", ".", "path", ".", "join", "(", "pixel_mask_dir", ",", "pixel_mask_name", ")", "\n", "\n", "mat_name", "=", "(", "'poly_'", "if", "type", "==", "'Test'", "else", "''", ")", "+", "'gt_'", "+", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.mat'", "\n", "mat_path", "=", "os", ".", "path", ".", "join", "(", "gt_root", ",", "mat_name", ")", "\n", "gt", "=", "loadmat", "(", "mat_path", ")", "\n", "gt_mat", "=", "gt", "[", "(", "'poly'", "if", "type", "==", "'Test'", "else", "''", ")", "+", "'gt'", "]", "\n", "sub", "=", "len", "(", "gt_mat", ")", "\n", "box_xs", "=", "[", "]", "\n", "box_ys", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sub", ")", ":", "\n", "                ", "box_x", "=", "str", "(", "list", "(", "gt_mat", "[", "i", "]", "[", "1", "]", "[", "0", "]", ")", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "box_y", "=", "str", "(", "list", "(", "gt_mat", "[", "i", "]", "[", "3", "]", "[", "0", "]", ")", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "label", "=", "gt_mat", "[", "i", "]", "[", "4", "]", "[", "0", "]", "\n", "box_xs", ".", "append", "(", "box_x", ")", "\n", "box_ys", ".", "append", "(", "box_y", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "box_x_str", "=", "' '", ".", "join", "(", "box_xs", ")", "\n", "box_y_str", "=", "' '", ".", "join", "(", "box_ys", ")", "\n", "label_str", "=", "' '", ".", "join", "(", "labels", ")", "\n", "\n", "box_x_list", ".", "append", "(", "box_x_str", ")", "\n", "box_y_list", ".", "append", "(", "box_y_str", ")", "\n", "region_mask_list", ".", "append", "(", "region_mask_path", ")", "\n", "pixel_mask_list", ".", "append", "(", "pixel_mask_path", ")", "\n", "image_labels", ".", "append", "(", "label_str", ")", "\n", "image_paths", ".", "append", "(", "image_path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "embed", "(", ")", "\n", "", "", "embed", "(", ")", "\n", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "\n", "createDataset_detection", "(", "lmdb_output_path", ",", "image_paths", ",", "box_x_list", ",", "box_y_list", ",", "\n", "image_labels", ",", "region_mask_list", ",", "pixel_mask_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_90k": [[370, 406], ["os.listdir", "print", "tqdm.tqdm", "print", "create_lmdb.createDataset", "os.listdir", "os.listdir.remove", "len", "os.path.join", "os.listdir", "len", "os.path.join", "os.path.join", "PIL.Image.open", "w_lsit.append", "h_list.append", "image.split", "float", "image_labels.append", "image_paths.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset"], ["", "def", "create_90k", "(", ")", ":", "\n", "    ", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "lmdb_output_path", "=", "'/home/wwj/0_LAB/dataset/LMDB/syn90k_hr'", "\n", "root", "=", "'/home/wwj/0_LAB/dataset/mjsynth/mnt/ramdisk/max/90kDICT32px'", "\n", "Dirs", "=", "os", ".", "listdir", "(", "root", ")", "\n", "w_lsit", "=", "[", "]", "\n", "h_list", "=", "[", "]", "\n", "for", "i", "in", "Dirs", ":", "\n", "        ", "if", "'.'", "in", "i", ":", "\n", "            ", "Dirs", ".", "remove", "(", "i", ")", "\n", "", "", "print", "(", "'there are all %d directories'", "%", "len", "(", "Dirs", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "Dirs", ")", ":", "\n", "        ", "dirs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "i", ")", ")", "\n", "for", "dir", "in", "dirs", ":", "\n", "            ", "images", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "i", ",", "dir", ")", ")", "\n", "for", "image", "in", "images", ":", "\n", "                ", "try", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "i", ",", "dir", ",", "image", ")", "\n", "image_label", "=", "image", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "temp", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "w", "=", "temp", ".", "size", "[", "0", "]", "\n", "h", "=", "temp", ".", "size", "[", "1", "]", "\n", "portion1", "=", "w", "/", "float", "(", "h", ")", "\n", "w_lsit", ".", "append", "(", "w", ")", "\n", "h_list", ".", "append", "(", "h", ")", "\n", "# dump the foo fat or thin images", "\n", "if", "w", ">=", "100", "and", "h", ">=", "31", ":", "\n", "                        ", "image_labels", ".", "append", "(", "image_label", ")", "\n", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "image_path", ")", ")", "\n", "\n", "", "", "except", "OSError", ":", "\n", "                    ", "pass", "\n", "# embed()", "\n", "", "", "", "", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "createDataset", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_ic": [[408, 460], ["create_lmdb.createDataset", "create_lmdb.createDataset", "create_lmdb.createDataset", "create_lmdb.createDataset", "open", "f.readlines", "json.loads", "os.path.join", "os.path.exists", "os.path.join.split", "PIL.Image.open", "os.path.join", "image_labels_13test.append", "image_paths_13test.append", "image_labels_13train.append", "image_paths_13train.append", "image_labels_15test.append", "image_paths_15test.append", "image_labels_13test.append", "image_paths_13test.append"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset"], ["", "def", "create_ic", "(", ")", ":", "\n", "    ", "json_path", "=", "'/home/wwj/0_LAB/dataset/ic.odgt'", "\n", "lmdb_output_path_13train", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic13_train'", "\n", "lmdb_output_path_13test", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic13_test'", "\n", "lmdb_output_path_15train", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic15_train'", "\n", "lmdb_output_path_15test", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic15_test'", "\n", "\n", "image_paths_13train", "=", "[", "]", "\n", "image_labels_13train", "=", "[", "]", "\n", "image_paths_13test", "=", "[", "]", "\n", "image_labels_13test", "=", "[", "]", "\n", "image_paths_15train", "=", "[", "]", "\n", "image_labels_15train", "=", "[", "]", "\n", "image_paths_15test", "=", "[", "]", "\n", "image_labels_15test", "=", "[", "]", "\n", "\n", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "data", "=", "[", "json", ".", "loads", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "\n", "for", "i", "in", "data", ":", "\n", "        ", "image_name", "=", "i", "[", "'img_path'", "]", "\n", "image_name", "=", "os", ".", "path", ".", "join", "(", "'/home/wwj/0_LAB/SRGAN/ic13'", ",", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "image_label", "=", "i", "[", "'img_gt'", "]", "\n", "data_set", "=", "i", "[", "'dataset'", "]", "\n", "data_type", "=", "i", "[", "'type'", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_name", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "temp", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "image_name", ")", ")", "\n", "w", "=", "temp", ".", "size", "[", "0", "]", "\n", "h", "=", "temp", ".", "size", "[", "1", "]", "\n", "portion1", "=", "w", "/", "h", "\n", "\n", "if", "data_set", "==", "'IC13'", "and", "data_type", "==", "'test'", ":", "\n", "                    ", "image_labels_13test", ".", "append", "(", "image_label", ")", "\n", "image_paths_13test", ".", "append", "(", "image_name", ")", "\n", "", "elif", "data_set", "==", "'IC13'", "and", "data_type", "==", "'train'", ":", "\n", "                    ", "image_labels_13train", ".", "append", "(", "image_label", ")", "\n", "image_paths_13train", ".", "append", "(", "image_name", ")", "\n", "", "elif", "data_set", "==", "'IC15'", "and", "data_type", "==", "'test'", ":", "\n", "                    ", "image_labels_15test", ".", "append", "(", "image_label", ")", "\n", "image_paths_15test", ".", "append", "(", "image_name", ")", "\n", "", "elif", "data_set", "==", "'IC13'", "and", "data_type", "==", "'test'", ":", "\n", "                    ", "image_labels_13test", ".", "append", "(", "image_label", ")", "\n", "image_paths_13test", ".", "append", "(", "image_name", ")", "\n", "", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "createDataset", "(", "lmdb_output_path_13train", ",", "image_paths_13train", ",", "image_labels_13train", ")", "\n", "createDataset", "(", "lmdb_output_path_13test", ",", "image_paths_13test", ",", "image_labels_13test", ")", "\n", "createDataset", "(", "lmdb_output_path_15train", ",", "image_paths_15train", ",", "image_labels_15train", ")", "\n", "createDataset", "(", "lmdb_output_path_13test", ",", "image_paths_13test", ",", "image_labels_13test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_txt": [[462, 477], ["create_lmdb.createDataset", "open", "f.readlines", "gt.split.split", "gt[].replace", "image_labels.append", "image_paths.append", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset"], ["", "def", "create_txt", "(", ")", ":", "\n", "    ", "root", "=", "'/home/wwj/0_LAB/dataset/STR/SVT-Perspective'", "\n", "image_labels", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "lmdb_output_path", "=", "'/home/wwj/0_LAB/dataset/LMDB/svtp-645'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'gt.txt'", ")", ")", "as", "f", ":", "\n", "        ", "gts", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "gt", "in", "gts", ":", "\n", "        ", "gt", "=", "gt", ".", "split", "(", "' '", ")", "\n", "im_name", "=", "gt", "[", "0", "]", "\n", "label", "=", "gt", "[", "1", "]", ".", "replace", "(", "'\\r\\n'", ",", "''", ")", "\n", "image_labels", ".", "append", "(", "label", ")", "\n", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "im_name", ")", ")", "\n", "\n", "", "createDataset", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.create_from_lmdb": [[479, 507], ["lmdb.open", "lmdb.open", "lmdb.open.begin", "int", "range", "str().encode", "create_lmdb.writeCache", "print", "env.begin.get", "create_lmdb.buf2PIL", "create_lmdb.rand_crop", "env.begin.get", "create_lmdb.PIL2buf", "create_lmdb.PIL2buf", "create_lmdb.writeCache", "print", "str"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.rand_crop", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.PIL2buf", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.dataset.create_lmdb.PIL2buf", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache"], ["", "def", "create_from_lmdb", "(", ")", ":", "\n", "    ", "root", "=", "'/mnt/lustre/wangwenjia/wwj_space/dataset/lmdb/str/syn800k_HR2'", "\n", "out_path", "=", "'/mnt/lustre/wangwenjia/wwj_space/dataset/lmdb/str/syn800k_HR_crop'", "\n", "env", "=", "lmdb", ".", "open", "(", "root", ",", "map_size", "=", "1099511627776", ")", "\n", "env_out", "=", "lmdb", ".", "open", "(", "out_path", ",", "map_size", "=", "1099511627776", ")", "\n", "cache_out", "=", "{", "}", "\n", "txn", "=", "env", ".", "begin", "(", ")", "\n", "num_samples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "for", "cnt", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "imageKey", "=", "b'image-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "image_HR_Key", "=", "'image_HR-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "image_lr_Key", "=", "'image_lr-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "image", "=", "buf2PIL", "(", "txn", ",", "imageKey", ")", "\n", "out_image", "=", "rand_crop", "(", "image", ")", "\n", "labelKey", "=", "b'label-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "label", "=", "txn", ".", "get", "(", "labelKey", ")", "\n", "# embed()", "\n", "cache_out", "[", "image_HR_Key", "]", "=", "PIL2buf", "(", "image", ")", "\n", "cache_out", "[", "image_lr_Key", "]", "=", "PIL2buf", "(", "out_image", ")", "\n", "cache_out", "[", "labelKey", "]", "=", "label", "\n", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env_out", ",", "cache_out", ")", "\n", "cache_out", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "num_samples", ")", ")", "\n", "\n", "", "", "cache_out", "[", "'num-samples'", "]", "=", "str", "(", "num_samples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env_out", ",", "cache_out", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.edsr.MeanShift.__init__": [[8, 16], ["torch.Conv2d.__init__", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "edsr.MeanShift.parameters", "float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rgb_mean", ",", "sign", ")", ":", "\n", "        ", "super", "(", "MeanShift", ",", "self", ")", ".", "__init__", "(", "3", ",", "3", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bias", ".", "data", "=", "float", "(", "sign", ")", "*", "torch", ".", "Tensor", "(", "rgb_mean", ")", "\n", "\n", "# Freeze the MeanShift layer", "\n", "for", "params", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.edsr._Residual_Block.__init__": [[19, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "_Residual_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.edsr._Residual_Block.forward": [[26, 33], ["edsr._Residual_Block.relu", "edsr._Residual_Block.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "edsr._Residual_Block.conv1"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity_data", "=", "x", "\n", "output", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "output", "*=", "0.1", "\n", "output", "=", "torch", ".", "add", "(", "output", ",", "identity_data", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.edsr.EDSR.__init__": [[36, 71], ["torch.Module.__init__", "edsr.MeanShift", "torch.Conv2d", "torch.Conv2d", "edsr.EDSR.make_layer", "torch.Conv2d", "torch.Conv2d", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "edsr.MeanShift", "edsr.EDSR.modules", "int", "upscale_block.append", "upscale_block.append", "isinstance", "math.log2", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "        ", "super", "(", "EDSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rgb_mean", "=", "(", "0.4488", ",", "0.4371", ",", "0.4040", ")", "\n", "self", ".", "sub_mean", "=", "MeanShift", "(", "rgb_mean", ",", "-", "1", ")", "\n", "\n", "self", ".", "conv_input", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "residual", "=", "self", ".", "make_layer", "(", "_Residual_Block", ",", "32", ")", "\n", "\n", "self", ".", "conv_mid", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "upscale_block", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "math", ".", "log2", "(", "scale_factor", ")", ")", ")", ":", "\n", "            ", "upscale_block", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "upscale_block", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "2", ")", ")", "\n", "", "self", ".", "upscale", "=", "nn", ".", "Sequential", "(", "\n", "*", "upscale_block", "\n", ")", "\n", "\n", "self", ".", "conv_output", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_mean", "=", "MeanShift", "(", "rgb_mean", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.edsr.EDSR.make_layer": [[72, 77], ["range", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "", "def", "make_layer", "(", "self", ",", "block", ",", "num_of_layer", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_of_layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.edsr.EDSR.forward": [[78, 88], ["edsr.EDSR.sub_mean", "edsr.EDSR.conv_input", "edsr.EDSR.conv_mid", "torch.add", "torch.add", "torch.add", "torch.add", "edsr.EDSR.upscale", "edsr.EDSR.conv_output", "edsr.EDSR.add_mean", "edsr.EDSR.residual"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "sub_mean", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_input", "(", "out", ")", "\n", "residual", "=", "out", "\n", "out", "=", "self", ".", "conv_mid", "(", "self", ".", "residual", "(", "out", ")", ")", "\n", "out", "=", "torch", ".", "add", "(", "out", ",", "residual", ")", "\n", "out", "=", "self", ".", "upscale", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_output", "(", "out", ")", "\n", "out", "=", "self", ".", "add_mean", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.PositionalEncoding.__init__": [[26, 39], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "model_transformer.PositionalEncoding.register_buffer", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.PositionalEncoding.forward": [[40, 44], ["model_transformer.PositionalEncoding.dropout", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "Variable", "(", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "\n", "requires_grad", "=", "False", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.PositionalEncoding_learn.__init__": [[48, 53], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding_learn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "# Compute the positional encodings once in log space.", "\n", "self", ".", "pe", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "max_len", ",", "d_model", ")", ")", "\n", "# self.register_parameter('pe', pe)", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.PositionalEncoding_learn.forward": [[55, 59], ["model_transformer.PositionalEncoding_learn.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.MultiHeadedAttention.__init__": [[62, 72], ["torch.Module.__init__", "model_transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.MultiHeadedAttention.forward": [[73, 102], ["query.size", "model_transformer.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# cnt = 0", "\n", "# for l , x in zip(self.linears, (query, key, value)):", "\n", "#     print(cnt,l,x)", "\n", "#     cnt += 1", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# print(\"\u5728Multi\u4e2d\uff0cquery\u7684\u5c3a\u5bf8\u4e3a\", query.shape)", "\n", "# print(\"\u5728Multi\u4e2d\uff0ckey\u7684\u5c3a\u5bf8\u4e3a\", key.shape)", "\n", "# print(\"\u5728Multi\u4e2d\uff0cvalue\u7684\u5c3a\u5bf8\u4e3a\", value.shape)", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.LayerNorm.__init__": [[176, 182], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(features)", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.LayerNorm.forward": [[183, 187], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.PositionwiseFeedForward.__init__": [[191, 196], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.PositionwiseFeedForward.forward": [[197, 199], ["model_transformer.PositionwiseFeedForward.w_2", "model_transformer.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_transformer.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Generator.__init__": [[202, 206], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "vocab", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Generator.forward": [[207, 210], ["model_transformer.Generator.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return F.softmax(self.proj(x))", "\n", "        ", "return", "self", ".", "proj", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Embeddings.__init__": [[213, 217], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Embeddings.forward": [[218, 225], ["model_transformer.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "embed", "=", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "# print(\"embed\",embed)", "\n", "# embed = self.lut(x)", "\n", "# print(embed.requires_grad)", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Decoder.__init__": [[228, 239], ["torch.Module.__init__", "model_transformer.MultiHeadedAttention", "model_transformer.LayerNorm", "model_transformer.MultiHeadedAttention", "model_transformer.LayerNorm", "model_transformer.PositionwiseFeedForward", "model_transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "head_num", "=", "16", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "head_num", ",", "d_model", "=", "feature_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "multihead", "=", "MultiHeadedAttention", "(", "h", "=", "head_num", ",", "d_model", "=", "feature_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "mul_layernorm2", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "feature_size", ",", "feature_size", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Decoder.forward": [[240, 285], ["subsequent_mask().cuda", "model_transformer.Decoder.mul_layernorm1", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "model_transformer.Decoder.mul_layernorm2", "model_transformer.Decoder.mul_layernorm3", "model_transformer.subsequent_mask", "model_transformer.Decoder.mask_multihead", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute", "model_transformer.Decoder.multihead", "model_transformer.Decoder.pff", "conv_feature.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.subsequent_mask"], ["", "def", "forward", "(", "self", ",", "text", ",", "global_info", ",", "conv_feature", ",", "text_length", ")", ":", "\n", "        ", "'''\n        text : (batch, seq_len, embedding_size)\n        global_info: (batch, embedding_size, 1, 1)\n        conv_feature: (batch, channel, H, W)\n        '''", "\n", "\n", "text_max_length", "=", "text", ".", "shape", "[", "1", "]", "\n", "mask", "=", "subsequent_mask", "(", "text_max_length", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "text", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "# print(\"global_info:\", global_info.shape, result.shape)", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "origin_result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "mask", ")", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv_feature", ".", "shape", "\n", "conv_feature", "=", "conv_feature", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "\n", "# print(\"origin_result:\", origin_result.shape, result.shape, conv_feature.shape)", "\n", "\n", "result", "=", "self", ".", "mul_layernorm2", "(", "origin_result", "+", "self", ".", "multihead", "(", "result", ",", "conv_feature", ",", "conv_feature", ",", "mask", "=", "None", ")", ")", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "origin_result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "# result = origin_result + result", "\n", "\n", "# origin_result = result", "\n", "# # result =", "\n", "# result = self.mul_layernorm1(origin_result + self.mask_multihead(result, result, result, mask=mask))", "\n", "#", "\n", "# b, c, h, w = conv_feature.shape", "\n", "# conv_feature = conv_feature.view(b, c, h * w).permute(0, 2, 1).contiguous()", "\n", "# origin_result = result", "\n", "# result = self.mul_layernorm2(origin_result + self.multihead(result, conv_feature, conv_feature, mask=None))", "\n", "#", "\n", "# origin_result = result", "\n", "# result = self.mul_layernorm3(origin_result + self.pff(result))", "\n", "# # result = origin_result + result", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.CatFetDecoder.__init__": [[289, 300], ["torch.Module.__init__", "model_transformer.MultiHeadedAttention", "model_transformer.LayerNorm", "model_transformer.MultiHeadedAttention", "model_transformer.LayerNorm", "model_transformer.PositionwiseFeedForward", "model_transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "head_num", "=", "16", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "CatFetDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "head_num", ",", "d_model", "=", "feature_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "multihead", "=", "MultiHeadedAttention", "(", "h", "=", "head_num", ",", "d_model", "=", "feature_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "mul_layernorm2", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "feature_size", ",", "feature_size", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.CatFetDecoder.forward": [[301, 335], ["subsequent_mask().cuda", "print", "model_transformer.CatFetDecoder.mul_layernorm1", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "model_transformer.CatFetDecoder.mul_layernorm2", "model_transformer.CatFetDecoder.mul_layernorm3", "model_transformer.subsequent_mask", "model_transformer.CatFetDecoder.mask_multihead", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute", "model_transformer.CatFetDecoder.multihead", "model_transformer.CatFetDecoder.pff", "conv_feature.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.subsequent_mask"], ["", "def", "forward", "(", "self", ",", "text", ",", "conv_feature", ")", ":", "\n", "        ", "'''\n        text : (batch, seq_len, embedding_size)\n        global_info: (batch, embedding_size, 1, 1)\n        conv_feature: (batch, channel, H, W)\n        '''", "\n", "\n", "text_max_length", "=", "text", ".", "shape", "[", "1", "]", "\n", "mask", "=", "subsequent_mask", "(", "text_max_length", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "text", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "\n", "print", "(", "\"decoder1:\"", ",", "origin_result", ".", "shape", ",", "result", ".", "shape", ",", "mask", ".", "shape", ")", "\n", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "origin_result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "mask", ")", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv_feature", ".", "shape", "\n", "# print(\"global_info:\", global_info.shape, result.shape, conv_feature.shape)", "\n", "conv_feature", "=", "conv_feature", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "\n", "# print(\"origin_result:\", origin_result.shape, result.shape, conv_feature.shape)", "\n", "\n", "result", "=", "self", ".", "mul_layernorm2", "(", "origin_result", "+", "self", ".", "multihead", "(", "result", ",", "conv_feature", ",", "conv_feature", ",", "mask", "=", "None", ")", ")", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "origin_result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Encoder.__init__": [[339, 350], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_transformer.positionalencoding2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.positionalencoding2d"], ["    ", "def", "__init__", "(", "self", ",", "output_channel", "=", "512", ",", "input_channel", "=", "256", ",", "global_pooling_size", "=", "(", "2", ",", "35", ")", ",", "encoder2D", "=", "None", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.avgpool = nn.AvgPool2d(global_pooling_size, global_pooling_size)", "\n", "\n", "self", ".", "cnn_bottleneck", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "output_channel", ",", "1", ")", "\n", "self", ".", "bn_bottleneck", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "relu_bottleneck", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "encoder2D", "=", "encoder2D", "\n", "self", ".", "pe_2D", "=", "positionalencoding2d", "(", "output_channel", ",", "global_pooling_size", "[", "0", "]", ",", "global_pooling_size", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Encoder.forward": [[351, 375], ["result.unsqueeze().unsqueeze().contiguous.unsqueeze().unsqueeze().contiguous.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "result.unsqueeze().unsqueeze().contiguous.unsqueeze().unsqueeze().contiguous.unsqueeze().unsqueeze().contiguous", "model_transformer.Encoder.relu_bottleneck", "model_transformer.Encoder.pe_2D.to", "model_transformer.Encoder.bn_bottleneck", "model_transformer.Encoder.view.view", "model_transformer.Encoder.encoder2D", "model_transformer.Encoder.view", "result.unsqueeze().unsqueeze().contiguous.unsqueeze().unsqueeze().contiguous.unsqueeze().unsqueeze", "model_transformer.Encoder.cnn_bottleneck", "result.unsqueeze().unsqueeze().contiguous.unsqueeze().unsqueeze().contiguous.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ")", ":", "\n", "\n", "        ", "conv_result", "=", "feature", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv_result", ".", "shape", "\n", "\n", "result", "=", "conv_result", "\n", "# result = self.avgpool(result).squeeze(2).squeeze(2)", "\n", "\n", "result", "=", "result", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "result", "=", "torch", ".", "mean", "(", "result", ",", "2", ")", "\n", "\n", "result", "=", "result", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "conv_result", "=", "self", ".", "relu_bottleneck", "(", "self", ".", "bn_bottleneck", "(", "self", ".", "cnn_bottleneck", "(", "conv_result", ")", ")", ")", "\n", "pe_2D", "=", "self", ".", "pe_2D", ".", "to", "(", "conv_result", ".", "device", ")", "\n", "if", "not", "self", ".", "encoder2D", "is", "None", ":", "\n", "# (batch, 512, H, W)", "\n", "\n", "            ", "conv_result", "=", "conv_result", "+", "pe_2D", "#[:, :h, :w]", "\n", "conv_result", "=", "conv_result", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "conv_feature_enhanced", "=", "self", ".", "encoder2D", "(", "conv_result", ")", "\n", "conv_result", "=", "conv_feature_enhanced", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "", "return", "conv_result", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.FeatureEnhancer.__init__": [[379, 387], ["torch.Module.__init__", "model_transformer.MultiHeadedAttention", "model_transformer.LayerNorm", "model_transformer.PositionwiseFeedForward", "model_transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", ",", "head_num", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "FeatureEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "head_num", ",", "d_model", "=", "feature_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "feature_size", ",", "feature_size", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.FeatureEnhancer.forward": [[388, 405], ["conv_feature.permute().contiguous", "model_transformer.FeatureEnhancer.mul_layernorm1", "model_transformer.FeatureEnhancer.mul_layernorm3", "model_transformer.FeatureEnhancer.permute().contiguous", "conv_feature.permute", "model_transformer.FeatureEnhancer.mask_multihead", "model_transformer.FeatureEnhancer.pff", "model_transformer.FeatureEnhancer.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "conv_feature", ")", ":", "\n", "        ", "'''\n        conv_feature: (batch, channel, H * W)\n        '''", "\n", "# (N, C, T) -> (N, T, C)", "\n", "result", "=", "conv_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "origin_result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "None", ")", ")", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "origin_result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "\n", "# (N, T, C) -> (N, C, T)", "\n", "return", "result", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.FeatureEnhancerW2V.__init__": [[409, 419], ["torch.Module.__init__", "model_transformer.MultiHeadedAttention", "model_transformer.LayerNorm", "model_transformer.PositionwiseFeedForward", "model_transformer.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vec_d", ",", "feature_size", ",", "head_num", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "FeatureEnhancerW2V", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "head_num", ",", "d_model", "=", "feature_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "feature_size", ",", "feature_size", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "feature_size", ")", "\n", "\n", "self", ".", "w2v_proj", "=", "nn", ".", "Linear", "(", "vec_d", ",", "feature_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.FeatureEnhancerW2V.forward": [[420, 445], ["conv_feature.permute().contiguous", "model_transformer.FeatureEnhancerW2V.mul_layernorm1", "model_transformer.FeatureEnhancerW2V.mul_layernorm3", "model_transformer.FeatureEnhancerW2V.permute().contiguous", "conv_feature.permute", "model_transformer.FeatureEnhancerW2V.mask_multihead", "model_transformer.FeatureEnhancerW2V.pff", "model_transformer.FeatureEnhancerW2V.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "conv_feature", ",", "word2vec", ")", ":", "\n", "        ", "'''\n        conv_feature: (batch, channel, H * W)\n        '''", "\n", "# (N, C, T) -> (N, T, C)", "\n", "result", "=", "conv_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# print(\"result:\", result.shape)", "\n", "\n", "# vx = self.w2v_proj(word2vec)", "\n", "\n", "# print(\"result:\", result.shape, vx.shape)", "\n", "\n", "# result += vx[:, None]", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "origin_result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "None", ")", ")", "\n", "\n", "origin_result", "=", "result", "\n", "result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "origin_result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "\n", "# (N, T, C) -> (N, C, T)", "\n", "return", "result", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Transformer.__init__": [[449, 496], ["torch.Module.__init__", "model_transformer.Embeddings", "model_transformer.PositionalEncoding", "model_transformer.Encoder", "model_transformer.CatFetDecoder", "model_transformer.clones", "model_transformer.Generator", "model_transformer.Transformer.parameters", "int", "model_transformer.FeatureEnhancer", "int", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "int"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "n_class", ",", "feature_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding_radical", "=", "Embeddings", "(", "int", "(", "feature_size", "/", "2", ")", ",", "n_class", ")", "\n", "\n", "self", ".", "pe", "=", "PositionalEncoding", "(", "d_model", "=", "int", "(", "feature_size", "/", "2", ")", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", "\n", "\n", "feature_reso", "=", "cfg", ".", "MODEL", ".", "ROI_REC_HEAD", ".", "POOLER_RESOLUTION", "\n", "\n", "self", ".", "feature_2Datt", "=", "None", "\n", "if", "cfg", ".", "MODEL", ".", "ROI_REC_HEAD", ".", "TRANSFORMER", ".", "FEATURE_2DATT", ":", "\n", "            ", "self", ".", "feature_2Datt", "=", "FeatureEnhancer", "(", "\n", "feature_size", "=", "feature_size", ",", "\n", "head_num", "=", "cfg", ".", "MODEL", ".", "ROI_REC_HEAD", ".", "TRANSFORMER", ".", "HEAD_NUM", ",", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "ROI_REC_HEAD", ".", "TRANSFORMER", ".", "DROPOUT", "\n", ")", "\n", "\n", "", "self", ".", "encoder", "=", "Encoder", "(", "\n", "output_channel", "=", "feature_size", ",", "\n", "global_pooling_size", "=", "(", "int", "(", "feature_reso", "[", "0", "]", "/", "2", ")", ",", "feature_reso", "[", "1", "]", ")", ",", "\n", "encoder2D", "=", "self", ".", "feature_2Datt", "\n", ")", "\n", "\n", "decoder", "=", "CatFetDecoder", "(", "\n", "feature_size", ",", "\n", "head_num", "=", "cfg", ".", "MODEL", ".", "ROI_REC_HEAD", ".", "TRANSFORMER", ".", "HEAD_NUM", ",", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "ROI_REC_HEAD", ".", "TRANSFORMER", ".", "DROPOUT", ",", "\n", ")", "\n", "self", ".", "decoders", "=", "clones", "(", "decoder", ",", "1", ")", "\n", "\n", "self", ".", "generator_radical", "=", "Generator", "(", "feature_size", ",", "n_class", ")", "\n", "\n", "# Official init from torch repo", "\n", "# print(\"Initializing weights...\")", "\n", "'''\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                init.kaiming_normal(m.weight.data)\n            elif isinstance(m, nn.BatchNorm2d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n        '''", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "self", ".", "attribute", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Transformer.get_attribute_grad": [[497, 500], ["print"], "methods", ["None"], ["", "def", "get_attribute_grad", "(", "self", ")", ":", "\n", "# print(\"attribute\u7684\u503c\u4e3a\",self.attribute)", "\n", "        ", "print", "(", "self", ".", "attribute", ".", "grad_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.Transformer.forward": [[501, 520], ["model_transformer.Transformer.encoder", "model_transformer.Transformer.embedding_radical", "model_transformer.Transformer.pe().cuda", "[].repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_transformer.Transformer.generator_radical", "model_transformer.Transformer.size", "decoder", "model_transformer.Transformer.pe", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "[].repeat.squeeze().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "[].repeat.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "text_length", ",", "text_input", ")", ":", "\n", "\n", "        ", "conv_feature", ",", "global_info", "=", "self", ".", "encoder", "(", "feature", ")", "\n", "\n", "# print(\"conv_feature:\", conv_feature.shape, global_info.shape)", "\n", "\n", "text", "=", "self", ".", "embedding_radical", "(", "text_input", ")", "\n", "blank", "=", "self", ".", "pe", "(", "torch", ".", "zeros", "(", "text", ".", "shape", ")", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "global_info", "=", "(", "global_info", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", ")", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "text", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "# print(\"text:\", text.shape, blank.shape, global_info.shape)", "\n", "result", "=", "torch", ".", "cat", "(", "[", "text", "+", "blank", ",", "global_info", "]", ",", "2", ")", "\n", "batch", ",", "seq_len", ",", "_", "=", "result", ".", "shape", "\n", "\n", "for", "decoder", "in", "self", ".", "decoders", ":", "\n", "            ", "result", "=", "decoder", "(", "result", ",", "global_info", ",", "conv_feature", ",", "text_length", ")", "\n", "", "result", "=", "self", ".", "generator_radical", "(", "result", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.ReasoningTransformer.__init__": [[524, 559], ["torch.Module.__init__", "model_transformer.PositionalEncoding", "model_transformer.FeatureEnhancer", "model_transformer.Encoder", "model_transformer.CatFetDecoder", "model_transformer.clones", "model_transformer.ReasoningTransformer.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", "=", "512", ",", "vec_d", "=", "300", ")", ":", "\n", "        ", "super", "(", "ReasoningTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.embedding_radical = Embeddings(int(feature_size / 2), n_class)", "\n", "self", ".", "pe", "=", "PositionalEncoding", "(", "d_model", "=", "vec_d", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", "\n", "\n", "# feature_reso = cfg.MODEL.ROI_REC_HEAD.POOLER_RESOLUTION", "\n", "\n", "# self.feature_2Datt = None", "\n", "#v if True:", "\n", "self", ".", "feature_2Datt", "=", "FeatureEnhancer", "(", "\n", "feature_size", "=", "feature_size", ",", "\n", "head_num", "=", "4", ",", "\n", "dropout", "=", "True", "\n", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "output_channel", "=", "feature_size", ",", "\n", "input_channel", "=", "feature_size", ",", "\n", "global_pooling_size", "=", "(", "16", ",", "64", ")", ",", "\n", "encoder2D", "=", "self", ".", "feature_2Datt", "\n", ")", "\n", "\n", "decoder", "=", "CatFetDecoder", "(", "\n", "feature_size", ",", "\n", "head_num", "=", "4", ",", "\n", "dropout", "=", "True", ",", "\n", ")", "\n", "self", ".", "decoders", "=", "clones", "(", "decoder", ",", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "self", ".", "attribute", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.ReasoningTransformer.get_attribute_grad": [[560, 562], ["print"], "methods", ["None"], ["", "def", "get_attribute_grad", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "attribute", ".", "grad_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.ReasoningTransformer.forward": [[563, 587], ["model_transformer.ReasoningTransformer.encoder", "word_vector[].repeat", "print", "model_transformer.ReasoningTransformer.pe().cuda", "[].repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_feature.size", "conv_feature.size", "word_vector[].repeat.size", "decoder", "model_transformer.ReasoningTransformer.pe", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "[].repeat.squeeze().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "[].repeat.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "word_vector", ")", ":", "\n", "\n", "        ", "conv_feature", ",", "global_info", "=", "self", ".", "encoder", "(", "feature", ")", "\n", "\n", "# print(\"conv_feature:\", conv_feature.shape, global_info.shape)", "\n", "\n", "# word_vector -> text: [N, C] -> [N, 1, C] -> [N, H * W, C]", "\n", "total_stamp", "=", "conv_feature", ".", "size", "(", "2", ")", "*", "conv_feature", ".", "size", "(", "3", ")", "\n", "text", "=", "word_vector", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "total_stamp", ",", "1", ")", "\n", "\n", "print", "(", "\"text:\"", ",", "text", ".", "shape", ")", "\n", "\n", "blank", "=", "self", ".", "pe", "(", "torch", ".", "zeros", "(", "text", ".", "shape", ")", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# global_info: [N, C, 1, 1] - > [N, C] -> [N, T, C]", "\n", "global_info", "=", "(", "global_info", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", ")", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "text", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "# print(\"text:\", text.shape, blank.shape, global_info.shape)", "\n", "result", "=", "torch", ".", "cat", "(", "[", "text", "+", "blank", ",", "global_info", "]", ",", "2", ")", "\n", "batch", ",", "seq_len", ",", "_", "=", "result", ".", "shape", "\n", "\n", "for", "decoder", "in", "self", ".", "decoders", ":", "\n", "            ", "result", "=", "decoder", "(", "result", ",", "conv_feature", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.clones": [[18, 21], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.subsequent_mask": [[103, 111], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["", "", "def", "subsequent_mask", "(", "size", ")", ":", "\n", "    ", "\"Mask out subsequent positions.\"", "\n", "attn_shape", "=", "(", "1", ",", "size", ",", "size", ")", "\n", "'''\n    \u8fd9\u91cc\u4f7f\u7528\u504f\u79fbk=2\u662f\u56e0\u4e3a\u524d\u9762\u8865\u4f4dembedding\n    '''", "\n", "subsequent_mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "attn_shape", ")", ",", "k", "=", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "torch", ".", "from_numpy", "(", "subsequent_mask", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.attention": [[113, 147], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose", "float"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n", "\n", "# print(mask)", "\n", "# print(\"\u5728attention\u6a21\u5757,q_{0}\".format(query.shape))", "\n", "# print(\"\u5728attention\u6a21\u5757,k_{0}\".format(key.shape))", "\n", "# print(\"\u5728attention\u6a21\u5757,v_{0}\".format(key.shape))", "\n", "# print(\"mask :\",mask)", "\n", "# print(\"mask\u7684\u5c3a\u5bf8\u4e3a\",mask.shape)", "\n", "\n", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# print(mask)", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "# print(\"scores \", scores)", "\n", "'''\n        \u53ef\u89c6\u5316\n        '''", "\n", "# print_scores = scores[0]", "\n", "# print(print_scores)", "\n", "# print(\"scoreshape\",scores.shape)", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# if mask is not None:", "\n", "#     print(\"p_attn\",p_attn)", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.positionalencoding2d": [[149, 172], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "math.log", "torch.sin().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "positionalencoding2d", "(", "d_model", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    :param d_model: dimension of the model\n    :param height: height of the positions\n    :param width: width of the positions\n    :return: d_model*height*width position matrix\n    \"\"\"", "\n", "if", "d_model", "%", "4", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot use sin/cos positional encoding with \"", "\n", "\"odd dimension (got dim={:d})\"", ".", "format", "(", "d_model", ")", ")", "\n", "", "pe", "=", "torch", ".", "zeros", "(", "d_model", ",", "height", ",", "width", ")", "\n", "# Each dimension use half of d_model", "\n", "d_model", "=", "int", "(", "d_model", "/", "2", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pos_w", "=", "torch", ".", "arange", "(", "0.", ",", "width", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pos_h", "=", "torch", ".", "arange", "(", "0.", ",", "height", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pe", "[", "0", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "1", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "d_model", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "pe", "[", "d_model", "+", "1", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "\n", "return", "pe", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer._get_acctivation": [[590, 596], ["None"], "function", ["None"], ["", "", "def", "_get_acctivation", "(", "name", ")", ":", "\n", "\n", "    ", "if", "name", "==", "'relu'", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n", "        ", "return", "F", ".", "sigmoid", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.test": [[598, 610], ["Transformer().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "image.cuda.cuda", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "text.cuda.cuda", "print", "Transformer().cuda.", "model_transformer.Transformer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "\n", "    ", "transformer", "=", "Transformer", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "image", "=", "torch", ".", "Tensor", "(", "2", ",", "3", ",", "128", ",", "400", ")", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "text", "=", "torch", ".", "Tensor", "(", "2", ",", "36", ")", ".", "long", "(", ")", "\n", "text", "=", "text", ".", "cuda", "(", ")", "\n", "\n", "\n", "result", "=", "transformer", "(", "text", ",", "image", ")", "[", "'result'", "]", "\n", "print", "(", "result", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.test_case_decoder": [[612, 634], ["TransformOCR", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "encoder.cuda.cuda", "image.cuda.cuda", "encoder.cuda.", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "text.cuda.cuda", "Decoder().cuda", "Decoder().cuda.", "print", "model_transformer.Decoder"], "function", ["None"], ["", "def", "test_case_decoder", "(", ")", ":", "\n", "\n", "# mask = subsequent_mask(37)", "\n", "# print(mask)", "\n", "# exit(0)", "\n", "\n", "    ", "encoder", "=", "TransformOCR", "(", ")", "\n", "image", "=", "torch", ".", "Tensor", "(", "2", ",", "3", ",", "128", ",", "400", ")", "\n", "\n", "encoder", "=", "encoder", ".", "cuda", "(", ")", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "\n", "conv_feature", ",", "holistic_feature", "=", "encoder", "(", "image", ")", "\n", "\n", "text", "=", "torch", ".", "Tensor", "(", "2", ",", "36", ",", "512", ")", "\n", "text", "=", "text", ".", "cuda", "(", ")", "\n", "# global_info = torch.Tensor(2,1,512).cuda()", "\n", "\n", "decoder", "=", "Decoder", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "decoder", "(", "text", ",", "holistic_feature", ",", "conv_feature", ")", "\n", "print", "(", "result", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.test_case_encoder": [[639, 649], ["TransformOCR", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "encoder.cuda.cuda", "image.cuda.cuda", "encoder.cuda.", "print"], "function", ["None"], ["", "def", "test_case_encoder", "(", ")", ":", "\n", "\n", "    ", "encoder", "=", "TransformOCR", "(", ")", "\n", "image", "=", "torch", ".", "Tensor", "(", "2", ",", "3", ",", "128", ",", "400", ")", "\n", "\n", "encoder", "=", "encoder", ".", "cuda", "(", ")", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "encoder", "(", "image", ")", "\n", "print", "(", "result", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionRecognitionHead.__init__": [[16, 25], ["torch.nn.Module.__init__", "attention_recognition_head.DecoderUnit"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "max_len_labels", ",", "in_planes", "=", "512", ",", "sDim", "=", "512", ",", "attDim", "=", "512", ")", ":", "\n", "    ", "super", "(", "AttentionRecognitionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "# this is the output classes. So it includes the <EOS>.", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "\n", "self", ".", "decoder", "=", "DecoderUnit", "(", "sDim", "=", "sDim", ",", "xDim", "=", "in_planes", ",", "yDim", "=", "num_classes", ",", "attDim", "=", "attDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionRecognitionHead.forward": [[26, 42], ["x.size", "torch.zeros", "range", "torch.cat", "max", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.cat.append", "torch.zeros().fill_", "_.unsqueeze", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "targets", ",", "lengths", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "max", "(", "lengths", ")", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "# the last one is used as the <BOS>.", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "targets", "[", ":", ",", "i", "-", "1", "]", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "[", "_", ".", "unsqueeze", "(", "1", ")", "for", "_", "in", "outputs", "]", ",", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionRecognitionHead.sample": [[44, 66], ["x.size", "torch.zeros", "range", "torch.cat", "torch.cat", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.softmax", "torch.nn.functional.softmax.max", "torch.cat.append", "torch.cat.append", "torch.zeros().fill_", "predicted.unsqueeze", "score.unsqueeze", "torch.zeros"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "_", ",", "_", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "\n", "predicted_ids", ",", "predicted_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "predicted", "\n", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "score", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "predicted_ids", ".", "append", "(", "predicted", ".", "unsqueeze", "(", "1", ")", ")", "\n", "predicted_scores", ".", "append", "(", "score", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "predicted_ids", "=", "torch", ".", "cat", "(", "predicted_ids", ",", "1", ")", "\n", "predicted_scores", "=", "torch", ".", "cat", "(", "predicted_scores", ",", "1", ")", "\n", "# return predicted_ids.squeeze(), predicted_scores.squeeze()", "\n", "return", "predicted_ids", ",", "predicted_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionRecognitionHead.beam_search": [[67, 183], ["x.size", "x.unsqueeze().permute().repeat().permute().contiguous().view", "torch.zeros", "torch.Tensor", "scores.view.fill_", "scores.view.index_fill_", "torch.zeros().fill_", "list", "list", "list", "range", "list", "stored_scores[].view().topk", "sorted_score.clone", "sorted_score.clone.topk", "range", "tensor.repeat", "torch.Tensor().long", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.log_softmax", "attention_recognition_head.AttentionRecognitionHead.beam_search._inflate"], "methods", ["None"], ["", "def", "beam_search", "(", "self", ",", "x", ",", "beam_width", ",", "eos", ")", ":", "\n", "\n", "    ", "def", "_inflate", "(", "tensor", ",", "times", ",", "dim", ")", ":", "\n", "      ", "repeat_dims", "=", "[", "1", "]", "*", "tensor", ".", "dim", "(", ")", "\n", "repeat_dims", "[", "dim", "]", "=", "times", "\n", "return", "tensor", ".", "repeat", "(", "*", "repeat_dims", ")", "\n", "\n", "# https://github.com/IBM/pytorch-seq2seq/blob/fede87655ddce6c94b38886089e05321dc9802af/seq2seq/models/TopKDecoder.py", "\n", "", "batch_size", ",", "l", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "# inflated_encoder_feats = _inflate(encoder_feats, beam_width, 0) # ABC --> AABBCC -/-> ABCABC", "\n", "inflated_encoder_feats", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "repeat", "(", "(", "beam_width", ",", "1", ",", "1", ",", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "l", ",", "d", ")", "\n", "\n", "# Initialize the decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", "*", "beam_width", ",", "self", ".", "sDim", ")", "\n", "pos_index", "=", "(", "torch", ".", "Tensor", "(", "range", "(", "batch_size", ")", ")", "*", "beam_width", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Initialize the scores", "\n", "sequence_scores", "=", "torch", ".", "Tensor", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "sequence_scores", ".", "fill_", "(", "-", "float", "(", "'Inf'", ")", ")", "\n", "sequence_scores", ".", "index_fill_", "(", "0", ",", "torch", ".", "Tensor", "(", "[", "i", "*", "beam_width", "for", "i", "in", "range", "(", "0", ",", "batch_size", ")", "]", ")", ".", "long", "(", ")", ",", "0.0", ")", "\n", "# sequence_scores.fill_(0.0)", "\n", "\n", "# Initialize the input vector", "\n", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", "*", "beam_width", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "# Store decisions for backtracking", "\n", "stored_scores", "=", "list", "(", ")", "\n", "stored_predecessors", "=", "list", "(", ")", "\n", "stored_emitted_symbols", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "output", ",", "state", "=", "self", ".", "decoder", "(", "inflated_encoder_feats", ",", "state", ",", "y_prev", ")", "\n", "log_softmax_output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "sequence_scores", "=", "_inflate", "(", "sequence_scores", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "sequence_scores", "+=", "log_softmax_output", "\n", "scores", ",", "candidates", "=", "sequence_scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "topk", "(", "beam_width", ",", "dim", "=", "1", ")", "\n", "\n", "# Reshape input = (bk, 1) and sequence_scores = (bk, 1)", "\n", "y_prev", "=", "(", "candidates", "%", "self", ".", "num_classes", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "sequence_scores", "=", "scores", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "\n", "# Update fields for next timestep", "\n", "predecessors", "=", "(", "candidates", "/", "self", ".", "num_classes", "+", "pos_index", ".", "expand_as", "(", "candidates", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "state", "=", "state", ".", "index_select", "(", "1", ",", "predecessors", ".", "squeeze", "(", ")", ")", "\n", "\n", "# Update sequence socres and erase scores for <eos> symbol so that they aren't expanded", "\n", "stored_scores", ".", "append", "(", "sequence_scores", ".", "clone", "(", ")", ")", "\n", "eos_indices", "=", "y_prev", ".", "view", "(", "-", "1", ",", "1", ")", ".", "eq", "(", "eos", ")", "\n", "if", "eos_indices", ".", "nonzero", "(", ")", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "sequence_scores", ".", "masked_fill_", "(", "eos_indices", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Cache results for backtracking", "\n", "", "stored_predecessors", ".", "append", "(", "predecessors", ")", "\n", "stored_emitted_symbols", ".", "append", "(", "y_prev", ")", "\n", "\n", "# Do backtracking to return the optimal values", "\n", "#====== backtrak ======#", "\n", "# Initialize return variables given different types", "\n", "", "p", "=", "list", "(", ")", "\n", "l", "=", "[", "[", "self", ".", "max_len_labels", "]", "*", "beam_width", "for", "_", "in", "range", "(", "batch_size", ")", "]", "# Placeholder for lengths of top-k sequences", "\n", "\n", "# the last step output of the beams are not sorted", "\n", "# thus they are sorted here", "\n", "sorted_score", ",", "sorted_idx", "=", "stored_scores", "[", "-", "1", "]", ".", "view", "(", "batch_size", ",", "beam_width", ")", ".", "topk", "(", "beam_width", ")", "\n", "# initialize the sequence scores with the sorted last step beam scores", "\n", "s", "=", "sorted_score", ".", "clone", "(", ")", "\n", "\n", "batch_eos_found", "=", "[", "0", "]", "*", "batch_size", "# the number of EOS found", "\n", "# in the backward loop below for each batch", "\n", "t", "=", "self", ".", "max_len_labels", "-", "1", "\n", "# initialize the back pointer with the sorted order of the last step beams.", "\n", "# add pos_index for indexing variable with b*k as the first dimension.", "\n", "t_predecessors", "=", "(", "sorted_idx", "+", "pos_index", ".", "expand_as", "(", "sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "while", "t", ">=", "0", ":", "\n", "# Re-order the variables with the back pointer", "\n", "      ", "current_symbol", "=", "stored_emitted_symbols", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", "\n", "t_predecessors", "=", "stored_predecessors", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", ".", "squeeze", "(", ")", "\n", "eos_indices", "=", "stored_emitted_symbols", "[", "t", "]", ".", "eq", "(", "eos", ")", ".", "nonzero", "(", ")", "\n", "if", "eos_indices", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "eos_indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# Indices of the EOS symbol for both variables", "\n", "# with b*k as the first dimension, and b, k for", "\n", "# the first two dimensions", "\n", "          ", "idx", "=", "eos_indices", "[", "i", "]", "\n", "b_idx", "=", "int", "(", "idx", "[", "0", "]", "/", "beam_width", ")", "\n", "# The indices of the replacing position", "\n", "# according to the replacement strategy noted above", "\n", "res_k_idx", "=", "beam_width", "-", "(", "batch_eos_found", "[", "b_idx", "]", "%", "beam_width", ")", "-", "1", "\n", "batch_eos_found", "[", "b_idx", "]", "+=", "1", "\n", "res_idx", "=", "b_idx", "*", "beam_width", "+", "res_k_idx", "\n", "\n", "# Replace the old information in return variables", "\n", "# with the new ended sequence information", "\n", "t_predecessors", "[", "res_idx", "]", "=", "stored_predecessors", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "current_symbol", "[", "res_idx", "]", "=", "stored_emitted_symbols", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "s", "[", "b_idx", ",", "res_k_idx", "]", "=", "stored_scores", "[", "t", "]", "[", "idx", "[", "0", "]", ",", "[", "0", "]", "]", "\n", "l", "[", "b_idx", "]", "[", "res_k_idx", "]", "=", "t", "+", "1", "\n", "\n", "# record the back tracked results", "\n", "", "", "p", ".", "append", "(", "current_symbol", ")", "\n", "\n", "t", "-=", "1", "\n", "\n", "# Sort and re-order again as the added ended sequences may change", "\n", "# the order (very unlikely)", "\n", "", "s", ",", "re_sorted_idx", "=", "s", ".", "topk", "(", "beam_width", ")", "\n", "for", "b_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "l", "[", "b_idx", "]", "=", "[", "l", "[", "b_idx", "]", "[", "k_idx", ".", "item", "(", ")", "]", "for", "k_idx", "in", "re_sorted_idx", "[", "b_idx", ",", ":", "]", "]", "\n", "\n", "", "re_sorted_idx", "=", "(", "re_sorted_idx", "+", "pos_index", ".", "expand_as", "(", "re_sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "\n", "# Reverse the sequences and re-order at the same time", "\n", "# It is reversed because the backtracking happens in reverse time order", "\n", "p", "=", "[", "step", ".", "index_select", "(", "0", ",", "re_sorted_idx", ")", ".", "view", "(", "batch_size", ",", "beam_width", ",", "-", "1", ")", "for", "step", "in", "reversed", "(", "p", ")", "]", "\n", "p", "=", "torch", ".", "cat", "(", "p", ",", "-", "1", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "p", ",", "torch", ".", "ones_like", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionUnit.__init__": [[186, 196], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "AttentionUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "\n", "self", ".", "sEmbed", "=", "nn", ".", "Linear", "(", "sDim", ",", "attDim", ")", "\n", "self", ".", "xEmbed", "=", "nn", ".", "Linear", "(", "xDim", ",", "attDim", ")", "\n", "self", ".", "wEmbed", "=", "nn", ".", "Linear", "(", "attDim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionUnit.init_weights": [[199, 206], ["torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "sEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "sEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "xEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "xEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "wEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "wEmbed", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.AttentionUnit.forward": [[207, 227], ["x.contiguous().view.contiguous().view.size", "x.contiguous().view.contiguous().view.contiguous().view", "attention_recognition_head.AttentionUnit.xEmbed", "xProj.view.view.view", "sPrev.squeeze.squeeze.squeeze", "attention_recognition_head.AttentionUnit.sEmbed", "torch.unsqueeze", "sProj.expand.expand.expand", "torch.tanh", "sumTanh.view.view.view", "attention_recognition_head.AttentionUnit.wEmbed", "vProj.view.view.view", "torch.nn.functional.softmax", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ")", ":", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "# [b x T x xDim]", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "xDim", ")", "# [(b x T) x xDim]", "\n", "xProj", "=", "self", ".", "xEmbed", "(", "x", ")", "# [(b x T) x attDim]", "\n", "xProj", "=", "xProj", ".", "view", "(", "batch_size", ",", "T", ",", "-", "1", ")", "# [b x T x attDim]", "\n", "\n", "sPrev", "=", "sPrev", ".", "squeeze", "(", "0", ")", "\n", "sProj", "=", "self", ".", "sEmbed", "(", "sPrev", ")", "# [b x attDim]", "\n", "sProj", "=", "torch", ".", "unsqueeze", "(", "sProj", ",", "1", ")", "# [b x 1 x attDim]", "\n", "sProj", "=", "sProj", ".", "expand", "(", "batch_size", ",", "T", ",", "self", ".", "attDim", ")", "# [b x T x attDim]", "\n", "\n", "sumTanh", "=", "torch", ".", "tanh", "(", "sProj", "+", "xProj", ")", "\n", "sumTanh", "=", "sumTanh", ".", "view", "(", "-", "1", ",", "self", ".", "attDim", ")", "\n", "\n", "vProj", "=", "self", ".", "wEmbed", "(", "sumTanh", ")", "# [(b x T) x 1]", "\n", "vProj", "=", "vProj", ".", "view", "(", "batch_size", ",", "T", ")", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "vProj", ",", "dim", "=", "1", ")", "# attention weights for each sample in the minibatch", "\n", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.DecoderUnit.__init__": [[230, 242], ["torch.nn.Module.__init__", "attention_recognition_head.AttentionUnit", "torch.nn.Embedding", "torch.nn.GRU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "yDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "DecoderUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "yDim", "=", "yDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "emdDim", "=", "attDim", "\n", "\n", "self", ".", "attention_unit", "=", "AttentionUnit", "(", "sDim", ",", "xDim", ",", "attDim", ")", "\n", "self", ".", "tgt_embedding", "=", "nn", ".", "Embedding", "(", "yDim", "+", "1", ",", "self", ".", "emdDim", ")", "# the last is used for <BOS> ", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", "=", "xDim", "+", "self", ".", "emdDim", ",", "hidden_size", "=", "sDim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sDim", ",", "yDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.DecoderUnit.init_weights": [[245, 249], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "tgt_embedding", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "self", ".", "fc", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.attention_recognition_head.DecoderUnit.forward": [[250, 263], ["x.size", "attention_recognition_head.DecoderUnit.attention_unit", "torch.bmm().squeeze", "attention_recognition_head.DecoderUnit.tgt_embedding", "attention_recognition_head.DecoderUnit.gru", "attention_recognition_head.DecoderUnit.squeeze", "attention_recognition_head.DecoderUnit.fc", "yPrev.long", "torch.cat().unsqueeze", "torch.bmm", "attention_recognition_head.DecoderUnit.unsqueeze", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ",", "yPrev", ")", ":", "\n", "# x: feature sequence from the image decoder.", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "alpha", "=", "self", ".", "attention_unit", "(", "x", ",", "sPrev", ")", "\n", "context", "=", "torch", ".", "bmm", "(", "alpha", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "#", "\n", "yProj", "=", "self", ".", "tgt_embedding", "(", "yPrev", ".", "long", "(", ")", ")", "\n", "# self.gru.flatten_parameters()", "\n", "output", ",", "state", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "[", "yProj", ",", "context", "]", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "sPrev", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "output", "=", "self", ".", "fc", "(", "output", ")", "\n", "return", "output", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.gumbel_softmax.sample_gumbel": [[8, 11], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.autograd.Variable", "torch.rand", "torch.rand", "torch.rand", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["def", "sample_gumbel", "(", "shape", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "return", "-", "Variable", "(", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.gumbel_softmax.gumbel_softmax_sample": [[12, 15], ["torch.softmax", "torch.log_softmax", "gumbel_softmax.sample_gumbel", "logits.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.gumbel_softmax.sample_gumbel"], ["", "def", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", ":", "\n", "    ", "y", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ")", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.gumbel_softmax.gumbel_softmax": [[16, 28], ["gumbel_softmax.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.gumbel_softmax.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "0.8", ")", ":", "\n", "    ", "\"\"\"\n    input: [*, n_class]\n    return: [*, n_class] an one-hot vector\n    \"\"\"", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "shape", "=", "y", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "return", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tps_spatial_transformer.TPSSpatialTransformer.__init__": [[56, 96], ["torch.Module.__init__", "tps_spatial_transformer.build_output_control_points", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tps_spatial_transformer.compute_partial_repr", "forward_kernel[].copy_", "forward_kernel[].fill_", "forward_kernel[].fill_", "forward_kernel[].copy_", "forward_kernel[].copy_", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.compute_partial_repr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "build_output_control_points.transpose", "itertools.product", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.build_output_control_points", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr"], ["  ", "def", "__init__", "(", "self", ",", "output_image_size", "=", "None", ",", "num_control_points", "=", "None", ",", "margins", "=", "None", ")", ":", "\n", "    ", "super", "(", "TPSSpatialTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_image_size", "=", "output_image_size", "\n", "self", ".", "num_control_points", "=", "num_control_points", "\n", "self", ".", "margins", "=", "margins", "\n", "\n", "self", ".", "target_height", ",", "self", ".", "target_width", "=", "output_image_size", "\n", "target_control_points", "=", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", "\n", "N", "=", "num_control_points", "\n", "# N = N - 4", "\n", "\n", "# create padded kernel matrix", "\n", "forward_kernel", "=", "torch", ".", "zeros", "(", "N", "+", "3", ",", "N", "+", "3", ")", "\n", "target_control_partial_repr", "=", "compute_partial_repr", "(", "target_control_points", ",", "target_control_points", ")", "\n", "forward_kernel", "[", ":", "N", ",", ":", "N", "]", ".", "copy_", "(", "target_control_partial_repr", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "3", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", "-", "3", ",", ":", "N", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "2", ":", "]", ".", "copy_", "(", "target_control_points", ")", "\n", "forward_kernel", "[", "-", "2", ":", ",", ":", "N", "]", ".", "copy_", "(", "target_control_points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "# compute inverse matrix", "\n", "inverse_kernel", "=", "torch", ".", "inverse", "(", "forward_kernel", ")", "\n", "\n", "# create target cordinate matrix", "\n", "HW", "=", "self", ".", "target_height", "*", "self", ".", "target_width", "\n", "target_coordinate", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "self", ".", "target_height", ")", ",", "range", "(", "self", ".", "target_width", ")", ")", ")", "\n", "target_coordinate", "=", "torch", ".", "Tensor", "(", "target_coordinate", ")", "# HW x 2", "\n", "Y", ",", "X", "=", "target_coordinate", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "Y", "=", "Y", "/", "(", "self", ".", "target_height", "-", "1", ")", "\n", "X", "=", "X", "/", "(", "self", ".", "target_width", "-", "1", ")", "\n", "target_coordinate", "=", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "1", ")", "# convert from (y, x) to (x, y)", "\n", "target_coordinate_partial_repr", "=", "compute_partial_repr", "(", "target_coordinate", ",", "target_control_points", ")", "\n", "target_coordinate_repr", "=", "torch", ".", "cat", "(", "[", "\n", "target_coordinate_partial_repr", ",", "torch", ".", "ones", "(", "HW", ",", "1", ")", ",", "target_coordinate", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# register precomputed matrices", "\n", "self", ".", "register_buffer", "(", "'inverse_kernel'", ",", "inverse_kernel", ")", "\n", "self", ".", "register_buffer", "(", "'padding_matrix'", ",", "torch", ".", "zeros", "(", "3", ",", "2", ")", ")", "\n", "self", ".", "register_buffer", "(", "'target_coordinate_repr'", ",", "target_coordinate_repr", ")", "\n", "self", ".", "register_buffer", "(", "'target_control_points'", ",", "target_control_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tps_spatial_transformer.TPSSpatialTransformer.forward": [[97, 113], ["source_control_points.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "tps_spatial_transformer.grid_sample", "source_control_points.ndimension", "source_control_points.size", "source_control_points.size", "tps_spatial_transformer.TPSSpatialTransformer.padding_matrix.expand"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_control_points", ")", ":", "\n", "    ", "assert", "source_control_points", ".", "ndimension", "(", ")", "==", "3", "\n", "assert", "source_control_points", ".", "size", "(", "1", ")", "==", "self", ".", "num_control_points", "\n", "assert", "source_control_points", ".", "size", "(", "2", ")", "==", "2", "\n", "batch_size", "=", "source_control_points", ".", "size", "(", "0", ")", "\n", "\n", "Y", "=", "torch", ".", "cat", "(", "[", "source_control_points", ",", "self", ".", "padding_matrix", ".", "expand", "(", "batch_size", ",", "3", ",", "2", ")", "]", ",", "1", ")", "\n", "mapping_matrix", "=", "torch", ".", "matmul", "(", "self", ".", "inverse_kernel", ",", "Y", ")", "\n", "source_coordinate", "=", "torch", ".", "matmul", "(", "self", ".", "target_coordinate_repr", ",", "mapping_matrix", ")", "\n", "\n", "grid", "=", "source_coordinate", ".", "view", "(", "-", "1", ",", "self", ".", "target_height", ",", "self", ".", "target_width", ",", "2", ")", "\n", "grid", "=", "torch", ".", "clamp", "(", "grid", ",", "0", ",", "1", ")", "# the source_control_points may be out of [0, 1].", "\n", "# the input to grid_sample is normalized [-1, 1], but what we get is [0, 1]", "\n", "grid", "=", "2.0", "*", "grid", "-", "1.0", "\n", "output_maps", "=", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", "\n", "return", "output_maps", ",", "source_coordinate", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tps_spatial_transformer.grid_sample": [[10, 19], ["torch.grid_sample", "input.data.new().fill_", "torch.grid_sample", "input.data.new", "input.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", ":", "\n", "  ", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "if", "canvas", "is", "None", ":", "\n", "    ", "return", "output", "\n", "", "else", ":", "\n", "    ", "input_mask", "=", "input", ".", "data", ".", "new", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", "\n", "output_mask", "=", "F", ".", "grid_sample", "(", "input_mask", ",", "grid", ")", "\n", "padded_output", "=", "output", "*", "output_mask", "+", "canvas", "*", "(", "1", "-", "output_mask", ")", "\n", "return", "padded_output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tps_spatial_transformer.compute_partial_repr": [[22, 35], ["input_points.size", "control_points.size", "repr_matrix.masked_fill_", "input_points.view", "control_points.view", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "", "def", "compute_partial_repr", "(", "input_points", ",", "control_points", ")", ":", "\n", "  ", "N", "=", "input_points", ".", "size", "(", "0", ")", "\n", "M", "=", "control_points", ".", "size", "(", "0", ")", "\n", "pairwise_diff", "=", "input_points", ".", "view", "(", "N", ",", "1", ",", "2", ")", "-", "control_points", ".", "view", "(", "1", ",", "M", ",", "2", ")", "\n", "# original implementation, very slow", "\n", "# pairwise_dist = torch.sum(pairwise_diff ** 2, dim = 2) # square of distance", "\n", "pairwise_diff_square", "=", "pairwise_diff", "*", "pairwise_diff", "\n", "pairwise_dist", "=", "pairwise_diff_square", "[", ":", ",", ":", ",", "0", "]", "+", "pairwise_diff_square", "[", ":", ",", ":", ",", "1", "]", "\n", "repr_matrix", "=", "0.5", "*", "pairwise_dist", "*", "torch", ".", "log", "(", "pairwise_dist", ")", "\n", "# fix numerical error for 0 * log(0), substitute all nan with 0", "\n", "mask", "=", "repr_matrix", "!=", "repr_matrix", "\n", "repr_matrix", ".", "masked_fill_", "(", "mask", ",", "0", ")", "\n", "return", "repr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tps_spatial_transformer.build_output_control_points": [[38, 51], ["numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", ":", "\n", "  ", "margin_x", ",", "margin_y", "=", "margins", "\n", "num_ctrl_pts_per_side", "=", "num_control_points", "//", "2", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin_x", ",", "1.0", "-", "margin_x", ",", "num_ctrl_pts_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "margin_y", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "(", "1.0", "-", "margin_y", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "# ctrl_pts_top = ctrl_pts_top[1:-1,:]", "\n", "# ctrl_pts_bottom = ctrl_pts_bottom[1:-1,:]", "\n", "output_ctrl_pts_arr", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "output_ctrl_pts", "=", "torch", ".", "Tensor", "(", "output_ctrl_pts_arr", ")", "\n", "return", "output_ctrl_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.TSRN.__init__": [[19, 60], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "setattr", "block_.append", "setattr", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "tsrn.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "math.log", "tsrn.RecurrentResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "width", "=", "128", ",", "height", "=", "32", ",", "STN", "=", "False", ",", "srb_nums", "=", "5", ",", "mask", "=", "True", ",", "hidden_units", "=", "32", ")", ":", "\n", "        ", "super", "(", "TSRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "# nn.ReLU()", "\n", ")", "\n", "self", ".", "srb_nums", "=", "srb_nums", "\n", "for", "i", "in", "range", "(", "srb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "RecurrentResidualBlock", "(", "2", "*", "hidden_units", ")", ")", "\n", "\n", "", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "hidden_units", ")", "\n", ")", ")", "\n", "\n", "# self.non_local = NonLocalBlock2D(64, 64)", "\n", "block_", "=", "[", "UpsampleBLock", "(", "2", "*", "hidden_units", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.TSRN.forward": [[61, 79], ["range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tsrn.TSRN.stn_head", "tsrn.TSRN.tps", "tsrn.TSRN.block1", "getattr", "getattr", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# embed()", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "srb_nums", "+", "1", ")", ":", "\n", "            ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "srb_nums", "+", "3", ")", ")", "(", "(", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", ")", "\n", "\n", "# print(\"block_keys:\", block.keys())", "\n", "# print(\"output:\", output.shape)", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.InfoGen.__init__": [[82, 100], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "t_emb", ",", "\n", "output_size", "\n", ")", ":", "\n", "        ", "super", "(", "InfoGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "t_emb", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "tconv4", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "output_size", ",", "3", ",", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.InfoGen.forward": [[101, 109], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "tsrn.InfoGen.bn1", "tsrn.InfoGen.bn2", "tsrn.InfoGen.bn3", "tsrn.InfoGen.bn4", "tsrn.InfoGen.tconv1", "tsrn.InfoGen.tconv2", "tsrn.InfoGen.tconv3", "tsrn.InfoGen.tconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_embedding", ")", ":", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "tconv1", "(", "t_embedding", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "tconv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "tconv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "tconv4", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.TSRN_TL.__init__": [[112, 177], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "tsrn.InfoGen", "setattr", "block_.append", "setattr", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "tsrn.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "math.log", "tsrn.RecurrentResidualBlockTL", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scale_factor", "=", "2", ",", "\n", "width", "=", "128", ",", "\n", "height", "=", "32", ",", "\n", "STN", "=", "False", ",", "\n", "srb_nums", "=", "5", ",", "\n", "mask", "=", "True", ",", "\n", "hidden_units", "=", "32", ",", "\n", "word_vec_d", "=", "300", ",", "\n", "text_emb", "=", "37", ",", "#26+26+1", "\n", "out_text_channels", "=", "32", ")", ":", "\n", "        ", "super", "(", "TSRN_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "self", ".", "srb_nums", "=", "srb_nums", "\n", "for", "i", "in", "range", "(", "srb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "RecurrentResidualBlockTL", "(", "2", "*", "hidden_units", ",", "out_text_channels", ")", ")", "\n", "\n", "# self.w2v_proj = ImFeat2WordVec(2 * hidden_units, word_vec_d)", "\n", "# self.semantic_R = ReasoningTransformer(2 * hidden_units)", "\n", "\n", "\n", "", "self", ".", "feature_enhancer", "=", "None", "#FeatureEnhancerW2V(", "\n", "#        vec_d=300,", "\n", "#        feature_size=2 * hidden_units,", "\n", "#        head_num=4,", "\n", "#        dropout=True)", "\n", "\n", "# From [1, 1] -> [16, 16]", "\n", "self", ".", "infoGen", "=", "InfoGen", "(", "text_emb", ",", "out_text_channels", ")", "\n", "self", ".", "emb_cls", "=", "text_emb", "\n", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "hidden_units", ")", "\n", ")", ")", "\n", "\n", "# self.non_local = NonLocalBlock2D(64, 64)", "\n", "block_", "=", "[", "UpsampleBLock", "(", "2", "*", "hidden_units", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ",", "\n", "input_size", "=", "self", ".", "tps_inputsize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.TSRN_TL.forward": [[178, 216], ["tsrn.TSRN_TL.infoGen", "torch.interpolate", "torch.interpolate", "range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tsrn.TSRN_TL.stn_head", "tsrn.TSRN_TL.tps", "tsrn.TSRN_TL.block1", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "getattr", "str", "getattr", "getattr", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "text_emb", "=", "None", ")", ":", "\n", "# embed()", "\n", "\n", "# print(\"self.tps_inputsize:\", self.tps_inputsize)", "\n", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "\n", "# all_pred_vecs = []", "\n", "\n", "if", "text_emb", "is", "None", ":", "\n", "            ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "text_emb", "=", "torch", ".", "zeros", "(", "(", "N", ",", "self", ".", "emb_cls", ",", "1", ",", "26", ")", ")", "\n", "\n", "", "spatial_t_emb", "=", "self", ".", "infoGen", "(", "text_emb", ")", "\n", "spatial_t_emb", "=", "F", ".", "interpolate", "(", "spatial_t_emb", ",", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# print(\"x\", x.shape, spatial_t_emb.shape)", "\n", "\n", "# Reasoning block: [2, 3, 4, 5, 6]", "\n", "for", "i", "in", "range", "(", "self", ".", "srb_nums", "+", "1", ")", ":", "\n", "            ", "if", "i", "+", "2", "in", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ":", "\n", "# pred_word_vecs = self.w2v_proj(block[str(i + 1)])", "\n", "# all_pred_vecs.append(pred_word_vecs)", "\n", "# if not self.training:", "\n", "#     word_vecs = pred_word_vecs", "\n", "                ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ",", "spatial_t_emb", ")", "\n", "", "else", ":", "\n", "                ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "srb_nums", "+", "3", ")", ")", "(", "(", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.TSRN_C2F.__init__": [[219, 262], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "setattr", "torch.nn.Conv2d", "torch.nn.Conv2d", "block_.append", "setattr", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "tsrn.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "math.log", "tsrn.RecurrentResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "width", "=", "128", ",", "height", "=", "32", ",", "STN", "=", "False", ",", "srb_nums", "=", "5", ",", "mask", "=", "True", ",", "hidden_units", "=", "32", ")", ":", "\n", "        ", "super", "(", "TSRN_C2F", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "# nn.ReLU()", "\n", ")", "\n", "self", ".", "srb_nums", "=", "srb_nums", "\n", "for", "i", "in", "range", "(", "srb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "RecurrentResidualBlock", "(", "2", "*", "hidden_units", ")", ")", "\n", "\n", "", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "hidden_units", ")", "\n", ")", ")", "\n", "\n", "self", ".", "coarse_proj", "=", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", "\n", "\n", "# self.non_local = NonLocalBlock2D(64, 64)", "\n", "block_", "=", "[", "UpsampleBLock", "(", "2", "*", "hidden_units", "+", "in_planes", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", "+", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.TSRN_C2F.forward": [[263, 284], ["range", "tsrn.TSRN_C2F.coarse_proj", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tsrn.TSRN_C2F.stn_head", "tsrn.TSRN_C2F.tps", "tsrn.TSRN_C2F.block1", "getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# embed()", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "srb_nums", "+", "1", ")", ":", "\n", "            ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "proj_coarse", "=", "self", ".", "coarse_proj", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ")", "\n", "# block[str(srb_nums + 2)] =", "\n", "\n", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "srb_nums", "+", "3", ")", ")", "(", "torch", ".", "cat", "(", "[", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ",", "proj_coarse", "]", ",", "axis", "=", "1", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", ")", "\n", "\n", "# print(\"block_keys:\", block.keys())", "\n", "\n", "return", "output", ",", "proj_coarse", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.SEM_TSRN.__init__": [[287, 344], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "tsrn.ImFeat2WordVec", "setattr", "block_.append", "setattr", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "tsrn.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "math.log", "tsrn.ReasoningResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scale_factor", "=", "2", ",", "\n", "width", "=", "128", ",", "\n", "height", "=", "32", ",", "\n", "STN", "=", "False", ",", "\n", "srb_nums", "=", "5", ",", "\n", "mask", "=", "True", ",", "\n", "hidden_units", "=", "32", ",", "\n", "word_vec_d", "=", "300", ")", ":", "\n", "        ", "super", "(", "SEM_TSRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "self", ".", "srb_nums", "=", "srb_nums", "\n", "for", "i", "in", "range", "(", "srb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "ReasoningResidualBlock", "(", "2", "*", "hidden_units", ")", ")", "\n", "\n", "", "self", ".", "w2v_proj", "=", "ImFeat2WordVec", "(", "2", "*", "hidden_units", ",", "word_vec_d", ")", "\n", "# self.semantic_R = ReasoningTransformer(2 * hidden_units)", "\n", "\n", "self", ".", "feature_enhancer", "=", "None", "#FeatureEnhancerW2V(", "\n", "#        vec_d=300,", "\n", "#        feature_size=2 * hidden_units,", "\n", "#        head_num=4,", "\n", "#        dropout=True)", "\n", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "hidden_units", ")", "\n", ")", ")", "\n", "\n", "# self.non_local = NonLocalBlock2D(64, 64)", "\n", "block_", "=", "[", "UpsampleBLock", "(", "2", "*", "hidden_units", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.SEM_TSRN.forward": [[345, 371], ["range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tsrn.SEM_TSRN.stn_head", "tsrn.SEM_TSRN.tps", "tsrn.SEM_TSRN.block1", "getattr", "tsrn.SEM_TSRN.w2v_proj", "all_pred_vecs.append", "str", "getattr", "getattr", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "word_vecs", "=", "None", ")", ":", "\n", "# embed()", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "\n", "all_pred_vecs", "=", "[", "]", "\n", "\n", "# Reasoning block: [2, 3, 4, 5, 6]", "\n", "for", "i", "in", "range", "(", "self", ".", "srb_nums", "+", "1", ")", ":", "\n", "            ", "if", "i", "+", "2", "in", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ":", "\n", "                ", "pred_word_vecs", "=", "self", ".", "w2v_proj", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "all_pred_vecs", ".", "append", "(", "pred_word_vecs", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "                    ", "word_vecs", "=", "pred_word_vecs", "\n", "", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ",", "self", ".", "feature_enhancer", ",", "word_vecs", ")", "\n", "", "else", ":", "\n", "                ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "srb_nums", "+", "3", ")", ")", "(", "(", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", ")", "\n", "\n", "return", "output", ",", "all_pred_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.RecurrentResidualBlock.__init__": [[374, 384], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.GruBlock", "tsrn.mish", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.GruBlock"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "RecurrentResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru1", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru2", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.RecurrentResidualBlock.forward": [[385, 395], ["tsrn.RecurrentResidualBlock.conv1", "tsrn.RecurrentResidualBlock.bn1", "tsrn.RecurrentResidualBlock.prelu", "tsrn.RecurrentResidualBlock.conv2", "tsrn.RecurrentResidualBlock.bn2", "tsrn.RecurrentResidualBlock.gru1().transpose", "tsrn.RecurrentResidualBlock.gru2", "tsrn.RecurrentResidualBlock.gru1", "tsrn.RecurrentResidualBlock.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "gru1", "(", "residual", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "# residual = self.non_local(residual)", "\n", "\n", "return", "self", ".", "gru2", "(", "x", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.RecurrentResidualBlockTL.__init__": [[398, 408], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.GruBlock", "tsrn.mish", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.GruBlock"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "text_channels", ")", ":", "\n", "        ", "super", "(", "RecurrentResidualBlockTL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru1", "=", "GruBlock", "(", "channels", "+", "text_channels", ",", "channels", ")", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru2", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.RecurrentResidualBlockTL.forward": [[411, 427], ["tsrn.RecurrentResidualBlockTL.conv1", "tsrn.RecurrentResidualBlockTL.bn1", "tsrn.RecurrentResidualBlockTL.prelu", "tsrn.RecurrentResidualBlockTL.conv2", "tsrn.RecurrentResidualBlockTL.bn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tsrn.RecurrentResidualBlockTL.gru1().transpose", "tsrn.RecurrentResidualBlockTL.gru2", "tsrn.RecurrentResidualBlockTL.gru1", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "############ Fusing with TL ############", "\n", "cat_feature", "=", "torch", ".", "cat", "(", "[", "residual", ",", "text_emb", "]", ",", "1", ")", "\n", "# residual = self.concat_conv(cat_feature)", "\n", "########################################", "\n", "\n", "residual", "=", "self", ".", "gru1", "(", "cat_feature", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "# residual = self.non_local(residual)", "\n", "\n", "return", "self", ".", "gru2", "(", "x", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.ReasoningResidualBlock.__init__": [[431, 446], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.mish", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "model_transformer.FeatureEnhancerW2V"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ReasoningResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "# self.gru1 = GruBlock(channels, channels)", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "# self.gru2 = GruBlock(channels, channels)", "\n", "self", ".", "feature_enhancer", "=", "FeatureEnhancerW2V", "(", "\n", "vec_d", "=", "300", ",", "\n", "feature_size", "=", "channels", ",", "\n", "head_num", "=", "4", ",", "\n", "dropout", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.ReasoningResidualBlock.forward": [[447, 462], ["tsrn.ReasoningResidualBlock.conv1", "tsrn.ReasoningResidualBlock.bn1", "tsrn.ReasoningResidualBlock.prelu", "tsrn.ReasoningResidualBlock.conv2", "tsrn.ReasoningResidualBlock.bn2", "residual.resize.resize.view", "tsrn.ReasoningResidualBlock.feature_enhancer", "residual.resize.resize.resize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "feature_enhancer", ",", "wordvec", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "size", "=", "residual", ".", "shape", "\n", "# residual: [N, C, H, W];", "\n", "# wordvec: [N, C_vec]", "\n", "residual", "=", "residual", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "-", "1", ")", "\n", "residual", "=", "self", ".", "feature_enhancer", "(", "residual", ",", "wordvec", ")", "\n", "residual", "=", "residual", ".", "resize", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "\n", "return", "x", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.UpsampleBLock.__init__": [[465, 472], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "tsrn.mish"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "up_scale", ")", ":", "\n", "        ", "super", "(", "UpsampleBLock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "up_scale", ")", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.UpsampleBLock.forward": [[473, 478], ["tsrn.UpsampleBLock.conv", "tsrn.UpsampleBLock.pixel_shuffle", "tsrn.UpsampleBLock.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.mish.__init__": [[481, 484], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "mish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activated", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.mish.forward": [[485, 489], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "activated", ":", "\n", "            ", "x", "=", "x", "*", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.GruBlock.__init__": [[492, 497], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GRU", "torch.nn.GRU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "GruBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "out_channels", "%", "2", "==", "0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "out_channels", ",", "out_channels", "//", "2", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.GruBlock.forward": [[498, 509], ["tsrn.GruBlock.conv1", "x.permute.permute.permute().contiguous", "x.permute.permute.size", "x.permute.permute.view", "tsrn.GruBlock.gru.flatten_parameters", "tsrn.GruBlock.gru", "x.permute.permute.view", "x.permute.permute.permute", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "b", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", "*", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "self", ".", "gru", ".", "flatten_parameters", "(", ")", "\n", "x", ",", "_", "=", "self", ".", "gru", "(", "x", ")", "\n", "# x = self.gru(x)[0]", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.ImFeat2WordVec.__init__": [[512, 516], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ImFeat2WordVec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vec_d", "=", "out_channels", "\n", "self", ".", "vec_proj", "=", "nn", ".", "Linear", "(", "in_channels", ",", "self", ".", "vec_d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.tsrn.ImFeat2WordVec.forward": [[517, 525], ["x.size", "x.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "tsrn.ImFeat2WordVec.vec_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "result", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "result", "=", "torch", ".", "mean", "(", "result", ",", "2", ")", "\n", "pred_vec", "=", "self", ".", "vec_proj", "(", "result", ")", "\n", "\n", "return", "pred_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.TextZoom.__init__": [[19, 54], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "setattr", "block_.append", "setattr", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "net.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "math.log", "net.RecurrentResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "width", "=", "128", ",", "height", "=", "32", ",", "STN", "=", "False", ",", "rrb_nums", "=", "6", ")", ":", "\n", "        ", "super", "(", "TextZoom", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "self", ".", "rrb_nums", "=", "rrb_nums", "\n", "for", "i", "in", "range", "(", "rrb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "RecurrentResidualBlock", "(", "64", ")", ")", "\n", "\n", "", "setattr", "(", "self", ",", "'block%d'", "%", "(", "rrb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", ")", ")", "\n", "block_", "=", "[", "UpsampleBLock", "(", "64", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "rrb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.TextZoom.forward": [[55, 68], ["range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "net.TextZoom.stn_head", "net.TextZoom.tps", "net.TextZoom.block1", "getattr", "getattr", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "rrb_nums", "+", "1", ")", ":", "\n", "            ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "block", "[", "str", "(", "self", ".", "rrb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "rrb_nums", "+", "3", ")", ")", "(", "(", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "rrb_nums", "+", "2", ")", "]", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "rrb_nums", "+", "3", ")", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.RecurrentResidualBlock.__init__": [[71, 81], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "net.GruBlock", "net.mish", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "net.GruBlock"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "RecurrentResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru1", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "# self.prelu = nn.PReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru2", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.RecurrentResidualBlock.forward": [[82, 92], ["net.RecurrentResidualBlock.conv1", "net.RecurrentResidualBlock.bn1", "net.RecurrentResidualBlock.prelu", "net.RecurrentResidualBlock.conv2", "net.RecurrentResidualBlock.bn2", "net.RecurrentResidualBlock.gru1().transpose", "net.RecurrentResidualBlock.gru2", "net.RecurrentResidualBlock.gru1", "net.RecurrentResidualBlock.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "gru1", "(", "residual", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "# residual = self.non_local(residual)", "\n", "\n", "return", "self", ".", "gru2", "(", "x", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.UpsampleBLock.__init__": [[95, 102], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "net.mish"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "up_scale", ")", ":", "\n", "        ", "super", "(", "UpsampleBLock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "up_scale", ")", "\n", "# self.prelu = nn.PReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.UpsampleBLock.forward": [[103, 108], ["net.UpsampleBLock.conv", "net.UpsampleBLock.pixel_shuffle", "net.UpsampleBLock.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.mish.__init__": [[111, 114], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "mish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activated", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.mish.forward": [[115, 119], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "activated", ":", "\n", "            ", "x", "=", "x", "*", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.GruBlock.__init__": [[122, 127], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GRU", "torch.nn.GRU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "GruBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "out_channels", "%", "2", "==", "0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "out_channels", ",", "out_channels", "//", "2", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.net.GruBlock.forward": [[128, 137], ["net.GruBlock.conv1", "x.permute.permute.permute().contiguous", "x.permute.permute.size", "x.permute.permute.view", "net.GruBlock.gru", "x.permute.permute.view", "x.permute.permute.permute", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "b", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", "*", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "x", ",", "_", "=", "self", ".", "gru", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.ResidualDenseBlock_5C.__init__": [[17, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.ResidualDenseBlock_5C.forward": [[30, 37], ["esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.conv5", "esrgan.ResidualDenseBlock_5C.conv1", "esrgan.ResidualDenseBlock_5C.conv2", "esrgan.ResidualDenseBlock_5C.conv3", "esrgan.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.RRDB.__init__": [[42, 47], ["torch.Module.__init__", "esrgan.ResidualDenseBlock_5C", "esrgan.ResidualDenseBlock_5C", "esrgan.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.RRDB.forward": [[48, 53], ["esrgan.RRDB.RDB1", "esrgan.RRDB.RDB2", "esrgan.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.RRDBNet.__init__": [[56, 74], ["torch.Module.__init__", "functools.partial", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "esrgan.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "math.log", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "23", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "self", ".", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "#### upsampling", "\n", "# self.upconv1 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)", "\n", "# self.upconv2 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)", "\n", "# self.upconv3 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)", "\n", "for", "i", "in", "range", "(", "self", ".", "upsample_block_num", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'upconv%d'", "%", "(", "i", "+", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", ")", "\n", "", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.RRDBNet.forward": [[75, 87], ["esrgan.RRDBNet.conv_first", "esrgan.RRDBNet.trunk_conv", "range", "esrgan.RRDBNet.conv_last", "esrgan.RRDBNet.RRDB_trunk", "esrgan.RRDBNet.lrelu", "esrgan.RRDBNet.lrelu", "esrgan.RRDBNet.HRconv", "getattr", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "# fea = self.lrelu(self.upconv1(F.interpolate(fea, scale_factor=2, mode='nearest')))", "\n", "# fea = self.lrelu(self.upconv2(F.interpolate(fea, scale_factor=2, mode='nearest')))", "\n", "# fea = self.lrelu(self.upconv3(F.interpolate(fea, scale_factor=2, mode='nearest')))", "\n", "for", "i", "in", "range", "(", "self", ".", "upsample_block_num", ")", ":", "\n", "            ", "fea", "=", "self", ".", "lrelu", "(", "getattr", "(", "self", ",", "'upconv%d'", "%", "(", "i", "+", "1", ")", ")", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.SubDiscriminator.__init__": [[108, 135], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "esrgan.conv_block", "esrgan.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.conv_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "act_type", "=", "'leakyrelu'", ",", "num_conv_block", "=", "4", ")", ":", "\n", "        ", "super", "(", "SubDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block", "=", "[", "]", "\n", "\n", "in_channels", "=", "3", "\n", "out_channels", "=", "64", "\n", "\n", "for", "_", "in", "range", "(", "num_conv_block", ")", ":", "\n", "            ", "block", "+=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "act_type", "=", "act_type", ",", "pad_type", "=", "None", ",", "\n", "norm_type", "=", "'instancenorm'", ")", "\n", "in_channels", "=", "out_channels", "\n", "block", "+=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "2", ",", "act_type", "=", "act_type", ",", "n_padding", "=", "1", ")", "\n", "out_channels", "*=", "2", "\n", "\n", "", "out_channels", "//=", "2", "\n", "in_channels", "=", "out_channels", "\n", "\n", "block", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ")", "]", "\n", "\n", "self", ".", "feature_extraction", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "self", ".", "classification", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "9", "*", "9", ",", "100", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.SubDiscriminator.forward": [[137, 142], ["esrgan.SubDiscriminator.feature_extraction", "esrgan.SubDiscriminator.view", "esrgan.SubDiscriminator.classification", "esrgan.SubDiscriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extraction", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classification", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.make_layer": [[9, 14], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.esrgan.conv_block": [[89, 105], ["torch.Conv2d", "get_n_padding", "padding", "normalization", "activation", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "function", ["None"], ["", "", "def", "conv_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "act_type", "=", "'leakyrelu'", ",", "pad_type", "=", "'reflection'", ",", "norm_type", "=", "None", ",", "negative_slope", "=", "0.2", ",", "n_prelu", "=", "1", ",", "\n", "inplace", "=", "True", ",", "n_padding", "=", "None", ")", ":", "\n", "    ", "n_pad", "=", "n_padding", "if", "n_padding", "else", "get_n_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "pad", "=", "padding", "(", "pad_type", ",", "n_pad", ")", "if", "pad_type", "else", "None", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "norm", "=", "normalization", "(", "norm_type", ",", "out_channels", ")", "if", "norm_type", "else", "None", "\n", "act", "=", "activation", "(", "act_type", ",", "inplace", "=", "inplace", ",", "negative_slope", "=", "negative_slope", ",", "n_prelu", "=", "n_prelu", ")", "if", "act_type", "else", "None", "\n", "if", "(", "norm", "is", "None", ")", "and", "(", "act_type", "is", "None", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ")", "\n", "", "if", "pad_type", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "conv", ",", "act", ")", "\n", "", "if", "norm", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ",", "act", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ",", "norm", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.sub_pixel.__init__": [[11, 16], ["torch.Module.__init__", "modules.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "act", "=", "False", ")", ":", "\n", "        ", "super", "(", "sub_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "scale", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.sub_pixel.forward": [[17, 20], ["rdn.sub_pixel.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.make_dense.__init__": [[23, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "make_dense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.make_dense.forward": [[28, 32], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rdn.make_dense.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDB.__init__": [[36, 45], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.append", "rdn.make_dense"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nDenselayer", ",", "growthRate", ")", ":", "\n", "        ", "super", "(", "RDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels_", "=", "nChannels", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nDenselayer", ")", ":", "\n", "            ", "modules", ".", "append", "(", "make_dense", "(", "nChannels_", ",", "growthRate", ")", ")", "\n", "nChannels_", "+=", "growthRate", "\n", "", "self", ".", "dense_layers", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv2d", "(", "nChannels_", ",", "nChannels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDB.forward": [[46, 51], ["rdn.RDB.dense_layers", "rdn.RDB.conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dense_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_1x1", "(", "out", ")", "\n", "out", "=", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDN.__init__": [[55, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.RDB", "rdn.RDB", "rdn.RDB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.sub_pixel", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannel", "=", "3", ",", "nDenselayer", "=", "6", ",", "nFeat", "=", "64", ",", "scale_factor", "=", "2", ",", "growthRate", "=", "32", ")", ":", "\n", "        ", "super", "(", "RDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# F-1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannel", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# F0", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# RDBs 3", "\n", "self", ".", "RDB1", "=", "RDB", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ")", "\n", "self", ".", "RDB2", "=", "RDB", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ")", "\n", "self", ".", "RDB3", "=", "RDB", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ")", "\n", "# global feature fusion (GFF)", "\n", "self", ".", "GFF_1x1", "=", "nn", ".", "Conv2d", "(", "nFeat", "*", "3", ",", "nFeat", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "GFF_3x3", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# Upsampler", "\n", "self", ".", "conv_up", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", "*", "scale_factor", "*", "scale_factor", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upsample", "=", "sub_pixel", "(", "scale_factor", ")", "\n", "# conv", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nChannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDN.forward": [[75, 91], ["rdn.RDN.conv1", "rdn.RDN.conv2", "rdn.RDN.RDB1", "rdn.RDN.RDB2", "rdn.RDN.RDB3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rdn.RDN.GFF_1x1", "rdn.RDN.GFF_3x3", "rdn.RDN.conv_up", "rdn.RDN.upsample", "rdn.RDN.conv3"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "F_", "=", "self", ".", "conv1", "(", "x", ")", "\n", "F_0", "=", "self", ".", "conv2", "(", "F_", ")", "\n", "F_1", "=", "self", ".", "RDB1", "(", "F_0", ")", "\n", "F_2", "=", "self", ".", "RDB2", "(", "F_1", ")", "\n", "F_3", "=", "self", ".", "RDB3", "(", "F_2", ")", "\n", "FF", "=", "torch", ".", "cat", "(", "(", "F_1", ",", "F_2", ",", "F_3", ")", ",", "1", ")", "\n", "FdLF", "=", "self", ".", "GFF_1x1", "(", "FF", ")", "\n", "FGF", "=", "self", ".", "GFF_3x3", "(", "FdLF", ")", "\n", "FDF", "=", "FGF", "+", "F_", "\n", "us", "=", "self", ".", "conv_up", "(", "FDF", ")", "\n", "us", "=", "self", ".", "upsample", "(", "us", ")", "\n", "\n", "output", "=", "self", ".", "conv3", "(", "us", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.InfoGen.__init__": [[94, 112], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "t_emb", ",", "\n", "output_size", "\n", ")", ":", "\n", "        ", "super", "(", "InfoGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "t_emb", ",", "512", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "tconv4", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "output_size", ",", "3", ",", "(", "2", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.InfoGen.forward": [[113, 123], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "rdn.InfoGen.bn1", "rdn.InfoGen.bn2", "rdn.InfoGen.bn3", "rdn.InfoGen.bn4", "rdn.InfoGen.tconv1", "rdn.InfoGen.tconv2", "rdn.InfoGen.tconv3", "rdn.InfoGen.tconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_embedding", ")", ":", "\n", "\n", "# t_embedding += noise.to(t_embedding.device)", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "tconv1", "(", "t_embedding", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "tconv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "tconv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "tconv4", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDB_TL.__init__": [[127, 142], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.append", "rdn.make_dense"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "nChannels", ",", "\n", "nDenselayer", ",", "\n", "growthRate", ",", "\n", "out_text_channels", "=", "32", "\n", ")", ":", "\n", "        ", "super", "(", "RDB_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels_", "=", "nChannels", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nDenselayer", ")", ":", "\n", "            ", "modules", ".", "append", "(", "make_dense", "(", "nChannels_", ",", "growthRate", ")", ")", "\n", "nChannels_", "+=", "growthRate", "\n", "", "self", ".", "dense_layers", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv2d", "(", "nChannels_", "+", "out_text_channels", ",", "nChannels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDB_TL.forward": [[143, 154], ["rdn.RDB_TL.dense_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rdn.RDB_TL.conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", ")", ":", "\n", "        ", "out", "=", "self", ".", "dense_layers", "(", "x", ")", "\n", "\n", "############ Fusing with TL ############", "\n", "cat_feature", "=", "torch", ".", "cat", "(", "[", "out", ",", "text_emb", "]", ",", "1", ")", "\n", "# residual = self.concat_conv(cat_feature)", "\n", "########################################", "\n", "\n", "out", "=", "self", ".", "conv_1x1", "(", "cat_feature", ")", "\n", "out", "=", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDN_TL.__init__": [[159, 192], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.RDB_TL", "rdn.RDB_TL", "rdn.RDB_TL", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.sub_pixel", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.InfoGen"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "nChannel", "=", "4", ",", "\n", "nDenselayer", "=", "6", ",", "\n", "nFeat", "=", "64", ",", "\n", "scale_factor", "=", "2", ",", "\n", "growthRate", "=", "32", ",", "\n", "output_size", "=", "(", "32", ",", "128", ")", ",", "\n", "text_emb", "=", "37", ",", "# 26+26+1", "\n", "out_text_channels", "=", "32", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RDN_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# F-1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannel", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# F0", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# RDBs 3", "\n", "self", ".", "RDB1", "=", "RDB_TL", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ",", "out_text_channels", ")", "\n", "self", ".", "RDB2", "=", "RDB_TL", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ",", "out_text_channels", ")", "\n", "self", ".", "RDB3", "=", "RDB_TL", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ",", "out_text_channels", ")", "\n", "# global feature fusion (GFF)", "\n", "self", ".", "GFF_1x1", "=", "nn", ".", "Conv2d", "(", "nFeat", "*", "3", ",", "nFeat", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "GFF_3x3", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# Upsampler", "\n", "self", ".", "conv_up", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", "*", "scale_factor", "*", "scale_factor", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upsample", "=", "sub_pixel", "(", "scale_factor", ")", "\n", "# conv", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nChannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "tps_outputsize", "=", "[", "16", ",", "64", "]", "\n", "\n", "# From [1, 1] -> [16, 16]", "\n", "self", ".", "infoGen", "=", "InfoGen", "(", "text_emb", ",", "out_text_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rdn.RDN_TL.forward": [[193, 212], ["rdn.RDN_TL.infoGen", "torch.interpolate", "torch.interpolate", "torch.interpolate", "rdn.RDN_TL.conv1", "rdn.RDN_TL.conv2", "rdn.RDN_TL.RDB1", "rdn.RDN_TL.RDB2", "rdn.RDN_TL.RDB3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rdn.RDN_TL.GFF_1x1", "rdn.RDN_TL.GFF_3x3", "rdn.RDN_TL.conv_up", "rdn.RDN_TL.upsample", "rdn.RDN_TL.conv3"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", "=", "None", ")", ":", "\n", "        ", "spatial_t_emb", "=", "self", ".", "infoGen", "(", "text_emb", ")", "\n", "spatial_t_emb", "=", "F", ".", "interpolate", "(", "spatial_t_emb", ",", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "F_", "=", "self", ".", "conv1", "(", "x", ")", "\n", "F_0", "=", "self", ".", "conv2", "(", "F_", ")", "\n", "F_1", "=", "self", ".", "RDB1", "(", "F_0", ",", "spatial_t_emb", ")", "\n", "F_2", "=", "self", ".", "RDB2", "(", "F_1", ",", "spatial_t_emb", ")", "\n", "F_3", "=", "self", ".", "RDB3", "(", "F_2", ",", "spatial_t_emb", ")", "\n", "FF", "=", "torch", ".", "cat", "(", "(", "F_1", ",", "F_2", ",", "F_3", ")", ",", "1", ")", "\n", "FdLF", "=", "self", ".", "GFF_1x1", "(", "FF", ")", "\n", "FGF", "=", "self", ".", "GFF_3x3", "(", "FdLF", ")", "\n", "FDF", "=", "FGF", "+", "F_", "\n", "us", "=", "self", ".", "conv_up", "(", "FDF", ")", "\n", "us", "=", "self", ".", "upsample", "(", "us", ")", "\n", "\n", "output", "=", "self", ".", "conv3", "(", "us", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.InfoGen.__init__": [[16, 34], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "t_emb", ",", "\n", "output_size", "\n", ")", ":", "\n", "        ", "super", "(", "InfoGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "t_emb", ",", "512", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "tconv4", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "output_size", ",", "3", ",", "(", "2", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.InfoGen.forward": [[35, 45], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "rrdb.InfoGen.bn1", "rrdb.InfoGen.bn2", "rrdb.InfoGen.bn3", "rrdb.InfoGen.bn4", "rrdb.InfoGen.tconv1", "rrdb.InfoGen.tconv2", "rrdb.InfoGen.tconv3", "rrdb.InfoGen.tconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_embedding", ")", ":", "\n", "\n", "# t_embedding += noise.to(t_embedding.device)", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "tconv1", "(", "t_embedding", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "tconv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "tconv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "tconv4", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.ResidualDenseBlock_5C.__init__": [[48, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.ResidualDenseBlock_5C.forward": [[61, 68], ["rrdb.ResidualDenseBlock_5C.lrelu", "rrdb.ResidualDenseBlock_5C.lrelu", "rrdb.ResidualDenseBlock_5C.lrelu", "rrdb.ResidualDenseBlock_5C.lrelu", "rrdb.ResidualDenseBlock_5C.conv5", "rrdb.ResidualDenseBlock_5C.conv1", "rrdb.ResidualDenseBlock_5C.conv2", "rrdb.ResidualDenseBlock_5C.conv3", "rrdb.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.ResidualDenseBlock_5C_TL.__init__": [[71, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ",", "out_text_channels", "=", "32", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", "+", "out_text_channels", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.ResidualDenseBlock_5C_TL.forward": [[84, 92], ["rrdb.ResidualDenseBlock_5C_TL.lrelu", "rrdb.ResidualDenseBlock_5C_TL.lrelu", "rrdb.ResidualDenseBlock_5C_TL.lrelu", "rrdb.ResidualDenseBlock_5C_TL.lrelu", "rrdb.ResidualDenseBlock_5C_TL.conv5", "rrdb.ResidualDenseBlock_5C_TL.conv1", "rrdb.ResidualDenseBlock_5C_TL.conv2", "rrdb.ResidualDenseBlock_5C_TL.conv3", "rrdb.ResidualDenseBlock_5C_TL.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "text_emb", ")", ",", "1", ")", ")", "\n", "\n", "return", "x5", "*", "0.166", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDB.__init__": [[97, 102], ["torch.Module.__init__", "rrdb.ResidualDenseBlock_5C", "rrdb.ResidualDenseBlock_5C", "rrdb.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDB.forward": [[103, 108], ["rrdb.RRDB.RDB1", "rrdb.RRDB.RDB2", "rrdb.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDB_TL.__init__": [[114, 119], ["torch.Module.__init__", "rrdb.ResidualDenseBlock_5C_TL", "rrdb.ResidualDenseBlock_5C_TL", "rrdb.ResidualDenseBlock_5C_TL"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ",", "out_text_channels", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C_TL", "(", "nf", ",", "gc", ",", "out_text_channels", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C_TL", "(", "nf", ",", "gc", ",", "out_text_channels", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C_TL", "(", "nf", ",", "gc", ",", "out_text_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDB_TL.forward": [[120, 128], ["rrdb.RRDB_TL.RDB1", "rrdb.RRDB_TL.RDB2", "rrdb.RRDB_TL.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "\n", "        ", "(", "x", ",", "text_emb", ")", "=", "x_in", "\n", "\n", "out", "=", "self", ".", "RDB1", "(", "x", ",", "text_emb", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ",", "text_emb", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ",", "text_emb", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDBNet_TL.__init__": [[132, 148], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rrdb.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "23", ",", "gc", "=", "32", ",", "text_emb", "=", "37", ",", "# 26+26+1", "\n", "out_text_channels", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB_TL", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ",", "out_text_channels", "=", "out_text_channels", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "#### upsampling", "\n", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDBNet_TL.forward": [[149, 160], ["rrdb.RRDBNet_TL.conv_first", "rrdb.RRDBNet_TL.trunk_conv", "rrdb.RRDBNet_TL.lrelu", "rrdb.RRDBNet_TL.lrelu", "rrdb.RRDBNet_TL.lrelu", "rrdb.RRDBNet_TL.conv_last", "rrdb.RRDBNet_TL.RRDB_trunk", "rrdb.RRDBNet_TL.upconv1", "rrdb.RRDBNet_TL.upconv2", "rrdb.RRDBNet_TL.upconv3", "rrdb.RRDBNet_TL.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "rrdb.RRDBNet_TL.HRconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", "=", "None", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "(", "fea", ",", "text_emb", ")", ")", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv1", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv2", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv3", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDBNet.__init__": [[164, 179], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rrdb.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "23", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "#### upsampling", "\n", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.RRDBNet.forward": [[180, 191], ["rrdb.RRDBNet.conv_first", "rrdb.RRDBNet.trunk_conv", "rrdb.RRDBNet.lrelu", "rrdb.RRDBNet.lrelu", "rrdb.RRDBNet.lrelu", "rrdb.RRDBNet.conv_last", "rrdb.RRDBNet.RRDB_trunk", "rrdb.RRDBNet.upconv1", "rrdb.RRDBNet.upconv2", "rrdb.RRDBNet.upconv3", "rrdb.RRDBNet.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "rrdb.RRDBNet.HRconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv1", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv2", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv3", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.SubDiscriminator.__init__": [[212, 239], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "rrdb.conv_block", "rrdb.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.conv_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "act_type", "=", "'leakyrelu'", ",", "num_conv_block", "=", "4", ")", ":", "\n", "        ", "super", "(", "SubDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block", "=", "[", "]", "\n", "\n", "in_channels", "=", "3", "\n", "out_channels", "=", "64", "\n", "\n", "for", "_", "in", "range", "(", "num_conv_block", ")", ":", "\n", "            ", "block", "+=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "act_type", "=", "act_type", ",", "pad_type", "=", "None", ",", "\n", "norm_type", "=", "'instancenorm'", ")", "\n", "in_channels", "=", "out_channels", "\n", "block", "+=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "2", ",", "act_type", "=", "act_type", ",", "n_padding", "=", "1", ")", "\n", "out_channels", "*=", "2", "\n", "\n", "", "out_channels", "//=", "2", "\n", "in_channels", "=", "out_channels", "\n", "\n", "block", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ")", "]", "\n", "\n", "self", ".", "feature_extraction", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "self", ".", "classification", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "9", "*", "9", ",", "100", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.SubDiscriminator.forward": [[241, 246], ["rrdb.SubDiscriminator.feature_extraction", "rrdb.SubDiscriminator.view", "rrdb.SubDiscriminator.classification", "rrdb.SubDiscriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extraction", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classification", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.Discriminator.__init__": [[249, 254], ["torch.Module.__init__", "rrdb.SubDiscriminator", "rrdb.SubDiscriminator", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "discriminator_a", "=", "SubDiscriminator", "(", ")", "\n", "self", ".", "discriminator_b", "=", "SubDiscriminator", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.Discriminator.forward": [[255, 259], ["rrdb.Discriminator.discriminator_a", "rrdb.Discriminator.discriminator_b", "rrdb.Discriminator.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "a", "=", "self", ".", "discriminator_a", "(", "a", ")", "\n", "b", "=", "self", ".", "discriminator_b", "(", "b", ")", "\n", "return", "self", ".", "sigmoid", "(", "a", "-", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.make_layer": [[8, 13], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.rrdb.conv_block": [[193, 209], ["torch.Conv2d", "get_n_padding", "padding", "normalization", "activation", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "function", ["None"], ["", "", "def", "conv_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "act_type", "=", "'leakyrelu'", ",", "pad_type", "=", "'reflection'", ",", "norm_type", "=", "None", ",", "negative_slope", "=", "0.2", ",", "n_prelu", "=", "1", ",", "\n", "inplace", "=", "True", ",", "n_padding", "=", "None", ")", ":", "\n", "    ", "n_pad", "=", "n_padding", "if", "n_padding", "else", "get_n_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "pad", "=", "padding", "(", "pad_type", ",", "n_pad", ")", "if", "pad_type", "else", "None", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "norm", "=", "normalization", "(", "norm_type", ",", "out_channels", ")", "if", "norm_type", "else", "None", "\n", "act", "=", "activation", "(", "act_type", ",", "inplace", "=", "inplace", ",", "negative_slope", "=", "negative_slope", ",", "n_prelu", "=", "n_prelu", ")", "if", "act_type", "else", "None", "\n", "if", "(", "norm", "is", "None", ")", "and", "(", "act_type", "is", "None", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ")", "\n", "", "if", "pad_type", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "conv", ",", "act", ")", "\n", "", "if", "norm", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ",", "act", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ",", "norm", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.stn_head.STNHead.__init__": [[26, 58], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_stn", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_stn", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "num_ctrlpoints", ",", "activation", "=", "'none'", ",", "input_size", "=", "(", "32", ",", "128", ")", ")", ":", "\n", "    ", "super", "(", "STNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# print(\"in_planse--------------------------:\", in_planes)", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "num_ctrlpoints", "=", "num_ctrlpoints", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "stn_convnet", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3_block", "(", "in_planes", ",", "32", ")", ",", "# 16*64", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "32", ",", "64", ")", ",", "# 8*32", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "64", ",", "128", ")", ",", "# 4*16", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "128", ",", "256", ")", ",", "# 2*8", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "# for 32 * 128", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ",", "# 1*4,", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "1", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ")", ",", "# for 32 * 128", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ")", "# 1*2", "\n", "\n", "flatten_width", "=", "2", "# int(input_size[1] / 32)", "\n", "# print(\"flw:\", input_size[1] / 32) # for 32 * 128", "\n", "self", ".", "stn_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "flatten_width", "*", "256", ",", "512", ")", ",", "#flatten_width*256", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "stn_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "num_ctrlpoints", "*", "2", ")", "\n", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_convnet", ")", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_fc1", ")", "\n", "self", ".", "init_stn", "(", "self", ".", "stn_fc2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.stn_head.STNHead.init_weights": [[59, 72], ["module.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.stn_head.STNHead.init_stn": [[73, 91], ["int", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate().astype", "stn_fc2.weight.data.zero_", "torch.Tensor().view", "numpy.ones", "numpy.ones", "numpy.concatenate", "torch.Tensor", "numpy.log", "torch.nn.functional.relu", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "", "", "def", "init_stn", "(", "self", ",", "stn_fc2", ")", ":", "\n", "    ", "margin", "=", "0.01", "\n", "sampling_num_per_side", "=", "int", "(", "self", ".", "num_ctrlpoints", "/", "2", ")", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin", ",", "1.", "-", "margin", ",", "sampling_num_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "margin", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "(", "1", "-", "margin", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_points", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# print(ctrl_points.shape)", "\n", "if", "self", ".", "activation", "is", "'none'", ":", "\n", "      ", "pass", "\n", "", "elif", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "ctrl_points", "=", "-", "np", ".", "log", "(", "1.", "/", "ctrl_points", "-", "1.", ")", "\n", "", "elif", "self", ".", "activation", "==", "'relu'", ":", "\n", "      ", "ctrl_points", "=", "F", ".", "relu", "(", "torch", ".", "Tensor", "(", "ctrl_points", ")", ")", "\n", "", "stn_fc2", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "stn_fc2", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "ctrl_points", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.stn_head.STNHead.forward": [[92, 107], ["stn_head.STNHead.stn_convnet", "torch.nn.functional.relu.size", "torch.nn.functional.relu.view", "stn_head.STNHead.stn_fc1", "stn_head.STNHead.stn_fc2", "torch.nn.functional.relu.view", "torch.sigmoid", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "stn_convnet", "(", "x", ")", "\n", "batch_size", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# print(\"x:\", x.shape)", "\n", "\n", "img_feat", "=", "self", ".", "stn_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "stn_fc2", "(", "0.1", "*", "img_feat", ")", "\n", "if", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "      ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_ctrlpoints", ",", "2", ")", "\n", "return", "img_feat", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.stn_head.conv3x3_block": [[13, 23], ["torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["None"], ["def", "conv3x3_block", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "conv_layer", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.bicubic.BICUBIC.__init__": [[7, 10], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "        ", "super", "(", "BICUBIC", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.bicubic.BICUBIC.__call__": [[11, 14], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn._Conv_Block.__init__": [[24, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "_Conv_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cov_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn._Conv_Block.forward": [[52, 55], ["lapsrn._Conv_Block.cov_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "cov_block", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.LapSRN.__init__": [[58, 100], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "lapsrn.LapSRN.make_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "lapsrn.LapSRN.make_layer", "lapsrn.LapSRN.modules", "isinstance", "isinstance", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "m.weight.data.normal_", "m.weight.data.size", "lapsrn.get_upsample_filter", "get_upsample_filter.view().repeat", "math.sqrt", "m.bias.data.zero_", "m.bias.data.zero_", "tuple", "tuple", "get_upsample_filter.view"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.get_upsample_filter"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "in_planes", "=", "3", ",", "STN", "=", "False", ",", "width", "=", "128", ",", "height", "=", "32", ")", ":", "\n", "        ", "super", "(", "LapSRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "conv_input", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "convt_I1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "in_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "convt_R1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "convt_F1", "=", "self", ".", "make_layer", "(", "_Conv_Block", ")", "\n", "\n", "self", ".", "convt_I2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "in_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "convt_R2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "convt_F2", "=", "self", ".", "make_layer", "(", "_Conv_Block", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "c1", ",", "c2", ",", "h", ",", "w", "=", "m", ".", "weight", ".", "data", ".", "size", "(", ")", "\n", "weight", "=", "get_upsample_filter", "(", "h", ")", "\n", "m", ".", "weight", ".", "data", "=", "weight", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ".", "repeat", "(", "c1", ",", "c2", ",", "1", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.LapSRN.make_layer": [[101, 105], ["layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["None"], ["", "", "def", "make_layer", "(", "self", ",", "block", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.LapSRN.forward": [[106, 124], ["lapsrn.LapSRN.relu", "lapsrn.LapSRN.convt_F1", "lapsrn.LapSRN.convt_I1", "lapsrn.LapSRN.convt_R1", "lapsrn.LapSRN.stn_head", "lapsrn.LapSRN.tps", "lapsrn.LapSRN.conv_input", "lapsrn.LapSRN.convt_F2", "lapsrn.LapSRN.convt_I2", "lapsrn.LapSRN.convt_R2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "self", ".", "conv_input", "(", "x", ")", ")", "\n", "\n", "convt_F1", "=", "self", ".", "convt_F1", "(", "out", ")", "\n", "convt_I1", "=", "self", ".", "convt_I1", "(", "x", ")", "\n", "convt_R1", "=", "self", ".", "convt_R1", "(", "convt_F1", ")", "\n", "HR_2x", "=", "convt_I1", "+", "convt_R1", "\n", "if", "self", ".", "scale_factor", "==", "2", ":", "\n", "            ", "return", "HR_2x", "\n", "", "elif", "self", ".", "scale_factor", "==", "4", ":", "\n", "            ", "convt_F2", "=", "self", ".", "convt_F2", "(", "convt_F1", ")", "\n", "convt_I2", "=", "self", ".", "convt_I2", "(", "HR_2x", ")", "\n", "convt_R2", "=", "self", ".", "convt_R2", "(", "convt_F2", ")", "\n", "HR_4x", "=", "convt_I2", "+", "convt_R2", "\n", "", "return", "HR_4x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.L1_Charbonnier_loss.__init__": [[129, 132], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L1_Charbonnier_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.L1_Charbonnier_loss.forward": [[133, 138], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "diff", "=", "torch", ".", "add", "(", "X", ",", "-", "Y", ")", "\n", "error", "=", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "self", ".", "eps", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "error", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.lapsrn.get_upsample_filter": [[10, 21], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "abs", "abs"], "function", ["None"], ["def", "get_upsample_filter", "(", "size", ")", ":", "\n", "    ", "\"\"\"Make a 2D bilinear kernel suitable for upsampling\"\"\"", "\n", "factor", "=", "(", "size", "+", "1", ")", "//", "2", "\n", "if", "size", "%", "2", "==", "1", ":", "\n", "        ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "        ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "size", ",", ":", "size", "]", "\n", "filter", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "return", "torch", ".", "from_numpy", "(", "filter", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.Conv_ReLU_Block.__init__": [[12, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv_ReLU_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.Conv_ReLU_Block.forward": [[17, 19], ["vdsr.Conv_ReLU_Block.relu", "vdsr.Conv_ReLU_Block.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "relu", "(", "self", ".", "conv", "(", "x", ")", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.Conv_ReLU_Block_TL.__init__": [[22, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_text_channels", "=", "32", ")", ":", "\n", "        ", "super", "(", "Conv_ReLU_Block_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", "+", "out_text_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.Conv_ReLU_Block_TL.forward": [[27, 36], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vdsr.Conv_ReLU_Block_TL.relu", "vdsr.Conv_ReLU_Block_TL.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", ")", ":", "\n", "# x, text_emb = x_in", "\n", "# print(\"x.shape\", type(x_in))", "\n", "############ Fusing with TL ############", "\n", "        ", "cat_feature", "=", "torch", ".", "cat", "(", "[", "x", ",", "text_emb", "]", ",", "1", ")", "\n", "# residual = self.concat_conv(cat_feature)", "\n", "########################################", "\n", "\n", "return", "self", ".", "relu", "(", "self", ".", "conv", "(", "cat_feature", ")", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR.__init__": [[40, 67], ["torch.Module.__init__", "vdsr.VDSR.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "vdsr.VDSR.modules", "isinstance", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "m.weight.data.normal_", "math.sqrt", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "in_planes", "=", "3", ",", "width", "=", "32", ",", "height", "=", "128", ",", "STN", "=", "False", ")", ":", "\n", "        ", "super", "(", "VDSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale_factor", "=", "scale_factor", "\n", "self", ".", "residual_layer", "=", "self", ".", "make_layer", "(", "Conv_ReLU_Block", ",", "6", ")", "\n", "self", ".", "input", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "output", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", ",", "width", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "False", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR.make_layer": [[68, 73], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "def", "make_layer", "(", "self", ",", "block", ",", "num_of_layer", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_of_layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR.forward": [[74, 90], ["vdsr.VDSR.relu", "vdsr.VDSR.output", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "vdsr.VDSR.stn_head", "vdsr.VDSR.tps", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "vdsr.VDSR.input", "block"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale_factor", ")", "\n", "", "residual", "=", "x", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "input", "(", "x", ")", ")", "\n", "# out = self.residual_layer(out)", "\n", "\n", "for", "block", "in", "self", ".", "residual_layer", ":", "\n", "            ", "out", "=", "block", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "output", "(", "out", ")", "\n", "out", "=", "torch", ".", "add", "(", "out", ",", "residual", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.InfoGen.__init__": [[93, 111], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "t_emb", ",", "\n", "output_size", "\n", ")", ":", "\n", "        ", "super", "(", "InfoGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "t_emb", ",", "512", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "tconv4", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "output_size", ",", "3", ",", "(", "2", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.InfoGen.forward": [[112, 122], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vdsr.InfoGen.bn1", "vdsr.InfoGen.bn2", "vdsr.InfoGen.bn3", "vdsr.InfoGen.bn4", "vdsr.InfoGen.tconv1", "vdsr.InfoGen.tconv2", "vdsr.InfoGen.tconv3", "vdsr.InfoGen.tconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_embedding", ")", ":", "\n", "\n", "# t_embedding += noise.to(t_embedding.device)", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "tconv1", "(", "t_embedding", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "tconv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "tconv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "tconv4", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.__init__": [[125, 187], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "vdsr.InfoGen", "block", "block", "block", "block", "block", "block", "vdsr.VDSR_TL.modules", "isinstance", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "m.weight.data.normal_", "math.sqrt", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "\n", "in_planes", "=", "4", ",", "\n", "width", "=", "32", ",", "\n", "height", "=", "128", ",", "\n", "STN", "=", "False", ",", "\n", "text_emb", "=", "37", ",", "# 26+26+1", "\n", "out_text_channels", "=", "32", ")", ":", "\n", "\n", "# print(\"in_planes:\", in_planes)", "\n", "\n", "        ", "super", "(", "VDSR_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale_factor", "=", "scale_factor", "\n", "self", ".", "out_text_channels", "=", "out_text_channels", "\n", "# self.residual_layer = self.make_layer(Conv_ReLU_Block_TL, 8)", "\n", "self", ".", "input", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "output", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# From [1, 1] -> [16, 16]", "\n", "self", ".", "infoGen", "=", "InfoGen", "(", "text_emb", ",", "out_text_channels", ")", "\n", "\n", "block", "=", "Conv_ReLU_Block_TL", "\n", "\n", "self", ".", "block1", "=", "block", "(", "self", ".", "out_text_channels", ")", "\n", "self", ".", "block2", "=", "block", "(", "self", ".", "out_text_channels", ")", "\n", "self", ".", "block3", "=", "block", "(", "self", ".", "out_text_channels", ")", "\n", "self", ".", "block4", "=", "block", "(", "self", ".", "out_text_channels", ")", "\n", "self", ".", "block5", "=", "block", "(", "self", ".", "out_text_channels", ")", "\n", "self", ".", "block6", "=", "block", "(", "self", ".", "out_text_channels", ")", "\n", "#self.block7 = block(self.out_text_channels)", "\n", "#self.block8 = block(self.out_text_channels)", "\n", "#self.block9 = block(self.out_text_channels)", "\n", "#self.block10 = block(self.out_text_channels)", "\n", "#self.block11 = block(self.out_text_channels)", "\n", "#self.block12 = block(self.out_text_channels)", "\n", "#self.block13 = block(self.out_text_channels)", "\n", "#self.block14 = block(self.out_text_channels)", "\n", "#self.block15 = block(self.out_text_channels)", "\n", "#self.block16 = block(self.out_text_channels)", "\n", "#self.block17 = block(self.out_text_channels)", "\n", "#self.block18 = block(self.out_text_channels)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "self", ".", "tps_outputsize", "=", "[", "height", ",", "width", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "False", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.make_layer": [[188, 196], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "def", "make_layer", "(", "self", ",", "block", ",", "num_of_layer", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_of_layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "out_text_channels", ")", ")", "\n", "\n", "# self.internal_layers = nn.Sequential(*layers)", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.vdsr.VDSR_TL.forward": [[197, 230], ["vdsr.VDSR_TL.infoGen", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vdsr.VDSR_TL.relu", "vdsr.VDSR_TL.block1", "vdsr.VDSR_TL.block2", "vdsr.VDSR_TL.block3", "vdsr.VDSR_TL.block4", "vdsr.VDSR_TL.block5", "vdsr.VDSR_TL.block6", "vdsr.VDSR_TL.output", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "vdsr.VDSR_TL.stn_head", "vdsr.VDSR_TL.tps", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "vdsr.VDSR_TL.input"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "stn", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale_factor", ")", "\n", "\n", "", "spatial_t_emb", "=", "self", ".", "infoGen", "(", "text_emb", ")", "\n", "spatial_t_emb", "=", "F", ".", "interpolate", "(", "spatial_t_emb", ",", "self", ".", "tps_outputsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "residual", "=", "x", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "input", "(", "x", ")", ")", "\n", "\n", "# for block in self.blocks:", "\n", "# out = self.block1(out, spatial_t_emb)", "\n", "out", "=", "self", ".", "block1", "(", "out", ",", "spatial_t_emb", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ",", "spatial_t_emb", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ",", "spatial_t_emb", ")", "\n", "out", "=", "self", ".", "block4", "(", "out", ",", "spatial_t_emb", ")", "\n", "out", "=", "self", ".", "block5", "(", "out", ",", "spatial_t_emb", ")", "\n", "out", "=", "self", ".", "block6", "(", "out", ",", "spatial_t_emb", ")", "\n", "#out = self.block7(out, spatial_t_emb)", "\n", "#out = self.block8(out, spatial_t_emb)", "\n", "#out = self.block9(out, spatial_t_emb)", "\n", "#out = self.block10(out, spatial_t_emb)", "\n", "\n", "# out, spatial_t_emb = out", "\n", "\n", "# out = self.block1(out, spatial_t_emb)", "\n", "\n", "out", "=", "self", ".", "output", "(", "out", ")", "\n", "out", "=", "torch", ".", "add", "(", "out", ",", "residual", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srcnn.InfoGen.__init__": [[19, 37], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "t_emb", ",", "\n", "output_size", "\n", ")", ":", "\n", "        ", "super", "(", "InfoGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "t_emb", ",", "512", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "tconv4", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "output_size", ",", "3", ",", "(", "2", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srcnn.InfoGen.forward": [[38, 48], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "srcnn.InfoGen.bn1", "srcnn.InfoGen.bn2", "srcnn.InfoGen.bn3", "srcnn.InfoGen.bn4", "srcnn.InfoGen.tconv1", "srcnn.InfoGen.tconv2", "srcnn.InfoGen.tconv3", "srcnn.InfoGen.tconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_embedding", ")", ":", "\n", "\n", "# t_embedding += noise.to(t_embedding.device)", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "tconv1", "(", "t_embedding", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "tconv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "tconv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "tconv4", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srcnn.SRCNN_TL.__init__": [[51, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "srcnn.InfoGen", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scale_factor", "=", "2", ",", "\n", "in_planes", "=", "4", ",", "\n", "STN", "=", "False", ",", "\n", "height", "=", "32", ",", "\n", "width", "=", "128", ",", "\n", "text_emb", "=", "37", ",", "# 26+26+1", "\n", "out_text_channels", "=", "32", "\n", ")", ":", "\n", "        ", "super", "(", "SRCNN_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale_factor", "=", "scale_factor", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", "+", "out_text_channels", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", "+", "out_text_channels", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", "+", "out_text_channels", ",", "in_planes", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "self", ".", "tps_outputsize", "=", "[", "height", ",", "width", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "self", ".", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n", "# From [1, 1] -> [16, 16]", "\n", "", "self", ".", "infoGen", "=", "InfoGen", "(", "text_emb", ",", "out_text_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srcnn.SRCNN_TL.forward": [[86, 107], ["srcnn.SRCNN_TL.infoGen", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "srcnn.SRCNN_TL.conv1", "srcnn.SRCNN_TL.relu1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "srcnn.SRCNN_TL.conv2", "srcnn.SRCNN_TL.relu2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "srcnn.SRCNN_TL.conv3", "srcnn.SRCNN_TL.stn_head", "srcnn.SRCNN_TL.tps", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", "=", "None", ")", ":", "\n", "# print(\"x\", x.shape, text_emb.shape)", "\n", "\n", "        ", "if", "self", ".", "stn", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale_factor", ")", "\n", "\n", "", "spatial_t_emb", "=", "self", ".", "infoGen", "(", "text_emb", ")", "\n", "spatial_t_emb", "=", "F", ".", "interpolate", "(", "spatial_t_emb", ",", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "spatial_t_emb", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "spatial_t_emb", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "spatial_t_emb", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srcnn.SRCNN.__init__": [[110, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "in_planes", "=", "3", ",", "STN", "=", "False", ",", "height", "=", "32", ",", "width", "=", "128", ")", ":", "\n", "        ", "super", "(", "SRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale_factor", "=", "scale_factor", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "in_planes", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", ",", "width", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srcnn.SRCNN.forward": [[134, 146], ["srcnn.SRCNN.conv1", "srcnn.SRCNN.relu1", "srcnn.SRCNN.conv2", "srcnn.SRCNN.relu2", "srcnn.SRCNN.conv3", "srcnn.SRCNN.stn_head", "srcnn.SRCNN.tps", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale_factor", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.SRResNet.__init__": [[14, 51], ["int", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "torch.nn.Sequential", "torch.nn.Sequential", "block8.append", "torch.nn.Sequential", "torch.nn.Sequential", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "srresnet.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "STN", "=", "False", ",", "width", "=", "128", ",", "height", "=", "32", ",", "mask", "=", "False", ")", ":", "\n", "        ", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "super", "(", "SRResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "self", ".", "block2", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block3", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block4", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block5", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block6", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", ")", "\n", "block8", "=", "[", "UpsampleBLock", "(", "64", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block8", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "self", ".", "block8", "=", "nn", ".", "Sequential", "(", "*", "block8", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.SRResNet.forward": [[52, 67], ["srresnet.SRResNet.block1", "srresnet.SRResNet.block2", "srresnet.SRResNet.block3", "srresnet.SRResNet.block4", "srresnet.SRResNet.block5", "srresnet.SRResNet.block6", "srresnet.SRResNet.block7", "srresnet.SRResNet.block8", "torch.tanh", "torch.tanh", "srresnet.SRResNet.stn_head", "srresnet.SRResNet.tps"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# embed()", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block1", "=", "self", ".", "block1", "(", "x", ")", "\n", "block2", "=", "self", ".", "block2", "(", "block1", ")", "\n", "block3", "=", "self", ".", "block3", "(", "block2", ")", "\n", "block4", "=", "self", ".", "block4", "(", "block3", ")", "\n", "block5", "=", "self", ".", "block5", "(", "block4", ")", "\n", "block6", "=", "self", ".", "block6", "(", "block5", ")", "\n", "block7", "=", "self", ".", "block7", "(", "block6", ")", "\n", "block8", "=", "self", ".", "block8", "(", "block1", "+", "block7", ")", "\n", "\n", "return", "F", ".", "tanh", "(", "block8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.ResidualBlock.__init__": [[70, 77], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.ResidualBlock.forward": [[78, 86], ["srresnet.ResidualBlock.conv1", "srresnet.ResidualBlock.bn1", "srresnet.ResidualBlock.prelu", "srresnet.ResidualBlock.conv2", "srresnet.ResidualBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "return", "x", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.SRResNet_TL.__init__": [[89, 138], ["int", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "srresnet.ResidualBlock_TL", "srresnet.ResidualBlock_TL", "srresnet.ResidualBlock_TL", "srresnet.ResidualBlock_TL", "srresnet.ResidualBlock_TL", "torch.nn.Sequential", "torch.nn.Sequential", "block8.append", "torch.nn.Sequential", "torch.nn.Sequential", "srresnet.InfoGen", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "srresnet.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "recognizer.tps_spatial_transformer.TPSSpatialTransformer", "recognizer.stn_head.STNHead", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scale_factor", "=", "2", ",", "\n", "STN", "=", "False", ",", "\n", "width", "=", "128", ",", "\n", "height", "=", "32", ",", "\n", "mask", "=", "False", ",", "\n", "text_emb", "=", "37", ",", "# 26+26+1", "\n", "out_text_channels", "=", "32", "\n", ")", ":", "\n", "        ", "self", ".", "emb_cls", "=", "text_emb", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "super", "(", "SRResNet_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "self", ".", "block2", "=", "ResidualBlock_TL", "(", "64", ",", "out_text_channels", ")", "\n", "self", ".", "block3", "=", "ResidualBlock_TL", "(", "64", ",", "out_text_channels", ")", "\n", "self", ".", "block4", "=", "ResidualBlock_TL", "(", "64", ",", "out_text_channels", ")", "\n", "self", ".", "block5", "=", "ResidualBlock_TL", "(", "64", ",", "out_text_channels", ")", "\n", "self", ".", "block6", "=", "ResidualBlock_TL", "(", "64", ",", "out_text_channels", ")", "\n", "self", ".", "block7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", ")", "\n", "block8", "=", "[", "UpsampleBLock", "(", "64", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block8", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "self", ".", "block8", "=", "nn", ".", "Sequential", "(", "*", "block8", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "self", ".", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "self", ".", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n", "# From [1, 1] -> [16, 16]", "\n", "", "self", ".", "infoGen", "=", "InfoGen", "(", "text_emb", ",", "out_text_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.SRResNet_TL.forward": [[139, 164], ["srresnet.SRResNet_TL.infoGen", "torch.interpolate", "torch.interpolate", "srresnet.SRResNet_TL.block1", "srresnet.SRResNet_TL.block2", "srresnet.SRResNet_TL.block3", "srresnet.SRResNet_TL.block4", "srresnet.SRResNet_TL.block5", "srresnet.SRResNet_TL.block6", "srresnet.SRResNet_TL.block7", "srresnet.SRResNet_TL.block8", "torch.tanh", "torch.tanh", "srresnet.SRResNet_TL.stn_head", "srresnet.SRResNet_TL.tps", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", "=", "None", ")", ":", "\n", "# embed()", "\n", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "\n", "", "if", "text_emb", "is", "None", ":", "\n", "            ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "text_emb", "=", "torch", ".", "zeros", "(", "(", "N", ",", "self", ".", "emb_cls", ",", "1", ",", "26", ")", ")", "\n", "\n", "\n", "", "spatial_t_emb", "=", "self", ".", "infoGen", "(", "text_emb", ")", "\n", "spatial_t_emb", "=", "F", ".", "interpolate", "(", "spatial_t_emb", ",", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "block1", "=", "self", ".", "block1", "(", "x", ")", "\n", "block2", "=", "self", ".", "block2", "(", "block1", ",", "spatial_t_emb", ")", "\n", "block3", "=", "self", ".", "block3", "(", "block2", ",", "spatial_t_emb", ")", "\n", "block4", "=", "self", ".", "block4", "(", "block3", ",", "spatial_t_emb", ")", "\n", "block5", "=", "self", ".", "block5", "(", "block4", ",", "spatial_t_emb", ")", "\n", "block6", "=", "self", ".", "block6", "(", "block5", ",", "spatial_t_emb", ")", "\n", "block7", "=", "self", ".", "block7", "(", "block6", ")", "\n", "block8", "=", "self", ".", "block8", "(", "block1", "+", "block7", ")", "\n", "\n", "return", "F", ".", "tanh", "(", "block8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.InfoGen.__init__": [[167, 185], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "t_emb", ",", "\n", "output_size", "\n", ")", ":", "\n", "        ", "super", "(", "InfoGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "t_emb", ",", "512", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "3", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "tconv4", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "output_size", ",", "3", ",", "(", "2", ",", "1", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.InfoGen.forward": [[186, 196], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "srresnet.InfoGen.bn1", "srresnet.InfoGen.bn2", "srresnet.InfoGen.bn3", "srresnet.InfoGen.bn4", "srresnet.InfoGen.tconv1", "srresnet.InfoGen.tconv2", "srresnet.InfoGen.tconv3", "srresnet.InfoGen.tconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t_embedding", ")", ":", "\n", "\n", "# t_embedding += noise.to(t_embedding.device)", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "tconv1", "(", "t_embedding", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "tconv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "tconv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "tconv4", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.ResidualBlock_TL.__init__": [[199, 206], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "out_text_channels", "=", "32", ")", ":", "\n", "        ", "super", "(", "ResidualBlock_TL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", "+", "out_text_channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.ResidualBlock_TL.forward": [[207, 221], ["srresnet.ResidualBlock_TL.conv1", "srresnet.ResidualBlock_TL.bn1", "srresnet.ResidualBlock_TL.prelu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "srresnet.ResidualBlock_TL.conv2", "srresnet.ResidualBlock_TL.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "text_emb", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "\n", "############ Fusing with TL ############", "\n", "cat_feature", "=", "torch", ".", "cat", "(", "[", "residual", ",", "text_emb", "]", ",", "1", ")", "\n", "# residual = self.concat_conv(cat_feature)", "\n", "########################################", "\n", "\n", "residual", "=", "self", ".", "conv2", "(", "cat_feature", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "return", "x", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.UpsampleBLock.__init__": [[224, 229], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "torch.nn.PReLU", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "up_scale", ")", ":", "\n", "        ", "super", "(", "UpsampleBLock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "up_scale", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.UpsampleBLock.forward": [[230, 235], ["srresnet.UpsampleBLock.conv", "srresnet.UpsampleBLock.pixel_shuffle", "srresnet.UpsampleBLock.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.Discriminator.__init__": [[238, 276], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.srresnet.Discriminator.forward": [[278, 281], ["x.size", "torch.sigmoid", "torch.sigmoid", "srresnet.Discriminator.net().view", "srresnet.Discriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "return", "F", ".", "sigmoid", "(", "self", ".", "net", "(", "x", ")", ".", "view", "(", "batch_size", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionRecognitionHead.__init__": [[16, 25], ["torch.nn.Module.__init__", "attention_recognition_head.DecoderUnit"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "max_len_labels", ",", "in_planes", "=", "512", ",", "sDim", "=", "512", ",", "attDim", "=", "512", ")", ":", "\n", "    ", "super", "(", "AttentionRecognitionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "# this is the output classes. So it includes the <EOS>.", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "\n", "self", ".", "decoder", "=", "DecoderUnit", "(", "sDim", "=", "sDim", ",", "xDim", "=", "in_planes", ",", "yDim", "=", "num_classes", ",", "attDim", "=", "attDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionRecognitionHead.forward": [[26, 43], ["x.size", "torch.zeros().cuda", "range", "torch.cat", "max", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.cat.append", "torch.zeros", "torch.zeros().fill_().cuda", "targets[].cuda", "_.unsqueeze", "torch.zeros().fill_", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "targets", ",", "lengths", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "max", "(", "lengths", ")", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "# the last one is used as the <BOS>.", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "targets", "[", ":", ",", "i", "-", "1", "]", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "[", "_", ".", "unsqueeze", "(", "1", ")", "for", "_", "in", "outputs", "]", ",", "1", ")", "\n", "return", "outputs", "\n", "\n", "# inference stage.", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionRecognitionHead.sample": [[45, 67], ["x.size", "torch.zeros", "range", "torch.cat", "torch.cat", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.softmax", "torch.nn.functional.softmax.max", "torch.cat.append", "torch.cat.append", "torch.zeros().fill_", "predicted.unsqueeze", "score.unsqueeze", "torch.zeros"], "methods", ["None"], ["    ", "x", ",", "_", ",", "_", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "\n", "predicted_ids", ",", "predicted_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "predicted", "\n", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "score", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "predicted_ids", ".", "append", "(", "predicted", ".", "unsqueeze", "(", "1", ")", ")", "\n", "predicted_scores", ".", "append", "(", "score", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "predicted_ids", "=", "torch", ".", "cat", "(", "predicted_ids", ",", "1", ")", "\n", "predicted_scores", "=", "torch", ".", "cat", "(", "predicted_scores", ",", "1", ")", "\n", "# return predicted_ids.squeeze(), predicted_scores.squeeze()", "\n", "return", "predicted_ids", ",", "predicted_scores", "\n", "\n", "", "def", "beam_search", "(", "self", ",", "x", ",", "beam_width", ",", "eos", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionRecognitionHead.beam_search": [[68, 185], ["x.size", "x.unsqueeze().permute().repeat().permute().contiguous().view", "torch.zeros().cuda", "torch.Tensor().cuda", "scores.view.fill_", "scores.view.index_fill_", "torch.zeros().fill_().cuda", "list", "list", "list", "range", "list", "stored_scores[].view().topk", "sorted_score.clone", "sorted_score.clone.topk", "range", "tensor.repeat", "torch.Tensor().long().cuda", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.log_softmax", "attention_recognition_head.AttentionRecognitionHead.beam_search._inflate"], "methods", ["None"], ["\n", "    ", "def", "_inflate", "(", "tensor", ",", "times", ",", "dim", ")", ":", "\n", "      ", "repeat_dims", "=", "[", "1", "]", "*", "tensor", ".", "dim", "(", ")", "\n", "repeat_dims", "[", "dim", "]", "=", "times", "\n", "return", "tensor", ".", "repeat", "(", "*", "repeat_dims", ")", "\n", "\n", "# https://github.com/IBM/pytorch-seq2seq/blob/fede87655ddce6c94b38886089e05321dc9802af/seq2seq/models/TopKDecoder.py", "\n", "", "batch_size", ",", "l", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "# inflated_encoder_feats = _inflate(encoder_feats, beam_width, 0) # ABC --> AABBCC -/-> ABCABC", "\n", "inflated_encoder_feats", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "repeat", "(", "(", "beam_width", ",", "1", ",", "1", ",", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "l", ",", "d", ")", "\n", "\n", "# Initialize the decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", "*", "beam_width", ",", "self", ".", "sDim", ")", "\n", "pos_index", "=", "(", "torch", ".", "Tensor", "(", "range", "(", "batch_size", ")", ")", "*", "beam_width", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Initialize the scores", "\n", "sequence_scores", "=", "torch", ".", "Tensor", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "sequence_scores", ".", "fill_", "(", "-", "float", "(", "'Inf'", ")", ")", "\n", "sequence_scores", ".", "index_fill_", "(", "0", ",", "torch", ".", "Tensor", "(", "[", "i", "*", "beam_width", "for", "i", "in", "range", "(", "0", ",", "batch_size", ")", "]", ")", ".", "long", "(", ")", ",", "0.0", ")", "\n", "# sequence_scores.fill_(0.0)", "\n", "\n", "# Initialize the input vector", "\n", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", "*", "beam_width", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "# Store decisions for backtracking", "\n", "stored_scores", "=", "list", "(", ")", "\n", "stored_predecessors", "=", "list", "(", ")", "\n", "stored_emitted_symbols", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "output", ",", "state", "=", "self", ".", "decoder", "(", "inflated_encoder_feats", ",", "state", ",", "y_prev", ")", "\n", "log_softmax_output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "sequence_scores", "=", "_inflate", "(", "sequence_scores", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "sequence_scores", "+=", "log_softmax_output", "\n", "scores", ",", "candidates", "=", "sequence_scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "topk", "(", "beam_width", ",", "dim", "=", "1", ")", "\n", "\n", "# Reshape input = (bk, 1) and sequence_scores = (bk, 1)", "\n", "y_prev", "=", "(", "candidates", "%", "self", ".", "num_classes", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "sequence_scores", "=", "scores", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "\n", "# Update fields for next timestep", "\n", "predecessors", "=", "(", "candidates", "/", "self", ".", "num_classes", "+", "pos_index", ".", "expand_as", "(", "candidates", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "state", "=", "state", ".", "index_select", "(", "1", ",", "predecessors", ".", "squeeze", "(", ")", ")", "\n", "\n", "# Update sequence socres and erase scores for <eos> symbol so that they aren't expanded", "\n", "stored_scores", ".", "append", "(", "sequence_scores", ".", "clone", "(", ")", ")", "\n", "eos_indices", "=", "y_prev", ".", "view", "(", "-", "1", ",", "1", ")", ".", "eq", "(", "eos", ")", "\n", "if", "eos_indices", ".", "nonzero", "(", ")", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "sequence_scores", ".", "masked_fill_", "(", "eos_indices", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Cache results for backtracking", "\n", "", "stored_predecessors", ".", "append", "(", "predecessors", ")", "\n", "stored_emitted_symbols", ".", "append", "(", "y_prev", ")", "\n", "\n", "# Do backtracking to return the optimal values", "\n", "#====== backtrak ======#", "\n", "# Initialize return variables given different types", "\n", "", "p", "=", "list", "(", ")", "\n", "l", "=", "[", "[", "self", ".", "max_len_labels", "]", "*", "beam_width", "for", "_", "in", "range", "(", "batch_size", ")", "]", "# Placeholder for lengths of top-k sequences", "\n", "\n", "# the last step output of the beams are not sorted", "\n", "# thus they are sorted here", "\n", "sorted_score", ",", "sorted_idx", "=", "stored_scores", "[", "-", "1", "]", ".", "view", "(", "batch_size", ",", "beam_width", ")", ".", "topk", "(", "beam_width", ")", "\n", "# initialize the sequence scores with the sorted last step beam scores", "\n", "s", "=", "sorted_score", ".", "clone", "(", ")", "\n", "\n", "batch_eos_found", "=", "[", "0", "]", "*", "batch_size", "# the number of EOS found", "\n", "# in the backward loop below for each batch", "\n", "t", "=", "self", ".", "max_len_labels", "-", "1", "\n", "# initialize the back pointer with the sorted order of the last step beams.", "\n", "# add pos_index for indexing variable with b*k as the first dimension.", "\n", "t_predecessors", "=", "(", "sorted_idx", "+", "pos_index", ".", "expand_as", "(", "sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "while", "t", ">=", "0", ":", "\n", "# Re-order the variables with the back pointer", "\n", "      ", "current_symbol", "=", "stored_emitted_symbols", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", "\n", "t_predecessors", "=", "stored_predecessors", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", ".", "squeeze", "(", ")", "\n", "eos_indices", "=", "stored_emitted_symbols", "[", "t", "]", ".", "eq", "(", "eos", ")", ".", "nonzero", "(", ")", "\n", "if", "eos_indices", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "eos_indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# Indices of the EOS symbol for both variables", "\n", "# with b*k as the first dimension, and b, k for", "\n", "# the first two dimensions", "\n", "          ", "idx", "=", "eos_indices", "[", "i", "]", "\n", "b_idx", "=", "int", "(", "idx", "[", "0", "]", "/", "beam_width", ")", "\n", "# The indices of the replacing position", "\n", "# according to the replacement strategy noted above", "\n", "res_k_idx", "=", "beam_width", "-", "(", "batch_eos_found", "[", "b_idx", "]", "%", "beam_width", ")", "-", "1", "\n", "batch_eos_found", "[", "b_idx", "]", "+=", "1", "\n", "res_idx", "=", "b_idx", "*", "beam_width", "+", "res_k_idx", "\n", "\n", "# Replace the old information in return variables", "\n", "# with the new ended sequence information", "\n", "t_predecessors", "[", "res_idx", "]", "=", "stored_predecessors", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "current_symbol", "[", "res_idx", "]", "=", "stored_emitted_symbols", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "s", "[", "b_idx", ",", "res_k_idx", "]", "=", "stored_scores", "[", "t", "]", "[", "idx", "[", "0", "]", ",", "[", "0", "]", "]", "\n", "l", "[", "b_idx", "]", "[", "res_k_idx", "]", "=", "t", "+", "1", "\n", "\n", "# record the back tracked results", "\n", "", "", "p", ".", "append", "(", "current_symbol", ")", "\n", "\n", "t", "-=", "1", "\n", "\n", "# Sort and re-order again as the added ended sequences may change", "\n", "# the order (very unlikely)", "\n", "", "s", ",", "re_sorted_idx", "=", "s", ".", "topk", "(", "beam_width", ")", "\n", "for", "b_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "l", "[", "b_idx", "]", "=", "[", "l", "[", "b_idx", "]", "[", "k_idx", ".", "item", "(", ")", "]", "for", "k_idx", "in", "re_sorted_idx", "[", "b_idx", ",", ":", "]", "]", "\n", "\n", "", "re_sorted_idx", "=", "(", "re_sorted_idx", "+", "pos_index", ".", "expand_as", "(", "re_sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "\n", "# Reverse the sequences and re-order at the same time", "\n", "# It is reversed because the backtracking happens in reverse time order", "\n", "p", "=", "[", "step", ".", "index_select", "(", "0", ",", "re_sorted_idx", ")", ".", "view", "(", "batch_size", ",", "beam_width", ",", "-", "1", ")", "for", "step", "in", "reversed", "(", "p", ")", "]", "\n", "p", "=", "torch", ".", "cat", "(", "p", ",", "-", "1", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "p", ",", "torch", ".", "ones_like", "(", "p", ")", "\n", "\n", "\n", "", "", "class", "AttentionUnit", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionUnit.__init__": [[188, 198], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "\n", "self", ".", "sEmbed", "=", "nn", ".", "Linear", "(", "sDim", ",", "attDim", ")", "\n", "self", ".", "xEmbed", "=", "nn", ".", "Linear", "(", "xDim", ",", "attDim", ")", "\n", "self", ".", "wEmbed", "=", "nn", ".", "Linear", "(", "attDim", ",", "1", ")", "\n", "\n", "# self.init_weights()", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionUnit.init_weights": [[201, 208], ["torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["init", ".", "constant_", "(", "self", ".", "sEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "xEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "xEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "wEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "wEmbed", ".", "bias", ",", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ")", ":", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "# [b x T x xDim]", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.AttentionUnit.forward": [[209, 232], ["sPrev.squeeze.squeeze.cuda", "x.contiguous().view.contiguous().view.size", "x.contiguous().view.contiguous().view.contiguous().view", "attention_recognition_head.AttentionUnit.xEmbed", "xProj.view.view.view", "sPrev.squeeze.squeeze.squeeze", "attention_recognition_head.AttentionUnit.sEmbed", "torch.unsqueeze", "sProj.expand.expand.expand", "torch.tanh", "sumTanh.view.view.view", "attention_recognition_head.AttentionUnit.wEmbed", "vProj.view.view.view", "torch.nn.functional.softmax", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "xDim", ")", "# [(b x T) x xDim]", "\n", "xProj", "=", "self", ".", "xEmbed", "(", "x", ")", "# [(b x T) x attDim]", "\n", "xProj", "=", "xProj", ".", "view", "(", "batch_size", ",", "T", ",", "-", "1", ")", "# [b x T x attDim]", "\n", "\n", "sPrev", "=", "sPrev", ".", "squeeze", "(", "0", ")", "\n", "sProj", "=", "self", ".", "sEmbed", "(", "sPrev", ")", "# [b x attDim]", "\n", "sProj", "=", "torch", ".", "unsqueeze", "(", "sProj", ",", "1", ")", "# [b x 1 x attDim]", "\n", "sProj", "=", "sProj", ".", "expand", "(", "batch_size", ",", "T", ",", "self", ".", "attDim", ")", "# [b x T x attDim]", "\n", "\n", "sumTanh", "=", "torch", ".", "tanh", "(", "sProj", "+", "xProj", ")", "\n", "sumTanh", "=", "sumTanh", ".", "view", "(", "-", "1", ",", "self", ".", "attDim", ")", "\n", "\n", "vProj", "=", "self", ".", "wEmbed", "(", "sumTanh", ")", "# [(b x T) x 1]", "\n", "vProj", "=", "vProj", ".", "view", "(", "batch_size", ",", "T", ")", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "vProj", ",", "dim", "=", "1", ")", "# attention weights for each sample in the minibatch", "\n", "\n", "return", "alpha", "\n", "\n", "\n", "", "", "class", "DecoderUnit", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "yDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "DecoderUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sDim", "=", "sDim", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.DecoderUnit.__init__": [[235, 247], ["torch.nn.Module.__init__", "attention_recognition_head.AttentionUnit", "torch.nn.Embedding", "torch.nn.GRU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["self", ".", "attDim", "=", "attDim", "\n", "self", ".", "emdDim", "=", "attDim", "\n", "\n", "self", ".", "attention_unit", "=", "AttentionUnit", "(", "sDim", ",", "xDim", ",", "attDim", ")", "\n", "self", ".", "tgt_embedding", "=", "nn", ".", "Embedding", "(", "yDim", "+", "1", ",", "self", ".", "emdDim", ")", "# the last is used for <BOS> ", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", "=", "xDim", "+", "self", ".", "emdDim", ",", "hidden_size", "=", "sDim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sDim", ",", "yDim", ")", "\n", "\n", "# self.init_weights()", "\n", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "tgt_embedding", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "self", ".", "fc", ".", "weight", ",", "std", "=", "0.01", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.DecoderUnit.init_weights": [[250, 254], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ",", "yPrev", ")", ":", "\n", "# x: feature sequence from the image decoder.", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "alpha", "=", "self", ".", "attention_unit", "(", "x", ",", "sPrev", ")", "\n", "context", "=", "torch", ".", "bmm", "(", "alpha", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.attention_recognition_head.DecoderUnit.forward": [[255, 269], ["sPrev.cuda.cuda.cuda", "x.size", "attention_recognition_head.DecoderUnit.attention_unit", "torch.bmm().squeeze", "yPrev.cuda.cuda.cuda", "attention_recognition_head.DecoderUnit.tgt_embedding", "attention_recognition_head.DecoderUnit.gru.flatten_parameters", "attention_recognition_head.DecoderUnit.gru", "attention_recognition_head.DecoderUnit.squeeze", "attention_recognition_head.DecoderUnit.fc", "yPrev.cuda.cuda.long", "torch.cat().unsqueeze", "torch.bmm", "attention_recognition_head.DecoderUnit.unsqueeze", "torch.cat"], "methods", ["None"], ["#", "\n", "yProj", "=", "self", ".", "tgt_embedding", "(", "yPrev", ".", "long", "(", ")", ")", "\n", "# self.gru.flatten_parameters()", "\n", "output", ",", "state", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "[", "yProj", ",", "context", "]", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "sPrev", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "output", "=", "self", ".", "fc", "(", "output", ")", "\n", "return", "output", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.tps_spatial_transformer.TPSSpatialTransformer.__init__": [[59, 99], ["torch.Module.__init__", "tps_spatial_transformer.build_output_control_points", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tps_spatial_transformer.compute_partial_repr", "forward_kernel[].copy_", "forward_kernel[].fill_", "forward_kernel[].fill_", "forward_kernel[].copy_", "forward_kernel[].copy_", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.compute_partial_repr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "build_output_control_points.transpose", "itertools.product", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.build_output_control_points", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr"], ["self", ".", "num_control_points", "=", "num_control_points", "\n", "self", ".", "margins", "=", "margins", "\n", "\n", "self", ".", "target_height", ",", "self", ".", "target_width", "=", "output_image_size", "\n", "target_control_points", "=", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", "\n", "N", "=", "num_control_points", "\n", "# N = N - 4", "\n", "\n", "# create padded kernel matrix", "\n", "forward_kernel", "=", "torch", ".", "zeros", "(", "N", "+", "3", ",", "N", "+", "3", ")", "\n", "target_control_partial_repr", "=", "compute_partial_repr", "(", "target_control_points", ",", "target_control_points", ")", "\n", "forward_kernel", "[", ":", "N", ",", ":", "N", "]", ".", "copy_", "(", "target_control_partial_repr", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "3", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", "-", "3", ",", ":", "N", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "2", ":", "]", ".", "copy_", "(", "target_control_points", ")", "\n", "forward_kernel", "[", "-", "2", ":", ",", ":", "N", "]", ".", "copy_", "(", "target_control_points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "# compute inverse matrix", "\n", "inverse_kernel", "=", "torch", ".", "inverse", "(", "forward_kernel", ")", "\n", "\n", "# create target cordinate matrix", "\n", "HW", "=", "self", ".", "target_height", "*", "self", ".", "target_width", "\n", "target_coordinate", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "self", ".", "target_height", ")", ",", "range", "(", "self", ".", "target_width", ")", ")", ")", "\n", "target_coordinate", "=", "torch", ".", "Tensor", "(", "target_coordinate", ")", "# HW x 2", "\n", "Y", ",", "X", "=", "target_coordinate", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "Y", "=", "Y", "/", "(", "self", ".", "target_height", "-", "1", ")", "\n", "X", "=", "X", "/", "(", "self", ".", "target_width", "-", "1", ")", "\n", "target_coordinate", "=", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "1", ")", "# convert from (y, x) to (x, y)", "\n", "target_coordinate_partial_repr", "=", "compute_partial_repr", "(", "target_coordinate", ",", "target_control_points", ")", "\n", "target_coordinate_repr", "=", "torch", ".", "cat", "(", "[", "\n", "target_coordinate_partial_repr", ",", "torch", ".", "ones", "(", "HW", ",", "1", ")", ",", "target_coordinate", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# register precomputed matrices", "\n", "self", ".", "register_buffer", "(", "'inverse_kernel'", ",", "inverse_kernel", ")", "\n", "self", ".", "register_buffer", "(", "'padding_matrix'", ",", "torch", ".", "zeros", "(", "3", ",", "2", ")", ")", "\n", "self", ".", "register_buffer", "(", "'target_coordinate_repr'", ",", "target_coordinate_repr", ")", "\n", "self", ".", "register_buffer", "(", "'target_control_points'", ",", "target_control_points", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "source_control_points", ")", ":", "\n", "    ", "assert", "source_control_points", ".", "ndimension", "(", ")", "==", "3", "\n", "assert", "source_control_points", ".", "size", "(", "1", ")", "==", "self", ".", "num_control_points", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.tps_spatial_transformer.TPSSpatialTransformer.forward": [[100, 116], ["source_control_points.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "tps_spatial_transformer.grid_sample", "source_control_points.ndimension", "source_control_points.size", "source_control_points.size", "tps_spatial_transformer.TPSSpatialTransformer.padding_matrix.expand"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["assert", "source_control_points", ".", "size", "(", "2", ")", "==", "2", "\n", "batch_size", "=", "source_control_points", ".", "size", "(", "0", ")", "\n", "\n", "Y", "=", "torch", ".", "cat", "(", "[", "source_control_points", ",", "self", ".", "padding_matrix", ".", "expand", "(", "batch_size", ",", "3", ",", "2", ")", "]", ",", "1", ")", "\n", "mapping_matrix", "=", "torch", ".", "matmul", "(", "self", ".", "inverse_kernel", ",", "Y", ")", "\n", "source_coordinate", "=", "torch", ".", "matmul", "(", "self", ".", "target_coordinate_repr", ",", "mapping_matrix", ")", "\n", "\n", "grid", "=", "source_coordinate", ".", "view", "(", "-", "1", ",", "self", ".", "target_height", ",", "self", ".", "target_width", ",", "2", ")", "\n", "grid", "=", "torch", ".", "clamp", "(", "grid", ",", "0", ",", "1", ")", "# the source_control_points may be out of [0, 1].", "\n", "# the input to grid_sample is normalized [-1, 1], but what we get is [0, 1]", "\n", "grid", "=", "2.0", "*", "grid", "-", "1.0", "\n", "output_maps", "=", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", "\n", "return", "output_maps", ",", "source_coordinate", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.tps_spatial_transformer.grid_sample": [[13, 22], ["torch.grid_sample", "input.data.new().fill_", "torch.grid_sample", "input.data.new", "input.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["    ", "return", "output", "\n", "", "else", ":", "\n", "    ", "input_mask", "=", "input", ".", "data", ".", "new", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", "\n", "output_mask", "=", "F", ".", "grid_sample", "(", "input_mask", ",", "grid", ")", "\n", "padded_output", "=", "output", "*", "output_mask", "+", "canvas", "*", "(", "1", "-", "output_mask", ")", "\n", "return", "padded_output", "\n", "\n", "\n", "# phi(x1, x2) = r^2 * log(r), where r = ||x1 - x2||_2", "\n", "", "", "def", "compute_partial_repr", "(", "input_points", ",", "control_points", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.tps_spatial_transformer.compute_partial_repr": [[25, 38], ["input_points.size", "control_points.size", "repr_matrix.masked_fill_", "input_points.view", "control_points.view", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["pairwise_diff", "=", "input_points", ".", "view", "(", "N", ",", "1", ",", "2", ")", "-", "control_points", ".", "view", "(", "1", ",", "M", ",", "2", ")", "\n", "# original implementation, very slow", "\n", "# pairwise_dist = torch.sum(pairwise_diff ** 2, dim = 2) # square of distance", "\n", "pairwise_diff_square", "=", "pairwise_diff", "*", "pairwise_diff", "\n", "pairwise_dist", "=", "pairwise_diff_square", "[", ":", ",", ":", ",", "0", "]", "+", "pairwise_diff_square", "[", ":", ",", ":", ",", "1", "]", "\n", "repr_matrix", "=", "0.5", "*", "pairwise_dist", "*", "torch", ".", "log", "(", "pairwise_dist", ")", "\n", "# fix numerical error for 0 * log(0), substitute all nan with 0", "\n", "mask", "=", "repr_matrix", "!=", "repr_matrix", "\n", "repr_matrix", ".", "masked_fill_", "(", "mask", ",", "0", ")", "\n", "return", "repr_matrix", "\n", "\n", "\n", "# output_ctrl_pts are specified, according to our task.", "\n", "", "def", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.tps_spatial_transformer.build_output_control_points": [[41, 54], ["numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.ones", "numpy.ones"], "function", ["None"], ["ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin_x", ",", "1.0", "-", "margin_x", ",", "num_ctrl_pts_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "margin_y", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "(", "1.0", "-", "margin_y", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "# ctrl_pts_top = ctrl_pts_top[1:-1,:]", "\n", "# ctrl_pts_bottom = ctrl_pts_bottom[1:-1,:]", "\n", "output_ctrl_pts_arr", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "output_ctrl_pts", "=", "torch", ".", "Tensor", "(", "output_ctrl_pts_arr", ")", "\n", "return", "output_ctrl_pts", "\n", "\n", "\n", "# demo: ~/test/models/test_tps_transformation.py", "\n", "", "class", "TPSSpatialTransformer", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.recognizer_builder.RecognizerBuilder.__init__": [[31, 64], ["torch.nn.Module.__init__", "resnet_aster.ResNet_ASTER", "attention_recognition_head.AttentionRecognitionHead", "sequenceCrossEntropyLoss.SequenceCrossEntropyLoss", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "arch", ",", "rec_num_classes", ",", "sDim", "=", "512", ",", "attDim", "=", "512", ",", "max_len_labels", "=", "100", ",", "eos", "=", "'EOS'", ",", "STN_ON", "=", "True", ")", ":", "\n", "        ", "super", "(", "RecognizerBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "rec_num_classes", "=", "rec_num_classes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "STN_ON", "=", "STN_ON", "\n", "\n", "self", ".", "tps_inputsize", "=", "tps_inputsize", "\n", "\n", "self", ".", "encoder", "=", "ResNet_ASTER", "(", "self", ".", "arch", ")", "\n", "encoder_out_planes", "=", "self", ".", "encoder", ".", "out_planes", "\n", "\n", "self", ".", "decoder", "=", "AttentionRecognitionHead", "(", "\n", "num_classes", "=", "rec_num_classes", ",", "\n", "in_planes", "=", "encoder_out_planes", ",", "\n", "sDim", "=", "sDim", ",", "\n", "attDim", "=", "attDim", ",", "\n", "max_len_labels", "=", "max_len_labels", ")", "\n", "self", ".", "rec_crit", "=", "SequenceCrossEntropyLoss", "(", ")", "\n", "\n", "if", "self", ".", "STN_ON", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.recognizer_builder.RecognizerBuilder.forward": [[65, 105], ["recognizer_builder.RecognizerBuilder.encoder", "encoder_feats.contiguous.contiguous.contiguous", "return_dict[].items", "torch.nn.functional.interpolate", "recognizer_builder.RecognizerBuilder.stn_head", "recognizer_builder.RecognizerBuilder.tps", "recognizer_builder.RecognizerBuilder.decoder", "recognizer_builder.RecognizerBuilder.rec_crit", "recognizer_builder.RecognizerBuilder.decoder.beam_search", "recognizer_builder.RecognizerBuilder.decoder", "recognizer_builder.RecognizerBuilder.rec_crit", "v.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionRecognitionHead.beam_search"], ["", "", "def", "forward", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "return_dict", "=", "{", "}", "\n", "return_dict", "[", "'losses'", "]", "=", "{", "}", "\n", "return_dict", "[", "'output'", "]", "=", "{", "}", "\n", "\n", "x", ",", "rec_targets", ",", "rec_lengths", "=", "input_dict", "[", "'images'", "]", ",", "input_dict", "[", "'rec_targets'", "]", ",", "input_dict", "[", "'rec_lengths'", "]", "\n", "\n", "# rectification", "\n", "if", "self", ".", "STN_ON", ":", "\n", "# input images are downsampled before being fed into stn_head.", "\n", "            ", "stn_input", "=", "F", ".", "interpolate", "(", "x", ",", "self", ".", "tps_inputsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "stn_img_feat", ",", "ctrl_points", "=", "self", ".", "stn_head", "(", "stn_input", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points", ")", "\n", "# if not self.training:", "\n", "#     # save for visualization", "\n", "#     return_dict['output']['ctrl_points'] = ctrl_points", "\n", "#     return_dict['output']['rectified_images'] = x", "\n", "\n", "", "encoder_feats", "=", "self", ".", "encoder", "(", "x", ")", "\n", "encoder_feats", "=", "encoder_feats", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "rec_pred", "=", "self", ".", "decoder", "(", "[", "encoder_feats", ",", "rec_targets", ",", "rec_lengths", "]", ")", "\n", "loss_rec", "=", "self", ".", "rec_crit", "(", "rec_pred", ",", "rec_targets", ",", "rec_lengths", ")", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_rec'", "]", "=", "loss_rec", "\n", "", "else", ":", "\n", "            ", "rec_pred", ",", "rec_pred_scores", "=", "self", ".", "decoder", ".", "beam_search", "(", "encoder_feats", ",", "beam_width", ",", "self", ".", "eos", ")", "\n", "rec_pred_", "=", "self", ".", "decoder", "(", "[", "encoder_feats", ",", "rec_targets", ",", "rec_lengths", "]", ")", "\n", "loss_rec", "=", "self", ".", "rec_crit", "(", "rec_pred_", ",", "rec_targets", ",", "rec_lengths", ")", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_rec'", "]", "=", "loss_rec", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_rec'", "]", "=", "rec_pred", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_rec_score'", "]", "=", "rec_pred_scores", "\n", "\n", "# pytorch0.4 bug on gathering scalar(0-dim) tensors", "\n", "", "for", "k", ",", "v", "in", "return_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "            ", "return_dict", "[", "'losses'", "]", "[", "k", "]", "=", "v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.AsterBlock.__init__": [[39, 48], ["torch.Module.__init__", "resnet_aster.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_aster.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.conv1x1", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.conv3x3"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "AsterBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.AsterBlock.forward": [[49, 62], ["resnet_aster.AsterBlock.conv1", "resnet_aster.AsterBlock.bn1", "resnet_aster.AsterBlock.relu", "resnet_aster.AsterBlock.conv2", "resnet_aster.AsterBlock.bn2", "resnet_aster.AsterBlock.relu", "resnet_aster.AsterBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.ResNet_ASTER.__init__": [[67, 98], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.LSTM", "torch.LSTM", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "with_lstm", "=", "False", ",", "n_group", "=", "1", ")", ":", "\n", "    ", "super", "(", "ResNet_ASTER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_lstm", "=", "with_lstm", "\n", "self", ".", "n_group", "=", "n_group", "\n", "\n", "in_channels", "=", "3", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "32", ",", "3", ",", "[", "2", ",", "2", "]", ")", "# [16, 50]", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "64", ",", "4", ",", "[", "2", ",", "2", "]", ")", "# [8, 25]", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "128", ",", "6", ",", "[", "2", ",", "1", "]", ")", "# [4, 25]", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "256", ",", "6", ",", "[", "2", ",", "1", "]", ")", "# [2, 25]", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "512", ",", "3", ",", "[", "2", ",", "1", "]", ")", "# [1, 25]", "\n", "\n", "if", "with_lstm", ":", "\n", "      ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "512", ",", "256", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "2", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "out_planes", "=", "2", "*", "256", "\n", "", "else", ":", "\n", "      ", "self", ".", "out_planes", "=", "512", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.ResNet_ASTER._make_layer": [[99, 112], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_aster.AsterBlock", "layers.append", "resnet_aster.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_aster.AsterBlock"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "[", "1", ",", "1", "]", "or", "self", ".", "inplanes", "!=", "planes", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "AsterBlock", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "AsterBlock", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.ResNet_ASTER.forward": [[113, 136], ["resnet_aster.ResNet_ASTER.layer0", "resnet_aster.ResNet_ASTER.layer1", "resnet_aster.ResNet_ASTER.layer2", "resnet_aster.ResNet_ASTER.layer3", "resnet_aster.ResNet_ASTER.layer4", "resnet_aster.ResNet_ASTER.layer5", "resnet_aster.ResNet_ASTER.squeeze", "cnn_feat.transpose.transpose.transpose", "resnet_aster.ResNet_ASTER.rnn", "hasattr", "resnet_aster.ResNet_ASTER.rnn.flatten_parameters", "setattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "    ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer5", "(", "x4", ")", "\n", "\n", "cnn_feat", "=", "x5", ".", "squeeze", "(", "2", ")", "# [N, c, w]", "\n", "cnn_feat", "=", "cnn_feat", ".", "transpose", "(", "2", ",", "1", ")", "\n", "if", "self", ".", "with_lstm", ":", "\n", "# print(\"shit\")", "\n", "# self.rnn.flatten_parameters()", "\n", "\n", "      ", "if", "not", "hasattr", "(", "self", ",", "'_flattened'", ")", ":", "\n", "        ", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "setattr", "(", "self", ",", "'_flattened'", ",", "True", ")", "\n", "\n", "", "rnn_feat", ",", "_", "=", "self", ".", "rnn", "(", "cnn_feat", ")", "\n", "return", "rnn_feat", "\n", "", "else", ":", "\n", "      ", "return", "cnn_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.conv1x1": [[18, 21], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.resnet_aster.get_sinusoid_encoding": [[23, 35], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pow", "torch.pow", "angles.float.float", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.arange.unsqueeze", "torch.pow.unsqueeze"], "function", ["None"], ["", "def", "get_sinusoid_encoding", "(", "n_position", ",", "feat_dim", ",", "wave_length", "=", "10000", ")", ":", "\n", "# [n_position]", "\n", "  ", "positions", "=", "torch", ".", "arange", "(", "0", ",", "n_position", ")", "#.cuda()", "\n", "# [feat_dim]", "\n", "dim_range", "=", "torch", ".", "arange", "(", "0", ",", "feat_dim", ")", "#.cuda()", "\n", "dim_range", "=", "torch", ".", "pow", "(", "wave_length", ",", "2", "*", "(", "dim_range", "//", "2", ")", "/", "feat_dim", ")", "\n", "# [n_position, feat_dim]", "\n", "angles", "=", "positions", ".", "unsqueeze", "(", "1", ")", "/", "dim_range", ".", "unsqueeze", "(", "0", ")", "\n", "angles", "=", "angles", ".", "float", "(", ")", "\n", "angles", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "angles", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "angles", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "angles", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss.__init__": [[20, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["  ", "def", "__init__", "(", "self", ",", "\n", "weight", "=", "None", ",", "\n", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "-", "100", ",", "\n", "sequence_normalize", "=", "False", ",", "\n", "sample_normalize", "=", "True", ")", ":", "\n", "    ", "super", "(", "SequenceCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "sequence_normalize", "=", "sequence_normalize", "\n", "self", ".", "sample_normalize", "=", "sample_normalize", "\n", "\n", "assert", "(", "sequence_normalize", "and", "sample_normalize", ")", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss.forward": [[35, 65], ["sequenceCrossEntropyLoss._assert_no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "to_contiguous().view.type_as", "max", "to_contiguous().view", "torch.log_softmax", "torch.log_softmax", "to_contiguous().view", "to_contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "to_contiguous().view.size", "to_contiguous().view.size", "mask[].fill_", "torch.log_softmax.size", "torch.log_softmax.size", "sequenceCrossEntropyLoss.to_contiguous", "sequenceCrossEntropyLoss.to_contiguous", "sequenceCrossEntropyLoss.to_contiguous", "torch.log_softmax.gather", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "to_contiguous().view.long"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss._assert_no_grad", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "length", ")", ":", "\n", "    ", "_assert_no_grad", "(", "target", ")", "\n", "# length to mask", "\n", "batch_size", ",", "def_max_length", "=", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "batch_size", ",", "def_max_length", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "mask", "[", "i", ",", ":", "length", "[", "i", "]", "]", ".", "fill_", "(", "1", ")", "\n", "", "mask", "=", "mask", ".", "type_as", "(", "input", ")", "\n", "# truncate to the same size", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "assert", "max_length", "==", "input", ".", "size", "(", "1", ")", "\n", "target", "=", "target", "[", ":", ",", ":", "max_length", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", "max_length", "]", "\n", "input", "=", "to_contiguous", "(", "input", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "\n", "input", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "target", "=", "to_contiguous", "(", "target", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "to_contiguous", "(", "mask", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "output", "=", "-", "input", ".", "gather", "(", "1", ",", "target", ".", "long", "(", ")", ")", "*", "mask", "\n", "# if self.size_average:", "\n", "#   output = torch.sum(output) / torch.sum(mask)", "\n", "# elif self.reduce:", "\n", "#   output = torch.sum(output)", "\n", "##", "\n", "output", "=", "torch", ".", "sum", "(", "output", ")", "\n", "if", "self", ".", "sequence_normalize", ":", "\n", "      ", "output", "=", "output", "/", "torch", ".", "sum", "(", "mask", ")", "\n", "", "if", "self", ".", "sample_normalize", ":", "\n", "      ", "output", "=", "output", "/", "batch_size", "\n", "\n", "", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.sequenceCrossEntropyLoss.to_contiguous": [[8, 13], ["tensor.is_contiguous", "tensor.contiguous"], "function", ["None"], ["def", "to_contiguous", "(", "tensor", ")", ":", "\n", "  ", "if", "tensor", ".", "is_contiguous", "(", ")", ":", "\n", "    ", "return", "tensor", "\n", "", "else", ":", "\n", "    ", "return", "tensor", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.sequenceCrossEntropyLoss._assert_no_grad": [[14, 17], ["None"], "function", ["None"], ["", "", "def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "  ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.stn_head.STNHead.__init__": [[27, 55], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_stn", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_stn", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block"], ["    ", "super", "(", "STNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# print(\"in_planse--------------------------:\", in_planes)", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "num_ctrlpoints", "=", "num_ctrlpoints", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "stn_convnet", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3_block", "(", "in_planes", ",", "32", ")", ",", "# 16*64", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "32", ",", "64", ")", ",", "# 8*32", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "64", ",", "128", ")", ",", "# 4*16", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "128", ",", "256", ")", ",", "# 2*8", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "# for 32 * 128", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ",", "# 1*4,", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "1", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ")", ",", "# for 32 * 128", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ")", "# 1*2", "\n", "\n", "flatten_width", "=", "2", "# int(input_size[1] / 32)", "\n", "# print(\"flw:\", input_size[1] / 32) # for 32 * 128", "\n", "self", ".", "stn_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "flatten_width", "*", "256", ",", "512", ")", ",", "#flatten_width*256", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "stn_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "num_ctrlpoints", "*", "2", ")", "\n", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_convnet", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.stn_head.STNHead.init_weights": [[56, 69], ["module.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["self", ".", "init_weights", "(", "self", ".", "stn_fc1", ")", "\n", "self", ".", "init_stn", "(", "self", ".", "stn_fc2", ")", "\n", "\n", "", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.stn_head.STNHead.init_stn": [[70, 85], ["int", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate().astype", "stn_fc2.weight.data.zero_", "torch.Tensor().view", "numpy.ones", "numpy.ones", "numpy.concatenate", "torch.Tensor", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "init_stn", "(", "self", ",", "stn_fc2", ")", ":", "\n", "    ", "margin", "=", "0.01", "\n", "sampling_num_per_side", "=", "int", "(", "self", ".", "num_ctrlpoints", "/", "2", ")", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin", ",", "1.", "-", "margin", ",", "sampling_num_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "margin", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "(", "1", "-", "margin", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_points", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# print(ctrl_points.shape)", "\n", "if", "self", ".", "activation", "is", "'none'", ":", "\n", "      ", "pass", "\n", "", "elif", "self", ".", "activation", "==", "'sigmoid'", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.stn_head.STNHead.forward": [[86, 97], ["stn_head.STNHead.stn_convnet", "torch.nn.functional.sigmoid.size", "torch.nn.functional.sigmoid.view", "stn_head.STNHead.stn_fc1", "stn_head.STNHead.stn_fc2", "torch.nn.functional.sigmoid.view", "torch.nn.functional.sigmoid"], "methods", ["None"], ["      ", "ctrl_points", "=", "-", "np", ".", "log", "(", "1.", "/", "ctrl_points", "-", "1.", ")", "\n", "", "elif", "self", ".", "activation", "==", "'relu'", ":", "\n", "      ", "ctrl_points", "=", "F", ".", "relu", "(", "torch", ".", "Tensor", "(", "ctrl_points", ")", ")", "\n", "", "stn_fc2", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "stn_fc2", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "ctrl_points", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "stn_convnet", "(", "x", ")", "\n", "batch_size", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# print(\"x:\", x.shape)", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.stn_head.conv3x3_block": [[14, 24], ["torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["None"], ["  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "conv_layer", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "return", "block", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.__init__.names": [[9, 11], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.recognizer.__init__.create": [[13, 30], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.fracPickup.fracPickup.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CUDA", "=", "True", ")", ":", "\n", "        ", "super", "(", "fracPickup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cuda", "=", "CUDA", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.fracPickup.fracPickup.forward": [[13, 49], ["x.size", "range", "numpy.meshgrid", "numpy.meshgrid", "numpy.stack", "numpy.stack", "numpy.transpose", "numpy.transpose", "numpy.expand_dims", "numpy.expand_dims", "numpy.tile", "numpy.tile", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.autograd.Variable", "torch.autograd.Variable", "torch.functional.grid_sample", "torch.functional.grid_sample", "len", "int", "x.data.type", "grid.cuda.cuda.cuda", "numpy.rand", "numpy.rand", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.arange", "numpy.arange", "numpy.rand", "numpy.rand", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "x", ".", "size", "(", ")", "\n", "assert", "len", "(", "x_shape", ")", "==", "4", "\n", "assert", "x_shape", "[", "2", "]", "==", "1", "\n", "\n", "fracPickup_num", "=", "1", "\n", "\n", "h_list", "=", "1.", "\n", "w_list", "=", "np", ".", "arange", "(", "x_shape", "[", "3", "]", ")", "*", "2.", "/", "(", "x_shape", "[", "3", "]", "-", "1", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "fracPickup_num", ")", ":", "\n", "            ", "idx", "=", "int", "(", "npr", ".", "rand", "(", ")", "*", "len", "(", "w_list", ")", ")", "\n", "if", "idx", "<=", "0", "or", "idx", ">=", "x_shape", "[", "3", "]", "-", "1", ":", "\n", "                ", "continue", "\n", "", "beta", "=", "npr", ".", "rand", "(", ")", "/", "4.", "\n", "value0", "=", "(", "beta", "*", "w_list", "[", "idx", "]", "+", "(", "1", "-", "beta", ")", "*", "w_list", "[", "idx", "-", "1", "]", ")", "\n", "value1", "=", "(", "beta", "*", "w_list", "[", "idx", "-", "1", "]", "+", "(", "1", "-", "beta", ")", "*", "w_list", "[", "idx", "]", ")", "\n", "w_list", "[", "idx", "-", "1", "]", "=", "value0", "\n", "w_list", "[", "idx", "]", "=", "value1", "\n", "\n", "", "grid", "=", "np", ".", "meshgrid", "(", "\n", "w_list", ",", "\n", "h_list", ",", "\n", "indexing", "=", "'ij'", "\n", ")", "\n", "grid", "=", "np", ".", "stack", "(", "grid", ",", "axis", "=", "-", "1", ")", "\n", "grid", "=", "np", ".", "transpose", "(", "grid", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "grid", "=", "np", ".", "expand_dims", "(", "grid", ",", "0", ")", "\n", "grid", "=", "np", ".", "tile", "(", "grid", ",", "[", "x_shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "grid", ")", ".", "type", "(", "x", ".", "data", ".", "type", "(", ")", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "", "self", ".", "grid", "=", "Variable", "(", "grid", ",", "requires_grad", "=", "False", ")", "\n", "\n", "x_offset", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "self", ".", "grid", ")", "\n", "\n", "return", "x_offset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.morn.MORN.__init__": [[7, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "numpy.meshgrid", "numpy.stack", "numpy.transpose", "numpy.expand_dims", "numpy.tile", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.autograd.Variable", "torch.autograd.Variable", "morn.MORN.grid[].unsqueeze", "morn.MORN.grid[].unsqueeze", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "grid.cuda.cuda.cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "targetH", ",", "targetW", ",", "inputDataType", "=", "'torch.cuda.FloatTensor'", ",", "maxBatch", "=", "256", ",", "CUDA", "=", "True", ")", ":", "\n", "        ", "super", "(", "MORN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "targetH", "=", "targetH", "\n", "self", ".", "targetW", "=", "targetW", "\n", "self", ".", "inputDataType", "=", "inputDataType", "\n", "self", ".", "maxBatch", "=", "maxBatch", "\n", "self", ".", "cuda", "=", "CUDA", "\n", "\n", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "1", ")", "\n", "\n", "h_list", "=", "np", ".", "arange", "(", "self", ".", "targetH", ")", "*", "2.", "/", "(", "self", ".", "targetH", "-", "1", ")", "-", "1", "\n", "w_list", "=", "np", ".", "arange", "(", "self", ".", "targetW", ")", "*", "2.", "/", "(", "self", ".", "targetW", "-", "1", ")", "-", "1", "\n", "\n", "grid", "=", "np", ".", "meshgrid", "(", "\n", "w_list", ",", "\n", "h_list", ",", "\n", "indexing", "=", "'ij'", "\n", ")", "\n", "grid", "=", "np", ".", "stack", "(", "grid", ",", "axis", "=", "-", "1", ")", "\n", "grid", "=", "np", ".", "transpose", "(", "grid", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "grid", "=", "np", ".", "expand_dims", "(", "grid", ",", "0", ")", "\n", "grid", "=", "np", ".", "tile", "(", "grid", ",", "[", "maxBatch", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "grid", ")", ".", "type", "(", "self", ".", "inputDataType", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "grid", "=", "Variable", "(", "grid", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "grid_x", "=", "self", ".", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "3", ")", "\n", "self", ".", "grid_y", "=", "self", ".", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.morn.MORN.forward": [[46, 140], ["morn.MORN.grid[].to", "morn.MORN.grid_x[].to", "morn.MORN.grid_y[].to", "torch.functional.upsample", "torch.functional.upsample", "morn.MORN.cnn", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.grid_sample", "torch.functional.grid_sample", "offsets_grid.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.functional.grid_sample", "torch.functional.grid_sample", "range", "torch.functional.upsample", "torch.functional.upsample", "x.size", "x.data.type", "morn.MORN.pool", "morn.MORN.pool", "morn.MORN.cnn", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.grid_sample().permute().contiguous", "torch.functional.grid_sample().permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.functional.grid_sample", "torch.functional.grid_sample", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "numpy.empty", "plt.get_cmap", "Color", "list", "transforms.ToPILImage", "range", "numpy.random.random", "offsets_grid.permute().contiguous.permute().contiguous.permute", "morn.MORN.pool", "morn.MORN.pool", "offsets_grid.permute().contiguous.permute().contiguous.view", "offsets_grid.permute().contiguous.permute().contiguous.view", "offsets_grid.permute().contiguous.permute().contiguous.view", "Color.range_to", "x.size", "x_small[].data.cpu().mul_().add_", "transforms.ToPILImage.", "numpy.array", "cv2.merge.copy", "offsets_grid[].view().data.cpu().add_().mul_", "transforms.ToPILImage.", "numpy.array", "numpy.empty", "range", "color_map.astype.astype.astype", "cv2.addWeighted", "x_rectified[].data.cpu().mul_().add_", "transforms.ToPILImage.", "numpy.array", "cv2.resize", "torch.functional.grid_sample().permute", "torch.functional.grid_sample().permute", "x.size", "x.size", "x.size", "Color", "len", "cv2.merge", "range", "len", "cv2.merge", "numpy.ones", "cv2.resize.astype", "x.size", "x.size", "x.size", "x_small[].data.cpu().mul_", "offsets_grid[].view().data.cpu().add_", "x_rectified[].data.cpu().mul_", "torch.functional.grid_sample", "torch.functional.grid_sample", "x_small[].data.cpu", "cv2.merge.copy", "offsets_grid[].view().data.cpu", "int", "x_rectified[].data.cpu", "cv2.merge.copy", "offsets_grid[].view"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.upsample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["", "def", "forward", "(", "self", ",", "x", ",", "test", ",", "enhance", "=", "1", ",", "debug", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "test", "and", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "upsample", "(", "x", ",", "size", "=", "(", "self", ".", "targetH", ",", "self", ".", "targetW", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "if", "not", "test", ":", "\n", "            ", "enhance", "=", "0", "\n", "\n", "", "assert", "x", ".", "size", "(", "0", ")", "<=", "self", ".", "maxBatch", "\n", "assert", "x", ".", "data", ".", "type", "(", ")", "==", "self", ".", "inputDataType", "\n", "\n", "grid", "=", "self", ".", "grid", "[", ":", "x", ".", "size", "(", "0", ")", "]", ".", "to", "(", "x", ".", "device", ")", "\n", "grid_x", "=", "self", ".", "grid_x", "[", ":", "x", ".", "size", "(", "0", ")", "]", ".", "to", "(", "x", ".", "device", ")", "\n", "grid_y", "=", "self", ".", "grid_y", "[", ":", "x", ".", "size", "(", "0", ")", "]", ".", "to", "(", "x", ".", "device", ")", "\n", "x_small", "=", "nn", ".", "functional", ".", "upsample", "(", "x", ",", "size", "=", "(", "self", ".", "targetH", ",", "self", ".", "targetW", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "offsets", "=", "self", ".", "cnn", "(", "x_small", ")", "\n", "offsets_posi", "=", "nn", ".", "functional", ".", "relu", "(", "offsets", ",", "inplace", "=", "False", ")", "\n", "offsets_nega", "=", "nn", ".", "functional", ".", "relu", "(", "-", "offsets", ",", "inplace", "=", "False", ")", "\n", "offsets_pool", "=", "self", ".", "pool", "(", "offsets_posi", ")", "-", "self", ".", "pool", "(", "offsets_nega", ")", "\n", "\n", "offsets_grid", "=", "nn", ".", "functional", ".", "grid_sample", "(", "offsets_pool", ",", "grid", ")", "\n", "offsets_grid", "=", "offsets_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "offsets_x", "=", "torch", ".", "cat", "(", "[", "grid_x", ",", "grid_y", "+", "offsets_grid", "]", ",", "3", ")", "\n", "x_rectified", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "offsets_x", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "enhance", ")", ":", "\n", "            ", "offsets", "=", "self", ".", "cnn", "(", "x_rectified", ")", "\n", "\n", "offsets_posi", "=", "nn", ".", "functional", ".", "relu", "(", "offsets", ",", "inplace", "=", "False", ")", "\n", "offsets_nega", "=", "nn", ".", "functional", ".", "relu", "(", "-", "offsets", ",", "inplace", "=", "False", ")", "\n", "offsets_pool", "=", "self", ".", "pool", "(", "offsets_posi", ")", "-", "self", ".", "pool", "(", "offsets_nega", ")", "\n", "\n", "offsets_grid", "+=", "nn", ".", "functional", ".", "grid_sample", "(", "offsets_pool", ",", "grid", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "offsets_x", "=", "torch", ".", "cat", "(", "[", "grid_x", ",", "grid_y", "+", "offsets_grid", "]", ",", "3", ")", "\n", "x_rectified", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "offsets_x", ")", "\n", "\n", "", "if", "debug", ":", "\n", "\n", "            ", "offsets_mean", "=", "torch", ".", "mean", "(", "offsets_grid", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "offsets_max", ",", "_", "=", "torch", ".", "max", "(", "offsets_grid", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "offsets_min", ",", "_", "=", "torch", ".", "min", "(", "offsets_grid", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", "\n", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "colour", "import", "Color", "\n", "from", "torchvision", "import", "transforms", "\n", "import", "cv2", "\n", "\n", "alpha", "=", "0.7", "\n", "density_range", "=", "256", "\n", "color_map", "=", "np", ".", "empty", "(", "[", "self", ".", "targetH", ",", "self", ".", "targetW", ",", "3", "]", ",", "dtype", "=", "int", ")", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "\"rainbow\"", ")", "\n", "blue", "=", "Color", "(", "\"blue\"", ")", "\n", "hex_colors", "=", "list", "(", "blue", ".", "range_to", "(", "Color", "(", "\"red\"", ")", ",", "density_range", ")", ")", "\n", "rgb_colors", "=", "[", "[", "rgb", "*", "255", "for", "rgb", "in", "color", ".", "rgb", "]", "for", "color", "in", "hex_colors", "]", "[", ":", ":", "-", "1", "]", "\n", "to_pil_image", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                ", "img_small", "=", "x_small", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "mul_", "(", "0.5", ")", ".", "add_", "(", "0.5", ")", "\n", "img", "=", "to_pil_image", "(", "img_small", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "img", "=", "cv2", ".", "merge", "(", "[", "img", ".", "copy", "(", ")", "]", "*", "3", ")", "\n", "", "img_copy", "=", "img", ".", "copy", "(", ")", "\n", "\n", "v_max", "=", "offsets_max", ".", "data", "[", "i", "]", "\n", "v_min", "=", "offsets_min", ".", "data", "[", "i", "]", "\n", "img_offsets", "=", "(", "offsets_grid", "[", "i", "]", ")", ".", "view", "(", "1", ",", "self", ".", "targetH", ",", "self", ".", "targetW", ")", ".", "data", ".", "cpu", "(", ")", ".", "add_", "(", "-", "v_min", ")", ".", "mul_", "(", "1.", "/", "(", "v_max", "-", "v_min", ")", ")", "\n", "img_offsets", "=", "to_pil_image", "(", "img_offsets", ")", "\n", "img_offsets", "=", "np", ".", "array", "(", "img_offsets", ")", "\n", "color_map", "=", "np", ".", "empty", "(", "[", "self", ".", "targetH", ",", "self", ".", "targetW", ",", "3", "]", ",", "dtype", "=", "int", ")", "\n", "for", "h_i", "in", "range", "(", "self", ".", "targetH", ")", ":", "\n", "                    ", "for", "w_i", "in", "range", "(", "self", ".", "targetW", ")", ":", "\n", "                        ", "color_map", "[", "h_i", "]", "[", "w_i", "]", "=", "rgb_colors", "[", "int", "(", "img_offsets", "[", "h_i", ",", "w_i", "]", "/", "256.", "*", "density_range", ")", "]", "\n", "", "", "color_map", "=", "color_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "addWeighted", "(", "color_map", ",", "alpha", ",", "img_copy", ",", "1", "-", "alpha", ",", "0", ",", "img_copy", ")", "\n", "\n", "img_processed", "=", "x_rectified", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "mul_", "(", "0.5", ")", ".", "add_", "(", "0.5", ")", "\n", "img_processed", "=", "to_pil_image", "(", "img_processed", ")", "\n", "img_processed", "=", "np", ".", "array", "(", "img_processed", ")", "\n", "if", "len", "(", "img_processed", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "img_processed", "=", "cv2", ".", "merge", "(", "[", "img_processed", ".", "copy", "(", ")", "]", "*", "3", ")", "\n", "\n", "", "total_img", "=", "np", ".", "ones", "(", "[", "self", ".", "targetH", ",", "self", ".", "targetW", "*", "3", "+", "10", ",", "3", "]", ",", "dtype", "=", "int", ")", "*", "255", "\n", "total_img", "[", "0", ":", "self", ".", "targetH", ",", "0", ":", "self", ".", "targetW", "]", "=", "img", "\n", "total_img", "[", "0", ":", "self", ".", "targetH", ",", "self", ".", "targetW", "+", "5", ":", "2", "*", "self", ".", "targetW", "+", "5", "]", "=", "img_copy", "\n", "total_img", "[", "0", ":", "self", ".", "targetH", ",", "self", ".", "targetW", "*", "2", "+", "10", ":", "3", "*", "self", ".", "targetW", "+", "10", "]", "=", "img_processed", "\n", "total_img", "=", "cv2", ".", "resize", "(", "total_img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "(", "300", ",", "50", ")", ")", "\n", "# cv2.imshow(\"Input_Offsets_Output\", total_img)", "\n", "# cv2.waitKey()", "\n", "\n", "", "return", "x_rectified", ",", "total_img", "\n", "\n", "", "return", "x_rectified", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.BidirectionalLSTM.__init__": [[11, 16], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ",", "dropout", "=", "0.3", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.BidirectionalLSTM.forward": [[17, 26], ["asrn_res.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "asrn_res.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.AttentionCell.__init__": [[28, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "fracPickup.fracPickup.fracPickup"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_embeddings", "=", "128", ",", "CUDA", "=", "True", ")", ":", "\n", "        ", "super", "(", "AttentionCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "i2h", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "h2h", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "score", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "input_size", "+", "num_embeddings", ",", "hidden_size", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "num_embeddings", "=", "num_embeddings", "\n", "self", ".", "fracPickup", "=", "fracPickup", "(", "CUDA", "=", "CUDA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.AttentionCell.forward": [[39, 66], ["feats.size", "feats.size", "feats.size", "asrn_res.AttentionCell.i2h", "asrn_res.AttentionCell.h2h().view().expand().contiguous().view", "asrn_res.AttentionCell.score().view", "torch.softmax", "torch.softmax", "torch.softmax", "feats.view", "asrn_res.AttentionCell.fracPickup().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "asrn_res.AttentionCell.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "asrn_res.AttentionCell.rnn", "asrn_res.AttentionCell.h2h().view().expand().contiguous", "asrn_res.AttentionCell.score", "len", "context.unsqueeze.unsqueeze.unsqueeze", "len", "context.unsqueeze.unsqueeze.unsqueeze", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "asrn_res.AttentionCell.fracPickup", "context.unsqueeze.unsqueeze.size", "context.unsqueeze.unsqueeze.size", "asrn_res.AttentionCell.h2h().view().expand", "torch.softmax.transpose().contiguous().unsqueeze().unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "asrn_res.AttentionCell.h2h().view", "torch.softmax.transpose().contiguous().unsqueeze", "asrn_res.AttentionCell.transpose().contiguous().view().expand", "torch.softmax.view().expand", "asrn_res.AttentionCell.h2h", "torch.softmax.transpose().contiguous", "asrn_res.AttentionCell.transpose().contiguous().view", "torch.softmax.view", "torch.softmax.transpose", "asrn_res.AttentionCell.transpose().contiguous", "asrn_res.AttentionCell.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_hidden", ",", "feats", ",", "cur_embeddings", ",", "test", "=", "False", ")", ":", "\n", "        ", "nT", "=", "feats", ".", "size", "(", "0", ")", "\n", "nB", "=", "feats", ".", "size", "(", "1", ")", "\n", "nC", "=", "feats", ".", "size", "(", "2", ")", "\n", "hidden_size", "=", "self", ".", "hidden_size", "\n", "\n", "feats_proj", "=", "self", ".", "i2h", "(", "feats", ".", "view", "(", "-", "1", ",", "nC", ")", ")", "\n", "prev_hidden_proj", "=", "self", ".", "h2h", "(", "prev_hidden", ")", ".", "view", "(", "1", ",", "nB", ",", "hidden_size", ")", ".", "expand", "(", "nT", ",", "nB", ",", "hidden_size", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hidden_size", ")", "\n", "emition", "=", "self", ".", "score", "(", "F", ".", "tanh", "(", "feats_proj", "+", "prev_hidden_proj", ")", ".", "view", "(", "-", "1", ",", "hidden_size", ")", ")", ".", "view", "(", "nT", ",", "nB", ")", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "emition", ",", "0", ")", "# nT * nB", "\n", "\n", "if", "not", "test", ":", "\n", "            ", "alpha_fp", "=", "self", ".", "fracPickup", "(", "alpha", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "context", "=", "(", "feats", "*", "alpha_fp", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nT", ",", "nB", ",", "1", ")", ".", "expand", "(", "nT", ",", "nB", ",", "nC", ")", ")", ".", "sum", "(", "0", ")", ".", "squeeze", "(", "0", ")", "# nB * nC", "\n", "if", "len", "(", "context", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "                ", "context", "=", "context", ".", "unsqueeze", "(", "0", ")", "\n", "", "context", "=", "torch", ".", "cat", "(", "[", "context", ",", "cur_embeddings", "]", ",", "1", ")", "\n", "cur_hidden", "=", "self", ".", "rnn", "(", "context", ",", "prev_hidden", ")", "\n", "return", "cur_hidden", ",", "alpha_fp", "\n", "", "else", ":", "\n", "            ", "context", "=", "(", "feats", "*", "alpha", ".", "view", "(", "nT", ",", "nB", ",", "1", ")", ".", "expand", "(", "nT", ",", "nB", ",", "nC", ")", ")", ".", "sum", "(", "0", ")", ".", "squeeze", "(", "0", ")", "# nB * nC", "\n", "if", "len", "(", "context", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "                ", "context", "=", "context", ".", "unsqueeze", "(", "0", ")", "\n", "", "context", "=", "torch", ".", "cat", "(", "[", "context", ",", "cur_embeddings", "]", ",", "1", ")", "\n", "cur_hidden", "=", "self", ".", "rnn", "(", "context", ",", "prev_hidden", ")", "\n", "return", "cur_hidden", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.Attention.__init__": [[68, 78], ["torch.Module.__init__", "asrn_res.AttentionCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_classes", ",", "num_embeddings", "=", "128", ",", "CUDA", "=", "True", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_cell", "=", "AttentionCell", "(", "input_size", ",", "hidden_size", ",", "num_embeddings", ",", "CUDA", "=", "CUDA", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "generator", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "num_classes", ")", "\n", "self", ".", "char_embeddings", "=", "Parameter", "(", "torch", ".", "randn", "(", "num_classes", "+", "1", ",", "num_embeddings", ")", ")", "\n", "self", ".", "num_embeddings", "=", "num_embeddings", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cuda", "=", "CUDA", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.Attention.forward": [[80, 156], ["feats.size", "feats.size", "feats.size", "text_length.data.max", "text_length.data.sum", "text_length.numel", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "asrn_res.Attention.generator", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "probs.cuda.cuda.view().permute().contiguous", "probs.cuda.cuda.view().contiguous", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "targets.cuda.cuda.cuda", "targets.cuda.cuda.transpose().contiguous", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "asrn_res.Attention.char_embeddings.index_select", "asrn_res.Attention.attention_cell", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros().long().contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "targets_temp.cuda.cuda.cuda", "probs.cuda.cuda.cuda", "asrn_res.Attention.char_embeddings.index_select", "asrn_res.Attention.attention_cell", "asrn_res.Attention.generator", "asrn_res.Attention.max", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "probs.cuda.cuda.view().permute", "probs.cuda.cuda.view", "targets.cuda.cuda.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "probs.cuda.cuda.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "text_length", ",", "text", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "nT", "=", "feats", ".", "size", "(", "0", ")", "\n", "nB", "=", "feats", ".", "size", "(", "1", ")", "\n", "nC", "=", "feats", ".", "size", "(", "2", ")", "\n", "hidden_size", "=", "self", ".", "hidden_size", "\n", "input_size", "=", "self", ".", "input_size", "\n", "# from IPython import embed", "\n", "# embed()", "\n", "assert", "(", "input_size", "==", "nC", ")", "\n", "assert", "(", "nB", "==", "text_length", ".", "numel", "(", ")", ")", "\n", "\n", "num_steps", "=", "text_length", ".", "data", ".", "max", "(", ")", "\n", "num_labels", "=", "text_length", ".", "data", ".", "sum", "(", ")", "\n", "\n", "if", "not", "test", ":", "\n", "\n", "            ", "targets", "=", "torch", ".", "zeros", "(", "nB", ",", "num_steps", "+", "1", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "", "start_id", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "nB", ")", ":", "\n", "                ", "targets", "[", "i", "]", "[", "1", ":", "1", "+", "text_length", ".", "data", "[", "i", "]", "]", "=", "text", ".", "data", "[", "start_id", ":", "start_id", "+", "text_length", ".", "data", "[", "i", "]", "]", "+", "1", "\n", "start_id", "=", "start_id", "+", "text_length", ".", "data", "[", "i", "]", "\n", "", "targets", "=", "Variable", "(", "targets", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "output_hiddens", "=", "Variable", "(", "torch", ".", "zeros", "(", "num_steps", ",", "nB", ",", "hidden_size", ")", ".", "type_as", "(", "feats", ".", "data", ")", ")", "\n", "hidden", "=", "Variable", "(", "torch", ".", "zeros", "(", "nB", ",", "hidden_size", ")", ".", "type_as", "(", "feats", ".", "data", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "                ", "cur_embeddings", "=", "self", ".", "char_embeddings", ".", "index_select", "(", "0", ",", "targets", "[", "i", "]", ")", "\n", "hidden", ",", "alpha", "=", "self", ".", "attention_cell", "(", "hidden", ",", "feats", ",", "cur_embeddings", ",", "test", ")", "\n", "output_hiddens", "[", "i", "]", "=", "hidden", "\n", "\n", "", "new_hiddens", "=", "Variable", "(", "torch", ".", "zeros", "(", "num_labels", ",", "hidden_size", ")", ".", "type_as", "(", "feats", ".", "data", ")", ")", "\n", "b", "=", "0", "\n", "start", "=", "0", "\n", "\n", "for", "length", "in", "text_length", ".", "data", ":", "\n", "                ", "new_hiddens", "[", "start", ":", "start", "+", "length", "]", "=", "output_hiddens", "[", "0", ":", "length", ",", "b", ",", ":", "]", "\n", "start", "=", "start", "+", "length", "\n", "b", "=", "b", "+", "1", "\n", "\n", "", "probs", "=", "self", ".", "generator", "(", "new_hiddens", ")", "\n", "return", "probs", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "hidden", "=", "Variable", "(", "torch", ".", "zeros", "(", "nB", ",", "hidden_size", ")", ".", "type_as", "(", "feats", ".", "data", ")", ")", "\n", "targets_temp", "=", "Variable", "(", "torch", ".", "zeros", "(", "nB", ")", ".", "long", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "probs", "=", "Variable", "(", "torch", ".", "zeros", "(", "nB", "*", "num_steps", ",", "self", ".", "num_classes", ")", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "targets_temp", "=", "targets_temp", ".", "cuda", "(", ")", "\n", "probs", "=", "probs", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "                ", "cur_embeddings", "=", "self", ".", "char_embeddings", ".", "index_select", "(", "0", ",", "targets_temp", ")", "\n", "hidden", ",", "alpha", "=", "self", ".", "attention_cell", "(", "hidden", ",", "feats", ",", "cur_embeddings", ",", "test", ")", "\n", "hidden2class", "=", "self", ".", "generator", "(", "hidden", ")", "\n", "probs", "[", "i", "*", "nB", ":", "(", "i", "+", "1", ")", "*", "nB", "]", "=", "hidden2class", "\n", "_", ",", "targets_temp", "=", "hidden2class", ".", "max", "(", "1", ")", "\n", "targets_temp", "+=", "1", "\n", "\n", "", "probs", "=", "probs", ".", "view", "(", "num_steps", ",", "nB", ",", "self", ".", "num_classes", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "probs", "=", "probs", ".", "view", "(", "-", "1", ",", "self", ".", "num_classes", ")", ".", "contiguous", "(", ")", "\n", "probs_res", "=", "Variable", "(", "torch", ".", "zeros", "(", "num_labels", ",", "self", ".", "num_classes", ")", ".", "type_as", "(", "feats", ".", "data", ")", ")", "\n", "b", "=", "0", "\n", "start", "=", "0", "\n", "\n", "for", "length", "in", "text_length", ".", "data", ":", "\n", "                ", "probs_res", "[", "start", ":", "start", "+", "length", "]", "=", "probs", "[", "b", "*", "num_steps", ":", "b", "*", "num_steps", "+", "length", "]", "\n", "start", "=", "start", "+", "length", "\n", "b", "=", "b", "+", "1", "\n", "\n", "", "return", "probs_res", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.Residual_block.__init__": [[158, 179], ["torch.Module.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "c_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Residual_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "flag", "=", "False", "\n", "if", "isinstance", "(", "stride", ",", "tuple", ")", ":", "\n", "            ", "if", "stride", "[", "0", "]", ">", "1", ":", "\n", "                ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "c_out", ",", "momentum", "=", "0.01", ")", ")", "\n", "flag", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "if", "stride", ">", "1", ":", "\n", "                ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "c_out", ",", "momentum", "=", "0.01", ")", ")", "\n", "flag", "=", "True", "\n", "", "", "if", "flag", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c_out", ",", "momentum", "=", "0.01", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "1", ",", "stride", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c_out", ",", "momentum", "=", "0.01", ")", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c_out", ",", "c_out", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c_out", ",", "momentum", "=", "0.01", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.Residual_block.forward": [[180, 187], ["asrn_res.Residual_block.conv1", "asrn_res.Residual_block.conv2", "asrn_res.Residual_block.relu", "asrn_res.Residual_block.downsample"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "", "return", "self", ".", "relu", "(", "residual", "+", "conv2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.ResNet.__init__": [[189, 197], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "asrn_res.ResNet._make_layer", "asrn_res.ResNet._make_layer", "asrn_res.ResNet._make_layer", "asrn_res.ResNet._make_layer", "asrn_res.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c_in", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "32", ",", "momentum", "=", "0.01", ")", ")", "\n", "self", ".", "block1", "=", "self", ".", "_make_layer", "(", "32", ",", "32", ",", "2", ",", "3", ")", "\n", "self", ".", "block2", "=", "self", ".", "_make_layer", "(", "32", ",", "64", ",", "2", ",", "4", ")", "\n", "self", ".", "block3", "=", "self", ".", "_make_layer", "(", "64", ",", "128", ",", "(", "2", ",", "1", ")", ",", "6", ")", "\n", "self", ".", "block4", "=", "self", ".", "_make_layer", "(", "128", ",", "256", ",", "(", "2", ",", "1", ")", ",", "6", ")", "\n", "self", ".", "block5", "=", "self", ".", "_make_layer", "(", "256", ",", "512", ",", "(", "2", ",", "1", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.ResNet._make_layer": [[198, 204], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "asrn_res.Residual_block", "layers.append", "asrn_res.Residual_block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "c_in", ",", "c_out", ",", "stride", ",", "repeat", "=", "3", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "Residual_block", "(", "c_in", ",", "c_out", ",", "stride", ")", ")", "\n", "for", "i", "in", "range", "(", "repeat", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Residual_block", "(", "c_out", ",", "c_out", ",", "1", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.ResNet.forward": [[205, 213], ["asrn_res.ResNet.block0", "asrn_res.ResNet.block1", "asrn_res.ResNet.block2", "asrn_res.ResNet.block3", "asrn_res.ResNet.block4", "asrn_res.ResNet.block5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "block0", "=", "self", ".", "block0", "(", "x", ")", "\n", "block1", "=", "self", ".", "block1", "(", "block0", ")", "\n", "block2", "=", "self", ".", "block2", "(", "block1", ")", "\n", "block3", "=", "self", ".", "block3", "(", "block2", ")", "\n", "block4", "=", "self", ".", "block4", "(", "block3", ")", "\n", "block5", "=", "self", ".", "block5", "(", "block4", ")", "\n", "return", "block5", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.ASRN.__init__": [[216, 240], ["torch.Module.__init__", "asrn_res.ResNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "asrn_res.ASRN.modules", "asrn_res.BidirectionalLSTM", "asrn_res.BidirectionalLSTM", "asrn_res.Attention", "asrn_res.Attention", "asrn_res.Attention", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.constant"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "nc", ",", "nclass", ",", "nh", ",", "BidirDecoder", "=", "False", ",", "CUDA", "=", "True", ")", ":", "\n", "        ", "super", "(", "ASRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "imgH", "%", "16", "==", "0", ",", "'imgH must be a multiple of 16'", "\n", "\n", "self", ".", "cnn", "=", "ResNet", "(", "nc", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "512", ",", "nh", ",", "nh", ")", ",", "\n", "BidirectionalLSTM", "(", "nh", ",", "nh", ",", "nh", ")", ",", "\n", ")", "\n", "\n", "self", ".", "BidirDecoder", "=", "BidirDecoder", "\n", "if", "self", ".", "BidirDecoder", ":", "\n", "            ", "self", ".", "attentionL2R", "=", "Attention", "(", "nh", ",", "nh", ",", "nclass", ",", "256", ",", "CUDA", "=", "CUDA", ")", "\n", "self", ".", "attentionR2L", "=", "Attention", "(", "nh", ",", "nh", ",", "nclass", ",", "256", ",", "CUDA", "=", "CUDA", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "Attention", "(", "nh", ",", "nh", ",", "nclass", ",", "256", ",", "CUDA", "=", "CUDA", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "a", "=", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.asrn_res.ASRN.forward": [[241, 260], ["asrn_res.ASRN.cnn", "conv.permute().contiguous.permute().contiguous.size", "conv.permute().contiguous.permute().contiguous.squeeze", "conv.permute().contiguous.permute().contiguous.permute().contiguous", "asrn_res.ASRN.rnn", "asrn_res.ASRN.attentionL2R", "asrn_res.ASRN.attentionR2L", "asrn_res.ASRN.attention", "conv.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.attention"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "length", ",", "text", ",", "text_rev", ",", "test", "=", "False", ")", ":", "\n", "# conv features", "\n", "        ", "conv", "=", "self", ".", "cnn", "(", "input", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv", ".", "size", "(", ")", "\n", "assert", "h", "==", "1", ",", "\"the height of conv must be 1\"", "\n", "conv", "=", "conv", ".", "squeeze", "(", "2", ")", "\n", "conv", "=", "conv", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# [w, b, c]", "\n", "\n", "# rnn features", "\n", "rnn", "=", "self", ".", "rnn", "(", "conv", ")", "\n", "\n", "if", "self", ".", "BidirDecoder", ":", "\n", "            ", "outputL2R", "=", "self", ".", "attentionL2R", "(", "rnn", ",", "length", ",", "text", ",", "test", ")", "\n", "outputR2L", "=", "self", ".", "attentionR2L", "(", "rnn", ",", "length", ",", "text_rev", ",", "test", ")", "\n", "return", "outputL2R", ",", "outputR2L", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "attention", "(", "rnn", ",", "length", ",", "text", ",", "test", ")", "\n", "return", "output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.moran.MORAN.__init__": [[8, 13], ["torch.Module.__init__", "morn.MORN", "asrn_res.ASRN"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "nclass", ",", "nh", ",", "targetH", ",", "targetW", ",", "BidirDecoder", "=", "False", ",", "\n", "inputDataType", "=", "'torch.cuda.FloatTensor'", ",", "maxBatch", "=", "256", ",", "CUDA", "=", "True", ")", ":", "\n", "        ", "super", "(", "MORAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "MORN", "=", "MORN", "(", "nc", ",", "targetH", ",", "targetW", ",", "inputDataType", ",", "maxBatch", ",", "CUDA", ")", "\n", "self", ".", "ASRN", "=", "ASRN", "(", "targetH", ",", "nc", ",", "nclass", ",", "nh", ",", "BidirDecoder", ",", "CUDA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.moran.moran.MORAN.forward": [[14, 23], ["moran.MORAN.MORN", "moran.MORAN.ASRN", "moran.MORAN.MORN", "moran.MORAN.ASRN"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "length", ",", "text", ",", "text_rev", ",", "test", "=", "False", ",", "debug", "=", "False", ")", ":", "\n", "        ", "if", "debug", ":", "\n", "            ", "x_rectified", ",", "demo", "=", "self", ".", "MORN", "(", "x", ",", "test", ",", "debug", "=", "debug", ")", "\n", "preds", "=", "self", ".", "ASRN", "(", "x_rectified", ",", "length", ",", "text", ",", "text_rev", ",", "test", ")", "\n", "return", "preds", ",", "demo", "\n", "", "else", ":", "\n", "            ", "x_rectified", "=", "self", ".", "MORN", "(", "x", ",", "test", ",", "debug", "=", "debug", ")", "\n", "preds", "=", "self", ".", "ASRN", "(", "x_rectified", ",", "length", ",", "text", ",", "text_rev", ",", "test", ")", "\n", "return", "preds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.config.get_args": [[93, 96], ["parser.parse_args"], "function", ["None"], ["def", "get_args", "(", "sys_args", ")", ":", "\n", "  ", "global_args", "=", "parser", ".", "parse_args", "(", "sys_args", ")", "\n", "return", "global_args", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.__init__": [[26, 38], ["object.__init__", "torch.device"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "metric", ",", "logs_dir", ",", "iters", "=", "0", ",", "best_res", "=", "-", "1", ",", "grad_clip", "=", "-", "1", ",", "use_cuda", "=", "True", ",", "loss_weights", "=", "{", "}", ")", ":", "\n", "    ", "super", "(", "BaseTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "logs_dir", "=", "logs_dir", "\n", "self", ".", "iters", "=", "iters", "\n", "self", ".", "best_res", "=", "best_res", "\n", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train": [[39, 167], ["trainers.BaseTrainer.model.train", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "enumerate", "trainers.BaseTrainer.model.train", "utils.meters.AverageMeter.update", "trainers.BaseTrainer._parse_data", "trainers.BaseTrainer._forward", "input_dict[].size", "output_dict[].items", "utils.meters.AverageMeter.update", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "utils.meters.AverageMeter.update", "time.time", "loss.mean.mean.mean", "loss.mean.mean.item", "total_loss.item", "torch.nn.utils.clip_grad_norm_", "print", "utils.serialization.save_checkpoint", "time.time", "trainers.BaseTrainer.model.parameters", "time.time", "loss_dict.items", "info.items", "evaluator.evaluate", "evaluator.evaluate", "print", "datetime.datetime.datetime.now().strftime", "len", "total_loss.item", "train_tfLogger.scalar_summary", "max", "trainers.BaseTrainer.model.module.state_dict", "os.join", "len", "min", "ValueError", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.Evaluator._parse_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.Evaluator._forward", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.base.TextBase.save_checkpoint", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.scalar_summary"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ",", "optimizer", ",", "current_lr", "=", "0.0", ",", "\n", "print_freq", "=", "100", ",", "train_tfLogger", "=", "None", ",", "is_debug", "=", "False", ",", "\n", "evaluator", "=", "None", ",", "test_loader", "=", "None", ",", "eval_tfLogger", "=", "None", ",", "\n", "test_dataset", "=", "None", ",", "test_freq", "=", "1000", ")", ":", "\n", "\n", "    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "      ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "iters", "+=", "1", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input_dict", "=", "self", ".", "_parse_data", "(", "inputs", ")", "\n", "output_dict", "=", "self", ".", "_forward", "(", "input_dict", ")", "\n", "\n", "batch_size", "=", "input_dict", "[", "'images'", "]", ".", "size", "(", "0", ")", "\n", "\n", "total_loss", "=", "0", "\n", "loss_dict", "=", "{", "}", "\n", "for", "k", ",", "loss", "in", "output_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "total_loss", "+=", "self", ".", "loss_weights", "[", "k", "]", "*", "loss", "\n", "loss_dict", "[", "k", "]", "=", "loss", ".", "item", "(", ")", "\n", "# print('{0}: {1}'.format(k, loss.item()))", "\n", "\n", "", "losses", ".", "update", "(", "total_loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ">", "0", ":", "\n", "        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# # debug: check the parameters fixed or not.", "\n", "# print(self.model.parameters())", "\n", "# for tag, value in self.model.named_parameters():", "\n", "#   if tag == 'module.base.resnet.layer4.0.conv1.weight':", "\n", "#     print(value[:10,0,0,0])", "\n", "#   if tag == 'module.rec_head.decoder.attention_unit.sEmbed.weight':", "\n", "#     print(value[0, :10])", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "iters", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'[{}]\\t'", "\n", "'Epoch: [{}][{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", "'Loss {:.3f} ({:.3f})\\t'", "\n", "'Embed Loss: {:.5f}\\t'", "\n", "'Recog Loss: {:.3f}\\t'", "\n", "# .format(strftime(\"%Y-%m-%d %H:%M:%S\", gmtime()),", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "epoch", ",", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ",", "\n", "losses", ".", "val", ",", "losses", ".", "avg", ",", "\n", "loss_dict", "[", "'loss_embed'", "]", ",", "\n", "loss_dict", "[", "'loss_rec'", "]", "\n", ")", ")", "\n", "\n", "#====== TensorBoard logging ======#", "\n", "", "if", "self", ".", "iters", "%", "print_freq", "*", "10", "==", "0", ":", "\n", "        ", "if", "train_tfLogger", "is", "not", "None", ":", "\n", "          ", "step", "=", "epoch", "*", "len", "(", "data_loader", ")", "+", "(", "i", "+", "1", ")", "\n", "info", "=", "{", "\n", "'lr'", ":", "current_lr", ",", "\n", "'loss'", ":", "total_loss", ".", "item", "(", ")", ",", "# this is total loss", "\n", "}", "\n", "## add each loss", "\n", "for", "k", ",", "loss", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "info", "[", "k", "]", "=", "loss", "\n", "", "for", "tag", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "train_tfLogger", ".", "scalar_summary", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n", "# if is_debug and (i + 1) % (print_freq*100) == 0: # this time-consuming and space-consuming", "\n", "#   # (2) Log values and gradients of the parameters (histogram)", "\n", "#   for tag, value in self.model.named_parameters():", "\n", "#     tag = tag.replace('.', '/')", "\n", "#     train_tfLogger.histo_summary(tag, to_numpy(value.data), step)", "\n", "#     train_tfLogger.histo_summary(tag+'/grad', to_numpy(value.grad.data), step)", "\n", "\n", "# # (3) Log the images", "\n", "# images, _, pids, _ = inputs", "\n", "# offsets = to_numpy(offsets)", "\n", "# info = {", "\n", "#   'images': to_numpy(images[:10])", "\n", "# }", "\n", "# for tag, images in info.items():", "\n", "#   train_tfLogger.image_summary(tag, images, step)", "\n", "\n", "#====== evaluation ======#", "\n", "", "", "", "if", "self", ".", "iters", "%", "test_freq", "==", "0", ":", "\n", "# only symmetry branch", "\n", "        ", "if", "'loss_rec'", "not", "in", "output_dict", "[", "'losses'", "]", ":", "\n", "          ", "is_best", "=", "True", "\n", "# self.best_res is alwarys equal to 1.0", "\n", "self", ".", "best_res", "=", "evaluator", ".", "evaluate", "(", "test_loader", ",", "step", "=", "self", ".", "iters", ",", "tfLogger", "=", "eval_tfLogger", ",", "dataset", "=", "test_dataset", ")", "\n", "", "else", ":", "\n", "          ", "res", "=", "evaluator", ".", "evaluate", "(", "test_loader", ",", "step", "=", "self", ".", "iters", ",", "tfLogger", "=", "eval_tfLogger", ",", "dataset", "=", "test_dataset", ")", "\n", "\n", "if", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "is_best", "=", "res", ">", "self", ".", "best_res", "\n", "self", ".", "best_res", "=", "max", "(", "res", ",", "self", ".", "best_res", ")", "\n", "", "elif", "self", ".", "metric", "==", "'editdistance'", ":", "\n", "            ", "is_best", "=", "res", "<", "self", ".", "best_res", "\n", "self", ".", "best_res", "=", "min", "(", "res", ",", "self", ".", "best_res", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported evaluation metric:\"", ",", "self", ".", "metric", ")", "\n", "\n", "", "print", "(", "'\\n * Finished iters {:3d}  accuracy: {:5.1%}  best: {:5.1%}{}\\n'", ".", "\n", "format", "(", "self", ".", "iters", ",", "res", ",", "self", ".", "best_res", ",", "' *'", "if", "is_best", "else", "''", ")", ")", "\n", "\n", "# if epoch < 1:", "\n", "#   continue", "\n", "", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'iters'", ":", "self", ".", "iters", ",", "\n", "'best_res'", ":", "self", ".", "best_res", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "self", ".", "logs_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer._parse_data": [[172, 174], ["None"], "methods", ["None"], ["", "", "", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer._forward": [[175, 177], ["None"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.Trainer._parse_data": [[180, 195], ["imgs.to", "label_encs.to", "embeds_.to"], "methods", ["None"], ["  ", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "input_dict", "=", "{", "}", "\n", "# imgs, label_encs, lengths = inputs", "\n", "imgs", ",", "label_encs", ",", "lengths", ",", "embeds_", "=", "inputs", "\n", "images", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "label_encs", "is", "not", "None", ":", "\n", "      ", "labels", "=", "label_encs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "embeds_", "is", "not", "None", ":", "\n", "      ", "embeds", "=", "embeds_", ".", "to", "(", "self", ".", "device", ")", "\n", "", "input_dict", "[", "'images'", "]", "=", "images", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "labels", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "lengths", "\n", "input_dict", "[", "'rec_embeds'", "]", "=", "embeds", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.Trainer._forward": [[196, 200], ["trainers.Trainer.model.train", "trainers.Trainer.model"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.trainers.BaseTrainer.train"], ["", "def", "_forward", "(", "self", ",", "input_dict", ")", ":", "\n", "    ", "self", ".", "model", ".", "train", "(", ")", "\n", "output_dict", "=", "self", ".", "model", "(", "input_dict", ")", "\n", "return", "output_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.BaseEvaluator.__init__": [[25, 34], ["object.__init__", "torch.device", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "metric", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "super", "(", "BaseEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "self", ".", "cos_sim", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "evaluate_with_lexicon", "=", "False", "\n", "self", ".", "keep_ratio", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.BaseEvaluator.evaluate": [[35, 130], ["evaluators.BaseEvaluator.model.eval", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "enumerate", "torch.cat", "outputs.items", "utils.meters.AverageMeter.update", "evaluators.BaseEvaluator._parse_data", "evaluators.BaseEvaluator._forward", "input_dict[].size", "output_dict[].items", "torch.cat.append", "torch.cat.append", "embeds.append", "losses.append", "output_dict[].items", "utils.meters.AverageMeter.update", "time.time", "torch.cat", "torch.cat.size", "sum", "numpy.sum", "torch.cat", "evaluation_metrics.RecPostProcess", "evaluators.BaseEvaluator.cos_sim", "torch.mean", "print", "utils.visualization_utils.stn_vis", "loss.mean.mean.mean", "outputs[].append", "print", "print", "print", "print", "print", "print", "open", "zip", "torch.cat().cpu", "torch.abs", "info.items", "time.time", "loss.mean.mean.item", "v.cpu", "time.time", "subimages.size", "f.write", "torch.mean.item", "tfLogger.scalar_summary", "datetime.datetime.datetime.now().strftime", "len", "torch.cat", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.Evaluator._parse_data", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.Evaluator._forward", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.RecPostProcess", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.visualization_utils.stn_vis", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.TFLogger.scalar_summary"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ",", "step", "=", "1", ",", "print_freq", "=", "1", ",", "tfLogger", "=", "None", ",", "dataset", "=", "None", ",", "vis_dir", "=", "None", ")", ":", "\n", "    ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "# forward the network", "\n", "images", ",", "outputs", ",", "targets", ",", "embeds", ",", "losses", "=", "[", "]", ",", "{", "}", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "file_names", "=", "[", "]", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "      ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input_dict", "=", "self", ".", "_parse_data", "(", "inputs", ")", "\n", "output_dict", "=", "self", ".", "_forward", "(", "input_dict", ")", "\n", "\n", "batch_size", "=", "input_dict", "[", "'images'", "]", ".", "size", "(", "0", ")", "\n", "\n", "total_loss_batch", "=", "0.", "\n", "for", "k", ",", "loss", "in", "output_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "total_loss_batch", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "images", ".", "append", "(", "input_dict", "[", "'images'", "]", ")", "\n", "targets", ".", "append", "(", "input_dict", "[", "'rec_targets'", "]", ")", "\n", "embeds", ".", "append", "(", "input_dict", "[", "'rec_embeds'", "]", ")", "\n", "losses", ".", "append", "(", "total_loss_batch", ")", "\n", "if", "self", ".", "evaluate_with_lexicon", ":", "\n", "        ", "file_names", "+=", "input_dict", "[", "'file_name'", "]", "\n", "", "for", "k", ",", "v", "in", "output_dict", "[", "'output'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "outputs", ":", "\n", "          ", "outputs", "[", "k", "]", "=", "[", "]", "\n", "", "outputs", "[", "k", "]", ".", "append", "(", "v", ".", "cpu", "(", ")", ")", "\n", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'[{}]\\t'", "\n", "'Evaluation: [{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", "# .format(strftime(\"%Y-%m-%d %H:%M:%S\", gmtime()),", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "keep_ratio", ":", "\n", "      ", "images", "=", "torch", ".", "cat", "(", "images", ")", "\n", "num_samples", "=", "images", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "      ", "num_samples", "=", "sum", "(", "[", "subimages", ".", "size", "(", "0", ")", "for", "subimages", "in", "images", "]", ")", "\n", "", "targets", "=", "torch", ".", "cat", "(", "targets", ")", "\n", "losses", "=", "np", ".", "sum", "(", "losses", ")", "/", "(", "1.0", "*", "num_samples", ")", "\n", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", ":", "\n", "      ", "outputs", "[", "k", "]", "=", "torch", ".", "cat", "(", "outputs", "[", "k", "]", ")", "\n", "\n", "# save info for recognition", "\n", "", "if", "'pred_rec'", "in", "outputs", ":", "\n", "# evaluation with metric", "\n", "      ", "if", "self", ".", "evaluate_with_lexicon", ":", "\n", "        ", "eval_res", "=", "metrics_factory", "[", "self", ".", "metric", "+", "'_with_lexicon'", "]", "(", "outputs", "[", "'pred_rec'", "]", ",", "targets", ",", "dataset", ",", "file_names", ")", "\n", "print", "(", "'lexicon0: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "0", "]", ")", ")", "\n", "print", "(", "'lexicon50: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "1", "]", ")", ")", "\n", "print", "(", "'lexicon1k: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "2", "]", ")", ")", "\n", "print", "(", "'lexiconfull: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "3", "]", ")", ")", "\n", "eval_res", "=", "eval_res", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "eval_res", "=", "metrics_factory", "[", "self", ".", "metric", "]", "(", "outputs", "[", "'pred_rec'", "]", ",", "targets", ",", "dataset", ")", "\n", "print", "(", "'lexicon0: {0}: {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", ")", ")", "\n", "", "pred_list", ",", "targ_list", ",", "score_list", "=", "RecPostProcess", "(", "outputs", "[", "'pred_rec'", "]", ",", "targets", ",", "outputs", "[", "'pred_rec_score'", "]", ",", "dataset", ")", "\n", "with", "open", "(", "\"embed_v1_results.txt\"", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", ":", "\n", "          ", "f", ".", "write", "(", "\"{} {}\\n\"", ".", "format", "(", "pred", ",", "targ", ")", ")", "\n", "", "", "", "if", "'pred_embed'", "in", "outputs", ":", "\n", "      ", "output_cos_sim", "=", "self", ".", "cos_sim", "(", "outputs", "[", "'pred_embed'", "]", ",", "torch", ".", "cat", "(", "embeds", ")", ".", "cpu", "(", ")", ")", "\n", "output_cos_sim", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "output_cos_sim", ")", ")", "\n", "print", "(", "\"Emebedding vector cos similarity: {:3f}\"", ".", "format", "(", "output_cos_sim", ".", "item", "(", ")", ")", ")", "\n", "if", "tfLogger", "is", "not", "None", ":", "\n", "# (1) Log the scalar values", "\n", "        ", "info", "=", "{", "\n", "'loss'", ":", "losses", ",", "\n", "self", ".", "metric", ":", "eval_res", ",", "\n", "}", "\n", "for", "tag", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "          ", "tfLogger", ".", "scalar_summary", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n", "#====== Visualization ======#", "\n", "", "", "", "if", "vis_dir", "is", "not", "None", ":", "\n", "# recognition_vis(images, outputs['pred_rec'], targets, score_list, dataset, vis_dir)", "\n", "      ", "stn_vis", "(", "images", ",", "outputs", "[", "'rectified_images'", "]", ",", "outputs", "[", "'ctrl_points'", "]", ",", "outputs", "[", "'pred_rec'", "]", ",", "\n", "targets", ",", "score_list", ",", "outputs", "[", "'pred_score'", "]", "if", "'pred_score'", "in", "outputs", "else", "None", ",", "dataset", ",", "vis_dir", ")", "\n", "", "return", "eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.BaseEvaluator._parse_data": [[132, 134], ["None"], "methods", ["None"], ["", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.BaseEvaluator._forward": [[135, 137], ["None"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.Evaluator._parse_data": [[140, 161], ["torch.no_grad", "imgs.to", "label_encs.to", "embeds_.to"], "methods", ["None"], ["  ", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "evaluate_with_lexicon", ":", "\n", "      ", "imgs", ",", "label_encs", ",", "lengths", ",", "file_name", "=", "inputs", "\n", "", "else", ":", "\n", "# imgs, label_encs, lengths = inputs", "\n", "      ", "imgs", ",", "label_encs", ",", "lengths", ",", "embeds_", "=", "inputs", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "images", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "label_encs", "is", "not", "None", ":", "\n", "        ", "labels", "=", "label_encs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "embeds_", "is", "not", "None", ":", "\n", "        ", "embeds", "=", "embeds_", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "input_dict", "[", "'images'", "]", "=", "images", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "labels", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "lengths", "\n", "input_dict", "[", "'rec_embeds'", "]", "=", "embeds", "\n", "if", "self", ".", "evaluate_with_lexicon", ":", "\n", "      ", "input_dict", "[", "'file_name'", "]", "=", "file_name", "\n", "", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.SEED.evaluators.Evaluator._forward": [[162, 167], ["evaluators.Evaluator.model.eval", "torch.no_grad", "evaluators.Evaluator.model"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["", "def", "_forward", "(", "self", ",", "input_dict", ")", ":", "\n", "    ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "output_dict", "=", "self", ".", "model", "(", "input_dict", ")", "\n", "", "return", "output_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.__init__": [[34, 61], ["torch.utils.data.Dataset.__init__", "lib.utils.labelmaps.get_vocabulary", "dict", "dict", "len", "min", "zip", "zip", "dataset.CustomDataset.load_gt_json", "len", "range", "range", "os.path.basename().split", "dataset.CustomDataset.load_gt_txt", "len", "len", "os.path.basename().split", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.get_vocabulary", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.load_gt_json", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.load_gt_txt"], ["noise_level_img", "=", "0.", "\n", "\n", "\n", "def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n", "\n", "", "def", "central_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "p1", "=", "(", "(", "(", "1", "-", "scale", ")", "*", "w", "/", "2", ")", ",", "(", "1", "-", "scale", ")", "*", "h", "/", "2", ")", "\n", "p2", "=", "(", "(", "1", "+", "scale", ")", "*", "w", "/", "2", ",", "(", "1", "+", "scale", ")", "*", "h", "/", "2", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n", "\n", "", "def", "buf2PIL", "(", "txn", ",", "key", ",", "type", "=", "'RGB'", ")", ":", "\n", "    ", "imgbuf", "=", "txn", ".", "get", "(", "key", ")", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "im", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "type", ")", "\n", "return", "im", "\n", "\n", "\n", "", "class", "lmdbDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "31", ",", "test", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.__len__": [[61, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "31", ",", "test", "=", "True", ")", ":", "\n", "        ", "super", "(", "lmdbDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.__getitem__": [[65, 108], ["numpy.full", "numpy.array", "len", "len", "PIL.Image.open().convert", "word.lowercase.lowercase.lowercase", "len", "len", "dataset.CustomDataset.transform", "numpy.load", "numpy.zeros", "print", "label_list.append", "label_list.append", "len", "PIL.Image.open", "os.path.join", "os.path.join"], "methods", ["None"], ["max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "img", "=", "buf2PIL", "(", "txn", ",", "b'image-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", "IOError", "or", "len", "(", "label", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img", ",", "label_str", "\n", "\n", "\n", "", "", "class", "lmdbDataset_real", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_real", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.load_gt_json": [[109, 135], ["isinstance", "json.load.keys", "open", "json.load", "images_path.append", "transcriptions.append", "embeds.append", "k.replace", "embeds.append", "os.path.exists", "os.path.join", "[].replace", "k.replace", "k.split", "k.split"], "methods", ["None"], ["max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "print", "(", "\"We have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.CustomDataset.load_gt_txt": [[136, 160], ["isinstance", "open", "f.readlines", "line.split.split.strip", "line.split.split.split", "images_path.append", "transcriptions.append", "len", "embeds.append", "embeds.append", "line[].replace", "embeds.append", "line[].replace"], "methods", ["None"], ["label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "img_HR_key", "=", "b'image_hr-%09d'", "%", "index", "# 128*32", "\n", "img_lr_key", "=", "b'image_lr-%09d'", "%", "index", "# 64*16", "\n", "try", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "img_HR_key", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "img_lr_key", ",", "'RGB'", ")", "\n", "\n", "# print(\"img_HR:\", img_HR.size, img_lr.size())", "\n", "\n", "", "except", "IOError", "or", "len", "(", "word", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n", "\n", "", "", "class", "lmdbDataset_realIC15TextSR", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realIC15TextSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "hr_image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"HR\"", ")", "\n", "lr_image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"LR\"", ")", "\n", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"ANNOTATION\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.LmdbDataset.__init__": [[162, 198], ["torch.utils.data.Dataset.__init__", "dataset.LmdbDataset.env.begin", "int", "min", "lib.utils.labelmaps.get_vocabulary", "dict", "dict", "len", "os.path.basename", "mox.file.exists", "lmdb.open", "lmdb.open", "dataset.LmdbDataset.txn.get", "zip", "zip", "os.path.exists", "os.makedirs", "mox.file.copy_parallel", "ValueError", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.labelmaps.get_vocabulary"], ["\n", "self", ".", "hr_impath_list", "=", "[", "]", "\n", "self", ".", "lr_impath_list", "=", "[", "]", "\n", "self", ".", "anno_list", "=", "[", "]", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "mode", "=", "\"train\"", "if", "root", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "==", "\"TRAIN\"", "else", "\"test\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hr_image_list", ")", ")", ":", "\n", "            ", "hr_impath", "=", "os", ".", "path", ".", "join", "(", "hr_image_dir", ",", "mode", "+", "'-hr-'", "+", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "4", ",", "'0'", ")", "+", "\".pgm\"", ")", "\n", "lr_impath", "=", "os", ".", "path", ".", "join", "(", "lr_image_dir", ",", "mode", "+", "'-lr-'", "+", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "4", ",", "'0'", ")", "+", "\".pgm\"", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "mode", "+", "'-annot-'", "+", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "4", ",", "'0'", ")", "+", "\".txt\"", ")", "\n", "\n", "self", ".", "hr_impath_list", ".", "append", "(", "hr_impath", ")", "\n", "self", ".", "lr_impath_list", ".", "append", "(", "lr_impath", ")", "\n", "self", ".", "anno_list", ".", "append", "(", "anno_path", ")", "\n", "\n", "", "self", ".", "nSamples", "=", "len", "(", "self", ".", "anno_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n", "", "def", "read_pgm", "(", "self", ",", "filename", ",", "byteorder", "=", "'>'", ")", ":", "\n", "        ", "\"\"\"Return image data from a raw PGM file as numpy array.\n\n        Format specification: http://netpbm.sourceforge.net/doc/pgm.html\n\n        \"\"\"", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "buffer", "=", "f", ".", "read", "(", ")", "\n", "", "try", ":", "\n", "            ", "header", ",", "width", ",", "height", ",", "maxval", "=", "re", ".", "search", "(", "\n", "b\"(^P5\\s(?:\\s*#.*[\\r\\n])*\"", "\n", "b\"(\\d+)\\s(?:\\s*#.*[\\r\\n])*\"", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.LmdbDataset.__len__": [[199, 201], ["None"], "methods", ["None"], ["b\"(\\d+)\\s(?:\\s*#.*[\\r\\n])*\"", "\n", "b\"(\\d+)\\s(?:\\s*#.*[\\r\\n]\\s)*)\"", ",", "buffer", ")", ".", "groups", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.LmdbDataset.__getitem__": [[202, 259], ["dataset.LmdbDataset.txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "dataset.LmdbDataset.txn.get().decode", "numpy.full", "numpy.array", "len", "dataset.LmdbDataset.txn.get", "numpy.array().astype", "len", "PIL.Image.open().convert", "word.lower.lower.lower", "len", "len", "embed_vec.decode.decode.decode", "dataset.LmdbDataset.transform", "print", "dataset.LmdbDataset.txn.get", "label_list.append", "label_list.append", "len", "numpy.array", "PIL.Image.open", "embed_vec.decode.decode.split"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.logging.Logger.write", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.decode"], ["return", "np", ".", "frombuffer", "(", "buffer", ",", "\n", "dtype", "=", "'u1'", "if", "int", "(", "maxval", ")", "<", "256", "else", "byteorder", "+", "'u2'", ",", "\n", "count", "=", "int", "(", "width", ")", "*", "int", "(", "height", ")", ",", "\n", "offset", "=", "len", "(", "header", ")", "\n", ")", ".", "reshape", "(", "(", "int", "(", "height", ")", ",", "int", "(", "width", ")", ")", ")", "\n", "\n", "", "except", "AttributeError", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not a raw PGM file: '%s'\"", "%", "filename", ")", "\n", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "# assert index <= len(self), 'index range error'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "hr_impath_list", "[", "idx", "]", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "self", ".", "hr_impath_list", "[", "idx", "]", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "img_HR_np", "=", "self", ".", "read_pgm", "(", "self", ".", "hr_impath_list", "[", "idx", "]", ",", "byteorder", "=", "'<'", ")", "\n", "img_lr_np", "=", "self", ".", "read_pgm", "(", "self", ".", "lr_impath_list", "[", "idx", "]", ",", "byteorder", "=", "'<'", ")", "\n", "\n", "label_str", "=", "open", "(", "self", ".", "anno_list", "[", "idx", "]", ",", "\"r\"", ")", ".", "readlines", "(", ")", "[", "0", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "label_str", "=", "str_filt", "(", "label_str", ",", "self", ".", "voc_type", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "self", ".", "hr_impath_list", "[", "idx", "]", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "\n", "", "img_HR", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "img_HR_np", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", ")", "\n", "img_lr", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "img_lr_np", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n", "\n", "\n", "", "", "class", "lmdbDataset_realSVT", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_realSVT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# root should be detailed by upper folder of images", "\n", "\n", "# anno_dir = os.path.join(root, \"ANNOTATION\")", "\n", "\n", "split", "=", "(", "\"svt_\"", "+", "\"train\"", ")", "if", "not", "test", "else", "(", "\"svt_\"", "+", "\"test\"", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"IMG\"", ")", "\n", "self", ".", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"label\"", ")", "\n", "# self.impath_list = os.listdir(image_dir)", "\n", "self", ".", "anno_list", "=", "os", ".", "listdir", "(", "self", ".", "anno_dir", ")", "\n", "\n", "# self.impath_list = []", "\n", "# self.anno_list = []", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.ResizeNormalize.__init__": [[262, 266], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["# mode = \"train\" if root.split(\"/\")[-2] == \"TRAIN\" else \"test\"", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "anno_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.ResizeNormalize.__call__": [[267, 272], ["dataset.ResizeNormalize.resize", "dataset.ResizeNormalize.toTensor", "dataset.ResizeNormalize.sub_().div_", "dataset.ResizeNormalize.sub_"], "methods", ["None"], ["self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.RandomSequentialSampler.__init__": [[276, 279], ["len"], "methods", ["None"], ["        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n", "\n", "anno", "=", "self", ".", "anno_list", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "anno", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".jpg\"", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.RandomSequentialSampler.__len__": [[280, 282], ["None"], "methods", ["None"], ["anno_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_dir", ",", "anno", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.RandomSequentialSampler.__iter__": [[283, 298], ["torch.LongTensor().fill_", "range", "iter", "len", "len", "random.randint", "random.randint", "torch.LongTensor().fill_.tolist", "torch.LongTensor", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "word", "=", "open", "(", "anno_path", ",", "\"r\"", ")", ".", "readlines", "(", ")", "[", "0", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "img_HR", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img_lr", "=", "img_HR", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", ",", "image_path", "\n", "\n", "\n", "", "", "class", "lmdbDataset_realForTest", "(", "Dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.AlignCollate.__init__": [[302, 307], ["None"], "methods", ["None"], ["# root should be detailed by upper folder of images", "\n", "\n", "# anno_dir = os.path.join(root, \"ANNOTATION\")", "\n", "\n", "# split = (\"svt_\" + \"train\") if not test else (\"svt_\" + \"test\")", "\n", "dataset_dir", "=", "root", "#os.path.join(root, split)", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.AlignCollate.__call__": [[308, 332], ["zip", "torch.IntTensor", "torch.IntTensor", "torch.FloatTensor", "dataset.ResizeNormalize", "torch.stack", "ratios.sort", "int", "max", "min", "ResizeNormalize.", "ratios.append", "numpy.floor", "float"], "methods", ["None"], ["self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ")", "\n", "# self.anno_dir = os.path.join(dataset_dir, \"label\")", "\n", "# self.impath_list = os.listdir(image_dir)", "\n", "# self.anno_list = os.listdir(self.anno_dir)", "\n", "\n", "self", ".", "impath_list", "=", "os", ".", "listdir", "(", "self", ".", "image_dir", ")", "\n", "# self.anno_list = []", "\n", "\n", "print", "(", "\"collect images from:\"", ",", "root", ")", "\n", "\n", "# mode = \"train\" if root.split(\"/\")[-2] == \"TRAIN\" else \"test\"", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "impath_list", ")", "\n", "print", "(", "\"Done, we have \"", ",", "self", ".", "nSamples", ",", "\"samples...\"", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "idx", "=", "index", "%", "self", ".", "nSamples", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.dataset.debug": [[333, 348], ["dataset.CustomDataset", "torch.utils.data.DataLoader", "enumerate", "print", "dataset.AlignCollate"], "function", ["None"], ["\n", "# anno = self.anno_list[index]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "self", ".", "impath_list", "[", "idx", "]", ")", "\n", "# anno_path = os.path.join(self.anno_dir, anno)", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "", "try", ":", "\n", "            ", "word", "=", "\"gogogo\"", "\n", "img_HR", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img_lr", "=", "img_HR", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "\"File not found for\"", ",", "image_path", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "# print(\"annos:\", img_HR_np.shape, img_lr_np.shape)", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.cumsum": [[20, 28], ["len", "r.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__init__": [[29, 37], ["torch.utils.data.Dataset.__init__", "list", "concatdataset.ConcatDataset.cumsum", "max", "len"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ")", "\n", "self", ".", "max_len", "=", "max", "(", "[", "_dataset", ".", "max_len", "for", "_dataset", "in", "self", ".", "datasets", "]", ")", "\n", "for", "_dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "_dataset", ".", "max_len", "=", "self", ".", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.__getitem__": [[41, 48], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.datasets.concatdataset.ConcatDataset.cummulative_sizes": [[49, 54], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "cummulative_sizes", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"cummulative_sizes attribute is renamed to \"", "\n", "\"cumulative_sizes\"", ",", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "return", "self", ".", "cumulative_sizes", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_svtp_lmdb.checkImageIsValid": [[12, 21], ["numpy.fromstring", "cv2.imdecode"], "function", ["None"], ["def", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "  ", "if", "imageBin", "is", "None", ":", "\n", "    ", "return", "False", "\n", "", "imageBuf", "=", "np", ".", "fromstring", "(", "imageBin", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "imageBuf", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "imgH", ",", "imgW", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "if", "imgH", "*", "imgW", "==", "0", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_svtp_lmdb.writeCache": [[23, 27], ["env.begin", "cache.items", "txn.put", "k.encode"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode"], ["", "def", "writeCache", "(", "env", ",", "cache", ")", ":", "\n", "  ", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "    ", "for", "k", ",", "v", "in", "cache", ".", "items", "(", ")", ":", "\n", "      ", "txn", ".", "put", "(", "k", ".", "encode", "(", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_svtp_lmdb._is_difficult": [[29, 32], ["isinstance", "re.match"], "function", ["None"], ["", "", "", "def", "_is_difficult", "(", "word", ")", ":", "\n", "  ", "assert", "isinstance", "(", "word", ",", "str", ")", "\n", "return", "not", "re", ".", "match", "(", "'^[\\w]+$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_svtp_lmdb.createDataset": [[34, 80], ["len", "lmdb.open", "range", "str().encode", "create_svtp_lmdb.writeCache", "print", "len", "len", "label.encode", "len", "os.path.exists", "print", "open", "f.read", "create_svtp_lmdb.writeCache", "print", "str", "create_svtp_lmdb.checkImageIsValid", "print"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.checkImageIsValid"], ["", "def", "createDataset", "(", "outputPath", ",", "imagePathList", ",", "labelList", ",", "lexiconList", "=", "None", ",", "checkValid", "=", "True", ")", ":", "\n", "  ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath    : LMDB output path\n      imagePathList : list of image path\n      labelList     : list of corresponding groundtruth texts\n      lexiconList   : (optional) list of lexicon lists\n      checkValid    : if true, check the validity of every image\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "labelList", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "    ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "label", "=", "labelList", "[", "i", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "      ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "      ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "if", "checkValid", ":", "\n", "      ", "if", "not", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "        ", "print", "(", "'%s is not a valid image'", "%", "imagePath", ")", "\n", "continue", "\n", "\n", "", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "cache", "[", "labelKey", "]", "=", "label", ".", "encode", "(", ")", "\n", "if", "lexiconList", ":", "\n", "      ", "lexiconKey", "=", "'lexicon-%09d'", "%", "cnt", "\n", "cache", "[", "lexiconKey", "]", "=", "' '", ".", "join", "(", "lexiconList", "[", "i", "]", ")", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "      ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.checkImageIsValid": [[11, 24], ["numpy.fromstring", "cv2.imdecode", "print"], "function", ["None"], ["def", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "  ", "if", "imageBin", "is", "None", ":", "\n", "    ", "return", "False", "\n", "", "imageBuf", "=", "np", ".", "fromstring", "(", "imageBin", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "try", ":", "\n", "    ", "img", "=", "cv2", ".", "imdecode", "(", "imageBuf", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "imgH", ",", "imgW", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "print", "(", "e", ")", "\n", "return", "False", "\n", "", "if", "imgH", "*", "imgW", "==", "0", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache": [[25, 29], ["env.begin", "cache.items", "txn.put", "k.encode"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode"], ["", "def", "writeCache", "(", "env", ",", "cache", ")", ":", "\n", "  ", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "    ", "for", "k", ",", "v", "in", "cache", ".", "items", "(", ")", ":", "\n", "      ", "txn", ".", "put", "(", "k", ".", "encode", "(", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb._is_difficult": [[30, 33], ["isinstance", "re.match"], "function", ["None"], ["", "", "", "def", "_is_difficult", "(", "word", ")", ":", "\n", "  ", "assert", "isinstance", "(", "word", ",", "str", ")", "\n", "return", "not", "re", ".", "match", "(", "'^[\\w]+$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.createDataset": [[34, 82], ["len", "lmdb.open", "range", "str().encode", "create_all_synth_lmdb.writeCache", "print", "len", "len", "label.encode", "len", "os.path.exists", "print", "open", "f.read", "create_all_synth_lmdb.writeCache", "print", "str", "create_all_synth_lmdb.checkImageIsValid", "print", "str", "embed_vec.tolist"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.tools.create_all_synth_lmdb.checkImageIsValid"], ["", "def", "createDataset", "(", "outputPath", ",", "imagePathList", ",", "labelList", ",", "lexiconList", "=", "None", ",", "checkValid", "=", "True", ")", ":", "\n", "  ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath    : LMDB output path\n      imagePathList : list of image path\n      labelList     : list of corresponding groundtruth texts\n      lexiconList   : (optional) list of lexicon lists\n      checkValid    : if true, check the validity of every image\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "labelList", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "    ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "label", "=", "labelList", "[", "i", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "      ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "      ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "if", "checkValid", ":", "\n", "      ", "if", "not", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "        ", "print", "(", "'%s is not a valid image'", "%", "imagePath", ")", "\n", "continue", "\n", "", "", "embed_vec", "=", "fasttext_model", "[", "label", "]", "\n", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "embedKey", "=", "'embed-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "cache", "[", "labelKey", "]", "=", "label", ".", "encode", "(", ")", "\n", "cache", "[", "embedKey", "]", "=", "' '", ".", "join", "(", "str", "(", "v", ")", "for", "v", "in", "embed_vec", ".", "tolist", "(", ")", ")", ".", "encode", "(", ")", "\n", "if", "lexiconList", ":", "\n", "      ", "lexiconKey", "=", "'lexicon-%09d'", "%", "cnt", "\n", "cache", "[", "lexiconKey", "]", "=", "' '", ".", "join", "(", "lexiconList", "[", "i", "]", ")", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "      ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionRecognitionHead.__init__": [[16, 25], ["torch.nn.Module.__init__", "attention_recognition_head.DecoderUnit"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "max_len_labels", ",", "in_planes", "=", "512", ",", "sDim", "=", "512", ",", "attDim", "=", "512", ")", ":", "\n", "    ", "super", "(", "AttentionRecognitionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "# this is the output classes. So it includes the <EOS>.", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "\n", "self", ".", "decoder", "=", "DecoderUnit", "(", "sDim", "=", "sDim", ",", "xDim", "=", "in_planes", ",", "yDim", "=", "num_classes", ",", "attDim", "=", "attDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionRecognitionHead.forward": [[26, 45], ["x.size", "attention_recognition_head.AttentionRecognitionHead.decoder.get_initial_state", "range", "torch.cat", "max", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.cat.append", "torch.zeros().fill_", "_.unsqueeze", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.DecoderUnit.get_initial_state"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "targets", ",", "lengths", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "max", "(", "lengths", ")", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "# the last one is used as the <BOS>.", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "targets", "[", ":", ",", "i", "-", "1", "]", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "[", "_", ".", "unsqueeze", "(", "1", ")", "for", "_", "in", "outputs", "]", ",", "1", ")", "\n", "return", "outputs", "\n", "\n", "# inference stage.", "\n", "", "def", "sample", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "_", ",", "_", "=", "x", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionRecognitionHead.sample": [[47, 69], ["x.size", "torch.zeros", "range", "torch.cat", "torch.cat", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.softmax", "torch.nn.functional.softmax.max", "torch.cat.append", "torch.cat.append", "torch.zeros().fill_", "predicted.unsqueeze", "score.unsqueeze", "torch.zeros"], "methods", ["None"], ["# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "\n", "predicted_ids", ",", "predicted_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "predicted", "\n", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "score", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "predicted_ids", ".", "append", "(", "predicted", ".", "unsqueeze", "(", "1", ")", ")", "\n", "predicted_scores", ".", "append", "(", "score", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "predicted_ids", "=", "torch", ".", "cat", "(", "predicted_ids", ",", "1", ")", "\n", "predicted_scores", "=", "torch", ".", "cat", "(", "predicted_scores", ",", "1", ")", "\n", "# return predicted_ids.squeeze(), predicted_scores.squeeze()", "\n", "return", "predicted_ids", ",", "predicted_scores", "\n", "\n", "", "def", "beam_search", "(", "self", ",", "x", ",", "beam_width", ",", "eos", ")", ":", "\n", "\n", "    ", "def", "_inflate", "(", "tensor", ",", "times", ",", "dim", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionRecognitionHead.beam_search": [[70, 192], ["x.size", "x.unsqueeze().permute().repeat().permute().contiguous().view", "attention_recognition_head.AttentionRecognitionHead.decoder.get_initial_state", "torch.Tensor", "scores.view.fill_", "scores.view.index_fill_().to", "torch.zeros().fill_().to", "list", "list", "list", "range", "list", "stored_scores[].view().topk", "sorted_score.clone", "sorted_score.clone.topk", "range", "tensor.repeat().to", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.log_softmax", "_inflate().to", "scores.view.view().topk", "scores.view", "state.index_select.index_select.index_select", "list.append", "torch.zeros().fill_().to.view().eq", "list.append", "list.append", "stored_emitted_symbols[].index_select", "stored_predecessors[].index_select().squeeze", "stored_emitted_symbols[].eq().nonzero", "list.append", "step.index_select().view", "torch.cat", "torch.ones_like", "tensor.dim", "x.unsqueeze().permute().repeat().permute().contiguous", "float", "scores.view.index_fill_", "torch.zeros().fill_", "predecessors.squeeze", "scores.view.clone", "stored_emitted_symbols[].eq().nonzero.nonzero().dim", "scores.view.masked_fill_", "range", "stored_scores[].view", "stored_emitted_symbols[].eq().nonzero.dim", "range", "reversed", "tensor.repeat", "torch.Tensor().long", "attention_recognition_head.AttentionRecognitionHead.beam_search._inflate"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.DecoderUnit.get_initial_state"], ["      ", "repeat_dims", "=", "[", "1", "]", "*", "tensor", ".", "dim", "(", ")", "\n", "repeat_dims", "[", "dim", "]", "=", "times", "\n", "return", "tensor", ".", "repeat", "(", "*", "repeat_dims", ")", "\n", "\n", "# https://github.com/IBM/pytorch-seq2seq/blob/fede87655ddce6c94b38886089e05321dc9802af/seq2seq/models/TopKDecoder.py", "\n", "", "batch_size", ",", "l", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "# inflated_encoder_feats = _inflate(encoder_feats, beam_width, 0) # ABC --> AABBCC -/-> ABCABC", "\n", "inflated_encoder_feats", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "repeat", "(", "(", "beam_width", ",", "1", ",", "1", ",", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "l", ",", "d", ")", "\n", "\n", "# Initialize the decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", "*", "beam_width", ",", "self", ".", "sDim", ")", "\n", "pos_index", "=", "(", "torch", ".", "Tensor", "(", "range", "(", "batch_size", ")", ")", "*", "beam_width", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Initialize the scores", "\n", "sequence_scores", "=", "torch", ".", "Tensor", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "sequence_scores", ".", "fill_", "(", "-", "float", "(", "'Inf'", ")", ")", "\n", "sequence_scores", ".", "index_fill_", "(", "0", ",", "torch", ".", "Tensor", "(", "[", "i", "*", "beam_width", "for", "i", "in", "range", "(", "0", ",", "batch_size", ")", "]", ")", ".", "long", "(", ")", ",", "0.0", ")", "\n", "# sequence_scores.fill_(0.0)", "\n", "\n", "# Initialize the input vector", "\n", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", "*", "beam_width", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "# Store decisions for backtracking", "\n", "stored_scores", "=", "list", "(", ")", "\n", "stored_predecessors", "=", "list", "(", ")", "\n", "stored_emitted_symbols", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "output", ",", "state", "=", "self", ".", "decoder", "(", "inflated_encoder_feats", ",", "state", ",", "y_prev", ")", "\n", "log_softmax_output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "sequence_scores", "=", "_inflate", "(", "sequence_scores", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "sequence_scores", "+=", "log_softmax_output", "\n", "scores", ",", "candidates", "=", "sequence_scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "topk", "(", "beam_width", ",", "dim", "=", "1", ")", "\n", "\n", "# Reshape input = (bk, 1) and sequence_scores = (bk, 1)", "\n", "y_prev", "=", "(", "candidates", "%", "self", ".", "num_classes", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "sequence_scores", "=", "scores", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "\n", "# Update fields for next timestep", "\n", "predecessors", "=", "(", "candidates", "/", "self", ".", "num_classes", "+", "pos_index", ".", "expand_as", "(", "candidates", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "state", "=", "state", ".", "index_select", "(", "1", ",", "predecessors", ".", "squeeze", "(", ")", ")", "\n", "\n", "# Update sequence socres and erase scores for <eos> symbol so that they aren't expanded", "\n", "stored_scores", ".", "append", "(", "sequence_scores", ".", "clone", "(", ")", ")", "\n", "eos_indices", "=", "y_prev", ".", "view", "(", "-", "1", ",", "1", ")", ".", "eq", "(", "eos", ")", "\n", "if", "eos_indices", ".", "nonzero", "(", ")", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "sequence_scores", ".", "masked_fill_", "(", "eos_indices", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Cache results for backtracking", "\n", "", "stored_predecessors", ".", "append", "(", "predecessors", ")", "\n", "stored_emitted_symbols", ".", "append", "(", "y_prev", ")", "\n", "\n", "# Do backtracking to return the optimal values", "\n", "#====== backtrak ======#", "\n", "# Initialize return variables given different types", "\n", "", "p", "=", "list", "(", ")", "\n", "l", "=", "[", "[", "self", ".", "max_len_labels", "]", "*", "beam_width", "for", "_", "in", "range", "(", "batch_size", ")", "]", "# Placeholder for lengths of top-k sequences", "\n", "\n", "# the last step output of the beams are not sorted", "\n", "# thus they are sorted here", "\n", "sorted_score", ",", "sorted_idx", "=", "stored_scores", "[", "-", "1", "]", ".", "view", "(", "batch_size", ",", "beam_width", ")", ".", "topk", "(", "beam_width", ")", "\n", "# initialize the sequence scores with the sorted last step beam scores", "\n", "s", "=", "sorted_score", ".", "clone", "(", ")", "\n", "\n", "batch_eos_found", "=", "[", "0", "]", "*", "batch_size", "# the number of EOS found", "\n", "# in the backward loop below for each batch", "\n", "t", "=", "self", ".", "max_len_labels", "-", "1", "\n", "# initialize the back pointer with the sorted order of the last step beams.", "\n", "# add pos_index for indexing variable with b*k as the first dimension.", "\n", "t_predecessors", "=", "(", "sorted_idx", "+", "pos_index", ".", "expand_as", "(", "sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "while", "t", ">=", "0", ":", "\n", "# Re-order the variables with the back pointer", "\n", "      ", "current_symbol", "=", "stored_emitted_symbols", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", "\n", "t_predecessors", "=", "stored_predecessors", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", ".", "squeeze", "(", ")", "\n", "eos_indices", "=", "stored_emitted_symbols", "[", "t", "]", ".", "eq", "(", "eos", ")", ".", "nonzero", "(", ")", "\n", "if", "eos_indices", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "eos_indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# Indices of the EOS symbol for both variables", "\n", "# with b*k as the first dimension, and b, k for", "\n", "# the first two dimensions", "\n", "          ", "idx", "=", "eos_indices", "[", "i", "]", "\n", "b_idx", "=", "int", "(", "idx", "[", "0", "]", "/", "beam_width", ")", "\n", "# The indices of the replacing position", "\n", "# according to the replacement strategy noted above", "\n", "res_k_idx", "=", "beam_width", "-", "(", "batch_eos_found", "[", "b_idx", "]", "%", "beam_width", ")", "-", "1", "\n", "batch_eos_found", "[", "b_idx", "]", "+=", "1", "\n", "res_idx", "=", "b_idx", "*", "beam_width", "+", "res_k_idx", "\n", "\n", "# Replace the old information in return variables", "\n", "# with the new ended sequence information", "\n", "t_predecessors", "[", "res_idx", "]", "=", "stored_predecessors", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "current_symbol", "[", "res_idx", "]", "=", "stored_emitted_symbols", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "s", "[", "b_idx", ",", "res_k_idx", "]", "=", "stored_scores", "[", "t", "]", "[", "idx", "[", "0", "]", ",", "[", "0", "]", "]", "\n", "l", "[", "b_idx", "]", "[", "res_k_idx", "]", "=", "t", "+", "1", "\n", "\n", "# record the back tracked results", "\n", "", "", "p", ".", "append", "(", "current_symbol", ")", "\n", "\n", "t", "-=", "1", "\n", "\n", "# Sort and re-order again as the added ended sequences may change", "\n", "# the order (very unlikely)", "\n", "", "s", ",", "re_sorted_idx", "=", "s", ".", "topk", "(", "beam_width", ")", "\n", "for", "b_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "l", "[", "b_idx", "]", "=", "[", "l", "[", "b_idx", "]", "[", "k_idx", ".", "item", "(", ")", "]", "for", "k_idx", "in", "re_sorted_idx", "[", "b_idx", ",", ":", "]", "]", "\n", "\n", "", "re_sorted_idx", "=", "(", "re_sorted_idx", "+", "pos_index", ".", "expand_as", "(", "re_sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "\n", "# Reverse the sequences and re-order at the same time", "\n", "# It is reversed because the backtracking happens in reverse time order", "\n", "p", "=", "[", "step", ".", "index_select", "(", "0", ",", "re_sorted_idx", ")", ".", "view", "(", "batch_size", ",", "beam_width", ",", "-", "1", ")", "for", "step", "in", "reversed", "(", "p", ")", "]", "\n", "p", "=", "torch", ".", "cat", "(", "p", ",", "-", "1", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "p", ",", "torch", ".", "ones_like", "(", "p", ")", "\n", "\n", "\n", "", "", "class", "AttentionUnit", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "AttentionUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionUnit.__init__": [[195, 205], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["self", ".", "wEmbed", "=", "nn", ".", "Linear", "(", "attDim", ",", "1", ")", "\n", "\n", "# self.init_weights()", "\n", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "sEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "sEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "xEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "xEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "wEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "wEmbed", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionUnit.init_weights": [[208, 215], ["torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "# [b x T x xDim]", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "xDim", ")", "# [(b x T) x xDim]", "\n", "xProj", "=", "self", ".", "xEmbed", "(", "x", ")", "# [(b x T) x attDim]", "\n", "xProj", "=", "xProj", ".", "view", "(", "batch_size", ",", "T", ",", "-", "1", ")", "# [b x T x attDim]", "\n", "\n", "sPrev", "=", "sPrev", ".", "squeeze", "(", "0", ")", "\n", "sProj", "=", "self", ".", "sEmbed", "(", "sPrev", ")", "# [b x attDim]", "\n", "sProj", "=", "torch", ".", "unsqueeze", "(", "sProj", ",", "1", ")", "# [b x 1 x attDim]", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionUnit.forward": [[216, 236], ["x.view.view.size", "x.view.view.view", "attention_recognition_head.AttentionUnit.xEmbed", "xProj.view.view.view", "sPrev.squeeze.squeeze.squeeze", "attention_recognition_head.AttentionUnit.sEmbed", "torch.unsqueeze", "sProj.expand.expand.expand", "torch.tanh", "sumTanh.view.view.view", "attention_recognition_head.AttentionUnit.wEmbed", "vProj.view.view.view", "torch.nn.functional.softmax"], "methods", ["None"], ["sProj", "=", "sProj", ".", "expand", "(", "batch_size", ",", "T", ",", "self", ".", "attDim", ")", "# [b x T x attDim]", "\n", "\n", "sumTanh", "=", "torch", ".", "tanh", "(", "sProj", "+", "xProj", ")", "\n", "sumTanh", "=", "sumTanh", ".", "view", "(", "-", "1", ",", "self", ".", "attDim", ")", "\n", "\n", "vProj", "=", "self", ".", "wEmbed", "(", "sumTanh", ")", "# [(b x T) x 1]", "\n", "vProj", "=", "vProj", ".", "view", "(", "batch_size", ",", "T", ")", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "vProj", ",", "dim", "=", "1", ")", "# attention weights for each sample in the minibatch", "\n", "\n", "return", "alpha", "\n", "\n", "\n", "", "", "class", "DecoderUnit", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "yDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "DecoderUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "yDim", "=", "yDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "emdDim", "=", "attDim", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.DecoderUnit.__init__": [[239, 252], ["torch.nn.Module.__init__", "attention_recognition_head.AttentionUnit", "torch.nn.Embedding", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["self", ".", "tgt_embedding", "=", "nn", ".", "Embedding", "(", "yDim", "+", "1", ",", "self", ".", "emdDim", ")", "# the last is used for <BOS> ", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", "=", "xDim", "+", "self", ".", "emdDim", ",", "hidden_size", "=", "sDim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sDim", ",", "yDim", ")", "\n", "\n", "# self.init_weights()", "\n", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "tgt_embedding", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "self", ".", "fc", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ",", "yPrev", ")", ":", "\n", "# x: feature sequence from the image decoder.", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.DecoderUnit.init_weights": [[254, 258], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["context", "=", "torch", ".", "bmm", "(", "alpha", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "#", "\n", "yProj", "=", "self", ".", "tgt_embedding", "(", "yPrev", ".", "long", "(", ")", ")", "\n", "# self.gru.flatten_parameters()", "\n", "output", ",", "state", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "[", "yProj", ",", "context", "]", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "sPrev", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.DecoderUnit.get_initial_state": [[259, 266], ["attention_recognition_head.DecoderUnit.embed_fc", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze", "embed.size", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze"], "methods", ["None"], ["output", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "output", "=", "self", ".", "fc", "(", "output", ")", "\n", "return", "output", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.DecoderUnit.forward": [[267, 282], ["x.size", "attention_recognition_head.DecoderUnit.attention_unit", "torch.bmm().squeeze", "attention_recognition_head.DecoderUnit.tgt_embedding", "attention_recognition_head.DecoderUnit.gru", "attention_recognition_head.DecoderUnit.squeeze", "attention_recognition_head.DecoderUnit.fc", "yPrev.long", "torch.cat().unsqueeze", "torch.bmm", "attention_recognition_head.DecoderUnit.unsqueeze", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.TPSSpatialTransformer.__init__": [[57, 97], ["torch.Module.__init__", "tps_spatial_transformer.build_output_control_points", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tps_spatial_transformer.compute_partial_repr", "forward_kernel[].copy_", "forward_kernel[].fill_", "forward_kernel[].fill_", "forward_kernel[].copy_", "forward_kernel[].copy_", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.compute_partial_repr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "build_output_control_points.transpose", "itertools.product", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.build_output_control_points", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr"], ["    ", "super", "(", "TPSSpatialTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_image_size", "=", "output_image_size", "\n", "self", ".", "num_control_points", "=", "num_control_points", "\n", "self", ".", "margins", "=", "margins", "\n", "\n", "self", ".", "target_height", ",", "self", ".", "target_width", "=", "output_image_size", "\n", "target_control_points", "=", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", "\n", "N", "=", "num_control_points", "\n", "# N = N - 4", "\n", "\n", "# create padded kernel matrix", "\n", "forward_kernel", "=", "torch", ".", "zeros", "(", "N", "+", "3", ",", "N", "+", "3", ")", "\n", "target_control_partial_repr", "=", "compute_partial_repr", "(", "target_control_points", ",", "target_control_points", ")", "\n", "forward_kernel", "[", ":", "N", ",", ":", "N", "]", ".", "copy_", "(", "target_control_partial_repr", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "3", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", "-", "3", ",", ":", "N", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "2", ":", "]", ".", "copy_", "(", "target_control_points", ")", "\n", "forward_kernel", "[", "-", "2", ":", ",", ":", "N", "]", ".", "copy_", "(", "target_control_points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "# compute inverse matrix", "\n", "inverse_kernel", "=", "torch", ".", "inverse", "(", "forward_kernel", ")", "\n", "\n", "# create target cordinate matrix", "\n", "HW", "=", "self", ".", "target_height", "*", "self", ".", "target_width", "\n", "target_coordinate", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "self", ".", "target_height", ")", ",", "range", "(", "self", ".", "target_width", ")", ")", ")", "\n", "target_coordinate", "=", "torch", ".", "Tensor", "(", "target_coordinate", ")", "# HW x 2", "\n", "Y", ",", "X", "=", "target_coordinate", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "Y", "=", "Y", "/", "(", "self", ".", "target_height", "-", "1", ")", "\n", "X", "=", "X", "/", "(", "self", ".", "target_width", "-", "1", ")", "\n", "target_coordinate", "=", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "1", ")", "# convert from (y, x) to (x, y)", "\n", "target_coordinate_partial_repr", "=", "compute_partial_repr", "(", "target_coordinate", ",", "target_control_points", ")", "\n", "target_coordinate_repr", "=", "torch", ".", "cat", "(", "[", "\n", "target_coordinate_partial_repr", ",", "torch", ".", "ones", "(", "HW", ",", "1", ")", ",", "target_coordinate", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# register precomputed matrices", "\n", "self", ".", "register_buffer", "(", "'inverse_kernel'", ",", "inverse_kernel", ")", "\n", "self", ".", "register_buffer", "(", "'padding_matrix'", ",", "torch", ".", "zeros", "(", "3", ",", "2", ")", ")", "\n", "self", ".", "register_buffer", "(", "'target_coordinate_repr'", ",", "target_coordinate_repr", ")", "\n", "self", ".", "register_buffer", "(", "'target_control_points'", ",", "target_control_points", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "source_control_points", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.TPSSpatialTransformer.forward": [[98, 114], ["source_control_points.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "tps_spatial_transformer.grid_sample", "source_control_points.ndimension", "source_control_points.size", "source_control_points.size", "tps_spatial_transformer.TPSSpatialTransformer.padding_matrix.expand"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["    ", "assert", "source_control_points", ".", "ndimension", "(", ")", "==", "3", "\n", "assert", "source_control_points", ".", "size", "(", "1", ")", "==", "self", ".", "num_control_points", "\n", "assert", "source_control_points", ".", "size", "(", "2", ")", "==", "2", "\n", "batch_size", "=", "source_control_points", ".", "size", "(", "0", ")", "\n", "\n", "Y", "=", "torch", ".", "cat", "(", "[", "source_control_points", ",", "self", ".", "padding_matrix", ".", "expand", "(", "batch_size", ",", "3", ",", "2", ")", "]", ",", "1", ")", "\n", "mapping_matrix", "=", "torch", ".", "matmul", "(", "self", ".", "inverse_kernel", ",", "Y", ")", "\n", "source_coordinate", "=", "torch", ".", "matmul", "(", "self", ".", "target_coordinate_repr", ",", "mapping_matrix", ")", "\n", "\n", "grid", "=", "source_coordinate", ".", "view", "(", "-", "1", ",", "self", ".", "target_height", ",", "self", ".", "target_width", ",", "2", ")", "\n", "grid", "=", "torch", ".", "clamp", "(", "grid", ",", "0", ",", "1", ")", "# the source_control_points may be out of [0, 1].", "\n", "# the input to grid_sample is normalized [-1, 1], but what we get is [0, 1]", "\n", "grid", "=", "2.0", "*", "grid", "-", "1.0", "\n", "output_maps", "=", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", "\n", "return", "output_maps", ",", "source_coordinate", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample": [[11, 20], ["torch.grid_sample", "input.data.new().fill_", "torch.grid_sample", "input.data.new", "input.size"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["  ", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "if", "canvas", "is", "None", ":", "\n", "    ", "return", "output", "\n", "", "else", ":", "\n", "    ", "input_mask", "=", "input", ".", "data", ".", "new", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", "\n", "output_mask", "=", "F", ".", "grid_sample", "(", "input_mask", ",", "grid", ")", "\n", "padded_output", "=", "output", "*", "output_mask", "+", "canvas", "*", "(", "1", "-", "output_mask", ")", "\n", "return", "padded_output", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.compute_partial_repr": [[23, 36], ["input_points.size", "control_points.size", "repr_matrix.masked_fill_", "input_points.view", "control_points.view", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["  ", "N", "=", "input_points", ".", "size", "(", "0", ")", "\n", "M", "=", "control_points", ".", "size", "(", "0", ")", "\n", "pairwise_diff", "=", "input_points", ".", "view", "(", "N", ",", "1", ",", "2", ")", "-", "control_points", ".", "view", "(", "1", ",", "M", ",", "2", ")", "\n", "# original implementation, very slow", "\n", "# pairwise_dist = torch.sum(pairwise_diff ** 2, dim = 2) # square of distance", "\n", "pairwise_diff_square", "=", "pairwise_diff", "*", "pairwise_diff", "\n", "pairwise_dist", "=", "pairwise_diff_square", "[", ":", ",", ":", ",", "0", "]", "+", "pairwise_diff_square", "[", ":", ",", ":", ",", "1", "]", "\n", "repr_matrix", "=", "0.5", "*", "pairwise_dist", "*", "torch", ".", "log", "(", "pairwise_dist", ")", "\n", "# fix numerical error for 0 * log(0), substitute all nan with 0", "\n", "mask", "=", "repr_matrix", "!=", "repr_matrix", "\n", "repr_matrix", ".", "masked_fill_", "(", "mask", ",", "0", ")", "\n", "return", "repr_matrix", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.build_output_control_points": [[39, 52], ["numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.ones", "numpy.ones"], "function", ["None"], ["  ", "margin_x", ",", "margin_y", "=", "margins", "\n", "num_ctrl_pts_per_side", "=", "num_control_points", "//", "2", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin_x", ",", "1.0", "-", "margin_x", ",", "num_ctrl_pts_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "margin_y", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "(", "1.0", "-", "margin_y", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "# ctrl_pts_top = ctrl_pts_top[1:-1,:]", "\n", "# ctrl_pts_bottom = ctrl_pts_bottom[1:-1,:]", "\n", "output_ctrl_pts_arr", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "output_ctrl_pts", "=", "torch", ".", "Tensor", "(", "output_ctrl_pts_arr", ")", "\n", "return", "output_ctrl_pts", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.AsterBlock.__init__": [[39, 48], ["torch.Module.__init__", "resnet_aster.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_aster.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.conv1x1", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.conv3x3"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "AsterBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.AsterBlock.forward": [[49, 62], ["resnet_aster.AsterBlock.conv1", "resnet_aster.AsterBlock.bn1", "resnet_aster.AsterBlock.relu", "resnet_aster.AsterBlock.conv2", "resnet_aster.AsterBlock.bn2", "resnet_aster.AsterBlock.relu", "resnet_aster.AsterBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.ResNet_ASTER.__init__": [[67, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.LSTM", "torch.LSTM", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "with_lstm", "=", "False", ",", "n_group", "=", "1", ")", ":", "\n", "    ", "super", "(", "ResNet_ASTER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_lstm", "=", "with_lstm", "\n", "self", ".", "n_group", "=", "n_group", "\n", "\n", "in_channels", "=", "3", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "32", ",", "3", ",", "[", "2", ",", "2", "]", ")", "# [16, 50]", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "64", ",", "4", ",", "[", "2", ",", "2", "]", ")", "# [8, 25]", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "128", ",", "6", ",", "[", "2", ",", "1", "]", ")", "# [4, 25]", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "256", ",", "6", ",", "[", "2", ",", "1", "]", ")", "# [2, 25]", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "512", ",", "3", ",", "[", "2", ",", "1", "]", ")", "# [1, 25]", "\n", "\n", "if", "with_lstm", ":", "\n", "      ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "512", ",", "256", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "2", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "out_planes", "=", "2", "*", "256", "\n", "", "else", ":", "\n", "      ", "self", ".", "out_planes", "=", "512", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.ResNet_ASTER._make_layer": [[98, 111], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_aster.AsterBlock", "layers.append", "resnet_aster.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_aster.AsterBlock"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.conv1x1"], ["\n", "", "", "", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "[", "1", ",", "1", "]", "or", "self", ".", "inplanes", "!=", "planes", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "AsterBlock", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "AsterBlock", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.ResNet_ASTER.forward": [[112, 127], ["resnet_aster.ResNet_ASTER.layer0", "resnet_aster.ResNet_ASTER.layer1", "resnet_aster.ResNet_ASTER.layer2", "resnet_aster.ResNet_ASTER.layer3", "resnet_aster.ResNet_ASTER.layer4", "resnet_aster.ResNet_ASTER.layer5", "resnet_aster.ResNet_ASTER.squeeze", "cnn_feat.transpose.transpose.transpose", "resnet_aster.ResNet_ASTER.rnn"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "    ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer5", "(", "x4", ")", "\n", "\n", "cnn_feat", "=", "x5", ".", "squeeze", "(", "2", ")", "# [N, c, w]", "\n", "cnn_feat", "=", "cnn_feat", ".", "transpose", "(", "2", ",", "1", ")", "\n", "if", "self", ".", "with_lstm", ":", "\n", "# print(\"shit\")", "\n", "# self.rnn.flatten_parameters()", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.conv1x1": [[18, 21], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.resnet_aster.get_sinusoid_encoding": [[23, 35], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pow", "torch.pow", "angles.float.float", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.arange.unsqueeze", "torch.pow.unsqueeze"], "function", ["None"], ["", "def", "get_sinusoid_encoding", "(", "n_position", ",", "feat_dim", ",", "wave_length", "=", "10000", ")", ":", "\n", "# [n_position]", "\n", "  ", "positions", "=", "torch", ".", "arange", "(", "0", ",", "n_position", ")", "#.cuda()", "\n", "# [feat_dim]", "\n", "dim_range", "=", "torch", ".", "arange", "(", "0", ",", "feat_dim", ")", "#.cuda()", "\n", "dim_range", "=", "torch", ".", "pow", "(", "wave_length", ",", "2", "*", "(", "dim_range", "//", "2", ")", "/", "feat_dim", ")", "\n", "# [n_position, feat_dim]", "\n", "angles", "=", "positions", ".", "unsqueeze", "(", "1", ")", "/", "dim_range", ".", "unsqueeze", "(", "0", ")", "\n", "angles", "=", "angles", ".", "float", "(", ")", "\n", "angles", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "angles", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "angles", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "angles", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.__init__": [[26, 54], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_stn", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_stn", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "num_ctrlpoints", ",", "activation", "=", "'none'", ",", "input_size", "=", "(", "32", ",", "128", ")", ")", ":", "\n", "    ", "super", "(", "STNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# print(\"in_planse--------------------------:\", in_planes)", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "num_ctrlpoints", "=", "num_ctrlpoints", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "stn_convnet", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3_block", "(", "in_planes", ",", "32", ")", ",", "# 16*64", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "32", ",", "64", ")", ",", "# 8*32", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "64", ",", "128", ")", ",", "# 4*16", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "128", ",", "256", ")", ",", "# 2*8", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "# for 32 * 128", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ",", "# 1*4,", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "1", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ")", ",", "# for 32 * 128", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ")", "# 1*2", "\n", "\n", "flatten_width", "=", "2", "# int(input_size[1] / 32)", "\n", "# print(\"flw:\", input_size[1] / 32) # for 32 * 128", "\n", "self", ".", "stn_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "flatten_width", "*", "256", ",", "512", ")", ",", "#flatten_width*256", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "stn_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "num_ctrlpoints", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_weights": [[55, 68], ["module.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["self", ".", "init_weights", "(", "self", ".", "stn_convnet", ")", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_fc1", ")", "\n", "self", ".", "init_stn", "(", "self", ".", "stn_fc2", ")", "\n", "\n", "", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.init_stn": [[69, 84], ["int", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate().astype", "stn_fc2.weight.data.zero_", "torch.Tensor().view", "numpy.ones", "numpy.ones", "numpy.concatenate", "torch.Tensor", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "init_stn", "(", "self", ",", "stn_fc2", ")", ":", "\n", "    ", "margin", "=", "0.01", "\n", "sampling_num_per_side", "=", "int", "(", "self", ".", "num_ctrlpoints", "/", "2", ")", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin", ",", "1.", "-", "margin", ",", "sampling_num_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "margin", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "(", "1", "-", "margin", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_points", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# print(ctrl_points.shape)", "\n", "if", "self", ".", "activation", "is", "'none'", ":", "\n", "      ", "pass", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.STNHead.forward": [[85, 95], ["stn_head.STNHead.stn_convnet", "torch.nn.functional.sigmoid.size", "torch.nn.functional.sigmoid.view", "stn_head.STNHead.stn_fc1", "stn_head.STNHead.stn_fc2", "torch.nn.functional.sigmoid.view", "torch.nn.functional.sigmoid"], "methods", ["None"], ["", "elif", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "ctrl_points", "=", "-", "np", ".", "log", "(", "1.", "/", "ctrl_points", "-", "1.", ")", "\n", "", "elif", "self", ".", "activation", "==", "'relu'", ":", "\n", "      ", "ctrl_points", "=", "F", ".", "relu", "(", "torch", ".", "Tensor", "(", "ctrl_points", ")", ")", "\n", "", "stn_fc2", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "stn_fc2", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "ctrl_points", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "stn_convnet", "(", "x", ")", "\n", "batch_size", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.stn_head.conv3x3_block": [[13, 23], ["torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["None"], ["def", "conv3x3_block", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "conv_layer", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.model_builder.ModelBuilder.__init__": [[26, 64], ["torch.nn.Module.__init__", "create", "attention_recognition_head.AttentionRecognitionHead", "embedding_head.Embedding", "loss.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss", "loss.embeddingRegressionLoss.EmbeddingRegressionLoss", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.__init__.create"], ["def", "__init__", "(", "self", ",", "arch", ",", "rec_num_classes", ",", "sDim", ",", "attDim", ",", "max_len_labels", ",", "eos", ",", "time_step", "=", "25", ",", "STN_ON", "=", "False", ")", ":", "\n", "    ", "super", "(", "ModelBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "rec_num_classes", "=", "rec_num_classes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "STN_ON", "=", "STN_ON", "\n", "self", ".", "time_step", "=", "time_step", "\n", "self", ".", "tps_inputsize", "=", "(", "32", ",", "64", ")", "# global_args.tps_inputsize", "\n", "\n", "self", ".", "encoder", "=", "create", "(", "self", ".", "arch", ",", "\n", "with_lstm", "=", "True", ",", "#global_args.with_lstm", "\n", "n_group", "=", "1", ")", "#global_args.n_group", "\n", "encoder_out_planes", "=", "self", ".", "encoder", ".", "out_planes", "\n", "\n", "self", ".", "decoder", "=", "AttentionRecognitionHead", "(", "\n", "num_classes", "=", "rec_num_classes", ",", "\n", "in_planes", "=", "encoder_out_planes", ",", "\n", "sDim", "=", "sDim", ",", "\n", "attDim", "=", "attDim", ",", "\n", "max_len_labels", "=", "max_len_labels", ")", "\n", "self", ".", "embeder", "=", "Embedding", "(", "self", ".", "time_step", ",", "encoder_out_planes", ")", "\n", "# self.embeder = Embedding_self_att(self.time_step, encoder_out_planes, n_head=4, n_layers=4)", "\n", "self", ".", "rec_crit", "=", "SequenceCrossEntropyLoss", "(", ")", "\n", "self", ".", "embed_crit", "=", "EmbeddingRegressionLoss", "(", "loss_func", "=", "'cosin'", ")", "\n", "\n", "if", "self", ".", "STN_ON", ":", "\n", "      ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "(", "32", ",", "100", ")", ")", ",", "#global_args.tps_outputsize", "\n", "num_control_points", "=", "20", ",", "#global_args.num_control_points", "\n", "margins", "=", "tuple", "(", "(", "0.05", ",", "0.05", ")", ")", ")", "#global_args.tps_margins", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "20", ",", "#global_args.num_control_points", "\n", "activation", "=", "None", ")", "#global_args.stn_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.model_builder.ModelBuilder.forward": [[65, 122], ["model_builder.ModelBuilder.encoder", "encoder_feats.contiguous.contiguous.contiguous", "model_builder.ModelBuilder.embeder", "return_dict[].items", "type", "torch.nn.functional.interpolate", "model_builder.ModelBuilder.stn_head", "model_builder.ModelBuilder.tps", "model_builder.ModelBuilder.decoder", "model_builder.ModelBuilder.rec_crit", "model_builder.ModelBuilder.embed_crit", "model_builder.ModelBuilder.decoder.beam_search", "torch.zeros", "torch.zeros", "v.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.attention_recognition_head.AttentionRecognitionHead.beam_search"], ["", "", "def", "forward", "(", "self", ",", "input_dict", ")", ":", "\n", "    ", "return_dict", "=", "{", "}", "\n", "return_dict", "[", "'losses'", "]", "=", "{", "}", "\n", "return_dict", "[", "'output'", "]", "=", "{", "}", "\n", "\n", "if", "type", "(", "input_dict", ")", "==", "torch", ".", "Tensor", ":", "\n", "      ", "x", "=", "input_dict", "\n", "# print(\"x:\", x.shape)", "\n", "rec_targets", "=", "None", "\n", "rec_lengths", "=", "[", "25", "]", "\n", "rec_embeds", "=", "None", "\n", "", "else", ":", "\n", "      ", "x", ",", "rec_targets", ",", "rec_lengths", ",", "rec_embeds", "=", "input_dict", "[", "'images'", "]", ",", "input_dict", "[", "'rec_targets'", "]", ",", "input_dict", "[", "'rec_lengths'", "]", ",", "input_dict", "[", "'rec_embeds'", "]", "\n", "\n", "# rec_lengths = torch.tensor(rec_lengths).to(x.device)", "\n", "\n", "# rectification", "\n", "", "if", "self", ".", "STN_ON", ":", "\n", "# input images are downsampled before being fed into stn_head.", "\n", "      ", "stn_input", "=", "F", ".", "interpolate", "(", "x", ",", "self", ".", "tps_inputsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "stn_img_feat", ",", "ctrl_points", "=", "self", ".", "stn_head", "(", "stn_input", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "# save for visualization", "\n", "        ", "return_dict", "[", "'output'", "]", "[", "'ctrl_points'", "]", "=", "ctrl_points", "\n", "return_dict", "[", "'output'", "]", "[", "'rectified_images'", "]", "=", "x", "\n", "\n", "# print(\"x:\", x.device)", "\n", "\n", "", "", "encoder_feats", "=", "self", ".", "encoder", "(", "x", ")", "\n", "encoder_feats", "=", "encoder_feats", ".", "contiguous", "(", ")", "\n", "embedding_vectors", "=", "self", ".", "embeder", "(", "encoder_feats", ")", "\n", "if", "self", ".", "training", ":", "\n", "      ", "rec_pred", "=", "self", ".", "decoder", "(", "[", "encoder_feats", ",", "rec_targets", ",", "rec_lengths", "]", ",", "embedding_vectors", ")", "\n", "loss_rec", "=", "self", ".", "rec_crit", "(", "rec_pred", ",", "rec_targets", ",", "rec_lengths", ")", "\n", "loss_embed", "=", "self", ".", "embed_crit", "(", "embedding_vectors", ",", "rec_embeds", ")", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_rec'", "]", "=", "loss_rec", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_embed'", "]", "=", "loss_embed", "\n", "", "else", ":", "\n", "      ", "rec_pred", ",", "rec_pred_scores", "=", "self", ".", "decoder", ".", "beam_search", "(", "encoder_feats", ",", "5", ",", "self", ".", "eos", ",", "embedding_vectors", ")", "#global_args.beam_width", "\n", "# rec_pred_ = self.decoder.sample([encoder_feats, rec_targets, rec_lengths]) #, embedding_vectors", "\n", "loss_rec", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "# self.rec_crit(rec_pred_, rec_targets, rec_lengths)", "\n", "loss_embed", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "##self.embed_crit(embedding_vectors, rec_embeds)", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_rec'", "]", "=", "loss_rec", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_embed'", "]", "=", "loss_embed", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_rec'", "]", "=", "rec_pred", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_embed'", "]", "=", "embedding_vectors", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_rec_score'", "]", "=", "rec_pred_scores", "\n", "\n", "# pytorch0.4 bug on gathering scalar(0-dim) tensors", "\n", "", "for", "k", ",", "v", "in", "return_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "      ", "return_dict", "[", "'losses'", "]", "[", "k", "]", "=", "v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "return_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.__init__.names": [[9, 11], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.__init__.create": [[13, 30], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.Embedding.__init__": [[7, 14], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_timestep", ",", "in_planes", ",", "mid_dim", "=", "4096", ",", "embed_dim", "=", "300", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_timestep", "=", "in_timestep", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "mid_dim", "=", "mid_dim", "\n", "self", ".", "eEmbed", "=", "nn", ".", "Linear", "(", "in_timestep", "*", "in_planes", ",", "self", ".", "embed_dim", ")", "# Embed encoder output to a word-embedding like", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.Embedding.forward": [[15, 19], ["embedding_head.Embedding.reshape", "embedding_head.Embedding.eEmbed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "eEmbed", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.ScaledDotProductAttention.__init__": [[24, 29], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.ScaledDotProductAttention.forward": [[30, 43], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "embedding_head.ScaledDotProductAttention.softmax", "embedding_head.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose", "attn.masked_fill.masked_fill.masked_fill"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.MultiHeadAttention.__init__": [[46, 68], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "embedding_head.ScaledDotProductAttention", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.Dropout", "torch.nn.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.MultiHeadAttention.forward": [[69, 94], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "embedding_head.MultiHeadAttention.w_qs().view", "embedding_head.MultiHeadAttention.w_ks().view", "embedding_head.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "embedding_head.MultiHeadAttention.attention", "embedding_head.MultiHeadAttention.view", "embedding_head.MultiHeadAttention.permute().contiguous().view", "embedding_head.MultiHeadAttention.dropout", "embedding_head.MultiHeadAttention.layer_norm", "embedding_head.MultiHeadAttention.fc", "embedding_head.MultiHeadAttention.w_qs", "embedding_head.MultiHeadAttention.w_ks", "embedding_head.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "embedding_head.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "embedding_head.MultiHeadAttention.permute"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.model.model_transformer.attention"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.PositionwiseFeedForward.__init__": [[98, 104], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.PositionwiseFeedForward.forward": [[105, 113], ["x.transpose", "embedding_head.PositionwiseFeedForward.w_2", "embedding_head.PositionwiseFeedForward.transpose", "embedding_head.PositionwiseFeedForward.dropout", "embedding_head.PositionwiseFeedForward.layer_norm", "torch.relu", "torch.relu", "embedding_head.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "output", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "w_2", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "output", ")", ")", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.self_block.__init__": [[115, 120], ["torch.nn.Module.__init__", "embedding_head.MultiHeadAttention", "embedding_head.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "self_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.self_block.forward": [[121, 129], ["embedding_head.self_block.slf_attn", "embedding_head.self_block.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "non_pad_mask", "=", "None", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "# enc_output *= non_pad_mask", "\n", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "# enc_output *= non_pad_mask", "\n", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.Embedding_self_att.__init__": [[131, 154], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "embedding_head.self_block", "range"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_timestep", ",", "in_planes", ",", "n_head", ",", "n_layers", ",", "embed_dim", "=", "300", ")", ":", "\n", "        ", "super", "(", "Embedding_self_att", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_timestep", "=", "in_timestep", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "# self.attention = MultiHeadAttention(n_head=self.n_head,", "\n", "#                                     d_model=self.in_planes,", "\n", "#                                     d_k=self.in_planes,", "\n", "#                                     d_v=self.in_planes)", "\n", "# self.ffn = PositionwiseFeedForward(d_in=self.in_planes, d_hid=self.in_planes)", "\n", "# self.attention_block = self_block(d_model=self.in_planes,", "\n", "#                                   d_inner=self.in_planes,", "\n", "#                                   n_head=self.n_head,", "\n", "#                                   d_k=self.in_planes,", "\n", "#                                   d_v=self.in_planes)", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "self", ".", "in_timestep", "*", "self", ".", "in_planes", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "self_block", "(", "d_model", "=", "self", ".", "in_planes", ",", "\n", "d_inner", "=", "self", ".", "in_planes", ",", "\n", "n_head", "=", "self", ".", "n_head", ",", "\n", "d_k", "=", "self", ".", "in_planes", ",", "\n", "d_v", "=", "self", ".", "in_planes", ")", "for", "_", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.embedding_head.Embedding_self_att.forward": [[155, 167], ["embedding_head.Embedding_self_att.size", "embedding_head.Embedding_self_att.reshape", "embedding_head.Embedding_self_att.proj", "enc_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "x", ".", "size", "(", "0", ")", "\n", "# x, att = self.attention(x, x, x)", "\n", "# x = self.ffn(x)", "\n", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "x", ",", "enc_slf_attn", "=", "enc_layer", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "N", ",", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text": [[14, 17], ["text.lower", "filter"], "function", ["None"], ["\n", "def", "_normalize_text", "(", "text", ")", ":", "\n", "    ", "text", "=", "''", ".", "join", "(", "filter", "(", "lambda", "x", ":", "x", "in", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", ",", "text", ")", ")", "\n", "return", "text", ".", "lower", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list": [[19, 65], ["utils.to_numpy.size", "len", "utils.to_numpy", "utils.to_numpy", "range", "range", "dataset.char2id.keys", "range", "pred_list.append", "range", "targ_list.append", "utils.to_numpy.dim", "utils.to_numpy.dim", "utils.to_numpy.size", "utils.to_numpy.size", "metrics._normalize_text", "metrics._normalize_text", "pred_list_i.append", "targ_list_i.append"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text"], ["\n", "", "def", "get_string_aster", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "# label_seq", "\n", "    ", "assert", "output", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "2", "\n", "\n", "end_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "EOS", "]", "\n", "unknown_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "UNKNOWN", "]", "\n", "num_samples", ",", "max_len_labels", "=", "output", ".", "size", "(", ")", "\n", "num_classes", "=", "len", "(", "dataset", ".", "char2id", ".", "keys", "(", ")", ")", "\n", "assert", "num_samples", "==", "target", ".", "size", "(", "0", ")", "and", "max_len_labels", "==", "target", ".", "size", "(", "1", ")", "\n", "output", "=", "to_numpy", "(", "output", ")", "\n", "target", "=", "to_numpy", "(", "target", ")", "\n", "\n", "# list of char list", "\n", "pred_list", ",", "targ_list", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "pred_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "            ", "if", "output", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "                ", "if", "output", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "                    ", "try", ":", "\n", "                        ", "pred_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "output", "[", "i", ",", "j", "]", "]", ")", "\n", "", "except", ":", "\n", "                        ", "embed", "(", "header", "=", "'problem'", ")", "\n", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "pred_list", ".", "append", "(", "pred_list_i", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "targ_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "            ", "if", "target", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "                ", "if", "target", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "                    ", "targ_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "target", "[", "i", ",", "j", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "targ_list", ".", "append", "(", "targ_list_i", ")", "\n", "\n", "# char list to string", "\n", "# if dataset.lowercase:", "\n", "", "if", "True", ":", "\n", "# pred_list = [''.join(pred).lower() for pred in pred_list]", "\n", "# targ_list = [''.join(targ).lower() for targ in targ_list]", "\n", "        ", "pred_list", "=", "[", "_normalize_text", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "_normalize_text", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "", "else", ":", "\n", "        ", "pred_list", "=", "[", "''", ".", "join", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search": [[67, 74], ["numpy.asarray", "numpy.argmin", "np.asarray.append", "editdistance.eval", "metrics._normalize_text", "metrics._normalize_text"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._normalize_text"], ["\n", "", "return", "pred_list", ",", "targ_list", "\n", "\n", "\n", "", "def", "get_string_crnn", "(", "outputs_", ",", "alphabet", "=", "'-0123456789abcdefghijklmnopqrstuvwxyz'", ")", ":", "\n", "    ", "outputs", "=", "outputs_", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "predict_result", "=", "[", "]", "\n", "for", "output", "in", "outputs", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.Accuracy": [[76, 82], ["metrics.get_str_list", "len", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list"], ["\n", "out_str", "=", "\"\"", "\n", "last", "=", "\"\"", "\n", "for", "i", "in", "max_index", ":", "\n", "            ", "if", "alphabet", "[", "i", "]", "!=", "last", ":", "\n", "                ", "if", "i", "!=", "0", ":", "\n", "                    ", "out_str", "+=", "alphabet", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.Accuracy_with_lexicon": [[84, 121], ["metrics.get_str_list", "accuracys.append", "len", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "zip", "sum", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "zip", "zip", "sum", "zip", "zip", "sum", "zip", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search"], ["", "else", ":", "\n", "                    ", "last", "=", "\"\"", "\n", "\n", "", "", "", "predict_result", ".", "append", "(", "out_str", ")", "\n", "", "return", "predict_result", "\n", "\n", "\n", "", "def", "_lexicon_search", "(", "lexicon", ",", "word", ")", ":", "\n", "    ", "edit_distances", "=", "[", "]", "\n", "for", "lex_word", "in", "lexicon", ":", "\n", "        ", "edit_distances", ".", "append", "(", "editdistance", ".", "eval", "(", "_normalize_text", "(", "lex_word", ")", ",", "_normalize_text", "(", "word", ")", ")", ")", "\n", "", "edit_distances", "=", "np", ".", "asarray", "(", "edit_distances", ",", "dtype", "=", "np", ".", "int", ")", "\n", "argmin", "=", "np", ".", "argmin", "(", "edit_distances", ")", "\n", "return", "lexicon", "[", "argmin", "]", "\n", "\n", "\n", "", "def", "Accuracy", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "return", "accuracy", "\n", "\n", "\n", "", "def", "Accuracy_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "accuracys", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.EditDistance": [[123, 129], ["metrics.get_str_list", "sum", "editdistance.eval", "zip"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.EditDistance_with_lexicon": [[131, 168], ["metrics.get_str_list", "sum", "eds.append", "editdistance.eval", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "zip", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "zip", "zip", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "return", "accuracys", "\n", "\n", "\n", "", "def", "EditDistance", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "eds", "=", "sum", "(", "ed_list", ")", "\n", "return", "eds", "\n", "\n", "\n", "", "def", "EditDistance_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_string_aster", "(", "output", ",", "target", ",", "dataset", ")", "\n", "eds", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.RecPostProcess": [[170, 184], ["metrics.get_str_list", "output.size", "utils.to_numpy", "enumerate", "min", "math.exp", "score_list.append", "len", "sum", "map"], "function", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.__init__.to_numpy"], ["ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.__init__.names": [[13, 15], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.evaluation_metrics.__init__.factory": [[16, 18], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss.__init__": [[20, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["  ", "def", "__init__", "(", "self", ",", "\n", "weight", "=", "None", ",", "\n", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "-", "100", ",", "\n", "sequence_normalize", "=", "False", ",", "\n", "sample_normalize", "=", "True", ")", ":", "\n", "    ", "super", "(", "SequenceCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "sequence_normalize", "=", "sequence_normalize", "\n", "self", ".", "sample_normalize", "=", "sample_normalize", "\n", "\n", "assert", "(", "sequence_normalize", "and", "sample_normalize", ")", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss.forward": [[35, 65], ["sequenceCrossEntropyLoss._assert_no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "to_contiguous().view.type_as", "max", "to_contiguous().view", "torch.log_softmax", "torch.log_softmax", "to_contiguous().view", "to_contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "to_contiguous().view.size", "to_contiguous().view.size", "mask[].fill_", "torch.log_softmax.size", "torch.log_softmax.size", "sequenceCrossEntropyLoss.to_contiguous", "sequenceCrossEntropyLoss.to_contiguous", "sequenceCrossEntropyLoss.to_contiguous", "torch.log_softmax.gather", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "to_contiguous().view.long"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss._assert_no_grad", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "length", ")", ":", "\n", "    ", "_assert_no_grad", "(", "target", ")", "\n", "# length to mask", "\n", "batch_size", ",", "def_max_length", "=", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "batch_size", ",", "def_max_length", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "mask", "[", "i", ",", ":", "length", "[", "i", "]", "]", ".", "fill_", "(", "1", ")", "\n", "", "mask", "=", "mask", ".", "type_as", "(", "input", ")", "\n", "# truncate to the same size", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "assert", "max_length", "==", "input", ".", "size", "(", "1", ")", "\n", "target", "=", "target", "[", ":", ",", ":", "max_length", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", "max_length", "]", "\n", "input", "=", "to_contiguous", "(", "input", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "\n", "input", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "target", "=", "to_contiguous", "(", "target", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "to_contiguous", "(", "mask", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "output", "=", "-", "input", ".", "gather", "(", "1", ",", "target", ".", "long", "(", ")", ")", "*", "mask", "\n", "# if self.size_average:", "\n", "#   output = torch.sum(output) / torch.sum(mask)", "\n", "# elif self.reduce:", "\n", "#   output = torch.sum(output)", "\n", "##", "\n", "output", "=", "torch", ".", "sum", "(", "output", ")", "\n", "if", "self", ".", "sequence_normalize", ":", "\n", "      ", "output", "=", "output", "/", "torch", ".", "sum", "(", "mask", ")", "\n", "", "if", "self", ".", "sample_normalize", ":", "\n", "      ", "output", "=", "output", "/", "batch_size", "\n", "\n", "", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.sequenceCrossEntropyLoss.to_contiguous": [[8, 13], ["tensor.is_contiguous", "tensor.contiguous"], "function", ["None"], ["def", "to_contiguous", "(", "tensor", ")", ":", "\n", "  ", "if", "tensor", ".", "is_contiguous", "(", ")", ":", "\n", "    ", "return", "tensor", "\n", "", "else", ":", "\n", "    ", "return", "tensor", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.sequenceCrossEntropyLoss._assert_no_grad": [[14, 17], ["None"], "function", ["None"], ["", "", "def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "  ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__": [[20, 40], ["torch.nn.Module.__init__", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "weight", "=", "None", ",", "\n", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "-", "100", ",", "\n", "sequence_normalize", "=", "False", ",", "\n", "sample_normalize", "=", "True", ",", "\n", "loss_func", "=", "'cosin'", ")", ":", "\n", "        ", "super", "(", "EmbeddingRegressionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "sequence_normalize", "=", "sequence_normalize", "\n", "self", ".", "sample_normalize", "=", "sample_normalize", "\n", "# self.loss_func = torch.nn.MSELoss()", "\n", "self", ".", "is_cosin_loss", "=", "False", "\n", "if", "loss_func", "==", "'smooth_l1'", ":", "\n", "            ", "self", ".", "loss_func", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "", "elif", "loss_func", "==", "'cosin'", ":", "\n", "            ", "self", ".", "loss_func", "=", "torch", ".", "nn", ".", "CosineEmbeddingLoss", "(", ")", "\n", "self", ".", "is_cosin_loss", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.forward": [[41, 51], ["embeddingRegressionLoss._assert_no_grad", "embeddingRegressionLoss.EmbeddingRegressionLoss.loss_func", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "embeddingRegressionLoss.EmbeddingRegressionLoss.loss_func", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "input.size"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss._assert_no_grad"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "_assert_no_grad", "(", "target", ")", "\n", "\n", "if", "not", "self", ".", "is_cosin_loss", ":", "\n", "            ", "Loss", "=", "self", ".", "loss_func", "(", "input", ",", "target", ")", "\n", "", "else", ":", "\n", "            ", "label_target", "=", "torch", ".", "ones", "(", "input", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "Loss", "=", "self", ".", "loss_func", "(", "input", ",", "target", ",", "label_target", ")", "\n", "\n", "", "return", "Loss", "\n", "", "def", "logistic_dot_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.logistic_dot_loss": [[51, 59], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.diagonal", "torch.mm.diagonal", "torch.log", "torch.log", "torch.log", "torch.log", "target.t", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "logistic_dot_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "dot_result", "=", "torch", ".", "mm", "(", "input", ",", "target", ".", "t", "(", ")", ")", "\n", "_diagaonal", "=", "dot_result", ".", "diagonal", "(", ")", "\n", "logistic_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "1", "*", "_diagaonal", ")", ")", "\n", "\n", "# logistic_loss = torch.mean(logistic_loss, dim=0)", "\n", "\n", "return", "logistic_loss", "\n", "# _trace = torch.trace(dot_result)", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss.to_contiguous": [[8, 13], ["tensor.is_contiguous", "tensor.contiguous"], "function", ["None"], ["def", "to_contiguous", "(", "tensor", ")", ":", "\n", "  ", "if", "tensor", ".", "is_contiguous", "(", ")", ":", "\n", "    ", "return", "tensor", "\n", "", "else", ":", "\n", "    ", "return", "tensor", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.embeddingRegressionLoss._assert_no_grad": [[14, 17], ["None"], "function", ["None"], ["", "", "def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "  ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.gradient_loss.GradientPriorLoss.__init__": [[11, 14], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "GradientPriorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.gradient_loss.GradientPriorLoss.forward": [[15, 19], ["gradient_loss.GradientPriorLoss.gradient_map", "gradient_loss.GradientPriorLoss.gradient_map", "gradient_loss.GradientPriorLoss.func"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.gradient_map", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.gradient_map"], ["", "def", "forward", "(", "self", ",", "out_images", ",", "target_images", ")", ":", "\n", "        ", "map_out", "=", "self", ".", "gradient_map", "(", "out_images", ")", "\n", "map_target", "=", "self", ".", "gradient_map", "(", "target_images", ")", "\n", "return", "self", ".", "func", "(", "map_out", ",", "map_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.gradient_loss.GradientPriorLoss.gradient_map": [[20, 29], ["x.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gradient_map", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "channel", ",", "h_x", ",", "w_x", "=", "x", ".", "size", "(", ")", "\n", "r", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "l", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "]", "\n", "t", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "1", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", "h_x", ",", ":", "]", "\n", "b", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "1", ")", ")", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "xgrad", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "(", "r", "-", "l", ")", "*", "0.5", ",", "2", ")", "+", "torch", ".", "pow", "(", "(", "t", "-", "b", ")", "*", "0.5", ",", "2", ")", ",", "0.5", ")", "\n", "return", "xgrad", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.GeneratorLoss.__init__": [[8, 19], ["torch.nn.Module.__init__", "torchvision.models.vgg.vgg16", "torch.nn.Sequential().eval", "torch.nn.Sequential().eval.parameters", "torch.nn.MSELoss", "percptual_loss.TVLoss", "torch.nn.Sequential", "list"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.interfaces.super_resolution.TextSR.eval"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GeneratorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "vgg", "=", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "\n", "loss_network", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ")", "[", ":", "31", "]", ")", ".", "eval", "(", ")", "\n", "for", "param", "in", "loss_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "loss_network", "=", "loss_network", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "tv_loss", "=", "TVLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.GeneratorLoss.forward": [[20, 28], ["percptual_loss.GeneratorLoss.mse_loss", "percptual_loss.GeneratorLoss.mse_loss", "percptual_loss.GeneratorLoss.tv_loss", "percptual_loss.GeneratorLoss.loss_network", "percptual_loss.GeneratorLoss.loss_network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out_images", ",", "target_images", ")", ":", "\n", "# Perception Loss", "\n", "        ", "perception_loss", "=", "self", ".", "mse_loss", "(", "self", ".", "loss_network", "(", "out_images", ")", ",", "self", ".", "loss_network", "(", "target_images", ")", ")", "\n", "# Image Loss", "\n", "image_loss", "=", "self", ".", "mse_loss", "(", "out_images", ",", "target_images", ")", "\n", "# # TV Loss", "\n", "tv_loss", "=", "self", ".", "tv_loss", "(", "out_images", ")", "\n", "return", "image_loss", "+", "0.006", "*", "perception_loss", "+", "2e-8", "*", "tv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.TVLoss.__init__": [[31, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tv_loss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "TVLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tv_loss_weight", "=", "tv_loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.TVLoss.forward": [[35, 44], ["percptual_loss.TVLoss.tensor_size", "percptual_loss.TVLoss.tensor_size", "torch.pow().sum", "torch.pow().sum", "x.size", "x.size", "x.size", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.TVLoss.tensor_size", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.TVLoss.tensor_size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_x", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "w_x", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "count_h", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "count_w", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", "\n", "h_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "h_x", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "w_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "-", "1", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "return", "self", ".", "tv_loss_weight", "*", "2", "*", "(", "h_tv", "/", "count_h", "+", "w_tv", "/", "count_w", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.percptual_loss.TVLoss.tensor_size": [[45, 48], ["t.size", "t.size", "t.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tensor_size", "(", "t", ")", ":", "\n", "        ", "return", "t", ".", "size", "(", ")", "[", "1", "]", "*", "t", ".", "size", "(", ")", "[", "2", "]", "*", "t", ".", "size", "(", ")", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.semantic_loss.SemanticLoss.__init__": [[11, 20], ["torch.Module.__init__", "torch.CosineSimilarity", "torch.CosineSimilarity", "torch.CosineSimilarity", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "SemanticLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cos_sim", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ",", "eps", "=", "1e-8", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n", "self", ".", "lambda1", "=", "1.0", "\n", "self", ".", "lambda2", "=", "1.0", "\n", "\n", "self", ".", "kl_loss", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.semantic_loss.SemanticLoss.forward": [[21, 39], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "semantic_loss.SemanticLoss.kl_loss", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "forward", "(", "self", ",", "pred_vec", ",", "gt_vec", ")", ":", "\n", "# pred_vec: [N, C]", "\n", "# gt_vec: [N, C]", "\n", "# mean_sim = torch.mean(self.cos_sim(gt_vec, pred_vec))", "\n", "# sim_loss = 1 - mean_sim", "\n", "\n", "#noise =  Variable(torch.rand(pred_vec.shape)) * 0.1 - 0.05", "\n", "\n", "#normed_pred_vec = pred_vec + noise.to(pred_vec.device)", "\n", "# print(\"pred_vec:\", pred_vec.shape)", "\n", "        ", "norm_vec", "=", "torch", ".", "abs", "(", "gt_vec", "-", "pred_vec", ")", "\n", "margin_loss", "=", "torch", ".", "mean", "(", "norm_vec", ")", "#", "\n", "\n", "# pr int(\"sem_loss:\", float(margin_loss.data), \"sim_loss:\", float(sim_loss.data))", "\n", "ce_loss", "=", "self", ".", "kl_loss", "(", "torch", ".", "log", "(", "pred_vec", "+", "1e-20", ")", ",", "gt_vec", "+", "1e-20", ")", "\n", "# print(\"sem_loss:\", float(margin_loss.data), \"sim_loss:\", float(sim_loss.data))", "\n", "\n", "return", "self", ".", "lambda1", "*", "margin_loss", "+", "self", ".", "lambda2", "*", "ce_loss", "# ce_loss #margin_loss # + ce_loss #  + sim_loss #margin_loss +", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.semantic_loss.SemanticLoss.cross_entropy": [[40, 44], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "cross_entropy", "(", "self", ",", "pred_vec", ",", "gt_vec", ",", "l", "=", "1e-5", ")", ":", "\n", "        ", "cal", "=", "gt_vec", "*", "torch", ".", "log", "(", "pred_vec", "+", "l", ")", "+", "(", "1", "-", "gt_vec", ")", "*", "torch", ".", "log", "(", "1", "-", "pred_vec", "+", "l", ")", "\n", "#print(\"cal:\", cal)", "\n", "return", "-", "cal", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.ImageLoss.__init__": [[11, 18], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "image_loss.GradientPriorLoss"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gradient", "=", "True", ",", "loss_weight", "=", "[", "20", ",", "1e-4", "]", ")", ":", "\n", "        ", "super", "(", "ImageLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "if", "gradient", ":", "\n", "            ", "self", ".", "GPLoss", "=", "GradientPriorLoss", "(", ")", "\n", "", "self", ".", "gradient", "=", "gradient", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.ImageLoss.forward": [[19, 31], ["image_loss.ImageLoss.mse", "image_loss.ImageLoss.mse", "image_loss.ImageLoss.GPLoss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out_images", ",", "target_images", ",", "grad_mask", "=", "None", ")", ":", "\n", "\n", "# if not grad_mask is None:", "\n", "#     out_images *= grad_mask", "\n", "#     target_images *= grad_mask", "\n", "\n", "        ", "if", "self", ".", "gradient", ":", "\n", "            ", "loss", "=", "self", ".", "loss_weight", "[", "0", "]", "*", "self", ".", "mse", "(", "out_images", ",", "target_images", ")", "+", "self", ".", "loss_weight", "[", "1", "]", "*", "self", ".", "GPLoss", "(", "out_images", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "target_images", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss_weight", "[", "0", "]", "*", "self", ".", "mse", "(", "out_images", ",", "target_images", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.__init__": [[34, 37], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "GradientPriorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.forward": [[38, 42], ["image_loss.GradientPriorLoss.gradient_map", "image_loss.GradientPriorLoss.gradient_map", "image_loss.GradientPriorLoss.func"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.gradient_map", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.gradient_map"], ["", "def", "forward", "(", "self", ",", "out_images", ",", "target_images", ")", ":", "\n", "        ", "map_out", "=", "self", ".", "gradient_map", "(", "out_images", ")", "\n", "map_target", "=", "self", ".", "gradient_map", "(", "target_images", ")", "\n", "return", "self", ".", "func", "(", "map_out", ",", "map_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.loss.image_loss.GradientPriorLoss.gradient_map": [[43, 52], ["x.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gradient_map", "(", "x", ")", ":", "\n", "        ", "batch_size", ",", "channel", ",", "h_x", ",", "w_x", "=", "x", ".", "size", "(", ")", "\n", "r", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "l", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "]", "\n", "t", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "1", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", "h_x", ",", ":", "]", "\n", "b", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "1", ")", ")", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "xgrad", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "(", "r", "-", "l", ")", "*", "0.5", ",", "2", ")", "+", "torch", ".", "pow", "(", "(", "t", "-", "b", ")", "*", "0.5", ",", "2", ")", "+", "1e-6", ",", "0.5", ")", "\n", "return", "xgrad", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.model.Model.__init__": [[27, 69], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "modules.transformation.TPS_SpatialTransformerNetwork", "print", "modules.feature_extraction.VGG_FeatureExtractor", "torch.Sequential", "print", "torch.Linear", "modules.feature_extraction.RCNN_FeatureExtractor", "modules.sequence_modeling.BidirectionalLSTM", "modules.sequence_modeling.BidirectionalLSTM", "modules.prediction.Attention", "Exception", "modules.feature_extraction.ResNet_FeatureExtractor", "Exception"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "stages", "=", "{", "'Trans'", ":", "opt", ".", "Transformation", ",", "'Feat'", ":", "opt", ".", "FeatureExtraction", ",", "\n", "'Seq'", ":", "opt", ".", "SequenceModeling", ",", "'Pred'", ":", "opt", ".", "Prediction", "}", "\n", "\n", "\"\"\" Transformation \"\"\"", "\n", "if", "opt", ".", "Transformation", "==", "'TPS'", ":", "\n", "            ", "self", ".", "Transformation", "=", "TPS_SpatialTransformerNetwork", "(", "\n", "F", "=", "opt", ".", "num_fiducial", ",", "I_size", "=", "(", "opt", ".", "imgH", ",", "opt", ".", "imgW", ")", ",", "I_r_size", "=", "(", "opt", ".", "imgH", ",", "opt", ".", "imgW", ")", ",", "I_channel_num", "=", "opt", ".", "input_channel", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Transformation module specified'", ")", "\n", "\n", "", "\"\"\" FeatureExtraction \"\"\"", "\n", "if", "opt", ".", "FeatureExtraction", "==", "'VGG'", ":", "\n", "            ", "self", ".", "FeatureExtraction", "=", "VGG_FeatureExtractor", "(", "opt", ".", "input_channel", ",", "opt", ".", "output_channel", ")", "\n", "", "elif", "opt", ".", "FeatureExtraction", "==", "'RCNN'", ":", "\n", "            ", "self", ".", "FeatureExtraction", "=", "RCNN_FeatureExtractor", "(", "opt", ".", "input_channel", ",", "opt", ".", "output_channel", ")", "\n", "", "elif", "opt", ".", "FeatureExtraction", "==", "'ResNet'", ":", "\n", "            ", "self", ".", "FeatureExtraction", "=", "ResNet_FeatureExtractor", "(", "opt", ".", "input_channel", ",", "opt", ".", "output_channel", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'No FeatureExtraction module specified'", ")", "\n", "", "self", ".", "FeatureExtraction_output", "=", "opt", ".", "output_channel", "# int(imgH/16-1) * 512", "\n", "self", ".", "AdaptiveAvgPool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "None", ",", "1", ")", ")", "# Transform final (imgH/16-1) -> 1", "\n", "\n", "\"\"\" Sequence modeling\"\"\"", "\n", "if", "opt", ".", "SequenceModeling", "==", "'BiLSTM'", ":", "\n", "            ", "self", ".", "SequenceModeling", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "self", ".", "FeatureExtraction_output", ",", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ")", ",", "\n", "BidirectionalLSTM", "(", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ")", ")", "\n", "self", ".", "SequenceModeling_output", "=", "opt", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No SequenceModeling module specified'", ")", "\n", "self", ".", "SequenceModeling_output", "=", "self", ".", "FeatureExtraction_output", "\n", "\n", "", "\"\"\" Prediction \"\"\"", "\n", "if", "opt", ".", "Prediction", "==", "'CTC'", ":", "\n", "            ", "self", ".", "Prediction", "=", "nn", ".", "Linear", "(", "self", ".", "SequenceModeling_output", ",", "opt", ".", "num_class", ")", "\n", "", "elif", "opt", ".", "Prediction", "==", "'Attn'", ":", "\n", "            ", "self", ".", "Prediction", "=", "Attention", "(", "self", ".", "SequenceModeling_output", ",", "opt", ".", "hidden_size", ",", "opt", ".", "num_class", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Prediction is neither CTC or Attn'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.model.Model.forward": [[70, 96], ["model.Model.FeatureExtraction", "model.Model.AdaptiveAvgPool", "visual_feature.squeeze.squeeze.squeeze", "model.Model.Transformation", "visual_feature.squeeze.squeeze.permute", "model.Model.SequenceModeling", "model.Model.Prediction", "model.Model.permute", "model.Model.Prediction", "model.Model.contiguous", "model.Model.contiguous"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "text", "=", "None", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\" Transformation stage \"\"\"", "\n", "if", "not", "self", ".", "stages", "[", "'Trans'", "]", "==", "\"None\"", ":", "\n", "            ", "input", "=", "self", ".", "Transformation", "(", "input", ")", "\n", "\n", "", "\"\"\" Feature extraction stage \"\"\"", "\n", "visual_feature", "=", "self", ".", "FeatureExtraction", "(", "input", ")", "\n", "visual_feature", "=", "self", ".", "AdaptiveAvgPool", "(", "visual_feature", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "# [b, c, h, w] -> [b, w, c, h]", "\n", "visual_feature", "=", "visual_feature", ".", "squeeze", "(", "3", ")", "\n", "\n", "\"\"\" Sequence modeling stage \"\"\"", "\n", "if", "self", ".", "stages", "[", "'Seq'", "]", "==", "'BiLSTM'", ":", "\n", "            ", "contextual_feature", "=", "self", ".", "SequenceModeling", "(", "visual_feature", ")", "\n", "", "else", ":", "\n", "            ", "contextual_feature", "=", "visual_feature", "# for convenience. this is NOT contextually modeled by BiLSTM", "\n", "\n", "", "\"\"\" Prediction stage \"\"\"", "\n", "if", "self", ".", "stages", "[", "'Pred'", "]", "==", "'CTC'", ":", "\n", "            ", "prediction", "=", "self", ".", "Prediction", "(", "contextual_feature", ".", "contiguous", "(", ")", ")", "\n", "prediction", "=", "prediction", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "prediction", "=", "self", ".", "Prediction", "(", "contextual_feature", ".", "contiguous", "(", ")", ",", "text", ",", "is_train", ",", "batch_max_length", "=", "self", ".", "opt", ".", "batch_max_length", ")", "\n", "\n", "# print(\"prediction:\", prediction.shape)", "\n", "\n", "", "return", "prediction", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.BidirectionalLSTM.__init__": [[7, 12], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.BidirectionalLSTM.forward": [[13, 27], ["crnn.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "crnn.BidirectionalLSTM.embedding", "output.view.view.view", "hasattr", "crnn.BidirectionalLSTM.rnn.flatten_parameters", "setattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'_flattened'", ")", ":", "\n", "            ", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "setattr", "(", "self", ",", "'_flattened'", ",", "True", ")", "\n", "\n", "", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.CRNN.__init__": [[31, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "crnn.CRNN.__init__.convRelu"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "nc", ",", "nclass", ",", "nh", ",", "n_rnn", "=", "2", ",", "leakyRelu", "=", "False", ")", ":", "\n", "        ", "super", "(", "CRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "imgH", "%", "16", "==", "0", ",", "'imgH has to be a multiple of 16'", "\n", "\n", "ks", "=", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", "]", "\n", "ps", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "ss", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "nm", "=", "[", "64", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", "]", "\n", "\n", "cnn", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "def", "convRelu", "(", "i", ",", "batchNormalization", "=", "False", ")", ":", "\n", "            ", "nIn", "=", "nc", "if", "i", "==", "0", "else", "nm", "[", "i", "-", "1", "]", "\n", "nOut", "=", "nm", "[", "i", "]", "\n", "cnn", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "ks", "[", "i", "]", ",", "ss", "[", "i", "]", ",", "ps", "[", "i", "]", ")", ")", "\n", "if", "batchNormalization", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'batchnorm{0}'", ".", "format", "(", "i", ")", ",", "nn", ".", "BatchNorm2d", "(", "nOut", ")", ")", "\n", "", "if", "leakyRelu", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "i", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "", "convRelu", "(", "0", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "0", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "# 64x16x64", "\n", "convRelu", "(", "1", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "1", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "# 128x8x32", "\n", "convRelu", "(", "2", ",", "True", ")", "\n", "convRelu", "(", "3", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "2", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", "# 256x4x16", "\n", "convRelu", "(", "4", ",", "True", ")", "\n", "convRelu", "(", "5", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "3", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", "# 512x2x16", "\n", "convRelu", "(", "6", ",", "True", ")", "# 512x1x16", "\n", "\n", "self", ".", "cnn", "=", "cnn", "\n", "self", ".", "rnn", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "512", ",", "nh", ",", "nh", ")", ",", "\n", "BidirectionalLSTM", "(", "nh", ",", "nh", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.CRNN.forward": [[74, 91], ["crnn.CRNN.cnn", "conv.permute.permute.size", "conv.permute.permute.squeeze", "conv.permute.permute.permute", "crnn.CRNN.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# conv features", "\n", "# \u8f6c\u6210\u7070\u5ea6\u56fe", "\n", "\n", "# input = input[:, 0, :, :] * 0.299 + input[:, 1, :, :] * 0.587 + input[:, 2, :, :] * 0.114", "\n", "# input = input.unsqueeze(1)", "\n", "# print(\"input:\", input.shape)", "\n", "        ", "conv", "=", "self", ".", "cnn", "(", "input", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv", ".", "size", "(", ")", "\n", "assert", "h", "==", "1", ",", "\"the height of conv must be 1\"", "\n", "conv", "=", "conv", ".", "squeeze", "(", "2", ")", "\n", "conv", "=", "conv", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# [w, b, c]", "\n", "\n", "# rnn features", "\n", "output", "=", "self", ".", "rnn", "(", "conv", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.CRNN_ResNet18.__init__": [[95, 108], ["torch.Module.__init__", "crnn.ResNet18", "torch.Sequential", "torch.Sequential", "torch.Sequential", "crnn.BidirectionalLSTM", "crnn.BidirectionalLSTM"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet18"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "nc", ",", "nclass", ",", "nh", ",", "n_rnn", "=", "2", ",", "leakyRelu", "=", "False", ")", ":", "\n", "        ", "super", "(", "CRNN_ResNet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "imgH", "%", "16", "==", "0", ",", "'imgH has to be a multiple of 16'", "\n", "\n", "ks", "=", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", "]", "\n", "ps", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "ss", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "nm", "=", "[", "64", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "cnn", "=", "ResNet18", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "512", ",", "nh", ",", "nh", ")", ",", "\n", "BidirectionalLSTM", "(", "nh", ",", "nh", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.CRNN_ResNet18.forward": [[109, 126], ["crnn.CRNN_ResNet18.cnn", "conv.permute.permute.size", "conv.permute.permute.squeeze", "conv.permute.permute.permute", "crnn.CRNN_ResNet18.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# conv features", "\n", "# \u8f6c\u6210\u7070\u5ea6\u56fe", "\n", "\n", "# input = input[:, 0, :, :] * 0.299 + input[:, 1, :, :] * 0.587 + input[:, 2, :, :] * 0.114", "\n", "# input = input.unsqueeze(1)", "\n", "# print(\"input:\", input.shape)", "\n", "        ", "conv", "=", "self", ".", "cnn", "(", "input", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv", ".", "size", "(", ")", "\n", "assert", "h", "==", "1", ",", "\"the height of conv must be 1\"", "\n", "conv", "=", "conv", ".", "squeeze", "(", "2", ")", "\n", "conv", "=", "conv", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# [w, b, c]", "\n", "\n", "# rnn features", "\n", "output", "=", "self", ".", "rnn", "(", "conv", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn._DenseLayer.__init__": [[133, 144], ["torch.Sequential.__init__", "crnn._DenseLayer.add_module", "crnn._DenseLayer.add_module", "crnn._DenseLayer.add_module", "crnn._DenseLayer.add_module", "crnn._DenseLayer.add_module", "crnn._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm.1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu.1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv.1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "growth_rate", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm.2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu.2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv.2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn._DenseLayer.forward": [[145, 150], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.dropout"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn._DenseBlock.__init__": [[152, 157], ["torch.Sequential.__init__", "range", "crnn._DenseLayer", "crnn._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn._Transition.__init__": [[159, 173], ["torch.Sequential.__init__", "crnn._Transition.add_module", "crnn._Transition.add_module", "crnn._Transition.add_module", "crnn._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ",", "iblock", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "iblock", "<", "4", ",", "\"There are maximal 4 blocks.\"", "\n", "self", ".", "ks", "=", "[", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "h_ss", "=", "[", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "w_ss", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "self", ".", "w_pad", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "(", "self", ".", "ks", "[", "iblock", "]", ",", "self", ".", "ks", "[", "iblock", "]", ")", ",", "\n", "(", "self", ".", "h_ss", "[", "iblock", "]", ",", "self", ".", "w_ss", "[", "iblock", "]", ")", ",", "\n", "(", "0", ",", "self", ".", "w_pad", "[", "iblock", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.DenseNet.__init__": [[175, 211], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "crnn.DenseNet.features.add_module", "print", "crnn.DenseNet.modules", "OrderedDict", "crnn._DenseBlock", "crnn.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "crnn._Transition", "crnn.DenseNet.features.add_module", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "isinstance", "len", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "num_in", ",", "num_init_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "num_features", "=", "num_init_features", "\n", "\n", "# Each denseblock", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "drop_rate", "=", "drop_rate", ")", "\n", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "num_output_features", "=", "num_features", "//", "2", ",", "iblock", "=", "i", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Official init from torch repo", "\n", "print", "(", "\"Initializing Dense net weights...\"", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.DenseNet.forward": [[213, 219], ["crnn.DenseNet.features", "F.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "#out = F.avg_pool2d(out, kernel_size=7, stride=1).view(features.size(0), -1)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.BasicBlock.__init__": [[245, 254], ["torch.Module.__init__", "crnn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "crnn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.conv3x3", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.BasicBlock.forward": [[255, 272], ["crnn.BasicBlock.conv1", "crnn.BasicBlock.bn1", "crnn.BasicBlock.relu", "crnn.BasicBlock.conv2", "crnn.BasicBlock.bn2", "crnn.BasicBlock.relu", "crnn.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.Bottleneck.__init__": [[276, 287], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.Bottleneck.forward": [[288, 309], ["crnn.Bottleneck.conv1", "crnn.Bottleneck.bn1", "crnn.Bottleneck.relu", "crnn.Bottleneck.conv2", "crnn.Bottleneck.bn2", "crnn.Bottleneck.relu", "crnn.Bottleneck.conv3", "crnn.Bottleneck.bn3", "crnn.Bottleneck.relu", "crnn.Bottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet.__init__": [[312, 334], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "crnn.ResNet._make_layer", "crnn.ResNet._make_layer", "crnn.ResNet._make_layer", "crnn.ResNet._make_layer", "print", "crnn.ResNet.modules", "isinstance", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_in", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "32", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_in", ",", "32", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "2", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "stage", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "stage", "=", "3", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "stage", "=", "4", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "stage", "=", "5", ")", "\n", "\n", "# Official init from torch repo", "\n", "print", "(", "\"Initializing Dense net weights...\"", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet._make_layer": [[335, 356], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "stage", "=", "-", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "stage", "==", "2", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet.forward": [[357, 374], ["crnn.ResNet.conv1", "crnn.ResNet.bn1", "crnn.ResNet.relu1", "crnn.ResNet.maxpool", "crnn.ResNet.layer1", "crnn.ResNet.layer2", "crnn.ResNet.layer3", "crnn.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "# print(\"x\", x.shape)", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "# print(\"x\", x.shape)", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "# print(\"x\", x.shape)", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "# print(\"x\", x.shape)", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "# print(\"x\", x.shape)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.DenseNet121": [[221, 225], ["crnn.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "num_in", "=", "1", ",", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.DenseNet169": [[226, 230], ["crnn.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "num_in", "=", "1", ",", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.DenseNet201": [[231, 235], ["crnn.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "num_in", "=", "1", ",", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.conv3x3": [[238, 241], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet18": [[375, 378], ["crnn.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "num_in", "=", "1", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet34": [[379, 382], ["crnn.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "num_in", "=", "1", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet50": [[383, 386], ["crnn.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "num_in", "=", "1", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.crnn.crnn.ResNet101": [[391, 394], ["crnn.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "num_in", "=", "1", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.VGG_FeatureExtractor.__init__": [[8, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "int", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", "=", "512", ")", ":", "\n", "        ", "super", "(", "VGG_FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channel", "=", "[", "int", "(", "output_channel", "/", "8", ")", ",", "int", "(", "output_channel", "/", "4", ")", ",", "\n", "int", "(", "output_channel", "/", "2", ")", ",", "output_channel", "]", "# [64, 128, 256, 512]", "\n", "self", ".", "ConvNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channel", ",", "self", ".", "output_channel", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 64x16x50", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "0", "]", ",", "self", ".", "output_channel", "[", "1", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 128x8x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "1", "]", ",", "self", ".", "output_channel", "[", "2", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "# 256x8x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "2", "]", ",", "self", ".", "output_channel", "[", "2", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "1", ")", ",", "(", "2", ",", "1", ")", ")", ",", "# 256x4x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "2", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "# 512x4x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "3", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "1", ")", ",", "(", "2", ",", "1", ")", ")", ",", "# 512x2x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "3", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "2", ",", "1", ",", "0", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "# 512x1x24", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.VGG_FeatureExtractor.forward": [[27, 29], ["feature_extraction.VGG_FeatureExtractor.ConvNet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "ConvNet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.RCNN_FeatureExtractor.__init__": [[34, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "int", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.GRCL", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.GRCL", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.GRCL", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", "=", "512", ")", ":", "\n", "        ", "super", "(", "RCNN_FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channel", "=", "[", "int", "(", "output_channel", "/", "8", ")", ",", "int", "(", "output_channel", "/", "4", ")", ",", "\n", "int", "(", "output_channel", "/", "2", ")", ",", "output_channel", "]", "# [64, 128, 256, 512]", "\n", "self", ".", "ConvNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channel", ",", "self", ".", "output_channel", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 64 x 16 x 50", "\n", "GRCL", "(", "self", ".", "output_channel", "[", "0", "]", ",", "self", ".", "output_channel", "[", "0", "]", ",", "num_iteration", "=", "5", ",", "kernel_size", "=", "3", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 64 x 8 x 25", "\n", "GRCL", "(", "self", ".", "output_channel", "[", "0", "]", ",", "self", ".", "output_channel", "[", "1", "]", ",", "num_iteration", "=", "5", ",", "kernel_size", "=", "3", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ",", "# 128 x 4 x 26", "\n", "GRCL", "(", "self", ".", "output_channel", "[", "1", "]", ",", "self", ".", "output_channel", "[", "2", "]", ",", "num_iteration", "=", "5", ",", "kernel_size", "=", "3", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ",", "# 256 x 2 x 27", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "2", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "2", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "# 512 x 1 x 26", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.RCNN_FeatureExtractor.forward": [[50, 52], ["feature_extraction.RCNN_FeatureExtractor.ConvNet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "ConvNet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet_FeatureExtractor.__init__": [[57, 60], ["torch.Module.__init__", "feature_extraction.ResNet"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", "=", "512", ")", ":", "\n", "        ", "super", "(", "ResNet_FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ConvNet", "=", "ResNet", "(", "input_channel", ",", "output_channel", ",", "BasicBlock", ",", "[", "1", ",", "2", ",", "5", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet_FeatureExtractor.forward": [[61, 63], ["feature_extraction.ResNet_FeatureExtractor.ConvNet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "ConvNet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.GRCL.__init__": [[68, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "feature_extraction.GRCL_unit", "range"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", ",", "num_iteration", ",", "kernel_size", ",", "pad", ")", ":", "\n", "        ", "super", "(", "GRCL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wgf_u", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "output_channel", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "wgr_x", "=", "nn", ".", "Conv2d", "(", "output_channel", ",", "output_channel", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "wf_u", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "output_channel", ",", "kernel_size", ",", "1", ",", "pad", ",", "bias", "=", "False", ")", "\n", "self", ".", "wr_x", "=", "nn", ".", "Conv2d", "(", "output_channel", ",", "output_channel", ",", "kernel_size", ",", "1", ",", "pad", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "BN_x_init", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "\n", "self", ".", "num_iteration", "=", "num_iteration", "\n", "self", ".", "GRCL", "=", "[", "GRCL_unit", "(", "output_channel", ")", "for", "_", "in", "range", "(", "num_iteration", ")", "]", "\n", "self", ".", "GRCL", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "GRCL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.GRCL.forward": [[81, 93], ["feature_extraction.GRCL.wgf_u", "feature_extraction.GRCL.wf_u", "torch.relu", "torch.relu", "range", "feature_extraction.GRCL.BN_x_init", "feature_extraction.GRCL.wgr_x", "feature_extraction.GRCL.wr_x"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\" The input of GRCL is consistant over time t, which is denoted by u(0)\n        thus wgf_u / wf_u is also consistant over time t.\n        \"\"\"", "\n", "wgf_u", "=", "self", ".", "wgf_u", "(", "input", ")", "\n", "wf_u", "=", "self", ".", "wf_u", "(", "input", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "BN_x_init", "(", "wf_u", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_iteration", ")", ":", "\n", "            ", "x", "=", "self", ".", "GRCL", "[", "i", "]", "(", "wgf_u", ",", "self", ".", "wgr_x", "(", "x", ")", ",", "wf_u", ",", "self", ".", "wr_x", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.GRCL_unit.__init__": [[97, 104], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channel", ")", ":", "\n", "        ", "super", "(", "GRCL_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "BN_gfu", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_grx", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_fu", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_rx", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_Gx", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.GRCL_unit.forward": [[105, 115], ["feature_extraction.GRCL_unit.BN_gfu", "feature_extraction.GRCL_unit.BN_grx", "torch.sigmoid", "torch.sigmoid", "feature_extraction.GRCL_unit.BN_fu", "feature_extraction.GRCL_unit.BN_Gx", "torch.relu", "torch.relu", "feature_extraction.GRCL_unit.BN_rx"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "wgf_u", ",", "wgr_x", ",", "wf_u", ",", "wr_x", ")", ":", "\n", "        ", "G_first_term", "=", "self", ".", "BN_gfu", "(", "wgf_u", ")", "\n", "G_second_term", "=", "self", ".", "BN_grx", "(", "wgr_x", ")", "\n", "G", "=", "F", ".", "sigmoid", "(", "G_first_term", "+", "G_second_term", ")", "\n", "\n", "x_first_term", "=", "self", ".", "BN_fu", "(", "wf_u", ")", "\n", "x_second_term", "=", "self", ".", "BN_Gx", "(", "self", ".", "BN_rx", "(", "wr_x", ")", "*", "G", ")", "\n", "x", "=", "F", ".", "relu", "(", "x_first_term", "+", "x_second_term", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.BasicBlock.__init__": [[120, 129], ["torch.Module.__init__", "feature_extraction.BasicBlock._conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "feature_extraction.BasicBlock._conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.BasicBlock._conv3x3", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.BasicBlock._conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "self", ".", "_conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.BasicBlock._conv3x3": [[130, 134], ["torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.BasicBlock.forward": [[135, 151], ["feature_extraction.BasicBlock.conv1", "feature_extraction.BasicBlock.bn1", "feature_extraction.BasicBlock.relu", "feature_extraction.BasicBlock.conv2", "feature_extraction.BasicBlock.bn2", "feature_extraction.BasicBlock.relu", "feature_extraction.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_sisr.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet.__init__": [[155, 194], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", ",", "block", ",", "layers", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_channel_block", "=", "[", "int", "(", "output_channel", "/", "4", ")", ",", "int", "(", "output_channel", "/", "2", ")", ",", "output_channel", ",", "output_channel", "]", "\n", "\n", "self", ".", "inplanes", "=", "int", "(", "output_channel", "/", "8", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "int", "(", "output_channel", "/", "16", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "output_channel", "/", "16", ")", ")", "\n", "self", ".", "conv0_2", "=", "nn", ".", "Conv2d", "(", "int", "(", "output_channel", "/", "16", ")", ",", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0_2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "0", "]", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "0", "]", ",", "self", ".", "output_channel_block", "[", "\n", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "0", "]", ")", "\n", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "1", "]", ",", "self", ".", "output_channel_block", "[", "\n", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "1", "]", ")", "\n", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "2", "]", ",", "self", ".", "output_channel_block", "[", "\n", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "2", "]", ")", "\n", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ",", "self", ".", "output_channel_block", "[", "\n", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ",", "self", ".", "output_channel_block", "[", "\n", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4_2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet._make_layer": [[195, 211], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.feature_extraction.ResNet.forward": [[212, 247], ["feature_extraction.ResNet.conv0_1", "feature_extraction.ResNet.bn0_1", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.conv0_2", "feature_extraction.ResNet.bn0_2", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.maxpool1", "feature_extraction.ResNet.layer1", "feature_extraction.ResNet.conv1", "feature_extraction.ResNet.bn1", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.maxpool2", "feature_extraction.ResNet.layer2", "feature_extraction.ResNet.conv2", "feature_extraction.ResNet.bn2", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.maxpool3", "feature_extraction.ResNet.layer3", "feature_extraction.ResNet.conv3", "feature_extraction.ResNet.bn3", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.layer4", "feature_extraction.ResNet.conv4_1", "feature_extraction.ResNet.bn4_1", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.conv4_2", "feature_extraction.ResNet.bn4_2", "feature_extraction.ResNet.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0_1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv0_2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.TPS_SpatialTransformerNetwork.__init__": [[10, 27], ["torch.Module.__init__", "transformation.LocalizationNetwork", "transformation.GridGenerator"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "F", ",", "I_size", ",", "I_r_size", ",", "I_channel_num", "=", "1", ")", ":", "\n", "        ", "\"\"\" Based on RARE TPS\n        input:\n            batch_I: Batch Input Image [batch_size x I_channel_num x I_height x I_width]\n            I_size : (height, width) of the input image I\n            I_r_size : (height, width) of the rectified image I_r\n            I_channel_num : the number of channels of the input image I\n        output:\n            batch_I_r: rectified image [batch_size x I_channel_num x I_r_height x I_r_width]\n        \"\"\"", "\n", "super", "(", "TPS_SpatialTransformerNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "I_size", "=", "I_size", "\n", "self", ".", "I_r_size", "=", "I_r_size", "# = (I_r_height, I_r_width)", "\n", "self", ".", "I_channel_num", "=", "I_channel_num", "\n", "self", ".", "LocalizationNetwork", "=", "LocalizationNetwork", "(", "self", ".", "F", ",", "self", ".", "I_channel_num", ")", "\n", "self", ".", "GridGenerator", "=", "GridGenerator", "(", "self", ".", "F", ",", "self", ".", "I_r_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.TPS_SpatialTransformerNetwork.forward": [[28, 35], ["transformation.TPS_SpatialTransformerNetwork.LocalizationNetwork", "transformation.TPS_SpatialTransformerNetwork.GridGenerator.build_P_prime", "transformation.TPS_SpatialTransformerNetwork.reshape", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "transformation.TPS_SpatialTransformerNetwork.size"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator.build_P_prime", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.models.tps_spatial_transformer.grid_sample"], ["", "def", "forward", "(", "self", ",", "batch_I", ")", ":", "\n", "        ", "batch_C_prime", "=", "self", ".", "LocalizationNetwork", "(", "batch_I", ")", "# batch_size x K x 2", "\n", "build_P_prime", "=", "self", ".", "GridGenerator", ".", "build_P_prime", "(", "batch_C_prime", ")", "# batch_size x n (= I_r_width x I_r_height) x 2", "\n", "build_P_prime_reshape", "=", "build_P_prime", ".", "reshape", "(", "[", "build_P_prime", ".", "size", "(", "0", ")", ",", "self", ".", "I_r_size", "[", "0", "]", ",", "self", ".", "I_r_size", "[", "1", "]", ",", "2", "]", ")", "\n", "batch_I_r", "=", "F", ".", "grid_sample", "(", "batch_I", ",", "build_P_prime_reshape", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "return", "batch_I_r", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.LocalizationNetwork.__init__": [[40, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "transformation.LocalizationNetwork.localization_fc2.weight.data.fill_", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int", "int", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["def", "__init__", "(", "self", ",", "F", ",", "I_channel_num", ")", ":", "\n", "        ", "super", "(", "LocalizationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "I_channel_num", "=", "I_channel_num", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "I_channel_num", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# batch_size x 64 x I_height/2 x I_width/2", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# batch_size x 128 x I_height/4 x I_width/4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# batch_size x 256 x I_height/8 x I_width/8", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "# batch_size x 512", "\n", ")", "\n", "\n", "self", ".", "localization_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "localization_fc2", "=", "nn", ".", "Linear", "(", "256", ",", "self", ".", "F", "*", "2", ")", "\n", "\n", "# Init fc2 in LocalizationNetwork", "\n", "self", ".", "localization_fc2", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\"\"\" see RARE paper Fig. 6 (a) \"\"\"", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "linspace", "(", "0.0", ",", "-", "1.0", ",", "num", "=", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "linspace", "(", "1.0", ",", "0.0", ",", "num", "=", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "initial_bias", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "localization_fc2", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "initial_bias", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.LocalizationNetwork.forward": [[70, 79], ["batch_I.size", "transformation.LocalizationNetwork.conv().view", "transformation.LocalizationNetwork.localization_fc2().view", "transformation.LocalizationNetwork.conv", "transformation.LocalizationNetwork.localization_fc2", "transformation.LocalizationNetwork.localization_fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_I", ")", ":", "\n", "        ", "\"\"\"\n        input:     batch_I : Batch Input Image [batch_size x I_channel_num x I_height x I_width]\n        output:    batch_C_prime : Predicted coordinates of fiducial points for input batch [batch_size x F x 2]\n        \"\"\"", "\n", "batch_size", "=", "batch_I", ".", "size", "(", "0", ")", "\n", "features", "=", "self", ".", "conv", "(", "batch_I", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "batch_C_prime", "=", "self", ".", "localization_fc2", "(", "self", ".", "localization_fc1", "(", "features", ")", ")", ".", "view", "(", "batch_size", ",", "self", ".", "F", ",", "2", ")", "\n", "return", "batch_C_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator.__init__": [[84, 94], ["torch.Module.__init__", "transformation.GridGenerator._build_C", "transformation.GridGenerator._build_P", "transformation.GridGenerator.register_buffer", "transformation.GridGenerator.register_buffer", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "transformation.GridGenerator._build_inv_delta_C", "transformation.GridGenerator._build_P_hat"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_C", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_P", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_inv_delta_C", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_P_hat"], ["def", "__init__", "(", "self", ",", "F", ",", "I_r_size", ")", ":", "\n", "        ", "\"\"\" Generate P_hat and inv_delta_C for later \"\"\"", "\n", "super", "(", "GridGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-6", "\n", "self", ".", "I_r_height", ",", "self", ".", "I_r_width", "=", "I_r_size", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "C", "=", "self", ".", "_build_C", "(", "self", ".", "F", ")", "# F x 2", "\n", "self", ".", "P", "=", "self", ".", "_build_P", "(", "self", ".", "I_r_width", ",", "self", ".", "I_r_height", ")", "\n", "self", ".", "register_buffer", "(", "\"inv_delta_C\"", ",", "torch", ".", "tensor", "(", "self", ".", "_build_inv_delta_C", "(", "self", ".", "F", ",", "self", ".", "C", ")", ")", ".", "float", "(", ")", ")", "# F+3 x F+3", "\n", "self", ".", "register_buffer", "(", "\"P_hat\"", ",", "torch", ".", "tensor", "(", "self", ".", "_build_P_hat", "(", "self", ".", "F", ",", "self", ".", "C", ",", "self", ".", "P", ")", ")", ".", "float", "(", ")", ")", "# n x F+3", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_C": [[95, 104], ["numpy.linspace", "numpy.ones", "numpy.stack", "numpy.stack", "numpy.concatenate", "int", "numpy.ones", "int", "int"], "methods", ["None"], ["", "def", "_build_C", "(", "self", ",", "F", ")", ":", "\n", "        ", "\"\"\" Return coordinates of fiducial points in I_r; C \"\"\"", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_top", "=", "-", "1", "*", "np", ".", "ones", "(", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "C", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "return", "C", "# F x 2", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_inv_delta_C": [[105, 126], ["numpy.zeros", "range", "numpy.fill_diagonal", "numpy.concatenate", "numpy.linalg.inv", "range", "numpy.log", "numpy.linalg.norm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.ones", "numpy.zeros", "numpy.transpose", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "_build_inv_delta_C", "(", "self", ",", "F", ",", "C", ")", ":", "\n", "        ", "\"\"\" Return inv_delta_C which is needed to calculate T \"\"\"", "\n", "hat_C", "=", "np", ".", "zeros", "(", "(", "F", ",", "F", ")", ",", "dtype", "=", "float", ")", "# F x F", "\n", "for", "i", "in", "range", "(", "0", ",", "F", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ",", "F", ")", ":", "\n", "                ", "r", "=", "np", ".", "linalg", ".", "norm", "(", "C", "[", "i", "]", "-", "C", "[", "j", "]", ")", "\n", "hat_C", "[", "i", ",", "j", "]", "=", "r", "\n", "hat_C", "[", "j", ",", "i", "]", "=", "r", "\n", "", "", "np", ".", "fill_diagonal", "(", "hat_C", ",", "1", ")", "\n", "hat_C", "=", "(", "hat_C", "**", "2", ")", "*", "np", ".", "log", "(", "hat_C", ")", "\n", "# print(C.shape, hat_C.shape)", "\n", "delta_C", "=", "np", ".", "concatenate", "(", "# F+3 x F+3", "\n", "[", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "(", "F", ",", "1", ")", ")", ",", "C", ",", "hat_C", "]", ",", "axis", "=", "1", ")", ",", "# F x F+3", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", ",", "np", ".", "transpose", "(", "C", ")", "]", ",", "axis", "=", "1", ")", ",", "# 2 x F+3", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", ",", "np", ".", "ones", "(", "(", "1", ",", "F", ")", ")", "]", ",", "axis", "=", "1", ")", "# 1 x F+3", "\n", "]", ",", "\n", "axis", "=", "0", "\n", ")", "\n", "inv_delta_C", "=", "np", ".", "linalg", ".", "inv", "(", "delta_C", ")", "\n", "return", "inv_delta_C", "# F+3 x F+3", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_P": [[127, 135], ["numpy.stack", "numpy.stack.reshape", "numpy.meshgrid", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "_build_P", "(", "self", ",", "I_r_width", ",", "I_r_height", ")", ":", "\n", "        ", "I_r_grid_x", "=", "(", "np", ".", "arange", "(", "-", "I_r_width", ",", "I_r_width", ",", "2", ")", "+", "1.0", ")", "/", "I_r_width", "# self.I_r_width", "\n", "I_r_grid_y", "=", "(", "np", ".", "arange", "(", "-", "I_r_height", ",", "I_r_height", ",", "2", ")", "+", "1.0", ")", "/", "I_r_height", "# self.I_r_height", "\n", "P", "=", "np", ".", "stack", "(", "# self.I_r_width x self.I_r_height x 2", "\n", "np", ".", "meshgrid", "(", "I_r_grid_x", ",", "I_r_grid_y", ")", ",", "\n", "axis", "=", "2", "\n", ")", "\n", "return", "P", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "# n (= self.I_r_width x self.I_r_height) x 2", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator._build_P_hat": [[136, 145], ["numpy.tile", "numpy.expand_dims", "numpy.linalg.norm", "numpy.multiply", "numpy.concatenate", "numpy.expand_dims", "numpy.square", "numpy.log", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.utils.utils_logger.log"], ["", "def", "_build_P_hat", "(", "self", ",", "F", ",", "C", ",", "P", ")", ":", "\n", "        ", "n", "=", "P", ".", "shape", "[", "0", "]", "# n (= self.I_r_width x self.I_r_height)", "\n", "P_tile", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "P", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "F", ",", "1", ")", ")", "# n x 2 -> n x 1 x 2 -> n x F x 2", "\n", "C_tile", "=", "np", ".", "expand_dims", "(", "C", ",", "axis", "=", "0", ")", "# 1 x F x 2", "\n", "P_diff", "=", "P_tile", "-", "C_tile", "# n x F x 2", "\n", "rbf_norm", "=", "np", ".", "linalg", ".", "norm", "(", "P_diff", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "# n x F", "\n", "rbf", "=", "np", ".", "multiply", "(", "np", ".", "square", "(", "rbf_norm", ")", ",", "np", ".", "log", "(", "rbf_norm", "+", "self", ".", "eps", ")", ")", "# n x F", "\n", "P_hat", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "(", "n", ",", "1", ")", ")", ",", "P", ",", "rbf", "]", ",", "axis", "=", "1", ")", "\n", "return", "P_hat", "# n x F+3", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.transformation.GridGenerator.build_P_prime": [[146, 156], ["batch_C_prime.size", "transformation.GridGenerator.inv_delta_C.repeat", "transformation.GridGenerator.P_hat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "build_P_prime", "(", "self", ",", "batch_C_prime", ")", ":", "\n", "        ", "\"\"\" Generate Grid from batch_C_prime [batch_size x F x 2] \"\"\"", "\n", "batch_size", "=", "batch_C_prime", ".", "size", "(", "0", ")", "\n", "batch_inv_delta_C", "=", "self", ".", "inv_delta_C", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "batch_P_hat", "=", "self", ".", "P_hat", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "batch_C_prime_with_zeros", "=", "torch", ".", "cat", "(", "(", "batch_C_prime", ",", "torch", ".", "zeros", "(", "\n", "batch_size", ",", "3", ",", "2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", ",", "dim", "=", "1", ")", "# batch_size x F+3 x 2", "\n", "batch_T", "=", "torch", ".", "bmm", "(", "batch_inv_delta_C", ",", "batch_C_prime_with_zeros", ")", "# batch_size x F+3 x 2", "\n", "batch_P_prime", "=", "torch", ".", "bmm", "(", "batch_P_hat", ",", "batch_T", ")", "# batch_size x n x 2", "\n", "return", "batch_P_prime", "# batch_size x n x 2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.Attention.__init__": [[8, 14], ["torch.Module.__init__", "prediction.AttentionCell", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_cell", "=", "AttentionCell", "(", "input_size", ",", "hidden_size", ",", "num_classes", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "generator", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.Attention._char_to_onehot": [[15, 21], ["input_char.unsqueeze.unsqueeze.unsqueeze", "input_char.unsqueeze.unsqueeze.size", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "one_hot.scatter_.scatter_.scatter_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "_char_to_onehot", "(", "self", ",", "input_char", ",", "onehot_dim", "=", "38", ")", ":", "\n", "        ", "input_char", "=", "input_char", ".", "unsqueeze", "(", "1", ")", "\n", "batch_size", "=", "input_char", ".", "size", "(", "0", ")", "\n", "one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "onehot_dim", ")", ".", "zero_", "(", ")", "\n", "one_hot", "=", "one_hot", ".", "scatter_", "(", "1", ",", "input_char", ",", "1", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.Attention.forward": [[22, 58], ["batch_H.size", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "range", "prediction.Attention.generator", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "range", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "prediction.Attention._char_to_onehot", "prediction.Attention.attention_cell", "prediction.Attention._char_to_onehot", "prediction.Attention.attention_cell", "prediction.Attention.generator", "prediction.Attention.max", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.Attention._char_to_onehot", "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.Attention._char_to_onehot"], ["", "def", "forward", "(", "self", ",", "batch_H", ",", "text", ",", "is_train", "=", "True", ",", "batch_max_length", "=", "25", ")", ":", "\n", "        ", "\"\"\"\n        input:\n            batch_H : contextual_feature H = hidden state of encoder. [batch_size x num_steps x num_classes]\n            text : the text-index of each image. [batch_size x (max_length+1)]. +1 for [GO] token. text[:, 0] = [GO].\n        output: probability distribution at each step [batch_size x num_steps x num_classes]\n        \"\"\"", "\n", "batch_size", "=", "batch_H", ".", "size", "(", "0", ")", "\n", "num_steps", "=", "batch_max_length", "+", "1", "# +1 for [s] at end of sentence.", "\n", "\n", "output_hiddens", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "num_steps", ",", "self", ".", "hidden_size", ")", ".", "fill_", "(", "0", ")", "\n", "hidden", "=", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "fill_", "(", "0", ")", ",", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "fill_", "(", "0", ")", ")", "\n", "\n", "if", "is_train", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "# one-hot vectors for a i-th char. in a batch", "\n", "                ", "char_onehots", "=", "self", ".", "_char_to_onehot", "(", "text", "[", ":", ",", "i", "]", ",", "onehot_dim", "=", "self", ".", "num_classes", ")", "\n", "# hidden : decoder's hidden s_{t-1}, batch_H : encoder's hidden H, char_onehots : one-hot(y_{t-1})", "\n", "hidden", ",", "alpha", "=", "self", ".", "attention_cell", "(", "hidden", ",", "batch_H", ",", "char_onehots", ")", "\n", "output_hiddens", "[", ":", ",", "i", ",", ":", "]", "=", "hidden", "[", "0", "]", "# LSTM hidden index (0: hidden, 1: Cell)", "\n", "", "probs", "=", "self", ".", "generator", "(", "output_hiddens", ")", "\n", "\n", "", "else", ":", "\n", "            ", "targets", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "batch_size", ")", ".", "fill_", "(", "0", ")", "# [GO] token", "\n", "probs", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "num_steps", ",", "self", ".", "num_classes", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "                ", "char_onehots", "=", "self", ".", "_char_to_onehot", "(", "targets", ",", "onehot_dim", "=", "self", ".", "num_classes", ")", "\n", "hidden", ",", "alpha", "=", "self", ".", "attention_cell", "(", "hidden", ",", "batch_H", ",", "char_onehots", ")", "\n", "probs_step", "=", "self", ".", "generator", "(", "hidden", "[", "0", "]", ")", "\n", "probs", "[", ":", ",", "i", ",", ":", "]", "=", "probs_step", "\n", "_", ",", "next_input", "=", "probs_step", ".", "max", "(", "1", ")", "\n", "targets", "=", "next_input", "\n", "\n", "", "", "return", "probs", "# batch_size x num_steps x num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.AttentionCell.__init__": [[62, 69], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_embeddings", ")", ":", "\n", "        ", "super", "(", "AttentionCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "i2h", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "h2h", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "# either i2i or h2h should have bias", "\n", "self", ".", "score", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTMCell", "(", "input_size", "+", "num_embeddings", ",", "hidden_size", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.prediction.AttentionCell.forward": [[70, 81], ["prediction.AttentionCell.i2h", "prediction.AttentionCell.h2h().unsqueeze", "prediction.AttentionCell.score", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prediction.AttentionCell.rnn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "prediction.AttentionCell.h2h", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_hidden", ",", "batch_H", ",", "char_onehots", ")", ":", "\n", "# [batch_size x num_encoder_step x num_channel] -> [batch_size x num_encoder_step x hidden_size]", "\n", "        ", "batch_H_proj", "=", "self", ".", "i2h", "(", "batch_H", ")", "\n", "prev_hidden_proj", "=", "self", ".", "h2h", "(", "prev_hidden", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "e", "=", "self", ".", "score", "(", "torch", ".", "tanh", "(", "batch_H_proj", "+", "prev_hidden_proj", ")", ")", "# batch_size x num_encoder_step * 1", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "e", ",", "dim", "=", "1", ")", "\n", "context", "=", "torch", ".", "bmm", "(", "alpha", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "batch_H", ")", ".", "squeeze", "(", "1", ")", "# batch_size x num_channel", "\n", "concat_context", "=", "torch", ".", "cat", "(", "[", "context", ",", "char_onehots", "]", ",", "1", ")", "# batch_size x (num_channel + num_embedding)", "\n", "cur_hidden", "=", "self", ".", "rnn", "(", "concat_context", ",", "prev_hidden", ")", "\n", "return", "cur_hidden", ",", "alpha", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__": [[6, 10], ["torch.Module.__init__", "torch.LSTM", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mjq11302010044_TPGSR.modules.sequence_modeling.BidirectionalLSTM.forward": [[11, 20], ["sequence_modeling.BidirectionalLSTM.rnn.flatten_parameters", "sequence_modeling.BidirectionalLSTM.rnn", "sequence_modeling.BidirectionalLSTM.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        input : visual feature [batch_size x T x input_size]\n        output : contextual feature [batch_size x T x output_size]\n        \"\"\"", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "# batch_size x T x input_size -> batch_size x T x (2*hidden_size)", "\n", "output", "=", "self", ".", "linear", "(", "recurrent", ")", "# batch_size x T x output_size", "\n", "return", "output", "\n", "", "", ""]]}