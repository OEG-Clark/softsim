{"home.repos.pwc.inspect_result.drboog_Lafite.None.calc_metrics.CommaSeparatedList.convert": [[80, 85], ["value.split", "value.lower"], "methods", ["None"], ["def", "convert", "(", "self", ",", "value", ",", "param", ",", "ctx", ")", ":", "\n", "        ", "_", "=", "param", ",", "ctx", "\n", "if", "value", "is", "None", "or", "value", ".", "lower", "(", ")", "==", "'none'", "or", "value", "==", "''", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "value", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.calc_metrics.subprocess_fn": [[21, 74], ["dnnlib.util.Logger", "torch_utils.training_stats.init_multiprocessing", "torch.device", "copy.deepcopy().eval().requires_grad_().to", "copy.deepcopy().eval().requires_grad_().to", "os.path.abspath", "torch.device", "torch.empty", "torch.empty", "torch.empty", "torch_utils.misc.print_module_summary", "torch_utils.misc.print_module_summary", "metrics.metric_utils.ProgressMonitor", "metrics.metric_main.calc_metric", "print", "os.path.join", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "copy.deepcopy().eval().requires_grad_", "copy.deepcopy().eval().requires_grad_", "print", "metrics.metric_main.report_metric", "print", "os.path.abspath.replace", "copy.deepcopy().eval", "copy.deepcopy().eval", "copy.deepcopy", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.init_multiprocessing", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.print_module_summary", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.print_module_summary", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.calc_metric", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.report_metric"], ["def", "subprocess_fn", "(", "rank", ",", "args", ",", "temp_dir", ")", ":", "\n", "    ", "dnnlib", ".", "util", ".", "Logger", "(", "should_flush", "=", "True", ")", "\n", "\n", "# Init torch.distributed.", "\n", "if", "args", ".", "num_gpus", ">", "1", ":", "\n", "        ", "init_file", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'.torch_distributed_init'", ")", ")", "\n", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "init_method", "=", "'file:///'", "+", "init_file", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'gloo'", ",", "init_method", "=", "init_method", ",", "rank", "=", "rank", ",", "world_size", "=", "args", ".", "num_gpus", ")", "\n", "", "else", ":", "\n", "            ", "init_method", "=", "f'file://{init_file}'", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "init_method", ",", "rank", "=", "rank", ",", "world_size", "=", "args", ".", "num_gpus", ")", "\n", "\n", "# Init torch_utils.", "\n", "", "", "sync_device", "=", "torch", ".", "device", "(", "'cuda'", ",", "rank", ")", "if", "args", ".", "num_gpus", ">", "1", "else", "None", "\n", "training_stats", ".", "init_multiprocessing", "(", "rank", "=", "rank", ",", "sync_device", "=", "sync_device", ")", "\n", "if", "rank", "!=", "0", "or", "not", "args", ".", "verbose", ":", "\n", "        ", "custom_ops", ".", "verbosity", "=", "'none'", "\n", "\n", "# Print network summary.", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "rank", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cuda", ".", "matmul", ".", "allow_tf32", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "=", "False", "\n", "G", "=", "copy", ".", "deepcopy", "(", "args", ".", "G", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "\n", "D", "=", "copy", ".", "deepcopy", "(", "args", ".", "D", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "\n", "if", "rank", "==", "0", "and", "args", ".", "verbose", ":", "\n", "        ", "z", "=", "torch", ".", "empty", "(", "[", "1", ",", "G", ".", "z_dim", "]", ",", "device", "=", "device", ")", "\n", "c", "=", "torch", ".", "empty", "(", "[", "1", ",", "G", ".", "c_dim", "]", ",", "device", "=", "device", ")", "\n", "fts", "=", "torch", ".", "empty", "(", "[", "1", ",", "512", "]", ",", "device", "=", "device", ")", "\n", "img", "=", "misc", ".", "print_module_summary", "(", "G", ",", "[", "z", ",", "c", "]", ")", "\n", "misc", ".", "print_module_summary", "(", "D", ",", "[", "img", ",", "c", ",", "fts", "]", ")", "\n", "#         z = torch.empty([1, G.z_dim], device=device)", "\n", "#         c = torch.empty([1, G.c_dim], device=device)", "\n", "#         misc.print_module_summary(G, [z, c])", "\n", "\n", "# Calculate each metric.", "\n", "", "for", "metric", "in", "args", ".", "metrics", ":", "\n", "        ", "if", "rank", "==", "0", "and", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Calculating {metric}...'", ")", "\n", "", "progress", "=", "metric_utils", ".", "ProgressMonitor", "(", "verbose", "=", "args", ".", "verbose", ")", "\n", "txt_recon", "=", "True", "# add the args later", "\n", "img_recon", "=", "False", "\n", "result_dict", "=", "metric_main", ".", "calc_metric", "(", "metric", "=", "metric", ",", "G", "=", "G", ",", "D", "=", "D", ",", "txt_recon", "=", "txt_recon", ",", "img_recon", "=", "img_recon", ",", "dataset_kwargs", "=", "args", ".", "dataset_kwargs", ",", "testset_kwargs", "=", "args", ".", "testset_kwargs", ",", "\n", "num_gpus", "=", "args", ".", "num_gpus", ",", "rank", "=", "rank", ",", "device", "=", "device", ",", "progress", "=", "progress", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "metric_main", ".", "report_metric", "(", "result_dict", ",", "run_dir", "=", "args", ".", "run_dir", ",", "snapshot_pkl", "=", "args", ".", "network_pkl", ")", "\n", "", "if", "rank", "==", "0", "and", "args", ".", "verbose", ":", "\n", "            ", "print", "(", ")", "\n", "\n", "# Done.", "\n", "", "", "if", "rank", "==", "0", "and", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "'Exiting...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.calc_metrics.calc_metrics": [[88, 196], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "dnnlib.util.Logger", "dnnlib.EasyDict", "os.path.isfile", "torch.multiprocessing.set_start_method", "all", "ctx.fail", "ctx.fail", "ctx.fail", "print", "dnnlib.util.open_url", "legacy.load_network_pkl", "dnnlib.EasyDict", "dnnlib.EasyDict", "print", "print", "os.path.dirname", "os.path.isfile", "print", "tempfile.TemporaryDirectory", "calc_metrics.CommaSeparatedList", "dnnlib.util.is_url", "os.path.isfile", "dnnlib.EasyDict", "ctx.fail", "json.dumps", "os.path.join", "calc_metrics.subprocess_fn", "torch.multiprocessing.spawn", "metrics.metric_main.is_valid_metric", "dnnlib.EasyDict", "metrics.metric_main.list_valid_metrics", "dnnlib.EasyDict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.open_url", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.load_network_pkl", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.is_url", "home.repos.pwc.inspect_result.drboog_Lafite.None.train.subprocess_fn", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.is_valid_metric", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.list_valid_metrics"], ["", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "pass_context", "\n", "@", "click", ".", "option", "(", "'network_pkl'", ",", "'--network'", ",", "help", "=", "'Network pickle filename or URL'", ",", "metavar", "=", "'PATH'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--metrics'", ",", "help", "=", "'Comma-separated list or \"none\"'", ",", "type", "=", "CommaSeparatedList", "(", ")", ",", "default", "=", "'fid50k_full'", ",", "show_default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--data'", ",", "help", "=", "'Dataset to evaluate metrics against (directory or zip) [default: same as training data]'", ",", "metavar", "=", "'PATH'", ")", "\n", "@", "click", ".", "option", "(", "'--test_data'", ",", "help", "=", "'Dataset to evaluate metrics against (directory or zip) [default: same as training data]'", ",", "metavar", "=", "'PATH'", ")", "\n", "\n", "@", "click", ".", "option", "(", "'--mirror'", ",", "help", "=", "'Whether the dataset was augmented with x-flips during training [default: look up]'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--gpus'", ",", "help", "=", "'Number of GPUs to use'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'INT'", ",", "show_default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--verbose'", ",", "help", "=", "'Print optional information'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "metavar", "=", "'BOOL'", ",", "show_default", "=", "True", ")", "\n", "\n", "def", "calc_metrics", "(", "ctx", ",", "network_pkl", ",", "metrics", ",", "data", ",", "test_data", ",", "mirror", ",", "gpus", ",", "verbose", ")", ":", "\n", "    ", "\"\"\"Calculate quality metrics for previous training run or pretrained network pickle.\n\n    Examples:\n\n    \\b\n    # Previous training run: look up options automatically, save result to JSONL file.\n    python calc_metrics.py --metrics=pr50k3_full \\\\\n        --network=~/training-runs/00000-ffhq10k-res64-auto1/network-snapshot-000000.pkl\n\n    \\b\n    # Pre-trained network pickle: specify dataset explicitly, print result to stdout.\n    python calc_metrics.py --metrics=fid50k_full --data=~/datasets/ffhq.zip --mirror=1 \\\\\n        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/ffhq.pkl\n\n    Available metrics:\n\n    \\b\n      ADA paper:\n        fid50k_full  Frechet inception distance against the full dataset.\n        kid50k_full  Kernel inception distance against the full dataset.\n        pr50k3_full  Precision and recall againt the full dataset.\n        is50k        Inception score for CIFAR-10.\n\n    \\b\n      StyleGAN and StyleGAN2 papers:\n        fid50k       Frechet inception distance against 50k real images.\n        kid50k       Kernel inception distance against 50k real images.\n        pr50k3       Precision and recall against 50k real images.\n        ppl2_wend    Perceptual path length in W at path endpoints against full image.\n        ppl_zfull    Perceptual path length in Z for full paths against cropped image.\n        ppl_wfull    Perceptual path length in W for full paths against cropped image.\n        ppl_zend     Perceptual path length in Z at path endpoints against cropped image.\n        ppl_wend     Perceptual path length in W at path endpoints against cropped image.\n    \"\"\"", "\n", "dnnlib", ".", "util", ".", "Logger", "(", "should_flush", "=", "True", ")", "\n", "\n", "# Validate arguments.", "\n", "args", "=", "dnnlib", ".", "EasyDict", "(", "metrics", "=", "metrics", ",", "num_gpus", "=", "gpus", ",", "network_pkl", "=", "network_pkl", ",", "verbose", "=", "verbose", ")", "\n", "if", "not", "all", "(", "metric_main", ".", "is_valid_metric", "(", "metric", ")", "for", "metric", "in", "args", ".", "metrics", ")", ":", "\n", "        ", "ctx", ".", "fail", "(", "'\\n'", ".", "join", "(", "[", "'--metrics can only contain the following values:'", "]", "+", "metric_main", ".", "list_valid_metrics", "(", ")", ")", ")", "\n", "", "if", "not", "args", ".", "num_gpus", ">=", "1", ":", "\n", "        ", "ctx", ".", "fail", "(", "'--gpus must be at least 1'", ")", "\n", "\n", "# Load network.", "\n", "", "if", "not", "dnnlib", ".", "util", ".", "is_url", "(", "network_pkl", ",", "allow_file_urls", "=", "True", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "network_pkl", ")", ":", "\n", "        ", "ctx", ".", "fail", "(", "'--network must point to a file or URL'", ")", "\n", "", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "f'Loading network from \"{network_pkl}\"...'", ")", "\n", "", "with", "dnnlib", ".", "util", ".", "open_url", "(", "network_pkl", ",", "verbose", "=", "args", ".", "verbose", ")", "as", "f", ":", "\n", "        ", "network_dict", "=", "legacy", ".", "load_network_pkl", "(", "f", ")", "\n", "args", ".", "G", "=", "network_dict", "[", "'G_ema'", "]", "# subclass of torch.nn.Module", "\n", "args", ".", "D", "=", "network_dict", "[", "'D'", "]", "\n", "\n", "# Initialize dataset options.", "\n", "", "if", "data", "is", "not", "None", ":", "\n", "        ", "args", ".", "dataset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.dataset.ImageFolderDataset'", ",", "path", "=", "data", ",", "use_clip", "=", "True", ")", "\n", "args", ".", "testset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.dataset.ImageFolderDataset'", ",", "path", "=", "test_data", ",", "use_clip", "=", "True", ")", "\n", "", "elif", "network_dict", "[", "'training_set_kwargs'", "]", "is", "not", "None", ":", "\n", "        ", "args", ".", "dataset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "network_dict", "[", "'training_set_kwargs'", "]", ")", "\n", "try", ":", "\n", "            ", "args", ".", "testset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "network_dict", "[", "'testing_set_kwargs'", "]", ")", "\n", "", "except", ":", "\n", "            ", "args", ".", "testset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "network_dict", "[", "'training_set_kwargs'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "ctx", ".", "fail", "(", "'Could not look up dataset options; please specify --data'", ")", "\n", "\n", "# Finalize dataset options.", "\n", "", "args", ".", "dataset_kwargs", ".", "resolution", "=", "args", ".", "G", ".", "img_resolution", "\n", "args", ".", "dataset_kwargs", ".", "use_labels", "=", "(", "args", ".", "G", ".", "c_dim", "!=", "0", ")", "\n", "args", ".", "testset_kwargs", ".", "resolution", "=", "args", ".", "G", ".", "img_resolution", "\n", "args", ".", "testset_kwargs", ".", "use_labels", "=", "(", "args", ".", "G", ".", "c_dim", "!=", "0", ")", "\n", "if", "mirror", "is", "not", "None", ":", "\n", "        ", "args", ".", "dataset_kwargs", ".", "xflip", "=", "mirror", "\n", "args", ".", "testset_kwargs", ".", "xflip", "=", "mirror", "\n", "\n", "# Print dataset options.", "\n", "", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "'Dataset options:'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "args", ".", "dataset_kwargs", ",", "indent", "=", "2", ")", ")", "\n", "\n", "# Locate run dir.", "\n", "", "args", ".", "run_dir", "=", "None", "\n", "if", "os", ".", "path", ".", "isfile", "(", "network_pkl", ")", ":", "\n", "        ", "pkl_dir", "=", "os", ".", "path", ".", "dirname", "(", "network_pkl", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pkl_dir", ",", "'training_options.json'", ")", ")", ":", "\n", "            ", "args", ".", "run_dir", "=", "pkl_dir", "\n", "\n", "# Launch processes.", "\n", "", "", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "'Launching processes...'", ")", "\n", "", "torch", ".", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "temp_dir", ":", "\n", "        ", "if", "args", ".", "num_gpus", "==", "1", ":", "\n", "            ", "subprocess_fn", "(", "rank", "=", "0", ",", "args", "=", "args", ",", "temp_dir", "=", "temp_dir", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "multiprocessing", ".", "spawn", "(", "fn", "=", "subprocess_fn", ",", "args", "=", "(", "args", ",", "temp_dir", ")", ",", "nprocs", "=", "args", ".", "num_gpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.custom_reshape": [[23, 39], ["torch.rand", "torch.rand", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d.", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.interpolate", "int"], "function", ["None"], ["def", "custom_reshape", "(", "img", ",", "mode", "=", "'bicubic'", ",", "ratio", "=", "0.99", ")", ":", "# more to be implemented here", "\n", "    ", "full_size", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "prob", "=", "torch", ".", "rand", "(", "(", ")", ")", "\n", "\n", "if", "full_size", "<", "224", ":", "\n", "        ", "pad_1", "=", "torch", ".", "randint", "(", "0", ",", "224", "-", "full_size", ",", "(", ")", ")", "\n", "pad_2", "=", "torch", ".", "randint", "(", "0", ",", "224", "-", "full_size", ",", "(", ")", ")", "\n", "m", "=", "torch", ".", "nn", ".", "ConstantPad2d", "(", "(", "pad_1", ",", "224", "-", "full_size", "-", "pad_1", ",", "pad_2", ",", "224", "-", "full_size", "-", "pad_2", ")", ",", "1.", ")", "\n", "reshaped_img", "=", "m", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "cut_size", "=", "torch", ".", "randint", "(", "int", "(", "ratio", "*", "full_size", ")", ",", "full_size", ",", "(", ")", ")", "\n", "left", "=", "torch", ".", "randint", "(", "0", ",", "full_size", "-", "cut_size", ",", "(", ")", ")", "\n", "top", "=", "torch", ".", "randint", "(", "0", ",", "full_size", "-", "cut_size", ",", "(", ")", ")", "\n", "cropped_img", "=", "img", "[", ":", ",", ":", ",", "top", ":", "top", "+", "cut_size", ",", "left", ":", "left", "+", "cut_size", "]", "\n", "reshaped_img", "=", "F", ".", "interpolate", "(", "cropped_img", ",", "(", "224", ",", "224", ")", ",", "mode", "=", "mode", ",", "align_corners", "=", "False", ")", "\n", "", "return", "reshaped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.clip_preprocess": [[41, 44], ["torchvision.Compose", "torchvision.Normalize"], "function", ["None"], ["", "def", "clip_preprocess", "(", ")", ":", "\n", "    ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Normalize", "(", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error": [[47, 50], ["print", "sys.exit"], "function", ["None"], ["", "def", "error", "(", "msg", ")", ":", "\n", "    ", "print", "(", "'Error: '", "+", "msg", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.maybe_min": [[53, 57], ["min"], "function", ["None"], ["", "def", "maybe_min", "(", "a", ":", "int", ",", "b", ":", "Optional", "[", "int", "]", ")", "->", "int", ":", "\n", "    ", "if", "b", "is", "not", "None", ":", "\n", "        ", "return", "min", "(", "a", ",", "b", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.file_ext": [[60, 62], ["str().split", "str"], "function", ["None"], ["", "def", "file_ext", "(", "name", ":", "Union", "[", "str", ",", "Path", "]", ")", "->", "str", ":", "\n", "    ", "return", "str", "(", "name", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.is_image_ext": [[65, 68], ["file_ext().lower", "dataset_tool.file_ext"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.file_ext"], ["", "def", "is_image_ext", "(", "fname", ":", "Union", "[", "str", ",", "Path", "]", ")", "->", "bool", ":", "\n", "    ", "ext", "=", "file_ext", "(", "fname", ")", ".", "lower", "(", ")", "\n", "return", "f'.{ext}'", "in", "PIL", ".", "Image", ".", "EXTENSION", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_image_folder": [[71, 109], ["print", "os.path.join", "os.path.isfile", "dataset_tool.maybe_min", "str", "len", "enumerate", "dataset_tool.open_image_folder.iterate_images"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.maybe_min"], ["", "def", "open_image_folder", "(", "source_dir", ",", "*", ",", "max_images", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "input_images", "=", "[", "str", "(", "f", ")", "for", "f", "in", "sorted", "(", "Path", "(", "source_dir", ")", ".", "rglob", "(", "'*'", ")", ")", "if", "is_image_ext", "(", "f", ")", "and", "os", ".", "path", ".", "isfile", "(", "f", ")", "]", "\n", "print", "(", "f'image number {len(input_images)}'", ")", "\n", "# Load labels.", "\n", "labels", "=", "{", "}", "\n", "meta_fname", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "'dataset.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "meta_fname", ")", ":", "\n", "        ", "with", "open", "(", "meta_fname", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "labels", "=", "json", ".", "load", "(", "file", ")", "[", "'labels'", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                ", "labels", "=", "{", "x", "[", "0", "]", ":", "x", "[", "1", "]", "for", "x", "in", "labels", "}", "\n", "", "else", ":", "\n", "                ", "labels", "=", "{", "}", "\n", "\n", "", "", "", "max_idx", "=", "maybe_min", "(", "len", "(", "input_images", ")", ",", "max_images", ")", "\n", "\n", "def", "iterate_images", "(", ")", ":", "\n", "        ", "for", "idx", ",", "fname", "in", "enumerate", "(", "input_images", ")", ":", "\n", "            ", "arch_fname", "=", "os", ".", "path", ".", "relpath", "(", "fname", ",", "source_dir", ")", "\n", "arch_fname", "=", "arch_fname", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "try", ":", "\n", "                ", "img", "=", "np", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "fname", ")", ")", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "                    ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGRA2BGR", ")", "\n", "\n", "", "try", ":", "\n", "                    ", "with", "open", "(", "fname", "[", ":", "-", "4", "]", "+", "'.txt'", ",", "'r'", ")", "as", "file", ":", "\n", "                        ", "txt", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "", "except", ":", "\n", "                    ", "txt", "=", "''", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "f'{fname} failed'", ")", "\n", "\n", "", "yield", "dict", "(", "img", "=", "img", ",", "label", "=", "labels", ".", "get", "(", "arch_fname", ")", ",", "txt", "=", "txt", ")", "\n", "if", "idx", ">=", "max_idx", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "", "return", "max_idx", ",", "iterate_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_image_zip": [[112, 138], ["dataset_tool.maybe_min", "zipfile.ZipFile", "len", "dataset_tool.open_image_folder.iterate_images"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.maybe_min"], ["", "def", "open_image_zip", "(", "source", ",", "*", ",", "max_images", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "with", "zipfile", ".", "ZipFile", "(", "source", ",", "mode", "=", "'r'", ")", "as", "z", ":", "\n", "        ", "input_images", "=", "[", "str", "(", "f", ")", "for", "f", "in", "sorted", "(", "z", ".", "namelist", "(", ")", ")", "if", "is_image_ext", "(", "f", ")", "]", "\n", "\n", "# Load labels.", "\n", "labels", "=", "{", "}", "\n", "if", "'dataset.json'", "in", "z", ".", "namelist", "(", ")", ":", "\n", "            ", "with", "z", ".", "open", "(", "'dataset.json'", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "labels", "=", "json", ".", "load", "(", "file", ")", "[", "'labels'", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "labels", "=", "{", "x", "[", "0", "]", ":", "x", "[", "1", "]", "for", "x", "in", "labels", "}", "\n", "", "else", ":", "\n", "                    ", "labels", "=", "{", "}", "\n", "\n", "", "", "", "", "max_idx", "=", "maybe_min", "(", "len", "(", "input_images", ")", ",", "max_images", ")", "\n", "\n", "def", "iterate_images", "(", ")", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "source", ",", "mode", "=", "'r'", ")", "as", "z", ":", "\n", "            ", "for", "idx", ",", "fname", "in", "enumerate", "(", "input_images", ")", ":", "\n", "                ", "with", "z", ".", "open", "(", "fname", ",", "'r'", ")", "as", "file", ":", "\n", "                    ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "file", ")", "# type: ignore", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "", "yield", "dict", "(", "img", "=", "img", ",", "label", "=", "labels", ".", "get", "(", "fname", ")", ")", "\n", "if", "idx", ">=", "max_idx", "-", "1", ":", "\n", "                    ", "break", "\n", "", "", "", "", "return", "max_idx", ",", "iterate_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_lmdb": [[141, 166], ["lmdb.open().begin", "dataset_tool.maybe_min", "dataset_tool.open_image_folder.iterate_images"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.maybe_min"], ["", "def", "open_lmdb", "(", "lmdb_dir", ":", "str", ",", "*", ",", "max_images", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "import", "cv2", "# pip install opencv-python", "\n", "import", "lmdb", "# pip install lmdb # pylint: disable=import-error", "\n", "\n", "with", "lmdb", ".", "open", "(", "lmdb_dir", ",", "readonly", "=", "True", ",", "lock", "=", "False", ")", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "        ", "max_idx", "=", "maybe_min", "(", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", ",", "max_images", ")", "\n", "\n", "", "def", "iterate_images", "(", ")", ":", "\n", "        ", "with", "lmdb", ".", "open", "(", "lmdb_dir", ",", "readonly", "=", "True", ",", "lock", "=", "False", ")", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "for", "idx", ",", "(", "_key", ",", "value", ")", "in", "enumerate", "(", "txn", ".", "cursor", "(", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "try", ":", "\n", "                        ", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "frombuffer", "(", "value", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "1", ")", "\n", "if", "img", "is", "None", ":", "\n", "                            ", "raise", "IOError", "(", "'cv2.imdecode failed'", ")", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# BGR => RGB", "\n", "", "except", "IOError", ":", "\n", "                        ", "img", "=", "np", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "value", ")", ")", ")", "\n", "", "yield", "dict", "(", "img", "=", "img", ",", "label", "=", "None", ")", "\n", "if", "idx", ">=", "max_idx", "-", "1", ":", "\n", "                        ", "break", "\n", "", "", "except", ":", "\n", "                    ", "print", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", "\n", "\n", "", "", "", "", "return", "max_idx", ",", "iterate_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_cifar10": [[169, 198], ["numpy.concatenate", "numpy.concatenate", "images.transpose.transpose", "dataset_tool.maybe_min", "tarfile.open", "range", "len", "enumerate", "dataset_tool.open_image_folder.iterate_images"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.maybe_min"], ["", "def", "open_cifar10", "(", "tarball", ":", "str", ",", "*", ",", "max_images", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "with", "tarfile", ".", "open", "(", "tarball", ",", "'r:gz'", ")", "as", "tar", ":", "\n", "        ", "for", "batch", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "member", "=", "tar", ".", "getmember", "(", "f'cifar-10-batches-py/data_batch_{batch}'", ")", "\n", "with", "tar", ".", "extractfile", "(", "member", ")", "as", "file", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "labels", ".", "append", "(", "data", "[", "'labels'", "]", ")", "\n", "\n", "", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "images", "=", "images", ".", "transpose", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "# NCHW -> NHWC", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "32", ",", "32", ",", "3", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "\n", "max_idx", "=", "maybe_min", "(", "len", "(", "images", ")", ",", "max_images", ")", "\n", "\n", "def", "iterate_images", "(", ")", ":", "\n", "        ", "for", "idx", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "yield", "dict", "(", "img", "=", "img", ",", "label", "=", "int", "(", "labels", "[", "idx", "]", ")", ")", "\n", "if", "idx", ">=", "max_idx", "-", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "return", "max_idx", ",", "iterate_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_mnist": [[201, 228], ["images_gz.replace", "np.frombuffer.reshape", "numpy.pad", "dataset_tool.maybe_min", "gzip.open", "numpy.frombuffer", "gzip.open", "numpy.frombuffer", "len", "enumerate", "dataset_tool.open_image_folder.iterate_images"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.maybe_min"], ["", "def", "open_mnist", "(", "images_gz", ":", "str", ",", "*", ",", "max_images", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "labels_gz", "=", "images_gz", ".", "replace", "(", "'-images-idx3-ubyte.gz'", ",", "'-labels-idx1-ubyte.gz'", ")", "\n", "assert", "labels_gz", "!=", "images_gz", "\n", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "with", "gzip", ".", "open", "(", "images_gz", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "images", "=", "np", ".", "frombuffer", "(", "f", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "with", "gzip", ".", "open", "(", "labels_gz", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "labels", "=", "np", ".", "frombuffer", "(", "f", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "60000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "\n", "max_idx", "=", "maybe_min", "(", "len", "(", "images", ")", ",", "max_images", ")", "\n", "\n", "def", "iterate_images", "(", ")", ":", "\n", "        ", "for", "idx", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "yield", "dict", "(", "img", "=", "img", ",", "label", "=", "int", "(", "labels", "[", "idx", "]", ")", ")", "\n", "if", "idx", ">=", "max_idx", "-", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "return", "max_idx", ",", "iterate_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.make_transform": [[231, 284], ["PIL.Image.fromarray", "PIL.Image.fromarray.resize", "numpy.array", "numpy.min", "PIL.Image.fromarray.resize", "numpy.array", "int", "PIL.Image.fromarray", "PIL.Image.fromarray.resize", "numpy.array", "numpy.zeros", "functools.partial", "functools.partial", "functools.partial", "PIL.Image.fromarray", "numpy.round", "dataset_tool.error", "dataset_tool.error", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error"], ["", "def", "make_transform", "(", "\n", "transform", ":", "Optional", "[", "str", "]", ",", "\n", "output_width", ":", "Optional", "[", "int", "]", ",", "\n", "output_height", ":", "Optional", "[", "int", "]", ",", "\n", "resize_filter", ":", "str", "\n", ")", "->", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "Optional", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "    ", "resample", "=", "{", "'box'", ":", "PIL", ".", "Image", ".", "BOX", ",", "'lanczos'", ":", "PIL", ".", "Image", ".", "LANCZOS", "}", "[", "resize_filter", "]", "\n", "def", "scale", "(", "width", ",", "height", ",", "img", ")", ":", "\n", "        ", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "width", "==", "w", "and", "height", "==", "h", ":", "\n", "            ", "return", "img", "\n", "", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ")", "\n", "ww", "=", "width", "if", "width", "is", "not", "None", "else", "w", "\n", "hh", "=", "height", "if", "height", "is", "not", "None", "else", "h", "\n", "img", "=", "img", ".", "resize", "(", "(", "ww", ",", "hh", ")", ",", "resample", ")", "\n", "return", "np", ".", "array", "(", "img", ")", "\n", "\n", "", "def", "center_crop", "(", "width", ",", "height", ",", "img", ")", ":", "\n", "        ", "crop", "=", "np", ".", "min", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "img", "=", "img", "[", "(", "img", ".", "shape", "[", "0", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "0", "]", "+", "crop", ")", "//", "2", ",", "(", "img", ".", "shape", "[", "1", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "1", "]", "+", "crop", ")", "//", "2", "]", "\n", "try", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "", "except", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "width", ",", "height", ")", ",", "resample", ")", "\n", "return", "np", ".", "array", "(", "img", ")", "\n", "\n", "", "def", "center_crop_wide", "(", "width", ",", "height", ",", "img", ")", ":", "\n", "        ", "ch", "=", "int", "(", "np", ".", "round", "(", "width", "*", "img", ".", "shape", "[", "0", "]", "/", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "if", "img", ".", "shape", "[", "1", "]", "<", "width", "or", "ch", "<", "height", ":", "\n", "            ", "return", "None", "\n", "\n", "", "img", "=", "img", "[", "(", "img", ".", "shape", "[", "0", "]", "-", "ch", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "0", "]", "+", "ch", ")", "//", "2", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "width", ",", "height", ")", ",", "resample", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "canvas", "=", "np", ".", "zeros", "(", "[", "width", ",", "width", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "canvas", "[", "(", "width", "-", "height", ")", "//", "2", ":", "(", "width", "+", "height", ")", "//", "2", ",", ":", "]", "=", "img", "\n", "return", "canvas", "\n", "\n", "", "if", "transform", "is", "None", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "scale", ",", "output_width", ",", "output_height", ")", "\n", "", "if", "transform", "==", "'center-crop'", ":", "\n", "        ", "if", "(", "output_width", "is", "None", ")", "or", "(", "output_height", "is", "None", ")", ":", "\n", "            ", "error", "(", "'must specify --width and --height when using '", "+", "transform", "+", "'transform'", ")", "\n", "", "return", "functools", ".", "partial", "(", "center_crop", ",", "output_width", ",", "output_height", ")", "\n", "", "if", "transform", "==", "'center-crop-wide'", ":", "\n", "        ", "if", "(", "output_width", "is", "None", ")", "or", "(", "output_height", "is", "None", ")", ":", "\n", "            ", "error", "(", "'must specify --width and --height when using '", "+", "transform", "+", "' transform'", ")", "\n", "", "return", "functools", ".", "partial", "(", "center_crop_wide", ",", "output_width", ",", "output_height", ")", "\n", "", "assert", "False", ",", "'unknown transform'", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_dataset": [[287, 304], ["os.path.isdir", "source.rstrip().endswith", "os.path.isfile", "dataset_tool.open_lmdb", "dataset_tool.open_image_folder", "dataset_tool.error", "source.rstrip", "os.path.basename", "dataset_tool.open_cifar10", "os.path.basename", "dataset_tool.open_mnist", "dataset_tool.file_ext", "dataset_tool.open_image_zip"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_lmdb", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_image_folder", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_cifar10", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_mnist", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.file_ext", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_image_zip"], ["", "def", "open_dataset", "(", "source", ",", "*", ",", "max_images", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "source", ")", ":", "\n", "        ", "if", "source", ".", "rstrip", "(", "'/'", ")", ".", "endswith", "(", "'_lmdb'", ")", ":", "\n", "            ", "return", "open_lmdb", "(", "source", ",", "max_images", "=", "max_images", ")", "\n", "", "else", ":", "\n", "            ", "return", "open_image_folder", "(", "source", ",", "max_images", "=", "max_images", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "source", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "basename", "(", "source", ")", "==", "'cifar-10-python.tar.gz'", ":", "\n", "            ", "return", "open_cifar10", "(", "source", ",", "max_images", "=", "max_images", ")", "\n", "", "elif", "os", ".", "path", ".", "basename", "(", "source", ")", "==", "'train-images-idx3-ubyte.gz'", ":", "\n", "            ", "return", "open_mnist", "(", "source", ",", "max_images", "=", "max_images", ")", "\n", "", "elif", "file_ext", "(", "source", ")", "==", "'zip'", ":", "\n", "            ", "return", "open_image_zip", "(", "source", ",", "max_images", "=", "max_images", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'unknown archive type'", "\n", "", "", "else", ":", "\n", "        ", "error", "(", "f'Missing input file or directory: {source}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_dest": [[307, 336], ["dataset_tool.file_ext", "zipfile.ZipFile", "os.makedirs", "os.path.dirname", "os.makedirs", "zipfile.ZipFile.writestr", "os.path.isdir", "dataset_tool.error", "os.makedirs", "os.path.dirname", "len", "os.path.dirname", "open", "isinstance", "fout.write", "os.listdir", "data.encode.encode"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.file_ext", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write"], ["", "", "def", "open_dest", "(", "dest", ":", "str", ")", "->", "Tuple", "[", "str", ",", "Callable", "[", "[", "str", ",", "Union", "[", "bytes", ",", "str", "]", "]", ",", "None", "]", ",", "Callable", "[", "[", "]", ",", "None", "]", "]", ":", "\n", "    ", "dest_ext", "=", "file_ext", "(", "dest", ")", "\n", "\n", "if", "dest_ext", "==", "'zip'", ":", "\n", "        ", "if", "os", ".", "path", ".", "dirname", "(", "dest", ")", "!=", "''", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "dest", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "zf", "=", "zipfile", ".", "ZipFile", "(", "file", "=", "dest", ",", "mode", "=", "'w'", ",", "compression", "=", "zipfile", ".", "ZIP_STORED", ")", "\n", "def", "zip_write_bytes", "(", "fname", ":", "str", ",", "data", ":", "Union", "[", "bytes", ",", "str", "]", ")", ":", "\n", "            ", "zf", ".", "writestr", "(", "fname", ",", "data", ")", "\n", "", "return", "''", ",", "zip_write_bytes", ",", "zf", ".", "close", "\n", "", "else", ":", "\n", "# If the output folder already exists, check that is is", "\n", "# empty.", "\n", "#", "\n", "# Note: creating the output directory is not strictly", "\n", "# necessary as folder_write_bytes() also mkdirs, but it's better", "\n", "# to give an error message earlier in case the dest folder", "\n", "# somehow cannot be created.", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "dest", ")", "and", "len", "(", "os", ".", "listdir", "(", "dest", ")", ")", "!=", "0", ":", "\n", "            ", "error", "(", "'--dest folder must be empty'", ")", "\n", "", "os", ".", "makedirs", "(", "dest", ",", "exist_ok", "=", "True", ")", "\n", "\n", "def", "folder_write_bytes", "(", "fname", ":", "str", ",", "data", ":", "Union", "[", "bytes", ",", "str", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "fout", ":", "\n", "                ", "if", "isinstance", "(", "data", ",", "str", ")", ":", "\n", "                    ", "data", "=", "data", ".", "encode", "(", "'utf8'", ")", "\n", "", "fout", ".", "write", "(", "data", ")", "\n", "", "", "return", "dest", ",", "folder_write_bytes", ",", "lambda", ":", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.convert_dataset": [[340, 533], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "PIL.Image.init", "clip.load", "clip_model.cuda().eval", "print", "dataset_tool.open_dataset", "print", "dataset_tool.open_dest", "print", "dataset_tool.make_transform", "tqdm.tqdm", "save_bytes", "print", "close_dest", "ctx.fail", "enumerate", "os.path.join", "json.dumps", "click.Choice", "click.Choice", "clip_model.cuda", "make_transform.", "io.BytesIO", "PIL.Image.fromarray.save", "save_bytes", "labels.append", "all", "all", "all", "os.path.join", "io.BytesIO.getbuffer", "print", "dataset_tool.error", "dataset_tool.error", "dataset_tool.error", "torch.no_grad", "torch.no_grad", "PIL.Image.fromarray", "torch.zeros().cuda", "torch.zeros().cuda", "range", "print", "clip_img_features.append", "clip_txt_features.append", "int", "dataset_tool.custom_reshape", "len", "numpy.floor", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "clip_model.encode_image", "torch.zeros().cuda.view().cpu().numpy().tolist", "numpy.log2", "text_line.isspace", "clip.tokenize().cuda", "clip_model.encode_text", "text_feature_list.append", "dataset_tool.clip_preprocess", "clip_model.encode_text.view().cpu().numpy().tolist", "text_line.split", "text_feature_list.append", "print", "torch.zeros().cuda.view().cpu().numpy", "torchvision.ToTensor", "clip.tokenize", "clip.tokenize().cuda.append", "clip_model.encode_text.view().cpu().numpy().tolist", "clip_model.encode_text.view().cpu().numpy", "te.split", "clip.tokenize().cuda", "clip_model.encode_text", "len", "torch.zeros().cuda.view().cpu", "te.isspace", "clip_model.encode_text.view().cpu().numpy", "clip_model.encode_text.view().cpu", "clip.tokenize", "torch.zeros().cuda.view", "clip_model.encode_text.view().cpu", "clip_model.encode_text.view", "clip_model.encode_text.view"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_dataset", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.open_dest", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.make_transform", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.save", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.error", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.custom_reshape", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.None.dataset_tool.clip_preprocess", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "pass_context", "\n", "@", "click", ".", "option", "(", "'--source'", ",", "help", "=", "'Directory or archive name for input dataset'", ",", "required", "=", "True", ",", "metavar", "=", "'PATH'", ")", "\n", "@", "click", ".", "option", "(", "'--dest'", ",", "help", "=", "'Output directory or archive name for output dataset'", ",", "required", "=", "True", ",", "metavar", "=", "'PATH'", ")", "\n", "@", "click", ".", "option", "(", "'--max-images'", ",", "help", "=", "'Output only up to `max-images` images'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "@", "click", ".", "option", "(", "'--resize-filter'", ",", "help", "=", "'Filter to use when resizing images for output resolution'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'box'", ",", "'lanczos'", "]", ")", ",", "default", "=", "'lanczos'", ",", "show_default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--transform'", ",", "help", "=", "'Input crop/resize mode'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'center-crop'", ",", "'center-crop-wide'", "]", ")", ")", "\n", "@", "click", ".", "option", "(", "'--width'", ",", "help", "=", "'Output width'", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "'--height'", ",", "help", "=", "'Output height'", ",", "type", "=", "int", ")", "\n", "def", "convert_dataset", "(", "\n", "ctx", ":", "click", ".", "Context", ",", "\n", "source", ":", "str", ",", "\n", "dest", ":", "str", ",", "\n", "max_images", ":", "Optional", "[", "int", "]", ",", "\n", "transform", ":", "Optional", "[", "str", "]", ",", "\n", "resize_filter", ":", "str", ",", "\n", "width", ":", "Optional", "[", "int", "]", ",", "\n", "height", ":", "Optional", "[", "int", "]", "\n", ")", ":", "\n", "    ", "\"\"\"Convert an image dataset into a dataset archive usable with StyleGAN2 ADA PyTorch.\n\n    The input dataset format is guessed from the --source argument:\n\n    \\b\n    --source *_lmdb/                    Load LSUN dataset\n    --source cifar-10-python.tar.gz     Load CIFAR-10 dataset\n    --source train-images-idx3-ubyte.gz Load MNIST dataset\n    --source path/                      Recursively load all images from path/\n    --source dataset.zip                Recursively load all images from dataset.zip\n\n    Specifying the output format and path:\n\n    \\b\n    --dest /path/to/dir                 Save output files under /path/to/dir\n    --dest /path/to/dataset.zip         Save output files into /path/to/dataset.zip\n\n    The output dataset format can be either an image folder or an uncompressed zip archive.\n    Zip archives makes it easier to move datasets around file servers and clusters, and may\n    offer better training performance on network file systems.\n\n    Images within the dataset archive will be stored as uncompressed PNG.\n    Uncompresed PNGs can be efficiently decoded in the training loop.\n\n    Class labels are stored in a file called 'dataset.json' that is stored at the\n    dataset root folder.  This file has the following structure:\n\n    \\b\n    {\n        \"labels\": [\n            [\"00000/img00000000.png\",6],\n            [\"00000/img00000001.png\",9],\n            ... repeated for every image in the datase\n            [\"00049/img00049999.png\",1]\n        ]\n    }\n\n    If the 'dataset.json' file cannot be found, the dataset is interpreted as\n    not containing class labels.\n\n    Image scale/crop and resolution requirements:\n\n    Output images must be square-shaped and they must all have the same power-of-two\n    dimensions.\n\n    To scale arbitrary input image size to a specific width and height, use the\n    --width and --height options.  Output resolution will be either the original\n    input resolution (if --width/--height was not specified) or the one specified with\n    --width/height.\n\n    Use the --transform=center-crop or --transform=center-crop-wide options to apply a\n    center crop transform on the input image.  These options should be used with the\n    --width and --height options.  For example:\n\n    \\b\n    python dataset_tool.py --source LSUN/raw/cat_lmdb --dest /tmp/lsun_cat \\\\\n        --transform=center-crop-wide --width 512 --height=384\n    \"\"\"", "\n", "\n", "PIL", ".", "Image", ".", "init", "(", ")", "# type: ignore", "\n", "clip_model", ",", "_", "=", "clip", ".", "load", "(", "\"ViT-B/32\"", ")", "# Load CLIP model here", "\n", "clip_model", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "print", "(", "'start'", ")", "\n", "if", "dest", "==", "''", ":", "\n", "        ", "ctx", ".", "fail", "(", "'--dest output filename or directory must not be an empty string'", ")", "\n", "", "num_files", ",", "input_iter", "=", "open_dataset", "(", "source", ",", "max_images", "=", "max_images", ")", "\n", "print", "(", "'source ready'", ")", "\n", "archive_root_dir", ",", "save_bytes", ",", "close_dest", "=", "open_dest", "(", "dest", ")", "\n", "print", "(", "'target ready'", ")", "\n", "\n", "\n", "transform_image", "=", "make_transform", "(", "transform", ",", "width", ",", "height", ",", "resize_filter", ")", "\n", "\n", "dataset_attrs", "=", "None", "\n", "\n", "labels", "=", "[", "]", "\n", "clip_img_features", "=", "[", "]", "\n", "clip_txt_features", "=", "[", "]", "\n", "s_count", "=", "0", "\n", "f_count", "=", "0", "\n", "for", "idx", ",", "image", "in", "tqdm", "(", "enumerate", "(", "input_iter", ")", ",", "total", "=", "num_files", ")", ":", "\n", "        ", "idx_str", "=", "f'{idx:08d}'", "\n", "archive_fname", "=", "f'{idx_str[:5]}/img{idx_str}.png'", "\n", "try", ":", "\n", "# Apply crop and resize.", "\n", "            ", "img", "=", "transform_image", "(", "image", "[", "'img'", "]", ")", "\n", "\n", "# Transform may drop images.", "\n", "if", "img", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "# Error check to require uniform image attributes across", "\n", "# the whole dataset.", "\n", "", "channels", "=", "img", ".", "shape", "[", "2", "]", "if", "img", ".", "ndim", "==", "3", "else", "1", "\n", "cur_image_attrs", "=", "{", "\n", "'width'", ":", "img", ".", "shape", "[", "1", "]", ",", "\n", "'height'", ":", "img", ".", "shape", "[", "0", "]", ",", "\n", "'channels'", ":", "channels", "\n", "}", "\n", "if", "dataset_attrs", "is", "None", ":", "\n", "                ", "dataset_attrs", "=", "cur_image_attrs", "\n", "width", "=", "dataset_attrs", "[", "'width'", "]", "\n", "height", "=", "dataset_attrs", "[", "'height'", "]", "\n", "if", "width", "!=", "height", ":", "\n", "                    ", "error", "(", "f'Image dimensions after scale and crop are required to be square.  Got {width}x{height}'", ")", "\n", "", "if", "dataset_attrs", "[", "'channels'", "]", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "                    ", "error", "(", "'Input images must be stored as RGB or grayscale'", ")", "\n", "", "if", "width", "!=", "2", "**", "int", "(", "np", ".", "floor", "(", "np", ".", "log2", "(", "width", ")", ")", ")", ":", "\n", "                    ", "error", "(", "'Image width/height after scale and crop are required to be power-of-two'", ")", "\n", "", "", "if", "dataset_attrs", "==", "cur_image_attrs", ":", "\n", "#         elif dataset_attrs != cur_image_attrs:", "\n", "#             err = [f'  dataset {k}/cur image {k}: {dataset_attrs[k]}/{cur_image_attrs[k]}' for k in dataset_attrs.keys()]", "\n", "#             error(f'Image {archive_fname} attributes must be equal across all images of the dataset.  Got:\\n' + '\\n'.join(err))", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Save the image as an uncompressed PNG.", "\n", "                    ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "{", "1", ":", "'L'", ",", "3", ":", "'RGB'", "}", "[", "channels", "]", ")", "\n", "feature", "=", "torch", ".", "zeros", "(", "1", ",", "512", ")", ".", "cuda", "(", ")", "\n", "\n", "cut_num_", "=", "1", "\n", "for", "_", "in", "range", "(", "cut_num_", ")", ":", "# random crop and resize to get the average feature of image", "\n", "                        ", "reshaped_img", "=", "custom_reshape", "(", "T", ".", "ToTensor", "(", ")", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "normed_img", "=", "clip_preprocess", "(", ")", "(", "reshaped_img", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "feature", "+=", "clip_model", ".", "encode_image", "(", "normed_img", ")", "\n", "", "", "feature", "=", "feature", "/", "cut_num_", "\n", "\n", "\n", "text", "=", "image", "[", "'txt'", "]", "\n", "print", "(", "len", "(", "text", ")", ")", "\n", "\n", "text_feature_list", "=", "[", "]", "\n", "for", "text_line", "in", "text", ":", "\n", "                        ", "if", "text_line", "!=", "''", "and", "not", "text_line", ".", "isspace", "(", ")", ":", "\n", "                            ", "try", ":", "\n", "                                ", "tokenized_text", "=", "clip", ".", "tokenize", "(", "[", "text_line", "]", ")", ".", "cuda", "(", ")", "\n", "text_feature", "=", "clip_model", ".", "encode_text", "(", "tokenized_text", ")", "\n", "text_feature_list", ".", "append", "(", "text_feature", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "except", ":", "\n", "# if the text is too long, we heuristically split and average the features", "\n", "                                ", "split_text", "=", "text_line", ".", "split", "(", "'.'", ")", "\n", "split_text_list", "=", "[", "]", "\n", "for", "te", "in", "split_text", ":", "\n", "                                    ", "if", "te", "!=", "'.'", "and", "te", "!=", "''", "and", "not", "te", ".", "isspace", "(", ")", ":", "\n", "                                        ", "split_text_list", "+=", "te", ".", "split", "(", "','", ")", "\n", "", "", "tokenized_text", "=", "[", "]", "\n", "for", "te", "in", "split_text_list", ":", "\n", "                                    ", "tokenized_text", ".", "append", "(", "clip", ".", "tokenize", "(", "[", "te", "]", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "text_feature", "=", "0.", "\n", "for", "te", "in", "tokenized_text", ":", "\n", "                                    ", "text_feature", "+=", "clip_model", ".", "encode_text", "(", "te", ")", "/", "len", "(", "tokenized_text", ")", "\n", "", "text_feature_list", ".", "append", "(", "text_feature", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "print", "(", "'text too long'", ")", "\n", "\n", "", "", "", "clip_img_features", ".", "append", "(", "[", "archive_fname", ",", "feature", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "]", ")", "\n", "clip_txt_features", ".", "append", "(", "[", "archive_fname", ",", "text_feature_list", "]", ")", "\n", "\n", "", "", "image_bits", "=", "io", ".", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "image_bits", ",", "format", "=", "'png'", ",", "compress_level", "=", "0", ",", "optimize", "=", "False", ")", "\n", "save_bytes", "(", "os", ".", "path", ".", "join", "(", "archive_root_dir", ",", "archive_fname", ")", ",", "image_bits", ".", "getbuffer", "(", ")", ")", "\n", "labels", ".", "append", "(", "[", "archive_fname", ",", "image", "[", "'label'", "]", "]", "if", "image", "[", "'label'", "]", "is", "not", "None", "else", "None", ")", "\n", "s_count", "+=", "1", "\n", "", "except", ":", "\n", "            ", "print", "(", "f'{archive_fname} failed'", ")", "\n", "f_count", "+=", "1", "\n", "", "", "metadata", "=", "{", "\n", "'labels'", ":", "labels", "if", "all", "(", "x", "is", "not", "None", "for", "x", "in", "labels", ")", "else", "None", ",", "\n", "'clip_img_features'", ":", "clip_img_features", "if", "all", "(", "x", "is", "not", "None", "for", "x", "in", "clip_img_features", ")", "else", "None", ",", "\n", "'clip_txt_features'", ":", "clip_txt_features", "if", "all", "(", "x", "is", "not", "None", "for", "x", "in", "clip_txt_features", ")", "else", "None", ",", "\n", "\n", "}", "\n", "save_bytes", "(", "os", ".", "path", ".", "join", "(", "archive_root_dir", ",", "'dataset.json'", ")", ",", "json", ".", "dumps", "(", "metadata", ")", ")", "\n", "print", "(", "f'{s_count} {f_count}'", ")", "\n", "close_dest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.train.CommaSeparatedList.convert": [[467, 472], ["value.split", "value.lower"], "methods", ["None"], ["def", "convert", "(", "self", ",", "value", ",", "param", ",", "ctx", ")", ":", "\n", "        ", "_", "=", "param", ",", "ctx", "\n", "if", "value", "is", "None", "or", "value", ".", "lower", "(", ")", "==", "'none'", "or", "value", "==", "''", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "value", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.train.setup_training_loop_kwargs": [[22, 437], ["dnnlib.EasyDict", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "print", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "isinstance", "isinstance", "isinstance", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "int", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "isinstance", "isinstance", "isinstance", "isinstance", "train.UserError", "train.UserError", "all", "train.UserError", "dnnlib.util.construct_class_by_name", "len", "isinstance", "dict", "min", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dnnlib.EasyDict", "isinstance", "isinstance", "isinstance", "train.UserError", "train.UserError", "train.UserError", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "train.UserError", "metrics.metric_main.is_valid_metric", "train.UserError", "metrics.metric_main.list_valid_metrics", "train.UserError"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.is_valid_metric", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.list_valid_metrics"], ["", "def", "setup_training_loop_kwargs", "(", "\n", "f_dim", "=", "None", ",", "\n", "d_use_norm", "=", "None", ",", "# normalize the feature extracted by discriminator or not", "\n", "d_use_fts", "=", "None", ",", "# discriminator extract semantic feature or not", "\n", "mixing_prob", "=", "None", ",", "# mixing probability of ground-truth and language-free generated pairs, mixing_prob=0 means only use ground-truth, mixing_prob=1. means using only pseudo pairs(language-free)", "\n", "lam", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "temp", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "change", "=", "None", ",", "# hyper-parameter for architecture", "\n", "map_num", "=", "None", ",", "# hyper-parameter for architecture", "\n", "gather", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "itd", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "itc", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "iid", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "iic", "=", "None", ",", "# hyper-parameter for contrastive loss", "\n", "metric_only_test", "=", "None", ",", "# hyper-parameter for computing metrics", "\n", "fmap", "=", "None", ",", "# hyper-parameter for architecture, related to channel number", "\n", "ratio", "=", "None", ",", "\n", "# General options (not included in desc).", "\n", "gpus", "=", "None", ",", "# Number of GPUs: <int>, default = 1 gpu", "\n", "snap", "=", "None", ",", "# Snapshot interval: <int>, default = 50 ticks", "\n", "metrics", "=", "None", ",", "# List of metric names: [], ['fid50k_full'] (default), ...", "\n", "seed", "=", "None", ",", "# Random seed: <int>, default = 0", "\n", "# Dataset.", "\n", "data", "=", "None", ",", "# Training dataset (required): <path>", "\n", "test_data", "=", "None", ",", "# Testing dataset for metrics, if not use training dataset", "\n", "cond", "=", "None", ",", "# Train conditional model based on dataset labels: <bool>, default = False", "\n", "subset", "=", "None", ",", "# Train with only N images: <int>, default = all", "\n", "mirror", "=", "None", ",", "# Augment dataset with x-flips: <bool>, default = False", "\n", "\n", "# Base config.", "\n", "cfg", "=", "None", ",", "# Base config: 'auto' (default), 'stylegan2', 'paper256', 'paper512', 'paper1024', 'cifar'", "\n", "gamma", "=", "None", ",", "# Override R1 gamma: <float>", "\n", "kimg", "=", "None", ",", "# Override training duration: <int>", "\n", "batch", "=", "None", ",", "# Override batch size: <int>", "\n", "\n", "# Discriminator augmentation.", "\n", "aug", "=", "None", ",", "# Augmentation mode: 'ada' (default), 'noaug', 'fixed'", "\n", "p", "=", "None", ",", "# Specify p for 'fixed' (required): <float>", "\n", "target", "=", "None", ",", "# Override ADA target for 'ada': <float>, default = depends on aug", "\n", "augpipe", "=", "None", ",", "# Augmentation pipeline: 'blit', 'geom', 'color', 'filter', 'noise', 'cutout', 'bg', 'bgc' (default), ..., 'bgcfnc'", "\n", "\n", "# Transfer learning.", "\n", "resume", "=", "None", ",", "# Load previous network: 'noresume' (default), 'ffhq256', 'ffhq512', 'ffhq1024', 'celebahq256', 'lsundog256', <file>, <url>", "\n", "freezed", "=", "None", ",", "# Freeze-D: <int>, default = 0 discriminator layers", "\n", "\n", "# Performance options (not included in desc).", "\n", "fp32", "=", "None", ",", "# Disable mixed-precision training: <bool>, default = False", "\n", "nhwc", "=", "None", ",", "# Use NHWC memory format with FP16: <bool>, default = False", "\n", "allow_tf32", "=", "None", ",", "# Allow PyTorch to use TF32 for matmul and convolutions: <bool>, default = False", "\n", "nobench", "=", "None", ",", "# Disable cuDNN benchmarking: <bool>, default = False", "\n", "workers", "=", "None", ",", "# Override number of DataLoader workers: <int>, default = 3", "\n", ")", ":", "\n", "    ", "args", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "\n", "# ------------------------------------------", "\n", "# General options: gpus, snap, metrics, seed", "\n", "# ------------------------------------------", "\n", "if", "f_dim", "is", "None", ":", "\n", "        ", "f_dim", "=", "512", "\n", "", "assert", "isinstance", "(", "f_dim", ",", "int", ")", "\n", "args", ".", "f_dim", "=", "f_dim", "\n", "\n", "if", "ratio", "is", "None", ":", "\n", "        ", "ratio", "=", "1.0", "\n", "", "args", ".", "ratio", "=", "ratio", "\n", "\n", "if", "mixing_prob", "is", "None", ":", "\n", "        ", "mixing_prob", "=", "0.", "\n", "", "args", ".", "mixing_prob", "=", "mixing_prob", "\n", "\n", "if", "fmap", "is", "None", ":", "\n", "        ", "fmap", "=", "1.", "\n", "\n", "", "if", "metric_only_test", "is", "None", ":", "\n", "        ", "metric_only_test", "=", "False", "\n", "", "args", ".", "metric_only_test", "=", "metric_only_test", "\n", "\n", "if", "map_num", "is", "None", ":", "\n", "        ", "map_num", "=", "8", "\n", "\n", "", "if", "lam", "is", "None", ":", "\n", "        ", "lam", "=", "0.", "\n", "", "args", ".", "lam", "=", "lam", "\n", "\n", "if", "temp", "is", "None", ":", "\n", "        ", "temp", "=", "0.5", "\n", "", "args", ".", "temp", "=", "temp", "\n", "\n", "if", "itd", "is", "None", ":", "\n", "        ", "itd", "=", "10.", "\n", "", "args", ".", "itd", "=", "itd", "\n", "if", "itc", "is", "None", ":", "\n", "        ", "itc", "=", "10.", "\n", "", "args", ".", "itc", "=", "itc", "\n", "\n", "if", "iid", "is", "None", ":", "\n", "        ", "iid", "=", "0.", "\n", "", "args", ".", "iid", "=", "iid", "\n", "if", "iic", "is", "None", ":", "\n", "        ", "iic", "=", "0.", "\n", "", "args", ".", "iic", "=", "iic", "\n", "\n", "\n", "\n", "if", "change", "is", "None", ":", "\n", "        ", "change", "=", "256", "\n", "\n", "", "if", "d_use_norm", "is", "None", ":", "\n", "        ", "d_use_norm", "=", "False", "\n", "", "assert", "isinstance", "(", "d_use_norm", ",", "bool", ")", "\n", "args", ".", "d_use_norm", "=", "d_use_norm", "\n", "\n", "if", "d_use_fts", "is", "None", ":", "\n", "        ", "d_use_fts", "=", "True", "\n", "", "args", ".", "d_use_fts", "=", "d_use_fts", "\n", "\n", "if", "gather", "is", "None", ":", "\n", "        ", "gather", "=", "False", "\n", "", "args", ".", "gather", "=", "gather", "\n", "\n", "if", "gpus", "is", "None", ":", "\n", "        ", "gpus", "=", "1", "\n", "", "assert", "isinstance", "(", "gpus", ",", "int", ")", "\n", "if", "not", "(", "gpus", ">=", "1", "and", "gpus", "&", "(", "gpus", "-", "1", ")", "==", "0", ")", ":", "\n", "        ", "raise", "UserError", "(", "'--gpus must be a power of two'", ")", "\n", "", "args", ".", "num_gpus", "=", "gpus", "\n", "\n", "if", "snap", "is", "None", ":", "\n", "        ", "snap", "=", "50", "\n", "", "assert", "isinstance", "(", "snap", ",", "int", ")", "\n", "if", "snap", "<", "1", ":", "\n", "        ", "raise", "UserError", "(", "'--snap must be at least 1'", ")", "\n", "", "args", ".", "image_snapshot_ticks", "=", "snap", "\n", "args", ".", "network_snapshot_ticks", "=", "snap", "\n", "\n", "if", "metrics", "is", "None", ":", "\n", "        ", "metrics", "=", "[", "'fid50k_full'", "]", "\n", "", "assert", "isinstance", "(", "metrics", ",", "list", ")", "\n", "if", "not", "all", "(", "metric_main", ".", "is_valid_metric", "(", "metric", ")", "for", "metric", "in", "metrics", ")", ":", "\n", "        ", "raise", "UserError", "(", "'\\n'", ".", "join", "(", "[", "'--metrics can only contain the following values:'", "]", "+", "metric_main", ".", "list_valid_metrics", "(", ")", ")", ")", "\n", "", "args", ".", "metrics", "=", "metrics", "\n", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "0", "\n", "", "assert", "isinstance", "(", "seed", ",", "int", ")", "\n", "args", ".", "random_seed", "=", "seed", "\n", "\n", "# -----------------------------------", "\n", "# Dataset: data, cond, subset, mirror", "\n", "# -----------------------------------", "\n", "\n", "assert", "data", "is", "not", "None", "\n", "assert", "isinstance", "(", "data", ",", "str", ")", "\n", "print", "(", "'using data: '", ",", "data", ",", "'testing data: '", ",", "test_data", ")", "\n", "if", "test_data", "is", "None", ":", "\n", "        ", "test_data", "=", "data", "\n", "", "args", ".", "training_set_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.dataset.ImageFolderDataset'", ",", "path", "=", "data", ",", "use_labels", "=", "True", ",", "max_size", "=", "None", ",", "xflip", "=", "False", ",", "use_clip", "=", "True", ",", "ratio", "=", "args", ".", "ratio", ")", "\n", "args", ".", "testing_set_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.dataset.ImageFolderDataset'", ",", "path", "=", "test_data", ",", "use_labels", "=", "True", ",", "max_size", "=", "None", ",", "xflip", "=", "False", ",", "use_clip", "=", "True", ",", "ratio", "=", "1.0", ")", "\n", "args", ".", "data_loader_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "pin_memory", "=", "False", ",", "num_workers", "=", "1", ",", "prefetch_factor", "=", "2", ")", "\n", "try", ":", "\n", "        ", "training_set", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "args", ".", "training_set_kwargs", ")", "# subclass of training.dataset.Dataset", "\n", "args", ".", "training_set_kwargs", ".", "resolution", "=", "training_set", ".", "resolution", "# be explicit about resolution", "\n", "args", ".", "training_set_kwargs", ".", "use_labels", "=", "training_set", ".", "has_labels", "# be explicit about labels", "\n", "args", ".", "training_set_kwargs", ".", "max_size", "=", "len", "(", "training_set", ")", "# be explicit about dataset size", "\n", "desc", "=", "training_set", ".", "name", "\n", "args", ".", "testing_set_kwargs", ".", "resolution", "=", "training_set", ".", "resolution", "# be explicit about resolution", "\n", "args", ".", "testing_set_kwargs", ".", "use_labels", "=", "training_set", ".", "has_labels", "# be explicit about labels", "\n", "del", "training_set", "# conserve memory", "\n", "\n", "", "except", "IOError", "as", "err", ":", "\n", "        ", "raise", "UserError", "(", "f'--data: {err}'", ")", "\n", "\n", "", "if", "cond", "is", "None", ":", "\n", "        ", "cond", "=", "False", "\n", "", "assert", "isinstance", "(", "cond", ",", "bool", ")", "\n", "if", "cond", ":", "\n", "        ", "if", "not", "args", ".", "training_set_kwargs", ".", "use_labels", ":", "\n", "            ", "raise", "UserError", "(", "'--cond=True requires labels specified in dataset.json'", ")", "\n", "", "desc", "+=", "'-cond'", "\n", "", "else", ":", "\n", "        ", "args", ".", "training_set_kwargs", ".", "use_labels", "=", "False", "\n", "args", ".", "testing_set_kwargs", ".", "use_labels", "=", "False", "\n", "\n", "", "if", "subset", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "subset", ",", "int", ")", "\n", "if", "not", "1", "<=", "subset", "<=", "args", ".", "training_set_kwargs", ".", "max_size", ":", "\n", "            ", "raise", "UserError", "(", "f'--subset must be between 1 and {args.training_set_kwargs.max_size}'", ")", "\n", "", "desc", "+=", "f'-subset{subset}'", "\n", "if", "subset", "<", "args", ".", "training_set_kwargs", ".", "max_size", ":", "\n", "            ", "args", ".", "training_set_kwargs", ".", "max_size", "=", "subset", "\n", "args", ".", "training_set_kwargs", ".", "random_seed", "=", "args", ".", "random_seed", "\n", "\n", "", "", "if", "mirror", "is", "None", ":", "\n", "        ", "mirror", "=", "False", "\n", "", "assert", "isinstance", "(", "mirror", ",", "bool", ")", "\n", "if", "mirror", ":", "\n", "        ", "desc", "+=", "'-mirror'", "\n", "args", ".", "training_set_kwargs", ".", "xflip", "=", "True", "\n", "args", ".", "testing_set_kwargs", ".", "xflip", "=", "True", "\n", "\n", "# ------------------------------------", "\n", "# Base config: cfg, gamma, kimg, batch", "\n", "# ------------------------------------", "\n", "\n", "", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg", "=", "'auto'", "\n", "", "assert", "isinstance", "(", "cfg", ",", "str", ")", "\n", "desc", "+=", "f'-{cfg}-lam{lam:g}-temp{temp:g}-map_num{map_num:g}'", "\n", "\n", "cfg_specs", "=", "{", "\n", "'auto'", ":", "dict", "(", "ref_gpus", "=", "-", "1", ",", "kimg", "=", "25000", ",", "mb", "=", "-", "1", ",", "mbstd", "=", "-", "1", ",", "fmaps", "=", "-", "1", ",", "lrate", "=", "-", "1", ",", "gamma", "=", "1.", ",", "ema", "=", "-", "1", ",", "ramp", "=", "0.05", ",", "map", "=", "map_num", ")", ",", "# Populated dynamically based on resolution and GPU count.", "\n", "}", "\n", "\n", "assert", "cfg", "in", "cfg_specs", "\n", "spec", "=", "dnnlib", ".", "EasyDict", "(", "cfg_specs", "[", "cfg", "]", ")", "\n", "if", "cfg", "==", "'auto'", ":", "\n", "        ", "desc", "+=", "f'-gpus{gpus:d}'", "\n", "spec", ".", "ref_gpus", "=", "gpus", "\n", "res", "=", "args", ".", "training_set_kwargs", ".", "resolution", "\n", "spec", ".", "mb", "=", "16", "*", "gpus", "#max(min(gpus * min(4096 // res, 32), 64), gpus) # keep gpu memory consumption at bay", "\n", "spec", ".", "mbstd", "=", "min", "(", "spec", ".", "mb", "//", "gpus", ",", "4", ")", "# other hyperparams behave more predictably if mbstd group size remains fixed", "\n", "spec", ".", "fmaps", "=", "1", "if", "res", ">=", "512", "else", "fmap", "\n", "spec", ".", "lrate", "=", "0.002", "if", "res", ">=", "1024", "else", "0.0025", "\n", "spec", ".", "gamma", "=", "0.0002", "*", "(", "res", "**", "2", ")", "/", "spec", ".", "mb", "# heuristic formula", "\n", "spec", ".", "ema", "=", "spec", ".", "mb", "*", "10", "/", "32", "\n", "\n", "#     args.M_kwargs = dnnlib.EasyDict(class_name='training.networks.ManiNetwork', z_dim=args.f_dim,  layer_features=args.f_dim, w_dim=512, num_layers=8)", "\n", "", "args", ".", "G_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.networks.Generator'", ",", "z_dim", "=", "512", ",", "w_dim", "=", "512", ",", "m_layer_features", "=", "args", ".", "f_dim", ",", "m_num_layers", "=", "8", ",", "mapping_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", ",", "synthesis_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", ")", "\n", "args", ".", "D_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.networks.Discriminator'", ",", "use_norm", "=", "args", ".", "d_use_norm", ",", "use_fts", "=", "args", ".", "d_use_fts", ",", "block_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", ",", "mapping_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", ",", "epilogue_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", ")", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "channel_base", "=", "args", ".", "D_kwargs", ".", "channel_base", "=", "int", "(", "spec", ".", "fmaps", "*", "32768", ")", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "channel_max", "=", "args", ".", "D_kwargs", ".", "channel_max", "=", "512", "\n", "args", ".", "G_kwargs", ".", "mapping_kwargs", ".", "num_layers", "=", "spec", ".", "map", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "num_fp16_res", "=", "args", ".", "D_kwargs", ".", "num_fp16_res", "=", "4", "# enable mixed-precision training", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "conv_clamp", "=", "args", ".", "D_kwargs", ".", "conv_clamp", "=", "256", "# clamp activations to avoid float16 overflow", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "change", "=", "change", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "f_dim", "=", "args", ".", "f_dim", "\n", "args", ".", "D_kwargs", ".", "epilogue_kwargs", ".", "mbstd_group_size", "=", "spec", ".", "mbstd", "\n", "args", ".", "D_kwargs", ".", "epilogue_kwargs", ".", "f_dim", "=", "args", ".", "f_dim", "\n", "\n", "args", ".", "G_opt_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'torch.optim.Adam'", ",", "lr", "=", "spec", ".", "lrate", ",", "betas", "=", "[", "0", ",", "0.99", "]", ",", "eps", "=", "1e-8", ")", "\n", "args", ".", "D_opt_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'torch.optim.Adam'", ",", "lr", "=", "spec", ".", "lrate", ",", "betas", "=", "[", "0", ",", "0.99", "]", ",", "eps", "=", "1e-8", ")", "\n", "args", ".", "loss_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.loss.StyleGAN2Loss'", ",", "r1_gamma", "=", "spec", ".", "gamma", ")", "\n", "\n", "args", ".", "total_kimg", "=", "spec", ".", "kimg", "\n", "args", ".", "batch_size", "=", "spec", ".", "mb", "\n", "args", ".", "batch_gpu", "=", "spec", ".", "mb", "//", "spec", ".", "ref_gpus", "\n", "args", ".", "ema_kimg", "=", "spec", ".", "ema", "\n", "args", ".", "ema_rampup", "=", "spec", ".", "ramp", "\n", "\n", "if", "cfg", "==", "'cifar'", ":", "\n", "        ", "args", ".", "loss_kwargs", ".", "pl_weight", "=", "0", "# disable path length regularization", "\n", "args", ".", "loss_kwargs", ".", "style_mixing_prob", "=", "0", "# disable style mixing", "\n", "args", ".", "D_kwargs", ".", "architecture", "=", "'orig'", "# disable residual skip connections", "\n", "\n", "", "if", "gamma", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "gamma", ",", "float", ")", "\n", "if", "not", "gamma", ">=", "0", ":", "\n", "            ", "raise", "UserError", "(", "'--gamma must be non-negative'", ")", "\n", "", "desc", "+=", "f'-gamma{gamma:g}'", "\n", "args", ".", "loss_kwargs", ".", "r1_gamma", "=", "gamma", "\n", "\n", "", "if", "kimg", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "kimg", ",", "int", ")", "\n", "if", "not", "kimg", ">=", "1", ":", "\n", "            ", "raise", "UserError", "(", "'--kimg must be at least 1'", ")", "\n", "", "desc", "+=", "f'-kimg{kimg:d}'", "\n", "args", ".", "total_kimg", "=", "kimg", "\n", "\n", "", "if", "batch", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "batch", ",", "int", ")", "\n", "if", "not", "(", "batch", ">=", "1", "and", "batch", "%", "gpus", "==", "0", ")", ":", "\n", "            ", "raise", "UserError", "(", "'--batch must be at least 1 and divisible by --gpus'", ")", "\n", "", "desc", "+=", "f'-batch{batch}'", "\n", "args", ".", "batch_size", "=", "batch", "\n", "args", ".", "batch_gpu", "=", "batch", "//", "gpus", "\n", "\n", "# ---------------------------------------------------", "\n", "# Discriminator augmentation: aug, p, target, augpipe", "\n", "# ---------------------------------------------------", "\n", "\n", "", "if", "aug", "is", "None", ":", "\n", "        ", "aug", "=", "'noaug'", "# no augmentation is used in our experiments", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "aug", ",", "str", ")", "\n", "desc", "+=", "f'-{aug}'", "\n", "\n", "", "if", "aug", "==", "'ada'", ":", "\n", "        ", "args", ".", "ada_target", "=", "0.6", "\n", "\n", "", "elif", "aug", "==", "'noaug'", ":", "\n", "        ", "pass", "\n", "\n", "", "elif", "aug", "==", "'fixed'", ":", "\n", "        ", "if", "p", "is", "None", ":", "\n", "            ", "raise", "UserError", "(", "f'--aug={aug} requires specifying --p'", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "UserError", "(", "f'--aug={aug} not supported'", ")", "\n", "\n", "", "if", "p", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "p", ",", "float", ")", "\n", "if", "aug", "!=", "'fixed'", ":", "\n", "            ", "raise", "UserError", "(", "'--p can only be specified with --aug=fixed'", ")", "\n", "", "if", "not", "0", "<=", "p", "<=", "1", ":", "\n", "            ", "raise", "UserError", "(", "'--p must be between 0 and 1'", ")", "\n", "", "desc", "+=", "f'-p{p:g}'", "\n", "args", ".", "augment_p", "=", "p", "\n", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "target", ",", "float", ")", "\n", "if", "aug", "!=", "'ada'", ":", "\n", "            ", "raise", "UserError", "(", "'--target can only be specified with --aug=ada'", ")", "\n", "", "if", "not", "0", "<=", "target", "<=", "1", ":", "\n", "            ", "raise", "UserError", "(", "'--target must be between 0 and 1'", ")", "\n", "", "desc", "+=", "f'-target{target:g}'", "\n", "args", ".", "ada_target", "=", "target", "\n", "\n", "", "assert", "augpipe", "is", "None", "or", "isinstance", "(", "augpipe", ",", "str", ")", "\n", "if", "augpipe", "is", "None", ":", "\n", "        ", "augpipe", "=", "'bgc'", "\n", "", "else", ":", "\n", "        ", "if", "aug", "==", "'noaug'", ":", "\n", "            ", "raise", "UserError", "(", "'--augpipe cannot be specified with --aug=noaug'", ")", "\n", "", "desc", "+=", "f'-{augpipe}'", "\n", "\n", "", "augpipe_specs", "=", "{", "\n", "'blit'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ")", ",", "\n", "'geom'", ":", "dict", "(", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ")", ",", "\n", "'color'", ":", "dict", "(", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ")", ",", "\n", "'filter'", ":", "dict", "(", "imgfilter", "=", "1", ")", ",", "\n", "'noise'", ":", "dict", "(", "noise", "=", "1", ")", ",", "\n", "'cutout'", ":", "dict", "(", "cutout", "=", "1", ")", ",", "\n", "'bg'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ")", ",", "\n", "'bgc'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ")", ",", "\n", "'bgcf'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ",", "imgfilter", "=", "1", ")", ",", "\n", "'bgfn'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "imgfilter", "=", "1", ",", "noise", "=", "1", ")", ",", "\n", "'bgcfn'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ",", "imgfilter", "=", "1", ",", "noise", "=", "1", ")", ",", "\n", "'bgcfnc'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ",", "imgfilter", "=", "1", ",", "noise", "=", "1", ",", "cutout", "=", "1", ")", ",", "\n", "}", "\n", "\n", "assert", "augpipe", "in", "augpipe_specs", "\n", "if", "aug", "!=", "'noaug'", ":", "\n", "        ", "args", ".", "augment_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "class_name", "=", "'training.augment.AugmentPipe'", ",", "**", "augpipe_specs", "[", "augpipe", "]", ")", "\n", "\n", "# ----------------------------------", "\n", "# Transfer learning: resume, freezed", "\n", "# ----------------------------------", "\n", "\n", "", "resume_specs", "=", "{", "\n", "'ffhq256'", ":", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/transfer-learning-source-nets/ffhq-res256-mirror-paper256-noaug.pkl'", ",", "\n", "'ffhq512'", ":", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/transfer-learning-source-nets/ffhq-res512-mirror-stylegan2-noaug.pkl'", ",", "\n", "'ffhq1024'", ":", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/transfer-learning-source-nets/ffhq-res1024-mirror-stylegan2-noaug.pkl'", ",", "\n", "'celebahq256'", ":", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/transfer-learning-source-nets/celebahq-res256-mirror-paper256-kimg100000-ada-target0.5.pkl'", ",", "\n", "'lsundog256'", ":", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/transfer-learning-source-nets/lsundog-res256-paper256-kimg100000-noaug.pkl'", ",", "\n", "}", "\n", "\n", "assert", "resume", "is", "None", "or", "isinstance", "(", "resume", ",", "str", ")", "\n", "if", "resume", "is", "None", ":", "\n", "        ", "resume", "=", "'noresume'", "\n", "", "elif", "resume", "==", "'noresume'", ":", "\n", "        ", "desc", "+=", "'-noresume'", "\n", "", "elif", "resume", "in", "resume_specs", ":", "\n", "        ", "desc", "+=", "f'-resume{resume}'", "\n", "args", ".", "resume_pkl", "=", "resume_specs", "[", "resume", "]", "# predefined url", "\n", "", "else", ":", "\n", "        ", "desc", "+=", "'-resumecustom'", "\n", "args", ".", "resume_pkl", "=", "resume", "# custom path or url", "\n", "\n", "", "if", "resume", "!=", "'noresume'", ":", "\n", "        ", "args", ".", "ada_kimg", "=", "100", "# make ADA react faster at the beginning", "\n", "args", ".", "ema_rampup", "=", "None", "# disable EMA rampup", "\n", "\n", "", "if", "freezed", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "freezed", ",", "int", ")", "\n", "if", "not", "freezed", ">=", "0", ":", "\n", "            ", "raise", "UserError", "(", "'--freezed must be non-negative'", ")", "\n", "", "desc", "+=", "f'-freezed{freezed:d}'", "\n", "args", ".", "D_kwargs", ".", "block_kwargs", ".", "freeze_layers", "=", "freezed", "\n", "\n", "# -------------------------------------------------", "\n", "# Performance options: fp32, nhwc, nobench, workers", "\n", "# -------------------------------------------------", "\n", "\n", "", "if", "fp32", "is", "None", ":", "\n", "        ", "fp32", "=", "False", "\n", "", "assert", "isinstance", "(", "fp32", ",", "bool", ")", "\n", "if", "fp32", ":", "\n", "        ", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "num_fp16_res", "=", "args", ".", "D_kwargs", ".", "num_fp16_res", "=", "0", "\n", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "conv_clamp", "=", "args", ".", "D_kwargs", ".", "conv_clamp", "=", "None", "\n", "\n", "", "if", "nhwc", "is", "None", ":", "\n", "        ", "nhwc", "=", "False", "\n", "", "assert", "isinstance", "(", "nhwc", ",", "bool", ")", "\n", "if", "nhwc", ":", "\n", "        ", "args", ".", "G_kwargs", ".", "synthesis_kwargs", ".", "fp16_channels_last", "=", "args", ".", "D_kwargs", ".", "block_kwargs", ".", "fp16_channels_last", "=", "True", "\n", "\n", "", "if", "nobench", "is", "None", ":", "\n", "        ", "nobench", "=", "False", "\n", "", "assert", "isinstance", "(", "nobench", ",", "bool", ")", "\n", "if", "nobench", ":", "\n", "        ", "args", ".", "cudnn_benchmark", "=", "False", "\n", "\n", "", "if", "allow_tf32", "is", "None", ":", "\n", "        ", "allow_tf32", "=", "False", "\n", "", "assert", "isinstance", "(", "allow_tf32", ",", "bool", ")", "\n", "if", "allow_tf32", ":", "\n", "        ", "args", ".", "allow_tf32", "=", "True", "\n", "\n", "", "if", "workers", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "workers", ",", "int", ")", "\n", "if", "not", "workers", ">=", "1", ":", "\n", "            ", "raise", "UserError", "(", "'--workers must be at least 1'", ")", "\n", "", "args", ".", "data_loader_kwargs", ".", "num_workers", "=", "workers", "\n", "\n", "", "return", "desc", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.train.subprocess_fn": [[440, 461], ["dnnlib.util.Logger", "torch_utils.training_stats.init_multiprocessing", "training.training_loop.training_loop", "os.path.abspath", "torch.device", "os.path.join", "os.path.join", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "os.path.abspath.replace"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.init_multiprocessing", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.training_loop"], ["", "def", "subprocess_fn", "(", "rank", ",", "args", ",", "temp_dir", ")", ":", "\n", "    ", "dnnlib", ".", "util", ".", "Logger", "(", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "run_dir", ",", "'log.txt'", ")", ",", "file_mode", "=", "'a'", ",", "should_flush", "=", "True", ")", "\n", "\n", "# Init torch.distributed.", "\n", "if", "args", ".", "num_gpus", ">", "1", ":", "\n", "        ", "init_file", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'.torch_distributed_init'", ")", ")", "\n", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "init_method", "=", "'file:///'", "+", "init_file", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'gloo'", ",", "init_method", "=", "init_method", ",", "rank", "=", "rank", ",", "world_size", "=", "args", ".", "num_gpus", ")", "\n", "", "else", ":", "\n", "            ", "init_method", "=", "f'file://{init_file}'", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "init_method", ",", "rank", "=", "rank", ",", "world_size", "=", "args", ".", "num_gpus", ")", "\n", "\n", "# Init torch_utils.", "\n", "", "", "sync_device", "=", "torch", ".", "device", "(", "'cuda'", ",", "rank", ")", "if", "args", ".", "num_gpus", ">", "1", "else", "None", "\n", "training_stats", ".", "init_multiprocessing", "(", "rank", "=", "rank", ",", "sync_device", "=", "sync_device", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "custom_ops", ".", "verbosity", "=", "'none'", "\n", "\n", "# Execute training loop.", "\n", "", "training_loop", ".", "training_loop", "(", "rank", "=", "rank", ",", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.train.main": [[475, 632], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "dnnlib.util.Logger", "os.path.isdir", "os.path.join", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.makedirs", "print", "torch.multiprocessing.set_start_method", "train.setup_training_loop_kwargs", "re.match", "int", "max", "os.path.exists", "json.dumps", "print", "open", "json.dump", "tempfile.TemporaryDirectory", "train.CommaSeparatedList", "click.Choice", "click.Choice", "click.Choice", "ctx.fail", "x.group", "os.path.join", "train.subprocess_fn", "torch.multiprocessing.spawn", "os.listdir", "os.path.isdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.train.setup_training_loop_kwargs", "home.repos.pwc.inspect_result.drboog_Lafite.None.train.subprocess_fn"], ["", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "pass_context", "\n", "\n", "@", "click", ".", "option", "(", "'--f_dim'", ",", "help", "=", "'dimension of features'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--change'", ",", "help", "=", "'change structure'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--map_num'", ",", "help", "=", "'layer number of mapping network'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--d_use_norm'", ",", "help", "=", "'Input features into every layer of discriminator'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--d_use_fts'", ",", "help", "=", "'Use text feature in discriminator or not'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--gather'", ",", "help", "=", "'gather all negative samples across gpus or not'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--mixing_prob'", ",", "help", "=", "'if mixing_prob==1 -> no text data used'", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--lam'", ",", "help", "=", "'hyper-parameter for contrastive loss (softmax along different dimensions)'", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--temp'", ",", "help", "=", "'temperature for contrastive loss'", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--itd'", ",", "help", "=", "''", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--itc'", ",", "help", "=", "''", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--iid'", ",", "help", "=", "''", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--iic'", ",", "help", "=", "''", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--metric_only_test'", ",", "help", "=", "'compute metrics using test dataset vs test dataset?'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--fmap'", ",", "help", "=", "''", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--ratio'", ",", "help", "=", "'ratio of data with ground-truth text used'", ",", "type", "=", "float", ")", "\n", "\n", "\n", "# General options.", "\n", "@", "click", ".", "option", "(", "'--outdir'", ",", "help", "=", "'Where to save the results'", ",", "required", "=", "True", ",", "metavar", "=", "'DIR'", ")", "\n", "@", "click", ".", "option", "(", "'--gpus'", ",", "help", "=", "'Number of GPUs to use [default: 1]'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--snap'", ",", "help", "=", "'Snapshot interval [default: 50 ticks]'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--metrics'", ",", "help", "=", "'Comma-separated list or \"none\" [default: fid50k_full]'", ",", "type", "=", "CommaSeparatedList", "(", ")", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "help", "=", "'Random seed [default: 0]'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'-n'", ",", "'--dry-run'", ",", "help", "=", "'Print training options and exit'", ",", "is_flag", "=", "True", ")", "\n", "\n", "# Dataset.", "\n", "@", "click", ".", "option", "(", "'--data'", ",", "help", "=", "'Training data (directory or zip)'", ",", "metavar", "=", "'PATH'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--test_data'", ",", "help", "=", "'Testing data (directory or zip)'", ",", "metavar", "=", "'PATH'", ",", "required", "=", "True", ")", "\n", "\n", "@", "click", ".", "option", "(", "'--cond'", ",", "help", "=", "'Train conditional model based on dataset labels [default: false]'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--subset'", ",", "help", "=", "'Train with only N images [default: all]'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--mirror'", ",", "help", "=", "'Enable dataset x-flips [default: false]'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "\n", "# Base config.", "\n", "@", "click", ".", "option", "(", "'--cfg'", ",", "help", "=", "'Base config [default: auto]'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'auto'", ",", "'stylegan2'", ",", "'paper256'", ",", "'paper512'", ",", "'paper1024'", ",", "'cifar'", "]", ")", ")", "\n", "@", "click", ".", "option", "(", "'--gamma'", ",", "help", "=", "'Override R1 gamma'", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--kimg'", ",", "help", "=", "'Override training duration'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "@", "click", ".", "option", "(", "'--batch'", ",", "help", "=", "'Override batch size'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "\n", "# Discriminator augmentation.", "\n", "@", "click", ".", "option", "(", "'--aug'", ",", "help", "=", "'Augmentation mode [default: ada]'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'noaug'", ",", "'ada'", ",", "'fixed'", "]", ")", ")", "\n", "@", "click", ".", "option", "(", "'--p'", ",", "help", "=", "'Augmentation probability for --aug=fixed'", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--target'", ",", "help", "=", "'ADA target value for --aug=ada'", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "'--augpipe'", ",", "help", "=", "'Augmentation pipeline [default: bgc]'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'blit'", ",", "'geom'", ",", "'color'", ",", "'filter'", ",", "'noise'", ",", "'cutout'", ",", "'bg'", ",", "'bgc'", ",", "'bgcf'", ",", "'bgcfn'", ",", "'bgcfnc'", "]", ")", ")", "\n", "\n", "# Transfer learning.", "\n", "@", "click", ".", "option", "(", "'--resume'", ",", "help", "=", "'Resume training [default: noresume]'", ",", "metavar", "=", "'PKL'", ")", "\n", "@", "click", ".", "option", "(", "'--freezed'", ",", "help", "=", "'Freeze-D [default: 0 layers]'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "\n", "# Performance options.", "\n", "@", "click", ".", "option", "(", "'--fp32'", ",", "help", "=", "'Disable mixed-precision training'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--nhwc'", ",", "help", "=", "'Use NHWC memory format with FP16'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--nobench'", ",", "help", "=", "'Disable cuDNN benchmarking'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--allow-tf32'", ",", "help", "=", "'Allow PyTorch to use TF32 internally'", ",", "type", "=", "bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "@", "click", ".", "option", "(", "'--workers'", ",", "help", "=", "'Override number of DataLoader workers'", ",", "type", "=", "int", ",", "metavar", "=", "'INT'", ")", "\n", "\n", "def", "main", "(", "ctx", ",", "outdir", ",", "dry_run", ",", "**", "config_kwargs", ")", ":", "\n", "    ", "\"\"\"Train a GAN using the techniques described in the paper\n    \"Training Generative Adversarial Networks with Limited Data\".\n\n    Examples:\n\n    \\b\n    # Train with custom dataset using 1 GPU.\n    python train.py --outdir=~/training-runs --data=~/mydataset.zip --gpus=1\n\n    \\b\n    # Train class-conditional CIFAR-10 using 2 GPUs.\n    python train.py --outdir=~/training-runs --data=~/datasets/cifar10.zip \\\\\n        --gpus=2 --cfg=cifar --cond=1\n\n    \\b\n    # Transfer learn MetFaces from FFHQ using 4 GPUs.\n    python train.py --outdir=~/training-runs --data=~/datasets/metfaces.zip \\\\\n        --gpus=4 --cfg=paper1024 --mirror=1 --resume=ffhq1024 --snap=10\n\n    \\b\n    # Reproduce original StyleGAN2 config F.\n    python train.py --outdir=~/training-runs --data=~/datasets/ffhq.zip \\\\\n        --gpus=8 --cfg=stylegan2 --mirror=1 --aug=noaug\n\n    \\b\n    Base configs (--cfg):\n      auto       Automatically select reasonable defaults based on resolution\n                 and GPU count. Good starting point for new datasets.\n      stylegan2  Reproduce results for StyleGAN2 config F at 1024x1024.\n      paper256   Reproduce results for FFHQ and LSUN Cat at 256x256.\n      paper512   Reproduce results for BreCaHAD and AFHQ at 512x512.\n      paper1024  Reproduce results for MetFaces at 1024x1024.\n      cifar      Reproduce results for CIFAR-10 at 32x32.\n\n    \\b\n    Transfer learning source networks (--resume):\n      ffhq256        FFHQ trained at 256x256 resolution.\n      ffhq512        FFHQ trained at 512x512 resolution.\n      ffhq1024       FFHQ trained at 1024x1024 resolution.\n      celebahq256    CelebA-HQ trained at 256x256 resolution.\n      lsundog256     LSUN Dog trained at 256x256 resolution.\n      <PATH or URL>  Custom network pickle.\n    \"\"\"", "\n", "dnnlib", ".", "util", ".", "Logger", "(", "should_flush", "=", "True", ")", "\n", "\n", "# Setup training options.", "\n", "try", ":", "\n", "        ", "run_desc", ",", "args", "=", "setup_training_loop_kwargs", "(", "**", "config_kwargs", ")", "\n", "", "except", "UserError", "as", "err", ":", "\n", "        ", "ctx", ".", "fail", "(", "err", ")", "\n", "\n", "# Pick output directory.", "\n", "", "prev_run_dirs", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isdir", "(", "outdir", ")", ":", "\n", "        ", "prev_run_dirs", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "outdir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "x", ")", ")", "]", "\n", "", "prev_run_ids", "=", "[", "re", ".", "match", "(", "r'^\\d+'", ",", "x", ")", "for", "x", "in", "prev_run_dirs", "]", "\n", "prev_run_ids", "=", "[", "int", "(", "x", ".", "group", "(", ")", ")", "for", "x", "in", "prev_run_ids", "if", "x", "is", "not", "None", "]", "\n", "cur_run_id", "=", "max", "(", "prev_run_ids", ",", "default", "=", "-", "1", ")", "+", "1", "\n", "args", ".", "run_dir", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "f'{cur_run_id:05d}-{run_desc}'", ")", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "run_dir", ")", "\n", "\n", "# Print options.", "\n", "print", "(", ")", "\n", "print", "(", "'Training options:'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "args", ",", "indent", "=", "2", ")", ")", "\n", "print", "(", ")", "\n", "print", "(", "f'Output directory:   {args.run_dir}'", ")", "\n", "print", "(", "f'Training data:      {args.training_set_kwargs.path}'", ")", "\n", "print", "(", "f'Training duration:  {args.total_kimg} kimg'", ")", "\n", "print", "(", "f'Number of GPUs:     {args.num_gpus}'", ")", "\n", "print", "(", "f'Number of images:   {args.training_set_kwargs.max_size}'", ")", "\n", "print", "(", "f'Image resolution:   {args.training_set_kwargs.resolution}'", ")", "\n", "print", "(", "f'Conditional model:  {args.training_set_kwargs.use_labels}'", ")", "\n", "print", "(", "f'Dataset x-flips:    {args.training_set_kwargs.xflip}'", ")", "\n", "print", "(", "f'Discriminator use normalization:  {args.d_use_norm}'", ")", "\n", "print", "(", "f'Discriminator use fts: {args.d_use_fts}'", ")", "\n", "\n", "# Dry run?", "\n", "if", "dry_run", ":", "\n", "        ", "print", "(", "'Dry run; exiting.'", ")", "\n", "return", "\n", "\n", "# Create output directory.", "\n", "", "print", "(", "'Creating output directory...'", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "run_dir", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "run_dir", ",", "'training_options.json'", ")", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "# Launch processes.", "\n", "", "print", "(", "'Launching processes...'", ")", "\n", "torch", ".", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "temp_dir", ":", "\n", "        ", "if", "args", ".", "num_gpus", "==", "1", ":", "\n", "            ", "subprocess_fn", "(", "rank", "=", "0", ",", "args", "=", "args", ",", "temp_dir", "=", "temp_dir", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "multiprocessing", ".", "spawn", "(", "fn", "=", "subprocess_fn", ",", "args", "=", "(", "args", ",", "temp_dir", ")", ",", "nprocs", "=", "args", ".", "num_gpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.generate_for_soa.Generator.__init__": [[13, 18], ["generate_for_soa.Generator.load_model"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.None.generate_for_soa.Generator.load_model"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "path", ")", ":", "\n", "        ", "self", ".", "name", "=", "'generator'", "\n", "self", ".", "model", "=", "self", ".", "load_model", "(", "device", ",", "path", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "force_32", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.generate_for_soa.Generator.load_model": [[19, 26], ["dnnlib.util.open_url", "legacy.load_network_pkl", "network[].to", "network[].to"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.open_url", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.load_network_pkl"], ["", "def", "load_model", "(", "self", ",", "device", ",", "path", ")", ":", "\n", "        ", "with", "dnnlib", ".", "util", ".", "open_url", "(", "path", ")", "as", "f", ":", "\n", "            ", "network", "=", "legacy", ".", "load_network_pkl", "(", "f", ")", "\n", "self", ".", "G_ema", "=", "network", "[", "'G_ema'", "]", ".", "to", "(", "device", ")", "\n", "self", ".", "D", "=", "network", "[", "'D'", "]", ".", "to", "(", "device", ")", "\n", "#                 self.G = network['G'].to(device)", "\n", "return", "self", ".", "G_ema", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.generate_for_soa.Generator.generate": [[27, 29], ["generate_for_soa.Generator.model"], "methods", ["None"], ["", "", "def", "generate", "(", "self", ",", "latent", ",", "c", ",", "fts", ",", "noise_mode", "=", "'const'", ",", "return_styles", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "latent", ",", "c", ",", "fts", "=", "fts", ",", "noise_mode", "=", "noise_mode", ",", "return_styles", "=", "return_styles", ",", "force_fp32", "=", "self", ".", "force_32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.generate_for_soa.Generator.generate_from_style": [[30, 33], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "generate_for_soa.Generator.model.synthesis"], "methods", ["None"], ["", "def", "generate_from_style", "(", "self", ",", "style", ",", "noise_mode", "=", "'const'", ")", ":", "\n", "        ", "ws", "=", "torch", ".", "randn", "(", "style", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "model", ".", "num_ws", ",", "512", ")", "\n", "return", "self", ".", "model", ".", "synthesis", "(", "ws", ",", "fts", "=", "None", ",", "styles", "=", "style", ",", "noise_mode", "=", "noise_mode", ",", "force_fp32", "=", "self", ".", "force_32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.generate_for_soa.Generator.tensor_to_img": [[34, 39], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.permute", "torch.clamp.permute", "PIL.Image.fromarray", "torch.cat().detach().cpu().numpy().astype", "torch.cat().detach().cpu().numpy().astype", "torch.cat().detach().cpu().numpy().astype", "torch.cat().detach().cpu().numpy().astype", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "tensor_to_img", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "img", "=", "torch", ".", "clamp", "(", "(", "tensor", "+", "1.", ")", "*", "127.5", ",", "0.", ",", "255.", ")", "\n", "img_list", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "img_list", "=", "[", "img", "for", "img", "in", "img_list", "]", "\n", "return", "Image", ".", "fromarray", "(", "torch", ".", "cat", "(", "img_list", ",", "dim", "=", "-", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy._LegacyUnpickler.find_class": [[61, 65], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.None.legacy._LegacyUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "if", "module", "==", "'dnnlib.tflib.network'", "and", "name", "==", "'Network'", ":", "\n", "            ", "return", "_TFNetworkStub", "\n", "", "return", "super", "(", ")", ".", "find_class", "(", "module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.load_network_pkl": [[13, 54], ["_LegacyUnpickler().load", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "all", "legacy.convert_tf_generator", "legacy.convert_tf_discriminator", "legacy.convert_tf_generator", "dict", "legacy._LegacyUnpickler", "len", "type", "type", "copy.deepcopy", "key.startswith", "key.startswith", "isinstance", "dnnlib.EasyDict", "torch_utils.misc.copy_params_and_buffers", "copy.deepcopy.get", "type"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.convert_tf_generator", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.convert_tf_discriminator", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.convert_tf_generator", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.copy_params_and_buffers"], ["def", "load_network_pkl", "(", "f", ",", "force_fp16", "=", "False", ")", ":", "\n", "    ", "data", "=", "_LegacyUnpickler", "(", "f", ")", ".", "load", "(", ")", "\n", "\n", "# Legacy TensorFlow pickle => convert.", "\n", "if", "isinstance", "(", "data", ",", "tuple", ")", "and", "len", "(", "data", ")", "==", "3", "and", "all", "(", "isinstance", "(", "net", ",", "_TFNetworkStub", ")", "for", "net", "in", "data", ")", ":", "\n", "        ", "tf_G", ",", "tf_D", ",", "tf_Gs", "=", "data", "\n", "G", "=", "convert_tf_generator", "(", "tf_G", ")", "\n", "D", "=", "convert_tf_discriminator", "(", "tf_D", ")", "\n", "G_ema", "=", "convert_tf_generator", "(", "tf_Gs", ")", "\n", "data", "=", "dict", "(", "G", "=", "G", ",", "D", "=", "D", ",", "G_ema", "=", "G_ema", ")", "\n", "\n", "# Add missing fields.", "\n", "", "if", "'training_set_kwargs'", "not", "in", "data", ":", "\n", "        ", "data", "[", "'training_set_kwargs'", "]", "=", "None", "\n", "", "if", "'augment_pipe'", "not", "in", "data", ":", "\n", "        ", "data", "[", "'augment_pipe'", "]", "=", "None", "\n", "\n", "# Validate contents.", "\n", "", "assert", "isinstance", "(", "data", "[", "'G'", "]", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "data", "[", "'D'", "]", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "data", "[", "'G_ema'", "]", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "data", "[", "'training_set_kwargs'", "]", ",", "(", "dict", ",", "type", "(", "None", ")", ")", ")", "\n", "assert", "isinstance", "(", "data", "[", "'augment_pipe'", "]", ",", "(", "torch", ".", "nn", ".", "Module", ",", "type", "(", "None", ")", ")", ")", "\n", "\n", "# Force FP16.", "\n", "if", "force_fp16", ":", "\n", "        ", "for", "key", "in", "[", "'G'", ",", "'D'", ",", "'G_ema'", "]", ":", "\n", "            ", "old", "=", "data", "[", "key", "]", "\n", "kwargs", "=", "copy", ".", "deepcopy", "(", "old", ".", "init_kwargs", ")", "\n", "if", "key", ".", "startswith", "(", "'G'", ")", ":", "\n", "                ", "kwargs", ".", "synthesis_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "kwargs", ".", "get", "(", "'synthesis_kwargs'", ",", "{", "}", ")", ")", "\n", "kwargs", ".", "synthesis_kwargs", ".", "num_fp16_res", "=", "4", "\n", "kwargs", ".", "synthesis_kwargs", ".", "conv_clamp", "=", "256", "\n", "", "if", "key", ".", "startswith", "(", "'D'", ")", ":", "\n", "                ", "kwargs", ".", "num_fp16_res", "=", "4", "\n", "kwargs", ".", "conv_clamp", "=", "256", "\n", "", "if", "kwargs", "!=", "old", ".", "init_kwargs", ":", "\n", "                ", "new", "=", "type", "(", "old", ")", "(", "**", "kwargs", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "misc", ".", "copy_params_and_buffers", "(", "old", ",", "new", ",", "require_all", "=", "True", ")", "\n", "data", "[", "key", "]", "=", "new", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy._collect_tf_params": [[68, 78], ["dict", "legacy._collect_tf_params.recurse"], "function", ["None"], ["", "", "def", "_collect_tf_params", "(", "tf_net", ")", ":", "\n", "# pylint: disable=protected-access", "\n", "    ", "tf_params", "=", "dict", "(", ")", "\n", "def", "recurse", "(", "prefix", ",", "tf_net", ")", ":", "\n", "        ", "for", "name", ",", "value", "in", "tf_net", ".", "variables", ":", "\n", "            ", "tf_params", "[", "prefix", "+", "name", "]", "=", "value", "\n", "", "for", "name", ",", "comp", "in", "tf_net", ".", "components", ".", "items", "(", ")", ":", "\n", "            ", "recurse", "(", "prefix", "+", "name", "+", "'/'", ",", "comp", ")", "\n", "", "", "recurse", "(", "''", ",", "tf_net", ")", "\n", "return", "tf_params", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy._populate_module_params": [[81, 99], ["torch_utils.misc.named_params_and_buffers", "zip", "re.fullmatch", "tensor.copy_", "print", "value_fn", "torch.from_numpy", "list", "numpy.array", "re.fullmatch.groups"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.named_params_and_buffers"], ["", "def", "_populate_module_params", "(", "module", ",", "*", "patterns", ")", ":", "\n", "    ", "for", "name", ",", "tensor", "in", "misc", ".", "named_params_and_buffers", "(", "module", ")", ":", "\n", "        ", "found", "=", "False", "\n", "value", "=", "None", "\n", "for", "pattern", ",", "value_fn", "in", "zip", "(", "patterns", "[", "0", ":", ":", "2", "]", ",", "patterns", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "match", "=", "re", ".", "fullmatch", "(", "pattern", ",", "name", ")", "\n", "if", "match", ":", "\n", "                ", "found", "=", "True", "\n", "if", "value_fn", "is", "not", "None", ":", "\n", "                    ", "value", "=", "value_fn", "(", "*", "match", ".", "groups", "(", ")", ")", "\n", "", "break", "\n", "", "", "try", ":", "\n", "            ", "assert", "found", "\n", "if", "value", "is", "not", "None", ":", "\n", "                ", "tensor", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "value", ")", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "name", ",", "list", "(", "tensor", ".", "shape", ")", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.convert_tf_generator": [[102, 197], ["set", "dnnlib.EasyDict", "legacy.convert_tf_generator.kwarg"], "function", ["None"], ["", "", "", "def", "convert_tf_generator", "(", "tf_G", ")", ":", "\n", "    ", "if", "tf_G", ".", "version", "<", "4", ":", "\n", "        ", "raise", "ValueError", "(", "'TensorFlow pickle version too low'", ")", "\n", "\n", "# Collect kwargs.", "\n", "", "tf_kwargs", "=", "tf_G", ".", "static_kwargs", "\n", "known_kwargs", "=", "set", "(", ")", "\n", "def", "kwarg", "(", "tf_name", ",", "default", "=", "None", ",", "none", "=", "None", ")", ":", "\n", "        ", "known_kwargs", ".", "add", "(", "tf_name", ")", "\n", "val", "=", "tf_kwargs", ".", "get", "(", "tf_name", ",", "default", ")", "\n", "return", "val", "if", "val", "is", "not", "None", "else", "none", "\n", "\n", "# Convert kwargs.", "\n", "", "kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "z_dim", "=", "kwarg", "(", "'latent_size'", ",", "512", ")", ",", "\n", "c_dim", "=", "kwarg", "(", "'label_size'", ",", "0", ")", ",", "\n", "w_dim", "=", "kwarg", "(", "'dlatent_size'", ",", "512", ")", ",", "\n", "img_resolution", "=", "kwarg", "(", "'resolution'", ",", "1024", ")", ",", "\n", "img_channels", "=", "kwarg", "(", "'num_channels'", ",", "3", ")", ",", "\n", "mapping_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "num_layers", "=", "kwarg", "(", "'mapping_layers'", ",", "8", ")", ",", "\n", "embed_features", "=", "kwarg", "(", "'label_fmaps'", ",", "None", ")", ",", "\n", "layer_features", "=", "kwarg", "(", "'mapping_fmaps'", ",", "None", ")", ",", "\n", "activation", "=", "kwarg", "(", "'mapping_nonlinearity'", ",", "'lrelu'", ")", ",", "\n", "lr_multiplier", "=", "kwarg", "(", "'mapping_lrmul'", ",", "0.01", ")", ",", "\n", "w_avg_beta", "=", "kwarg", "(", "'w_avg_beta'", ",", "0.995", ",", "none", "=", "1", ")", ",", "\n", ")", ",", "\n", "synthesis_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "channel_base", "=", "kwarg", "(", "'fmap_base'", ",", "16384", ")", "*", "2", ",", "\n", "channel_max", "=", "kwarg", "(", "'fmap_max'", ",", "512", ")", ",", "\n", "num_fp16_res", "=", "kwarg", "(", "'num_fp16_res'", ",", "0", ")", ",", "\n", "conv_clamp", "=", "kwarg", "(", "'conv_clamp'", ",", "None", ")", ",", "\n", "architecture", "=", "kwarg", "(", "'architecture'", ",", "'skip'", ")", ",", "\n", "resample_filter", "=", "kwarg", "(", "'resample_kernel'", ",", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ",", "\n", "use_noise", "=", "kwarg", "(", "'use_noise'", ",", "True", ")", ",", "\n", "activation", "=", "kwarg", "(", "'nonlinearity'", ",", "'lrelu'", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Check for unknown kwargs.", "\n", "kwarg", "(", "'truncation_psi'", ")", "\n", "kwarg", "(", "'truncation_cutoff'", ")", "\n", "kwarg", "(", "'style_mixing_prob'", ")", "\n", "kwarg", "(", "'structure'", ")", "\n", "unknown_kwargs", "=", "list", "(", "set", "(", "tf_kwargs", ".", "keys", "(", ")", ")", "-", "known_kwargs", ")", "\n", "if", "len", "(", "unknown_kwargs", ")", ">", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown TensorFlow kwarg'", ",", "unknown_kwargs", "[", "0", "]", ")", "\n", "\n", "# Collect params.", "\n", "", "tf_params", "=", "_collect_tf_params", "(", "tf_G", ")", "\n", "for", "name", ",", "value", "in", "list", "(", "tf_params", ".", "items", "(", ")", ")", ":", "\n", "        ", "match", "=", "re", ".", "fullmatch", "(", "r'ToRGB_lod(\\d+)/(.*)'", ",", "name", ")", "\n", "if", "match", ":", "\n", "            ", "r", "=", "kwargs", ".", "img_resolution", "//", "(", "2", "**", "int", "(", "match", ".", "group", "(", "1", ")", ")", ")", "\n", "tf_params", "[", "f'{r}x{r}/ToRGB/{match.group(2)}'", "]", "=", "value", "\n", "kwargs", ".", "synthesis", ".", "kwargs", ".", "architecture", "=", "'orig'", "\n", "#for name, value in tf_params.items(): print(f'{name:<50s}{list(value.shape)}')", "\n", "\n", "# Convert params.", "\n", "", "", "from", "training", "import", "networks", "\n", "G", "=", "networks", ".", "Generator", "(", "**", "kwargs", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "# pylint: disable=unnecessary-lambda", "\n", "_populate_module_params", "(", "G", ",", "\n", "r'mapping\\.w_avg'", ",", "lambda", ":", "tf_params", "[", "f'dlatent_avg'", "]", ",", "\n", "r'mapping\\.embed\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'mapping/LabelEmbed/weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'mapping\\.embed\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'mapping/LabelEmbed/bias'", "]", ",", "\n", "r'mapping\\.fc(\\d+)\\.weight'", ",", "lambda", "i", ":", "tf_params", "[", "f'mapping/Dense{i}/weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'mapping\\.fc(\\d+)\\.bias'", ",", "lambda", "i", ":", "tf_params", "[", "f'mapping/Dense{i}/bias'", "]", ",", "\n", "r'synthesis\\.b4\\.const'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/4x4/Const/const'", "]", "[", "0", "]", ",", "\n", "r'synthesis\\.b4\\.conv1\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/4x4/Conv/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'synthesis\\.b4\\.conv1\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/4x4/Conv/bias'", "]", ",", "\n", "r'synthesis\\.b4\\.conv1\\.noise_const'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/noise0'", "]", "[", "0", ",", "0", "]", ",", "\n", "r'synthesis\\.b4\\.conv1\\.noise_strength'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/4x4/Conv/noise_strength'", "]", ",", "\n", "r'synthesis\\.b4\\.conv1\\.affine\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/4x4/Conv/mod_weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'synthesis\\.b4\\.conv1\\.affine\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'synthesis/4x4/Conv/mod_bias'", "]", "+", "1", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv0\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv0_up/weight'", "]", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv0\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv0_up/bias'", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv0\\.noise_const'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/noise{int(np.log2(int(r)))*2-5}'", "]", "[", "0", ",", "0", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv0\\.noise_strength'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv0_up/noise_strength'", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv0\\.affine\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv0_up/mod_weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv0\\.affine\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv0_up/mod_bias'", "]", "+", "1", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv1\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv1/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv1\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv1/bias'", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv1\\.noise_const'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/noise{int(np.log2(int(r)))*2-4}'", "]", "[", "0", ",", "0", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv1\\.noise_strength'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv1/noise_strength'", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv1\\.affine\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv1/mod_weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'synthesis\\.b(\\d+)\\.conv1\\.affine\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Conv1/mod_bias'", "]", "+", "1", ",", "\n", "r'synthesis\\.b(\\d+)\\.torgb\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/ToRGB/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'synthesis\\.b(\\d+)\\.torgb\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/ToRGB/bias'", "]", ",", "\n", "r'synthesis\\.b(\\d+)\\.torgb\\.affine\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/ToRGB/mod_weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'synthesis\\.b(\\d+)\\.torgb\\.affine\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/ToRGB/mod_bias'", "]", "+", "1", ",", "\n", "r'synthesis\\.b(\\d+)\\.skip\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'synthesis/{r}x{r}/Skip/weight'", "]", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'.*\\.resample_filter'", ",", "None", ",", "\n", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.convert_tf_discriminator": [[200, 280], ["set", "dnnlib.EasyDict", "legacy.convert_tf_generator.kwarg"], "function", ["None"], ["", "def", "convert_tf_discriminator", "(", "tf_D", ")", ":", "\n", "    ", "if", "tf_D", ".", "version", "<", "4", ":", "\n", "        ", "raise", "ValueError", "(", "'TensorFlow pickle version too low'", ")", "\n", "\n", "# Collect kwargs.", "\n", "", "tf_kwargs", "=", "tf_D", ".", "static_kwargs", "\n", "known_kwargs", "=", "set", "(", ")", "\n", "def", "kwarg", "(", "tf_name", ",", "default", "=", "None", ")", ":", "\n", "        ", "known_kwargs", ".", "add", "(", "tf_name", ")", "\n", "return", "tf_kwargs", ".", "get", "(", "tf_name", ",", "default", ")", "\n", "\n", "# Convert kwargs.", "\n", "", "kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "c_dim", "=", "kwarg", "(", "'label_size'", ",", "0", ")", ",", "\n", "img_resolution", "=", "kwarg", "(", "'resolution'", ",", "1024", ")", ",", "\n", "img_channels", "=", "kwarg", "(", "'num_channels'", ",", "3", ")", ",", "\n", "architecture", "=", "kwarg", "(", "'architecture'", ",", "'resnet'", ")", ",", "\n", "channel_base", "=", "kwarg", "(", "'fmap_base'", ",", "16384", ")", "*", "2", ",", "\n", "channel_max", "=", "kwarg", "(", "'fmap_max'", ",", "512", ")", ",", "\n", "num_fp16_res", "=", "kwarg", "(", "'num_fp16_res'", ",", "0", ")", ",", "\n", "conv_clamp", "=", "kwarg", "(", "'conv_clamp'", ",", "None", ")", ",", "\n", "cmap_dim", "=", "kwarg", "(", "'mapping_fmaps'", ",", "None", ")", ",", "\n", "block_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "activation", "=", "kwarg", "(", "'nonlinearity'", ",", "'lrelu'", ")", ",", "\n", "resample_filter", "=", "kwarg", "(", "'resample_kernel'", ",", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ",", "\n", "freeze_layers", "=", "kwarg", "(", "'freeze_layers'", ",", "0", ")", ",", "\n", ")", ",", "\n", "mapping_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "num_layers", "=", "kwarg", "(", "'mapping_layers'", ",", "0", ")", ",", "\n", "embed_features", "=", "kwarg", "(", "'mapping_fmaps'", ",", "None", ")", ",", "\n", "layer_features", "=", "kwarg", "(", "'mapping_fmaps'", ",", "None", ")", ",", "\n", "activation", "=", "kwarg", "(", "'nonlinearity'", ",", "'lrelu'", ")", ",", "\n", "lr_multiplier", "=", "kwarg", "(", "'mapping_lrmul'", ",", "0.1", ")", ",", "\n", ")", ",", "\n", "epilogue_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "\n", "mbstd_group_size", "=", "kwarg", "(", "'mbstd_group_size'", ",", "None", ")", ",", "\n", "mbstd_num_channels", "=", "kwarg", "(", "'mbstd_num_features'", ",", "1", ")", ",", "\n", "activation", "=", "kwarg", "(", "'nonlinearity'", ",", "'lrelu'", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Check for unknown kwargs.", "\n", "kwarg", "(", "'structure'", ")", "\n", "unknown_kwargs", "=", "list", "(", "set", "(", "tf_kwargs", ".", "keys", "(", ")", ")", "-", "known_kwargs", ")", "\n", "if", "len", "(", "unknown_kwargs", ")", ">", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown TensorFlow kwarg'", ",", "unknown_kwargs", "[", "0", "]", ")", "\n", "\n", "# Collect params.", "\n", "", "tf_params", "=", "_collect_tf_params", "(", "tf_D", ")", "\n", "for", "name", ",", "value", "in", "list", "(", "tf_params", ".", "items", "(", ")", ")", ":", "\n", "        ", "match", "=", "re", ".", "fullmatch", "(", "r'FromRGB_lod(\\d+)/(.*)'", ",", "name", ")", "\n", "if", "match", ":", "\n", "            ", "r", "=", "kwargs", ".", "img_resolution", "//", "(", "2", "**", "int", "(", "match", ".", "group", "(", "1", ")", ")", ")", "\n", "tf_params", "[", "f'{r}x{r}/FromRGB/{match.group(2)}'", "]", "=", "value", "\n", "kwargs", ".", "architecture", "=", "'orig'", "\n", "#for name, value in tf_params.items(): print(f'{name:<50s}{list(value.shape)}')", "\n", "\n", "# Convert params.", "\n", "", "", "from", "training", "import", "networks", "\n", "D", "=", "networks", ".", "Discriminator", "(", "**", "kwargs", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "# pylint: disable=unnecessary-lambda", "\n", "_populate_module_params", "(", "D", ",", "\n", "r'b(\\d+)\\.fromrgb\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'{r}x{r}/FromRGB/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'b(\\d+)\\.fromrgb\\.bias'", ",", "lambda", "r", ":", "tf_params", "[", "f'{r}x{r}/FromRGB/bias'", "]", ",", "\n", "r'b(\\d+)\\.conv(\\d+)\\.weight'", ",", "lambda", "r", ",", "i", ":", "tf_params", "[", "f'{r}x{r}/Conv{i}{[\"\",\"_down\"][int(i)]}/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'b(\\d+)\\.conv(\\d+)\\.bias'", ",", "lambda", "r", ",", "i", ":", "tf_params", "[", "f'{r}x{r}/Conv{i}{[\"\",\"_down\"][int(i)]}/bias'", "]", ",", "\n", "r'b(\\d+)\\.skip\\.weight'", ",", "lambda", "r", ":", "tf_params", "[", "f'{r}x{r}/Skip/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'mapping\\.embed\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'LabelEmbed/weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'mapping\\.embed\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'LabelEmbed/bias'", "]", ",", "\n", "r'mapping\\.fc(\\d+)\\.weight'", ",", "lambda", "i", ":", "tf_params", "[", "f'Mapping{i}/weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'mapping\\.fc(\\d+)\\.bias'", ",", "lambda", "i", ":", "tf_params", "[", "f'Mapping{i}/bias'", "]", ",", "\n", "r'b4\\.conv\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'4x4/Conv/weight'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", ",", "\n", "r'b4\\.conv\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'4x4/Conv/bias'", "]", ",", "\n", "r'b4\\.fc\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'4x4/Dense0/weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'b4\\.fc\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'4x4/Dense0/bias'", "]", ",", "\n", "r'b4\\.out\\.weight'", ",", "lambda", ":", "tf_params", "[", "f'Output/weight'", "]", ".", "transpose", "(", ")", ",", "\n", "r'b4\\.out\\.bias'", ",", "lambda", ":", "tf_params", "[", "f'Output/bias'", "]", ",", "\n", "r'.*\\.resample_filter'", ",", "None", ",", "\n", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.convert_network_pickle": [[283, 307], ["click.command", "click.option", "click.option", "click.option", "print", "print", "print", "dnnlib.util.open_url", "legacy.load_network_pkl", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.open_url", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.load_network_pkl"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--source'", ",", "help", "=", "'Input pickle'", ",", "required", "=", "True", ",", "metavar", "=", "'PATH'", ")", "\n", "@", "click", ".", "option", "(", "'--dest'", ",", "help", "=", "'Output pickle'", ",", "required", "=", "True", ",", "metavar", "=", "'PATH'", ")", "\n", "@", "click", ".", "option", "(", "'--force-fp16'", ",", "help", "=", "'Force the networks to use FP16'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'BOOL'", ",", "show_default", "=", "True", ")", "\n", "def", "convert_network_pickle", "(", "source", ",", "dest", ",", "force_fp16", ")", ":", "\n", "    ", "\"\"\"Convert legacy network pickle into the native PyTorch format.\n\n    The tool is able to load the main network configurations exported using the TensorFlow version of StyleGAN2 or StyleGAN2-ADA.\n    It does not support e.g. StyleGAN2-ADA comparison methods, StyleGAN2 configs A-D, or StyleGAN1 networks.\n\n    Example:\n\n    \\b\n    python legacy.py \\\\\n        --source=https://nvlabs-fi-cdn.nvidia.com/stylegan2/networks/stylegan2-cat-config-f.pkl \\\\\n        --dest=stylegan2-cat-config-f.pkl\n    \"\"\"", "\n", "print", "(", "f'Loading \"{source}\"...'", ")", "\n", "with", "dnnlib", ".", "util", ".", "open_url", "(", "source", ")", "as", "f", ":", "\n", "        ", "data", "=", "load_network_pkl", "(", "f", ",", "force_fp16", "=", "force_fp16", ")", "\n", "", "print", "(", "f'Saving \"{dest}\"...'", ")", "\n", "with", "open", "(", "dest", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "print", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.__init__": [[90, 118], ["torchvision.Compose", "range", "os.path.join", "datasets_bird_coco.TextDataset.load_text_data", "datasets_bird_coco.TextDataset.load_class_id", "len", "datasets_bird_coco.TextDataset.imsize.append", "data_dir.find", "datasets_bird_coco.TextDataset.load_bbox", "len", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_text_data", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_class_id", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_bbox"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split", "=", "'train'", ",", "\n", "base_size", "=", "64", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "cap_num", "=", "5", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "embeddings_num", "=", "cap_num", "\n", "\n", "self", ".", "imsize", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TREE", ".", "BRANCH_NUM", ")", ":", "\n", "            ", "self", ".", "imsize", ".", "append", "(", "base_size", ")", "\n", "base_size", "=", "base_size", "*", "2", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "if", "data_dir", ".", "find", "(", "'birds'", ")", "!=", "-", "1", ":", "\n", "            ", "self", ".", "bbox", "=", "self", ".", "load_bbox", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox", "=", "None", "\n", "", "split_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "split", ")", "\n", "\n", "self", ".", "filenames", ",", "self", ".", "captions", ",", "self", ".", "ixtoword", ",", "self", ".", "wordtoix", ",", "self", ".", "n_words", "=", "self", ".", "load_text_data", "(", "data_dir", ",", "split", ")", "\n", "\n", "self", ".", "class_id", "=", "self", ".", "load_class_id", "(", "split_dir", ",", "len", "(", "self", ".", "filenames", ")", ")", "\n", "self", ".", "number_example", "=", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_bbox": [[119, 142], ["os.path.join", "pandas.read_csv().astype", "os.path.join", "pandas.read_csv", "df_filenames[].tolist", "print", "len", "range", "len", "[].tolist", "pandas.read_csv"], "methods", ["None"], ["", "def", "load_bbox", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "self", ".", "data_dir", "\n", "bbox_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'CUB_200_2011/bounding_boxes.txt'", ")", "\n", "df_bounding_boxes", "=", "pd", ".", "read_csv", "(", "bbox_path", ",", "\n", "delim_whitespace", "=", "True", ",", "\n", "header", "=", "None", ")", ".", "astype", "(", "int", ")", "\n", "#", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'CUB_200_2011/images.txt'", ")", "\n", "df_filenames", "=", "pd", ".", "read_csv", "(", "filepath", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ")", "\n", "filenames", "=", "df_filenames", "[", "1", "]", ".", "tolist", "(", ")", "\n", "print", "(", "'Total filenames: '", ",", "len", "(", "filenames", ")", ",", "filenames", "[", "0", "]", ")", "\n", "#", "\n", "filename_bbox", "=", "{", "img_file", "[", ":", "-", "4", "]", ":", "[", "]", "for", "img_file", "in", "filenames", "}", "\n", "numImgs", "=", "len", "(", "filenames", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "numImgs", ")", ":", "\n", "# bbox = [x-left, y-top, width, height]", "\n", "            ", "bbox", "=", "df_bounding_boxes", ".", "iloc", "[", "i", "]", "[", "1", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "key", "=", "filenames", "[", "i", "]", "[", ":", "-", "4", "]", "\n", "filename_bbox", "[", "key", "]", "=", "bbox", "\n", "#", "\n", "", "return", "filename_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_captions": [[143, 176], ["range", "len", "open", "f.read().decode().split", "cap.replace.replace.replace", "nltk.tokenize.RegexpTokenizer", "nltk.tokenize.RegexpTokenizer.tokenize", "all_captions.append", "print", "f.read().decode", "len", "cap.replace.replace.lower", "len", "print", "t.encode().decode.encode().decode.encode().decode", "len", "tokens_new.append", "f.read", "t.encode().decode.encode().decode.encode"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "def", "load_captions", "(", "self", ",", "data_dir", ",", "filenames", ")", ":", "\n", "        ", "all_captions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "filenames", ")", ")", ":", "\n", "            ", "cap_path", "=", "'%s/text/%s.txt'", "%", "(", "data_dir", ",", "filenames", "[", "i", "]", ")", "\n", "with", "open", "(", "cap_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "captions", "=", "f", ".", "read", "(", ")", ".", "decode", "(", "'utf8'", ")", ".", "split", "(", "'\\n'", ")", "\n", "cnt", "=", "0", "\n", "for", "cap", "in", "captions", ":", "\n", "                    ", "if", "len", "(", "cap", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "cap", "=", "cap", ".", "replace", "(", "\"\\ufffd\\ufffd\"", ",", "\" \"", ")", "\n", "# picks out sequences of alphanumeric characters as tokens", "\n", "# and drops everything else", "\n", "tokenizer", "=", "RegexpTokenizer", "(", "r'\\w+'", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "cap", ".", "lower", "(", ")", ")", "\n", "# print('tokens', tokens)", "\n", "if", "len", "(", "tokens", ")", "==", "0", ":", "\n", "                        ", "print", "(", "'cap'", ",", "cap", ")", "\n", "continue", "\n", "\n", "", "tokens_new", "=", "[", "]", "\n", "for", "t", "in", "tokens", ":", "\n", "                        ", "t", "=", "t", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ".", "decode", "(", "'ascii'", ")", "\n", "if", "len", "(", "t", ")", ">", "0", ":", "\n", "                            ", "tokens_new", ".", "append", "(", "t", ")", "\n", "", "", "all_captions", ".", "append", "(", "tokens_new", ")", "\n", "cnt", "+=", "1", "\n", "if", "cnt", "==", "self", ".", "embeddings_num", ":", "\n", "                        ", "break", "\n", "", "", "if", "cnt", "<", "self", ".", "embeddings_num", ":", "\n", "                    ", "print", "(", "'ERROR: the captions for %s less than %d'", "\n", "%", "(", "filenames", "[", "i", "]", ",", "cnt", ")", ")", "\n", "", "", "", "return", "all_captions", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.build_dictionary": [[177, 216], ["collections.defaultdict", "train_captions_new.append", "test_captions_new.append", "len", "rev.append", "rev.append"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "def", "build_dictionary", "(", "self", ",", "train_captions", ",", "test_captions", ")", ":", "\n", "        ", "word_counts", "=", "defaultdict", "(", "float", ")", "\n", "captions", "=", "train_captions", "+", "test_captions", "\n", "for", "sent", "in", "captions", ":", "\n", "            ", "for", "word", "in", "sent", ":", "\n", "                ", "word_counts", "[", "word", "]", "+=", "1", "\n", "\n", "", "", "vocab", "=", "[", "w", "for", "w", "in", "word_counts", "if", "word_counts", "[", "w", "]", ">=", "0", "]", "\n", "\n", "ixtoword", "=", "{", "}", "\n", "ixtoword", "[", "0", "]", "=", "'<end>'", "\n", "wordtoix", "=", "{", "}", "\n", "wordtoix", "[", "'<end>'", "]", "=", "0", "\n", "ix", "=", "1", "\n", "for", "w", "in", "vocab", ":", "\n", "            ", "wordtoix", "[", "w", "]", "=", "ix", "\n", "ixtoword", "[", "ix", "]", "=", "w", "\n", "ix", "+=", "1", "\n", "\n", "", "train_captions_new", "=", "[", "]", "\n", "for", "t", "in", "train_captions", ":", "\n", "            ", "rev", "=", "[", "]", "\n", "for", "w", "in", "t", ":", "\n", "                ", "if", "w", "in", "wordtoix", ":", "\n", "                    ", "rev", ".", "append", "(", "wordtoix", "[", "w", "]", ")", "\n", "# rev.append(0)  # do not need '<end>' token", "\n", "", "", "train_captions_new", ".", "append", "(", "rev", ")", "\n", "\n", "", "test_captions_new", "=", "[", "]", "\n", "for", "t", "in", "test_captions", ":", "\n", "            ", "rev", "=", "[", "]", "\n", "for", "w", "in", "t", ":", "\n", "                ", "if", "w", "in", "wordtoix", ":", "\n", "                    ", "rev", ".", "append", "(", "wordtoix", "[", "w", "]", ")", "\n", "# rev.append(0)  # do not need '<end>' token", "\n", "", "", "test_captions_new", ".", "append", "(", "rev", ")", "\n", "\n", "", "return", "[", "train_captions_new", ",", "test_captions_new", ",", "\n", "ixtoword", ",", "wordtoix", ",", "len", "(", "ixtoword", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_text_data": [[217, 248], ["os.path.join", "datasets_bird_coco.TextDataset.load_filenames", "datasets_bird_coco.TextDataset.load_filenames", "os.path.isfile", "datasets_bird_coco.TextDataset.load_captions", "datasets_bird_coco.TextDataset.load_captions", "datasets_bird_coco.TextDataset.build_dictionary", "open", "pickle.dump", "print", "open", "pickle.load", "len", "print"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.load_filenames", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.load_filenames", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_captions", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_captions", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.build_dictionary", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "load_text_data", "(", "self", ",", "data_dir", ",", "split", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'captions.pickle'", ")", "\n", "train_names", "=", "self", ".", "load_filenames", "(", "data_dir", ",", "'train'", ")", "\n", "test_names", "=", "self", ".", "load_filenames", "(", "data_dir", ",", "'test'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "            ", "train_captions", "=", "self", ".", "load_captions", "(", "data_dir", ",", "train_names", ")", "\n", "test_captions", "=", "self", ".", "load_captions", "(", "data_dir", ",", "test_names", ")", "\n", "\n", "train_captions", ",", "test_captions", ",", "ixtoword", ",", "wordtoix", ",", "n_words", "=", "self", ".", "build_dictionary", "(", "train_captions", ",", "test_captions", ")", "\n", "with", "open", "(", "filepath", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "[", "train_captions", ",", "test_captions", ",", "\n", "ixtoword", ",", "wordtoix", "]", ",", "f", ",", "protocol", "=", "2", ")", "\n", "print", "(", "'Save to: '", ",", "filepath", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "x", "=", "pickle", ".", "load", "(", "f", ")", "\n", "train_captions", ",", "test_captions", "=", "x", "[", "0", "]", ",", "x", "[", "1", "]", "\n", "ixtoword", ",", "wordtoix", "=", "x", "[", "2", "]", ",", "x", "[", "3", "]", "\n", "del", "x", "\n", "n_words", "=", "len", "(", "ixtoword", ")", "\n", "print", "(", "'Load from: '", ",", "filepath", ")", "\n", "", "", "if", "split", "==", "'train'", ":", "\n", "# a list of list: each list contains", "\n", "# the indices of words in a sentence", "\n", "            ", "captions", "=", "train_captions", "\n", "filenames", "=", "train_names", "\n", "", "else", ":", "# split=='test'", "\n", "            ", "captions", "=", "test_captions", "\n", "filenames", "=", "test_names", "\n", "", "return", "filenames", ",", "captions", ",", "ixtoword", ",", "wordtoix", ",", "n_words", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_class_id": [[249, 256], ["os.path.isfile", "numpy.arange", "numpy.arange", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "load_class_id", "(", "self", ",", "data_dir", ",", "total_num", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "data_dir", "+", "'/class_info.pickle'", ")", ":", "\n", "            ", "with", "open", "(", "data_dir", "+", "'/class_info.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "class_id", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "", "", "else", ":", "\n", "            ", "class_id", "=", "np", ".", "arange", "(", "total_num", ")", "\n", "", "return", "class_id", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.load_filenames": [[257, 266], ["os.path.isfile", "print", "open", "pickle.load", "len"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "load_filenames", "(", "self", ",", "data_dir", ",", "split", ")", ":", "\n", "        ", "filepath", "=", "'%s/%s/filenames.pickle'", "%", "(", "data_dir", ",", "split", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "            ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "filenames", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "filenames", "=", "[", "]", "\n", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.get_caption": [[267, 286], ["numpy.asarray().astype", "numpy.asarray().astype", "len", "numpy.zeros", "numpy.zeros", "print", "list", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.sort", "numpy.sort", "numpy.asarray", "numpy.asarray", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "get_caption", "(", "self", ",", "sent_ix", ")", ":", "\n", "# a list of indices for a sentence", "\n", "        ", "sent_caption", "=", "np", ".", "asarray", "(", "self", ".", "captions", "[", "sent_ix", "]", ")", ".", "astype", "(", "'int64'", ")", "\n", "if", "(", "sent_caption", "==", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "print", "(", "'ERROR: do not need END (0) token'", ",", "sent_caption", ")", "\n", "", "num_words", "=", "len", "(", "sent_caption", ")", "\n", "# pad with 0s (i.e., '<end>')", "\n", "x", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "TEXT", ".", "WORDS_NUM", ",", "1", ")", ",", "dtype", "=", "'int64'", ")", "\n", "x_len", "=", "num_words", "\n", "if", "num_words", "<=", "cfg", ".", "TEXT", ".", "WORDS_NUM", ":", "\n", "            ", "x", "[", ":", "num_words", ",", "0", "]", "=", "sent_caption", "\n", "", "else", ":", "\n", "            ", "ix", "=", "list", "(", "np", ".", "arange", "(", "num_words", ")", ")", "# 1, 2, 3,..., maxNum", "\n", "np", ".", "random", ".", "shuffle", "(", "ix", ")", "\n", "ix", "=", "ix", "[", ":", "cfg", ".", "TEXT", ".", "WORDS_NUM", "]", "\n", "ix", "=", "np", ".", "sort", "(", "ix", ")", "\n", "x", "[", ":", ",", "0", "]", "=", "sent_caption", "[", "ix", "]", "\n", "x_len", "=", "cfg", ".", "TEXT", ".", "WORDS_NUM", "\n", "", "return", "x", ",", "x_len", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.__getitem__": [[287, 307], ["datasets_bird_coco.get_imgs", "numpy.randint", "numpy.randint", "datasets_bird_coco.TextDataset.get_caption"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.get_imgs", "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.get_caption"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "#", "\n", "        ", "key", "=", "self", ".", "filenames", "[", "index", "]", "\n", "cls_id", "=", "self", ".", "class_id", "[", "index", "]", "\n", "#", "\n", "if", "self", ".", "bbox", "is", "not", "None", ":", "\n", "            ", "bbox", "=", "self", ".", "bbox", "[", "key", "]", "\n", "data_dir", "=", "'%s/CUB_200_2011'", "%", "self", ".", "data_dir", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "None", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "#", "\n", "", "img_name", "=", "'%s/images/%s.jpg'", "%", "(", "data_dir", ",", "key", ")", "\n", "imgs", "=", "get_imgs", "(", "img_name", ",", "self", ".", "imsize", ",", "\n", "bbox", ",", "self", ".", "transform", ",", "normalize", "=", "self", ".", "norm", ")", "\n", "# random select a sentence", "\n", "sent_ix", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "embeddings_num", ")", "\n", "new_sent_ix", "=", "index", "*", "self", ".", "embeddings_num", "+", "sent_ix", "\n", "caps", ",", "cap_len", "=", "self", ".", "get_caption", "(", "new_sent_ix", ")", "\n", "return", "imgs", ",", "caps", ",", "cap_len", ",", "cls_id", ",", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.TextDataset.__len__": [[309, 311], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.prepare_data": [[28, 57], ["torch.sort", "torch.sort", "range", "captions[].squeeze", "class_ids[].numpy", "len", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "real_imgs.append", "real_imgs.append", "sorted_cap_indices.numpy", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "def", "prepare_data", "(", "data", ")", ":", "\n", "    ", "imgs", ",", "captions", ",", "captions_lens", ",", "class_ids", ",", "keys", "=", "data", "\n", "\n", "# sort data by the length in a decreasing order", "\n", "sorted_cap_lens", ",", "sorted_cap_indices", "=", "torch", ".", "sort", "(", "captions_lens", ",", "0", ",", "True", ")", "\n", "\n", "real_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "imgs", "[", "i", "]", "=", "imgs", "[", "i", "]", "[", "sorted_cap_indices", "]", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "real_imgs", ".", "append", "(", "Variable", "(", "imgs", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "real_imgs", ".", "append", "(", "Variable", "(", "imgs", "[", "i", "]", ")", ")", "\n", "\n", "", "", "captions", "=", "captions", "[", "sorted_cap_indices", "]", ".", "squeeze", "(", ")", "\n", "class_ids", "=", "class_ids", "[", "sorted_cap_indices", "]", ".", "numpy", "(", ")", "\n", "# sent_indices = sent_indices[sorted_cap_indices]", "\n", "keys", "=", "[", "keys", "[", "i", "]", "for", "i", "in", "sorted_cap_indices", ".", "numpy", "(", ")", "]", "\n", "# print('keys', type(keys), keys[-1])  # list", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "        ", "captions", "=", "Variable", "(", "captions", ")", ".", "cuda", "(", ")", "\n", "sorted_cap_lens", "=", "Variable", "(", "sorted_cap_lens", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "captions", "=", "Variable", "(", "captions", ")", "\n", "sorted_cap_lens", "=", "Variable", "(", "sorted_cap_lens", ")", "\n", "\n", "", "return", "[", "real_imgs", ",", "captions", ",", "sorted_cap_lens", ",", "\n", "class_ids", ",", "keys", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.get_imgs": [[59, 87], ["PIL.Image.open().convert", "ret.append", "int", "int", "int", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "transform.crop", "transform", "normalize", "PIL.Image.open", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.None.train.CommaSeparatedList.convert", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.normalize"], ["", "def", "get_imgs", "(", "img_path", ",", "imsize", ",", "bbox", "=", "None", ",", "\n", "transform", "=", "None", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "if", "bbox", "is", "not", "None", ":", "\n", "        ", "r", "=", "int", "(", "np", ".", "maximum", "(", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", "*", "0.75", ")", "\n", "center_x", "=", "int", "(", "(", "2", "*", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "/", "2", ")", "\n", "center_y", "=", "int", "(", "(", "2", "*", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "/", "2", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "center_y", "-", "r", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", ",", "center_y", "+", "r", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "center_x", "-", "r", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", ",", "center_x", "+", "r", ")", "\n", "img", "=", "img", ".", "crop", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "\n", "", "if", "transform", "is", "not", "None", ":", "\n", "        ", "img", "=", "transform", "(", "img", ")", "\n", "\n", "", "ret", "=", "[", "]", "\n", "ret", ".", "append", "(", "normalize", "(", "img", ")", ")", "\n", "#if cfg.GAN.B_DCGAN:", "\n", "'''\n    for i in range(cfg.TREE.BRANCH_NUM):\n        # print(imsize[i])\n        re_img = transforms.Resize(imsize[i])(img)\n        ret.append(normalize(re_img))\n    '''", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.datasets.datasets_bird_coco.load_filenames": [[315, 324], ["os.path.isfile", "print", "open", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["def", "load_filenames", "(", "data_dir", ",", "split", ")", ":", "\n", "    ", "filepath", "=", "'%s/%s/filenames.pickle'", "%", "(", "data_dir", ",", "split", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "filenames", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Load filenames from: %s (%d)'", "%", "(", "filepath", ",", "len", "(", "filenames", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "filenames", "=", "[", "]", "\n", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.EasyDict.__getattr__": [[35, 40], ["AttributeError"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.EasyDict.__setattr__": [[41, 43], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.EasyDict.__delattr__": [[44, 46], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.__init__": [[51, 63], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", ":", "str", "=", "None", ",", "file_mode", ":", "str", "=", "\"w\"", ",", "should_flush", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "file_name", ",", "file_mode", ")", "\n", "\n", "", "self", ".", "should_flush", "=", "should_flush", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "sys", ".", "stdout", "=", "self", "\n", "sys", ".", "stderr", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.__enter__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", "->", "\"Logger\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.__exit__": [[67, 69], ["util.Logger.close"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write": [[70, 84], ["isinstance", "util.Logger.stdout.write", "text.decode.decode.decode", "len", "util.Logger.file.write", "util.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush"], ["", "def", "write", "(", "self", ",", "text", ":", "Union", "[", "str", ",", "bytes", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Write text to stdout (and a file) and optionally flush.\"\"\"", "\n", "if", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "text", "=", "text", ".", "decode", "(", ")", "\n", "", "if", "len", "(", "text", ")", "==", "0", ":", "# workaround for a bug in VSCode debugger: sys.stdout.write(''); sys.stdout.flush() => crash", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "text", ")", "\n", "\n", "", "self", ".", "stdout", ".", "write", "(", "text", ")", "\n", "\n", "if", "self", ".", "should_flush", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush": [[85, 91], ["util.Logger.stdout.flush", "util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush written text to both stdout and a file, if open.\"\"\"", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.close": [[92, 105], ["util.Logger.flush", "util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush, close possible files, and remove stdout/stderr mirroring.\"\"\"", "\n", "self", ".", "flush", "(", ")", "\n", "\n", "# if using multiple loggers, prevent closing in wrong order", "\n", "if", "sys", ".", "stdout", "is", "self", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "", "if", "sys", ".", "stderr", "is", "self", ":", "\n", "            ", "sys", ".", "stderr", "=", "self", ".", "stderr", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.set_cache_dir": [[112, 115], ["None"], "function", ["None"], ["def", "set_cache_dir", "(", "path", ":", "str", ")", "->", "None", ":", "\n", "    ", "global", "_dnnlib_cache_dir", "\n", "_dnnlib_cache_dir", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.make_cache_dir_path": [[116, 126], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tempfile.gettempdir"], "function", ["None"], ["", "def", "make_cache_dir_path", "(", "*", "paths", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "_dnnlib_cache_dir", "is", "not", "None", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_dnnlib_cache_dir", ",", "*", "paths", ")", "\n", "", "if", "'DNNLIB_CACHE_DIR'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'DNNLIB_CACHE_DIR'", "]", ",", "*", "paths", ")", "\n", "", "if", "'HOME'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'HOME'", "]", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "", "if", "'USERPROFILE'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'USERPROFILE'", "]", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.format_time": [[131, 143], ["int", "numpy.rint"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert the seconds to human readable string with days, hours, minutes and seconds.\"\"\"", "\n", "s", "=", "int", "(", "np", ".", "rint", "(", "seconds", ")", ")", "\n", "\n", "if", "s", "<", "60", ":", "\n", "        ", "return", "\"{0}s\"", ".", "format", "(", "s", ")", "\n", "", "elif", "s", "<", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}m {1:02}s\"", ".", "format", "(", "s", "//", "60", ",", "s", "%", "60", ")", "\n", "", "elif", "s", "<", "24", "*", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}h {1:02}m {2:02}s\"", ".", "format", "(", "s", "//", "(", "60", "*", "60", ")", ",", "(", "s", "//", "60", ")", "%", "60", ",", "s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}d {1:02}h {2:02}m\"", ".", "format", "(", "s", "//", "(", "24", "*", "60", "*", "60", ")", ",", "(", "s", "//", "(", "60", "*", "60", ")", ")", "%", "24", ",", "(", "s", "//", "60", ")", "%", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.ask_yes_no": [[145, 153], ["print", "distutils.util.strtobool", "input().lower", "input"], "function", ["None"], ["", "", "def", "ask_yes_no", "(", "question", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Ask the user the question until the user inputs a valid answer.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"{0} [y/n]\"", ".", "format", "(", "question", ")", ")", "\n", "return", "strtobool", "(", "input", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.tuple_product": [[155, 163], ["None"], "function", ["None"], ["", "", "", "def", "tuple_product", "(", "t", ":", "Tuple", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Calculate the product of the tuple elements.\"\"\"", "\n", "result", "=", "1", "\n", "\n", "for", "v", "in", "t", ":", "\n", "        ", "result", "*=", "v", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_dtype_and_ctype": [[179, 200], ["isinstance", "numpy.dtype", "hasattr", "_str_to_ctype.keys", "ctypes.sizeof", "hasattr", "RuntimeError"], "function", ["None"], ["def", "get_dtype_and_ctype", "(", "type_obj", ":", "Any", ")", "->", "Tuple", "[", "np", ".", "dtype", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Given a type name string (or an object having a __name__ attribute), return matching Numpy and ctypes types that have the same size in bytes.\"\"\"", "\n", "type_str", "=", "None", "\n", "\n", "if", "isinstance", "(", "type_obj", ",", "str", ")", ":", "\n", "        ", "type_str", "=", "type_obj", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"__name__\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "__name__", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"name\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot infer type name from input\"", ")", "\n", "\n", "", "assert", "type_str", "in", "_str_to_ctype", ".", "keys", "(", ")", "\n", "\n", "my_dtype", "=", "np", ".", "dtype", "(", "type_str", ")", "\n", "my_ctype", "=", "_str_to_ctype", "[", "type_str", "]", "\n", "\n", "assert", "my_dtype", ".", "itemsize", "==", "ctypes", ".", "sizeof", "(", "my_ctype", ")", "\n", "\n", "return", "my_dtype", ",", "my_ctype", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.is_pickleable": [[202, 209], ["io.BytesIO", "pickle.dump"], "function", ["None"], ["", "def", "is_pickleable", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "stream", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "stream", ")", "\n", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_module_from_obj_name": [[214, 253], ["re.sub", "re.sub", "re.sub.split", "ImportError", "range", "importlib.import_module", "util.get_obj_from_module", "importlib.import_module", "importlib.import_module", "util.get_obj_from_module", "len", "str().startswith", "str", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_obj_from_module"], ["", "", "def", "get_module_from_obj_name", "(", "obj_name", ":", "str", ")", "->", "Tuple", "[", "types", ".", "ModuleType", ",", "str", "]", ":", "\n", "    ", "\"\"\"Searches for the underlying module behind the name to some python object.\n    Returns the module and the object name (original name with module part removed).\"\"\"", "\n", "\n", "# allow convenience shorthands, substitute them by full names", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^np.\"", ",", "\"numpy.\"", ",", "obj_name", ")", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^tf.\"", ",", "\"tensorflow.\"", ",", "obj_name", ")", "\n", "\n", "# list alternatives for (module_name, local_obj_name)", "\n", "parts", "=", "obj_name", ".", "split", "(", "\".\"", ")", "\n", "name_pairs", "=", "[", "(", "\".\"", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ",", "\".\"", ".", "join", "(", "parts", "[", "i", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", "]", "\n", "\n", "# try each alternative in turn", "\n", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "return", "module", ",", "local_obj_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# maybe some of the modules themselves contain errors?", "\n", "", "", "for", "module_name", ",", "_local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "", "except", "ImportError", ":", "\n", "            ", "if", "not", "str", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", ".", "startswith", "(", "\"No module named '\"", "+", "module_name", "+", "\"'\"", ")", ":", "\n", "                ", "raise", "\n", "\n", "# maybe the requested attribute is missing?", "\n", "", "", "", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "# we are out of luck, but we have no idea why", "\n", "", "", "raise", "ImportError", "(", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_obj_from_module": [[255, 263], ["obj_name.split", "getattr"], "function", ["None"], ["", "def", "get_obj_from_module", "(", "module", ":", "types", ".", "ModuleType", ",", "obj_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Traverses the object name and returns the last (rightmost) python object.\"\"\"", "\n", "if", "obj_name", "==", "''", ":", "\n", "        ", "return", "module", "\n", "", "obj", "=", "module", "\n", "for", "part", "in", "obj_name", ".", "split", "(", "\".\"", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_obj_by_name": [[265, 269], ["util.get_module_from_obj_name", "util.get_obj_from_module"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_obj_from_module"], ["", "def", "get_obj_by_name", "(", "name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name.\"\"\"", "\n", "module", ",", "obj_name", "=", "get_module_from_obj_name", "(", "name", ")", "\n", "return", "get_obj_from_module", "(", "module", ",", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.call_func_by_name": [[271, 277], ["util.get_obj_by_name", "callable", "get_obj_by_name."], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_obj_by_name"], ["", "def", "call_func_by_name", "(", "*", "args", ",", "func_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name and calls it as a function.\"\"\"", "\n", "assert", "func_name", "is", "not", "None", "\n", "func_obj", "=", "get_obj_by_name", "(", "func_name", ")", "\n", "assert", "callable", "(", "func_obj", ")", "\n", "return", "func_obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name": [[279, 282], ["util.call_func_by_name"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.call_func_by_name"], ["", "def", "construct_class_by_name", "(", "*", "args", ",", "class_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python class with the given name and constructs it with the given arguments.\"\"\"", "\n", "return", "call_func_by_name", "(", "*", "args", ",", "func_name", "=", "class_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_module_dir_by_obj_name": [[284, 288], ["util.get_module_from_obj_name", "os.path.dirname", "inspect.getfile"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_module_from_obj_name"], ["", "def", "get_module_dir_by_obj_name", "(", "obj_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get the directory path of the module containing the given object name.\"\"\"", "\n", "module", ",", "_", "=", "get_module_from_obj_name", "(", "obj_name", ")", "\n", "return", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.is_top_level_function": [[290, 293], ["callable"], "function", ["None"], ["", "def", "is_top_level_function", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a top-level function, i.e., defined at module scope using 'def'.\"\"\"", "\n", "return", "callable", "(", "obj", ")", "and", "obj", ".", "__name__", "in", "sys", ".", "modules", "[", "obj", ".", "__module__", "]", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.get_top_level_function_name": [[295, 302], ["util.is_top_level_function", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.is_top_level_function"], ["", "def", "get_top_level_function_name", "(", "obj", ":", "Any", ")", "->", "str", ":", "\n", "    ", "\"\"\"Return the fully-qualified name of a top-level function.\"\"\"", "\n", "assert", "is_top_level_function", "(", "obj", ")", "\n", "module", "=", "obj", ".", "__module__", "\n", "if", "module", "==", "'__main__'", ":", "\n", "        ", "module", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sys", ".", "modules", "[", "module", "]", ".", "__file__", ")", ")", "[", "0", "]", "\n", "", "return", "module", "+", "\".\"", "+", "obj", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.list_dir_recursively_with_ignore": [[307, 338], ["os.path.isdir", "os.path.basename", "os.walk", "os.path.normpath", "zip", "os.path.join", "os.path.relpath", "len", "len", "dirs.remove", "os.path.join", "fnmatch.fnmatch", "fnmatch.fnmatch"], "function", ["None"], ["", "def", "list_dir_recursively_with_ignore", "(", "dir_path", ":", "str", ",", "ignores", ":", "List", "[", "str", "]", "=", "None", ",", "add_base_to_relative", ":", "bool", "=", "False", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"List all files recursively in a given directory while ignoring given file and directory names.\n    Returns list of tuples containing both absolute and relative paths.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dir_path", ")", ")", "\n", "\n", "if", "ignores", "is", "None", ":", "\n", "        ", "ignores", "=", "[", "]", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir_path", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "ignore_", "in", "ignores", ":", "\n", "            ", "dirs_to_remove", "=", "[", "d", "for", "d", "in", "dirs", "if", "fnmatch", ".", "fnmatch", "(", "d", ",", "ignore_", ")", "]", "\n", "\n", "# dirs need to be edited in-place", "\n", "for", "d", "in", "dirs_to_remove", ":", "\n", "                ", "dirs", ".", "remove", "(", "d", ")", "\n", "\n", "", "files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "fnmatch", ".", "fnmatch", "(", "f", ",", "ignore_", ")", "]", "\n", "\n", "", "absolute_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "relative_paths", "=", "[", "os", ".", "path", ".", "relpath", "(", "p", ",", "dir_path", ")", "for", "p", "in", "absolute_paths", "]", "\n", "\n", "if", "add_base_to_relative", ":", "\n", "            ", "relative_paths", "=", "[", "os", ".", "path", ".", "join", "(", "base_name", ",", "p", ")", "for", "p", "in", "relative_paths", "]", "\n", "\n", "", "assert", "len", "(", "absolute_paths", ")", "==", "len", "(", "relative_paths", ")", "\n", "result", "+=", "zip", "(", "absolute_paths", ",", "relative_paths", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.copy_files_and_create_dirs": [[340, 351], ["os.path.dirname", "shutil.copyfile", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "copy_files_and_create_dirs", "(", "files", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"Takes in a list of tuples of (src, dst) paths and copies files.\n    Will create all necessary directories.\"\"\"", "\n", "for", "file", "in", "files", ":", "\n", "        ", "target_dir_name", "=", "os", ".", "path", ".", "dirname", "(", "file", "[", "1", "]", ")", "\n", "\n", "# will create all intermediate-level directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir_name", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "file", "[", "0", "]", ",", "file", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.is_url": [[356, 372], ["obj.startswith", "requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["", "", "def", "is_url", "(", "obj", ":", "Any", ",", "allow_file_urls", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "if", "allow_file_urls", "and", "obj", ".", "startswith", "(", "'file://'", ")", ":", "\n", "        ", "return", "True", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.open_url": [[374, 470], ["requests.compat.urljoin.startswith", "util.is_url", "hashlib.md5().hexdigest", "io.BytesIO", "re.match", "re.match", "util.make_cache_dir_path", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "open", "urllib.parse.urlparse", "urllib.parse.urlparse", "open", "hashlib.md5", "os.path.join", "len", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "open", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.is_url", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.make_cache_dir_path", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write"], ["", "def", "open_url", "(", "url", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "num_attempts", ":", "int", "=", "10", ",", "verbose", ":", "bool", "=", "True", ",", "return_filename", ":", "bool", "=", "False", ",", "cache", ":", "bool", "=", "True", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "num_attempts", ">=", "1", "\n", "assert", "not", "(", "return_filename", "and", "(", "not", "cache", ")", ")", "\n", "\n", "# Doesn't look like an URL scheme so interpret it as a local filename.", "\n", "if", "not", "re", ".", "match", "(", "'^[a-z]+://'", ",", "url", ")", ":", "\n", "        ", "return", "url", "if", "return_filename", "else", "open", "(", "url", ",", "\"rb\"", ")", "\n", "\n", "# Handle file URLs.  This code handles unusual file:// patterns that", "\n", "# arise on Windows:", "\n", "#", "\n", "# file:///c:/foo.txt", "\n", "#", "\n", "# which would translate to a local '/c:/foo.txt' filename that's", "\n", "# invalid.  Drop the forward slash for such pathnames.", "\n", "#", "\n", "# If you touch this code path, you should test it on both Linux and", "\n", "# Windows.", "\n", "#", "\n", "# Some internet resources suggest using urllib.request.url2pathname() but", "\n", "# but that converts forward slashes to backslashes and this causes", "\n", "# its own set of problems.", "\n", "", "if", "url", ".", "startswith", "(", "'file://'", ")", ":", "\n", "        ", "filename", "=", "urllib", ".", "parse", ".", "urlparse", "(", "url", ")", ".", "path", "\n", "if", "re", ".", "match", "(", "r'^/[a-zA-Z]:'", ",", "filename", ")", ":", "\n", "            ", "filename", "=", "filename", "[", "1", ":", "]", "\n", "", "return", "filename", "if", "return_filename", "else", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "\n", "", "assert", "is_url", "(", "url", ")", "\n", "\n", "# Lookup from cache.", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "make_cache_dir_path", "(", "'downloads'", ")", "\n", "\n", "", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "filename", "=", "cache_files", "[", "0", "]", "\n", "return", "filename", "if", "return_filename", "else", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive download quota exceeded -- please try again later\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "                ", "raise", "\n", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "if", "return_filename", ":", "\n", "            ", "return", "cache_file", "\n", "\n", "# Return data as file object.", "\n", "", "", "assert", "not", "return_filename", "\n", "return", "io", ".", "BytesIO", "(", "url_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.setup_snapshot_image_grid": [[25, 61], ["numpy.random.RandomState", "numpy.clip", "numpy.clip", "zip", "list", "np.random.RandomState.shuffle", "dict", "range", "sorted", "range", "numpy.stack", "numpy.stack", "range", "len", "tuple", "label_groups[].append", "dict.keys", "np.random.RandomState.shuffle", "len", "range", "range", "range", "len", "len", "len", "training_set.get_details", "len", "len"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_details"], ["def", "setup_snapshot_image_grid", "(", "training_set", ",", "random_seed", "=", "0", ")", ":", "\n", "    ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "gw", "=", "np", ".", "clip", "(", "7680", "//", "training_set", ".", "image_shape", "[", "2", "]", ",", "7", ",", "8", ")", "\n", "gh", "=", "np", ".", "clip", "(", "4320", "//", "training_set", ".", "image_shape", "[", "1", "]", ",", "4", ",", "8", ")", "\n", "\n", "# No labels => show random subset of training samples.", "\n", "if", "not", "training_set", ".", "has_labels", ":", "\n", "        ", "all_indices", "=", "list", "(", "range", "(", "len", "(", "training_set", ")", ")", ")", "\n", "rnd", ".", "shuffle", "(", "all_indices", ")", "\n", "grid_indices", "=", "[", "all_indices", "[", "i", "%", "len", "(", "all_indices", ")", "]", "for", "i", "in", "range", "(", "gw", "*", "gh", ")", "]", "\n", "\n", "", "else", ":", "\n", "# Group training samples by label.", "\n", "        ", "label_groups", "=", "dict", "(", ")", "# label => [idx, ...]", "\n", "for", "idx", "in", "range", "(", "len", "(", "training_set", ")", ")", ":", "\n", "            ", "label", "=", "tuple", "(", "training_set", ".", "get_details", "(", "idx", ")", ".", "raw_label", ".", "flat", "[", ":", ":", "-", "1", "]", ")", "\n", "if", "label", "not", "in", "label_groups", ":", "\n", "                ", "label_groups", "[", "label", "]", "=", "[", "]", "\n", "", "label_groups", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "# Reorder.", "\n", "", "label_order", "=", "sorted", "(", "label_groups", ".", "keys", "(", ")", ")", "\n", "for", "label", "in", "label_order", ":", "\n", "            ", "rnd", ".", "shuffle", "(", "label_groups", "[", "label", "]", ")", "\n", "\n", "# Organize into grid.", "\n", "", "grid_indices", "=", "[", "]", "\n", "for", "y", "in", "range", "(", "gh", ")", ":", "\n", "            ", "label", "=", "label_order", "[", "y", "%", "len", "(", "label_order", ")", "]", "\n", "indices", "=", "label_groups", "[", "label", "]", "\n", "grid_indices", "+=", "[", "indices", "[", "x", "%", "len", "(", "indices", ")", "]", "for", "x", "in", "range", "(", "gw", ")", "]", "\n", "label_groups", "[", "label", "]", "=", "[", "indices", "[", "(", "i", "+", "gw", ")", "%", "len", "(", "indices", ")", "]", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", "]", "\n", "\n", "# Load data.", "\n", "", "", "images", ",", "labels", ",", "_", ",", "_", "=", "zip", "(", "*", "[", "training_set", "[", "i", "]", "for", "i", "in", "grid_indices", "]", ")", "\n", "return", "(", "gw", ",", "gh", ")", ",", "np", ".", "stack", "(", "images", ")", ",", "np", ".", "stack", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid": [[64, 81], ["numpy.asarray", "numpy.rint().clip().astype", "img.reshape.reshape", "img.reshape.transpose", "img.reshape.reshape", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "numpy.rint().clip", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.save", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.save"], ["", "def", "save_image_grid", "(", "img", ",", "fname", ",", "drange", ",", "grid_size", ")", ":", "\n", "    ", "lo", ",", "hi", "=", "drange", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "-", "lo", ")", "*", "(", "255", "/", "(", "hi", "-", "lo", ")", ")", "\n", "img", "=", "np", ".", "rint", "(", "img", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "gw", ",", "gh", "=", "grid_size", "\n", "_N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "img", "=", "img", ".", "reshape", "(", "gh", ",", "gw", ",", "C", ",", "H", ",", "W", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", "\n", "img", "=", "img", ".", "reshape", "(", "gh", "*", "H", ",", "gw", "*", "W", ",", "C", ")", "\n", "\n", "assert", "C", "in", "[", "1", ",", "3", "]", "\n", "if", "C", "==", "1", ":", "\n", "        ", "PIL", ".", "Image", ".", "fromarray", "(", "img", "[", ":", ",", ":", ",", "0", "]", ",", "'L'", ")", ".", "save", "(", "fname", ")", "\n", "", "if", "C", "==", "3", ":", "\n", "        ", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.training_loop": [[84, 538], ["time.time", "torch.device", "torch.device", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "dnnlib.util.construct_class_by_name", "torch_utils.misc.InfiniteSampler", "iter", "dict", "dnnlib.util.construct_class_by_name().train().requires_grad_().to", "dnnlib.util.construct_class_by_name().train().requires_grad_().to", "copy.deepcopy().eval", "dict", "dnnlib.util.construct_class_by_name", "torch_utils.training_stats.Collector", "dict", "time.time", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "print", "print", "print", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch_utils.misc.print_module_summary", "torch_utils.misc.print_module_summary", "print", "dnnlib.util.construct_class_by_name().train().requires_grad_().to", "dnnlib.util.construct_class_by_name().train().requires_grad_().to.p.copy_", "print", "print", "print", "training_loop.setup_snapshot_image_grid", "training_loop.save_image_grid", "torch.randn().split", "torch.randn().split", "torch.from_numpy().to().split", "torch.from_numpy().to().split", "torch.cat().numpy", "torch.cat().numpy", "training_loop.save_image_grid", "print", "open", "print", "print", "progress_fn", "zip", "time.time", "torch.cuda.reset_peak_memory_stats", "torch.cuda.reset_peak_memory_stats", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "training_stats.Collector.update", "training_stats.Collector.as_dict", "time.time", "time.time", "print", "print", "len", "dnnlib.util.construct_class_by_name().train().requires_grad_", "dnnlib.util.construct_class_by_name().train().requires_grad_", "copy.deepcopy", "dnnlib.util.open_url", "legacy.load_network_pkl", "print", "torch_utils.misc.copy_params_and_buffers", "torch.as_tensor", "torch.as_tensor", "torch_utils.training_stats.Collector", "copy.deepcopy().eval().requires_grad_().cpu.requires_grad_", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy().eval().requires_grad_().cpu.requires_grad_", "dnnlib.util.construct_class_by_name", "dnnlib.EasyDict", "dnnlib.util.construct_class_by_name", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "os.path.join", "os.path.join", "torch.no_grad", "torch.no_grad", "clip.load", "range", "os.path.join", "tensorboard.SummaryWriter", "torch.autograd.profiler.record_function", "torch.autograd.profiler.record_function", "next", "phase_img_features.to().split.norm", "phase_txt_features.to().split.norm", "phase_img_features.to().split.to().split", "phase_txt_features.to().split.to().split", "phase_real_c.to().split.to().split", "torch.randn", "torch.randn", "torch.from_numpy().pin_memory().to", "torch.from_numpy().pin_memory().to", "phase.opt.zero_grad", "phase.module.requires_grad_", "enumerate", "phase.module.requires_grad_", "torch.autograd.profiler.record_function", "torch.autograd.profiler.record_function", "zip", "zip", "training_stats.Collector.update", "dnnlib.util.construct_class_by_name().train().requires_grad_().to.p.copy_", "print", "abort_fn", "torch.cat().numpy", "torch.cat().numpy", "training_loop.save_image_grid", "range", "dict", "dict", "os.path.join", "torch_utils.training_stats.report0", "dict", "open.write", "open.flush", "int", "stats_collector.as_dict.items", "dict.items", "tensorboard.SummaryWriter.flush", "progress_fn", "dnnlib.util.construct_class_by_name().train().requires_grad_", "len", "dnnlib.EasyDict", "copy.deepcopy().eval().requires_grad_().cpu.parameters", "dnnlib.EasyDict", "dnnlib.EasyDict", "torch.randn", "torch.randn", "torch.from_numpy().to", "torch.from_numpy().to", "torch.cat", "torch.cat", "len", "len", "clip.tokenize().to", "clip_model.encode_text().view().repeat", "clip_model.encode_text().view().repeat.to", "txt_fts.to.norm", "txt_fts.to.split", "txt_fts_list.append", "zip", "print", "torch.cat().numpy", "torch.cat().numpy", "training_loop.save_image_grid", "print", "phase_gen_z.split", "dnnlib.util.construct_class_by_name.get_label", "phase_gen_c.split", "phase.start_event.record", "zip", "dnnlib.util.construct_class_by_name.accumulate_gradients", "torch.autograd.profiler.record_function", "torch.autograd.profiler.record_function", "phase.module.parameters", "phase.opt.step", "phase.end_event.record", "min", "copy.deepcopy().eval.parameters", "dnnlib.util.construct_class_by_name().train().requires_grad_().to.parameters", "p_ema.copy_", "copy.deepcopy().eval.buffers", "dnnlib.util.construct_class_by_name().train().requires_grad_().to.buffers", "b_ema.copy_", "print", "print", "os.path.join", "len", "zip", "torch.cat().numpy", "torch.cat().numpy", "training_loop.save_image_grid", "zip", "torch.cat().numpy", "torch.cat().numpy", "training_loop.save_image_grid", "len", "print", "metrics.metric_main.calc_metric", "dict.update", "phase.end_event.synchronize", "phase.start_event.elapsed_time", "tensorboard.SummaryWriter.add_scalar", "tensorboard.SummaryWriter.add_scalar", "dnnlib.util.construct_class_by_name().train", "dnnlib.util.construct_class_by_name().train", "list", "copy.deepcopy().eval().requires_grad_().cpu.parameters", "copy.deepcopy().eval.", "img_list.append", "os.path.join", "phase_img_features.to().split.to", "phase_txt_features.to().split.to", "phase_real_c.to().split.to", "torch.randn.split", "numpy.random.randint", "range", "torch.from_numpy().pin_memory", "torch.from_numpy().pin_memory", "torch.from_numpy().pin_memory().to.split", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "max", "p.lerp", "numpy.sign", "torch_utils.misc.constant", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "dnnlib.util.format_time", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "torch_utils.training_stats.report0", "torch.cat", "torch.cat", "copy.deepcopy().eval.", "img_list.append", "style_list.append", "w_list.append", "os.path.join", "w.normal_.normal_", "copy.deepcopy().eval.synthesis", "img_list.append", "os.path.join", "dict", "copy.deepcopy().eval().requires_grad_().cpu", "open", "pickle.dump", "metrics.metric_main.report_metric", "json.dumps", "dnnlib.util.construct_class_by_name().train", "copy.deepcopy().eval().requires_grad_().cpu.parameters", "torch.from_numpy", "torch.from_numpy", "copy.deepcopy().eval.cpu", "clip.tokenize", "clip_model.encode_text().view", "misc.print_module_summary.size", "torch.cat", "torch.cat", "len", "len", "torch_utils.misc.nan_to_num", "torch_utils.training_stats.report0", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_utils.misc.check_ddp_consistency", "dnnlib.util.construct_class_by_name", "dnnlib.util.construct_class_by_name", "zip", "phase_real_img.to().to", "len", "torch.from_numpy", "torch.from_numpy", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "float", "copy.deepcopy().eval.cpu", "copy.deepcopy().eval().requires_grad_", "dnnlib.util.construct_class_by_name", "copy.deepcopy().eval.", "clip_model.encode_text", "misc.print_module_summary.cpu", "numpy.stack", "psutil.Process().memory_info", "dnnlib.util.construct_class_by_name().train().requires_grad_().to.p.cpu", "zip", "misc.print_module_summary.cpu", "misc.print_module_summary.cpu", "phase_real_img.to", "copy.deepcopy().eval.", "copy.deepcopy().eval", "psutil.Process", "os.getpid", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.print_module_summary", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.print_module_summary", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.setup_snapshot_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.as_dict", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.open_url", "home.repos.pwc.inspect_result.drboog_Lafite.None.legacy.load_network_pkl", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.copy_params_and_buffers", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label", "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.accumulate_gradients", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.training.training_loop.save_image_grid", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.calc_metric", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.format_time", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.report_metric", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.check_ddp_consistency", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name"], ["", "", "def", "training_loop", "(", "\n", "run_dir", "=", "'.'", ",", "# Output directory.", "\n", "training_set_kwargs", "=", "{", "}", ",", "# Options for training set.", "\n", "testing_set_kwargs", "=", "{", "}", ",", "# Options for training set.", "\n", "data_loader_kwargs", "=", "{", "}", ",", "# Options for torch.utils.data.DataLoader.", "\n", "G_kwargs", "=", "{", "}", ",", "# Options for generator network.", "\n", "D_kwargs", "=", "{", "}", ",", "# Options for discriminator network.", "\n", "#     M_kwargs                = {},", "\n", "G_opt_kwargs", "=", "{", "}", ",", "# Options for generator optimizer.", "\n", "D_opt_kwargs", "=", "{", "}", ",", "# Options for discriminator optimizer.", "\n", "augment_kwargs", "=", "None", ",", "# Options for augmentation pipeline. None = disable.", "\n", "loss_kwargs", "=", "{", "}", ",", "# Options for loss function.", "\n", "metrics", "=", "[", "]", ",", "# Metrics to evaluate during training.", "\n", "random_seed", "=", "0", ",", "# Global random seed.", "\n", "num_gpus", "=", "1", ",", "# Number of GPUs participating in the training.", "\n", "rank", "=", "0", ",", "# Rank of the current process in [0, num_gpus[.", "\n", "batch_size", "=", "4", ",", "# Total batch size for one training iteration. Can be larger than batch_gpu * num_gpus.", "\n", "batch_gpu", "=", "4", ",", "# Number of samples processed at a time by one GPU.", "\n", "ema_kimg", "=", "10", ",", "# Half-life of the exponential moving average (EMA) of generator weights.", "\n", "ema_rampup", "=", "None", ",", "# EMA ramp-up coefficient.", "\n", "G_reg_interval", "=", "4", ",", "# How often to perform regularization for G? None = disable lazy regularization.", "\n", "D_reg_interval", "=", "16", ",", "# How often to perform regularization for D? None = disable lazy regularization.", "\n", "augment_p", "=", "0", ",", "# Initial value of augmentation probability.", "\n", "ada_target", "=", "None", ",", "# ADA target value. None = fixed p.", "\n", "ada_interval", "=", "4", ",", "# How often to perform ADA adjustment?", "\n", "ada_kimg", "=", "500", ",", "# ADA adjustment speed, measured in how many kimg it takes for p to increase/decrease by one unit.", "\n", "total_kimg", "=", "25000", ",", "# Total length of the training, measured in thousands of real images.", "\n", "kimg_per_tick", "=", "4", ",", "# Progress snapshot interval.", "\n", "image_snapshot_ticks", "=", "50", ",", "# How often to save image snapshots? None = disable.", "\n", "network_snapshot_ticks", "=", "50", ",", "# How often to save network snapshots? None = disable.", "\n", "resume_pkl", "=", "None", ",", "# Network pickle to resume training from.", "\n", "cudnn_benchmark", "=", "True", ",", "# Enable torch.backends.cudnn.benchmark?", "\n", "allow_tf32", "=", "False", ",", "# Enable torch.backends.cuda.matmul.allow_tf32 and torch.backends.cudnn.allow_tf32?", "\n", "abort_fn", "=", "None", ",", "# Callback function for determining whether to abort training. Must return consistent results across ranks.", "\n", "progress_fn", "=", "None", ",", "# Callback function for updating training progress. Called for all ranks.", "\n", "f_dim", "=", "512", ",", "\n", "d_use_norm", "=", "True", ",", "\n", "d_use_fts", "=", "True", ",", "\n", "mixing_prob", "=", "0.", ",", "\n", "lam", "=", "0.5", ",", "\n", "temp", "=", "1.", ",", "\n", "gather", "=", "False", ",", "\n", "itd", "=", "10.", ",", "\n", "itc", "=", "10.", ",", "\n", "iid", "=", "0.", ",", "\n", "iic", "=", "0.", ",", "\n", "metric_only_test", "=", "False", ",", "\n", "finetune", "=", "False", ",", "\n", "ratio", "=", "1.", "\n", "\n", ")", ":", "\n", "# Initialize.", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "rank", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", "*", "num_gpus", "+", "rank", ")", "\n", "torch", ".", "manual_seed", "(", "random_seed", "*", "num_gpus", "+", "rank", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "cudnn_benchmark", "# Improves training speed.", "\n", "torch", ".", "backends", ".", "cuda", ".", "matmul", ".", "allow_tf32", "=", "allow_tf32", "# Allow PyTorch to internally use tf32 for matmul", "\n", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "=", "allow_tf32", "# Allow PyTorch to internally use tf32 for convolutions", "\n", "conv2d_gradfix", ".", "enabled", "=", "True", "# Improves training speed.", "\n", "grid_sample_gradfix", ".", "enabled", "=", "True", "# Avoids errors with the augmentation pipe.", "\n", "\n", "# Load training set.", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Loading training set...'", ")", "\n", "", "training_set", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "training_set_kwargs", ")", "# subclass of training.dataset.Dataset", "\n", "training_set_sampler", "=", "misc", ".", "InfiniteSampler", "(", "dataset", "=", "training_set", ",", "rank", "=", "rank", ",", "num_replicas", "=", "num_gpus", ",", "seed", "=", "random_seed", ")", "\n", "training_set_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "training_set", ",", "sampler", "=", "training_set_sampler", ",", "batch_size", "=", "batch_size", "//", "num_gpus", ",", "**", "data_loader_kwargs", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "'Num images: '", ",", "len", "(", "training_set", ")", ")", "\n", "print", "(", "'Image shape:'", ",", "training_set", ".", "image_shape", ")", "\n", "print", "(", "'Label shape:'", ",", "training_set", ".", "label_shape", ")", "\n", "print", "(", ")", "\n", "\n", "# Construct networks.", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Constructing networks...'", ")", "\n", "", "common_kwargs", "=", "dict", "(", "c_dim", "=", "training_set", ".", "label_dim", ",", "img_resolution", "=", "training_set", ".", "resolution", ",", "img_channels", "=", "training_set", ".", "num_channels", ")", "\n", "G", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "G_kwargs", ",", "**", "common_kwargs", ")", ".", "train", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "# subclass of torch.nn.Module", "\n", "D", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "D_kwargs", ",", "**", "common_kwargs", ")", ".", "train", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "# subclass of torch.nn.Module", "\n", "G_ema", "=", "copy", ".", "deepcopy", "(", "G", ")", ".", "eval", "(", ")", "\n", "\n", "# Resume from existing pickle.", "\n", "if", "(", "resume_pkl", "is", "not", "None", ")", "and", "(", "rank", "==", "0", ")", ":", "\n", "        ", "print", "(", "f'Resuming from \"{resume_pkl}\"'", ")", "\n", "with", "dnnlib", ".", "util", ".", "open_url", "(", "resume_pkl", ")", "as", "f", ":", "\n", "            ", "resume_data", "=", "legacy", ".", "load_network_pkl", "(", "f", ")", "\n", "", "for", "name", ",", "module", "in", "[", "(", "'G'", ",", "G", ")", ",", "(", "'D'", ",", "D", ")", ",", "(", "'G_ema'", ",", "G_ema", ")", "]", ":", "\n", "            ", "print", "(", "name", ",", "module", ")", "\n", "misc", ".", "copy_params_and_buffers", "(", "resume_data", "[", "name", "]", ",", "module", ",", "require_all", "=", "False", ")", "\n", "\n", "# Print network summary tables.", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "z", "=", "torch", ".", "empty", "(", "[", "batch_gpu", ",", "G", ".", "z_dim", "]", ",", "device", "=", "device", ")", "\n", "c", "=", "torch", ".", "empty", "(", "[", "batch_gpu", ",", "G", ".", "c_dim", "]", ",", "device", "=", "device", ")", "\n", "fts", "=", "torch", ".", "empty", "(", "[", "batch_gpu", ",", "f_dim", "]", ",", "device", "=", "device", ")", "\n", "img", "=", "misc", ".", "print_module_summary", "(", "G", ",", "[", "z", ",", "c", "]", ")", "\n", "misc", ".", "print_module_summary", "(", "D", ",", "[", "img", ",", "c", ",", "fts", "]", ")", "\n", "\n", "# Setup augmentation.", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Setting up augmentation...'", ")", "\n", "", "augment_pipe", "=", "None", "\n", "ada_stats", "=", "None", "\n", "if", "(", "augment_kwargs", "is", "not", "None", ")", "and", "(", "augment_p", ">", "0", "or", "ada_target", "is", "not", "None", ")", ":", "\n", "        ", "augment_pipe", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "augment_kwargs", ")", ".", "train", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "# subclass of torch.nn.Module", "\n", "augment_pipe", ".", "p", ".", "copy_", "(", "torch", ".", "as_tensor", "(", "augment_p", ")", ")", "\n", "if", "ada_target", "is", "not", "None", ":", "\n", "            ", "ada_stats", "=", "training_stats", ".", "Collector", "(", "regex", "=", "'Loss/signs/real'", ")", "\n", "\n", "# Distribute across GPUs.", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "f'Distributing across {num_gpus} GPUs...'", ")", "\n", "", "ddp_modules", "=", "dict", "(", ")", "\n", "for", "name", ",", "module", "in", "[", "(", "'G_mapping'", ",", "G", ".", "mapping", ")", ",", "(", "'G_synthesis'", ",", "G", ".", "synthesis", ")", ",", "(", "'G_mani'", ",", "G", ".", "mani", ")", ",", "(", "'D'", ",", "D", ")", ",", "(", "None", ",", "G_ema", ")", ",", "(", "'augment_pipe'", ",", "augment_pipe", ")", "]", ":", "\n", "        ", "if", "(", "num_gpus", ">", "1", ")", "and", "(", "module", "is", "not", "None", ")", "and", "len", "(", "list", "(", "module", ".", "parameters", "(", ")", ")", ")", "!=", "0", ":", "\n", "            ", "module", ".", "requires_grad_", "(", "True", ")", "\n", "module", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "module", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "module", ".", "requires_grad_", "(", "False", ")", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "ddp_modules", "[", "name", "]", "=", "module", "\n", "\n", "# Setup training phases.", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Setting up training phases...'", ")", "\n", "", "loss", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "device", "=", "device", ",", "**", "ddp_modules", ",", "**", "loss_kwargs", ")", "# subclass of training.loss.Loss", "\n", "phases", "=", "[", "]", "\n", "\n", "for", "name", ",", "module", ",", "opt_kwargs", ",", "reg_interval", "in", "[", "(", "'G'", ",", "G", ",", "G_opt_kwargs", ",", "G_reg_interval", ")", ",", "(", "'D'", ",", "D", ",", "D_opt_kwargs", ",", "D_reg_interval", ")", "]", ":", "\n", "        ", "if", "reg_interval", "is", "None", ":", "\n", "            ", "opt", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "params", "=", "module", ".", "parameters", "(", ")", ",", "**", "opt_kwargs", ")", "# subclass of torch.optim.Optimizer", "\n", "phases", "+=", "[", "dnnlib", ".", "EasyDict", "(", "name", "=", "name", "+", "'both'", ",", "module", "=", "module", ",", "opt", "=", "opt", ",", "interval", "=", "1", ")", "]", "\n", "", "else", ":", "# Lazy regularization.", "\n", "            ", "mb_ratio", "=", "reg_interval", "/", "(", "reg_interval", "+", "1", ")", "\n", "opt_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "opt_kwargs", ")", "\n", "opt_kwargs", ".", "lr", "=", "opt_kwargs", ".", "lr", "*", "mb_ratio", "\n", "opt_kwargs", ".", "betas", "=", "[", "beta", "**", "mb_ratio", "for", "beta", "in", "opt_kwargs", ".", "betas", "]", "\n", "opt", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "module", ".", "parameters", "(", ")", ",", "**", "opt_kwargs", ")", "# subclass of torch.optim.Optimizer", "\n", "phases", "+=", "[", "dnnlib", ".", "EasyDict", "(", "name", "=", "name", "+", "'main'", ",", "module", "=", "module", ",", "opt", "=", "opt", ",", "interval", "=", "1", ")", "]", "\n", "phases", "+=", "[", "dnnlib", ".", "EasyDict", "(", "name", "=", "name", "+", "'reg'", ",", "module", "=", "module", ",", "opt", "=", "opt", ",", "interval", "=", "reg_interval", ")", "]", "\n", "", "", "for", "phase", "in", "phases", ":", "\n", "        ", "phase", ".", "start_event", "=", "None", "\n", "phase", ".", "end_event", "=", "None", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "phase", ".", "start_event", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "phase", ".", "end_event", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "# Export sample images.", "\n", "", "", "grid_size", "=", "None", "\n", "grid_z", "=", "None", "\n", "grid_c", "=", "None", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Exporting sample images...'", ")", "\n", "grid_size", ",", "images", ",", "labels", "=", "setup_snapshot_image_grid", "(", "training_set", "=", "training_set", ")", "\n", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'reals.png'", ")", ",", "drange", "=", "[", "0", ",", "255", "]", ",", "grid_size", "=", "grid_size", ")", "\n", "grid_z", "=", "torch", ".", "randn", "(", "[", "labels", ".", "shape", "[", "0", "]", ",", "G", ".", "z_dim", "]", ",", "device", "=", "device", ")", ".", "split", "(", "batch_gpu", ")", "\n", "grid_c", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "to", "(", "device", ")", ".", "split", "(", "batch_gpu", ")", "\n", "\n", "images", "=", "torch", ".", "cat", "(", "[", "G_ema", "(", "z", "=", "z", ",", "c", "=", "c", ",", "noise_mode", "=", "'const'", ")", ".", "cpu", "(", ")", "for", "z", ",", "c", "in", "zip", "(", "grid_z", ",", "grid_c", ")", "]", ")", ".", "numpy", "(", ")", "\n", "#         images = torch.cat([G_ema(z=z, c=c).cpu() for z, c in zip(grid_z, grid_c)]).numpy()", "\n", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'fakes_init.png'", ")", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "grid_size", "=", "grid_size", ")", "\n", "\n", "#         text = ['This is a white and grey bird with black wings and black stripe by its eyes', ", "\n", "#                 'A bird with a brown and black wings, red crown and throat and the bill is short pointed',", "\n", "#                 'This bird has a yellow throat, belly, abdomen and sides with lots of brown streaks on them',", "\n", "#                 'This bird has a white belly and breast, with a blue crown and nape']", "\n", "\n", "#         text = ['this is a sneaker shoes, with red lace up closure',", "\n", "#                'a women, high heel shoes made of brown leather',", "\n", "#                'a slipper for men']", "\n", "\n", "text", "=", "[", "'A living area with a television and a table'", ",", "\n", "'A child eating a birthday cake near some balloons'", ",", "\n", "'A small kitchen with low a ceiling'", ",", "\n", "'A group of skiers are preparing to ski down a mountain'", ",", "\n", "'A school bus in the forest'", ",", "\n", "'A green train is coming down the tracks'", "]", "\n", "\n", "#         text = ['A man wearing glasses with beard, he has brown hair',", "\n", "#                'A woman with long blonde hair and earrings, she is smiling',", "\n", "#                'A man has blue hair and no beard']", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "clip_model", ",", "_", "=", "clip", ".", "load", "(", "\"ViT-B/32\"", ",", "device", "=", "device", ")", "# Load CLIP model here", "\n", "previous_w_list", "=", "[", "None", "]", "*", "len", "(", "grid_c", ")", "\n", "txt_fts_list", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "                ", "tokenized_text", "=", "clip", ".", "tokenize", "(", "text", "[", "step", "]", ")", ".", "to", "(", "device", ")", "\n", "txt_fts", "=", "clip_model", ".", "encode_text", "(", "tokenized_text", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "labels", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "f_txt", "=", "txt_fts", ".", "to", "(", "device", ")", "\n", "f_txt", "/=", "f_txt", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "f_txt_", "=", "f_txt", ".", "split", "(", "batch_gpu", ")", "\n", "txt_fts_list", ".", "append", "(", "f_txt_", ")", "\n", "img_list", "=", "[", "]", "\n", "#                 current_w_list = []", "\n", "for", "f", ",", "z", ",", "c", ",", "w", "in", "zip", "(", "f_txt_", ",", "grid_z", ",", "grid_c", ",", "previous_w_list", ")", ":", "\n", "                    ", "img_", ",", "w_", "=", "G_ema", "(", "z", "=", "z", ",", "c", "=", "c", ",", "fts", "=", "f", ",", "return_w", "=", "True", ",", "w", "=", "w", ",", "noise_mode", "=", "'const'", ")", "\n", "#                     img_, w_ = G_ema(z=z, c=c, fts=f, return_w=True, w=w, )", "\n", "img_list", ".", "append", "(", "img_", ")", "\n", "#                     current_w_list.append(w_)", "\n", "#                 previous_w_list = current_w_list", "\n", "", "print", "(", "[", "img", ".", "size", "(", ")", "for", "img", "in", "img_list", "]", ")", "\n", "images", "=", "torch", ".", "cat", "(", "[", "img", ".", "cpu", "(", ")", "for", "img", "in", "img_list", "]", ")", ".", "numpy", "(", ")", "\n", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'fakes_init_txt_step_%i.png'", "%", "step", ")", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "grid_size", "=", "grid_size", ")", "\n", "", "del", "clip_model", "\n", "\n", "# Initialize logs.", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Initializing logs...'", ")", "\n", "", "stats_collector", "=", "training_stats", ".", "Collector", "(", "regex", "=", "'.*'", ")", "\n", "stats_metrics", "=", "dict", "(", ")", "\n", "stats_jsonl", "=", "None", "\n", "stats_tfevents", "=", "None", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "stats_jsonl", "=", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'stats.jsonl'", ")", ",", "'wt'", ")", "\n", "try", ":", "\n", "            ", "import", "torch", ".", "utils", ".", "tensorboard", "as", "tensorboard", "\n", "stats_tfevents", "=", "tensorboard", ".", "SummaryWriter", "(", "run_dir", ")", "\n", "", "except", "ImportError", "as", "err", ":", "\n", "            ", "print", "(", "'Skipping tfevents export:'", ",", "err", ")", "\n", "\n", "# Train.", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "f'Training for {total_kimg} kimg...'", ")", "\n", "print", "(", ")", "\n", "", "cur_nimg", "=", "0", "\n", "cur_tick", "=", "0", "\n", "tick_start_nimg", "=", "cur_nimg", "\n", "tick_start_time", "=", "time", ".", "time", "(", ")", "\n", "maintenance_time", "=", "tick_start_time", "-", "start_time", "\n", "batch_idx", "=", "0", "\n", "if", "progress_fn", "is", "not", "None", ":", "\n", "        ", "progress_fn", "(", "0", ",", "total_kimg", ")", "\n", "", "while", "True", ":", "\n", "\n", "# Fetch training data.", "\n", "        ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'data_fetch'", ")", ":", "\n", "            ", "phase_real_img", ",", "phase_real_c", ",", "phase_img_features", ",", "phase_txt_features", "=", "next", "(", "training_set_iterator", ")", "\n", "phase_img_features", "/=", "phase_img_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "phase_txt_features", "/=", "phase_txt_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "phase_img_features", "=", "phase_img_features", ".", "to", "(", "device", ")", ".", "split", "(", "batch_gpu", ")", "\n", "phase_txt_features", "=", "phase_txt_features", ".", "to", "(", "device", ")", ".", "split", "(", "batch_gpu", ")", "\n", "phase_real_img", "=", "(", "phase_real_img", ".", "to", "(", "device", ")", ".", "to", "(", "torch", ".", "float32", ")", "/", "127.5", "-", "1", ")", ".", "split", "(", "batch_gpu", ")", "\n", "phase_real_c", "=", "phase_real_c", ".", "to", "(", "device", ")", ".", "split", "(", "batch_gpu", ")", "\n", "all_gen_z", "=", "torch", ".", "randn", "(", "[", "len", "(", "phases", ")", "*", "batch_size", ",", "G", ".", "z_dim", "]", ",", "device", "=", "device", ")", "\n", "all_gen_z", "=", "[", "phase_gen_z", ".", "split", "(", "batch_gpu", ")", "for", "phase_gen_z", "in", "all_gen_z", ".", "split", "(", "batch_size", ")", "]", "\n", "all_gen_c", "=", "[", "training_set", ".", "get_label", "(", "np", ".", "random", ".", "randint", "(", "len", "(", "training_set", ")", ")", ")", "for", "_", "in", "range", "(", "len", "(", "phases", ")", "*", "batch_size", ")", "]", "\n", "all_gen_c", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "all_gen_c", ")", ")", ".", "pin_memory", "(", ")", ".", "to", "(", "device", ")", "\n", "all_gen_c", "=", "[", "phase_gen_c", ".", "split", "(", "batch_gpu", ")", "for", "phase_gen_c", "in", "all_gen_c", ".", "split", "(", "batch_size", ")", "]", "\n", "\n", "# Execute training phases.", "\n", "", "for", "phase", ",", "phase_gen_z", ",", "phase_gen_c", "in", "zip", "(", "phases", ",", "all_gen_z", ",", "all_gen_c", ")", ":", "\n", "            ", "if", "batch_idx", "%", "phase", ".", "interval", "!=", "0", ":", "\n", "                ", "continue", "\n", "\n", "# Initialize gradient accumulation.", "\n", "", "if", "phase", ".", "start_event", "is", "not", "None", ":", "\n", "                ", "phase", ".", "start_event", ".", "record", "(", "torch", ".", "cuda", ".", "current_stream", "(", "device", ")", ")", "\n", "", "phase", ".", "opt", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "phase", ".", "module", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Accumulate gradients over multiple rounds.", "\n", "for", "round_idx", ",", "(", "real_img", ",", "real_c", ",", "gen_z", ",", "gen_c", ",", "real_img_feature", ",", "real_txt_feature", ")", "in", "enumerate", "(", "zip", "(", "phase_real_img", ",", "phase_real_c", ",", "phase_gen_z", ",", "phase_gen_c", ",", "phase_img_features", ",", "phase_txt_features", ")", ")", ":", "\n", "                ", "sync", "=", "(", "round_idx", "==", "batch_size", "//", "(", "batch_gpu", "*", "num_gpus", ")", "-", "1", ")", "\n", "gain", "=", "phase", ".", "interval", "\n", "loss", ".", "accumulate_gradients", "(", "phase", "=", "phase", ".", "name", ",", "real_img", "=", "real_img", ",", "real_c", "=", "real_c", ",", "gen_z", "=", "gen_z", ",", "gen_c", "=", "gen_c", ",", "sync", "=", "sync", ",", "gain", "=", "gain", ",", "img_fts", "=", "real_img_feature", ",", "txt_fts", "=", "real_txt_feature", ",", "mixing_prob", "=", "mixing_prob", ",", "temp", "=", "temp", ",", "lam", "=", "lam", ",", "gather", "=", "gather", ",", "d_use_fts", "=", "d_use_fts", ",", "itd", "=", "itd", ",", "itc", "=", "itc", ",", "iid", "=", "iid", ",", "iic", "=", "iic", ")", "\n", "\n", "# Update weights.", "\n", "", "phase", ".", "module", ".", "requires_grad_", "(", "False", ")", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "phase", ".", "name", "+", "'_opt'", ")", ":", "\n", "                ", "for", "param", "in", "phase", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "misc", ".", "nan_to_num", "(", "param", ".", "grad", ",", "nan", "=", "0", ",", "posinf", "=", "1e5", ",", "neginf", "=", "-", "1e5", ",", "out", "=", "param", ".", "grad", ")", "\n", "", "", "phase", ".", "opt", ".", "step", "(", ")", "\n", "", "if", "phase", ".", "end_event", "is", "not", "None", ":", "\n", "                ", "phase", ".", "end_event", ".", "record", "(", "torch", ".", "cuda", ".", "current_stream", "(", "device", ")", ")", "\n", "\n", "# Update G_ema.", "\n", "", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Gema'", ")", ":", "\n", "            ", "ema_nimg", "=", "ema_kimg", "*", "1000", "\n", "if", "ema_rampup", "is", "not", "None", ":", "\n", "                ", "ema_nimg", "=", "min", "(", "ema_nimg", ",", "cur_nimg", "*", "ema_rampup", ")", "\n", "", "ema_beta", "=", "0.5", "**", "(", "batch_size", "/", "max", "(", "ema_nimg", ",", "1e-8", ")", ")", "\n", "for", "p_ema", ",", "p", "in", "zip", "(", "G_ema", ".", "parameters", "(", ")", ",", "G", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "p_ema", ".", "copy_", "(", "p", ".", "lerp", "(", "p_ema", ",", "ema_beta", ")", ")", "\n", "", "for", "b_ema", ",", "b", "in", "zip", "(", "G_ema", ".", "buffers", "(", ")", ",", "G", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "b_ema", ".", "copy_", "(", "b", ")", "\n", "\n", "# Update state.", "\n", "", "", "cur_nimg", "+=", "batch_size", "\n", "batch_idx", "+=", "1", "\n", "\n", "# Execute ADA heuristic.", "\n", "if", "(", "ada_stats", "is", "not", "None", ")", "and", "(", "batch_idx", "%", "ada_interval", "==", "0", ")", ":", "\n", "            ", "ada_stats", ".", "update", "(", ")", "\n", "adjust", "=", "np", ".", "sign", "(", "ada_stats", "[", "'Loss/signs/real'", "]", "-", "ada_target", ")", "*", "(", "batch_size", "*", "ada_interval", ")", "/", "(", "ada_kimg", "*", "1000", ")", "\n", "augment_pipe", ".", "p", ".", "copy_", "(", "(", "augment_pipe", ".", "p", "+", "adjust", ")", ".", "max", "(", "misc", ".", "constant", "(", "0", ",", "device", "=", "device", ")", ")", ")", "\n", "\n", "# Perform maintenance tasks once per tick.", "\n", "", "done", "=", "(", "cur_nimg", ">=", "total_kimg", "*", "1000", ")", "\n", "if", "(", "not", "done", ")", "and", "(", "cur_tick", "!=", "0", ")", "and", "(", "cur_nimg", "<", "tick_start_nimg", "+", "kimg_per_tick", "*", "1000", ")", ":", "\n", "            ", "continue", "\n", "\n", "# Print status line, accumulating the same information in stats_collector.", "\n", "", "tick_end_time", "=", "time", ".", "time", "(", ")", "\n", "fields", "=", "[", "]", "\n", "fields", "+=", "[", "f\"tick {training_stats.report0('Progress/tick', cur_tick):<5d}\"", "]", "\n", "fields", "+=", "[", "f\"kimg {training_stats.report0('Progress/kimg', cur_nimg / 1e3):<8.1f}\"", "]", "\n", "fields", "+=", "[", "f\"time {dnnlib.util.format_time(training_stats.report0('Timing/total_sec', tick_end_time - start_time)):<12s}\"", "]", "\n", "fields", "+=", "[", "f\"sec/tick {training_stats.report0('Timing/sec_per_tick', tick_end_time - tick_start_time):<7.1f}\"", "]", "\n", "fields", "+=", "[", "f\"sec/kimg {training_stats.report0('Timing/sec_per_kimg', (tick_end_time - tick_start_time) / (cur_nimg - tick_start_nimg) * 1e3):<7.2f}\"", "]", "\n", "fields", "+=", "[", "f\"maintenance {training_stats.report0('Timing/maintenance_sec', maintenance_time):<6.1f}\"", "]", "\n", "fields", "+=", "[", "f\"cpumem {training_stats.report0('Resources/cpu_mem_gb', psutil.Process(os.getpid()).memory_info().rss / 2**30):<6.2f}\"", "]", "\n", "fields", "+=", "[", "f\"gpumem {training_stats.report0('Resources/peak_gpu_mem_gb', torch.cuda.max_memory_allocated(device) / 2**30):<6.2f}\"", "]", "\n", "torch", ".", "cuda", ".", "reset_peak_memory_stats", "(", ")", "\n", "fields", "+=", "[", "f\"augment {training_stats.report0('Progress/augment', float(augment_pipe.p.cpu()) if augment_pipe is not None else 0):.3f}\"", "]", "\n", "training_stats", ".", "report0", "(", "'Timing/total_hours'", ",", "(", "tick_end_time", "-", "start_time", ")", "/", "(", "60", "*", "60", ")", ")", "\n", "training_stats", ".", "report0", "(", "'Timing/total_days'", ",", "(", "tick_end_time", "-", "start_time", ")", "/", "(", "24", "*", "60", "*", "60", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "print", "(", "' '", ".", "join", "(", "fields", ")", ")", "\n", "\n", "# Check for abort.", "\n", "", "if", "(", "not", "done", ")", "and", "(", "abort_fn", "is", "not", "None", ")", "and", "abort_fn", "(", ")", ":", "\n", "            ", "done", "=", "True", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "print", "(", ")", "\n", "print", "(", "'Aborting...'", ")", "\n", "\n", "# Save image snapshot.", "\n", "", "", "if", "(", "rank", "==", "0", ")", "and", "(", "image_snapshot_ticks", "is", "not", "None", ")", "and", "(", "done", "or", "cur_tick", "%", "image_snapshot_ticks", "==", "0", ")", ":", "\n", "            ", "images", "=", "torch", ".", "cat", "(", "[", "G_ema", "(", "z", "=", "z", ",", "c", "=", "c", ",", "noise_mode", "=", "'const'", ")", ".", "cpu", "(", ")", "for", "z", ",", "c", "in", "zip", "(", "grid_z", ",", "grid_c", ")", "]", ")", ".", "numpy", "(", ")", "\n", "#             images = torch.cat([G_ema(z=z, c=c, ).cpu() for z, c in zip(grid_z, grid_c)]).numpy()", "\n", "\n", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "f'fakes{cur_nimg//1000:06d}.png'", ")", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "grid_size", "=", "grid_size", ")", "\n", "\n", "for", "step", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "                ", "img_list", "=", "[", "]", "\n", "style_list", "=", "[", "]", "\n", "w_list", "=", "[", "]", "\n", "for", "f", ",", "z", ",", "c", "in", "zip", "(", "txt_fts_list", "[", "step", "]", ",", "grid_z", ",", "grid_c", ")", ":", "\n", "                    ", "img_", ",", "w_", ",", "style", "=", "G_ema", "(", "z", "=", "z", ",", "c", "=", "c", ",", "fts", "=", "f", ",", "return_w", "=", "True", ",", "return_styles", "=", "True", ",", "noise_mode", "=", "'const'", ")", "\n", "#                     img_, w_, style= G_ema(z=z, c=c, fts=f, return_w=True, return_styles=True)", "\n", "img_list", ".", "append", "(", "img_", ")", "\n", "style_list", ".", "append", "(", "style", ")", "\n", "w_list", ".", "append", "(", "w_", ")", "\n", "", "images", "=", "torch", ".", "cat", "(", "[", "img", ".", "cpu", "(", ")", "for", "img", "in", "img_list", "]", ")", ".", "numpy", "(", ")", "\n", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "f'fakes_{cur_nimg//1000:06d}txt_step_{step}.png'", ")", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "grid_size", "=", "grid_size", ")", "\n", "img_list", "=", "[", "]", "\n", "for", "f", ",", "z", ",", "c", ",", "s", ",", "w", "in", "zip", "(", "txt_fts_list", "[", "step", "]", ",", "grid_z", ",", "grid_c", ",", "style_list", ",", "w_list", ")", ":", "\n", "                    ", "w", "=", "w", ".", "normal_", "(", ")", "\n", "#                     img_ = G_ema.synthesis(ws=w, fts=f, styles=s, ) # test whether we can construct using style", "\n", "img_", "=", "G_ema", ".", "synthesis", "(", "ws", "=", "w", ",", "fts", "=", "f", ",", "styles", "=", "s", ",", "noise_mode", "=", "'const'", ")", "# test whether we can construct using style", "\n", "img_list", ".", "append", "(", "img_", ")", "\n", "", "images", "=", "torch", ".", "cat", "(", "[", "img", ".", "cpu", "(", ")", "for", "img", "in", "img_list", "]", ")", ".", "numpy", "(", ")", "\n", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "f'fakes_{cur_nimg//1000:06d}style_txt_step_{step}.png'", ")", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "grid_size", "=", "grid_size", ")", "\n", "\n", "# Save network snapshot.", "\n", "", "", "snapshot_pkl", "=", "None", "\n", "snapshot_data", "=", "None", "\n", "if", "(", "network_snapshot_ticks", "is", "not", "None", ")", "and", "(", "done", "or", "cur_tick", "%", "network_snapshot_ticks", "==", "0", ")", ":", "\n", "            ", "snapshot_data", "=", "dict", "(", "training_set_kwargs", "=", "dict", "(", "training_set_kwargs", ")", ")", "\n", "\n", "snapshot_data", "[", "'args'", "]", "=", "dict", "(", "# newly added, not available in our pre-trained models", "\n", "num_gpus", "=", "num_gpus", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_gpu", "=", "batch_gpu", ",", "\n", "G_reg_interval", "=", "G_reg_interval", ",", "\n", "D_reg_interval", "=", "D_reg_interval", ",", "\n", "allow_tf32", "=", "allow_tf32", ",", "\n", "f_dim", "=", "f_dim", ",", "\n", "d_use_norm", "=", "d_use_norm", ",", "\n", "d_use_fts", "=", "d_use_fts", ",", "\n", "mixing_prob", "=", "mixing_prob", ",", "\n", "lam", "=", "lam", ",", "\n", "temp", "=", "temp", ",", "\n", "gather", "=", "gather", ",", "\n", "itd", "=", "itd", ",", "\n", "itc", "=", "itc", ",", "\n", "iid", "=", "iid", ",", "\n", "iic", "=", "iic", ",", "\n", "loss_kwargs", "=", "loss_kwargs", ",", "\n", ")", "\n", "\n", "for", "name", ",", "module", "in", "[", "(", "'G'", ",", "G", ")", ",", "(", "'D'", ",", "D", ")", ",", "(", "'G_ema'", ",", "G_ema", ")", ",", "(", "'augment_pipe'", ",", "augment_pipe", ")", "]", ":", "\n", "                ", "if", "module", "is", "not", "None", ":", "\n", "                    ", "if", "num_gpus", ">", "1", ":", "\n", "                        ", "misc", ".", "check_ddp_consistency", "(", "module", ",", "ignore_regex", "=", "r'.*\\.w_avg'", ")", "\n", "", "module", "=", "copy", ".", "deepcopy", "(", "module", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "cpu", "(", ")", "\n", "", "snapshot_data", "[", "name", "]", "=", "module", "\n", "del", "module", "# conserve memory", "\n", "", "snapshot_pkl", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "f'network-snapshot-{cur_nimg//1000:06d}.pkl'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "with", "open", "(", "snapshot_pkl", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "snapshot_data", ",", "f", ")", "\n", "\n", "# Evaluate metrics.", "\n", "", "", "", "if", "(", "snapshot_data", "is", "not", "None", ")", "and", "(", "len", "(", "metrics", ")", ">", "0", ")", ":", "\n", "            ", "if", "rank", "==", "0", ":", "\n", "                ", "print", "(", "'Evaluating metrics...'", ")", "\n", "#             for metric in metrics:", "\n", "#                 result_dict = metric_main.calc_metric(metric=metric, G=snapshot_data['G_ema'], D = snapshot_data['D'],", "\n", "#                     dataset_kwargs=training_set_kwargs, testset_kwargs=testing_set_kwargs, num_gpus=num_gpus, rank=rank, device=device, txt_recon=False, img_recon=True)", "\n", "#                 if rank == 0:", "\n", "#                     metric_main.report_metric(result_dict, run_dir=run_dir, snapshot_pkl=snapshot_pkl)", "\n", "#                 stats_metrics.update(result_dict.results)", "\n", "", "for", "metric", "in", "metrics", ":", "\n", "                ", "result_dict", "=", "metric_main", ".", "calc_metric", "(", "metric", "=", "metric", ",", "G", "=", "snapshot_data", "[", "'G_ema'", "]", ",", "D", "=", "snapshot_data", "[", "'D'", "]", ",", "\n", "dataset_kwargs", "=", "training_set_kwargs", ",", "testset_kwargs", "=", "testing_set_kwargs", ",", "num_gpus", "=", "num_gpus", ",", "rank", "=", "rank", ",", "device", "=", "device", ",", "txt_recon", "=", "True", ",", "img_recon", "=", "False", ",", "metric_only_test", "=", "metric_only_test", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                    ", "metric_main", ".", "report_metric", "(", "result_dict", ",", "run_dir", "=", "run_dir", ",", "snapshot_pkl", "=", "snapshot_pkl", ")", "\n", "", "stats_metrics", ".", "update", "(", "result_dict", ".", "results", ")", "\n", "", "", "del", "snapshot_data", "# conserve memory", "\n", "\n", "# Collect statistics.", "\n", "for", "phase", "in", "phases", ":", "\n", "            ", "value", "=", "[", "]", "\n", "if", "(", "phase", ".", "start_event", "is", "not", "None", ")", "and", "(", "phase", ".", "end_event", "is", "not", "None", ")", ":", "\n", "                ", "phase", ".", "end_event", ".", "synchronize", "(", ")", "\n", "value", "=", "phase", ".", "start_event", ".", "elapsed_time", "(", "phase", ".", "end_event", ")", "\n", "", "training_stats", ".", "report0", "(", "'Timing/'", "+", "phase", ".", "name", ",", "value", ")", "\n", "", "stats_collector", ".", "update", "(", ")", "\n", "stats_dict", "=", "stats_collector", ".", "as_dict", "(", ")", "\n", "\n", "# Update logs.", "\n", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "if", "stats_jsonl", "is", "not", "None", ":", "\n", "            ", "fields", "=", "dict", "(", "stats_dict", ",", "timestamp", "=", "timestamp", ")", "\n", "stats_jsonl", ".", "write", "(", "json", ".", "dumps", "(", "fields", ")", "+", "'\\n'", ")", "\n", "stats_jsonl", ".", "flush", "(", ")", "\n", "", "if", "stats_tfevents", "is", "not", "None", ":", "\n", "            ", "global_step", "=", "int", "(", "cur_nimg", "/", "1e3", ")", "\n", "walltime", "=", "timestamp", "-", "start_time", "\n", "for", "name", ",", "value", "in", "stats_dict", ".", "items", "(", ")", ":", "\n", "                ", "stats_tfevents", ".", "add_scalar", "(", "name", ",", "value", ".", "mean", ",", "global_step", "=", "global_step", ",", "walltime", "=", "walltime", ")", "\n", "", "for", "name", ",", "value", "in", "stats_metrics", ".", "items", "(", ")", ":", "\n", "                ", "stats_tfevents", ".", "add_scalar", "(", "f'Metrics/{name}'", ",", "value", ",", "global_step", "=", "global_step", ",", "walltime", "=", "walltime", ")", "\n", "", "stats_tfevents", ".", "flush", "(", ")", "\n", "", "if", "progress_fn", "is", "not", "None", ":", "\n", "            ", "progress_fn", "(", "cur_nimg", "//", "1000", ",", "total_kimg", ")", "\n", "\n", "# Update state.", "\n", "", "cur_tick", "+=", "1", "\n", "tick_start_nimg", "=", "cur_nimg", "\n", "tick_start_time", "=", "time", ".", "time", "(", ")", "\n", "maintenance_time", "=", "tick_start_time", "-", "tick_end_time", "\n", "if", "done", ":", "\n", "            ", "break", "\n", "\n", "# Done.", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "'Exiting...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.AugmentPipe.__init__": [[111, 173], ["super().__init__", "augment.AugmentPipe.register_buffer", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "list", "float", "float", "float", "float", "float", "augment.AugmentPipe.register_buffer", "numpy.asarray", "numpy.eye", "range", "augment.AugmentPipe.register_buffer", "torch.ones", "torch_utils.ops.upfirdn2d.setup_filter", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "\n", "xflip", "=", "0", ",", "rotate90", "=", "0", ",", "xint", "=", "0", ",", "xint_max", "=", "0.125", ",", "\n", "scale", "=", "0", ",", "rotate", "=", "0", ",", "aniso", "=", "0", ",", "xfrac", "=", "0", ",", "scale_std", "=", "0.2", ",", "rotate_max", "=", "1", ",", "aniso_std", "=", "0.2", ",", "xfrac_std", "=", "0.125", ",", "\n", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "lumaflip", "=", "0", ",", "hue", "=", "0", ",", "saturation", "=", "0", ",", "brightness_std", "=", "0.2", ",", "contrast_std", "=", "0.5", ",", "hue_max", "=", "1", ",", "saturation_std", "=", "1", ",", "\n", "imgfilter", "=", "0", ",", "imgfilter_bands", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "imgfilter_std", "=", "1", ",", "\n", "noise", "=", "0", ",", "cutout", "=", "0", ",", "noise_std", "=", "0.1", ",", "cutout_size", "=", "0.5", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'p'", ",", "torch", ".", "ones", "(", "[", "]", ")", ")", "# Overall multiplier for augmentation probability.", "\n", "\n", "# Pixel blitting.", "\n", "self", ".", "xflip", "=", "float", "(", "xflip", ")", "# Probability multiplier for x-flip.", "\n", "self", ".", "rotate90", "=", "float", "(", "rotate90", ")", "# Probability multiplier for 90 degree rotations.", "\n", "self", ".", "xint", "=", "float", "(", "xint", ")", "# Probability multiplier for integer translation.", "\n", "self", ".", "xint_max", "=", "float", "(", "xint_max", ")", "# Range of integer translation, relative to image dimensions.", "\n", "\n", "# General geometric transformations.", "\n", "self", ".", "scale", "=", "float", "(", "scale", ")", "# Probability multiplier for isotropic scaling.", "\n", "self", ".", "rotate", "=", "float", "(", "rotate", ")", "# Probability multiplier for arbitrary rotation.", "\n", "self", ".", "aniso", "=", "float", "(", "aniso", ")", "# Probability multiplier for anisotropic scaling.", "\n", "self", ".", "xfrac", "=", "float", "(", "xfrac", ")", "# Probability multiplier for fractional translation.", "\n", "self", ".", "scale_std", "=", "float", "(", "scale_std", ")", "# Log2 standard deviation of isotropic scaling.", "\n", "self", ".", "rotate_max", "=", "float", "(", "rotate_max", ")", "# Range of arbitrary rotation, 1 = full circle.", "\n", "self", ".", "aniso_std", "=", "float", "(", "aniso_std", ")", "# Log2 standard deviation of anisotropic scaling.", "\n", "self", ".", "xfrac_std", "=", "float", "(", "xfrac_std", ")", "# Standard deviation of frational translation, relative to image dimensions.", "\n", "\n", "# Color transformations.", "\n", "self", ".", "brightness", "=", "float", "(", "brightness", ")", "# Probability multiplier for brightness.", "\n", "self", ".", "contrast", "=", "float", "(", "contrast", ")", "# Probability multiplier for contrast.", "\n", "self", ".", "lumaflip", "=", "float", "(", "lumaflip", ")", "# Probability multiplier for luma flip.", "\n", "self", ".", "hue", "=", "float", "(", "hue", ")", "# Probability multiplier for hue rotation.", "\n", "self", ".", "saturation", "=", "float", "(", "saturation", ")", "# Probability multiplier for saturation.", "\n", "self", ".", "brightness_std", "=", "float", "(", "brightness_std", ")", "# Standard deviation of brightness.", "\n", "self", ".", "contrast_std", "=", "float", "(", "contrast_std", ")", "# Log2 standard deviation of contrast.", "\n", "self", ".", "hue_max", "=", "float", "(", "hue_max", ")", "# Range of hue rotation, 1 = full circle.", "\n", "self", ".", "saturation_std", "=", "float", "(", "saturation_std", ")", "# Log2 standard deviation of saturation.", "\n", "\n", "# Image-space filtering.", "\n", "self", ".", "imgfilter", "=", "float", "(", "imgfilter", ")", "# Probability multiplier for image-space filtering.", "\n", "self", ".", "imgfilter_bands", "=", "list", "(", "imgfilter_bands", ")", "# Probability multipliers for individual frequency bands.", "\n", "self", ".", "imgfilter_std", "=", "float", "(", "imgfilter_std", ")", "# Log2 standard deviation of image-space filter amplification.", "\n", "\n", "# Image-space corruptions.", "\n", "self", ".", "noise", "=", "float", "(", "noise", ")", "# Probability multiplier for additive RGB noise.", "\n", "self", ".", "cutout", "=", "float", "(", "cutout", ")", "# Probability multiplier for cutout.", "\n", "self", ".", "noise_std", "=", "float", "(", "noise_std", ")", "# Standard deviation of additive RGB noise.", "\n", "self", ".", "cutout_size", "=", "float", "(", "cutout_size", ")", "# Size of the cutout rectangle, relative to image dimensions.", "\n", "\n", "# Setup orthogonal lowpass filter for geometric augmentations.", "\n", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "\n", "# Construct filter bank for image-space filtering.", "\n", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.AugmentPipe.forward": [[174, 423], ["torch.eye", "torch.eye", "torch_utils.misc.constant", "isinstance", "torch.as_tensor", "torch.floor", "torch.where", "torch.floor", "torch.where", "torch.where", "torch.exp2", "torch.where", "torch.sqrt", "torch.where", "torch.exp2", "torch.where", "torch.where", "torch.where", "augment.matrix", "cp[].permute().flatten", "margin.min.min.max", "margin.min.min.min", "margin.min.min.ceil().to", "torch.nn.functional.pad", "torch_utils.ops.upfirdn2d.upsample2d", "torch.nn.functional.affine_grid", "torch_utils.ops.grid_sample_gradfix.grid_sample", "torch_utils.ops.upfirdn2d.downsample2d", "torch.where", "torch.exp2", "torch.where", "torch.floor", "torch.where", "torch.where", "torch.exp2", "torch.where", "images.reshape.reshape.reshape", "images.reshape.reshape.reshape", "torch_utils.misc.constant", "torch.ones", "enumerate", "Hz_prime.reshape.reshape.unsqueeze().repeat", "Hz_prime.reshape.reshape.reshape", "images.reshape.reshape.reshape", "torch.nn.functional.pad", "torch_utils.ops.conv2d_gradfix.conv2d", "torch_utils.ops.conv2d_gradfix.conv2d", "images.reshape.reshape.reshape", "torch.where", "torch.full", "torch.where", "torch.rand", "torch.arange().reshape", "torch.arange().reshape", "torch.logical_or().to", "torch.zeros_like", "torch.full_like", "augment.scale2d_inv", "torch.zeros_like", "torch.full_like", "augment.rotate2d_inv", "torch.zeros_like", "torch.full_like", "augment.translate2d_inv", "torch.ones_like", "torch.full_like", "augment.scale2d_inv", "torch.zeros_like", "torch.full_like", "augment.rotate2d_inv", "torch.ones_like", "torch.full_like", "augment.scale2d_inv", "torch.zeros_like", "torch.zeros_like", "augment.rotate2d_inv", "torch.randn", "torch.zeros_like", "torch.full_like", "augment.translate2d_inv", "matrix.t", "torch.cat().max", "torch_utils.misc.constant", "torch_utils.misc.constant", "torch_utils.misc.constant", "augment.translate2d", "augment.scale2d_inv", "augment.translate2d_inv", "augment.scale2d_inv", "torch.randn", "torch.zeros_like", "torch.full_like", "augment.translate3d", "torch.ones_like", "torch.full_like", "augment.scale3d", "numpy.asarray", "numpy.sqrt", "torch.zeros_like", "torch.full_like", "torch.zeros_like", "torch.full_like", "augment.rotate3d", "torch.ones_like", "torch.full_like", "len", "torch.exp2", "torch.where", "torch.ones", "torch.randn().abs", "torch.zeros_like", "torch.full_like", "torch.zeros_like", "torch.full_like", "torch.full_like", "torch.rand", "torch.rand", "torch.floor", "torch.rand", "torch.rand", "torch.floor", "torch.rand", "torch.round", "torch.round", "torch.randn", "torch.rand", "torch.exp2", "torch.rand", "torch.randn", "torch.rand", "torch.exp2", "torch.rand", "torch.rand", "cp[].permute", "margin.min.min.ceil", "augment.scale2d", "augment.translate2d", "augment.scale2d", "torch.rand", "torch.randn", "torch.rand", "torch.exp2", "torch.rand", "torch.rand", "torch.floor", "torch.rand", "torch.randn", "torch.rand", "torch.exp2", "torch_utils.misc.constant.ger", "C[].mean", "ValueError", "numpy.array", "torch.ones_like", "Hz_prime.reshape.reshape.unsqueeze", "Hz_prime.reshape.reshape.unsqueeze", "Hz_prime.reshape.reshape.unsqueeze", "torch.rand", "torch.randn", "torch.rand", "torch.arange", "torch.arange", "torch.logical_or", "torch.rand", "torch.erfinv", "torch.cat", "torch.erfinv", "torch.randn", "torch.rand", "torch.full_like", "torch.ones_like", "torch.randn", "torch.erfinv", "torch.erfinv", "torch.rand", "torch.erfinv", "torch.rand", "torch.erfinv", "torch_utils.misc.constant.ger", "torch.rand", "torch.erfinv", "torch_utils.misc.constant.ger", "C[].sum", "torch.exp2", "torch.erfinv", "torch.ones.square"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upsample2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix.grid_sample", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.downsample2d", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d_inv", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate3d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale3d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate3d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d", "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "images", ",", "debug_percentile", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", "and", "images", ".", "ndim", "==", "4", "\n", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "            ", "debug_percentile", "=", "torch", ".", "as_tensor", "(", "debug_percentile", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "# -------------------------------------", "\n", "# Select parameters for pixel blitting.", "\n", "# -------------------------------------", "\n", "\n", "# Initialize inverse homogeneous 2D transform: G_inv @ pixel_out ==> pixel_in", "\n", "", "I_3", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "I_3", "\n", "\n", "# Apply x-flip with probability (xflip * strength).", "\n", "if", "self", ".", "xflip", ">", "0", ":", "\n", "            ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "xflip", "*", "self", ".", "p", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "i", "=", "torch", ".", "full_like", "(", "i", ",", "torch", ".", "floor", "(", "debug_percentile", "*", "2", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "1", "-", "2", "*", "i", ",", "1", ")", "\n", "\n", "# Apply 90 degree rotations with probability (rotate90 * strength).", "\n", "", "if", "self", ".", "rotate90", ">", "0", ":", "\n", "            ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "4", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "rotate90", "*", "self", ".", "p", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "i", "=", "torch", ".", "full_like", "(", "i", ",", "torch", ".", "floor", "(", "debug_percentile", "*", "4", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "rotate2d_inv", "(", "-", "np", ".", "pi", "/", "2", "*", "i", ")", "\n", "\n", "# Apply integer translation with probability (xint * strength).", "\n", "", "if", "self", ".", "xint", ">", "0", ":", "\n", "            ", "t", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "2", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "self", ".", "xint_max", "\n", "t", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "xint", "*", "self", ".", "p", ",", "t", ",", "torch", ".", "zeros_like", "(", "t", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "t", "=", "torch", ".", "full_like", "(", "t", ",", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "xint_max", ")", "\n", "", "G_inv", "=", "G_inv", "@", "translate2d_inv", "(", "torch", ".", "round", "(", "t", "[", ":", ",", "0", "]", "*", "width", ")", ",", "torch", ".", "round", "(", "t", "[", ":", ",", "1", "]", "*", "height", ")", ")", "\n", "\n", "# --------------------------------------------------------", "\n", "# Select parameters for general geometric transformations.", "\n", "# --------------------------------------------------------", "\n", "\n", "# Apply isotropic scaling with probability (scale * strength).", "\n", "", "if", "self", ".", "scale", ">", "0", ":", "\n", "            ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "scale_std", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "scale", "*", "self", ".", "p", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "s", "=", "torch", ".", "full_like", "(", "s", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "scale_std", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "s", ")", "\n", "\n", "# Apply pre-rotation with probability p_rot.", "\n", "", "p_rot", "=", "1", "-", "torch", ".", "sqrt", "(", "(", "1", "-", "self", ".", "rotate", "*", "self", ".", "p", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", "# P(pre OR post) = p", "\n", "if", "self", ".", "rotate", ">", "0", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "rotate_max", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "p_rot", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "theta", "=", "torch", ".", "full_like", "(", "theta", ",", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "rotate_max", ")", "\n", "", "G_inv", "=", "G_inv", "@", "rotate2d_inv", "(", "-", "theta", ")", "# Before anisotropic scaling.", "\n", "\n", "# Apply anisotropic scaling with probability (aniso * strength).", "\n", "", "if", "self", ".", "aniso", ">", "0", ":", "\n", "            ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "aniso_std", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "aniso", "*", "self", ".", "p", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "s", "=", "torch", ".", "full_like", "(", "s", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "aniso_std", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "1", "/", "s", ")", "\n", "\n", "# Apply post-rotation with probability p_rot.", "\n", "", "if", "self", ".", "rotate", ">", "0", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "rotate_max", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "p_rot", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "theta", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "G_inv", "=", "G_inv", "@", "rotate2d_inv", "(", "-", "theta", ")", "# After anisotropic scaling.", "\n", "\n", "# Apply fractional translation with probability (xfrac * strength).", "\n", "", "if", "self", ".", "xfrac", ">", "0", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "2", "]", ",", "device", "=", "device", ")", "*", "self", ".", "xfrac_std", "\n", "t", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "xfrac", "*", "self", ".", "p", ",", "t", ",", "torch", ".", "zeros_like", "(", "t", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "t", "=", "torch", ".", "full_like", "(", "t", ",", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "xfrac_std", ")", "\n", "", "G_inv", "=", "G_inv", "@", "translate2d_inv", "(", "t", "[", ":", ",", "0", "]", "*", "width", ",", "t", "[", ":", ",", "1", "]", "*", "height", ")", "\n", "\n", "# ----------------------------------", "\n", "# Execute geometric transformations.", "\n", "# ----------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "G_inv", "is", "not", "I_3", ":", "\n", "\n", "# Calculate padding.", "\n", "            ", "cx", "=", "(", "width", "-", "1", ")", "/", "2", "\n", "cy", "=", "(", "height", "-", "1", ")", "/", "2", "\n", "cp", "=", "matrix", "(", "[", "-", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "cy", ",", "1", "]", ",", "[", "-", "cx", ",", "cy", ",", "1", "]", ",", "device", "=", "device", ")", "# [idx, xyz]", "\n", "cp", "=", "G_inv", "@", "cp", ".", "t", "(", ")", "# [batch, xyz, idx]", "\n", "Hz_pad", "=", "self", ".", "Hz_geom", ".", "shape", "[", "0", "]", "//", "4", "\n", "margin", "=", "cp", "[", ":", ",", ":", "2", ",", ":", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "1", ")", "# [xy, batch * idx]", "\n", "margin", "=", "torch", ".", "cat", "(", "[", "-", "margin", ",", "margin", "]", ")", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "# [x0, y0, x1, y1]", "\n", "margin", "=", "margin", "+", "misc", ".", "constant", "(", "[", "Hz_pad", "*", "2", "-", "cx", ",", "Hz_pad", "*", "2", "-", "cy", "]", "*", "2", ",", "device", "=", "device", ")", "\n", "margin", "=", "margin", ".", "max", "(", "misc", ".", "constant", "(", "[", "0", ",", "0", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "margin", "=", "margin", ".", "min", "(", "misc", ".", "constant", "(", "[", "width", "-", "1", ",", "height", "-", "1", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "mx0", ",", "my0", ",", "mx1", ",", "my1", "=", "margin", ".", "ceil", "(", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "\n", "# Pad image and adjust origin.", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "mx0", ",", "mx1", ",", "my0", ",", "my1", "]", ",", "mode", "=", "'reflect'", ")", "\n", "G_inv", "=", "translate2d", "(", "(", "mx0", "-", "mx1", ")", "/", "2", ",", "(", "my0", "-", "my1", ")", "/", "2", ")", "@", "G_inv", "\n", "\n", "# Upsample.", "\n", "images", "=", "upfirdn2d", ".", "upsample2d", "(", "x", "=", "images", ",", "f", "=", "self", ".", "Hz_geom", ",", "up", "=", "2", ")", "\n", "G_inv", "=", "scale2d", "(", "2", ",", "2", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", ",", "2", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "translate2d", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "@", "G_inv", "@", "translate2d_inv", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "\n", "\n", "# Execute transformation.", "\n", "shape", "=", "[", "batch_size", ",", "num_channels", ",", "(", "height", "+", "Hz_pad", "*", "2", ")", "*", "2", ",", "(", "width", "+", "Hz_pad", "*", "2", ")", "*", "2", "]", "\n", "G_inv", "=", "scale2d", "(", "2", "/", "images", ".", "shape", "[", "3", "]", ",", "2", "/", "images", ".", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", "/", "shape", "[", "3", "]", ",", "2", "/", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "theta", "=", "G_inv", "[", ":", ",", ":", "2", ",", ":", "]", ",", "size", "=", "shape", ",", "align_corners", "=", "False", ")", "\n", "images", "=", "grid_sample_gradfix", ".", "grid_sample", "(", "images", ",", "grid", ")", "\n", "\n", "# Downsample and crop.", "\n", "images", "=", "upfirdn2d", ".", "downsample2d", "(", "x", "=", "images", ",", "f", "=", "self", ".", "Hz_geom", ",", "down", "=", "2", ",", "padding", "=", "-", "Hz_pad", "*", "2", ",", "flip_filter", "=", "True", ")", "\n", "\n", "# --------------------------------------------", "\n", "# Select parameters for color transformations.", "\n", "# --------------------------------------------", "\n", "\n", "# Initialize homogeneous 3D transformation matrix: C @ color_in ==> color_out", "\n", "", "I_4", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "device", ")", "\n", "C", "=", "I_4", "\n", "\n", "# Apply brightness with probability (brightness * strength).", "\n", "if", "self", ".", "brightness", ">", "0", ":", "\n", "            ", "b", "=", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "brightness_std", "\n", "b", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "brightness", "*", "self", ".", "p", ",", "b", ",", "torch", ".", "zeros_like", "(", "b", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "b", "=", "torch", ".", "full_like", "(", "b", ",", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "brightness_std", ")", "\n", "", "C", "=", "translate3d", "(", "b", ",", "b", ",", "b", ")", "@", "C", "\n", "\n", "# Apply contrast with probability (contrast * strength).", "\n", "", "if", "self", ".", "contrast", ">", "0", ":", "\n", "            ", "c", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "contrast_std", ")", "\n", "c", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "contrast", "*", "self", ".", "p", ",", "c", ",", "torch", ".", "ones_like", "(", "c", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "c", "=", "torch", ".", "full_like", "(", "c", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "contrast_std", ")", ")", "\n", "", "C", "=", "scale3d", "(", "c", ",", "c", ",", "c", ")", "@", "C", "\n", "\n", "# Apply luma flip with probability (lumaflip * strength).", "\n", "", "v", "=", "misc", ".", "constant", "(", "np", ".", "asarray", "(", "[", "1", ",", "1", ",", "1", ",", "0", "]", ")", "/", "np", ".", "sqrt", "(", "3", ")", ",", "device", "=", "device", ")", "# Luma axis.", "\n", "if", "self", ".", "lumaflip", ">", "0", ":", "\n", "            ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "*", "2", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "lumaflip", "*", "self", ".", "p", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "i", "=", "torch", ".", "full_like", "(", "i", ",", "torch", ".", "floor", "(", "debug_percentile", "*", "2", ")", ")", "\n", "", "C", "=", "(", "I_4", "-", "2", "*", "v", ".", "ger", "(", "v", ")", "*", "i", ")", "@", "C", "# Householder reflection.", "\n", "\n", "# Apply hue rotation with probability (hue * strength).", "\n", "", "if", "self", ".", "hue", ">", "0", "and", "num_channels", ">", "1", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "hue_max", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "hue", "*", "self", ".", "p", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "theta", "=", "torch", ".", "full_like", "(", "theta", ",", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "hue_max", ")", "\n", "", "C", "=", "rotate3d", "(", "v", ",", "theta", ")", "@", "C", "# Rotate around v.", "\n", "\n", "# Apply saturation with probability (saturation * strength).", "\n", "", "if", "self", ".", "saturation", ">", "0", "and", "num_channels", ">", "1", ":", "\n", "            ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "*", "self", ".", "saturation_std", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "saturation", "*", "self", ".", "p", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "s", "=", "torch", ".", "full_like", "(", "s", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "saturation_std", ")", ")", "\n", "", "C", "=", "(", "v", ".", "ger", "(", "v", ")", "+", "(", "I_4", "-", "v", ".", "ger", "(", "v", ")", ")", "*", "s", ")", "@", "C", "\n", "\n", "# ------------------------------", "\n", "# Execute color transformations.", "\n", "# ------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "C", "is", "not", "I_4", ":", "\n", "            ", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", "*", "width", "]", ")", "\n", "if", "num_channels", "==", "3", ":", "\n", "                ", "images", "=", "C", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "images", "+", "C", "[", ":", ",", ":", "3", ",", "3", ":", "]", "\n", "", "elif", "num_channels", "==", "1", ":", "\n", "                ", "C", "=", "C", "[", ":", ",", ":", "3", ",", ":", "]", ".", "mean", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "images", "=", "images", "*", "C", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "2", ",", "keepdims", "=", "True", ")", "+", "C", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Image must be RGB (3 channels) or L (1 channel)'", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "\n", "# ----------------------", "\n", "# Image-space filtering.", "\n", "# ----------------------", "\n", "\n", "", "if", "self", ".", "imgfilter", ">", "0", ":", "\n", "            ", "num_bands", "=", "self", ".", "Hz_fbank", ".", "shape", "[", "0", "]", "\n", "assert", "len", "(", "self", ".", "imgfilter_bands", ")", "==", "num_bands", "\n", "expected_power", "=", "misc", ".", "constant", "(", "np", ".", "array", "(", "[", "10", ",", "1", ",", "1", ",", "1", "]", ")", "/", "13", ",", "device", "=", "device", ")", "# Expected power spectrum (1/f).", "\n", "\n", "# Apply amplification for each band with probability (imgfilter * strength * band_strength).", "\n", "g", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Global gain vector (identity).", "\n", "for", "i", ",", "band_strength", "in", "enumerate", "(", "self", ".", "imgfilter_bands", ")", ":", "\n", "                ", "t_i", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "imgfilter_std", ")", "\n", "t_i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "imgfilter", "*", "self", ".", "p", "*", "band_strength", ",", "t_i", ",", "torch", ".", "ones_like", "(", "t_i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                    ", "t_i", "=", "torch", ".", "full_like", "(", "t_i", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "imgfilter_std", ")", ")", "if", "band_strength", ">", "0", "else", "torch", ".", "ones_like", "(", "t_i", ")", "\n", "", "t", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Temporary gain vector.", "\n", "t", "[", ":", ",", "i", "]", "=", "t_i", "# Replace i'th element.", "\n", "t", "=", "t", "/", "(", "expected_power", "*", "t", ".", "square", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ".", "sqrt", "(", ")", "# Normalize power.", "\n", "g", "=", "g", "*", "t", "# Accumulate into global gain.", "\n", "\n", "# Construct combined amplification filter.", "\n", "", "Hz_prime", "=", "g", "@", "self", ".", "Hz_fbank", "# [batch, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "num_channels", ",", "1", "]", ")", "# [batch, channels, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "reshape", "(", "[", "batch_size", "*", "num_channels", ",", "1", ",", "-", "1", "]", ")", "# [batch * channels, 1, tap]", "\n", "\n", "# Apply filter.", "\n", "p", "=", "self", ".", "Hz_fbank", ".", "shape", "[", "1", "]", "//", "2", "\n", "images", "=", "images", ".", "reshape", "(", "[", "1", ",", "batch_size", "*", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "p", ",", "p", ",", "p", ",", "p", "]", ",", "mode", "=", "'reflect'", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "\n", "# ------------------------", "\n", "# Image-space corruptions.", "\n", "# ------------------------", "\n", "\n", "# Apply additive RGB noise with probability (noise * strength).", "\n", "", "if", "self", ".", "noise", ">", "0", ":", "\n", "            ", "sigma", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", ".", "abs", "(", ")", "*", "self", ".", "noise_std", "\n", "sigma", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "noise", "*", "self", ".", "p", ",", "sigma", ",", "torch", ".", "zeros_like", "(", "sigma", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "sigma", "=", "torch", ".", "full_like", "(", "sigma", ",", "torch", ".", "erfinv", "(", "debug_percentile", ")", "*", "self", ".", "noise_std", ")", "\n", "", "images", "=", "images", "+", "torch", ".", "randn", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ",", "device", "=", "device", ")", "*", "sigma", "\n", "\n", "# Apply cutout with probability (cutout * strength).", "\n", "", "if", "self", ".", "cutout", ">", "0", ":", "\n", "            ", "size", "=", "torch", ".", "full", "(", "[", "batch_size", ",", "2", ",", "1", ",", "1", ",", "1", "]", ",", "self", ".", "cutout_size", ",", "device", "=", "device", ")", "\n", "size", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "cutout", "*", "self", ".", "p", ",", "size", ",", "torch", ".", "zeros_like", "(", "size", ")", ")", "\n", "center", "=", "torch", ".", "rand", "(", "[", "batch_size", ",", "2", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "size", "=", "torch", ".", "full_like", "(", "size", ",", "self", ".", "cutout_size", ")", "\n", "center", "=", "torch", ".", "full_like", "(", "center", ",", "debug_percentile", ")", "\n", "", "coord_x", "=", "torch", ".", "arange", "(", "width", ",", "device", "=", "device", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "coord_y", "=", "torch", ".", "arange", "(", "height", ",", "device", "=", "device", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "mask_x", "=", "(", "(", "(", "coord_x", "+", "0.5", ")", "/", "width", "-", "center", "[", ":", ",", "0", "]", ")", ".", "abs", "(", ")", ">=", "size", "[", ":", ",", "0", "]", "/", "2", ")", "\n", "mask_y", "=", "(", "(", "(", "coord_y", "+", "0.5", ")", "/", "height", "-", "center", "[", ":", ",", "1", "]", ")", ".", "abs", "(", ")", ">=", "size", "[", ":", ",", "1", "]", "/", "2", ")", "\n", "mask", "=", "torch", ".", "logical_or", "(", "mask_x", ",", "mask_y", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "images", "=", "images", "*", "mask", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix": [[36, 45], ["all", "torch.stack().reshape", "len", "torch_utils.misc.constant", "isinstance", "numpy.asarray", "isinstance", "torch_utils.misc.constant", "torch.stack", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant"], ["def", "matrix", "(", "*", "rows", ",", "device", "=", "None", ")", ":", "\n", "    ", "assert", "all", "(", "len", "(", "row", ")", "==", "len", "(", "rows", "[", "0", "]", ")", "for", "row", "in", "rows", ")", "\n", "elems", "=", "[", "x", "for", "row", "in", "rows", "for", "x", "in", "row", "]", "\n", "ref", "=", "[", "x", "for", "x", "in", "elems", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "]", "\n", "if", "len", "(", "ref", ")", "==", "0", ":", "\n", "        ", "return", "misc", ".", "constant", "(", "np", ".", "asarray", "(", "rows", ")", ",", "device", "=", "device", ")", "\n", "", "assert", "device", "is", "None", "or", "device", "==", "ref", "[", "0", "]", ".", "device", "\n", "elems", "=", "[", "x", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "misc", ".", "constant", "(", "x", ",", "shape", "=", "ref", "[", "0", "]", ".", "shape", ",", "device", "=", "ref", "[", "0", "]", ".", "device", ")", "for", "x", "in", "elems", "]", "\n", "return", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "ref", "[", "0", "]", ".", "shape", "+", "(", "len", "(", "rows", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d": [[46, 52], ["augment.matrix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix"], ["", "def", "translate2d", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate3d": [[53, 60], ["augment.matrix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix"], ["", "def", "translate3d", "(", "tx", ",", "ty", ",", "tz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "tz", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d": [[61, 67], ["augment.matrix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix"], ["", "def", "scale2d", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale3d": [[68, 75], ["augment.matrix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix"], ["", "def", "scale3d", "(", "sx", ",", "sy", ",", "sz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "sz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate2d": [[76, 82], ["augment.matrix", "torch.cos", "torch.sin", "torch.sin", "torch.cos"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix"], ["", "def", "rotate2d", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "torch", ".", "cos", "(", "theta", ")", ",", "torch", ".", "sin", "(", "-", "theta", ")", ",", "0", "]", ",", "\n", "[", "torch", ".", "sin", "(", "theta", ")", ",", "torch", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate3d": [[83, 92], ["torch.sin", "torch.cos", "augment.matrix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.matrix"], ["", "def", "rotate3d", "(", "v", ",", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "vx", "=", "v", "[", "...", ",", "0", "]", ";", "vy", "=", "v", "[", "...", ",", "1", "]", ";", "vz", "=", "v", "[", "...", ",", "2", "]", "\n", "s", "=", "torch", ".", "sin", "(", "theta", ")", ";", "c", "=", "torch", ".", "cos", "(", "theta", ")", ";", "cc", "=", "1", "-", "c", "\n", "return", "matrix", "(", "\n", "[", "vx", "*", "vx", "*", "cc", "+", "c", ",", "vx", "*", "vy", "*", "cc", "-", "vz", "*", "s", ",", "vx", "*", "vz", "*", "cc", "+", "vy", "*", "s", ",", "0", "]", ",", "\n", "[", "vy", "*", "vx", "*", "cc", "+", "vz", "*", "s", ",", "vy", "*", "vy", "*", "cc", "+", "c", ",", "vy", "*", "vz", "*", "cc", "-", "vx", "*", "s", ",", "0", "]", ",", "\n", "[", "vz", "*", "vx", "*", "cc", "-", "vy", "*", "s", ",", "vz", "*", "vy", "*", "cc", "+", "vx", "*", "s", ",", "vz", "*", "vz", "*", "cc", "+", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d_inv": [[93, 95], ["augment.translate2d"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.translate2d"], ["", "def", "translate2d_inv", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "translate2d", "(", "-", "tx", ",", "-", "ty", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d_inv": [[96, 98], ["augment.scale2d"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.scale2d"], ["", "def", "scale2d_inv", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "scale2d", "(", "1", "/", "sx", ",", "1", "/", "sy", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate2d_inv": [[99, 101], ["augment.rotate2d"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.training.augment.rotate2d"], ["", "def", "rotate2d_inv", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "rotate2d", "(", "-", "theta", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.FullyConnectedLayer.__init__": [[83, 97], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "numpy.sqrt", "torch.randn", "torch.full", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_features", ",", "# Number of input features.", "\n", "out_features", ",", "# Number of output features.", "\n", "bias", "=", "True", ",", "# Apply additive bias before the activation function?", "\n", "activation", "=", "'linear'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "lr_multiplier", "=", "1", ",", "# Learning rate multiplier.", "\n", "bias_init", "=", "0", ",", "# Initial value for the additive bias.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_features", ",", "in_features", "]", ")", "/", "lr_multiplier", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "full", "(", "[", "out_features", "]", ",", "np", ".", "float32", "(", "bias_init", ")", ")", ")", "if", "bias", "else", "None", "\n", "self", ".", "weight_gain", "=", "lr_multiplier", "/", "np", ".", "sqrt", "(", "in_features", ")", "\n", "self", ".", "bias_gain", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.FullyConnectedLayer.forward": [[98, 112], ["networks.FullyConnectedLayer.weight.to", "b.to.to.to", "torch.addmm", "torch_utils.ops.bias_act.bias_act.matmul", "torch_utils.ops.bias_act.bias_act", "b.to.to.unsqueeze", "w.t", "w.t"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "to", "(", "x", ".", "dtype", ")", "*", "self", ".", "weight_gain", "\n", "b", "=", "self", ".", "bias", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "b", "=", "b", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "self", ".", "bias_gain", "!=", "1", ":", "\n", "                ", "b", "=", "b", "*", "self", ".", "bias_gain", "\n", "\n", "", "", "if", "self", ".", "activation", "==", "'linear'", "and", "b", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "addmm", "(", "b", ".", "unsqueeze", "(", "0", ")", ",", "x", ",", "w", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "matmul", "(", "w", ".", "t", "(", ")", ")", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "b", ",", "act", "=", "self", ".", "activation", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.Conv2dLayer.__init__": [[117, 152], ["super().__init__", "networks.Conv2dLayer.register_buffer", "torch.randn().to", "torch_utils.ops.upfirdn2d.setup_filter", "numpy.sqrt", "torch.zeros", "torch.nn.Parameter", "networks.Conv2dLayer.register_buffer", "torch.randn", "torch.nn.Parameter", "networks.Conv2dLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "# Number of input channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "kernel_size", ",", "# Width and height of the convolution kernel.", "\n", "bias", "=", "True", ",", "# Apply additive bias before the activation function?", "\n", "activation", "=", "'linear'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "up", "=", "1", ",", "# Integer upsampling factor.", "\n", "down", "=", "1", ",", "# Integer downsampling factor.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output to +-X, None = disable clamping.", "\n", "channels_last", "=", "False", ",", "# Expect the input to have memory_format=channels_last?", "\n", "trainable", "=", "True", ",", "# Update the weights of this layer during training?", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "up", "=", "up", "\n", "self", ".", "down", "=", "down", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "register_buffer", "(", "'resample_filter'", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "self", ".", "weight_gain", "=", "1", "/", "np", ".", "sqrt", "(", "in_channels", "*", "(", "kernel_size", "**", "2", ")", ")", "\n", "self", ".", "act_gain", "=", "bias_act", ".", "activation_funcs", "[", "activation", "]", ".", "def_gain", "\n", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "channels_last", "else", "torch", ".", "contiguous_format", "\n", "weight", "=", "torch", ".", "randn", "(", "[", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", ".", "to", "(", "memory_format", "=", "memory_format", ")", "\n", "bias", "=", "torch", ".", "zeros", "(", "[", "out_channels", "]", ")", "if", "bias", "else", "None", "\n", "if", "trainable", ":", "\n", "            ", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "weight", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "bias", ")", "if", "bias", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "register_buffer", "(", "'bias'", ",", "bias", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.Conv2dLayer.forward": [[153, 164], ["torch_utils.ops.conv2d_resample.conv2d_resample", "torch_utils.ops.bias_act.bias_act", "networks.Conv2dLayer.bias.to", "w.to"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample.conv2d_resample", "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "gain", "=", "1", ",", "emb", "=", "None", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", "*", "self", ".", "weight_gain", "\n", "b", "=", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", "if", "self", ".", "bias", "is", "not", "None", "else", "None", "\n", "flip_weight", "=", "(", "self", ".", "up", "==", "1", ")", "# slightly faster", "\n", "x", "=", "conv2d_resample", ".", "conv2d_resample", "(", "x", "=", "x", ",", "w", "=", "w", ".", "to", "(", "x", ".", "dtype", ")", ",", "f", "=", "self", ".", "resample_filter", ",", "up", "=", "self", ".", "up", ",", "down", "=", "self", ".", "down", ",", "padding", "=", "self", ".", "padding", ",", "flip_weight", "=", "flip_weight", ")", "\n", "if", "emb", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "emb", "\n", "", "act_gain", "=", "self", ".", "act_gain", "*", "gain", "\n", "act_clamp", "=", "self", ".", "conv_clamp", "*", "gain", "if", "self", ".", "conv_clamp", "is", "not", "None", "else", "None", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "b", ",", "act", "=", "self", ".", "activation", ",", "gain", "=", "act_gain", ",", "clamp", "=", "act_clamp", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.MappingNetwork.__init__": [[169, 207], ["super().__init__", "range", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "setattr", "networks.MappingNetwork.register_buffer", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality, 0 = no latent.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality, 0 = no label.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "num_ws", ",", "# Number of intermediate latents to output, None = do not broadcast.", "\n", "num_layers", "=", "8", ",", "# Number of mapping layers.", "\n", "embed_features", "=", "None", ",", "# Label embedding dimensionality, None = same as w_dim.", "\n", "layer_features", "=", "None", ",", "# Number of intermediate features in the mapping layers, None = same as w_dim.", "\n", "activation", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "lr_multiplier", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "w_avg_beta", "=", "0.995", ",", "# Decay for tracking the moving average of W during training, None = do not track.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "num_ws", "=", "num_ws", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "w_avg_beta", "=", "w_avg_beta", "\n", "\n", "if", "embed_features", "is", "None", ":", "\n", "            ", "embed_features", "=", "w_dim", "\n", "", "if", "c_dim", "==", "0", ":", "\n", "            ", "embed_features", "=", "0", "\n", "", "if", "layer_features", "is", "None", ":", "\n", "            ", "layer_features", "=", "w_dim", "\n", "", "features_list", "=", "[", "z_dim", "+", "embed_features", "]", "+", "[", "layer_features", "]", "*", "(", "num_layers", "-", "1", ")", "+", "[", "w_dim", "]", "\n", "\n", "if", "c_dim", ">", "0", ":", "\n", "            ", "self", ".", "embed", "=", "FullyConnectedLayer", "(", "c_dim", ",", "embed_features", ")", "\n", "", "for", "idx", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "in_features", "=", "features_list", "[", "idx", "]", "\n", "out_features", "=", "features_list", "[", "idx", "+", "1", "]", "\n", "layer", "=", "FullyConnectedLayer", "(", "in_features", ",", "out_features", ",", "activation", "=", "activation", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f'fc{idx}'", ",", "layer", ")", "\n", "\n", "", "if", "num_ws", "is", "not", "None", "and", "w_avg_beta", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'w_avg'", ",", "torch", ".", "zeros", "(", "[", "w_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.MappingNetwork.forward": [[208, 244], ["range", "torch.autograd.profiler.record_function", "getattr", "getattr.", "torch_utils.misc.assert_shape", "networks.normalize_2nd_moment", "torch_utils.misc.assert_shape", "networks.normalize_2nd_moment", "torch.autograd.profiler.record_function", "networks.MappingNetwork.w_avg.copy_", "torch.autograd.profiler.record_function", "networks.MappingNetwork.unsqueeze().repeat", "torch.autograd.profiler.record_function", "z.to", "networks.MappingNetwork.embed", "torch.cat", "networks.MappingNetwork.detach().mean().lerp", "networks.MappingNetwork.w_avg.lerp", "networks.MappingNetwork.w_avg.lerp", "c.to", "networks.MappingNetwork.unsqueeze", "networks.MappingNetwork.detach().mean", "networks.MappingNetwork.detach"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.normalize_2nd_moment", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.normalize_2nd_moment", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "skip_w_avg_update", "=", "False", ")", ":", "\n", "# Embed, normalize, and concat inputs.", "\n", "        ", "x", "=", "None", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'input'", ")", ":", "\n", "            ", "if", "self", ".", "z_dim", ">", "0", ":", "\n", "                ", "misc", ".", "assert_shape", "(", "z", ",", "[", "None", ",", "self", ".", "z_dim", "]", ")", "\n", "x", "=", "normalize_2nd_moment", "(", "z", ".", "to", "(", "torch", ".", "float32", ")", ")", "\n", "", "if", "self", ".", "c_dim", ">", "0", ":", "\n", "                ", "misc", ".", "assert_shape", "(", "c", ",", "[", "None", ",", "self", ".", "c_dim", "]", ")", "\n", "y", "=", "normalize_2nd_moment", "(", "self", ".", "embed", "(", "c", ".", "to", "(", "torch", ".", "float32", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "if", "x", "is", "not", "None", "else", "y", "\n", "\n", "# Main layers.", "\n", "", "", "for", "idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "f'fc{idx}'", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "\n", "# Update moving average of W.", "\n", "", "if", "self", ".", "w_avg_beta", "is", "not", "None", "and", "self", ".", "training", "and", "not", "skip_w_avg_update", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'update_w_avg'", ")", ":", "\n", "                ", "self", ".", "w_avg", ".", "copy_", "(", "x", ".", "detach", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "lerp", "(", "self", ".", "w_avg", ",", "self", ".", "w_avg_beta", ")", ")", "\n", "\n", "# Broadcast.", "\n", "", "", "if", "self", ".", "num_ws", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'broadcast'", ")", ":", "\n", "                ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "self", ".", "num_ws", ",", "1", "]", ")", "\n", "\n", "# Apply truncation.", "\n", "", "", "if", "truncation_psi", "!=", "1", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'truncate'", ")", ":", "\n", "                ", "assert", "self", ".", "w_avg_beta", "is", "not", "None", "\n", "if", "self", ".", "num_ws", "is", "None", "or", "truncation_cutoff", "is", "None", ":", "\n", "                    ", "x", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", ",", "truncation_psi", ")", "\n", "", "else", ":", "\n", "                    ", "x", "[", ":", ",", ":", "truncation_cutoff", "]", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", "[", ":", ",", ":", "truncation_cutoff", "]", ",", "truncation_psi", ")", "\n", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.ManiNetwork.__init__": [[247, 305], ["super().__init__", "range", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "setattr", "range", "networks.ManiNetwork.register_buffer", "networks.FullyConnectedLayer", "setattr", "range", "range", "torch.zeros", "networks.FullyConnectedLayer", "setattr", "networks.FullyConnectedLayer", "setattr"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality, 0 = no latent.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality, 0 = no label.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "num_ws", ",", "# Number of intermediate latents to output, None = do not broadcast.", "\n", "num_layers", "=", "8", ",", "# Number of mapping layers.", "\n", "embed_features", "=", "None", ",", "# Label embedding dimensionality, None = same as w_dim.", "\n", "layer_features", "=", "None", ",", "# Number of intermediate features in the mapping layers, None = same as w_dim.", "\n", "activation", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "lr_multiplier", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "w_avg_beta", "=", "0.995", ",", "# Decay for tracking the moving average of W during training, None = do not track.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "num_ws", "=", "num_ws", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "w_avg_beta", "=", "w_avg_beta", "\n", "self", ".", "f_dim", "=", "z_dim", "\n", "self", ".", "structure", "=", "2", "\n", "\n", "if", "embed_features", "is", "None", ":", "\n", "            ", "embed_features", "=", "w_dim", "\n", "", "if", "c_dim", "==", "0", ":", "\n", "            ", "embed_features", "=", "0", "\n", "", "if", "layer_features", "is", "None", ":", "\n", "            ", "layer_features", "=", "w_dim", "\n", "", "features_list", "=", "[", "z_dim", "+", "embed_features", "]", "+", "[", "layer_features", "]", "*", "(", "num_layers", "-", "1", ")", "+", "[", "w_dim", "]", "\n", "\n", "if", "c_dim", ">", "0", ":", "\n", "            ", "self", ".", "embed", "=", "FullyConnectedLayer", "(", "c_dim", ",", "embed_features", ")", "\n", "", "for", "idx", "in", "range", "(", "num_layers", "-", "4", ")", ":", "\n", "            ", "in_features", "=", "features_list", "[", "idx", "]", "\n", "out_features", "=", "features_list", "[", "idx", "+", "1", "]", "\n", "layer", "=", "FullyConnectedLayer", "(", "in_features", ",", "out_features", ",", "activation", "=", "activation", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f'fc{idx}'", ",", "layer", ")", "\n", "\n", "", "ad", "=", "[", "activation", ",", "activation", ",", "activation", ",", "'linear'", "]", "\n", "\n", "if", "self", ".", "structure", "==", "1", ":", "\n", "            ", "ch", "=", "[", "layer_features", "*", "2", "]", "+", "[", "layer_features", "*", "2", "]", "*", "3", "+", "[", "w_dim", "]", "\n", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "                ", "layer", "=", "FullyConnectedLayer", "(", "ch", "[", "idx", "]", ",", "ch", "[", "1", "+", "idx", "]", ",", "activation", "=", "ad", "[", "idx", "]", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f'w_fts_{idx}'", ",", "layer", ")", "\n", "# #             setattr(self, f's_w_fts_{idx}', layer)", "\n", "", "", "elif", "self", ".", "structure", "==", "2", ":", "\n", "            ", "ch", "=", "[", "layer_features", "]", "+", "[", "layer_features", "]", "*", "3", "+", "[", "w_dim", "]", "\n", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "                ", "layer", "=", "FullyConnectedLayer", "(", "ch", "[", "idx", "]", ",", "ch", "[", "1", "+", "idx", "]", ",", "activation", "=", "ad", "[", "idx", "]", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f'bias{idx}'", ",", "layer", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "                ", "layer", "=", "FullyConnectedLayer", "(", "ch", "[", "idx", "]", ",", "ch", "[", "idx", "+", "1", "]", ",", "activation", "=", "ad", "[", "idx", "]", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f'scale{idx}'", ",", "layer", ")", "\n", "#           ", "\n", "", "", "if", "num_ws", "is", "not", "None", "and", "w_avg_beta", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'w_avg'", ",", "torch", ".", "zeros", "(", "[", "w_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.ManiNetwork.forward": [[309, 364], ["range", "torch.autograd.profiler.record_function", "getattr", "getattr.", "range", "torch_utils.misc.assert_shape", "networks.normalize_2nd_moment", "torch_utils.misc.assert_shape", "networks.normalize_2nd_moment", "getattr", "getattr.", "range", "range", "torch.autograd.profiler.record_function", "networks.ManiNetwork.w_avg.copy_", "torch.autograd.profiler.record_function", "networks.ManiNetwork.unsqueeze().repeat", "torch.autograd.profiler.record_function", "z.to", "networks.ManiNetwork.embed", "torch.cat", "getattr", "getattr.", "getattr", "getattr.", "networks.ManiNetwork.detach().mean().lerp", "networks.ManiNetwork.w_avg.lerp", "networks.ManiNetwork.w_avg.lerp", "c.to", "networks.ManiNetwork.unsqueeze", "networks.ManiNetwork.detach().mean", "networks.ManiNetwork.detach"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.normalize_2nd_moment", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.normalize_2nd_moment", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "w", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "skip_w_avg_update", "=", "False", ")", ":", "\n", "# Embed, normalize, and concat inputs.", "\n", "        ", "x", "=", "None", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'input'", ")", ":", "\n", "            ", "if", "self", ".", "z_dim", ">", "0", ":", "\n", "                ", "misc", ".", "assert_shape", "(", "z", ",", "[", "None", ",", "self", ".", "z_dim", "]", ")", "\n", "x", "=", "normalize_2nd_moment", "(", "z", ".", "to", "(", "torch", ".", "float32", ")", ")", "\n", "", "if", "self", ".", "c_dim", ">", "0", ":", "\n", "                ", "misc", ".", "assert_shape", "(", "c", ",", "[", "None", ",", "self", ".", "c_dim", "]", ")", "\n", "y", "=", "normalize_2nd_moment", "(", "self", ".", "embed", "(", "c", ".", "to", "(", "torch", ".", "float32", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "if", "x", "is", "not", "None", "else", "y", "\n", "\n", "# Main layers.", "\n", "", "", "for", "idx", "in", "range", "(", "self", ".", "num_layers", "-", "4", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "f'fc{idx}'", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "structure", "==", "1", ":", "\n", "            ", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "                ", "layer_w_fts", "=", "getattr", "(", "self", ",", "f'w_fts_{idx}'", ")", "\n", "x", "=", "layer_w_fts", "(", "x", ")", "\n", "\n", "", "", "elif", "self", ".", "structure", "==", "2", ":", "\n", "            ", "bias", "=", "x", "#w[:, 0, :]", "\n", "scale", "=", "x", "#w[:, 0, :]", "\n", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "                ", "layer_bias", "=", "getattr", "(", "self", ",", "f'bias{idx}'", ")", "\n", "bias", "=", "layer_bias", "(", "bias", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "                ", "layer_scale", "=", "getattr", "(", "self", ",", "f'scale{idx}'", ")", "\n", "scale", "=", "layer_scale", "(", "scale", ")", "\n", "\n", "", "x", "=", "w", "[", ":", ",", "0", ",", ":", "]", "*", "scale", "+", "bias", "\n", "\n", "# Update moving average of W.", "\n", "", "if", "self", ".", "w_avg_beta", "is", "not", "None", "and", "self", ".", "training", "and", "not", "skip_w_avg_update", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'update_w_avg'", ")", ":", "\n", "                ", "self", ".", "w_avg", ".", "copy_", "(", "x", ".", "detach", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "lerp", "(", "self", ".", "w_avg", ",", "self", ".", "w_avg_beta", ")", ")", "\n", "\n", "# Broadcast.", "\n", "", "", "if", "self", ".", "num_ws", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'broadcast'", ")", ":", "\n", "                ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "self", ".", "num_ws", ",", "1", "]", ")", "\n", "\n", "# Apply truncation.", "\n", "", "", "if", "truncation_psi", "!=", "1", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'truncate'", ")", ":", "\n", "                ", "assert", "self", ".", "w_avg_beta", "is", "not", "None", "\n", "if", "self", ".", "num_ws", "is", "None", "or", "truncation_cutoff", "is", "None", ":", "\n", "                    ", "x", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", ",", "truncation_psi", ")", "\n", "", "else", ":", "\n", "                    ", "x", "[", ":", ",", ":", "truncation_cutoff", "]", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", "[", ":", ",", ":", "truncation_cutoff", "]", ",", "truncation_psi", ")", "\n", "\n", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.SynthesisLayer.__init__": [[370, 432], ["super().__init__", "networks.SynthesisLayer.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch_utils.ops.upfirdn2d.setup_filter", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "torch.randn().to", "networks.SynthesisLayer.register_buffer", "torch.nn.Parameter", "torch.zeros", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "torch.randn", "torch.zeros", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "torch.randn", "networks.FullyConnectedLayer"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "# Number of input channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "resolution", ",", "# Resolution of this layer.", "\n", "kernel_size", "=", "3", ",", "# Convolution kernel size.", "\n", "up", "=", "1", ",", "# Integer upsampling factor.", "\n", "use_noise", "=", "True", ",", "# Enable noise input?", "\n", "activation", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "channels_last", "=", "False", ",", "# Use channels_last format for the weights?", "\n", "structure", "=", "0", ",", "\n", "f_dim", "=", "512", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "up", "=", "up", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "register_buffer", "(", "'resample_filter'", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "self", ".", "act_gain", "=", "bias_act", ".", "activation_funcs", "[", "activation", "]", ".", "def_gain", "\n", "self", ".", "structure", "=", "structure", "\n", "_f_dim", "=", "(", "f_dim", "+", "512", ")", "//", "2", "\n", "\n", "if", "self", ".", "structure", "==", "0", ":", "\n", "            ", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "# initial affine style layer", "\n", "\n", "self", ".", "pre_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "# pre process text features  ", "\n", "self", ".", "pre_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "\n", "\n", "self", ".", "affine_0", "=", "FullyConnectedLayer", "(", "512", ",", "in_channels", ",", "bias_init", "=", "1", ")", "# f([w, txt])", "\n", "\n", "", "elif", "self", ".", "structure", "==", "1", ":", "\n", "            ", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "#wed", "\n", "self", ".", "scale_layer_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "scale_layer_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "scale_layer_2", "=", "FullyConnectedLayer", "(", "512", ",", "in_channels", ",", ")", "#, lr_multiplier=0.01)#wed", "\n", "\n", "self", ".", "bias_layer_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "bias_layer_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "bias_layer_2", "=", "FullyConnectedLayer", "(", "512", ",", "in_channels", ",", ")", "#, lr_multiplier=0.01)#wed", "\n", "\n", "", "elif", "self", ".", "structure", "==", "2", ":", "\n", "            ", "self", ".", "pre_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "# pre process text features  ", "\n", "self", ".", "pre_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "\n", "self", ".", "affine_0", "=", "FullyConnectedLayer", "(", "w_dim", "+", "512", ",", "in_channels", ",", "bias_init", "=", "1", ")", "# f([w, txt])", "\n", "\n", "\n", "", "elif", "self", ".", "structure", "==", "3", ":", "\n", "            ", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'Structure undefined'", ")", "\n", "\n", "", "memory_format", "=", "torch", ".", "channels_last", "if", "channels_last", "else", "torch", ".", "contiguous_format", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", ".", "to", "(", "memory_format", "=", "memory_format", ")", ")", "\n", "if", "use_noise", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'noise_const'", ",", "torch", ".", "randn", "(", "[", "resolution", ",", "resolution", "]", ")", ")", "\n", "self", ".", "noise_strength", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "out_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.SynthesisLayer.forward": [[433, 481], ["torch_utils.misc.assert_shape", "networks.modulated_conv2d", "torch_utils.ops.bias_act.bias_act", "networks.SynthesisLayer.bias.to", "networks.SynthesisLayer.pre_0", "networks.SynthesisLayer.pre_1", "networks.SynthesisLayer.affine", "networks.SynthesisLayer.affine_0", "torch.randn", "networks.SynthesisLayer.scale_layer_0", "networks.SynthesisLayer.scale_layer_1", "networks.SynthesisLayer.scale_layer_2", "networks.SynthesisLayer.bias_layer_0", "networks.SynthesisLayer.bias_layer_1", "networks.SynthesisLayer.bias_layer_2", "networks.SynthesisLayer.affine", "networks.SynthesisLayer.pre_0", "networks.SynthesisLayer.pre_1", "networks.SynthesisLayer.affine_0", "torch.cat", "networks.SynthesisLayer.affine"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.modulated_conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "fts", ",", "styles", "=", "None", ",", "noise_mode", "=", "'random'", ",", "fused_modconv", "=", "True", ",", "gain", "=", "1", ")", ":", "\n", "        ", "assert", "noise_mode", "in", "[", "'random'", ",", "'const'", ",", "'none'", "]", "\n", "in_resolution", "=", "self", ".", "resolution", "//", "self", ".", "up", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "weight", ".", "shape", "[", "1", "]", ",", "in_resolution", ",", "in_resolution", "]", ")", "\n", "\n", "if", "styles", "is", "None", ":", "\n", "            ", "if", "self", ".", "structure", "==", "0", ":", "\n", "                ", "fts", "=", "self", ".", "pre_0", "(", "fts", ")", "\n", "fts", "=", "self", ".", "pre_1", "(", "fts", ")", "\n", "styles_init", "=", "self", ".", "affine", "(", "w", ")", "\n", "styles_res", "=", "self", ".", "affine_0", "(", "fts", ")", "\n", "styles", "=", "styles_init", "+", "styles_res", "\n", "", "elif", "self", ".", "structure", "==", "1", ":", "\n", "                ", "scales", "=", "self", ".", "scale_layer_0", "(", "fts", ")", "\n", "scales", "=", "self", ".", "scale_layer_1", "(", "scales", ")", "\n", "scales", "=", "self", ".", "scale_layer_2", "(", "scales", ")", "\n", "biases", "=", "self", ".", "bias_layer_0", "(", "fts", ")", "\n", "biases", "=", "self", ".", "bias_layer_1", "(", "biases", ")", "\n", "biases", "=", "self", ".", "bias_layer_2", "(", "biases", ")", "\n", "styles", "=", "self", ".", "affine", "(", "w", ")", "\n", "styles", "=", "biases", "+", "styles", "*", "scales", "\n", "", "elif", "self", ".", "structure", "==", "2", ":", "\n", "                ", "fts", "=", "self", ".", "pre_0", "(", "fts", ")", "\n", "fts", "=", "self", ".", "pre_1", "(", "fts", ")", "\n", "styles", "=", "self", ".", "affine_0", "(", "torch", ".", "cat", "(", "[", "fts", ",", "w", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "elif", "self", ".", "structure", "==", "3", ":", "\n", "                ", "styles", "=", "self", ".", "affine", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "raise", "(", "'structure undefined'", ")", "\n", "\n", "", "", "noise", "=", "None", "\n", "if", "self", ".", "use_noise", "and", "noise_mode", "==", "'random'", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength", "\n", "", "if", "self", ".", "use_noise", "and", "noise_mode", "==", "'const'", ":", "\n", "            ", "noise", "=", "self", ".", "noise_const", "*", "self", ".", "noise_strength", "\n", "\n", "", "flip_weight", "=", "(", "self", ".", "up", "==", "1", ")", "# slightly faster", "\n", "x", "=", "modulated_conv2d", "(", "x", "=", "x", ",", "weight", "=", "self", ".", "weight", ",", "styles", "=", "styles", ",", "noise", "=", "noise", ",", "up", "=", "self", ".", "up", ",", "\n", "padding", "=", "self", ".", "padding", ",", "resample_filter", "=", "self", ".", "resample_filter", ",", "flip_weight", "=", "flip_weight", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "\n", "act_gain", "=", "self", ".", "act_gain", "*", "gain", "\n", "act_clamp", "=", "self", ".", "conv_clamp", "*", "gain", "if", "self", ".", "conv_clamp", "is", "not", "None", "else", "None", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", ",", "act", "=", "self", ".", "activation", ",", "gain", "=", "act_gain", ",", "clamp", "=", "act_clamp", ")", "\n", "if", "self", ".", "structure", "==", "0", ":", "\n", "            ", "return", "x", ",", "styles_init", ",", "styles_res", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "styles", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.ToRGBLayer.__init__": [[487, 524], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "torch.randn().to", "torch.zeros", "numpy.sqrt", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "torch.randn", "networks.FullyConnectedLayer"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "w_dim", ",", "kernel_size", "=", "1", ",", "conv_clamp", "=", "None", ",", "channels_last", "=", "False", ",", "structure", "=", "0", ",", "f_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "structure", "=", "structure", "\n", "_f_dim", "=", "(", "f_dim", "+", "512", ")", "//", "2", "\n", "if", "self", ".", "structure", "==", "0", ":", "\n", "            ", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "# initial affine style layer", "\n", "\n", "self", ".", "pre_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "# pre process text features  ", "\n", "self", ".", "pre_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "\n", "\n", "self", ".", "affine_0", "=", "FullyConnectedLayer", "(", "512", ",", "in_channels", ",", "bias_init", "=", "1", ")", "# f([w, txt])", "\n", "\n", "", "elif", "self", ".", "structure", "==", "1", ":", "\n", "            ", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "#wed", "\n", "self", ".", "scale_layer_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "scale_layer_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "scale_layer_2", "=", "FullyConnectedLayer", "(", "512", ",", "in_channels", ",", ")", "#, lr_multiplier=0.01)#wed", "\n", "\n", "self", ".", "bias_layer_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "bias_layer_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "#wed", "\n", "self", ".", "bias_layer_2", "=", "FullyConnectedLayer", "(", "512", ",", "in_channels", ",", ")", "#, lr_multiplier=0.01)#wed", "\n", "\n", "", "elif", "self", ".", "structure", "==", "2", ":", "\n", "            ", "self", ".", "pre_0", "=", "FullyConnectedLayer", "(", "f_dim", ",", "_f_dim", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "# pre process text features  ", "\n", "self", ".", "pre_1", "=", "FullyConnectedLayer", "(", "_f_dim", ",", "512", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "0.01", ")", "\n", "self", ".", "affine_0", "=", "FullyConnectedLayer", "(", "w_dim", "+", "512", ",", "in_channels", ",", "bias_init", "=", "1", ")", "# f([w, txt])", "\n", "\n", "", "elif", "self", ".", "structure", "==", "3", ":", "\n", "            ", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "#wed", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'Structure undefined'", ")", "\n", "\n", "", "memory_format", "=", "torch", ".", "channels_last", "if", "channels_last", "else", "torch", ".", "contiguous_format", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", ".", "to", "(", "memory_format", "=", "memory_format", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "out_channels", "]", ")", ")", "\n", "self", ".", "weight_gain", "=", "1", "/", "np", ".", "sqrt", "(", "in_channels", "*", "(", "kernel_size", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.ToRGBLayer.forward": [[526, 562], ["networks.modulated_conv2d", "torch_utils.ops.bias_act.bias_act", "networks.ToRGBLayer.bias.to", "networks.ToRGBLayer.pre_0", "networks.ToRGBLayer.pre_1", "networks.ToRGBLayer.affine", "networks.ToRGBLayer.affine_0", "networks.ToRGBLayer.scale_layer_0", "networks.ToRGBLayer.scale_layer_1", "networks.ToRGBLayer.scale_layer_2", "networks.ToRGBLayer.bias_layer_0", "networks.ToRGBLayer.bias_layer_1", "networks.ToRGBLayer.bias_layer_2", "networks.ToRGBLayer.affine", "networks.ToRGBLayer.pre_0", "networks.ToRGBLayer.pre_1", "networks.ToRGBLayer.affine_0", "torch.cat", "networks.ToRGBLayer.affine"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.networks.modulated_conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "fts", ",", "styles", "=", "None", ",", "fused_modconv", "=", "True", ")", ":", "\n", "        ", "if", "styles", "is", "None", ":", "\n", "            ", "if", "self", ".", "structure", "==", "0", ":", "\n", "                ", "fts", "=", "self", ".", "pre_0", "(", "fts", ")", "\n", "fts", "=", "self", ".", "pre_1", "(", "fts", ")", "\n", "styles_init", "=", "self", ".", "affine", "(", "w", ")", "\n", "styles_res", "=", "self", ".", "affine_0", "(", "fts", ")", "\n", "\n", "styles", "=", "styles_init", "+", "styles_res", "\n", "", "elif", "self", ".", "structure", "==", "1", ":", "\n", "                ", "scales", "=", "self", ".", "scale_layer_0", "(", "fts", ")", "\n", "scales", "=", "self", ".", "scale_layer_1", "(", "scales", ")", "\n", "scales", "=", "self", ".", "scale_layer_2", "(", "scales", ")", "\n", "biases", "=", "self", ".", "bias_layer_0", "(", "fts", ")", "\n", "biases", "=", "self", ".", "bias_layer_1", "(", "biases", ")", "\n", "biases", "=", "self", ".", "bias_layer_2", "(", "biases", ")", "\n", "styles", "=", "self", ".", "affine", "(", "w", ")", "\n", "styles", "=", "biases", "+", "styles", "*", "scales", "\n", "", "elif", "self", ".", "structure", "==", "2", ":", "\n", "                ", "fts", "=", "self", ".", "pre_0", "(", "fts", ")", "\n", "fts", "=", "self", ".", "pre_1", "(", "fts", ")", "\n", "styles", "=", "self", ".", "affine_0", "(", "torch", ".", "cat", "(", "[", "fts", ",", "w", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "elif", "self", ".", "structure", "==", "3", ":", "\n", "                ", "styles", "=", "self", ".", "affine", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "raise", "(", "'structure undefined'", ")", "\n", "", "styles", "=", "styles", "*", "self", ".", "weight_gain", "\n", "\n", "", "x", "=", "modulated_conv2d", "(", "x", "=", "x", ",", "weight", "=", "self", ".", "weight", ",", "styles", "=", "styles", ",", "demodulate", "=", "False", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", ",", "clamp", "=", "self", ".", "conv_clamp", ")", "\n", "\n", "if", "self", ".", "structure", "==", "0", ":", "\n", "            ", "return", "x", ",", "styles_init", ",", "styles_res", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "styles", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.SynthesisBlock.__init__": [[567, 617], ["super().__init__", "networks.SynthesisBlock.register_buffer", "networks.SynthesisLayer", "torch_utils.ops.upfirdn2d.setup_filter", "torch.nn.Parameter", "networks.SynthesisLayer", "networks.ToRGBLayer", "networks.Conv2dLayer", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "# Number of input channels, 0 = first block.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "resolution", ",", "# Resolution of this block.", "\n", "img_channels", ",", "# Number of output color channels.", "\n", "is_last", ",", "# Is this the last block?", "\n", "architecture", "=", "'skip'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "use_fp16", "=", "False", ",", "# Use FP16 for this block?", "\n", "fp16_channels_last", "=", "False", ",", "# Use channels-last memory format with FP16?", "\n", "structure", "=", "0", ",", "\n", "f_dim", "=", "512", ",", "\n", "**", "layer_kwargs", ",", "# Arguments for SynthesisLayer.", "\n", ")", ":", "\n", "        ", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "channels_last", "=", "(", "use_fp16", "and", "fp16_channels_last", ")", "\n", "self", ".", "register_buffer", "(", "'resample_filter'", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "num_conv", "=", "0", "\n", "self", ".", "num_torgb", "=", "0", "\n", "\n", "if", "in_channels", "==", "0", ":", "\n", "            ", "self", ".", "const", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_channels", ",", "resolution", ",", "resolution", "]", ")", ")", "\n", "\n", "", "if", "in_channels", "!=", "0", ":", "\n", "            ", "self", ".", "conv0", "=", "SynthesisLayer", "(", "in_channels", ",", "out_channels", ",", "w_dim", "=", "w_dim", ",", "resolution", "=", "resolution", ",", "up", "=", "2", ",", "\n", "resample_filter", "=", "resample_filter", ",", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ",", "structure", "=", "structure", ",", "f_dim", "=", "f_dim", ",", "**", "layer_kwargs", ")", "\n", "self", ".", "num_conv", "+=", "1", "\n", "\n", "", "self", ".", "conv1", "=", "SynthesisLayer", "(", "out_channels", ",", "out_channels", ",", "w_dim", "=", "w_dim", ",", "resolution", "=", "resolution", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ",", "structure", "=", "structure", ",", "f_dim", "=", "f_dim", ",", "**", "layer_kwargs", ")", "\n", "self", ".", "num_conv", "+=", "1", "\n", "\n", "if", "is_last", "or", "architecture", "==", "'skip'", ":", "\n", "            ", "self", ".", "torgb", "=", "ToRGBLayer", "(", "out_channels", ",", "img_channels", ",", "w_dim", "=", "w_dim", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ",", "structure", "=", "structure", ",", "f_dim", "=", "f_dim", ")", "\n", "self", ".", "num_torgb", "+=", "1", "\n", "\n", "", "if", "in_channels", "!=", "0", "and", "architecture", "==", "'resnet'", ":", "\n", "            ", "self", ".", "skip", "=", "Conv2dLayer", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "up", "=", "2", ",", "\n", "resample_filter", "=", "resample_filter", ",", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.SynthesisBlock.forward": [[619, 687], ["torch_utils.misc.assert_shape", "iter", "ws.unbind", "iter", "iter", "networks.SynthesisBlock.const.to", "networks.SynthesisBlock.add_.unsqueeze().repeat", "torch_utils.misc.assert_shape", "networks.SynthesisBlock.add_.to", "networks.SynthesisBlock.conv1", "style_init_list.append", "style_res_list.append", "style_list.append", "torch_utils.misc.assert_shape", "torch_utils.ops.upfirdn2d.upsample2d", "networks.SynthesisBlock.torgb", "style_init_list.append", "style_res_list.append", "style_list.append", "networks.SynthesisBlock.to", "torch_utils.misc.suppress_tracer_warnings", "next", "networks.SynthesisBlock.skip", "networks.SynthesisBlock.conv0", "style_init_list.append", "style_res_list.append", "style_list.append", "networks.SynthesisBlock.conv1", "style_init_list.append", "style_res_list.append", "style_list.append", "networks.SynthesisBlock.add_", "networks.SynthesisBlock.conv0", "style_init_list.append", "style_res_list.append", "style_list.append", "networks.SynthesisBlock.conv1", "style_init_list.append", "style_res_list.append", "style_list.append", "next", "torch_utils.ops.upfirdn2d.upsample2d.add_", "networks.SynthesisBlock.add_.unsqueeze", "next", "next", "next", "next", "next", "next", "numpy.sqrt", "next", "next", "numpy.sqrt", "next", "next", "int"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upsample2d", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "img", ",", "ws", ",", "fts", ",", "styles", "=", "None", ",", "return_styles", "=", "False", ",", "force_fp32", "=", "False", ",", "fused_modconv", "=", "None", ",", "**", "layer_kwargs", ")", ":", "\n", "        ", "misc", ".", "assert_shape", "(", "ws", ",", "[", "None", ",", "self", ".", "num_conv", "+", "self", ".", "num_torgb", ",", "self", ".", "w_dim", "]", ")", "\n", "w_iter", "=", "iter", "(", "ws", ".", "unbind", "(", "dim", "=", "1", ")", ")", "\n", "if", "styles", "is", "not", "None", ":", "\n", "            ", "s_iter", "=", "iter", "(", "styles", ")", "# list ?", "\n", "", "else", ":", "\n", "            ", "s_iter", "=", "iter", "(", "[", "None", "]", "*", "ws", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "dtype", "=", "torch", ".", "float16", "if", "self", ".", "use_fp16", "and", "not", "force_fp32", "else", "torch", ".", "float32", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "self", ".", "channels_last", "and", "not", "force_fp32", "else", "torch", ".", "contiguous_format", "\n", "if", "fused_modconv", "is", "None", ":", "\n", "            ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "                ", "fused_modconv", "=", "(", "not", "self", ".", "training", ")", "and", "(", "dtype", "==", "torch", ".", "float32", "or", "int", "(", "x", ".", "shape", "[", "0", "]", ")", "==", "1", ")", "\n", "\n", "# Input.", "\n", "", "", "if", "self", ".", "in_channels", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "const", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "ws", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "self", ".", "resolution", "//", "2", ",", "self", ".", "resolution", "//", "2", "]", ")", "\n", "x", "=", "x", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "\n", "", "style_init_list", "=", "[", "]", "\n", "style_res_list", "=", "[", "]", "\n", "style_list", "=", "[", "]", "\n", "# Main layers.", "\n", "if", "self", ".", "in_channels", "==", "0", ":", "\n", "            ", "x", ",", "style_init", ",", "style_res", "=", "self", ".", "conv1", "(", "x", ",", "next", "(", "w_iter", ")", ",", "styles", "=", "next", "(", "s_iter", ")", ",", "fts", "=", "fts", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "style_init_list", ".", "append", "(", "style_init", ")", "\n", "style_res_list", ".", "append", "(", "style_res", ")", "\n", "style_list", ".", "append", "(", "style_init", "+", "style_res", ")", "\n", "", "elif", "self", ".", "architecture", "==", "'resnet'", ":", "\n", "            ", "y", "=", "self", ".", "skip", "(", "x", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ")", "\n", "x", ",", "style_init", ",", "style_res", "=", "self", ".", "conv0", "(", "x", ",", "next", "(", "w_iter", ")", ",", "styles", "=", "next", "(", "s_iter", ")", ",", "fts", "=", "fts", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "style_init_list", ".", "append", "(", "style_init", ")", "\n", "style_res_list", ".", "append", "(", "style_res", ")", "\n", "style_list", ".", "append", "(", "style_init", "+", "style_res", ")", "\n", "x", ",", "style_init", ",", "style_res", "=", "self", ".", "conv1", "(", "x", ",", "next", "(", "w_iter", ")", ",", "styles", "=", "next", "(", "s_iter", ")", ",", "fts", "=", "fts", ",", "fused_modconv", "=", "fused_modconv", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ",", "**", "layer_kwargs", ")", "\n", "style_init_list", ".", "append", "(", "style_init", ")", "\n", "style_res_list", ".", "append", "(", "style_res", ")", "\n", "style_list", ".", "append", "(", "style_init", "+", "style_res", ")", "\n", "x", "=", "y", ".", "add_", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "style_init", ",", "style_res", "=", "self", ".", "conv0", "(", "x", ",", "next", "(", "w_iter", ")", ",", "styles", "=", "next", "(", "s_iter", ")", ",", "fts", "=", "fts", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "style_init_list", ".", "append", "(", "style_init", ")", "\n", "style_res_list", ".", "append", "(", "style_res", ")", "\n", "style_list", ".", "append", "(", "style_init", "+", "style_res", ")", "\n", "x", ",", "style_init", ",", "style_res", "=", "self", ".", "conv1", "(", "x", ",", "next", "(", "w_iter", ")", ",", "styles", "=", "next", "(", "s_iter", ")", ",", "fts", "=", "fts", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "style_init_list", ".", "append", "(", "style_init", ")", "\n", "style_res_list", ".", "append", "(", "style_res", ")", "\n", "style_list", ".", "append", "(", "style_init", "+", "style_res", ")", "\n", "\n", "# ToRGB.", "\n", "", "if", "img", "is", "not", "None", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "img", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "resolution", "//", "2", ",", "self", ".", "resolution", "//", "2", "]", ")", "\n", "img", "=", "upfirdn2d", ".", "upsample2d", "(", "img", ",", "self", ".", "resample_filter", ")", "\n", "", "if", "self", ".", "is_last", "or", "self", ".", "architecture", "==", "'skip'", ":", "\n", "            ", "y", ",", "style_init", ",", "style_res", "=", "self", ".", "torgb", "(", "x", ",", "next", "(", "w_iter", ")", ",", "styles", "=", "next", "(", "s_iter", ")", ",", "fts", "=", "fts", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "style_init_list", ".", "append", "(", "style_init", ")", "\n", "style_res_list", ".", "append", "(", "style_res", ")", "\n", "style_list", ".", "append", "(", "style_init", "+", "style_res", ")", "\n", "y", "=", "y", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ",", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "img", "=", "img", ".", "add_", "(", "y", ")", "if", "img", "is", "not", "None", "else", "y", "\n", "\n", "", "assert", "x", ".", "dtype", "==", "dtype", "\n", "assert", "img", "is", "None", "or", "img", ".", "dtype", "==", "torch", ".", "float32", "\n", "return", "x", ",", "img", ",", "style_list", ",", "style_init_list", ",", "style_res_list", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.SynthesisNetwork.__init__": [[692, 731], ["super().__init__", "int", "max", "numpy.log2", "min", "networks.SynthesisBlock", "setattr", "range"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "img_resolution", ",", "# Output image resolution.", "\n", "img_channels", ",", "# Number of color channels.", "\n", "channel_base", "=", "32768", ",", "# Overall multiplier for the number of channels.", "\n", "channel_max", "=", "512", ",", "# Maximum number of channels in any layer.", "\n", "num_fp16_res", "=", "0", ",", "# Use FP16 for the N highest resolutions.", "\n", "change", "=", "256", ",", "\n", "**", "block_kwargs", ",", "# Arguments for SynthesisBlock.", "\n", ")", ":", "\n", "        ", "assert", "img_resolution", ">=", "4", "and", "img_resolution", "&", "(", "img_resolution", "-", "1", ")", "==", "0", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "img_resolution", ")", ")", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "block_resolutions", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "2", ",", "self", ".", "img_resolution_log2", "+", "1", ")", "]", "\n", "\n", "channels_dict", "=", "{", "res", ":", "min", "(", "channel_base", "//", "res", ",", "channel_max", ")", "for", "res", "in", "self", ".", "block_resolutions", "}", "\n", "fp16_resolution", "=", "max", "(", "2", "**", "(", "self", ".", "img_resolution_log2", "+", "1", "-", "num_fp16_res", ")", ",", "8", ")", "\n", "\n", "self", ".", "num_ws", "=", "0", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "in_channels", "=", "channels_dict", "[", "res", "//", "2", "]", "if", "res", ">", "4", "else", "0", "\n", "out_channels", "=", "channels_dict", "[", "res", "]", "\n", "use_fp16", "=", "(", "res", ">=", "fp16_resolution", ")", "\n", "is_last", "=", "(", "res", "==", "self", ".", "img_resolution", ")", "\n", "\n", "if", "res", "<=", "change", ":", "\n", "                ", "structure", "=", "2", "\n", "", "else", ":", "\n", "                ", "structure", "=", "1", "\n", "\n", "", "block", "=", "SynthesisBlock", "(", "in_channels", ",", "out_channels", ",", "w_dim", "=", "w_dim", ",", "resolution", "=", "res", ",", "\n", "img_channels", "=", "img_channels", ",", "is_last", "=", "is_last", ",", "use_fp16", "=", "use_fp16", ",", "structure", "=", "structure", ",", "**", "block_kwargs", ")", "\n", "self", ".", "num_ws", "+=", "block", ".", "num_conv", "\n", "if", "is_last", ":", "\n", "                ", "self", ".", "num_ws", "+=", "block", ".", "num_torgb", "\n", "", "setattr", "(", "self", ",", "f'b{res}'", ",", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.SynthesisNetwork.forward": [[735, 770], ["zip", "torch.autograd.profiler.record_function", "torch_utils.misc.assert_shape", "ws.to.to.to", "getattr", "getattr.", "getattr", "block_ws.append", "ws.to.to.narrow", "block_styles.append", "block_styles.append"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "def", "forward", "(", "self", ",", "ws", ",", "fts", ",", "styles", "=", "None", ",", "return_styles", "=", "False", ",", "return_styles_res", "=", "False", ",", "**", "block_kwargs", ")", ":", "\n", "        ", "block_ws", "=", "[", "]", "\n", "block_styles", "=", "[", "]", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'split_ws'", ")", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "ws", ",", "[", "None", ",", "self", ".", "num_ws", ",", "self", ".", "w_dim", "]", ")", "\n", "ws", "=", "ws", ".", "to", "(", "torch", ".", "float32", ")", "\n", "w_idx", "=", "0", "\n", "s_idx", "=", "0", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "                ", "block", "=", "getattr", "(", "self", ",", "f'b{res}'", ")", "\n", "block_ws", ".", "append", "(", "ws", ".", "narrow", "(", "1", ",", "w_idx", ",", "block", ".", "num_conv", "+", "block", ".", "num_torgb", ")", ")", "\n", "w_idx", "+=", "block", ".", "num_conv", "\n", "if", "styles", "is", "not", "None", ":", "\n", "                    ", "block_styles", ".", "append", "(", "styles", "[", "s_idx", ":", "s_idx", "+", "block", ".", "num_conv", "+", "block", ".", "num_torgb", "]", ")", "\n", "", "else", ":", "\n", "                    ", "block_styles", ".", "append", "(", "None", ")", "\n", "", "s_idx", "+=", "block", ".", "num_conv", "+", "block", ".", "num_torgb", "\n", "\n", "", "", "x", "=", "img", "=", "None", "\n", "styles", "=", "[", "]", "\n", "styles_init", "=", "[", "]", "\n", "styles_res", "=", "[", "]", "\n", "for", "res", ",", "cur_ws", ",", "cur_style", "in", "zip", "(", "self", ".", "block_resolutions", ",", "block_ws", ",", "block_styles", ")", ":", "\n", "            ", "block", "=", "getattr", "(", "self", ",", "f'b{res}'", ")", "\n", "x", ",", "img", ",", "style_list", ",", "style_init_list", ",", "style_res_list", "=", "block", "(", "x", ",", "img", ",", "cur_ws", ",", "fts", "=", "fts", ",", "styles", "=", "cur_style", ",", "**", "block_kwargs", ")", "\n", "styles", "=", "styles", "+", "style_list", "\n", "styles_init", "=", "styles_init", "+", "style_init_list", "\n", "styles_res", "=", "styles_res", "+", "style_res_list", "\n", "\n", "", "if", "return_styles", ":", "\n", "            ", "return", "img", ",", "styles", "\n", "", "elif", "return_styles_res", ":", "\n", "            ", "return", "img", ",", "styles", ",", "styles_res", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.Generator.__init__": [[775, 800], ["super().__init__", "networks.SynthesisNetwork", "networks.MappingNetwork"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "img_resolution", ",", "# Output resolution.", "\n", "img_channels", ",", "# Number of output color channels.", "\n", "mapping_kwargs", "=", "{", "}", ",", "# Arguments for MappingNetwork.", "\n", "synthesis_kwargs", "=", "{", "}", ",", "# Arguments for SynthesisNetwork.", "\n", "m_layer_features", "=", "512", ",", "\n", "m_num_layers", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "synthesis", "=", "SynthesisNetwork", "(", "w_dim", "=", "w_dim", ",", "img_resolution", "=", "img_resolution", ",", "img_channels", "=", "img_channels", ",", "**", "synthesis_kwargs", ")", "\n", "self", ".", "num_ws", "=", "self", ".", "synthesis", ".", "num_ws", "\n", "self", ".", "mapping", "=", "MappingNetwork", "(", "z_dim", "=", "z_dim", ",", "c_dim", "=", "c_dim", ",", "w_dim", "=", "w_dim", ",", "num_ws", "=", "self", ".", "num_ws", ",", "**", "mapping_kwargs", ")", "\n", "self", ".", "m_layer_features", "=", "m_layer_features", "\n", "\n", "self", ".", "mani", "=", "None", "\n", "self", ".", "synthesis_kwargs", "=", "synthesis_kwargs", "\n", "self", ".", "mapping_kwargs", "=", "mapping_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.Generator.forward": [[801, 822], ["networks.Generator.mapping", "torch.randn().to", "networks.Generator.synthesis", "networks.Generator.synthesis", "torch.randn().to.norm", "torch.randn", "z.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "fts", "=", "None", ",", "styles", "=", "None", ",", "return_styles", "=", "False", ",", "step", "=", "1", ",", "w", "=", "None", ",", "return_w", "=", "False", ",", "**", "synthesis_kwargs", ")", ":", "\n", "        ", "if", "w", "is", "not", "None", ":", "\n", "            ", "ws", "=", "w", "\n", "", "else", ":", "\n", "            ", "ws", "=", "self", ".", "mapping", "(", "z", ",", "c", ",", "truncation_psi", "=", "truncation_psi", ",", "truncation_cutoff", "=", "truncation_cutoff", ")", "\n", "", "if", "fts", "is", "None", ":", "\n", "            ", "fts", "=", "torch", ".", "randn", "(", "z", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "m_layer_features", ")", ".", "to", "(", "z", ".", "device", ")", "\n", "fts", "=", "fts", "/", "fts", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "return_styles", ":", "\n", "            ", "img", ",", "styles", "=", "self", ".", "synthesis", "(", "ws", ",", "fts", "=", "fts", ",", "styles", "=", "styles", ",", "return_styles", "=", "return_styles", ",", "**", "synthesis_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "synthesis", "(", "ws", ",", "fts", "=", "fts", ",", "styles", "=", "styles", ",", "return_styles", "=", "return_styles", ",", "**", "synthesis_kwargs", ")", "\n", "\n", "", "if", "return_w", "and", "return_styles", ":", "\n", "            ", "return", "img", ",", "ws", ",", "styles", "\n", "", "elif", "return_w", "and", "not", "return_styles", ":", "\n", "            ", "return", "img", ",", "ws", "\n", "", "elif", "not", "return_w", "and", "return_styles", ":", "\n", "            ", "return", "img", ",", "styles", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.DiscriminatorBlock.__init__": [[831, 879], ["super().__init__", "networks.DiscriminatorBlock.register_buffer", "networks.DiscriminatorBlock.__init__.trainable_gen"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "# Number of input channels, 0 = first block.", "\n", "tmp_channels", ",", "# Number of intermediate channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "resolution", ",", "# Resolution of this block.", "\n", "img_channels", ",", "# Number of input color channels.", "\n", "first_layer_idx", ",", "# Index of the first layer.", "\n", "architecture", "=", "'resnet'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "activation", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "use_fp16", "=", "False", ",", "# Use FP16 for this block?", "\n", "fp16_channels_last", "=", "False", ",", "# Use channels-last memory format with FP16?", "\n", "freeze_layers", "=", "0", ",", "# Freeze-D: Number of layers to freeze.", "\n", ")", ":", "\n", "        ", "assert", "in_channels", "in", "[", "0", ",", "tmp_channels", "]", "\n", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "first_layer_idx", "=", "first_layer_idx", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "channels_last", "=", "(", "use_fp16", "and", "fp16_channels_last", ")", "\n", "self", ".", "register_buffer", "(", "'resample_filter'", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "num_layers", "=", "0", "\n", "def", "trainable_gen", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "layer_idx", "=", "self", ".", "first_layer_idx", "+", "self", ".", "num_layers", "\n", "trainable", "=", "(", "layer_idx", ">=", "freeze_layers", ")", "\n", "self", ".", "num_layers", "+=", "1", "\n", "yield", "trainable", "\n", "", "", "trainable_iter", "=", "trainable_gen", "(", ")", "\n", "\n", "if", "in_channels", "==", "0", "or", "architecture", "==", "'skip'", ":", "\n", "            ", "self", ".", "fromrgb", "=", "Conv2dLayer", "(", "img_channels", ",", "tmp_channels", ",", "kernel_size", "=", "1", ",", "activation", "=", "activation", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n", "", "self", ".", "conv0", "=", "Conv2dLayer", "(", "tmp_channels", ",", "tmp_channels", ",", "kernel_size", "=", "3", ",", "activation", "=", "activation", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2dLayer", "(", "tmp_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "activation", "=", "activation", ",", "down", "=", "2", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "resample_filter", "=", "resample_filter", ",", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n", "if", "architecture", "==", "'resnet'", ":", "\n", "            ", "self", ".", "skip", "=", "Conv2dLayer", "(", "tmp_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "down", "=", "2", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "resample_filter", "=", "resample_filter", ",", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.DiscriminatorBlock.forward": [[882, 911], ["torch_utils.misc.assert_shape", "networks.DiscriminatorBlock.to", "torch_utils.misc.assert_shape", "img.to.to.to", "networks.DiscriminatorBlock.fromrgb", "networks.DiscriminatorBlock.skip", "networks.DiscriminatorBlock.conv0", "networks.DiscriminatorBlock.conv1", "networks.DiscriminatorBlock.add_", "networks.DiscriminatorBlock.conv0", "networks.DiscriminatorBlock.conv1", "torch_utils.ops.upfirdn2d.downsample2d", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.downsample2d"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "img", ",", "force_fp32", "=", "False", ",", "fts", "=", "None", ")", ":", "\n", "        ", "dtype", "=", "torch", ".", "float16", "if", "self", ".", "use_fp16", "and", "not", "force_fp32", "else", "torch", ".", "float32", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "self", ".", "channels_last", "and", "not", "force_fp32", "else", "torch", ".", "contiguous_format", "\n", "\n", "# Input.", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "\n", "x", "=", "x", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "\n", "# FromRGB.", "\n", "", "if", "self", ".", "in_channels", "==", "0", "or", "self", ".", "architecture", "==", "'skip'", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "img", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "\n", "img", "=", "img", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "y", "=", "self", ".", "fromrgb", "(", "img", ")", "\n", "x", "=", "x", "+", "y", "if", "x", "is", "not", "None", "else", "y", "\n", "img", "=", "upfirdn2d", ".", "downsample2d", "(", "img", ",", "self", ".", "resample_filter", ")", "if", "self", ".", "architecture", "==", "'skip'", "else", "None", "\n", "\n", "# Main layers.", "\n", "", "if", "self", ".", "architecture", "==", "'resnet'", ":", "\n", "            ", "y", "=", "self", ".", "skip", "(", "x", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ")", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ")", "\n", "x", "=", "y", ".", "add_", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "", "assert", "x", ".", "dtype", "==", "dtype", "\n", "return", "x", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.MinibatchStdLayer.__init__": [[916, 920], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "group_size", ",", "num_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.MinibatchStdLayer.forward": [[921, 937], ["torch.cat.reshape", "y.repeat.repeat.square().mean", "y.repeat.repeat.mean", "y.repeat.repeat.reshape", "y.repeat.repeat.repeat", "torch.cat", "torch_utils.misc.suppress_tracer_warnings", "y.repeat.repeat.mean", "torch.min", "y.repeat.repeat.square", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "            ", "G", "=", "torch", ".", "min", "(", "torch", ".", "as_tensor", "(", "self", ".", "group_size", ")", ",", "torch", ".", "as_tensor", "(", "N", ")", ")", "if", "self", ".", "group_size", "is", "not", "None", "else", "N", "\n", "", "F", "=", "self", ".", "num_channels", "\n", "c", "=", "C", "//", "F", "\n", "\n", "y", "=", "x", ".", "reshape", "(", "G", ",", "-", "1", ",", "F", ",", "c", ",", "H", ",", "W", ")", "# [GnFcHW] Split minibatch N into n groups of size G, and channels C into F groups of size c.", "\n", "y", "=", "y", "-", "y", ".", "mean", "(", "dim", "=", "0", ")", "# [GnFcHW] Subtract mean over group.", "\n", "y", "=", "y", ".", "square", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "# [nFcHW]  Calc variance over group.", "\n", "y", "=", "(", "y", "+", "1e-8", ")", ".", "sqrt", "(", ")", "# [nFcHW]  Calc stddev over group.", "\n", "y", "=", "y", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "# [nF]     Take average over channels and pixels.", "\n", "y", "=", "y", ".", "reshape", "(", "-", "1", ",", "F", ",", "1", ",", "1", ")", "# [nF11]   Add missing dimensions.", "\n", "y", "=", "y", ".", "repeat", "(", "G", ",", "1", ",", "H", ",", "W", ")", "# [NFHW]   Replicate over group and pixels.", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "# [NCHW]   Append to input as new channels.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.DiscriminatorEpilogue.__init__": [[942, 973], ["super().__init__", "networks.Conv2dLayer", "networks.FullyConnectedLayer", "networks.FullyConnectedLayer", "networks.Conv2dLayer", "networks.MinibatchStdLayer", "networks.FullyConnectedLayer"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "# Number of input channels.", "\n", "cmap_dim", ",", "# Dimensionality of mapped conditioning label, 0 = no label.", "\n", "resolution", ",", "# Resolution of this block.", "\n", "img_channels", ",", "# Number of input color channels.", "\n", "use_fts", ",", "\n", "architecture", "=", "'resnet'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, None = entire minibatch.", "\n", "mbstd_num_channels", "=", "1", ",", "# Number of features for the minibatch standard deviation layer, 0 = disable.", "\n", "activation", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "f_dim", "=", "512", ",", "\n", "\n", ")", ":", "\n", "        ", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "cmap_dim", "=", "cmap_dim", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "use_fts", "=", "use_fts", "\n", "\n", "if", "architecture", "==", "'skip'", ":", "\n", "            ", "self", ".", "fromrgb", "=", "Conv2dLayer", "(", "img_channels", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "activation", "=", "activation", ")", "\n", "", "self", ".", "mbstd", "=", "MinibatchStdLayer", "(", "group_size", "=", "mbstd_group_size", ",", "num_channels", "=", "mbstd_num_channels", ")", "if", "mbstd_num_channels", ">", "0", "else", "None", "\n", "self", ".", "conv", "=", "Conv2dLayer", "(", "in_channels", "+", "mbstd_num_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "activation", "=", "activation", ",", "conv_clamp", "=", "conv_clamp", ")", "\n", "self", ".", "fc", "=", "FullyConnectedLayer", "(", "in_channels", "*", "(", "resolution", "**", "2", ")", ",", "in_channels", ",", "activation", "=", "activation", ")", "\n", "if", "use_fts", ":", "\n", "            ", "self", ".", "fts", "=", "FullyConnectedLayer", "(", "in_channels", ",", "f_dim", ")", "\n", "", "self", ".", "out", "=", "FullyConnectedLayer", "(", "in_channels", ",", "1", ")", "#if cmap_dim == 0 else cmap_dim)", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.DiscriminatorEpilogue.forward": [[974, 1009], ["torch_utils.misc.assert_shape", "networks.DiscriminatorEpilogue.to", "networks.DiscriminatorEpilogue.conv", "networks.DiscriminatorEpilogue.fc", "networks.DiscriminatorEpilogue.out", "torch_utils.misc.assert_shape", "img.to.to.to", "networks.DiscriminatorEpilogue.mbstd", "networks.DiscriminatorEpilogue.flatten", "networks.DiscriminatorEpilogue.fts", "torch_utils.misc.assert_shape", "networks.DiscriminatorEpilogue.fromrgb", "networks.DiscriminatorEpilogue.norm", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape"], ["", "def", "forward", "(", "self", ",", "x", ",", "img", ",", "cmap", ",", "use_norm", "=", "True", ",", "fts", "=", "None", ",", "force_fp32", "=", "False", ")", ":", "\n", "        ", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "# [NCHW]", "\n", "_", "=", "force_fp32", "# unused", "\n", "dtype", "=", "torch", ".", "float32", "\n", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "# FromRGB.", "\n", "x", "=", "x", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "if", "self", ".", "architecture", "==", "'skip'", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "img", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "\n", "img", "=", "img", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "x", "=", "x", "+", "self", ".", "fromrgb", "(", "img", ")", "\n", "\n", "# Main layers.", "\n", "", "if", "self", ".", "mbstd", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "mbstd", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "fc", "=", "self", ".", "fc", "(", "x", ".", "flatten", "(", "1", ")", ")", "\n", "x", "=", "self", ".", "out", "(", "fc", ")", "\n", "if", "self", ".", "use_fts", ":", "\n", "            ", "d_fts", "=", "self", ".", "fts", "(", "fc", ")", "\n", "if", "use_norm", ":", "\n", "                ", "d_fts", "=", "d_fts", "/", "d_fts", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "x", "=", "x", "+", "(", "d_fts", "*", "fts", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "d_fts", "=", "fts", "\n", "# Conditioning. original one", "\n", "", "if", "self", ".", "cmap_dim", ">", "0", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "cmap", ",", "[", "None", ",", "self", ".", "cmap_dim", "]", ")", "\n", "x", "=", "(", "x", "*", "cmap", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "self", ".", "cmap_dim", ")", ")", "\n", "\n", "", "assert", "x", ".", "dtype", "==", "dtype", "\n", "return", "x", ",", "d_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.Discriminator.__init__": [[1014, 1061], ["super().__init__", "int", "max", "dict", "networks.DiscriminatorEpilogue", "numpy.log2", "min", "networks.DiscriminatorBlock", "setattr", "range"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality.", "\n", "img_resolution", ",", "# Input resolution.", "\n", "img_channels", ",", "# Number of input color channels.", "\n", "architecture", "=", "'resnet'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "channel_base", "=", "32768", ",", "# Overall multiplier for the number of channels.", "\n", "channel_max", "=", "512", ",", "# Maximum number of channels in any layer.", "\n", "num_fp16_res", "=", "0", ",", "# Use FP16 for the N highest resolutions.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "cmap_dim", "=", "None", ",", "# Dimensionality of mapped conditioning label, None = default.", "\n", "use_norm", "=", "False", ",", "\n", "use_fts", "=", "True", ",", "\n", "block_kwargs", "=", "{", "}", ",", "# Arguments for DiscriminatorBlock.", "\n", "mapping_kwargs", "=", "{", "}", ",", "# Arguments for MappingNetwork.", "\n", "epilogue_kwargs", "=", "{", "}", ",", "# Arguments for DiscriminatorEpilogue.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "img_resolution", ")", ")", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "block_resolutions", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "self", ".", "img_resolution_log2", ",", "2", ",", "-", "1", ")", "]", "\n", "self", ".", "use_norm", "=", "use_norm", "\n", "self", ".", "use_fts", "=", "use_fts", "\n", "\n", "channels_dict", "=", "{", "res", ":", "min", "(", "channel_base", "//", "res", ",", "channel_max", ")", "for", "res", "in", "self", ".", "block_resolutions", "+", "[", "4", "]", "}", "\n", "fp16_resolution", "=", "max", "(", "2", "**", "(", "self", ".", "img_resolution_log2", "+", "1", "-", "num_fp16_res", ")", ",", "8", ")", "\n", "\n", "if", "cmap_dim", "is", "None", ":", "\n", "            ", "cmap_dim", "=", "channels_dict", "[", "4", "]", "\n", "", "if", "c_dim", "==", "0", ":", "\n", "            ", "cmap_dim", "=", "0", "\n", "\n", "", "common_kwargs", "=", "dict", "(", "img_channels", "=", "img_channels", ",", "architecture", "=", "architecture", ",", "conv_clamp", "=", "conv_clamp", ")", "\n", "cur_layer_idx", "=", "0", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "in_channels", "=", "channels_dict", "[", "res", "]", "if", "res", "<", "img_resolution", "else", "0", "\n", "tmp_channels", "=", "channels_dict", "[", "res", "]", "\n", "out_channels", "=", "channels_dict", "[", "res", "//", "2", "]", "\n", "use_fp16", "=", "(", "res", ">=", "fp16_resolution", ")", "\n", "block", "=", "DiscriminatorBlock", "(", "in_channels", ",", "tmp_channels", ",", "out_channels", ",", "resolution", "=", "res", ",", "\n", "first_layer_idx", "=", "cur_layer_idx", ",", "use_fp16", "=", "use_fp16", ",", "**", "block_kwargs", ",", "**", "common_kwargs", ")", "\n", "setattr", "(", "self", ",", "f'b{res}'", ",", "block", ")", "\n", "cur_layer_idx", "+=", "block", ".", "num_layers", "\n", "\n", "\n", "", "self", ".", "b4", "=", "DiscriminatorEpilogue", "(", "channels_dict", "[", "4", "]", ",", "use_fts", "=", "self", ".", "use_fts", ",", "cmap_dim", "=", "cmap_dim", ",", "resolution", "=", "4", ",", "**", "epilogue_kwargs", ",", "**", "common_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.Discriminator.forward": [[1062, 1073], ["networks.Discriminator.b4", "getattr", "getattr."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "c", ",", "fts", "=", "None", ",", "**", "block_kwargs", ")", ":", "\n", "        ", "x", "=", "None", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "block", "=", "getattr", "(", "self", ",", "f'b{res}'", ")", "\n", "x", ",", "img", "=", "block", "(", "x", ",", "img", ",", "fts", "=", "fts", ",", "**", "block_kwargs", ")", "\n", "\n", "", "cmap", "=", "None", "\n", "\n", "\n", "x", ",", "d_fts", "=", "self", ".", "b4", "(", "x", ",", "img", ",", "cmap", ",", "fts", "=", "fts", ",", "use_norm", "=", "self", ".", "use_norm", ")", "\n", "return", "x", ",", "d_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.normalize_2nd_moment": [[13, 16], ["x.square().mean", "x.square"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["@", "misc", ".", "profiled_function", "\n", "def", "normalize_2nd_moment", "(", "x", ",", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "return", "x", "*", "(", "x", ".", "square", "(", ")", ".", "mean", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "eps", ")", ".", "rsqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.networks.modulated_conv2d": [[19, 78], ["torch_utils.misc.assert_shape", "torch_utils.misc.assert_shape", "torch_utils.misc.assert_shape", "torch_utils.misc.assert_shape", "x.add_.reshape", "weight.unsqueeze.reshape", "torch_utils.ops.conv2d_resample.conv2d_resample", "x.add_.reshape", "weight.unsqueeze", "torch_utils.ops.conv2d_resample.conv2d_resample", "torch_utils.misc.suppress_tracer_warnings", "int", "x.add_.add_", "styles.norm", "styles.reshape", "dcoefs.reshape", "styles.to().reshape", "torch_utils.ops.fma.fma", "weight.unsqueeze.to", "weight.norm", "float", "weight.to", "dcoefs.to().reshape", "noise.to", "numpy.sqrt", "float", "weight.unsqueeze.square().sum", "styles.to", "dcoefs.to().reshape", "x.add_.add_", "dcoefs.to", "noise.to", "weight.unsqueeze.square", "dcoefs.to"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample.conv2d_resample", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample.conv2d_resample", "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma.fma"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "modulated_conv2d", "(", "\n", "x", ",", "# Input tensor of shape [batch_size, in_channels, in_height, in_width].", "\n", "weight", ",", "# Weight tensor of shape [out_channels, in_channels, kernel_height, kernel_width].", "\n", "styles", ",", "# Modulation coefficients of shape [batch_size, in_channels].", "\n", "noise", "=", "None", ",", "# Optional noise tensor to add to the output activations.", "\n", "up", "=", "1", ",", "# Integer upsampling factor.", "\n", "down", "=", "1", ",", "# Integer downsampling factor.", "\n", "padding", "=", "0", ",", "# Padding with respect to the upsampled image.", "\n", "resample_filter", "=", "None", ",", "# Low-pass filter to apply when resampling activations. Must be prepared beforehand by calling upfirdn2d.setup_filter().", "\n", "demodulate", "=", "True", ",", "# Apply weight demodulation?", "\n", "flip_weight", "=", "True", ",", "# False = convolution, True = correlation (matches torch.nn.functional.conv2d).", "\n", "fused_modconv", "=", "True", ",", "# Perform modulation, convolution, and demodulation as a single fused operation?", "\n", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "out_channels", ",", "in_channels", ",", "kh", ",", "kw", "=", "weight", ".", "shape", "\n", "misc", ".", "assert_shape", "(", "weight", ",", "[", "out_channels", ",", "in_channels", ",", "kh", ",", "kw", "]", ")", "# [OIkk]", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "batch_size", ",", "in_channels", ",", "None", ",", "None", "]", ")", "# [NIHW]", "\n", "misc", ".", "assert_shape", "(", "styles", ",", "[", "batch_size", ",", "in_channels", "]", ")", "# [NI]", "\n", "\n", "# Pre-normalize inputs to avoid FP16 overflow.", "\n", "if", "x", ".", "dtype", "==", "torch", ".", "float16", "and", "demodulate", ":", "\n", "        ", "weight", "=", "weight", "*", "(", "1", "/", "np", ".", "sqrt", "(", "in_channels", "*", "kh", "*", "kw", ")", "/", "weight", ".", "norm", "(", "float", "(", "'inf'", ")", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", ")", "# max_Ikk", "\n", "styles", "=", "styles", "/", "styles", ".", "norm", "(", "float", "(", "'inf'", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# max_I", "\n", "\n", "# Calculate per-sample weights and demodulation coefficients.", "\n", "", "w", "=", "None", "\n", "dcoefs", "=", "None", "\n", "if", "demodulate", "or", "fused_modconv", ":", "\n", "        ", "w", "=", "weight", ".", "unsqueeze", "(", "0", ")", "# [NOIkk]", "\n", "w", "=", "w", "*", "styles", ".", "reshape", "(", "batch_size", ",", "1", ",", "-", "1", ",", "1", ",", "1", ")", "# [NOIkk]", "\n", "", "if", "demodulate", ":", "\n", "        ", "dcoefs", "=", "(", "w", ".", "square", "(", ")", ".", "sum", "(", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "+", "1e-8", ")", ".", "rsqrt", "(", ")", "# [NO]", "\n", "", "if", "demodulate", "and", "fused_modconv", ":", "\n", "        ", "w", "=", "w", "*", "dcoefs", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "# [NOIkk]", "\n", "\n", "# Execute by scaling the activations before and after the convolution.", "\n", "", "if", "not", "fused_modconv", ":", "\n", "        ", "x", "=", "x", "*", "styles", ".", "to", "(", "x", ".", "dtype", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "conv2d_resample", ".", "conv2d_resample", "(", "x", "=", "x", ",", "w", "=", "weight", ".", "to", "(", "x", ".", "dtype", ")", ",", "f", "=", "resample_filter", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_weight", "=", "flip_weight", ")", "\n", "if", "demodulate", "and", "noise", "is", "not", "None", ":", "\n", "            ", "x", "=", "fma", ".", "fma", "(", "x", ",", "dcoefs", ".", "to", "(", "x", ".", "dtype", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", ",", "noise", ".", "to", "(", "x", ".", "dtype", ")", ")", "\n", "", "elif", "demodulate", ":", "\n", "            ", "x", "=", "x", "*", "dcoefs", ".", "to", "(", "x", ".", "dtype", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "noise", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "add_", "(", "noise", ".", "to", "(", "x", ".", "dtype", ")", ")", "\n", "", "return", "x", "\n", "\n", "# Execute as one fused op using grouped convolution.", "\n", "", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "batch_size", "=", "int", "(", "batch_size", ")", "\n", "", "misc", ".", "assert_shape", "(", "x", ",", "[", "batch_size", ",", "in_channels", ",", "None", ",", "None", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "1", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "w", "=", "w", ".", "reshape", "(", "-", "1", ",", "in_channels", ",", "kh", ",", "kw", ")", "\n", "x", "=", "conv2d_resample", ".", "conv2d_resample", "(", "x", "=", "x", ",", "w", "=", "w", ".", "to", "(", "x", ".", "dtype", ")", ",", "f", "=", "resample_filter", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "groups", "=", "batch_size", ",", "flip_weight", "=", "flip_weight", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "if", "noise", "is", "not", "None", ":", "\n", "        ", "x", "=", "x", ".", "add_", "(", "noise", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.__init__": [[18, 49], ["list", "numpy.arange", "numpy.zeros", "numpy.random.RandomState().shuffle", "numpy.sort", "numpy.tile", "numpy.concatenate", "numpy.random.RandomState", "numpy.ones_like"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "name", ",", "# Name of the dataset.", "\n", "raw_shape", ",", "# Shape of the raw image data (NCHW).", "\n", "max_size", "=", "None", ",", "# Artificially limit the size of the dataset. None = no limit. Applied before xflip.", "\n", "use_labels", "=", "False", ",", "# Enable conditioning labels? False = label dimension is zero.", "\n", "use_clip", "=", "False", ",", "\n", "xflip", "=", "False", ",", "# Artificially double the size of the dataset via x-flips. Applied after max_size.", "\n", "random_seed", "=", "0", ",", "# Random seed to use when applying max_size.", "\n", "ratio", "=", "1.0", "# how many text-image pairs will be used (0.5 means 0.5 image-text pairs + 0.5 fake pairs. Note if one want to use only 0.5 image-text pairs without using the rest images, set max_size)", "\n", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_raw_shape", "=", "list", "(", "raw_shape", ")", "\n", "self", ".", "_use_labels", "=", "use_labels", "\n", "self", ".", "_use_clip", "=", "use_clip", "\n", "self", ".", "_raw_labels", "=", "None", "\n", "self", ".", "_raw_clip_txt_features", "=", "None", "\n", "self", ".", "_raw_clip_img_features", "=", "None", "\n", "self", ".", "_label_shape", "=", "None", "\n", "self", ".", "_ratio", "=", "ratio", "\n", "\n", "# Apply max_size.", "\n", "self", ".", "_raw_idx", "=", "np", ".", "arange", "(", "self", ".", "_raw_shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "(", "max_size", "is", "not", "None", ")", "and", "(", "self", ".", "_raw_idx", ".", "size", ">", "max_size", ")", ":", "\n", "            ", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", ".", "shuffle", "(", "self", ".", "_raw_idx", ")", "\n", "self", ".", "_raw_idx", "=", "np", ".", "sort", "(", "self", ".", "_raw_idx", "[", ":", "max_size", "]", ")", "\n", "\n", "# Apply xflip.", "\n", "", "self", ".", "_xflip", "=", "np", ".", "zeros", "(", "self", ".", "_raw_idx", ".", "size", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "xflip", ":", "\n", "            ", "self", ".", "_raw_idx", "=", "np", ".", "tile", "(", "self", ".", "_raw_idx", ",", "2", ")", "\n", "self", ".", "_xflip", "=", "np", ".", "concatenate", "(", "[", "self", ".", "_xflip", ",", "np", ".", "ones_like", "(", "self", ".", "_xflip", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_raw_labels": [[50, 62], ["isinstance", "dataset.Dataset._load_raw_labels", "numpy.zeros", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_raw_labels"], ["", "", "def", "_get_raw_labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_raw_labels", "is", "None", ":", "\n", "            ", "self", ".", "_raw_labels", "=", "self", ".", "_load_raw_labels", "(", ")", "if", "self", ".", "_use_labels", "else", "None", "\n", "if", "self", ".", "_raw_labels", "is", "None", ":", "\n", "                ", "self", ".", "_raw_labels", "=", "np", ".", "zeros", "(", "[", "self", ".", "_raw_shape", "[", "0", "]", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "assert", "isinstance", "(", "self", ".", "_raw_labels", ",", "np", ".", "ndarray", ")", "\n", "assert", "self", ".", "_raw_labels", ".", "shape", "[", "0", "]", "==", "self", ".", "_raw_shape", "[", "0", "]", "\n", "assert", "self", ".", "_raw_labels", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "int64", "]", "\n", "if", "self", ".", "_raw_labels", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "                ", "assert", "self", ".", "_raw_labels", ".", "ndim", "==", "1", "\n", "assert", "np", ".", "all", "(", "self", ".", "_raw_labels", ">=", "0", ")", "\n", "", "", "return", "self", ".", "_raw_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_clip_img_features": [[63, 67], ["dataset.Dataset._load_clip_img_features"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_clip_img_features"], ["", "def", "_get_clip_img_features", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_raw_clip_img_features", "is", "None", ":", "\n", "            ", "self", ".", "_raw_clip_img_features", "=", "self", ".", "_load_clip_img_features", "(", ")", "if", "self", ".", "_use_clip", "else", "None", "\n", "", "return", "self", ".", "_raw_clip_img_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_clip_txt_features": [[68, 72], ["dataset.Dataset._load_clip_txt_features"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_clip_txt_features"], ["", "def", "_get_clip_txt_features", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_raw_clip_txt_features", "is", "None", ":", "\n", "            ", "self", ".", "_raw_clip_txt_features", "=", "self", ".", "_load_clip_txt_features", "(", ")", "if", "self", ".", "_use_clip", "else", "None", "\n", "", "return", "self", ".", "_raw_clip_txt_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.close": [[74, 76], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "# to be overridden by subclass", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._load_raw_image": [[77, 79], ["None"], "methods", ["None"], ["", "def", "_load_raw_image", "(", "self", ",", "raw_idx", ")", ":", "# to be overridden by subclass", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._load_raw_labels": [[80, 82], ["None"], "methods", ["None"], ["", "def", "_load_raw_labels", "(", "self", ")", ":", "# to be overridden by subclass", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._load_clip_img_features": [[83, 85], ["None"], "methods", ["None"], ["", "def", "_load_clip_img_features", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._load_clip_txt_features": [[86, 88], ["None"], "methods", ["None"], ["", "def", "_load_clip_txt_features", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.__getstate__": [[89, 91], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "__dict__", ",", "_raw_labels", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.__del__": [[92, 97], ["dataset.Dataset.close"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.__len__": [[98, 100], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_raw_idx", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.__getitem__": [[101, 121], ["dataset.Dataset._load_raw_image", "isinstance", "list", "numpy.random.normal", "dataset.Dataset.get_img_features", "dataset.Dataset.copy", "dataset.Dataset.get_label", "numpy.linalg.norm", "dataset.Dataset.copy", "dataset.Dataset.get_label", "dataset.Dataset.copy", "dataset.Dataset.get_label", "dataset.Dataset.get_img_features", "dataset.Dataset.get_txt_features", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_raw_image", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_img_features", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_img_features", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_txt_features"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image", "=", "self", ".", "_load_raw_image", "(", "self", ".", "_raw_idx", "[", "idx", "]", ")", "\n", "assert", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", "\n", "assert", "list", "(", "image", ".", "shape", ")", "==", "self", ".", "image_shape", "\n", "assert", "image", ".", "dtype", "==", "np", ".", "uint8", "\n", "if", "self", ".", "_xflip", "[", "idx", "]", ":", "\n", "            ", "assert", "image", ".", "ndim", "==", "3", "# CHW", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "if", "self", ".", "_use_clip", ":", "\n", "            ", "if", "idx", "%", "self", ".", "_raw_shape", "[", "0", "]", ">", "self", ".", "_ratio", "*", "self", ".", "_raw_shape", "[", "0", "]", ":", "\n", "                ", "noise", "=", "np", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "(", "512", ")", ")", "\n", "img_fts", "=", "self", ".", "get_img_features", "(", "idx", ")", "\n", "revised_img_fts", "=", "0.25", "*", "img_fts", "/", "np", ".", "linalg", ".", "norm", "(", "img_fts", ")", "+", "0.75", "*", "noise", "/", "np", ".", "linalg", ".", "norm", "(", "noise", ")", "\n", "revised_img_fts", "=", "revised_img_fts", "/", "np", ".", "linalg", ".", "norm", "(", "revised_img_fts", ")", "\n", "return", "image", ".", "copy", "(", ")", ",", "self", ".", "get_label", "(", "idx", ")", ",", "img_fts", ",", "revised_img_fts", "\n", "", "else", ":", "\n", "                ", "return", "image", ".", "copy", "(", ")", ",", "self", ".", "get_label", "(", "idx", ")", ",", "self", ".", "get_img_features", "(", "idx", ")", ",", "self", ".", "get_txt_features", "(", "idx", ")", "\n", "#             return image.copy(), self.get_label(idx), self.get_img_features(idx), self.get_txt_features(idx)", "\n", "", "", "else", ":", "\n", "            ", "return", "image", ".", "copy", "(", ")", ",", "self", ".", "get_label", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label": [[122, 129], ["label.copy", "dataset.Dataset._get_raw_labels", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_raw_labels"], ["", "", "def", "get_label", "(", "self", ",", "idx", ")", ":", "\n", "        ", "label", "=", "self", ".", "_get_raw_labels", "(", ")", "[", "self", ".", "_raw_idx", "[", "idx", "]", "]", "\n", "if", "label", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "            ", "onehot", "=", "np", ".", "zeros", "(", "self", ".", "label_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "label", "]", "=", "1", "\n", "label", "=", "onehot", "\n", "", "return", "label", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_img_features": [[130, 133], ["img_features.copy", "dataset.Dataset._get_clip_img_features"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_clip_img_features"], ["", "def", "get_img_features", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_features", "=", "self", ".", "_get_clip_img_features", "(", ")", "[", "self", ".", "_raw_idx", "[", "idx", "]", "]", "\n", "return", "img_features", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_txt_features": [[134, 144], ["numpy.random.randint", "numpy.array", "txt_features.astype.astype.astype", "txt_features.astype.astype.copy", "dataset.Dataset._get_clip_txt_features", "len", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_clip_txt_features"], ["", "def", "get_txt_features", "(", "self", ",", "idx", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "txt_features", "=", "self", ".", "_get_clip_txt_features", "(", ")", "[", "self", ".", "_raw_idx", "[", "idx", "]", "]", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "txt_features", ")", ",", "(", ")", ")", "\n", "txt_features", "=", "txt_features", "[", "index", "]", "# randomly select one from the features", "\n", "txt_features", "=", "np", ".", "array", "(", "txt_features", ")", "\n", "txt_features", "=", "txt_features", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "txt_features", ".", "copy", "(", ")", "\n", "", "except", ":", "\n", "            ", "return", "np", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "(", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_details": [[146, 152], ["dnnlib.EasyDict", "int", "[].copy", "int", "dataset.Dataset._get_raw_labels"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_raw_labels"], ["", "", "def", "get_details", "(", "self", ",", "idx", ")", ":", "\n", "        ", "d", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "d", ".", "raw_idx", "=", "int", "(", "self", ".", "_raw_idx", "[", "idx", "]", ")", "\n", "d", ".", "xflip", "=", "(", "int", "(", "self", ".", "_xflip", "[", "idx", "]", ")", "!=", "0", ")", "\n", "d", ".", "raw_label", "=", "self", ".", "_get_raw_labels", "(", ")", "[", "d", ".", "raw_idx", "]", ".", "copy", "(", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.name": [[153, 156], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.image_shape": [[157, 160], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_shape", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_raw_shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.num_channels": [[161, 165], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_channels", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "image_shape", ")", "==", "3", "# CHW", "\n", "return", "self", ".", "image_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.resolution": [[166, 171], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "resolution", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "image_shape", ")", "==", "3", "# CHW", "\n", "assert", "self", ".", "image_shape", "[", "1", "]", "==", "self", ".", "image_shape", "[", "2", "]", "\n", "return", "self", ".", "image_shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.label_shape": [[172, 181], ["list", "dataset.Dataset._get_raw_labels", "int", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_raw_labels"], ["", "@", "property", "\n", "def", "label_shape", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_label_shape", "is", "None", ":", "\n", "            ", "raw_labels", "=", "self", ".", "_get_raw_labels", "(", ")", "\n", "if", "raw_labels", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "                ", "self", ".", "_label_shape", "=", "[", "int", "(", "np", ".", "max", "(", "raw_labels", ")", ")", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "_label_shape", "=", "raw_labels", ".", "shape", "[", "1", ":", "]", "\n", "", "", "return", "list", "(", "self", ".", "_label_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.label_dim": [[182, 186], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_dim", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "label_shape", ")", "==", "1", "\n", "return", "self", ".", "label_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.has_labels": [[187, 190], ["any"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_labels", "(", "self", ")", ":", "\n", "        ", "return", "any", "(", "x", "!=", "0", "for", "x", "in", "self", ".", "label_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.has_onehot_labels": [[191, 194], ["dataset.Dataset._get_raw_labels"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset._get_raw_labels"], ["", "@", "property", "\n", "def", "has_onehot_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_raw_labels", "(", ")", ".", "dtype", "==", "np", ".", "int64", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.__init__": [[198, 228], ["os.path.isdir", "PIL.Image.init", "sorted", "dataset.Dataset.__init__", "len", "IOError", "os.path.splitext", "list", "IOError", "os.path.relpath", "dataset.ImageFolderDataset._file_ext", "set", "IOError", "os.path.basename", "len", "os.path.join", "os.walk", "dataset.ImageFolderDataset._get_zipfile().namelist", "dataset.ImageFolderDataset._load_raw_image", "dataset.ImageFolderDataset._file_ext", "dataset.ImageFolderDataset._get_zipfile"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._file_ext", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_raw_image", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._file_ext", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._get_zipfile"], ["    ", "def", "__init__", "(", "self", ",", "\n", "path", ",", "# Path to directory or zip.", "\n", "resolution", "=", "None", ",", "# Ensure specific resolution, None = highest available.", "\n", "**", "super_kwargs", ",", "# Additional arguments for the Dataset base class.", "\n", ")", ":", "\n", "        ", "self", ".", "_path", "=", "path", "\n", "self", ".", "_zipfile", "=", "None", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "_path", ")", ":", "\n", "            ", "self", ".", "_type", "=", "'dir'", "\n", "self", ".", "_all_fnames", "=", "{", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", ",", "start", "=", "self", ".", "_path", ")", "for", "root", ",", "_dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "_path", ")", "for", "fname", "in", "files", "}", "\n", "self", ".", "json_name", "=", "'dataset.json'", "\n", "\n", "", "elif", "self", ".", "_file_ext", "(", "self", ".", "_path", ")", "==", "'.zip'", ":", "\n", "            ", "self", ".", "_type", "=", "'zip'", "\n", "self", ".", "_all_fnames", "=", "set", "(", "self", ".", "_get_zipfile", "(", ")", ".", "namelist", "(", ")", ")", "\n", "self", ".", "json_name", "=", "'dataset.json'", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "'Path must point to a directory or zip'", ")", "\n", "\n", "", "PIL", ".", "Image", ".", "init", "(", ")", "\n", "self", ".", "_image_fnames", "=", "sorted", "(", "fname", "for", "fname", "in", "self", ".", "_all_fnames", "if", "self", ".", "_file_ext", "(", "fname", ")", "in", "PIL", ".", "Image", ".", "EXTENSION", ")", "\n", "if", "len", "(", "self", ".", "_image_fnames", ")", "==", "0", ":", "\n", "            ", "raise", "IOError", "(", "'No image files found in the specified path'", ")", "\n", "\n", "", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "self", ".", "_path", ")", ")", "[", "0", "]", "\n", "raw_shape", "=", "[", "len", "(", "self", ".", "_image_fnames", ")", "]", "+", "list", "(", "self", ".", "_load_raw_image", "(", "0", ")", ".", "shape", ")", "\n", "if", "resolution", "is", "not", "None", "and", "(", "raw_shape", "[", "2", "]", "!=", "resolution", "or", "raw_shape", "[", "3", "]", "!=", "resolution", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Image files do not match the specified resolution'", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "raw_shape", "=", "raw_shape", ",", "**", "super_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._file_ext": [[229, 232], ["[].lower", "os.path.splitext"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_file_ext", "(", "fname", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "splitext", "(", "fname", ")", "[", "1", "]", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._get_zipfile": [[233, 238], ["zipfile.ZipFile"], "methods", ["None"], ["", "def", "_get_zipfile", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_type", "==", "'zip'", "\n", "if", "self", ".", "_zipfile", "is", "None", ":", "\n", "            ", "self", ".", "_zipfile", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "_path", ")", "\n", "", "return", "self", ".", "_zipfile", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._open_file": [[239, 245], ["open", "dataset.ImageFolderDataset._get_zipfile().open", "os.path.join", "dataset.ImageFolderDataset._get_zipfile"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._get_zipfile"], ["", "def", "_open_file", "(", "self", ",", "fname", ")", ":", "\n", "        ", "if", "self", ".", "_type", "==", "'dir'", ":", "\n", "            ", "return", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ",", "fname", ")", ",", "'rb'", ")", "\n", "", "if", "self", ".", "_type", "==", "'zip'", ":", "\n", "            ", "return", "self", ".", "_get_zipfile", "(", ")", ".", "open", "(", "fname", ",", "'r'", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.close": [[246, 252], ["dataset.ImageFolderDataset._zipfile.close"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "self", ".", "_zipfile", "is", "not", "None", ":", "\n", "                ", "self", ".", "_zipfile", ".", "close", "(", ")", "\n", "", "", "finally", ":", "\n", "            ", "self", ".", "_zipfile", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.__getstate__": [[253, 255], ["dict", "dataset.Dataset.__getstate__"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset.__getstate__"], ["", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "super", "(", ")", ".", "__getstate__", "(", ")", ",", "_zipfile", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_raw_image": [[256, 267], ["numpy.array.transpose", "dataset.ImageFolderDataset._open_file", "pyspng.load", "numpy.array", "dataset.ImageFolderDataset._file_ext", "f.read", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._open_file", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._file_ext"], ["", "def", "_load_raw_image", "(", "self", ",", "raw_idx", ")", ":", "\n", "        ", "fname", "=", "self", ".", "_image_fnames", "[", "raw_idx", "]", "\n", "with", "self", ".", "_open_file", "(", "fname", ")", "as", "f", ":", "\n", "            ", "if", "pyspng", "is", "not", "None", "and", "self", ".", "_file_ext", "(", "fname", ")", "==", "'.png'", ":", "\n", "                ", "image", "=", "pyspng", ".", "load", "(", "f", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "np", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "f", ")", ")", "\n", "", "", "if", "image", ".", "ndim", "==", "2", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "# HW => HWC", "\n", "", "image", "=", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_raw_labels": [[268, 281], ["dict", "numpy.array", "labels.astype.astype.astype", "dataset.ImageFolderDataset._open_file", "json.load", "fname.replace"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._open_file", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "_load_raw_labels", "(", "self", ")", ":", "\n", "        ", "fname", "=", "self", ".", "json_name", "\n", "if", "fname", "not", "in", "self", ".", "_all_fnames", ":", "\n", "            ", "return", "None", "\n", "", "with", "self", ".", "_open_file", "(", "fname", ")", "as", "f", ":", "\n", "            ", "labels", "=", "json", ".", "load", "(", "f", ")", "[", "'labels'", "]", "\n", "", "if", "labels", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "labels", "=", "dict", "(", "labels", ")", "\n", "labels", "=", "[", "labels", "[", "fname", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "for", "fname", "in", "self", ".", "_image_fnames", "]", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "labels", "=", "labels", ".", "astype", "(", "{", "1", ":", "np", ".", "int64", ",", "2", ":", "np", ".", "float32", "}", "[", "labels", ".", "ndim", "]", ")", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_clip_img_features": [[282, 295], ["dict", "numpy.array", "clip_features.astype.astype.astype", "dataset.ImageFolderDataset._open_file", "json.load", "fname.replace"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._open_file", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "_load_clip_img_features", "(", "self", ")", ":", "\n", "        ", "fname", "=", "self", ".", "json_name", "\n", "if", "fname", "not", "in", "self", ".", "_all_fnames", ":", "\n", "            ", "return", "None", "\n", "", "with", "self", ".", "_open_file", "(", "fname", ")", "as", "f", ":", "\n", "            ", "clip_features", "=", "json", ".", "load", "(", "f", ")", "[", "'clip_img_features'", "]", "\n", "", "if", "clip_features", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "clip_features", "=", "dict", "(", "clip_features", ")", "\n", "clip_features", "=", "[", "clip_features", "[", "fname", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "for", "fname", "in", "self", ".", "_image_fnames", "]", "\n", "clip_features", "=", "np", ".", "array", "(", "clip_features", ")", "\n", "clip_features", "=", "clip_features", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "clip_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._load_clip_txt_features": [[296, 307], ["dict", "dataset.ImageFolderDataset._open_file", "json.load", "fname.replace"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.ImageFolderDataset._open_file", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "_load_clip_txt_features", "(", "self", ")", ":", "\n", "        ", "fname", "=", "self", ".", "json_name", "\n", "if", "fname", "not", "in", "self", ".", "_all_fnames", ":", "\n", "            ", "return", "None", "\n", "", "with", "self", ".", "_open_file", "(", "fname", ")", "as", "f", ":", "\n", "            ", "clip_features", "=", "json", ".", "load", "(", "f", ")", "[", "'clip_txt_features'", "]", "\n", "", "if", "clip_features", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "clip_features", "=", "dict", "(", "clip_features", ")", "\n", "clip_features", "=", "[", "clip_features", "[", "fname", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "for", "fname", "in", "self", ".", "_image_fnames", "]", "\n", "return", "clip_features", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.Loss.accumulate_gradients": [[15, 17], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "accumulate_gradients", "(", "self", ",", "phase", ",", "real_img", ",", "real_c", ",", "gen_z", ",", "gen_c", ",", "sync", ",", "gain", ",", "real_features", ")", ":", "# to be overridden by subclass", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.Model.__init__": [[19, 30], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "1024", ")", "\n", "self", ".", "linear2", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "linear3", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "linear4", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "linear5", "=", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "1024", ")", "\n", "self", ".", "linear6", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "linear7", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "linear8", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.Model.forward": [[31, 41], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "loss.Model.linear4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "loss.Model.linear8", "loss.Model.linear1", "loss.Model.linear2", "loss.Model.linear3", "loss.Model.linear5", "loss.Model.linear6", "loss.Model.linear7", "loss.Model.exp", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", "=", "F", ".", "leaky_relu", "(", "self", ".", "linear1", "(", "x", ")", ")", "\n", "mu", "=", "F", ".", "leaky_relu", "(", "self", ".", "linear2", "(", "mu", ")", ")", "\n", "mu", "=", "F", ".", "leaky_relu", "(", "self", ".", "linear3", "(", "mu", ")", ")", "\n", "mu", "=", "self", ".", "linear4", "(", "mu", ")", "\n", "std", "=", "F", ".", "leaky_relu", "(", "self", ".", "linear5", "(", "x", ")", ")", "\n", "std", "=", "F", ".", "leaky_relu", "(", "self", ".", "linear6", "(", "std", ")", ")", "\n", "std", "=", "F", ".", "leaky_relu", "(", "self", ".", "linear7", "(", "std", ")", ")", "\n", "std", "=", "self", ".", "linear8", "(", "std", ")", "\n", "return", "mu", "+", "std", ".", "exp", "(", ")", "*", "(", "torch", ".", "randn", "(", "mu", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.Model.loss": [[42, 56], ["torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "real.unsqueeze", "fake.unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "real", ",", "fake", ",", "temp", "=", "0.1", ",", "lam", "=", "0.5", ")", ":", "\n", "        ", "sim", "=", "torch", ".", "cosine_similarity", "(", "real", ".", "unsqueeze", "(", "1", ")", ",", "fake", ".", "unsqueeze", "(", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "temp", ">", "0.", ":", "\n", "            ", "sim", "=", "torch", ".", "exp", "(", "sim", "/", "temp", ")", "\n", "sim1", "=", "torch", ".", "diagonal", "(", "F", ".", "softmax", "(", "sim", ",", "dim", "=", "1", ")", ")", "*", "temp", "\n", "sim2", "=", "torch", ".", "diagonal", "(", "F", ".", "softmax", "(", "sim", ",", "dim", "=", "0", ")", ")", "*", "temp", "\n", "if", "0.", "<", "lam", "<", "1.", ":", "\n", "                ", "return", "-", "(", "lam", "*", "torch", ".", "log", "(", "sim1", ")", "+", "(", "1.", "-", "lam", ")", "*", "torch", ".", "log", "(", "sim2", ")", ")", "\n", "", "elif", "lam", "==", "0", ":", "\n", "                ", "return", "-", "torch", ".", "log", "(", "sim2", ")", "\n", "", "else", ":", "\n", "                ", "return", "-", "torch", ".", "log", "(", "sim1", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "-", "torch", ".", "diagonal", "(", "sim", ")", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.__init__": [[59, 78], ["super().__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "clip.load", "clip_model.eval", "loss.Model", "loss.StyleGAN2Loss.mapper.load_state_dict", "loss.StyleGAN2Loss.mapper.to", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "G_mapping", ",", "G_synthesis", ",", "G_mani", ",", "D", ",", "augment_pipe", "=", "None", ",", "style_mixing_prob", "=", "0.9", ",", "r1_gamma", "=", "10", ",", "pl_batch_shrink", "=", "2", ",", "pl_decay", "=", "0.01", ",", "pl_weight", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "G_mapping", "=", "G_mapping", "\n", "self", ".", "G_synthesis", "=", "G_synthesis", "\n", "self", ".", "G_mani", "=", "G_mani", "\n", "self", ".", "D", "=", "D", "\n", "self", ".", "augment_pipe", "=", "augment_pipe", "\n", "self", ".", "style_mixing_prob", "=", "style_mixing_prob", "\n", "self", ".", "r1_gamma", "=", "r1_gamma", "\n", "self", ".", "pl_batch_shrink", "=", "pl_batch_shrink", "\n", "self", ".", "pl_decay", "=", "pl_decay", "\n", "self", ".", "pl_weight", "=", "pl_weight", "\n", "self", ".", "pl_mean", "=", "torch", ".", "zeros", "(", "[", "]", ",", "device", "=", "device", ")", "\n", "clip_model", ",", "_", "=", "clip", ".", "load", "(", "\"ViT-B/32\"", ",", "device", "=", "device", ")", "# Load CLIP model here", "\n", "self", ".", "clip_model", "=", "clip_model", ".", "eval", "(", ")", "\n", "self", ".", "mapper", "=", "Model", "(", "device", ")", "\n", "self", ".", "mapper", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./implicit.0.001.64.True.0.0.pth'", ",", "map_location", "=", "'cpu'", ")", ")", "# path to the noise mapping network", "\n", "self", ".", "mapper", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.run_G": [[80, 95], ["torch_utils.misc.ddp_sync", "loss.StyleGAN2Loss.G_mapping", "torch_utils.misc.ddp_sync", "loss.StyleGAN2Loss.G_synthesis", "loss.StyleGAN2Loss.G_mapping", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.autograd.profiler.record_function", "torch.autograd.profiler.record_function", "torch.autograd.profiler.record_function", "torch.autograd.profiler.record_function", "torch.empty().random_", "torch.empty().random_", "torch.empty().random_", "torch.empty().random_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.ddp_sync", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.ddp_sync"], ["", "def", "run_G", "(", "self", ",", "z", ",", "c", ",", "sync", ",", "txt_fts", "=", "None", ",", ")", ":", "\n", "        ", "with", "misc", ".", "ddp_sync", "(", "self", ".", "G_mapping", ",", "sync", ")", ":", "\n", "            ", "ws", "=", "self", ".", "G_mapping", "(", "z", ",", "c", ")", "\n", "\n", "if", "self", ".", "style_mixing_prob", ">", "0", ":", "\n", "                ", "new_ws", "=", "self", ".", "G_mapping", "(", "torch", ".", "randn_like", "(", "z", ")", ",", "c", ",", "skip_w_avg_update", "=", "True", ")", "\n", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'style_mixing'", ")", ":", "\n", "                    ", "cutoff", "=", "torch", ".", "empty", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "ws", ".", "device", ")", ".", "random_", "(", "1", ",", "ws", ".", "shape", "[", "1", "]", ")", "\n", "cutoff", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "]", ",", "device", "=", "ws", ".", "device", ")", "<", "self", ".", "style_mixing_prob", ",", "cutoff", ",", "torch", ".", "full_like", "(", "cutoff", ",", "ws", ".", "shape", "[", "1", "]", ")", ")", "\n", "ws", "[", ":", ",", "cutoff", ":", "]", "=", "new_ws", "[", ":", ",", "cutoff", ":", "]", "\n", "\n", "", "", "", "with", "misc", ".", "ddp_sync", "(", "self", ".", "G_synthesis", ",", "sync", ")", ":", "\n", "            ", "img", "=", "self", ".", "G_synthesis", "(", "ws", ",", "fts", "=", "txt_fts", ")", "\n", "", "return", "img", ",", "ws", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.run_D": [[96, 102], ["loss.StyleGAN2Loss.augment_pipe", "torch_utils.misc.ddp_sync", "loss.StyleGAN2Loss.D"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.ddp_sync"], ["", "def", "run_D", "(", "self", ",", "img", ",", "c", ",", "sync", ",", "fts", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "augment_pipe", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "augment_pipe", "(", "img", ")", "\n", "", "with", "misc", ".", "ddp_sync", "(", "self", ".", "D", ",", "sync", ")", ":", "\n", "            ", "logits", ",", "d_fts", "=", "self", ".", "D", "(", "img", ",", "c", ",", "fts", "=", "fts", ")", "\n", "", "return", "logits", ",", "d_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.normalize": [[103, 106], ["torchvision.Compose", "torchvision.Normalize"], "methods", ["None"], ["", "def", "normalize", "(", "self", ")", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Normalize", "(", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.full_preprocess": [[108, 125], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d.", "torch.nn.ConstantPad2d.", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.interpolate", "torch.interpolate", "loss.StyleGAN2Loss.normalize", "int"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.normalize"], ["", "def", "full_preprocess", "(", "self", ",", "img", ",", "mode", "=", "'bicubic'", ",", "ratio", "=", "0.5", ")", ":", "\n", "        ", "full_size", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "\n", "if", "full_size", "<", "224", ":", "\n", "            ", "pad_1", "=", "torch", ".", "randint", "(", "0", ",", "224", "-", "full_size", ",", "(", ")", ")", "\n", "pad_2", "=", "torch", ".", "randint", "(", "0", ",", "224", "-", "full_size", ",", "(", ")", ")", "\n", "m", "=", "torch", ".", "nn", ".", "ConstantPad2d", "(", "(", "pad_1", ",", "224", "-", "full_size", "-", "pad_1", ",", "pad_2", ",", "224", "-", "full_size", "-", "pad_2", ")", ",", "1.", ")", "\n", "reshaped_img", "=", "m", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "cut_size", "=", "torch", ".", "randint", "(", "int", "(", "ratio", "*", "full_size", ")", ",", "full_size", ",", "(", ")", ")", "\n", "left", "=", "torch", ".", "randint", "(", "0", ",", "full_size", "-", "cut_size", ",", "(", ")", ")", "\n", "top", "=", "torch", ".", "randint", "(", "0", ",", "full_size", "-", "cut_size", ",", "(", ")", ")", "\n", "cropped_img", "=", "img", "[", ":", ",", ":", ",", "top", ":", "top", "+", "cut_size", ",", "left", ":", "left", "+", "cut_size", "]", "\n", "reshaped_img", "=", "F", ".", "interpolate", "(", "cropped_img", ",", "(", "224", ",", "224", ")", ",", "mode", "=", "mode", ",", "align_corners", "=", "False", ")", "\n", "", "reshaped_img", "=", "(", "reshaped_img", "+", "1.", ")", "*", "0.5", "# range in [0., 1.] now", "\n", "reshaped_img", "=", "self", ".", "normalize", "(", ")", "(", "reshaped_img", ")", "\n", "return", "reshaped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.custom_preprocess": [[126, 145], ["numpy.sqrt", "min", "min", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.interpolate", "torch.interpolate", "int", "int", "int", "int", "loss.StyleGAN2Loss.normalize", "min", "min"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.normalize"], ["", "def", "custom_preprocess", "(", "self", ",", "img", ",", "ind", ",", "cut_num", ",", "mode", "=", "'bicubic'", ")", ":", "# more to be implemented here", "\n", "        ", "full_size", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "\n", "grid", "=", "np", ".", "sqrt", "(", "cut_num", ")", "\n", "most_right", "=", "min", "(", "int", "(", "(", "ind", "%", "grid", "+", "1", ")", "*", "full_size", "/", "grid", ")", ",", "full_size", ")", "\n", "most_bottom", "=", "min", "(", "int", "(", "(", "ind", "//", "grid", "+", "1", ")", "*", "full_size", "/", "grid", ")", ",", "full_size", ")", "\n", "\n", "cut_size", "=", "torch", ".", "randint", "(", "int", "(", "full_size", "//", "(", "grid", "+", "1", ")", ")", ",", "int", "(", "min", "(", "min", "(", "full_size", "//", "2", ",", "most_right", ")", ",", "most_bottom", ")", ")", ",", "(", ")", ")", "# TODO: tune this later", "\n", "left", "=", "torch", ".", "randint", "(", "0", ",", "most_right", "-", "cut_size", ",", "(", ")", ")", "\n", "top", "=", "torch", ".", "randint", "(", "0", ",", "most_bottom", "-", "cut_size", ",", "(", ")", ")", "\n", "cropped_img", "=", "img", "[", ":", ",", ":", ",", "top", ":", "top", "+", "cut_size", ",", "left", ":", "left", "+", "cut_size", "]", "\n", "reshaped_img", "=", "F", ".", "interpolate", "(", "cropped_img", ",", "(", "224", ",", "224", ")", ",", "mode", "=", "mode", ",", "align_corners", "=", "False", ")", "\n", "\n", "\n", "reshaped_img", "=", "(", "reshaped_img", "+", "1.", ")", "*", "0.5", "# range in [0., 1.] now", "\n", "\n", "reshaped_img", "=", "self", ".", "normalize", "(", ")", "(", "reshaped_img", ")", "\n", "\n", "return", "reshaped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.contra_loss": [[146, 163], ["torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "mat1.unsqueeze", "mat2.unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "contra_loss", "(", "self", ",", "temp", ",", "mat1", ",", "mat2", ",", "lam", ")", ":", "\n", "        ", "sim", "=", "torch", ".", "cosine_similarity", "(", "mat1", ".", "unsqueeze", "(", "1", ")", ",", "mat2", ".", "unsqueeze", "(", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "temp", ">", "0.", ":", "\n", "            ", "sim", "=", "torch", ".", "exp", "(", "sim", "/", "temp", ")", "# This implementation is incorrect, it should be sim=sim/temp.", "\n", "# However, this incorrect implementation can reproduce our results with provided hyper-parameters.", "\n", "# If you want to use the correct implementation, please manually revise it.", "\n", "# The correct implementation should lead to better results, but don't use our provided hyper-parameters, you need to carefully tune lam, temp, itd, itc and other hyper-parameters", "\n", "sim1", "=", "torch", ".", "diagonal", "(", "F", ".", "softmax", "(", "sim", ",", "dim", "=", "1", ")", ")", "*", "temp", "\n", "sim2", "=", "torch", ".", "diagonal", "(", "F", ".", "softmax", "(", "sim", ",", "dim", "=", "0", ")", ")", "*", "temp", "\n", "if", "0.", "<", "lam", "<", "1.", ":", "\n", "                ", "return", "lam", "*", "torch", ".", "log", "(", "sim1", ")", "+", "(", "1.", "-", "lam", ")", "*", "torch", ".", "log", "(", "sim2", ")", "\n", "", "elif", "lam", "==", "0", ":", "\n", "                ", "return", "torch", ".", "log", "(", "sim2", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "log", "(", "sim1", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "torch", ".", "diagonal", "(", "sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.training.loss.StyleGAN2Loss.accumulate_gradients": [[164, 333], ["torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "loss.StyleGAN2Loss.accumulate_gradients.gather_tensor"], "methods", ["None"], ["", "", "def", "accumulate_gradients", "(", "self", ",", "phase", ",", "real_img", ",", "real_c", ",", "gen_z", ",", "gen_c", ",", "sync", ",", "gain", ",", "img_fts", ",", "txt_fts", ",", "lam", ",", "temp", ",", "gather", ",", "d_use_fts", ",", "itd", ",", "itc", ",", "iid", ",", "iic", ",", "mixing_prob", "=", "0.", ")", ":", "\n", "        ", "assert", "phase", "in", "[", "'Gmain'", ",", "'Greg'", ",", "'Gboth'", ",", "'Dmain'", ",", "'Dreg'", ",", "'Dboth'", "]", "\n", "do_Gmain", "=", "(", "phase", "in", "[", "'Gmain'", ",", "'Gboth'", "]", ")", "\n", "do_Dmain", "=", "(", "phase", "in", "[", "'Dmain'", ",", "'Dboth'", "]", ")", "\n", "do_Gpl", "=", "(", "phase", "in", "[", "'Greg'", ",", "'Gboth'", "]", ")", "and", "(", "self", ".", "pl_weight", "!=", "0", ")", "\n", "do_Dr1", "=", "(", "phase", "in", "[", "'Dreg'", ",", "'Dboth'", "]", ")", "and", "(", "self", ".", "r1_gamma", "!=", "0", ")", "\n", "\n", "\n", "# augmentation", "\n", "aug_level_1", "=", "0.1", "\n", "aug_level_2", "=", "0.75", "\n", "#         print(torch.cosine_similarity(img_fts, txt_fts, dim=-1))", "\n", "\n", "mixing_prob", "=", "mixing_prob", "# probability to use img_fts instead of txt_fts", "\n", "random_noise", "=", "torch", ".", "randn", "(", "txt_fts", ".", "shape", ")", ".", "to", "(", "img_fts", ".", "device", ")", "# + torch.randn((1, 512)).to(img_fts.device)", "\n", "random_noise", "=", "random_noise", "/", "random_noise", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "txt_fts_", "=", "txt_fts", "*", "(", "1", "-", "aug_level_1", ")", "+", "random_noise", "*", "aug_level_1", "\n", "txt_fts_", "=", "txt_fts_", "/", "txt_fts_", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "txt_fts", ".", "shape", "[", "-", "1", "]", "==", "img_fts", ".", "shape", "[", "-", "1", "]", ":", "\n", "# #             Gaussian purterbation", "\n", "            ", "img_fts_", "=", "img_fts", "*", "(", "1", "-", "aug_level_2", ")", "+", "random_noise", "*", "aug_level_2", "\n", "\n", "# learned generation", "\n", "#             with torch.no_grad():", "\n", "#                 normed_real_full_img = self.full_preprocess(real_img, ratio=0.99)", "\n", "#                 img_fts_real_full_ = self.clip_model.encode_image(normed_real_full_img).float()", "\n", "#                 img_fts_real_full_ = img_fts_real_full_/img_fts_real_full_.norm(dim=-1, keepdim=True)", "\n", "\n", "#                 # img_fts_real_full_ = img_fts", "\n", "#                 img_fts_ = self.mapper(img_fts_real_full_) + img_fts_real_full_", "\n", "\n", "img_fts_", "=", "img_fts_", "/", "img_fts_", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "mixing_prob", ">", "0.99", ":", "\n", "                ", "txt_fts_", "=", "img_fts_", "\n", "", "elif", "mixing_prob", "<", "0.01", ":", "\n", "                ", "txt_fts_", "=", "txt_fts_", "\n", "", "else", ":", "\n", "                ", "txt_fts_", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "txt_fts_", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "device", "=", "txt_fts_", ".", "device", ")", "<", "mixing_prob", ",", "img_fts_", ",", "txt_fts_", ")", "\n", "\n", "\n", "", "", "img_img_d", "=", "iid", "# discriminator", "\n", "img_img_c", "=", "iic", "# clip", "\n", "img_txt_d", "=", "itd", "# discriminator", "\n", "img_txt_c", "=", "itc", "# clip", "\n", "temp", "=", "temp", "\n", "lam", "=", "lam", "\n", "\n", "\n", "def", "gather_tensor", "(", "input_tensor", ",", "gather_or_not", ")", ":", "\n", "            ", "if", "gather_or_not", ":", "\n", "                ", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "output_tensor", "=", "[", "torch", ".", "zeros_like", "(", "input_tensor", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "output_tensor", ",", "input_tensor", ")", "\n", "output_tensor", "[", "rank", "]", "=", "input_tensor", "\n", "#           # print(torch.cat(output_tensor).size())", "\n", "return", "torch", ".", "cat", "(", "output_tensor", ")", "\n", "", "else", ":", "\n", "                ", "return", "input_tensor", "\n", "\n", "", "", "txt_fts_all", "=", "gather_tensor", "(", "txt_fts_", ",", "gather", ")", "\n", "\n", "# Gmain: Maximize logits for generated images.", "\n", "if", "do_Gmain", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Gmain_forward'", ")", ":", "\n", "                ", "gen_img", ",", "_gen_ws", "=", "self", ".", "run_G", "(", "gen_z", ",", "gen_c", ",", "txt_fts", "=", "txt_fts_", ",", "sync", "=", "(", "sync", "and", "not", "do_Gpl", ")", ")", "# May get synced by Gpl.", "\n", "gen_logits", ",", "gen_d_fts", "=", "self", ".", "run_D", "(", "gen_img", ",", "gen_c", ",", "sync", "=", "False", ",", "fts", "=", "txt_fts_", ")", "\n", "\n", "gen_d_fts_all", "=", "gather_tensor", "(", "gen_d_fts", ",", "gather", ")", "\n", "\n", "training_stats", ".", "report", "(", "'Loss/scores/fake'", ",", "gen_logits", ")", "\n", "training_stats", ".", "report", "(", "'Loss/signs/fake'", ",", "gen_logits", ".", "sign", "(", ")", ")", "\n", "\n", "loss_Gmain", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "gen_logits", ")", "# -log(sigmoid(gen_logits))", "\n", "\n", "normed_gen_full_img", "=", "self", ".", "full_preprocess", "(", "gen_img", ")", "\n", "img_fts_gen_full", "=", "self", ".", "clip_model", ".", "encode_image", "(", "normed_gen_full_img", ")", "\n", "img_fts_gen_full", "=", "img_fts_gen_full", "/", "img_fts_gen_full", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "\n", "img_fts_gen_full_all", "=", "gather_tensor", "(", "img_fts_gen_full", ",", "gather", ")", "\n", "img_fts_all", "=", "gather_tensor", "(", "img_fts", ",", "gather", ")", "\n", "if", "img_txt_c", ">", "0.", ":", "\n", "                    ", "clip_loss_img_txt", "=", "self", ".", "contra_loss", "(", "temp", ",", "img_fts_gen_full_all", ",", "txt_fts_all", ",", "lam", ")", "\n", "loss_Gmain", "=", "loss_Gmain", "-", "img_txt_c", "*", "clip_loss_img_txt", ".", "mean", "(", ")", "\n", "\n", "", "if", "img_img_c", ">", "0.", ":", "\n", "                    ", "clip_loss_img_img", "=", "self", ".", "contra_loss", "(", "temp", ",", "img_fts_gen_full_all", ",", "img_fts_all", ",", "lam", ")", "\n", "loss_Gmain", "=", "loss_Gmain", "-", "img_img_c", "*", "clip_loss_img_img", ".", "mean", "(", ")", "\n", "\n", "\n", "", "if", "img_txt_d", ">", "0.", ":", "\n", "                    ", "loss_Gmain", "=", "loss_Gmain", "-", "img_txt_d", "*", "self", ".", "contra_loss", "(", "temp", ",", "gen_d_fts_all", ",", "txt_fts_all", ",", "lam", ")", ".", "mean", "(", ")", "\n", "", "if", "img_img_d", ">", "0.", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "_", ",", "g_real_d_fts", "=", "self", ".", "run_D", "(", "real_img", ".", "detach", "(", ")", ",", "real_c", ",", "sync", "=", "False", ",", "fts", "=", "txt_fts_", ")", "\n", "", "g_real_d_fts_all", "=", "gather_tensor", "(", "g_real_d_fts", ",", "gather", ")", "\n", "loss_Gmain", "=", "loss_Gmain", "-", "img_img_d", "*", "self", ".", "contra_loss", "(", "temp", ",", "g_real_d_fts_all", ",", "gen_d_fts_all", ",", "lam", ")", ".", "mean", "(", ")", "\n", "\n", "", "training_stats", ".", "report", "(", "'Loss/G/loss'", ",", "loss_Gmain", ")", "\n", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Gmain_backward'", ")", ":", "\n", "                ", "loss_Gmain", ".", "mean", "(", ")", ".", "mul", "(", "gain", ")", ".", "backward", "(", ")", "\n", "\n", "# Gpl: Apply path length regularization.", "\n", "", "", "if", "do_Gpl", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Gpl_forward'", ")", ":", "\n", "                ", "batch_size", "=", "gen_z", ".", "shape", "[", "0", "]", "//", "self", ".", "pl_batch_shrink", "\n", "txt_fts_0", "=", "txt_fts_", "[", ":", "batch_size", "]", "\n", "txt_fts_0", ".", "requires_grad_", "(", ")", "\n", "gen_img", ",", "gen_ws", "=", "self", ".", "run_G", "(", "gen_z", "[", ":", "batch_size", "]", ",", "gen_c", "[", ":", "batch_size", "]", ",", "txt_fts", "=", "txt_fts_0", ",", "sync", "=", "sync", ")", "\n", "pl_noise", "=", "torch", ".", "randn_like", "(", "gen_img", ")", "/", "np", ".", "sqrt", "(", "gen_img", ".", "shape", "[", "2", "]", "*", "gen_img", ".", "shape", "[", "3", "]", ")", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'pl_grads'", ")", ",", "conv2d_gradfix", ".", "no_weight_gradients", "(", ")", ":", "\n", "                    ", "if", "d_use_fts", ":", "\n", "                        ", "pl_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "[", "(", "gen_img", "*", "pl_noise", ")", ".", "sum", "(", ")", "]", ",", "inputs", "=", "[", "gen_ws", ",", "txt_fts_0", "]", ",", "create_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                         ", "pl_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "[", "(", "gen_img", "*", "pl_noise", ")", ".", "sum", "(", ")", "]", ",", "inputs", "=", "[", "gen_ws", "]", ",", "create_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "", "pl_lengths", "=", "pl_grads", ".", "square", "(", ")", ".", "sum", "(", "2", ")", ".", "mean", "(", "1", ")", ".", "sqrt", "(", ")", "\n", "pl_mean", "=", "self", ".", "pl_mean", ".", "lerp", "(", "pl_lengths", ".", "mean", "(", ")", ",", "self", ".", "pl_decay", ")", "\n", "self", ".", "pl_mean", ".", "copy_", "(", "pl_mean", ".", "detach", "(", ")", ")", "\n", "pl_penalty", "=", "(", "pl_lengths", "-", "pl_mean", ")", ".", "square", "(", ")", "\n", "training_stats", ".", "report", "(", "'Loss/pl_penalty'", ",", "pl_penalty", ")", "\n", "loss_Gpl", "=", "pl_penalty", "*", "self", ".", "pl_weight", "\n", "training_stats", ".", "report", "(", "'Loss/G/reg'", ",", "loss_Gpl", ")", "\n", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Gpl_backward'", ")", ":", "\n", "                ", "(", "gen_img", "[", ":", ",", "0", ",", "0", ",", "0", "]", "*", "0", "+", "loss_Gpl", ")", ".", "mean", "(", ")", ".", "mul", "(", "gain", ")", ".", "backward", "(", ")", "\n", "\n", "# Dmain: Minimize logits for generated images.", "\n", "", "", "loss_Dgen", "=", "0", "\n", "if", "do_Dmain", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Dgen_forward'", ")", ":", "\n", "                ", "gen_img", ",", "_gen_ws", "=", "self", ".", "run_G", "(", "gen_z", ",", "gen_c", ",", "txt_fts", "=", "txt_fts_", ",", "sync", "=", "False", ")", "\n", "gen_logits", ",", "gen_d_fts", "=", "self", ".", "run_D", "(", "gen_img", ",", "gen_c", ",", "sync", "=", "False", ",", "fts", "=", "txt_fts_", ")", "# Gets synced by loss_Dreal.", "\n", "training_stats", ".", "report", "(", "'Loss/scores/fake'", ",", "gen_logits", ")", "\n", "training_stats", ".", "report", "(", "'Loss/signs/fake'", ",", "gen_logits", ".", "sign", "(", ")", ")", "\n", "loss_Dgen", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "gen_logits", ")", "# -log(1 - sigmoid(gen_logits))", "\n", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'Dgen_backward'", ")", ":", "\n", "                ", "loss_Dgen", ".", "mean", "(", ")", ".", "mul", "(", "gain", ")", ".", "backward", "(", ")", "\n", "\n", "# Dmain: Maximize logits for real images.", "\n", "# Dr1: Apply R1 regularization.", "\n", "", "", "if", "do_Dmain", "or", "do_Dr1", ":", "\n", "            ", "name", "=", "'Dreal_Dr1'", "if", "do_Dmain", "and", "do_Dr1", "else", "'Dreal'", "if", "do_Dmain", "else", "'Dr1'", "\n", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "name", "+", "'_forward'", ")", ":", "\n", "                ", "real_img_tmp", "=", "real_img", ".", "detach", "(", ")", ".", "requires_grad_", "(", "do_Dr1", ")", "\n", "real_logits", ",", "real_d_fts", "=", "self", ".", "run_D", "(", "real_img_tmp", ",", "real_c", ",", "sync", "=", "sync", ",", "fts", "=", "txt_fts_", ")", "\n", "training_stats", ".", "report", "(", "'Loss/scores/real'", ",", "real_logits", ")", "\n", "training_stats", ".", "report", "(", "'Loss/signs/real'", ",", "real_logits", ".", "sign", "(", ")", ")", "\n", "\n", "loss_Dreal", "=", "0", "\n", "if", "do_Dmain", ":", "\n", "                    ", "loss_Dreal", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "real_logits", ")", "# -log(sigmoid(real_logits))", "\n", "if", "img_txt_d", ">", "0.", ":", "\n", "                        ", "real_d_fts_all", "=", "gather_tensor", "(", "real_d_fts", ",", "gather", ")", "\n", "loss_Dreal", "=", "loss_Dreal", "-", "img_txt_d", "*", "self", ".", "contra_loss", "(", "temp", ",", "real_d_fts_all", ",", "txt_fts_all", ",", "lam", ")", ".", "mean", "(", ")", "\n", "\n", "", "training_stats", ".", "report", "(", "'Loss/D/loss'", ",", "loss_Dgen", "+", "loss_Dreal", ")", "\n", "\n", "", "loss_Dr1", "=", "0", "\n", "if", "do_Dr1", ":", "\n", "                    ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'r1_grads'", ")", ",", "conv2d_gradfix", ".", "no_weight_gradients", "(", ")", ":", "\n", "                        ", "r1_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "[", "real_logits", ".", "sum", "(", ")", "]", ",", "inputs", "=", "[", "real_img_tmp", "]", ",", "create_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "r1_penalty", "=", "r1_grads", ".", "square", "(", ")", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "loss_Dr1", "=", "r1_penalty", "*", "(", "self", ".", "r1_gamma", "/", "2", ")", "\n", "training_stats", ".", "report", "(", "'Loss/r1_penalty'", ",", "r1_penalty", ")", "\n", "training_stats", ".", "report", "(", "'Loss/D/reg'", ",", "loss_Dr1", ")", "\n", "\n", "", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "name", "+", "'_backward'", ")", ":", "\n", "                ", "(", "real_logits", "*", "0", "+", "loss_Dreal", "+", "loss_Dr1", ")", ".", "mean", "(", ")", ".", "mul", "(", "gain", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.suppress_tracer_warnings.__enter__": [[63, 67], ["super().__enter__", "warnings.simplefilter"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.suppress_tracer_warnings.__enter__"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__enter__", "(", ")", "\n", "warnings", ".", "simplefilter", "(", "'ignore'", ",", "category", "=", "torch", ".", "jit", ".", "TracerWarning", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.InfiniteSampler.__init__": [[103, 115], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "rank", "=", "0", ",", "num_replicas", "=", "1", ",", "shuffle", "=", "True", ",", "seed", "=", "0", ",", "window_size", "=", "0.5", ")", ":", "\n", "        ", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "num_replicas", ">", "0", "\n", "assert", "0", "<=", "rank", "<", "num_replicas", "\n", "assert", "0", "<=", "window_size", "<=", "1", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.InfiniteSampler.__iter__": [[116, 134], ["numpy.arange", "len", "numpy.random.RandomState", "numpy.random.RandomState.shuffle", "int", "numpy.rint", "numpy.random.RandomState.randint"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "order", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "rnd", "=", "None", "\n", "window", "=", "0", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "rnd", ".", "shuffle", "(", "order", ")", "\n", "window", "=", "int", "(", "np", ".", "rint", "(", "order", ".", "size", "*", "self", ".", "window_size", ")", ")", "\n", "\n", "", "idx", "=", "0", "\n", "while", "True", ":", "\n", "            ", "i", "=", "idx", "%", "order", ".", "size", "\n", "if", "idx", "%", "self", ".", "num_replicas", "==", "self", ".", "rank", ":", "\n", "                ", "yield", "order", "[", "i", "]", "\n", "", "if", "window", ">=", "2", ":", "\n", "                ", "j", "=", "(", "i", "-", "rnd", ".", "randint", "(", "window", ")", ")", "%", "order", ".", "size", "\n", "order", "[", "i", "]", ",", "order", "[", "j", "]", "=", "order", "[", "j", "]", ",", "order", "[", "i", "]", "\n", "", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.constant": [[15, 35], ["numpy.asarray", "_constant_cache.get", "tuple", "torch.get_default_dtype", "torch.device", "np.asarray.tobytes", "torch.as_tensor", "tensor.contiguous.contiguous", "np.asarray.copy", "torch.broadcast_tensors", "torch.empty"], "function", ["None"], ["def", "constant", "(", "value", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "device", "=", "None", ",", "memory_format", "=", "None", ")", ":", "\n", "    ", "value", "=", "np", ".", "asarray", "(", "value", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "if", "memory_format", "is", "None", ":", "\n", "        ", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "", "key", "=", "(", "value", ".", "shape", ",", "value", ".", "dtype", ",", "value", ".", "tobytes", "(", ")", ",", "shape", ",", "dtype", ",", "device", ",", "memory_format", ")", "\n", "tensor", "=", "_constant_cache", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "        ", "tensor", "=", "torch", ".", "as_tensor", "(", "value", ".", "copy", "(", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "tensor", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "tensor", ",", "torch", ".", "empty", "(", "shape", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "contiguous", "(", "memory_format", "=", "memory_format", ")", "\n", "_constant_cache", "[", "key", "]", "=", "tensor", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape": [[73, 87], ["enumerate", "len", "AssertionError", "zip", "isinstance", "isinstance", "len", "misc.suppress_tracer_warnings", "symbolic_assert", "torch.equal", "misc.suppress_tracer_warnings", "symbolic_assert", "AssertionError", "torch.as_tensor", "torch.equal", "torch.as_tensor"], "function", ["None"], ["", "", "def", "assert_shape", "(", "tensor", ",", "ref_shape", ")", ":", "\n", "    ", "if", "tensor", ".", "ndim", "!=", "len", "(", "ref_shape", ")", ":", "\n", "        ", "raise", "AssertionError", "(", "f'Wrong number of dimensions: got {tensor.ndim}, expected {len(ref_shape)}'", ")", "\n", "", "for", "idx", ",", "(", "size", ",", "ref_size", ")", "in", "enumerate", "(", "zip", "(", "tensor", ".", "shape", ",", "ref_shape", ")", ")", ":", "\n", "        ", "if", "ref_size", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "ref_size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "torch", ".", "as_tensor", "(", "size", ")", ",", "ref_size", ")", ",", "f'Wrong size for dimension {idx}'", ")", "\n", "", "", "elif", "isinstance", "(", "size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "size", ",", "torch", ".", "as_tensor", "(", "ref_size", ")", ")", ",", "f'Wrong size for dimension {idx}: expected {ref_size}'", ")", "\n", "", "", "elif", "size", "!=", "ref_size", ":", "\n", "            ", "raise", "AssertionError", "(", "f'Wrong size for dimension {idx}: got {size}, expected {ref_size}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.profiled_function": [[91, 97], ["torch.autograd.profiler.record_function", "fn"], "function", ["None"], ["", "", "", "def", "profiled_function", "(", "fn", ")", ":", "\n", "    ", "def", "decorator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "fn", ".", "__name__", ")", ":", "\n", "            ", "return", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "decorator", ".", "__name__", "=", "fn", ".", "__name__", "\n", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.params_and_buffers": [[138, 141], ["isinstance", "list", "list", "module.parameters", "module.buffers"], "function", ["None"], ["", "", "", "def", "params_and_buffers", "(", "module", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "return", "list", "(", "module", ".", "parameters", "(", ")", ")", "+", "list", "(", "module", ".", "buffers", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.named_params_and_buffers": [[142, 145], ["isinstance", "list", "list", "module.named_parameters", "module.named_buffers"], "function", ["None"], ["", "def", "named_params_and_buffers", "(", "module", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "return", "list", "(", "module", ".", "named_parameters", "(", ")", ")", "+", "list", "(", "module", ".", "named_buffers", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.copy_params_and_buffers": [[146, 154], ["isinstance", "isinstance", "misc.named_params_and_buffers", "misc.named_params_and_buffers", "tensor.copy_().requires_grad_", "tensor.copy_", "src_tensors[].detach"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.named_params_and_buffers", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.named_params_and_buffers"], ["", "def", "copy_params_and_buffers", "(", "src_module", ",", "dst_module", ",", "require_all", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "src_module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "dst_module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "src_tensors", "=", "{", "name", ":", "tensor", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "src_module", ")", "}", "\n", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "dst_module", ")", ":", "\n", "        ", "assert", "(", "name", "in", "src_tensors", ")", "or", "(", "not", "require_all", ")", "\n", "if", "name", "in", "src_tensors", ":", "\n", "            ", "tensor", ".", "copy_", "(", "src_tensors", "[", "name", "]", ".", "detach", "(", ")", ")", ".", "requires_grad_", "(", "tensor", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.ddp_sync": [[159, 167], ["isinstance", "isinstance", "module.no_sync"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "ddp_sync", "(", "module", ",", "sync", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "if", "sync", "or", "not", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "yield", "\n", "", "else", ":", "\n", "        ", "with", "module", ".", "no_sync", "(", ")", ":", "\n", "            ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.check_ddp_consistency": [[171, 181], ["isinstance", "misc.named_params_and_buffers", "tensor.detach.detach", "tensor.detach.clone", "torch.distributed.broadcast", "re.fullmatch", "type", "nan_to_num", "nan_to_num"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.named_params_and_buffers"], ["", "", "", "def", "check_ddp_consistency", "(", "module", ",", "ignore_regex", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "module", ")", ":", "\n", "        ", "fullname", "=", "type", "(", "module", ")", ".", "__name__", "+", "'.'", "+", "name", "\n", "if", "ignore_regex", "is", "not", "None", "and", "re", ".", "fullmatch", "(", "ignore_regex", ",", "fullname", ")", ":", "\n", "            ", "continue", "\n", "", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "other", "=", "tensor", ".", "clone", "(", ")", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "tensor", "=", "other", ",", "src", "=", "0", ")", "\n", "assert", "(", "nan_to_num", "(", "tensor", ")", "==", "nan_to_num", "(", "other", ")", ")", ".", "all", "(", ")", ",", "fullname", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.print_module_summary": [[185, 254], ["isinstance", "isinstance", "module", "set", "print", "print", "isinstance", "mod.register_forward_pre_hook", "mod.register_forward_hook", "hook.remove", "sum", "sum", "range", "max", "print", "entries.append", "module.modules", "module.modules", "id", "len", "module.named_modules", "str", "len", "len", "str", "str", "zip", "isinstance", "list", "dnnlib.EasyDict", "e.mod.parameters", "e.mod.buffers", "type", "t.numel", "t.numel", "list", "str().split", "len", "isinstance", "id", "id", "id", "len", "len", "len", "str", "str", "str", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "def", "print_module_summary", "(", "module", ",", "inputs", ",", "max_nesting", "=", "3", ",", "skip_redundant", "=", "True", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "not", "isinstance", "(", "module", ",", "torch", ".", "jit", ".", "ScriptModule", ")", "\n", "assert", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", "\n", "\n", "# Register hooks.", "\n", "entries", "=", "[", "]", "\n", "nesting", "=", "[", "0", "]", "\n", "def", "pre_hook", "(", "_mod", ",", "_inputs", ")", ":", "\n", "        ", "nesting", "[", "0", "]", "+=", "1", "\n", "", "def", "post_hook", "(", "mod", ",", "_inputs", ",", "outputs", ")", ":", "\n", "        ", "nesting", "[", "0", "]", "-=", "1", "\n", "if", "nesting", "[", "0", "]", "<=", "max_nesting", ":", "\n", "            ", "outputs", "=", "list", "(", "outputs", ")", "if", "isinstance", "(", "outputs", ",", "(", "tuple", ",", "list", ")", ")", "else", "[", "outputs", "]", "\n", "outputs", "=", "[", "t", "for", "t", "in", "outputs", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", "]", "\n", "entries", ".", "append", "(", "dnnlib", ".", "EasyDict", "(", "mod", "=", "mod", ",", "outputs", "=", "outputs", ")", ")", "\n", "", "", "hooks", "=", "[", "mod", ".", "register_forward_pre_hook", "(", "pre_hook", ")", "for", "mod", "in", "module", ".", "modules", "(", ")", "]", "\n", "hooks", "+=", "[", "mod", ".", "register_forward_hook", "(", "post_hook", ")", "for", "mod", "in", "module", ".", "modules", "(", ")", "]", "\n", "\n", "# Run module.", "\n", "outputs", "=", "module", "(", "*", "inputs", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "# Identify unique outputs, parameters, and buffers.", "\n", "", "tensors_seen", "=", "set", "(", ")", "\n", "for", "e", "in", "entries", ":", "\n", "        ", "e", ".", "unique_params", "=", "[", "t", "for", "t", "in", "e", ".", "mod", ".", "parameters", "(", ")", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "e", ".", "unique_buffers", "=", "[", "t", "for", "t", "in", "e", ".", "mod", ".", "buffers", "(", ")", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "e", ".", "unique_outputs", "=", "[", "t", "for", "t", "in", "e", ".", "outputs", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "tensors_seen", "|=", "{", "id", "(", "t", ")", "for", "t", "in", "e", ".", "unique_params", "+", "e", ".", "unique_buffers", "+", "e", ".", "unique_outputs", "}", "\n", "\n", "# Filter out redundant entries.", "\n", "", "if", "skip_redundant", ":", "\n", "        ", "entries", "=", "[", "e", "for", "e", "in", "entries", "if", "len", "(", "e", ".", "unique_params", ")", "or", "len", "(", "e", ".", "unique_buffers", ")", "or", "len", "(", "e", ".", "unique_outputs", ")", "]", "\n", "\n", "# Construct table.", "\n", "", "rows", "=", "[", "[", "type", "(", "module", ")", ".", "__name__", ",", "'Parameters'", ",", "'Buffers'", ",", "'Output shape'", ",", "'Datatype'", "]", "]", "\n", "rows", "+=", "[", "[", "'---'", "]", "*", "len", "(", "rows", "[", "0", "]", ")", "]", "\n", "param_total", "=", "0", "\n", "buffer_total", "=", "0", "\n", "submodule_names", "=", "{", "mod", ":", "name", "for", "name", ",", "mod", "in", "module", ".", "named_modules", "(", ")", "}", "\n", "for", "e", "in", "entries", ":", "\n", "        ", "name", "=", "'<top-level>'", "if", "e", ".", "mod", "is", "module", "else", "submodule_names", "[", "e", ".", "mod", "]", "\n", "param_size", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "e", ".", "unique_params", ")", "\n", "buffer_size", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "e", ".", "unique_buffers", ")", "\n", "output_shapes", "=", "[", "str", "(", "list", "(", "e", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "for", "t", "in", "e", ".", "outputs", "]", "\n", "output_dtypes", "=", "[", "str", "(", "t", ".", "dtype", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "for", "t", "in", "e", ".", "outputs", "]", "\n", "rows", "+=", "[", "[", "\n", "name", "+", "(", "':0'", "if", "len", "(", "e", ".", "outputs", ")", ">=", "2", "else", "''", ")", ",", "\n", "str", "(", "param_size", ")", "if", "param_size", "else", "'-'", ",", "\n", "str", "(", "buffer_size", ")", "if", "buffer_size", "else", "'-'", ",", "\n", "(", "output_shapes", "+", "[", "'-'", "]", ")", "[", "0", "]", ",", "\n", "(", "output_dtypes", "+", "[", "'-'", "]", ")", "[", "0", "]", ",", "\n", "]", "]", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "e", ".", "outputs", ")", ")", ":", "\n", "            ", "rows", "+=", "[", "[", "name", "+", "f':{idx}'", ",", "'-'", ",", "'-'", ",", "output_shapes", "[", "idx", "]", ",", "output_dtypes", "[", "idx", "]", "]", "]", "\n", "", "param_total", "+=", "param_size", "\n", "buffer_total", "+=", "buffer_size", "\n", "", "rows", "+=", "[", "[", "'---'", "]", "*", "len", "(", "rows", "[", "0", "]", ")", "]", "\n", "rows", "+=", "[", "[", "'Total'", ",", "str", "(", "param_total", ")", ",", "str", "(", "buffer_total", ")", ",", "'-'", ",", "'-'", "]", "]", "\n", "\n", "# Print table.", "\n", "widths", "=", "[", "max", "(", "len", "(", "cell", ")", "for", "cell", "in", "column", ")", "for", "column", "in", "zip", "(", "*", "rows", ")", "]", "\n", "print", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "print", "(", "'  '", ".", "join", "(", "cell", "+", "' '", "*", "(", "width", "-", "len", "(", "cell", ")", ")", "for", "cell", ",", "width", "in", "zip", "(", "row", ",", "widths", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.__init__": [[126, 133], ["re.compile", "dict", "dict", "training_stats.Collector.update", "training_stats.Collector._moments.clear"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update"], ["def", "__init__", "(", "self", ",", "regex", "=", "'.*'", ",", "keep_previous", "=", "True", ")", ":", "\n", "        ", "self", ".", "_regex", "=", "re", ".", "compile", "(", "regex", ")", "\n", "self", ".", "_keep_previous", "=", "keep_previous", "\n", "self", ".", "_cumulative", "=", "dict", "(", ")", "\n", "self", ".", "_moments", "=", "dict", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "self", ".", "_moments", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.names": [[134, 139], ["training_stats.Collector._regex.fullmatch"], "methods", ["None"], ["", "def", "names", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the names of all statistics broadcasted so far that\n        match the regular expression specified at construction time.\n        \"\"\"", "\n", "return", "[", "name", "for", "name", "in", "_counters", "if", "self", ".", "_regex", ".", "fullmatch", "(", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.update": [[140, 162], ["training_stats._sync", "training_stats.Collector._moments.clear", "training_stats.Collector.names", "training_stats.Collector._cumulative[].copy_", "torch.zeros", "float"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats._sync", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.names"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Copies current values of the internal counters to the\n        user-visible state and resets them for the next round.\n\n        If `keep_previous=True` was specified at construction time, the\n        operation is skipped for statistics that have received no scalars\n        since the last update, retaining their previous averages.\n\n        This method performs a number of GPU-to-CPU transfers and one\n        `torch.distributed.all_reduce()`. It is intended to be called\n        periodically in the main training loop, typically once every\n        N training steps.\n        \"\"\"", "\n", "if", "not", "self", ".", "_keep_previous", ":", "\n", "            ", "self", ".", "_moments", ".", "clear", "(", ")", "\n", "", "for", "name", ",", "cumulative", "in", "_sync", "(", "self", ".", "names", "(", ")", ")", ":", "\n", "            ", "if", "name", "not", "in", "self", ".", "_cumulative", ":", "\n", "                ", "self", ".", "_cumulative", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "delta", "=", "cumulative", "-", "self", ".", "_cumulative", "[", "name", "]", "\n", "self", ".", "_cumulative", "[", "name", "]", ".", "copy_", "(", "cumulative", ")", "\n", "if", "float", "(", "delta", "[", "0", "]", ")", "!=", "0", ":", "\n", "                ", "self", ".", "_moments", "[", "name", "]", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector._get_delta": [[163, 172], ["training_stats.Collector._regex.fullmatch", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "_get_delta", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the raw moments that were accumulated for the given\n        statistic between the last two calls to `update()`, or zero if\n        no scalars were collected.\n        \"\"\"", "\n", "assert", "self", ".", "_regex", ".", "fullmatch", "(", "name", ")", "\n", "if", "name", "not", "in", "self", ".", "_moments", ":", "\n", "            ", "self", ".", "_moments", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "return", "self", ".", "_moments", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.num": [[173, 180], ["training_stats.Collector._get_delta", "int"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector._get_delta"], ["", "def", "num", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the number of scalars that were accumulated for the given\n        statistic between the last two calls to `update()`, or zero if\n        no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "return", "int", "(", "delta", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean": [[181, 190], ["training_stats.Collector._get_delta", "float", "int", "float"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector._get_delta"], ["", "def", "mean", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the mean of the scalars that were accumulated for the\n        given statistic between the last two calls to `update()`, or NaN if\n        no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "return", "float", "(", "delta", "[", "1", "]", "/", "delta", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.std": [[191, 204], ["training_stats.Collector._get_delta", "float", "float", "numpy.sqrt", "float", "int", "float", "max", "int", "numpy.isfinite", "float", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector._get_delta"], ["", "def", "std", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the standard deviation of the scalars that were\n        accumulated for the given statistic between the last two calls to\n        `update()`, or NaN if no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "0", "or", "not", "np", ".", "isfinite", "(", "float", "(", "delta", "[", "1", "]", ")", ")", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "1", ":", "\n", "            ", "return", "float", "(", "0", ")", "\n", "", "mean", "=", "float", "(", "delta", "[", "1", "]", "/", "delta", "[", "0", "]", ")", "\n", "raw_var", "=", "float", "(", "delta", "[", "2", "]", "/", "delta", "[", "0", "]", ")", "\n", "return", "np", ".", "sqrt", "(", "max", "(", "raw_var", "-", "np", ".", "square", "(", "mean", ")", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.as_dict": [[205, 218], ["dnnlib.EasyDict", "training_stats.Collector.names", "dnnlib.EasyDict", "training_stats.Collector.num", "training_stats.Collector.mean", "training_stats.Collector.std"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.names", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.num", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.std"], ["", "def", "as_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the averages accumulated between the last two calls to\n        `update()` as an `dnnlib.EasyDict`. The contents are as follows:\n\n            dnnlib.EasyDict(\n                NAME = dnnlib.EasyDict(num=FLOAT, mean=FLOAT, std=FLOAT),\n                ...\n            )\n        \"\"\"", "\n", "stats", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "for", "name", "in", "self", ".", "names", "(", ")", ":", "\n", "            ", "stats", "[", "name", "]", "=", "dnnlib", ".", "EasyDict", "(", "num", "=", "self", ".", "num", "(", "name", ")", ",", "mean", "=", "self", ".", "mean", "(", "name", ")", ",", "std", "=", "self", ".", "std", "(", "name", ")", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.__getitem__": [[219, 224], ["training_stats.Collector.mean"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Convenience getter.\n        `collector[name]` is a synonym for `collector.mean(name)`.\n        \"\"\"", "\n", "return", "self", ".", "mean", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.init_multiprocessing": [[27, 45], ["None"], "function", ["None"], ["def", "init_multiprocessing", "(", "rank", ",", "sync_device", ")", ":", "\n", "    ", "r\"\"\"Initializes `torch_utils.training_stats` for collecting statistics\n    across multiple processes.\n\n    This function must be called after\n    `torch.distributed.init_process_group()` and before `Collector.update()`.\n    The call is not necessary if multi-process collection is not needed.\n\n    Args:\n        rank:           Rank of the current process.\n        sync_device:    PyTorch device to use for inter-process\n                        communication, or None to disable multi-process\n                        collection. Typically `torch.device('cuda', rank)`.\n    \"\"\"", "\n", "global", "_rank", ",", "_sync_device", "\n", "assert", "not", "_sync_called", "\n", "_rank", "=", "rank", "\n", "_sync_device", "=", "sync_device", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report": [[48, 93], ["torch.as_tensor", "elems.detach().flatten().to.detach().flatten().to", "torch.stack", "moments.to.to", "[].add_", "dict", "elems.detach().flatten().to.numel", "torch.zeros_like", "elems.detach().flatten().to.detach().flatten", "torch.ones_like().sum", "elems.detach().flatten().to.sum", "elems.detach().flatten().to.square().sum", "elems.detach().flatten().to.detach", "torch.ones_like", "elems.detach().flatten().to.square"], "function", ["None"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "report", "(", "name", ",", "value", ")", ":", "\n", "    ", "r\"\"\"Broadcasts the given set of scalars to all interested instances of\n    `Collector`, across device and process boundaries.\n\n    This function is expected to be extremely cheap and can be safely\n    called from anywhere in the training loop, loss function, or inside a\n    `torch.nn.Module`.\n\n    Warning: The current implementation expects the set of unique names to\n    be consistent across processes. Please make sure that `report()` is\n    called at least once for each unique name by each process, and in the\n    same order. If a given process has no scalars to broadcast, it can do\n    `report(name, [])` (empty list).\n\n    Args:\n        name:   Arbitrary string specifying the name of the statistic.\n                Averages are accumulated separately for each unique name.\n        value:  Arbitrary set of scalars. Can be a list, tuple,\n                NumPy array, PyTorch tensor, or Python scalar.\n\n    Returns:\n        The same `value` that was passed in.\n    \"\"\"", "\n", "if", "name", "not", "in", "_counters", ":", "\n", "        ", "_counters", "[", "name", "]", "=", "dict", "(", ")", "\n", "\n", "", "elems", "=", "torch", ".", "as_tensor", "(", "value", ")", "\n", "if", "elems", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "value", "\n", "\n", "", "elems", "=", "elems", ".", "detach", "(", ")", ".", "flatten", "(", ")", ".", "to", "(", "_reduce_dtype", ")", "\n", "moments", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "ones_like", "(", "elems", ")", ".", "sum", "(", ")", ",", "\n", "elems", ".", "sum", "(", ")", ",", "\n", "elems", ".", "square", "(", ")", ".", "sum", "(", ")", ",", "\n", "]", ")", "\n", "assert", "moments", ".", "ndim", "==", "1", "and", "moments", ".", "shape", "[", "0", "]", "==", "_num_moments", "\n", "moments", "=", "moments", ".", "to", "(", "_counter_dtype", ")", "\n", "\n", "device", "=", "moments", ".", "device", "\n", "if", "device", "not", "in", "_counters", "[", "name", "]", ":", "\n", "        ", "_counters", "[", "name", "]", "[", "device", "]", "=", "torch", ".", "zeros_like", "(", "moments", ")", "\n", "", "_counters", "[", "name", "]", "[", "device", "]", ".", "add_", "(", "moments", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report0": [[96, 103], ["training_stats.report"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.report"], ["", "def", "report0", "(", "name", ",", "value", ")", ":", "\n", "    ", "r\"\"\"Broadcasts the given set of scalars by the first process (`rank = 0`),\n    but ignores any scalars provided by the other processes.\n    See `report()` for further details.\n    \"\"\"", "\n", "report", "(", "name", ",", "value", "if", "_rank", "==", "0", "else", "[", "]", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats._sync": [[227, 260], ["torch.stack", "deltas.cpu.cpu", "enumerate", "len", "torch.device", "torch.zeros", "_counters[].values", "deltas.cpu.append", "torch.distributed.all_reduce", "_cumulative[].add_", "torch.zeros.add_", "counter.copy_", "torch.zeros", "counter.to", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "def", "_sync", "(", "names", ")", ":", "\n", "    ", "r\"\"\"Synchronize the global cumulative counters across devices and\n    processes. Called internally by `Collector.update()`.\n    \"\"\"", "\n", "if", "len", "(", "names", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "global", "_sync_called", "\n", "_sync_called", "=", "True", "\n", "\n", "# Collect deltas within current rank.", "\n", "deltas", "=", "[", "]", "\n", "device", "=", "_sync_device", "if", "_sync_device", "is", "not", "None", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "for", "name", "in", "names", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ",", "device", "=", "device", ")", "\n", "for", "counter", "in", "_counters", "[", "name", "]", ".", "values", "(", ")", ":", "\n", "            ", "delta", ".", "add_", "(", "counter", ".", "to", "(", "device", ")", ")", "\n", "counter", ".", "copy_", "(", "torch", ".", "zeros_like", "(", "counter", ")", ")", "\n", "", "deltas", ".", "append", "(", "delta", ")", "\n", "", "deltas", "=", "torch", ".", "stack", "(", "deltas", ")", "\n", "\n", "# Sum deltas across ranks.", "\n", "if", "_sync_device", "is", "not", "None", ":", "\n", "        ", "torch", ".", "distributed", ".", "all_reduce", "(", "deltas", ")", "\n", "\n", "# Update cumulative values.", "\n", "", "deltas", "=", "deltas", ".", "cpu", "(", ")", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "if", "name", "not", "in", "_cumulative", ":", "\n", "            ", "_cumulative", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "_cumulative", "[", "name", "]", ".", "add_", "(", "deltas", "[", "idx", "]", ")", "\n", "\n", "# Return name-value pairs.", "\n", "", "return", "[", "(", "name", ",", "_cumulative", "[", "name", "]", ")", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.custom_ops._find_compiler_bindir": [[21, 33], ["sorted", "len", "glob.glob"], "function", ["None"], ["def", "_find_compiler_bindir", "(", ")", ":", "\n", "    ", "patterns", "=", "[", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Professional/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/BuildTools/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Community/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio */vc/bin'", ",", "\n", "]", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "matches", "=", "sorted", "(", "glob", ".", "glob", "(", "pattern", ")", ")", "\n", "if", "len", "(", "matches", ")", ":", "\n", "            ", "return", "matches", "[", "-", "1", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.custom_ops.get_plugin": [[39, 118], ["print", "set", "importlib.import_module", "print", "print", "custom_ops._find_compiler_bindir", "sorted", "hashlib.md5", "torch.utils.cpp_extension._get_build_directory", "torch.utils.cpp_extension._get_build_directory", "os.path.join", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "print", "os.system", "RuntimeError", "os.path.dirname", "len", "list", "hashlib.md5.hexdigest", "os.path.isdir", "os.makedirs", "torch.utils.file_baton.FileBaton", "torch.utils.file_baton.FileBaton.try_acquire", "os.path.join", "print", "open", "hashlib.md5.update", "os.path.join", "torch.utils.file_baton.FileBaton.wait", "os.path.basename", "f.read", "torch.utils.file_baton.FileBaton.release", "pathlib.Path().iterdir", "x.is_file", "shutil.copyfile", "os.path.join", "pathlib.Path", "os.path.basename", "list"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.custom_ops._find_compiler_bindir", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update"], ["def", "get_plugin", "(", "module_name", ",", "sources", ",", "**", "build_kwargs", ")", ":", "\n", "    ", "assert", "verbosity", "in", "[", "'none'", ",", "'brief'", ",", "'full'", "]", "\n", "\n", "# Already cached?", "\n", "if", "module_name", "in", "_cached_plugins", ":", "\n", "        ", "return", "_cached_plugins", "[", "module_name", "]", "\n", "\n", "# Print status.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"...'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "", "try", ":", "# pylint: disable=too-many-nested-blocks", "\n", "# Make sure we can find the necessary compiler binaries.", "\n", "        ", "if", "os", ".", "name", "==", "'nt'", "and", "os", ".", "system", "(", "\"where cl.exe >nul 2>nul\"", ")", "!=", "0", ":", "\n", "            ", "compiler_bindir", "=", "_find_compiler_bindir", "(", ")", "\n", "if", "compiler_bindir", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'Could not find MSVC/GCC/CLANG installation on this computer. Check _find_compiler_bindir() in \"{__file__}\".'", ")", "\n", "", "os", ".", "environ", "[", "'PATH'", "]", "+=", "';'", "+", "compiler_bindir", "\n", "\n", "# Compile and load.", "\n", "", "verbose_build", "=", "(", "verbosity", "==", "'full'", ")", "\n", "\n", "# Incremental build md5sum trickery.  Copies all the input source files", "\n", "# into a cached build directory under a combined md5 digest of the input", "\n", "# source files.  Copying is done only if the combined digest has changed.", "\n", "# This keeps input file timestamps and filenames the same as in previous", "\n", "# extension builds, allowing for fast incremental rebuilds.", "\n", "#", "\n", "# This optimization is done only in case all the source files reside in", "\n", "# a single directory (just for simplicity) and if the TORCH_EXTENSIONS_DIR", "\n", "# environment variable is set (we take this as a signal that the user", "\n", "# actually cares about this.)", "\n", "source_dirs_set", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "source", ")", "for", "source", "in", "sources", ")", "\n", "if", "len", "(", "source_dirs_set", ")", "==", "1", "and", "(", "'TORCH_EXTENSIONS_DIR'", "in", "os", ".", "environ", ")", ":", "\n", "            ", "all_source_files", "=", "sorted", "(", "list", "(", "x", "for", "x", "in", "Path", "(", "list", "(", "source_dirs_set", ")", "[", "0", "]", ")", ".", "iterdir", "(", ")", "if", "x", ".", "is_file", "(", ")", ")", ")", "\n", "\n", "# Compute a combined hash digest for all source files in the same", "\n", "# custom op directory (usually .cu, .cpp, .py and .h files).", "\n", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "for", "src", "in", "all_source_files", ":", "\n", "                ", "with", "open", "(", "src", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "hash_md5", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "build_dir", "=", "torch", ".", "utils", ".", "cpp_extension", ".", "_get_build_directory", "(", "module_name", ",", "verbose", "=", "verbose_build", ")", "# pylint: disable=protected-access", "\n", "digest_build_dir", "=", "os", ".", "path", ".", "join", "(", "build_dir", ",", "hash_md5", ".", "hexdigest", "(", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "digest_build_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "digest_build_dir", ",", "exist_ok", "=", "True", ")", "\n", "baton", "=", "FileBaton", "(", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "'lock'", ")", ")", "\n", "if", "baton", ".", "try_acquire", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "for", "src", "in", "all_source_files", ":", "\n", "                            ", "shutil", ".", "copyfile", "(", "src", ",", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "os", ".", "path", ".", "basename", "(", "src", ")", ")", ")", "\n", "", "", "finally", ":", "\n", "                        ", "baton", ".", "release", "(", ")", "\n", "", "", "else", ":", "\n", "# Someone else is copying source files under the digest dir,", "\n", "# wait until done and continue.", "\n", "                    ", "baton", ".", "wait", "(", ")", "\n", "", "", "digest_sources", "=", "[", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "for", "x", "in", "sources", "]", "\n", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "build_directory", "=", "build_dir", ",", "\n", "verbose", "=", "verbose_build", ",", "sources", "=", "digest_sources", ",", "**", "build_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "verbose", "=", "verbose_build", ",", "sources", "=", "sources", ",", "**", "build_kwargs", ")", "\n", "", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "\n", "", "except", ":", "\n", "        ", "if", "verbosity", "==", "'brief'", ":", "\n", "            ", "print", "(", "'Failed!'", ")", "\n", "", "raise", "\n", "\n", "# Print status and add to cache.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Done setting up PyTorch plugin \"{module_name}\".'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "'Done.'", ")", "\n", "", "_cached_plugins", "[", "module_name", "]", "=", "module", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence.persistent_class": [[28, 124], ["isinstance", "persistence.is_persistent", "persistence._module_to_src", "_decorators.add", "super().__init__", "copy.deepcopy", "copy.deepcopy", "persistence._check_pickleable", "copy.deepcopy", "dnnlib.EasyDict", "list", "tuple", "persistence..__reduce__", "copy.deepcopy", "super().__reduce__", "max", "dict", "len"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence.is_persistent", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._module_to_src", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._check_pickleable"], ["def", "persistent_class", "(", "orig_class", ")", ":", "\n", "    ", "r\"\"\"Class decorator that extends a given class to save its source code\n    when pickled.\n\n    Example:\n\n        from torch_utils import persistence\n\n        @persistence.persistent_class\n        class MyNetwork(torch.nn.Module):\n            def __init__(self, num_inputs, num_outputs):\n                super().__init__()\n                self.fc = MyLayer(num_inputs, num_outputs)\n                ...\n\n        @persistence.persistent_class\n        class MyLayer(torch.nn.Module):\n            ...\n\n    When pickled, any instance of `MyNetwork` and `MyLayer` will save its\n    source code alongside other internal state (e.g., parameters, buffers,\n    and submodules). This way, any previously exported pickle will remain\n    usable even if the class definitions have been modified or are no\n    longer available.\n\n    The decorator saves the source code of the entire Python module\n    containing the decorated class. It does *not* save the source code of\n    any imported modules. Thus, the imported modules must be available\n    during unpickling, also including `torch_utils.persistence` itself.\n\n    It is ok to call functions defined in the same module from the\n    decorated class. However, if the decorated class depends on other\n    classes defined in the same module, they must be decorated as well.\n    This is illustrated in the above example in the case of `MyLayer`.\n\n    It is also possible to employ the decorator just-in-time before\n    calling the constructor. For example:\n\n        cls = MyLayer\n        if want_to_make_it_persistent:\n            cls = persistence.persistent_class(cls)\n        layer = cls(num_inputs, num_outputs)\n\n    As an additional feature, the decorator also keeps track of the\n    arguments that were used to construct each instance of the decorated\n    class. The arguments can be queried via `obj.init_args` and\n    `obj.init_kwargs`, and they are automatically pickled alongside other\n    object state. A typical use case is to first unpickle a previous\n    instance of a persistent class, and then upgrade it to use the latest\n    version of the source code:\n\n        with open('old_pickle.pkl', 'rb') as f:\n            old_net = pickle.load(f)\n        new_net = MyNetwork(*old_obj.init_args, **old_obj.init_kwargs)\n        misc.copy_params_and_buffers(old_net, new_net, require_all=True)\n    \"\"\"", "\n", "assert", "isinstance", "(", "orig_class", ",", "type", ")", "\n", "if", "is_persistent", "(", "orig_class", ")", ":", "\n", "        ", "return", "orig_class", "\n", "\n", "", "assert", "orig_class", ".", "__module__", "in", "sys", ".", "modules", "\n", "orig_module", "=", "sys", ".", "modules", "[", "orig_class", ".", "__module__", "]", "\n", "orig_module_src", "=", "_module_to_src", "(", "orig_module", ")", "\n", "\n", "class", "Decorator", "(", "orig_class", ")", ":", "\n", "        ", "_orig_module_src", "=", "orig_module_src", "\n", "_orig_class_name", "=", "orig_class", ".", "__name__", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_init_args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "self", ".", "_init_kwargs", "=", "copy", ".", "deepcopy", "(", "kwargs", ")", "\n", "assert", "orig_class", ".", "__name__", "in", "orig_module", ".", "__dict__", "\n", "_check_pickleable", "(", "self", ".", "__reduce__", "(", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "init_args", "(", "self", ")", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_init_args", ")", "\n", "\n", "", "@", "property", "\n", "def", "init_kwargs", "(", "self", ")", ":", "\n", "            ", "return", "dnnlib", ".", "EasyDict", "(", "copy", ".", "deepcopy", "(", "self", ".", "_init_kwargs", ")", ")", "\n", "\n", "", "def", "__reduce__", "(", "self", ")", ":", "\n", "            ", "fields", "=", "list", "(", "super", "(", ")", ".", "__reduce__", "(", ")", ")", "\n", "fields", "+=", "[", "None", "]", "*", "max", "(", "3", "-", "len", "(", "fields", ")", ",", "0", ")", "\n", "if", "fields", "[", "0", "]", "is", "not", "_reconstruct_persistent_obj", ":", "\n", "                ", "meta", "=", "dict", "(", "type", "=", "'class'", ",", "version", "=", "_version", ",", "module_src", "=", "self", ".", "_orig_module_src", ",", "class_name", "=", "self", ".", "_orig_class_name", ",", "state", "=", "fields", "[", "2", "]", ")", "\n", "fields", "[", "0", "]", "=", "_reconstruct_persistent_obj", "# reconstruct func", "\n", "fields", "[", "1", "]", "=", "(", "meta", ",", ")", "# reconstruct args", "\n", "fields", "[", "2", "]", "=", "None", "# state dict", "\n", "", "return", "tuple", "(", "fields", ")", "\n", "\n", "", "", "Decorator", ".", "__name__", "=", "orig_class", ".", "__name__", "\n", "_decorators", ".", "add", "(", "Decorator", ")", "\n", "return", "Decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence.is_persistent": [[127, 137], ["type"], "function", ["None"], ["", "def", "is_persistent", "(", "obj", ")", ":", "\n", "    ", "r\"\"\"Test whether the given object or class is persistent, i.e.,\n    whether it will save its source code when pickled.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "obj", "in", "_decorators", ":", "\n", "            ", "return", "True", "\n", "", "", "except", "TypeError", ":", "\n", "        ", "pass", "\n", "", "return", "type", "(", "obj", ")", "in", "_decorators", "# pylint: disable=unidiomatic-typecheck", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence.import_hook": [[140, 169], ["callable", "_import_hooks.append"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "def", "import_hook", "(", "hook", ")", ":", "\n", "    ", "r\"\"\"Register an import hook that is called whenever a persistent object\n    is being unpickled. A typical use case is to patch the pickled source\n    code to avoid errors and inconsistencies when the API of some imported\n    module has changed.\n\n    The hook should have the following signature:\n\n        hook(meta) -> modified meta\n\n    `meta` is an instance of `dnnlib.EasyDict` with the following fields:\n\n        type:       Type of the persistent object, e.g. `'class'`.\n        version:    Internal version number of `torch_utils.persistence`.\n        module_src  Original source code of the Python module.\n        class_name: Class name in the original Python module.\n        state:      Internal state of the object.\n\n    Example:\n\n        @persistence.import_hook\n        def wreck_my_network(meta):\n            if meta.class_name == 'MyNetwork':\n                print('MyNetwork is being imported. I will wreck it!')\n                meta.module_src = meta.module_src.replace(\"True\", \"False\")\n            return meta\n    \"\"\"", "\n", "assert", "callable", "(", "hook", ")", "\n", "_import_hooks", ".", "append", "(", "hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._reconstruct_persistent_obj": [[172, 196], ["dnnlib.EasyDict", "dnnlib.EasyDict", "persistence._src_to_module", "persistence.persistent_class", "persistent_class.__new__", "getattr", "callable", "hook", "getattr.", "decorator_class.__new__.__dict__.update"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._src_to_module", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence.persistent_class", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update"], ["", "def", "_reconstruct_persistent_obj", "(", "meta", ")", ":", "\n", "    ", "r\"\"\"Hook that is called internally by the `pickle` module to unpickle\n    a persistent object.\n    \"\"\"", "\n", "meta", "=", "dnnlib", ".", "EasyDict", "(", "meta", ")", "\n", "meta", ".", "state", "=", "dnnlib", ".", "EasyDict", "(", "meta", ".", "state", ")", "\n", "for", "hook", "in", "_import_hooks", ":", "\n", "        ", "meta", "=", "hook", "(", "meta", ")", "\n", "assert", "meta", "is", "not", "None", "\n", "\n", "", "assert", "meta", ".", "version", "==", "_version", "\n", "module", "=", "_src_to_module", "(", "meta", ".", "module_src", ")", "\n", "\n", "assert", "meta", ".", "type", "==", "'class'", "\n", "orig_class", "=", "module", ".", "__dict__", "[", "meta", ".", "class_name", "]", "\n", "decorator_class", "=", "persistent_class", "(", "orig_class", ")", "\n", "obj", "=", "decorator_class", ".", "__new__", "(", "decorator_class", ")", "\n", "\n", "setstate", "=", "getattr", "(", "obj", ",", "'__setstate__'", ",", "None", ")", "\n", "if", "callable", "(", "setstate", ")", ":", "\n", "        ", "setstate", "(", "meta", ".", "state", ")", "# pylint: disable=not-callable", "\n", "", "else", ":", "\n", "        ", "obj", ".", "__dict__", ".", "update", "(", "meta", ".", "state", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._module_to_src": [[199, 208], ["_module_to_src_dict.get", "inspect.getsource"], "function", ["None"], ["", "def", "_module_to_src", "(", "module", ")", ":", "\n", "    ", "r\"\"\"Query the source code of a given Python module.\n    \"\"\"", "\n", "src", "=", "_module_to_src_dict", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "src", "is", "None", ":", "\n", "        ", "src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "_module_to_src_dict", "[", "module", "]", "=", "src", "\n", "_src_to_module_dict", "[", "src", "]", "=", "module", "\n", "", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._src_to_module": [[209, 221], ["_src_to_module_dict.get", "types.ModuleType", "exec", "uuid.uuid4"], "function", ["None"], ["", "def", "_src_to_module", "(", "src", ")", ":", "\n", "    ", "r\"\"\"Get or create a Python module for the given source code.\n    \"\"\"", "\n", "module", "=", "_src_to_module_dict", ".", "get", "(", "src", ",", "None", ")", "\n", "if", "module", "is", "None", ":", "\n", "        ", "module_name", "=", "\"_imported_module_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "module", "=", "types", ".", "ModuleType", "(", "module_name", ")", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "_module_to_src_dict", "[", "module", "]", "=", "src", "\n", "_src_to_module_dict", "[", "src", "]", "=", "module", "\n", "exec", "(", "src", ",", "module", ".", "__dict__", ")", "# pylint: disable=exec-used", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence._check_pickleable": [[224, 243], ["isinstance", "isinstance", "isinstance", "persistence.is_persistent", "io.BytesIO", "pickle.dump", "persistence._check_pickleable.recurse"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.persistence.is_persistent"], ["", "def", "_check_pickleable", "(", "obj", ")", ":", "\n", "    ", "r\"\"\"Check that the given object is pickleable, raising an exception if\n    it is not. This function is expected to be considerably more efficient\n    than actually pickling the object.\n    \"\"\"", "\n", "def", "recurse", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "(", "list", ",", "tuple", ",", "set", ")", ")", ":", "\n", "            ", "return", "[", "recurse", "(", "x", ")", "for", "x", "in", "obj", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "[", "[", "recurse", "(", "x", ")", ",", "recurse", "(", "y", ")", "]", "for", "x", ",", "y", "in", "obj", ".", "items", "(", ")", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "(", "str", ",", "int", ",", "float", ",", "bool", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "            ", "return", "None", "# Python primitive types are pickleable.", "\n", "", "if", "f'{type(obj).__module__}.{type(obj).__name__}'", "in", "[", "'numpy.ndarray'", ",", "'torch.Tensor'", "]", ":", "\n", "            ", "return", "None", "# NumPy arrays and PyTorch tensors are pickleable.", "\n", "", "if", "is_persistent", "(", "obj", ")", ":", "\n", "            ", "return", "None", "# Persistent objects are pickleable, by virtue of the constructor check.", "\n", "", "return", "obj", "\n", "", "with", "io", ".", "BytesIO", "(", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "recurse", "(", "obj", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act._init": [[34, 45], ["os.path.join", "custom_ops.get_plugin", "os.path.dirname", "warnings.warn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_inited", ",", "_plugin", "\n", "if", "not", "_inited", ":", "\n", "        ", "_inited", "=", "True", "\n", "sources", "=", "[", "'bias_act.cpp'", ",", "'bias_act.cu'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "try", ":", "\n", "            ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "'bias_act_plugin'", ",", "sources", "=", "sources", ",", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Failed to build CUDA kernels for bias_act. Falling back to slow reference implementation. Details:\\n\\n'", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "return", "_plugin", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act": [[48, 83], ["isinstance", "bias_act._bias_act_ref", "bias_act._init", "_bias_act_cuda().apply", "bias_act._bias_act_cuda"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act._bias_act_ref", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._init", "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act._bias_act_cuda"], ["", "def", "bias_act", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused bias and activation function.\n\n    Adds bias `b` to activation tensor `x`, evaluates activation function `act`,\n    and scales the result by `gain`. Each of the steps is optional. In most cases,\n    the fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports first and second order gradients,\n    but not third order gradients.\n\n    Args:\n        x:      Input activation tensor. Can be of any shape.\n        b:      Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                as `x`. The shape must be known, and it must match the dimension of `x`\n                corresponding to `dim`.\n        dim:    The dimension in `x` corresponding to the elements of `b`.\n                The value of `dim` is ignored if `b` is not specified.\n        act:    Name of the activation function to evaluate, or `\"linear\"` to disable.\n                Can be e.g. `\"relu\"`, `\"lrelu\"`, `\"tanh\"`, `\"sigmoid\"`, `\"swish\"`, etc.\n                See `activation_funcs` for a full list. `None` is not allowed.\n        alpha:  Shape parameter for the activation function, or `None` to use the default.\n        gain:   Scaling factor for the output tensor, or `None` to use default.\n                See `activation_funcs` for the default scaling of each activation function.\n                If unsure, consider specifying 1.\n        clamp:  Clamp the output values to `[-clamp, +clamp]`, or `None` to disable\n                the clamping (default).\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_bias_act_cuda", "(", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", ".", "apply", "(", "x", ",", "b", ")", "\n", "", "return", "_bias_act_ref", "(", "x", "=", "x", ",", "b", "=", "b", ",", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act._bias_act_ref": [[86, 117], ["isinstance", "float", "float", "float", "float", "spec.func", "float", "x.clamp.clamp", "isinstance", "b.reshape", "range"], "function", ["None"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "_bias_act_ref", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `bias_act()` using standard TensorFlow ops.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Add bias.", "\n", "if", "b", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "torch", ".", "Tensor", ")", "and", "b", ".", "ndim", "==", "1", "\n", "assert", "0", "<=", "dim", "<", "x", ".", "ndim", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "dim", "]", "\n", "x", "=", "x", "+", "b", ".", "reshape", "(", "[", "-", "1", "if", "i", "==", "dim", "else", "1", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "]", ")", "\n", "\n", "# Evaluate activation function.", "\n", "", "alpha", "=", "float", "(", "alpha", ")", "\n", "x", "=", "spec", ".", "func", "(", "x", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Scale by gain.", "\n", "gain", "=", "float", "(", "gain", ")", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "=", "x", "*", "gain", "\n", "\n", "# Clamp.", "\n", "", "if", "clamp", ">=", "0", ":", "\n", "        ", "x", "=", "x", ".", "clamp", "(", "-", "clamp", ",", "clamp", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act._bias_act_cuda": [[122, 204], ["float", "float", "float", "x.contiguous.contiguous", "ctx.save_for_backward", "dy.contiguous.contiguous", "_plugin.bias_act", "ctx.save_for_backward", "d_dx.contiguous.contiguous", "b.contiguous", "_plugin.bias_act", "BiasActCudaGrad.apply.sum", "BiasActCudaGrad.apply", "_plugin.bias_act", "_plugin.bias_act.sum", "BiasActCudaGrad.apply", "x.contiguous.stride", "range", "dy.contiguous.stride", "range"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act", "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act", "home.repos.pwc.inspect_result.drboog_Lafite.ops.bias_act.bias_act"], ["def", "_bias_act_cuda", "(", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `bias_act()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "dim", ",", "act", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "if", "key", "in", "_bias_act_cuda_cache", ":", "\n", "        ", "return", "_bias_act_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "BiasActCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "b", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "x", ".", "ndim", ">", "2", "and", "x", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "x", "=", "x", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "b", "=", "b", ".", "contiguous", "(", ")", "if", "b", "is", "not", "None", "else", "_null_tensor", "\n", "y", "=", "x", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", "or", "b", "is", "not", "_null_tensor", ":", "\n", "                ", "y", "=", "_plugin", ".", "bias_act", "(", "x", ",", "b", ",", "_null_tensor", ",", "_null_tensor", ",", "_null_tensor", ",", "0", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "\n", "x", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "b", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "y", "if", "'y'", "in", "spec", ".", "ref", "else", "_null_tensor", ")", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "dy", "=", "dy", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "dx", "=", "None", "\n", "db", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "dx", "=", "dy", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", ":", "\n", "                    ", "dx", "=", "BiasActCudaGrad", ".", "apply", "(", "dy", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "db", "=", "dx", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "dx", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "dx", ",", "db", "\n", "\n", "# Backward op.", "\n", "", "", "class", "BiasActCudaGrad", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "dy", ",", "x", ",", "b", ",", "y", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "dy", ".", "ndim", ">", "2", "and", "dy", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "dx", "=", "_plugin", ".", "bias_act", "(", "dy", ",", "b", ",", "x", ",", "y", ",", "_null_tensor", ",", "1", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "ctx", ".", "save_for_backward", "(", "\n", "dy", "if", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "x", ",", "b", ",", "y", ")", "\n", "return", "dx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "d_dx", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "d_dx", "=", "d_dx", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "dy", ",", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "d_dy", "=", "None", "\n", "d_x", "=", "None", "\n", "d_b", "=", "None", "\n", "d_y", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "d_dy", "=", "BiasActCudaGrad", ".", "apply", "(", "d_dx", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", ":", "\n", "                ", "d_x", "=", "_plugin", ".", "bias_act", "(", "d_dx", ",", "b", ",", "x", ",", "y", ",", "dy", ",", "2", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "d_b", "=", "d_x", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "d_x", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "d_dy", ",", "d_x", ",", "d_b", ",", "d_y", "\n", "\n", "# Add to cache.", "\n", "", "", "_bias_act_cuda_cache", "[", "key", "]", "=", "BiasActCuda", "\n", "return", "BiasActCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._get_weight_shape": [[14, 19], ["misc.assert_shape", "misc.suppress_tracer_warnings", "int"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape"], ["def", "_get_weight_shape", "(", "w", ")", ":", "\n", "    ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "shape", "=", "[", "int", "(", "sz", ")", "for", "sz", "in", "w", ".", "shape", "]", "\n", "", "misc", ".", "assert_shape", "(", "w", ",", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper": [[22, 48], ["conv2d_resample._get_weight_shape", "op", "w.to.flip", "conv2d_gradfix.conv2d.to", "min", "conv2d_gradfix.conv2d.reshape", "conv2d_gradfix.conv2d.to", "w.to.to", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d.stride", "w.to.squeeze().squeeze", "conv2d_gradfix.conv2d.reshape", "w.to.squeeze"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d"], ["", "def", "_conv2d_wrapper", "(", "x", ",", "w", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "transpose", "=", "False", ",", "flip_weight", "=", "True", ")", ":", "\n", "    ", "\"\"\"Wrapper for the underlying `conv2d()` and `conv_transpose2d()` implementations.\n    \"\"\"", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "\n", "# Flip weight if requested.", "\n", "if", "not", "flip_weight", ":", "# conv2d() actually performs correlation (flip_weight=True) not convolution (flip_weight=False).", "\n", "        ", "w", "=", "w", ".", "flip", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Workaround performance pitfall in cuDNN 8.0.5, triggered when using", "\n", "# 1x1 kernel + memory_format=channels_last + less than 64 channels.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "stride", "==", "1", "and", "padding", "in", "[", "0", ",", "[", "0", ",", "0", "]", ",", "(", "0", ",", "0", ")", "]", "and", "not", "transpose", ":", "\n", "        ", "if", "x", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "and", "min", "(", "out_channels", ",", "in_channels_per_group", ")", "<", "64", ":", "\n", "            ", "if", "out_channels", "<=", "4", "and", "groups", "==", "1", ":", "\n", "                ", "in_shape", "=", "x", ".", "shape", "\n", "x", "=", "w", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "@", "x", ".", "reshape", "(", "[", "in_shape", "[", "0", "]", ",", "in_channels_per_group", ",", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "in_shape", "[", "0", "]", ",", "out_channels", ",", "in_shape", "[", "2", "]", ",", "in_shape", "[", "3", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "w", "=", "w", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "x", ",", "w", ",", "groups", "=", "groups", ")", "\n", "", "return", "x", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# Otherwise => execute using conv2d_gradfix.", "\n", "", "", "op", "=", "conv2d_gradfix", ".", "conv_transpose2d", "if", "transpose", "else", "conv2d_gradfix", ".", "conv2d", "\n", "return", "op", "(", "x", ",", "w", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample.conv2d_resample": [[51, 148], ["conv2d_resample._get_weight_shape", "upfirdn2d._get_filter_size", "upfirdn2d._parse_padding", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "max", "max", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "isinstance", "w.reshape.transpose", "w.reshape.reshape", "w.reshape.transpose", "w.reshape.reshape", "min", "min", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_resample._conv2d_wrapper"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "conv2d_resample", "(", "x", ",", "w", ",", "f", "=", "None", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "flip_weight", "=", "True", ",", "flip_filter", "=", "False", ")", ":", "\n", "    ", "r\"\"\"2D convolution with optional up/downsampling.\n\n    Padding is performed only once at the beginning, not between the operations.\n\n    Args:\n        x:              Input tensor of shape\n                        `[batch_size, in_channels, in_height, in_width]`.\n        w:              Weight tensor of shape\n                        `[out_channels, in_channels//groups, kernel_height, kernel_width]`.\n        f:              Low-pass filter for up/downsampling. Must be prepared beforehand by\n                        calling upfirdn2d.setup_filter(). None = identity (default).\n        up:             Integer upsampling factor (default: 1).\n        down:           Integer downsampling factor (default: 1).\n        padding:        Padding with respect to the upsampled image. Can be a single number\n                        or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                        (default: 0).\n        groups:         Split input channels into N groups (default: 1).\n        flip_weight:    False = convolution, True = correlation (default: True).\n        flip_filter:    False = convolution, True = correlation (default: False).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "(", "x", ".", "ndim", "==", "4", ")", "\n", "assert", "isinstance", "(", "w", ",", "torch", ".", "Tensor", ")", "and", "(", "w", ".", "ndim", "==", "4", ")", "and", "(", "w", ".", "dtype", "==", "x", ".", "dtype", ")", "\n", "assert", "f", "is", "None", "or", "(", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "and", "f", ".", "dtype", "==", "torch", ".", "float32", ")", "\n", "assert", "isinstance", "(", "up", ",", "int", ")", "and", "(", "up", ">=", "1", ")", "\n", "assert", "isinstance", "(", "down", ",", "int", ")", "and", "(", "down", ">=", "1", ")", "\n", "assert", "isinstance", "(", "groups", ",", "int", ")", "and", "(", "groups", ">=", "1", ")", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Adjust padding to account for up/downsampling.", "\n", "if", "up", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "+", "up", "-", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "up", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "+", "up", "-", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "up", ")", "//", "2", "\n", "", "if", "down", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "-", "down", "+", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "down", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "-", "down", "+", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "down", ")", "//", "2", "\n", "\n", "# Fast path: 1x1 convolution with downsampling only => downsample first, then convolve.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "down", ">", "1", "and", "up", "==", "1", ")", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: 1x1 convolution with upsampling only => convolve first, then upsample.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "up", ">", "1", "and", "down", "==", "1", ")", ":", "\n", "        ", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "return", "x", "\n", "\n", "# Fast path: downsampling only => use strided convolution.", "\n", "", "if", "down", ">", "1", "and", "up", "==", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "down", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: upsampling with optional downsampling => use transpose strided convolution.", "\n", "", "if", "up", ">", "1", ":", "\n", "        ", "if", "groups", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "groups", ",", "out_channels", "//", "groups", ",", "in_channels_per_group", ",", "kh", ",", "kw", ")", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "2", ")", "\n", "w", "=", "w", ".", "reshape", "(", "groups", "*", "in_channels_per_group", ",", "out_channels", "//", "groups", ",", "kh", ",", "kw", ")", "\n", "", "px0", "-=", "kw", "-", "1", "\n", "px1", "-=", "kw", "-", "up", "\n", "py0", "-=", "kh", "-", "1", "\n", "py1", "-=", "kh", "-", "up", "\n", "pxt", "=", "max", "(", "min", "(", "-", "px0", ",", "-", "px1", ")", ",", "0", ")", "\n", "pyt", "=", "max", "(", "min", "(", "-", "py0", ",", "-", "py1", ")", ",", "0", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "up", ",", "padding", "=", "[", "pyt", ",", "pxt", "]", ",", "groups", "=", "groups", ",", "transpose", "=", "True", ",", "flip_weight", "=", "(", "not", "flip_weight", ")", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", "+", "pxt", ",", "px1", "+", "pxt", ",", "py0", "+", "pyt", ",", "py1", "+", "pyt", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "if", "down", ">", "1", ":", "\n", "            ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n", "# Fast path: no up/downsampling, padding supported by the underlying implementation => use plain conv2d.", "\n", "", "if", "up", "==", "1", "and", "down", "==", "1", ":", "\n", "        ", "if", "px0", "==", "px1", "and", "py0", "==", "py1", "and", "px0", ">=", "0", "and", "py0", ">=", "0", ":", "\n", "            ", "return", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "padding", "=", "[", "py0", ",", "px0", "]", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "\n", "# Fallback: Generic reference implementation.", "\n", "", "", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "(", "f", "if", "up", ">", "1", "else", "None", ")", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "if", "down", ">", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.no_weight_gradients": [[20, 27], ["None"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "no_weight_gradients", "(", ")", ":", "\n", "    ", "global", "weight_gradients_disabled", "\n", "old", "=", "weight_gradients_disabled", "\n", "weight_gradients_disabled", "=", "True", "\n", "yield", "\n", "weight_gradients_disabled", "=", "old", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d": [[30, 34], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "False", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv_transpose2d": [[35, 39], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv_transpose2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv_transpose2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "True", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._should_use_custom_op": [[42, 52], ["isinstance", "warnings.warn", "distutils.version.LooseVersion", "distutils.version.LooseVersion"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", "input", ")", ":", "\n", "    ", "assert", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", "\n", "if", "(", "not", "enabled", ")", "or", "(", "not", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "input", ".", "device", ".", "type", "!=", "'cuda'", ":", "\n", "        ", "return", "False", "\n", "", "if", "LooseVersion", "(", "torch", ".", "__version__", ")", ">=", "LooseVersion", "(", "'1.7.0'", ")", ":", "\n", "        ", "return", "True", "\n", "", "warnings", ".", "warn", "(", "f'conv2d_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.conv2d().'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._tuple_of_ints": [[53, 58], ["all", "isinstance", "tuple", "len", "isinstance"], "function", ["None"], ["", "def", "_tuple_of_ints", "(", "xs", ",", "ndim", ")", ":", "\n", "    ", "xs", "=", "tuple", "(", "xs", ")", "if", "isinstance", "(", "xs", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "xs", ",", ")", "*", "ndim", "\n", "assert", "len", "(", "xs", ")", "==", "ndim", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "xs", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._conv2d_gradfix": [[63, 171], ["tuple", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "all", "all", "all", "dict", "len", "all", "all", "ctx.save_for_backward", "range", "range", "range", "range", "torch.nn.functional.conv2d", "torch.nn.functional.conv_transpose2d", "conv2d_gradfix._conv2d_gradfix.calc_output_padding"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv_transpose2d"], ["def", "_conv2d_gradfix", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", ":", "\n", "# Parse arguments.", "\n", "    ", "ndim", "=", "2", "\n", "weight_shape", "=", "tuple", "(", "weight_shape", ")", "\n", "stride", "=", "_tuple_of_ints", "(", "stride", ",", "ndim", ")", "\n", "padding", "=", "_tuple_of_ints", "(", "padding", ",", "ndim", ")", "\n", "output_padding", "=", "_tuple_of_ints", "(", "output_padding", ",", "ndim", ")", "\n", "dilation", "=", "_tuple_of_ints", "(", "dilation", ",", "ndim", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", "\n", "if", "key", "in", "_conv2d_gradfix_cache", ":", "\n", "        ", "return", "_conv2d_gradfix_cache", "[", "key", "]", "\n", "\n", "# Validate arguments.", "\n", "", "assert", "groups", ">=", "1", "\n", "assert", "len", "(", "weight_shape", ")", "==", "ndim", "+", "2", "\n", "assert", "all", "(", "stride", "[", "i", "]", ">=", "1", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "padding", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "dilation", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "if", "not", "transpose", ":", "\n", "        ", "assert", "all", "(", "output_padding", "[", "i", "]", "==", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "", "else", ":", "# transpose", "\n", "        ", "assert", "all", "(", "0", "<=", "output_padding", "[", "i", "]", "<", "max", "(", "stride", "[", "i", "]", ",", "dilation", "[", "i", "]", ")", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "\n", "# Helpers.", "\n", "", "common_kwargs", "=", "dict", "(", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "def", "calc_output_padding", "(", "input_shape", ",", "output_shape", ")", ":", "\n", "        ", "if", "transpose", ":", "\n", "            ", "return", "[", "0", ",", "0", "]", "\n", "", "return", "[", "\n", "input_shape", "[", "i", "+", "2", "]", "\n", "-", "(", "output_shape", "[", "i", "+", "2", "]", "-", "1", ")", "*", "stride", "[", "i", "]", "\n", "-", "(", "1", "-", "2", "*", "padding", "[", "i", "]", ")", "\n", "-", "dilation", "[", "i", "]", "*", "(", "weight_shape", "[", "i", "+", "2", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", "\n", "]", "\n", "\n", "# Forward & backward.", "\n", "", "class", "Conv2d", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "            ", "assert", "weight", ".", "shape", "==", "weight_shape", "\n", "if", "not", "transpose", ":", "\n", "                ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "**", "common_kwargs", ")", "\n", "", "else", ":", "# transpose", "\n", "                ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "output_padding", "=", "output_padding", ",", "**", "common_kwargs", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "input", ",", "weight", ",", "bias", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "input", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "None", "\n", "grad_weight", "=", "None", "\n", "grad_bias", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "grad_input", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", ".", "apply", "(", "grad_output", ",", "weight", ",", "None", ")", "\n", "assert", "grad_input", ".", "shape", "==", "input", ".", "shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "and", "not", "weight_gradients_disabled", ":", "\n", "                ", "grad_weight", "=", "Conv2dGradWeight", ".", "apply", "(", "grad_output", ",", "input", ",", "bias", ")", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_bias", "=", "grad_output", ".", "sum", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", "\n", "\n", "# Gradient with respect to the weights.", "\n", "", "", "class", "Conv2dGradWeight", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ",", "bias", ")", ":", "\n", "            ", "if", "old_version", ":", "\n", "                ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "\n", "'aten::cudnn_convolution_backward_weight'", "if", "not", "transpose", "else", "'aten::cudnn_convolution_transpose_backward_weight'", ")", "\n", "flags", "=", "[", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", ",", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ",", "\n", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "]", "\n", "grad_weight", "=", "op", "(", "weight_shape", ",", "grad_output", ",", "input", ",", "padding", ",", "stride", ",", "dilation", ",", "groups", ",", "*", "flags", ")", "\n", "", "else", ":", "\n", "                ", "bias_shape", "=", "bias", ".", "shape", "if", "(", "bias", "is", "not", "None", ")", "else", "None", "\n", "empty_weight", "=", "torch", ".", "empty", "(", "weight_shape", ",", "dtype", "=", "input", ".", "dtype", ",", "layout", "=", "input", ".", "layout", ",", "device", "=", "input", ".", "device", ")", "\n", "grad_weight", "=", "torch", ".", "ops", ".", "aten", ".", "convolution_backward", "(", "grad_output", ",", "input", ",", "empty_weight", ",", "bias_sizes", "=", "bias_shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "transposed", "=", "transpose", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "output_mask", "=", "[", "0", ",", "1", ",", "0", "]", ")", "[", "1", "]", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "ctx", ".", "save_for_backward", "(", "grad_output", ",", "input", ")", "\n", "", "return", "grad_weight", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_weight", ")", ":", "\n", "            ", "grad_output", ",", "input", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "grad2_grad_output", "=", "Conv2d", ".", "apply", "(", "input", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_grad_output", ".", "shape", "==", "grad_output", ".", "shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "grad2_input", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", ".", "apply", "(", "grad_output", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_input", ".", "shape", "==", "input", ".", "shape", "\n", "\n", "", "return", "grad2_grad_output", ",", "grad2_input", "\n", "\n", "", "", "_conv2d_gradfix_cache", "[", "key", "]", "=", "Conv2d", "\n", "return", "Conv2d", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._GridSample2dForward.forward": [[39, 46], ["torch.nn.functional.grid_sample", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix.grid_sample"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "grid", ")", ":", "\n", "        ", "assert", "input", ".", "ndim", "==", "4", "\n", "assert", "grid", ".", "ndim", "==", "4", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._GridSample2dForward.backward": [[47, 52], ["_GridSample2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "grid", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_grid", "=", "_GridSample2dBackward", ".", "apply", "(", "grad_output", ",", "input", ",", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._GridSample2dBackward.forward": [[56, 62], ["torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ",", "grid", ")", ":", "\n", "        ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "'aten::grid_sampler_2d_backward'", ")", "\n", "grad_input", ",", "grad_grid", "=", "op", "(", "grad_output", ",", "input", ",", "grid", ",", "0", ",", "0", ",", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._GridSample2dBackward.backward": [[63, 76], ["_GridSample2dForward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_input", ",", "grad2_grad_grid", ")", ":", "\n", "        ", "_", "=", "grad2_grad_grid", "# unused", "\n", "grid", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "grad2_grid", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad2_grad_output", "=", "_GridSample2dForward", ".", "apply", "(", "grad2_grad_input", ",", "grid", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", "\n", "return", "grad2_grad_output", ",", "grad2_input", ",", "grad2_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix.grid_sample": [[21, 25], ["grid_sample_gradfix._should_use_custom_op", "torch.nn.functional.grid_sample", "_GridSample2dForward.apply"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", ")", ":", "\n", "        ", "return", "_GridSample2dForward", ".", "apply", "(", "input", ",", "grid", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.grid_sample_gradfix._should_use_custom_op": [[28, 35], ["warnings.warn", "distutils.version.LooseVersion", "distutils.version.LooseVersion"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", ")", ":", "\n", "    ", "if", "not", "enabled", ":", "\n", "        ", "return", "False", "\n", "", "if", "LooseVersion", "(", "torch", ".", "__version__", ")", ">=", "LooseVersion", "(", "'1.7.0'", ")", ":", "\n", "        ", "return", "True", "\n", "", "warnings", ".", "warn", "(", "f'grid_sample_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.grid_sample().'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma._FusedMultiplyAdd.forward": [[14, 20], ["torch.addcmul", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "a", ",", "b", ",", "c", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "out", "=", "torch", ".", "addcmul", "(", "c", ",", "a", ",", "b", ")", "\n", "ctx", ".", "save_for_backward", "(", "a", ",", "b", ")", "\n", "ctx", ".", "c_shape", "=", "c", ".", "shape", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma._FusedMultiplyAdd.backward": [[21, 39], ["fma._unbroadcast", "fma._unbroadcast", "fma._unbroadcast"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.fma._unbroadcast", "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma._unbroadcast", "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma._unbroadcast"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dout", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "a", ",", "b", "=", "ctx", ".", "saved_tensors", "\n", "c_shape", "=", "ctx", ".", "c_shape", "\n", "da", "=", "None", "\n", "db", "=", "None", "\n", "dc", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "da", "=", "_unbroadcast", "(", "dout", "*", "b", ",", "a", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "db", "=", "_unbroadcast", "(", "dout", "*", "a", ",", "b", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "dc", "=", "_unbroadcast", "(", "dout", ",", "c_shape", ")", "\n", "\n", "", "return", "da", ",", "db", ",", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma.fma": [[8, 10], ["_FusedMultiplyAdd.apply"], "function", ["None"], ["def", "fma", "(", "a", ",", "b", ",", "c", ")", ":", "# => a * b + c", "\n", "    ", "return", "_FusedMultiplyAdd", ".", "apply", "(", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.fma._unbroadcast": [[42, 52], ["len", "len", "x.reshape.sum", "x.reshape.reshape", "range"], "function", ["None"], ["", "", "def", "_unbroadcast", "(", "x", ",", "shape", ")", ":", "\n", "    ", "extra_dims", "=", "x", ".", "ndim", "-", "len", "(", "shape", ")", "\n", "assert", "extra_dims", ">=", "0", "\n", "dim", "=", "[", "i", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "if", "x", ".", "shape", "[", "i", "]", ">", "1", "and", "(", "i", "<", "extra_dims", "or", "shape", "[", "i", "-", "extra_dims", "]", "==", "1", ")", "]", "\n", "if", "len", "(", "dim", ")", ":", "\n", "        ", "x", "=", "x", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "if", "extra_dims", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "extra_dims", "+", "1", ":", "]", ")", "\n", "", "assert", "x", ".", "shape", "==", "shape", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._init": [[19, 29], ["os.path.join", "custom_ops.get_plugin", "os.path.dirname", "warnings.warn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_inited", ",", "_plugin", "\n", "if", "not", "_inited", ":", "\n", "        ", "sources", "=", "[", "'upfirdn2d.cpp'", ",", "'upfirdn2d.cu'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "try", ":", "\n", "            ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "'upfirdn2d_plugin'", ",", "sources", "=", "sources", ",", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Failed to build CUDA kernels for upfirdn2d. Falling back to slow reference implementation. Details:\\n\\n'", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "return", "_plugin", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling": [[30, 38], ["isinstance", "isinstance", "all", "isinstance"], "function", ["None"], ["", "def", "_parse_scaling", "(", "scaling", ")", ":", "\n", "    ", "if", "isinstance", "(", "scaling", ",", "int", ")", ":", "\n", "        ", "scaling", "=", "[", "scaling", ",", "scaling", "]", "\n", "", "assert", "isinstance", "(", "scaling", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "scaling", ")", "\n", "sx", ",", "sy", "=", "scaling", "\n", "assert", "sx", ">=", "1", "and", "sy", ">=", "1", "\n", "return", "sx", ",", "sy", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding": [[39, 49], ["isinstance", "isinstance", "all", "len", "isinstance"], "function", ["None"], ["", "def", "_parse_padding", "(", "padding", ")", ":", "\n", "    ", "if", "isinstance", "(", "padding", ",", "int", ")", ":", "\n", "        ", "padding", "=", "[", "padding", ",", "padding", "]", "\n", "", "assert", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "padding", ")", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "        ", "padx", ",", "pady", "=", "padding", "\n", "padding", "=", "[", "padx", ",", "padx", ",", "pady", ",", "pady", "]", "\n", "", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "padding", "\n", "return", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._get_filter_size": [[50, 62], ["misc.assert_shape", "isinstance", "misc.suppress_tracer_warnings", "int", "int"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.misc.assert_shape"], ["", "def", "_get_filter_size", "(", "f", ")", ":", "\n", "    ", "if", "f", "is", "None", ":", "\n", "        ", "return", "1", ",", "1", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "fw", "=", "f", ".", "shape", "[", "-", "1", "]", "\n", "fh", "=", "f", ".", "shape", "[", "0", "]", "\n", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "\n", "        ", "fw", "=", "int", "(", "fw", ")", "\n", "fh", "=", "int", "(", "fh", ")", "\n", "", "misc", ".", "assert_shape", "(", "f", ",", "[", "fh", ",", "fw", "]", "[", ":", "f", ".", "ndim", "]", ")", "\n", "assert", "fw", ">=", "1", "and", "fh", ">=", "1", "\n", "return", "fw", ",", "fh", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.setup_filter": [[65, 110], ["torch.device", "torch.as_tensor", "f.flip.to", "f.flip.numel", "f.flip.ger", "f.flip.sum", "f.flip.flip", "list", "f.flip.numel", "range"], "function", ["None"], ["", "def", "setup_filter", "(", "f", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "normalize", "=", "True", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "separable", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Convenience function to setup 2D FIR filter for `upfirdn2d()`.\n\n    Args:\n        f:           Torch tensor, numpy array, or python list of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable),\n                     `[]` (impulse), or\n                     `None` (identity).\n        device:      Result device (default: cpu).\n        normalize:   Normalize the filter so that it retains the magnitude\n                     for constant input signal (DC)? (default: True).\n        flip_filter: Flip the filter? (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        separable:   Return a separable filter? (default: select automatically).\n\n    Returns:\n        Float32 tensor of the shape\n        `[filter_height, filter_width]` (non-separable) or\n        `[filter_taps]` (separable).\n    \"\"\"", "\n", "# Validate.", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "f", "=", "torch", ".", "as_tensor", "(", "f", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "assert", "f", ".", "ndim", "in", "[", "0", ",", "1", ",", "2", "]", "\n", "assert", "f", ".", "numel", "(", ")", ">", "0", "\n", "if", "f", ".", "ndim", "==", "0", ":", "\n", "        ", "f", "=", "f", "[", "np", ".", "newaxis", "]", "\n", "\n", "# Separable?", "\n", "", "if", "separable", "is", "None", ":", "\n", "        ", "separable", "=", "(", "f", ".", "ndim", "==", "1", "and", "f", ".", "numel", "(", ")", ">=", "8", ")", "\n", "", "if", "f", ".", "ndim", "==", "1", "and", "not", "separable", ":", "\n", "        ", "f", "=", "f", ".", "ger", "(", "f", ")", "\n", "", "assert", "f", ".", "ndim", "==", "(", "1", "if", "separable", "else", "2", ")", "\n", "\n", "# Apply normalize, flip, gain, and device.", "\n", "if", "normalize", ":", "\n", "        ", "f", "/=", "f", ".", "sum", "(", ")", "\n", "", "if", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d": [[113, 158], ["isinstance", "upfirdn2d._upfirdn2d_ref", "upfirdn2d._init", "_upfirdn2d_cuda().apply", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._upfirdn2d_ref", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._init", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._upfirdn2d_cuda"], ["", "def", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Pad, upsample, filter, and downsample a batch of 2D images.\n\n    Performs the following sequence of operations for each channel:\n\n    1. Upsample the image by inserting N-1 zeros after each pixel (`up`).\n\n    2. Pad the image with the specified number of zeros on each side (`padding`).\n       Negative padding corresponds to cropping the image.\n\n    3. Convolve the image with the specified 2D FIR filter (`f`), shrinking it\n       so that the footprint of all output pixels lies within the input image.\n\n    4. Downsample the image by keeping every Nth pixel (`down`).\n\n    This sequence of operations bears close resemblance to scipy.signal.upfirdn().\n    The fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the upsampled image. Can be a single number\n                     or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_upfirdn2d_cuda", "(", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", ".", "apply", "(", "x", ",", "f", ")", "\n", "", "return", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._upfirdn2d_ref": [[161, 202], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "f.flip.to", "f[].repeat", "isinstance", "torch.ones", "isinstance", "f.flip.flip", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "max", "max", "max", "max", "list", "max", "max", "range", "f.flip.unsqueeze", "f.flip.unsqueeze", "max", "max"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.conv2d_gradfix.conv2d"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `upfirdn2d()` using standard PyTorch ops.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "assert", "f", ".", "dtype", "==", "torch", ".", "float32", "and", "not", "f", ".", "requires_grad", "\n", "batch_size", ",", "num_channels", ",", "in_height", ",", "in_width", "=", "x", ".", "shape", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Upsample by inserting zeros.", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", ",", "1", ",", "in_width", ",", "1", "]", ")", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "0", ",", "upx", "-", "1", ",", "0", ",", "0", ",", "0", ",", "upy", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", "*", "upy", ",", "in_width", "*", "upx", "]", ")", "\n", "\n", "# Pad or crop.", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "max", "(", "padx0", ",", "0", ")", ",", "max", "(", "padx1", ",", "0", ")", ",", "max", "(", "pady0", ",", "0", ")", ",", "max", "(", "pady1", ",", "0", ")", "]", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "max", "(", "-", "pady0", ",", "0", ")", ":", "x", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pady1", ",", "0", ")", ",", "max", "(", "-", "padx0", ",", "0", ")", ":", "x", ".", "shape", "[", "3", "]", "-", "max", "(", "-", "padx1", ",", "0", ")", "]", "\n", "\n", "# Setup filter.", "\n", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "not", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "\n", "# Convolve with the filter.", "\n", "", "f", "=", "f", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "repeat", "(", "[", "num_channels", ",", "1", "]", "+", "[", "1", "]", "*", "f", ".", "ndim", ")", "\n", "if", "f", ".", "ndim", "==", "4", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ",", "groups", "=", "num_channels", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "num_channels", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "num_channels", ")", "\n", "\n", "# Downsample by throwing away pixels.", "\n", "", "x", "=", "x", "[", ":", ",", ":", ",", ":", ":", "downy", ",", ":", ":", "downx", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._upfirdn2d_cuda": [[207, 262], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "ctx.save_for_backward", "upfirdn2d._get_filter_size", "isinstance", "torch.ones", "isinstance", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_upfirdn2d_cuda().apply", "torch.ones.unsqueeze", "numpy.sqrt", "torch.ones.unsqueeze", "numpy.sqrt", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._upfirdn2d_cuda"], ["def", "_upfirdn2d_cuda", "(", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `upfirdn2d()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "if", "key", "in", "_upfirdn2d_cuda_cache", ":", "\n", "        ", "return", "_upfirdn2d_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "Upfirdn2dCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "y", "=", "x", "\n", "if", "f", ".", "ndim", "==", "2", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "0", ")", ",", "upx", ",", "1", ",", "downx", ",", "1", ",", "padx0", ",", "padx1", ",", "0", ",", "0", ",", "flip_filter", ",", "np", ".", "sqrt", "(", "gain", ")", ")", "\n", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "1", ")", ",", "1", ",", "upy", ",", "1", ",", "downy", ",", "0", ",", "0", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "np", ".", "sqrt", "(", "gain", ")", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "f", ")", "\n", "ctx", ".", "x_shape", "=", "x", ".", "shape", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "f", ",", "=", "ctx", ".", "saved_tensors", "\n", "_", ",", "_", ",", "ih", ",", "iw", "=", "ctx", ".", "x_shape", "\n", "_", ",", "_", ",", "oh", ",", "ow", "=", "dy", ".", "shape", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "fw", "-", "padx0", "-", "1", ",", "\n", "iw", "*", "upx", "-", "ow", "*", "downx", "+", "padx0", "-", "upx", "+", "1", ",", "\n", "fh", "-", "pady0", "-", "1", ",", "\n", "ih", "*", "upy", "-", "oh", "*", "downy", "+", "pady0", "-", "upy", "+", "1", ",", "\n", "]", "\n", "dx", "=", "None", "\n", "df", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "dx", "=", "_upfirdn2d_cuda", "(", "up", "=", "down", ",", "down", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "(", "not", "flip_filter", ")", ",", "gain", "=", "gain", ")", ".", "apply", "(", "dy", ",", "f", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", "\n", "return", "dx", ",", "df", "\n", "\n", "# Add to cache.", "\n", "", "", "_upfirdn2d_cuda_cache", "[", "key", "]", "=", "Upfirdn2dCuda", "\n", "return", "Upfirdn2dCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.filter2d": [[265, 298], ["upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d"], ["", "def", "filter2d", "(", "x", ",", "f", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Filter a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape matches the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "fw", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "1", ")", "//", "2", ",", "\n", "pady0", "+", "fh", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "1", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upsample2d": [[301, 337], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d"], ["", "def", "upsample2d", "(", "x", ",", "f", ",", "up", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Upsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a multiple of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "+", "upx", "-", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "upx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "+", "upy", "-", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "upy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", "*", "upx", "*", "upy", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.downsample2d": [[340, 376], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.drboog_Lafite.ops.upfirdn2d.upfirdn2d"], ["", "def", "downsample2d", "(", "x", ",", "f", ",", "down", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Downsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a fraction of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the input. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "-", "downx", "+", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "downx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "-", "downy", "+", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "downy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "down", "=", "down", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.MetricOptions.__init__": [[28, 50], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "torch.device", "progress.sub", "metric_utils.ProgressMonitor"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub"], ["    ", "def", "__init__", "(", "self", ",", "G_ema", "=", "None", ",", "G", "=", "None", ",", "D", "=", "None", ",", "M", "=", "None", ",", "G_kwargs", "=", "{", "}", ",", "D_kwargs", "=", "{", "}", ",", "M_kwargs", "=", "{", "}", ",", "dataset_kwargs", "=", "{", "}", ",", "testset_kwargs", "=", "{", "}", ",", "num_gpus", "=", "1", ",", "rank", "=", "0", ",", "device", "=", "None", ",", "progress", "=", "None", ",", "cache", "=", "True", ",", "txt_recon", "=", "True", ",", "img_recon", "=", "False", ",", "metric_only_test", "=", "False", ")", ":", "\n", "        ", "assert", "0", "<=", "rank", "<", "num_gpus", "\n", "self", ".", "G", "=", "G", "\n", "#         self.G_ema          = G_ema", "\n", "self", ".", "D", "=", "D", "# we add the discriminator here", "\n", "#         self.M              = M", "\n", "self", ".", "G_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "G_kwargs", ")", "\n", "self", ".", "D_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "D_kwargs", ")", "\n", "#         self.M_kwargs       = dnnlib.EasyDict(M_kwargs)", "\n", "\n", "self", ".", "dataset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "dataset_kwargs", ")", "\n", "self", ".", "testset_kwargs", "=", "dnnlib", ".", "EasyDict", "(", "testset_kwargs", ")", "\n", "\n", "self", ".", "num_gpus", "=", "num_gpus", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "device", "=", "device", "if", "device", "is", "not", "None", "else", "torch", ".", "device", "(", "'cuda'", ",", "rank", ")", "\n", "self", ".", "progress", "=", "progress", ".", "sub", "(", ")", "if", "progress", "is", "not", "None", "and", "rank", "==", "0", "else", "ProgressMonitor", "(", ")", "\n", "self", ".", "cache", "=", "cache", "\n", "\n", "self", ".", "txt_recon", "=", "txt_recon", "\n", "self", ".", "img_recon", "=", "img_recon", "\n", "self", ".", "metric_only_test", "=", "metric_only_test", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.__init__": [[74, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capture_all", "=", "False", ",", "capture_mean_cov", "=", "False", ",", "max_items", "=", "None", ")", ":", "\n", "        ", "self", ".", "capture_all", "=", "capture_all", "\n", "self", ".", "capture_mean_cov", "=", "capture_mean_cov", "\n", "self", ".", "max_items", "=", "max_items", "\n", "self", ".", "num_items", "=", "0", "\n", "self", ".", "num_features", "=", "None", "\n", "self", ".", "all_features", "=", "None", "\n", "self", ".", "raw_mean", "=", "None", "\n", "self", ".", "raw_cov", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.set_num_features": [[84, 92], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "set_num_features", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "if", "self", ".", "num_features", "is", "not", "None", ":", "\n", "            ", "assert", "num_features", "==", "self", ".", "num_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "all_features", "=", "[", "]", "\n", "self", ".", "raw_mean", "=", "np", ".", "zeros", "(", "[", "num_features", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "raw_cov", "=", "np", ".", "zeros", "(", "[", "num_features", ",", "num_features", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.is_full": [[93, 95], ["None"], "methods", ["None"], ["", "", "def", "is_full", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "max_items", "is", "not", "None", ")", "and", "(", "self", ".", "num_items", ">=", "self", ".", "max_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append": [[96, 112], ["numpy.asarray", "metric_utils.FeatureStats.set_num_features", "metric_utils.FeatureStats.all_features.append", "numpy.asarray.astype", "np.asarray.astype.sum"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.set_num_features", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "def", "append", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "assert", "x", ".", "ndim", "==", "2", "\n", "if", "(", "self", ".", "max_items", "is", "not", "None", ")", "and", "(", "self", ".", "num_items", "+", "x", ".", "shape", "[", "0", "]", ">", "self", ".", "max_items", ")", ":", "\n", "            ", "if", "self", ".", "num_items", ">=", "self", ".", "max_items", ":", "\n", "                ", "return", "\n", "", "x", "=", "x", "[", ":", "self", ".", "max_items", "-", "self", ".", "num_items", "]", "\n", "\n", "", "self", ".", "set_num_features", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "num_items", "+=", "x", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "capture_all", ":", "\n", "            ", "self", ".", "all_features", ".", "append", "(", "x", ")", "\n", "", "if", "self", ".", "capture_mean_cov", ":", "\n", "            ", "x64", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "raw_mean", "+=", "x64", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "raw_cov", "+=", "x64", ".", "T", "@", "x64", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append_torch": [[113, 124], ["metric_utils.FeatureStats.append", "isinstance", "range", "torch.stack().flatten", "torch.stack().flatten.cpu().numpy", "torch.stack().flatten.clone", "torch.distributed.broadcast", "ys.append", "torch.stack", "torch.stack().flatten.cpu"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "def", "append_torch", "(", "self", ",", "x", ",", "num_gpus", "=", "1", ",", "rank", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "2", "\n", "assert", "0", "<=", "rank", "<", "num_gpus", "\n", "if", "num_gpus", ">", "1", ":", "\n", "            ", "ys", "=", "[", "]", "\n", "for", "src", "in", "range", "(", "num_gpus", ")", ":", "\n", "                ", "y", "=", "x", ".", "clone", "(", ")", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "y", ",", "src", "=", "src", ")", "\n", "ys", ".", "append", "(", "y", ")", "\n", "", "x", "=", "torch", ".", "stack", "(", "ys", ",", "dim", "=", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "# interleave samples", "\n", "", "self", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all": [[125, 128], ["numpy.concatenate"], "methods", ["None"], ["", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "capture_all", "\n", "return", "np", ".", "concatenate", "(", "self", ".", "all_features", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all_torch": [[129, 131], ["torch.from_numpy", "metric_utils.FeatureStats.get_all"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all"], ["", "def", "get_all_torch", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "get_all", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_mean_cov": [[132, 138], ["numpy.outer"], "methods", ["None"], ["", "def", "get_mean_cov", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "capture_mean_cov", "\n", "mean", "=", "self", ".", "raw_mean", "/", "self", ".", "num_items", "\n", "cov", "=", "self", ".", "raw_cov", "/", "self", ".", "num_items", "\n", "cov", "=", "cov", "-", "np", ".", "outer", "(", "mean", ",", "mean", ")", "\n", "return", "mean", ",", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.save": [[139, 142], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "pkl_file", ")", ":", "\n", "        ", "with", "open", "(", "pkl_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "__dict__", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load": [[143, 150], ["metric_utils.FeatureStats", "FeatureStats.__dict__.update", "open", "dnnlib.EasyDict", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "pkl_file", ")", ":", "\n", "        ", "with", "open", "(", "pkl_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s", "=", "dnnlib", ".", "EasyDict", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "", "obj", "=", "FeatureStats", "(", "capture_all", "=", "s", ".", "capture_all", ",", "max_items", "=", "s", ".", "max_items", ")", "\n", "obj", ".", "__dict__", ".", "update", "(", "s", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.__init__": [[154, 168], ["time.time", "metric_utils.ProgressMonitor.progress_fn"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tag", "=", "None", ",", "num_items", "=", "None", ",", "flush_interval", "=", "1000", ",", "verbose", "=", "False", ",", "progress_fn", "=", "None", ",", "pfn_lo", "=", "0", ",", "pfn_hi", "=", "1000", ",", "pfn_total", "=", "1000", ")", ":", "\n", "        ", "self", ".", "tag", "=", "tag", "\n", "self", ".", "num_items", "=", "num_items", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "flush_interval", "=", "flush_interval", "\n", "self", ".", "progress_fn", "=", "progress_fn", "\n", "self", ".", "pfn_lo", "=", "pfn_lo", "\n", "self", ".", "pfn_hi", "=", "pfn_hi", "\n", "self", ".", "pfn_total", "=", "pfn_total", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "batch_time", "=", "self", ".", "start_time", "\n", "self", ".", "batch_items", "=", "0", "\n", "if", "self", ".", "progress_fn", "is", "not", "None", ":", "\n", "            ", "self", ".", "progress_fn", "(", "self", ".", "pfn_lo", ",", "self", ".", "pfn_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update": [[169, 183], ["time.time", "max", "print", "metric_utils.ProgressMonitor.progress_fn", "dnnlib.util.format_time"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.format_time"], ["", "", "def", "update", "(", "self", ",", "cur_items", ")", ":", "\n", "        ", "assert", "(", "self", ".", "num_items", "is", "None", ")", "or", "(", "cur_items", "<=", "self", ".", "num_items", ")", "\n", "if", "(", "cur_items", "<", "self", ".", "batch_items", "+", "self", ".", "flush_interval", ")", "and", "(", "self", ".", "num_items", "is", "None", "or", "cur_items", "<", "self", ".", "num_items", ")", ":", "\n", "            ", "return", "\n", "", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "=", "cur_time", "-", "self", ".", "start_time", "\n", "time_per_item", "=", "(", "cur_time", "-", "self", ".", "batch_time", ")", "/", "max", "(", "cur_items", "-", "self", ".", "batch_items", ",", "1", ")", "\n", "if", "(", "self", ".", "verbose", ")", "and", "(", "self", ".", "tag", "is", "not", "None", ")", ":", "\n", "            ", "print", "(", "f'{self.tag:<19s} items {cur_items:<7d} time {dnnlib.util.format_time(total_time):<12s} ms/item {time_per_item*1e3:.2f}'", ")", "\n", "", "self", ".", "batch_time", "=", "cur_time", "\n", "self", ".", "batch_items", "=", "cur_items", "\n", "\n", "if", "(", "self", ".", "progress_fn", "is", "not", "None", ")", "and", "(", "self", ".", "num_items", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "progress_fn", "(", "self", ".", "pfn_lo", "+", "(", "self", ".", "pfn_hi", "-", "self", ".", "pfn_lo", ")", "*", "(", "cur_items", "/", "self", ".", "num_items", ")", ",", "self", ".", "pfn_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub": [[184, 194], ["metric_utils.ProgressMonitor"], "methods", ["None"], ["", "", "def", "sub", "(", "self", ",", "tag", "=", "None", ",", "num_items", "=", "None", ",", "flush_interval", "=", "1000", ",", "rel_lo", "=", "0", ",", "rel_hi", "=", "1", ")", ":", "\n", "        ", "return", "ProgressMonitor", "(", "\n", "tag", "=", "tag", ",", "\n", "num_items", "=", "num_items", ",", "\n", "flush_interval", "=", "flush_interval", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "progress_fn", "=", "self", ".", "progress_fn", ",", "\n", "pfn_lo", "=", "self", ".", "pfn_lo", "+", "(", "self", ".", "pfn_hi", "-", "self", ".", "pfn_lo", ")", "*", "rel_lo", ",", "\n", "pfn_hi", "=", "self", ".", "pfn_lo", "+", "(", "self", ".", "pfn_hi", "-", "self", ".", "pfn_lo", ")", "*", "rel_hi", ",", "\n", "pfn_total", "=", "self", ".", "pfn_total", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector_name": [[55, 57], ["os.path.splitext", "url.split"], "function", ["None"], ["def", "get_feature_detector_name", "(", "url", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "splitext", "(", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector": [[58, 70], ["torch.device", "torch.distributed.barrier", "dnnlib.util.open_url", "torch.jit.load().eval().to", "torch.distributed.barrier", "torch.jit.load().eval", "torch.jit.load"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.open_url", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load"], ["", "def", "get_feature_detector", "(", "url", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "num_gpus", "=", "1", ",", "rank", "=", "0", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "assert", "0", "<=", "rank", "<", "num_gpus", "\n", "key", "=", "(", "url", ",", "device", ")", "\n", "if", "key", "not", "in", "_feature_detector_cache", ":", "\n", "        ", "is_leader", "=", "(", "rank", "==", "0", ")", "\n", "if", "not", "is_leader", "and", "num_gpus", ">", "1", ":", "\n", "            ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# leader goes first", "\n", "", "with", "dnnlib", ".", "util", ".", "open_url", "(", "url", ",", "verbose", "=", "(", "verbose", "and", "is_leader", ")", ")", "as", "f", ":", "\n", "            ", "_feature_detector_cache", "[", "key", "]", "=", "torch", ".", "jit", ".", "load", "(", "f", ")", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "", "if", "is_leader", "and", "num_gpus", ">", "1", ":", "\n", "            ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# others follow", "\n", "", "", "return", "_feature_detector_cache", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_dataset": [[198, 256], ["len", "metric_utils.FeatureStats", "opts.progress.sub", "metric_utils.get_feature_detector", "torch.utils.data.DataLoader", "dnnlib.util.construct_class_by_name", "dnnlib.util.construct_class_by_name", "dict", "hashlib.md5", "dnnlib.make_cache_dir_path", "min", "get_feature_detector.", "metric_utils.FeatureStats.append_torch", "opts.progress.sub.update", "os.makedirs", "metric_utils.FeatureStats.save", "os.replace", "dict", "dict", "repr().encode", "os.path.isfile", "torch.as_tensor", "torch.distributed.broadcast", "metric_utils.FeatureStats.load", "range", "images.repeat.repeat", "images.repeat.to", "os.path.dirname", "metric_utils.get_feature_detector_name", "hashlib.md5.hexdigest", "float", "uuid.uuid4", "repr", "torch.as_tensor.cpu", "sorted", "dict.items"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.make_cache_dir_path", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append_torch", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.save", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.load", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector_name"], ["", "", "def", "compute_feature_stats_for_dataset", "(", "opts", ",", "detector_url", ",", "detector_kwargs", ",", "rel_lo", "=", "0", ",", "rel_hi", "=", "1", ",", "batch_size", "=", "64", ",", "data_loader_kwargs", "=", "None", ",", "max_items", "=", "None", ",", "**", "stats_kwargs", ")", ":", "\n", "    ", "if", "opts", ".", "metric_only_test", ":", "\n", "        ", "dataset", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "opts", ".", "testset_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "opts", ".", "dataset_kwargs", ")", "\n", "", "if", "data_loader_kwargs", "is", "None", ":", "\n", "        ", "data_loader_kwargs", "=", "dict", "(", "pin_memory", "=", "False", ",", "num_workers", "=", "1", ",", "prefetch_factor", "=", "2", ")", "\n", "\n", "# Try to lookup from cache.", "\n", "", "cache_file", "=", "None", "\n", "if", "opts", ".", "cache", ":", "\n", "# Choose cache file name.", "\n", "        ", "if", "opts", ".", "metric_only_test", ":", "\n", "            ", "args", "=", "dict", "(", "dataset_kwargs", "=", "opts", ".", "testset_kwargs", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "stats_kwargs", "=", "stats_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "args", "=", "dict", "(", "dataset_kwargs", "=", "opts", ".", "dataset_kwargs", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "stats_kwargs", "=", "stats_kwargs", ")", "\n", "", "md5", "=", "hashlib", ".", "md5", "(", "repr", "(", "sorted", "(", "args", ".", "items", "(", ")", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "cache_tag", "=", "f'{dataset.name}-{get_feature_detector_name(detector_url)}-{md5.hexdigest()}'", "\n", "if", "opts", ".", "metric_only_test", ":", "\n", "            ", "cache_tag", "+=", "'-test_only'", "\n", "", "cache_file", "=", "dnnlib", ".", "make_cache_dir_path", "(", "'gan-metrics'", ",", "cache_tag", "+", "'.pkl'", ")", "\n", "\n", "# Check if the file exists (all processes must agree).", "\n", "flag", "=", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", "if", "opts", ".", "rank", "==", "0", "else", "False", "\n", "if", "opts", ".", "num_gpus", ">", "1", ":", "\n", "            ", "flag", "=", "torch", ".", "as_tensor", "(", "flag", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opts", ".", "device", ")", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "tensor", "=", "flag", ",", "src", "=", "0", ")", "\n", "flag", "=", "(", "float", "(", "flag", ".", "cpu", "(", ")", ")", "!=", "0", ")", "\n", "\n", "# Load.", "\n", "", "if", "flag", ":", "\n", "            ", "return", "FeatureStats", ".", "load", "(", "cache_file", ")", "\n", "\n", "# Initialize.", "\n", "", "", "num_items", "=", "len", "(", "dataset", ")", "\n", "if", "max_items", "is", "not", "None", ":", "\n", "        ", "num_items", "=", "min", "(", "num_items", ",", "max_items", ")", "\n", "", "stats", "=", "FeatureStats", "(", "max_items", "=", "num_items", ",", "**", "stats_kwargs", ")", "\n", "progress", "=", "opts", ".", "progress", ".", "sub", "(", "tag", "=", "'dataset features'", ",", "num_items", "=", "num_items", ",", "rel_lo", "=", "rel_lo", ",", "rel_hi", "=", "rel_hi", ")", "\n", "detector", "=", "get_feature_detector", "(", "url", "=", "detector_url", ",", "device", "=", "opts", ".", "device", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "verbose", "=", "progress", ".", "verbose", ")", "\n", "\n", "# Main loop.", "\n", "item_subset", "=", "[", "(", "i", "*", "opts", ".", "num_gpus", "+", "opts", ".", "rank", ")", "%", "num_items", "for", "i", "in", "range", "(", "(", "num_items", "-", "1", ")", "//", "opts", ".", "num_gpus", "+", "1", ")", "]", "\n", "for", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "sampler", "=", "item_subset", ",", "batch_size", "=", "batch_size", ",", "**", "data_loader_kwargs", ")", ":", "\n", "        ", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "images", "=", "images", ".", "repeat", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "", "features", "=", "detector", "(", "images", ".", "to", "(", "opts", ".", "device", ")", ",", "**", "detector_kwargs", ")", "\n", "stats", ".", "append_torch", "(", "features", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ")", "\n", "progress", ".", "update", "(", "stats", ".", "num_items", ")", "\n", "del", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "\n", "\n", "# Save to cache.", "\n", "", "if", "cache_file", "is", "not", "None", "and", "opts", ".", "rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cache_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "temp_file", "=", "cache_file", "+", "'.'", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "stats", ".", "save", "(", "temp_file", ")", "\n", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_generator": [[258, 380], ["copy.deepcopy().eval().requires_grad_().to", "dnnlib.util.construct_class_by_name", "dict", "metric_utils.FeatureStats", "opts.progress.sub", "metric_utils.get_feature_detector", "iter", "copy.deepcopy().eval().requires_grad_", "opts.testset_kwargs[].lower", "torch.utils.data.DataLoader", "metric_utils.FeatureStats.is_full", "get_feature_detector.", "metric_utils.FeatureStats.append_torch", "opts.progress.sub.update", "dnnlib.util.construct_class_by_name", "dict", "metric_utils.FeatureStats", "opts.progress.sub", "metric_utils.get_feature_detector", "iter", "dnnlib.util.construct_class_by_name", "metric_utils.FeatureStats", "opts.progress.sub", "metric_utils.get_feature_detector", "len", "range", "next", "torch.no_grad", "torch.randn", "copy.deepcopy().eval().requires_grad_().to.", "imgs.repeat.repeat", "opts.testset_kwargs[].lower", "torch.utils.data.DataLoader", "metric_utils.FeatureStats.is_full", "get_feature_detector.", "metric_utils.FeatureStats.append_torch", "opts.progress.sub.update", "min", "copy.deepcopy().eval().requires_grad_().to.", "torch.zeros", "torch.zeros", "torch.jit.trace", "opts.testset_kwargs[].lower", "metric_utils.FeatureStats.is_full", "range", "torch.cat", "get_feature_detector.", "metric_utils.FeatureStats.append_torch", "opts.progress.sub.update", "copy.deepcopy().eval", "iter", "next", "img_fts.norm", "len", "range", "next", "torch.no_grad", "torch.randn", "copy.deepcopy().eval().requires_grad_().to.", "imgs.repeat.repeat", "torch.randn", "torch.from_numpy().pin_memory().to", "images.repeat.append", "images.repeat.repeat", "torch.utils.data.DataLoader", "_labels.to", "clip_img_features.to", "iter", "next", "txt_fts.norm", "dnnlib.util.construct_class_by_name.get_label", "torch.jit.trace."], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.is_full", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append_torch", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.is_full", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append_torch", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.is_full", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append_torch", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label"], ["", "def", "compute_feature_stats_for_generator", "(", "opts", ",", "detector_url", ",", "detector_kwargs", ",", "rel_lo", "=", "0", ",", "rel_hi", "=", "1", ",", "batch_size", "=", "64", ",", "batch_gen", "=", "None", ",", "jit", "=", "False", ",", "max_items", "=", "None", ",", "**", "stats_kwargs", ")", ":", "\n", "    ", "G", "=", "copy", ".", "deepcopy", "(", "opts", ".", "G", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "if", "opts", ".", "img_recon", ":", "\n", "        ", "batch_gen", "=", "batch_size", "=", "4", "\n", "dataset", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "opts", ".", "testset_kwargs", ")", "\n", "data_loader_kwargs", "=", "dict", "(", "pin_memory", "=", "False", ",", "num_workers", "=", "1", ",", "prefetch_factor", "=", "2", ")", "\n", "\n", "# Initialize.", "\n", "if", "'celeba'", "in", "opts", ".", "testset_kwargs", "[", "'path'", "]", ".", "lower", "(", ")", ":", "\n", "            ", "num_items", "=", "6000", "# 6000 images are used for Multi-modal CelebA-HQ dataset", "\n", "", "else", ":", "\n", "            ", "num_items", "=", "30000", "# 30000 images are used for MS-COCO, CUB and LN-COCO datasets", "\n", "", "stats", "=", "FeatureStats", "(", "max_items", "=", "num_items", ",", "**", "stats_kwargs", ")", "\n", "progress", "=", "opts", ".", "progress", ".", "sub", "(", "tag", "=", "'generator features'", ",", "num_items", "=", "num_items", ",", "rel_lo", "=", "rel_lo", ",", "rel_hi", "=", "rel_hi", ")", "\n", "detector", "=", "get_feature_detector", "(", "url", "=", "detector_url", ",", "device", "=", "opts", ".", "device", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "\n", "verbose", "=", "progress", ".", "verbose", ")", "\n", "\n", "item_subset", "=", "[", "(", "i", "*", "opts", ".", "num_gpus", "+", "opts", ".", "rank", ")", "%", "len", "(", "dataset", ")", "for", "i", "in", "range", "(", "(", "len", "(", "dataset", ")", "-", "1", ")", "//", "opts", ".", "num_gpus", "+", "1", ")", "]", "\n", "dataloader_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "sampler", "=", "item_subset", ",", "batch_size", "=", "batch_size", ",", "**", "data_loader_kwargs", ")", ")", "\n", "while", "not", "stats", ".", "is_full", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "=", "next", "(", "dataloader_iterator", ")", "\n", "", "except", ":", "\n", "                ", "dataloader_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "sampler", "=", "item_subset", ",", "batch_size", "=", "batch_size", ",", "**", "data_loader_kwargs", ")", ")", "\n", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "=", "next", "(", "dataloader_iterator", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "clip_img_features", "=", "img_fts", "/", "img_fts", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "#.view((batch_size, -1))", "\n", "z", "=", "torch", ".", "randn", "(", "[", "img_fts", ".", "size", "(", ")", "[", "0", "]", ",", "G", ".", "z_dim", "]", ",", "device", "=", "opts", ".", "device", ")", "\n", "imgs", "=", "G", "(", "z", "=", "z", ",", "c", "=", "_labels", ".", "to", "(", "opts", ".", "device", ")", ",", "fts", "=", "clip_img_features", ".", "to", "(", "opts", ".", "device", ")", ")", "\n", "imgs", "=", "(", "imgs", "*", "127.5", "+", "128", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "", "if", "imgs", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "imgs", "=", "imgs", ".", "repeat", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "", "features", "=", "detector", "(", "imgs", ",", "**", "detector_kwargs", ")", "\n", "stats", ".", "append_torch", "(", "features", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ")", "\n", "progress", ".", "update", "(", "stats", ".", "num_items", ")", "\n", "del", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "\n", "", "return", "stats", "\n", "\n", "", "elif", "opts", ".", "txt_recon", ":", "\n", "        ", "batch_gen", "=", "batch_size", "=", "16", "\n", "dataset", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "opts", ".", "testset_kwargs", ")", "\n", "data_loader_kwargs", "=", "dict", "(", "pin_memory", "=", "False", ",", "num_workers", "=", "1", ",", "prefetch_factor", "=", "2", ")", "\n", "\n", "# Initialize.", "\n", "if", "'celeba'", "in", "opts", ".", "testset_kwargs", "[", "'path'", "]", ".", "lower", "(", ")", ":", "\n", "            ", "num_items", "=", "6000", "# 6000 images are used for Multi-modal CelebA-HQ dataset", "\n", "", "else", ":", "\n", "            ", "num_items", "=", "30000", "# 30000 images are used for MS-COCO, CUB and LN-COCO datasets", "\n", "", "stats", "=", "FeatureStats", "(", "max_items", "=", "num_items", ",", "**", "stats_kwargs", ")", "\n", "progress", "=", "opts", ".", "progress", ".", "sub", "(", "tag", "=", "'generator features'", ",", "num_items", "=", "num_items", ",", "rel_lo", "=", "rel_lo", ",", "rel_hi", "=", "rel_hi", ")", "\n", "detector", "=", "get_feature_detector", "(", "url", "=", "detector_url", ",", "device", "=", "opts", ".", "device", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "\n", "verbose", "=", "progress", ".", "verbose", ")", "\n", "\n", "item_subset", "=", "[", "(", "i", "*", "opts", ".", "num_gpus", "+", "opts", ".", "rank", ")", "%", "len", "(", "dataset", ")", "for", "i", "in", "range", "(", "(", "len", "(", "dataset", ")", "-", "1", ")", "//", "opts", ".", "num_gpus", "+", "1", ")", "]", "\n", "dataloader_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "sampler", "=", "item_subset", ",", "batch_size", "=", "batch_size", ",", "**", "data_loader_kwargs", ")", ")", "\n", "while", "not", "stats", ".", "is_full", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "=", "next", "(", "dataloader_iterator", ")", "\n", "", "except", ":", "\n", "                ", "dataloader_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "sampler", "=", "item_subset", ",", "batch_size", "=", "batch_size", ",", "**", "data_loader_kwargs", ")", ")", "\n", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "=", "next", "(", "dataloader_iterator", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "clip_txt_features", "=", "txt_fts", "/", "txt_fts", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "#.view((batch_size, -1))", "\n", "z", "=", "torch", ".", "randn", "(", "[", "txt_fts", ".", "size", "(", ")", "[", "0", "]", ",", "G", ".", "z_dim", "]", ",", "device", "=", "opts", ".", "device", ")", "\n", "imgs", "=", "G", "(", "z", "=", "z", ",", "c", "=", "_labels", ".", "to", "(", "opts", ".", "device", ")", ",", "fts", "=", "clip_txt_features", ".", "to", "(", "opts", ".", "device", ")", ")", "\n", "imgs", "=", "(", "imgs", "*", "127.5", "+", "128", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "\n", "", "if", "imgs", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "imgs", "=", "imgs", ".", "repeat", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "", "features", "=", "detector", "(", "imgs", ",", "**", "detector_kwargs", ")", "\n", "stats", ".", "append_torch", "(", "features", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ")", "\n", "progress", ".", "update", "(", "stats", ".", "num_items", ")", "\n", "del", "images", ",", "_labels", ",", "img_fts", ",", "txt_fts", "\n", "", "return", "stats", "\n", "\n", "", "else", ":", "\n", "        ", "if", "batch_gen", "is", "None", ":", "\n", "            ", "batch_gen", "=", "min", "(", "batch_size", ",", "4", ")", "\n", "", "assert", "batch_size", "%", "batch_gen", "==", "0", "\n", "\n", "dataset", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "opts", ".", "testset_kwargs", ")", "\n", "\n", "# Image generation func.", "\n", "def", "run_generator", "(", "z", ",", "c", ")", ":", "\n", "            ", "img", "=", "G", "(", "z", "=", "z", ",", "c", "=", "c", ",", "**", "opts", ".", "G_kwargs", ")", "\n", "img", "=", "(", "img", "*", "127.5", "+", "128", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "return", "img", "\n", "\n", "# JIT.", "\n", "", "if", "jit", ":", "\n", "            ", "z", "=", "torch", ".", "zeros", "(", "[", "batch_gen", ",", "G", ".", "z_dim", "]", ",", "device", "=", "opts", ".", "device", ")", "\n", "c", "=", "torch", ".", "zeros", "(", "[", "batch_gen", ",", "G", ".", "c_dim", "]", ",", "device", "=", "opts", ".", "device", ")", "\n", "run_generator", "=", "torch", ".", "jit", ".", "trace", "(", "run_generator", ",", "[", "z", ",", "c", "]", ",", "check_trace", "=", "False", ")", "\n", "\n", "# Initialize.", "\n", "", "if", "'celeba'", "in", "opts", ".", "testset_kwargs", "[", "'path'", "]", ".", "lower", "(", ")", ":", "\n", "            ", "num_items", "=", "6000", "# 6000 images are used for Multi-modal CelebA-HQ dataset", "\n", "", "else", ":", "\n", "            ", "num_items", "=", "30000", "# 30000 images are used for MS-COCO, CUB and LN-COCO datasets", "\n", "", "stats", "=", "FeatureStats", "(", "max_items", "=", "num_items", ",", "**", "stats_kwargs", ")", "\n", "progress", "=", "opts", ".", "progress", ".", "sub", "(", "tag", "=", "'generator features'", ",", "num_items", "=", "stats", ".", "max_items", ",", "rel_lo", "=", "rel_lo", ",", "rel_hi", "=", "rel_hi", ")", "\n", "detector", "=", "get_feature_detector", "(", "url", "=", "detector_url", ",", "device", "=", "opts", ".", "device", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "verbose", "=", "progress", ".", "verbose", ")", "\n", "\n", "# Main loop.", "\n", "while", "not", "stats", ".", "is_full", "(", ")", ":", "\n", "            ", "images", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "batch_size", "//", "batch_gen", ")", ":", "\n", "                ", "z", "=", "torch", ".", "randn", "(", "[", "batch_gen", ",", "G", ".", "z_dim", "]", ",", "device", "=", "opts", ".", "device", ")", "\n", "c", "=", "[", "dataset", ".", "get_label", "(", "np", ".", "random", ".", "randint", "(", "len", "(", "dataset", ")", ")", ")", "for", "_i", "in", "range", "(", "batch_gen", ")", "]", "\n", "c", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "c", ")", ")", ".", "pin_memory", "(", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "images", ".", "append", "(", "run_generator", "(", "z", ",", "c", ")", ")", "\n", "", "images", "=", "torch", ".", "cat", "(", "images", ")", "\n", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "images", "=", "images", ".", "repeat", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "", "features", "=", "detector", "(", "images", ",", "**", "detector_kwargs", ")", "\n", "stats", ".", "append_torch", "(", "features", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ")", "\n", "progress", ".", "update", "(", "stats", ".", "num_items", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.precision_recall.compute_distances": [[12, 26], ["torch.nn.functional.pad().chunk", "range", "torch.nn.functional.pad", "torch.cdist", "dist_batch.clone", "dist_batches.append", "torch.cat", "row_features.unsqueeze", "col_batch.unsqueeze", "torch.distributed.broadcast", "dist_batch.clone.cpu", "torch.float16", "torch.float32"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["def", "compute_distances", "(", "row_features", ",", "col_features", ",", "num_gpus", ",", "rank", ",", "col_batch_size", ")", ":", "\n", "    ", "assert", "0", "<=", "rank", "<", "num_gpus", "\n", "num_cols", "=", "col_features", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "(", "(", "num_cols", "-", "1", ")", "//", "col_batch_size", "//", "num_gpus", "+", "1", ")", "*", "num_gpus", "\n", "col_batches", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "col_features", ",", "[", "0", ",", "0", ",", "0", ",", "-", "num_cols", "%", "num_batches", "]", ")", ".", "chunk", "(", "num_batches", ")", "\n", "dist_batches", "=", "[", "]", "\n", "for", "col_batch", "in", "col_batches", "[", "rank", ":", ":", "num_gpus", "]", ":", "\n", "        ", "dist_batch", "=", "torch", ".", "cdist", "(", "row_features", ".", "unsqueeze", "(", "0", ")", ",", "col_batch", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", "]", "\n", "for", "src", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "dist_broadcast", "=", "dist_batch", ".", "clone", "(", ")", "\n", "if", "num_gpus", ">", "1", ":", "\n", "                ", "torch", ".", "distributed", ".", "broadcast", "(", "dist_broadcast", ",", "src", "=", "src", ")", "\n", "", "dist_batches", ".", "append", "(", "dist_broadcast", ".", "cpu", "(", ")", "if", "rank", "==", "0", "else", "None", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "dist_batches", ",", "dim", "=", "1", ")", "[", ":", ",", ":", "num_cols", "]", "if", "rank", "==", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.precision_recall.compute_pr": [[29, 54], ["dict", "metric_utils.compute_feature_stats_for_dataset().get_all_torch().to().to", "metric_utils.compute_feature_stats_for_generator().get_all_torch().to().to", "dict", "manifold.split", "probes.split", "float", "metric_utils.compute_feature_stats_for_dataset().get_all_torch().to", "metric_utils.compute_feature_stats_for_generator().get_all_torch().to", "precision_recall.compute_distances", "kth.append", "torch.cat", "precision_recall.compute_distances", "pred.append", "torch.cat().to().mean", "metric_utils.compute_feature_stats_for_dataset().get_all_torch", "metric_utils.compute_feature_stats_for_generator().get_all_torch", "compute_distances.to().kthvalue().values.to", "torch.cat().to", "metric_utils.compute_feature_stats_for_dataset", "metric_utils.compute_feature_stats_for_generator", "compute_distances.to().kthvalue", "torch.cat", "compute_distances.to"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.precision_recall.compute_distances", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.precision_recall.compute_distances", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all_torch", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all_torch", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_dataset", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_generator"], ["", "def", "compute_pr", "(", "opts", ",", "max_real", ",", "num_gen", ",", "nhood_size", ",", "row_batch_size", ",", "col_batch_size", ")", ":", "\n", "    ", "detector_url", "=", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metrics/vgg16.pt'", "\n", "detector_kwargs", "=", "dict", "(", "return_features", "=", "True", ")", "\n", "\n", "real_features", "=", "metric_utils", ".", "compute_feature_stats_for_dataset", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "rel_lo", "=", "0", ",", "rel_hi", "=", "0", ",", "capture_all", "=", "True", ",", "max_items", "=", "max_real", ")", ".", "get_all_torch", "(", ")", ".", "to", "(", "torch", ".", "float16", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "\n", "gen_features", "=", "metric_utils", ".", "compute_feature_stats_for_generator", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "rel_lo", "=", "0", ",", "rel_hi", "=", "1", ",", "capture_all", "=", "True", ",", "max_items", "=", "num_gen", ")", ".", "get_all_torch", "(", ")", ".", "to", "(", "torch", ".", "float16", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "for", "name", ",", "manifold", ",", "probes", "in", "[", "(", "'precision'", ",", "real_features", ",", "gen_features", ")", ",", "(", "'recall'", ",", "gen_features", ",", "real_features", ")", "]", ":", "\n", "        ", "kth", "=", "[", "]", "\n", "for", "manifold_batch", "in", "manifold", ".", "split", "(", "row_batch_size", ")", ":", "\n", "            ", "dist", "=", "compute_distances", "(", "row_features", "=", "manifold_batch", ",", "col_features", "=", "manifold", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "col_batch_size", "=", "col_batch_size", ")", "\n", "kth", ".", "append", "(", "dist", ".", "to", "(", "torch", ".", "float32", ")", ".", "kthvalue", "(", "nhood_size", "+", "1", ")", ".", "values", ".", "to", "(", "torch", ".", "float16", ")", "if", "opts", ".", "rank", "==", "0", "else", "None", ")", "\n", "", "kth", "=", "torch", ".", "cat", "(", "kth", ")", "if", "opts", ".", "rank", "==", "0", "else", "None", "\n", "pred", "=", "[", "]", "\n", "for", "probes_batch", "in", "probes", ".", "split", "(", "row_batch_size", ")", ":", "\n", "            ", "dist", "=", "compute_distances", "(", "row_features", "=", "probes_batch", ",", "col_features", "=", "manifold", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "col_batch_size", "=", "col_batch_size", ")", "\n", "pred", ".", "append", "(", "(", "dist", "<=", "kth", ")", ".", "any", "(", "dim", "=", "1", ")", "if", "opts", ".", "rank", "==", "0", "else", "None", ")", "\n", "", "results", "[", "name", "]", "=", "float", "(", "torch", ".", "cat", "(", "pred", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "if", "opts", ".", "rank", "==", "0", "else", "'nan'", ")", "\n", "", "return", "results", "[", "'precision'", "]", ",", "results", "[", "'recall'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.frechet_inception_distance.compute_fid": [[13, 35], ["dict", "metric_utils.compute_feature_stats_for_dataset().get_mean_cov", "metric_utils.compute_feature_stats_for_generator().get_mean_cov", "numpy.square().sum", "scipy.linalg.sqrtm", "numpy.real", "float", "float", "numpy.dot", "metric_utils.compute_feature_stats_for_dataset", "metric_utils.compute_feature_stats_for_generator", "numpy.square", "numpy.trace"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_mean_cov", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_mean_cov", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_dataset", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_generator"], ["def", "compute_fid", "(", "opts", ",", "max_real", ",", "num_gen", ")", ":", "\n", "# Direct TorchScript translation of http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz", "\n", "    ", "detector_url", "=", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metrics/inception-2015-12-05.pt'", "\n", "detector_kwargs", "=", "dict", "(", "return_features", "=", "True", ")", "# Return raw features before the softmax layer.", "\n", "\n", "\n", "\n", "mu_real", ",", "sigma_real", "=", "metric_utils", ".", "compute_feature_stats_for_dataset", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "rel_lo", "=", "0", ",", "rel_hi", "=", "0", ",", "capture_mean_cov", "=", "True", ",", "max_items", "=", "max_real", ")", ".", "get_mean_cov", "(", ")", "\n", "\n", "mu_gen", ",", "sigma_gen", "=", "metric_utils", ".", "compute_feature_stats_for_generator", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "rel_lo", "=", "0", ",", "rel_hi", "=", "1", ",", "capture_mean_cov", "=", "True", ",", "max_items", "=", "num_gen", ")", ".", "get_mean_cov", "(", ")", "\n", "\n", "if", "opts", ".", "rank", "!=", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "", "m", "=", "np", ".", "square", "(", "mu_gen", "-", "mu_real", ")", ".", "sum", "(", ")", "\n", "s", ",", "_", "=", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "sigma_gen", ",", "sigma_real", ")", ",", "disp", "=", "False", ")", "# pylint: disable=no-member", "\n", "fid", "=", "np", ".", "real", "(", "m", "+", "np", ".", "trace", "(", "sigma_gen", "+", "sigma_real", "-", "s", "*", "2", ")", ")", "\n", "return", "float", "(", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.inception_score.compute_is": [[11, 31], ["dict", "metric_utils.compute_feature_stats_for_generator().get_all", "range", "numpy.mean", "scores.append", "float", "float", "metric_utils.compute_feature_stats_for_generator", "float", "float", "numpy.sum", "numpy.exp", "numpy.mean", "numpy.std", "numpy.log", "numpy.log", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_generator", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.std", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["def", "compute_is", "(", "opts", ",", "num_gen", ",", "num_splits", ")", ":", "\n", "# Direct TorchScript translation of http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz", "\n", "    ", "detector_url", "=", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metrics/inception-2015-12-05.pt'", "\n", "detector_kwargs", "=", "dict", "(", "no_output_bias", "=", "True", ")", "# Match the original implementation by not applying bias in the softmax layer.", "\n", "\n", "gen_probs", "=", "metric_utils", ".", "compute_feature_stats_for_generator", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "capture_all", "=", "True", ",", "max_items", "=", "num_gen", ")", ".", "get_all", "(", ")", "\n", "\n", "num_gen", "=", "gen_probs", ".", "shape", "[", "0", "]", "\n", "if", "opts", ".", "rank", "!=", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", ",", "float", "(", "'nan'", ")", "\n", "\n", "", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_splits", ")", ":", "\n", "        ", "part", "=", "gen_probs", "[", "i", "*", "num_gen", "//", "num_splits", ":", "(", "i", "+", "1", ")", "*", "num_gen", "//", "num_splits", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "mean", "(", "part", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "axis", "=", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "float", "(", "np", ".", "mean", "(", "scores", ")", ")", ",", "float", "(", "np", ".", "std", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.register_metric": [[19, 23], ["callable"], "function", ["None"], ["def", "register_metric", "(", "fn", ")", ":", "\n", "    ", "assert", "callable", "(", "fn", ")", "\n", "_metric_dict", "[", "fn", ".", "__name__", "]", "=", "fn", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.is_valid_metric": [[24, 26], ["None"], "function", ["None"], ["", "def", "is_valid_metric", "(", "metric", ")", ":", "\n", "    ", "return", "metric", "in", "_metric_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.list_valid_metrics": [[27, 29], ["list", "_metric_dict.keys"], "function", ["None"], ["", "def", "list_valid_metrics", "(", ")", ":", "\n", "    ", "return", "list", "(", "_metric_dict", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.calc_metric": [[32, 56], ["metric_main.is_valid_metric", "metric_utils.MetricOptions", "time.time", "list", "dnnlib.EasyDict", "time.time", "results.items", "torch.as_tensor", "torch.distributed.broadcast", "float", "dnnlib.EasyDict", "dnnlib.util.format_time", "float.cpu"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.is_valid_metric", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.format_time"], ["", "def", "calc_metric", "(", "metric", ",", "**", "kwargs", ")", ":", "# See metric_utils.MetricOptions for the full list of arguments.", "\n", "    ", "assert", "is_valid_metric", "(", "metric", ")", "\n", "opts", "=", "metric_utils", ".", "MetricOptions", "(", "**", "kwargs", ")", "\n", "\n", "# Calculate.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "results", "=", "_metric_dict", "[", "metric", "]", "(", "opts", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "# Broadcast results.", "\n", "for", "key", ",", "value", "in", "list", "(", "results", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "opts", ".", "num_gpus", ">", "1", ":", "\n", "            ", "value", "=", "torch", ".", "as_tensor", "(", "value", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "opts", ".", "device", ")", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "tensor", "=", "value", ",", "src", "=", "0", ")", "\n", "value", "=", "float", "(", "value", ".", "cpu", "(", ")", ")", "\n", "", "results", "[", "key", "]", "=", "value", "\n", "\n", "# Decorate with metadata.", "\n", "", "return", "dnnlib", ".", "EasyDict", "(", "\n", "results", "=", "dnnlib", ".", "EasyDict", "(", "results", ")", ",", "\n", "metric", "=", "metric", ",", "\n", "total_time", "=", "total_time", ",", "\n", "total_time_str", "=", "dnnlib", ".", "util", ".", "format_time", "(", "total_time", ")", ",", "\n", "num_gpus", "=", "opts", ".", "num_gpus", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.report_metric": [[60, 71], ["metric_main.is_valid_metric", "json.dumps", "print", "os.path.relpath", "dict", "os.path.isdir", "open", "f.write", "time.time", "os.path.join"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.is_valid_metric", "home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.Logger.write"], ["", "def", "report_metric", "(", "result_dict", ",", "run_dir", "=", "None", ",", "snapshot_pkl", "=", "None", ")", ":", "\n", "    ", "metric", "=", "result_dict", "[", "'metric'", "]", "\n", "assert", "is_valid_metric", "(", "metric", ")", "\n", "if", "run_dir", "is", "not", "None", "and", "snapshot_pkl", "is", "not", "None", ":", "\n", "        ", "snapshot_pkl", "=", "os", ".", "path", ".", "relpath", "(", "snapshot_pkl", ",", "run_dir", ")", "\n", "\n", "", "jsonl_line", "=", "json", ".", "dumps", "(", "dict", "(", "result_dict", ",", "snapshot_pkl", "=", "snapshot_pkl", ",", "timestamp", "=", "time", ".", "time", "(", ")", ")", ")", "\n", "print", "(", "jsonl_line", ")", "\n", "if", "run_dir", "is", "not", "None", "and", "os", ".", "path", ".", "isdir", "(", "run_dir", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "f'metric-{metric}.jsonl'", ")", ",", "'at'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "jsonl_line", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.fid50k_full": [[75, 80], ["opts.dataset_kwargs.update", "frechet_inception_distance.compute_fid", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.frechet_inception_distance.compute_fid"], ["", "", "", "@", "register_metric", "\n", "def", "fid50k_full", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ",", "xflip", "=", "False", ")", "\n", "fid", "=", "frechet_inception_distance", ".", "compute_fid", "(", "opts", ",", "max_real", "=", "None", ",", "num_gen", "=", "50000", ")", "\n", "return", "dict", "(", "fid50k_full", "=", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.kid50k_full": [[81, 86], ["opts.dataset_kwargs.update", "kernel_inception_distance.compute_kid", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.kernel_inception_distance.compute_kid"], ["", "@", "register_metric", "\n", "def", "kid50k_full", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ",", "xflip", "=", "False", ")", "\n", "kid", "=", "kernel_inception_distance", ".", "compute_kid", "(", "opts", ",", "max_real", "=", "1000000", ",", "num_gen", "=", "50000", ",", "num_subsets", "=", "100", ",", "max_subset_size", "=", "1000", ")", "\n", "return", "dict", "(", "kid50k_full", "=", "kid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.pr50k3_full": [[87, 92], ["opts.dataset_kwargs.update", "precision_recall.compute_pr", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.precision_recall.compute_pr"], ["", "@", "register_metric", "\n", "def", "pr50k3_full", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ",", "xflip", "=", "False", ")", "\n", "precision", ",", "recall", "=", "precision_recall", ".", "compute_pr", "(", "opts", ",", "max_real", "=", "200000", ",", "num_gen", "=", "50000", ",", "nhood_size", "=", "3", ",", "row_batch_size", "=", "10000", ",", "col_batch_size", "=", "10000", ")", "\n", "return", "dict", "(", "pr50k3_full_precision", "=", "precision", ",", "pr50k3_full_recall", "=", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.ppl2_wend": [[93, 97], ["perceptual_path_length.compute_ppl", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.compute_ppl"], ["", "@", "register_metric", "\n", "def", "ppl2_wend", "(", "opts", ")", ":", "\n", "    ", "ppl", "=", "perceptual_path_length", ".", "compute_ppl", "(", "opts", ",", "num_samples", "=", "50000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'w'", ",", "sampling", "=", "'end'", ",", "crop", "=", "False", ",", "batch_size", "=", "2", ")", "\n", "return", "dict", "(", "ppl2_wend", "=", "ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.is50k": [[98, 103], ["opts.dataset_kwargs.update", "inception_score.compute_is", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.inception_score.compute_is"], ["", "@", "register_metric", "\n", "def", "is50k", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ",", "xflip", "=", "False", ")", "\n", "mean", ",", "std", "=", "inception_score", ".", "compute_is", "(", "opts", ",", "num_gen", "=", "50000", ",", "num_splits", "=", "10", ")", "\n", "return", "dict", "(", "is50k_mean", "=", "mean", ",", "is50k_std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.fid50k": [[107, 112], ["opts.dataset_kwargs.update", "frechet_inception_distance.compute_fid", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.frechet_inception_distance.compute_fid"], ["", "@", "register_metric", "\n", "def", "fid50k", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ")", "\n", "fid", "=", "frechet_inception_distance", ".", "compute_fid", "(", "opts", ",", "max_real", "=", "50000", ",", "num_gen", "=", "50000", ")", "\n", "return", "dict", "(", "fid50k", "=", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.kid50k": [[113, 118], ["opts.dataset_kwargs.update", "kernel_inception_distance.compute_kid", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.kernel_inception_distance.compute_kid"], ["", "@", "register_metric", "\n", "def", "kid50k", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ")", "\n", "kid", "=", "kernel_inception_distance", ".", "compute_kid", "(", "opts", ",", "max_real", "=", "50000", ",", "num_gen", "=", "50000", ",", "num_subsets", "=", "100", ",", "max_subset_size", "=", "1000", ")", "\n", "return", "dict", "(", "kid50k", "=", "kid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.pr50k3": [[119, 124], ["opts.dataset_kwargs.update", "precision_recall.compute_pr", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.precision_recall.compute_pr"], ["", "@", "register_metric", "\n", "def", "pr50k3", "(", "opts", ")", ":", "\n", "    ", "opts", ".", "dataset_kwargs", ".", "update", "(", "max_size", "=", "None", ")", "\n", "precision", ",", "recall", "=", "precision_recall", ".", "compute_pr", "(", "opts", ",", "max_real", "=", "50000", ",", "num_gen", "=", "50000", ",", "nhood_size", "=", "3", ",", "row_batch_size", "=", "10000", ",", "col_batch_size", "=", "10000", ")", "\n", "return", "dict", "(", "pr50k3_precision", "=", "precision", ",", "pr50k3_recall", "=", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.ppl_zfull": [[125, 129], ["perceptual_path_length.compute_ppl", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.compute_ppl"], ["", "@", "register_metric", "\n", "def", "ppl_zfull", "(", "opts", ")", ":", "\n", "    ", "ppl", "=", "perceptual_path_length", ".", "compute_ppl", "(", "opts", ",", "num_samples", "=", "50000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'z'", ",", "sampling", "=", "'full'", ",", "crop", "=", "True", ",", "batch_size", "=", "2", ")", "\n", "return", "dict", "(", "ppl_zfull", "=", "ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.ppl_wfull": [[130, 134], ["perceptual_path_length.compute_ppl", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.compute_ppl"], ["", "@", "register_metric", "\n", "def", "ppl_wfull", "(", "opts", ")", ":", "\n", "    ", "ppl", "=", "perceptual_path_length", ".", "compute_ppl", "(", "opts", ",", "num_samples", "=", "50000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'w'", ",", "sampling", "=", "'full'", ",", "crop", "=", "True", ",", "batch_size", "=", "2", ")", "\n", "return", "dict", "(", "ppl_wfull", "=", "ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.ppl_zend": [[135, 139], ["perceptual_path_length.compute_ppl", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.compute_ppl"], ["", "@", "register_metric", "\n", "def", "ppl_zend", "(", "opts", ")", ":", "\n", "    ", "ppl", "=", "perceptual_path_length", ".", "compute_ppl", "(", "opts", ",", "num_samples", "=", "50000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'z'", ",", "sampling", "=", "'end'", ",", "crop", "=", "True", ",", "batch_size", "=", "2", ")", "\n", "return", "dict", "(", "ppl_zend", "=", "ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_main.ppl_wend": [[140, 144], ["perceptual_path_length.compute_ppl", "dict"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.compute_ppl"], ["", "@", "register_metric", "\n", "def", "ppl_wend", "(", "opts", ")", ":", "\n", "    ", "ppl", "=", "perceptual_path_length", ".", "compute_ppl", "(", "opts", ",", "num_samples", "=", "50000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'w'", ",", "sampling", "=", "'end'", ",", "crop", "=", "True", ",", "batch_size", "=", "2", ")", "\n", "return", "dict", "(", "ppl_wend", "=", "ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.kernel_inception_distance.compute_kid": [[11, 38], ["dict", "metric_utils.compute_feature_stats_for_dataset().get_all", "metric_utils.compute_feature_stats_for_generator().get_all", "min", "range", "float", "float", "min", "metric_utils.compute_feature_stats_for_dataset", "metric_utils.compute_feature_stats_for_generator", "numpy.random.choice", "numpy.random.choice", "a.sum", "numpy.diag().sum", "b.sum", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.get_all", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_dataset", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.compute_feature_stats_for_generator"], ["def", "compute_kid", "(", "opts", ",", "max_real", ",", "num_gen", ",", "num_subsets", ",", "max_subset_size", ")", ":", "\n", "# Direct TorchScript translation of http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz", "\n", "    ", "detector_url", "=", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metrics/inception-2015-12-05.pt'", "\n", "detector_kwargs", "=", "dict", "(", "return_features", "=", "True", ")", "# Return raw features before the softmax layer.", "\n", "\n", "real_features", "=", "metric_utils", ".", "compute_feature_stats_for_dataset", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "rel_lo", "=", "0", ",", "rel_hi", "=", "0", ",", "capture_all", "=", "True", ",", "max_items", "=", "max_real", ")", ".", "get_all", "(", ")", "\n", "\n", "gen_features", "=", "metric_utils", ".", "compute_feature_stats_for_generator", "(", "\n", "opts", "=", "opts", ",", "detector_url", "=", "detector_url", ",", "detector_kwargs", "=", "detector_kwargs", ",", "\n", "rel_lo", "=", "0", ",", "rel_hi", "=", "1", ",", "capture_all", "=", "True", ",", "max_items", "=", "num_gen", ")", ".", "get_all", "(", ")", "\n", "\n", "if", "opts", ".", "rank", "!=", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "", "n", "=", "real_features", ".", "shape", "[", "1", "]", "\n", "m", "=", "min", "(", "min", "(", "real_features", ".", "shape", "[", "0", "]", ",", "gen_features", ".", "shape", "[", "0", "]", ")", ",", "max_subset_size", ")", "\n", "t", "=", "0", "\n", "for", "_subset_idx", "in", "range", "(", "num_subsets", ")", ":", "\n", "        ", "x", "=", "gen_features", "[", "np", ".", "random", ".", "choice", "(", "gen_features", ".", "shape", "[", "0", "]", ",", "m", ",", "replace", "=", "False", ")", "]", "\n", "y", "=", "real_features", "[", "np", ".", "random", ".", "choice", "(", "real_features", ".", "shape", "[", "0", "]", ",", "m", ",", "replace", "=", "False", ")", "]", "\n", "a", "=", "(", "x", "@", "x", ".", "T", "/", "n", "+", "1", ")", "**", "3", "+", "(", "y", "@", "y", ".", "T", "/", "n", "+", "1", ")", "**", "3", "\n", "b", "=", "(", "x", "@", "y", ".", "T", "/", "n", "+", "1", ")", "**", "3", "\n", "t", "+=", "(", "a", ".", "sum", "(", ")", "-", "np", ".", "diag", "(", "a", ")", ".", "sum", "(", ")", ")", "/", "(", "m", "-", "1", ")", "-", "b", ".", "sum", "(", ")", "*", "2", "/", "m", "\n", "", "kid", "=", "t", "/", "num_subsets", "/", "m", "\n", "return", "float", "(", "kid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__": [[30, 41], ["super().__init__", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "G", ",", "G_kwargs", ",", "epsilon", ",", "space", ",", "sampling", ",", "crop", ",", "vgg16", ")", ":", "\n", "        ", "assert", "space", "in", "[", "'z'", ",", "'w'", "]", "\n", "assert", "sampling", "in", "[", "'full'", ",", "'end'", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "G", "=", "copy", ".", "deepcopy", "(", "G", ")", "\n", "self", ".", "G_kwargs", "=", "G_kwargs", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "vgg16", "=", "copy", ".", "deepcopy", "(", "vgg16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.PPLSampler.forward": [[42, 85], ["torch.randn().chunk", "perceptual_path_length.PPLSampler.G.named_buffers", "perceptual_path_length.PPLSampler.G.synthesis", "perceptual_path_length.PPLSampler.vgg16().chunk", "torch.rand", "perceptual_path_length.PPLSampler.G.mapping().chunk", "w0.lerp", "w0.lerp", "perceptual_path_length.slerp", "perceptual_path_length.slerp", "perceptual_path_length.PPLSampler.G.mapping().chunk", "name.endswith", "img.repeat.repeat.reshape().mean", "img.repeat.repeat.repeat", "torch.randn", "t.unsqueeze().unsqueeze", "t.unsqueeze", "buf.copy_", "torch.cat", "perceptual_path_length.PPLSampler.vgg16", "perceptual_path_length.PPLSampler.G.mapping", "t.unsqueeze().unsqueeze", "t.unsqueeze", "perceptual_path_length.PPLSampler.G.mapping", "torch.randn_like", "img.repeat.repeat.reshape", "t.unsqueeze", "torch.cat", "torch.cat", "t.unsqueeze", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.slerp", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.slerp", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "c", ")", ":", "\n", "# Generate random latents and interpolation t-values.", "\n", "        ", "t", "=", "torch", ".", "rand", "(", "[", "c", ".", "shape", "[", "0", "]", "]", ",", "device", "=", "c", ".", "device", ")", "*", "(", "1", "if", "self", ".", "sampling", "==", "'full'", "else", "0", ")", "\n", "z0", ",", "z1", "=", "torch", ".", "randn", "(", "[", "c", ".", "shape", "[", "0", "]", "*", "2", ",", "self", ".", "G", ".", "z_dim", "]", ",", "device", "=", "c", ".", "device", ")", ".", "chunk", "(", "2", ")", "\n", "\n", "# Interpolate in W or Z.", "\n", "if", "self", ".", "space", "==", "'w'", ":", "\n", "            ", "w0", ",", "w1", "=", "self", ".", "G", ".", "mapping", "(", "z", "=", "torch", ".", "cat", "(", "[", "z0", ",", "z1", "]", ")", ",", "c", "=", "torch", ".", "cat", "(", "[", "c", ",", "c", "]", ")", ")", ".", "chunk", "(", "2", ")", "\n", "wt0", "=", "w0", ".", "lerp", "(", "w1", ",", "t", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ")", "\n", "wt1", "=", "w0", ".", "lerp", "(", "w1", ",", "t", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "+", "self", ".", "epsilon", ")", "\n", "", "else", ":", "# space == 'z'", "\n", "            ", "zt0", "=", "slerp", "(", "z0", ",", "z1", ",", "t", ".", "unsqueeze", "(", "1", ")", ")", "\n", "zt1", "=", "slerp", "(", "z0", ",", "z1", ",", "t", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "epsilon", ")", "\n", "wt0", ",", "wt1", "=", "self", ".", "G", ".", "mapping", "(", "z", "=", "torch", ".", "cat", "(", "[", "zt0", ",", "zt1", "]", ")", ",", "c", "=", "torch", ".", "cat", "(", "[", "c", ",", "c", "]", ")", ")", ".", "chunk", "(", "2", ")", "\n", "\n", "# Randomize noise buffers.", "\n", "", "for", "name", ",", "buf", "in", "self", ".", "G", ".", "named_buffers", "(", ")", ":", "\n", "            ", "if", "name", ".", "endswith", "(", "'.noise_const'", ")", ":", "\n", "                ", "buf", ".", "copy_", "(", "torch", ".", "randn_like", "(", "buf", ")", ")", "\n", "\n", "# Generate images.", "\n", "", "", "img", "=", "self", ".", "G", ".", "synthesis", "(", "ws", "=", "torch", ".", "cat", "(", "[", "wt0", ",", "wt1", "]", ")", ",", "noise_mode", "=", "'const'", ",", "force_fp32", "=", "True", ",", "**", "self", ".", "G_kwargs", ")", "\n", "\n", "# Center crop.", "\n", "if", "self", ".", "crop", ":", "\n", "            ", "assert", "img", ".", "shape", "[", "2", "]", "==", "img", ".", "shape", "[", "3", "]", "\n", "c", "=", "img", ".", "shape", "[", "2", "]", "//", "8", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "c", "*", "3", ":", "c", "*", "7", ",", "c", "*", "2", ":", "c", "*", "6", "]", "\n", "\n", "# Downsample to 256x256.", "\n", "", "factor", "=", "self", ".", "G", ".", "img_resolution", "//", "256", "\n", "if", "factor", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "reshape", "(", "[", "-", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", "//", "factor", ",", "factor", ",", "img", ".", "shape", "[", "3", "]", "//", "factor", ",", "factor", "]", ")", ".", "mean", "(", "[", "3", ",", "5", "]", ")", "\n", "\n", "# Scale dynamic range from [-1,1] to [0,255].", "\n", "", "img", "=", "(", "img", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "if", "self", ".", "G", ".", "img_channels", "==", "1", ":", "\n", "            ", "img", "=", "img", ".", "repeat", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Evaluate differential LPIPS.", "\n", "", "lpips_t0", ",", "lpips_t1", "=", "self", ".", "vgg16", "(", "img", ",", "resize_images", "=", "False", ",", "return_lpips", "=", "True", ")", ".", "chunk", "(", "2", ")", "\n", "dist", "=", "(", "lpips_t0", "-", "lpips_t1", ")", ".", "square", "(", ")", ".", "sum", "(", "1", ")", "/", "self", ".", "epsilon", "**", "2", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.slerp": [[16, 26], ["a.norm", "b.norm", "torch.acos", "c.norm", "d.norm", "torch.cos", "torch.sin"], "function", ["None"], ["def", "slerp", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "a", "=", "a", "/", "a", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "b", "=", "b", "/", "b", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "d", "=", "(", "a", "*", "b", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "p", "=", "t", "*", "torch", ".", "acos", "(", "d", ")", "\n", "c", "=", "b", "-", "d", "*", "a", "\n", "c", "=", "c", "/", "c", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "d", "=", "a", "*", "torch", ".", "cos", "(", "p", ")", "+", "c", "*", "torch", ".", "sin", "(", "p", ")", "\n", "d", "=", "d", "/", "d", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.drboog_Lafite.metrics.perceptual_path_length.compute_ppl": [[88, 123], ["dnnlib.util.construct_class_by_name", "metric_utils.get_feature_detector", "perceptual_path_length.PPLSampler", "torch.jit.trace.eval().requires_grad_().to", "opts.progress.sub", "range", "opts.progress.sub.update", "[].cpu().numpy", "numpy.percentile", "numpy.percentile", "numpy.extract().mean", "float", "torch.zeros", "torch.jit.trace", "opts.progress.sub.update", "torch.from_numpy().pin_memory().to", "torch.jit.trace.", "range", "float", "torch.jit.trace.eval().requires_grad_", "dnnlib.util.construct_class_by_name.get_label", "sampler.clone", "[].cpu().numpy.append", "[].cpu", "numpy.extract", "numpy.random.randint", "range", "torch.from_numpy().pin_memory", "torch.distributed.broadcast", "numpy.logical_and", "torch.jit.trace.eval", "len", "torch.from_numpy", "torch.cat", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.drboog_Lafite.dnnlib.util.construct_class_by_name", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.get_feature_detector", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.sub", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.ProgressMonitor.update", "home.repos.pwc.inspect_result.drboog_Lafite.training.dataset.Dataset.get_label", "home.repos.pwc.inspect_result.drboog_Lafite.metrics.metric_utils.FeatureStats.append"], ["", "", "def", "compute_ppl", "(", "opts", ",", "num_samples", ",", "epsilon", ",", "space", ",", "sampling", ",", "crop", ",", "batch_size", ",", "jit", "=", "False", ")", ":", "\n", "    ", "dataset", "=", "dnnlib", ".", "util", ".", "construct_class_by_name", "(", "**", "opts", ".", "dataset_kwargs", ")", "\n", "vgg16_url", "=", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metrics/vgg16.pt'", "\n", "vgg16", "=", "metric_utils", ".", "get_feature_detector", "(", "vgg16_url", ",", "num_gpus", "=", "opts", ".", "num_gpus", ",", "rank", "=", "opts", ".", "rank", ",", "verbose", "=", "opts", ".", "progress", ".", "verbose", ")", "\n", "\n", "# Setup sampler.", "\n", "sampler", "=", "PPLSampler", "(", "G", "=", "opts", ".", "G", ",", "G_kwargs", "=", "opts", ".", "G_kwargs", ",", "epsilon", "=", "epsilon", ",", "space", "=", "space", ",", "sampling", "=", "sampling", ",", "crop", "=", "crop", ",", "vgg16", "=", "vgg16", ")", "\n", "sampler", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "if", "jit", ":", "\n", "        ", "c", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "opts", ".", "G", ".", "c_dim", "]", ",", "device", "=", "opts", ".", "device", ")", "\n", "sampler", "=", "torch", ".", "jit", ".", "trace", "(", "sampler", ",", "[", "c", "]", ",", "check_trace", "=", "False", ")", "\n", "\n", "# Sampling loop.", "\n", "", "dist", "=", "[", "]", "\n", "progress", "=", "opts", ".", "progress", ".", "sub", "(", "tag", "=", "'ppl sampling'", ",", "num_items", "=", "num_samples", ")", "\n", "for", "batch_start", "in", "range", "(", "0", ",", "num_samples", ",", "batch_size", "*", "opts", ".", "num_gpus", ")", ":", "\n", "        ", "progress", ".", "update", "(", "batch_start", ")", "\n", "c", "=", "[", "dataset", ".", "get_label", "(", "np", ".", "random", ".", "randint", "(", "len", "(", "dataset", ")", ")", ")", "for", "_i", "in", "range", "(", "batch_size", ")", "]", "\n", "c", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "c", ")", ")", ".", "pin_memory", "(", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "x", "=", "sampler", "(", "c", ")", "\n", "for", "src", "in", "range", "(", "opts", ".", "num_gpus", ")", ":", "\n", "            ", "y", "=", "x", ".", "clone", "(", ")", "\n", "if", "opts", ".", "num_gpus", ">", "1", ":", "\n", "                ", "torch", ".", "distributed", ".", "broadcast", "(", "y", ",", "src", "=", "src", ")", "\n", "", "dist", ".", "append", "(", "y", ")", "\n", "", "", "progress", ".", "update", "(", "num_samples", ")", "\n", "\n", "# Compute PPL.", "\n", "if", "opts", ".", "rank", "!=", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "", "dist", "=", "torch", ".", "cat", "(", "dist", ")", "[", ":", "num_samples", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lo", "=", "np", ".", "percentile", "(", "dist", ",", "1", ",", "interpolation", "=", "'lower'", ")", "\n", "hi", "=", "np", ".", "percentile", "(", "dist", ",", "99", ",", "interpolation", "=", "'higher'", ")", "\n", "ppl", "=", "np", ".", "extract", "(", "np", ".", "logical_and", "(", "dist", ">=", "lo", ",", "dist", "<=", "hi", ")", ",", "dist", ")", ".", "mean", "(", ")", "\n", "return", "float", "(", "ppl", ")", "\n", "\n"]]}