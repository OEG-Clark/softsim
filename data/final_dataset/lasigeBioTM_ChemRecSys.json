{"home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.semsimcalculus.calculate_sim_it1_it2": [[41, 73], ["database.check_if_pair_exist", "print", "str", "time.time", "ssmpy.get_id", "ssmpy.get_id", "ssmpy.ssm_resnik", "ssmpy.ssm_resnik", "ssmpy.ssm_lin", "ssmpy.ssm_lin", "ssmpy.ssm_jiang_conrath", "ssmpy.ssm_jiang_conrath", "time.time", "print", "database.insert_row", "sys.stdout.flush", "it1.item().astype", "it2.item().astype", "print", "it1.item", "it2.item"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.check_if_pair_exist", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.insert_row"], ["def", "calculate_sim_it1_it2", "(", "it1", ",", "it2", ",", "e1", ",", "name_prefix", ")", ":", "\n", "    ", "\"\"\"\n    Calculate similarity between it1 and it2 and insert in database\n    :param it1: entity 1 (id)\n    :param it2: entity 2 (id)\n    :param e1: ontology (id)\n    :param name_prefix: Prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    :return\n    \"\"\"", "\n", "\n", "if", "check_if_pair_exist", "(", "it1", ",", "it2", ")", "is", "False", ":", "\n", "\n", "        ", "if", "name_prefix", "==", "'HP_'", ":", "\n", "            ", "it2", "=", "'{:07d}'", ".", "format", "(", "it2", ")", "\n", "", "it2_", "=", "name_prefix", "+", "str", "(", "it2", ")", "\n", "# print(\"   \", it2_)", "\n", "try", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "e2", "=", "ssmpy", ".", "get_id", "(", "it2_", ")", "\n", "items_sim_resnik", "=", "ssmpy", ".", "ssm_resnik", "(", "e1", ",", "e2", ")", "\n", "items_sim_lin", "=", "ssmpy", ".", "ssm_lin", "(", "e1", ",", "e2", ")", "\n", "items_sim_jc", "=", "ssmpy", ".", "ssm_jiang_conrath", "(", "e1", ",", "e2", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"unique calc: \"", ",", "end", "-", "start", ")", "\n", "insert_row", "(", "it1", ".", "item", "(", ")", ".", "astype", "(", "int", ")", ",", "it2", ".", "item", "(", ")", ".", "astype", "(", "int", ")", ",", "items_sim_resnik", ",", "items_sim_lin", ",", "items_sim_jc", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "print", "(", "it1", ",", "\" or \"", ",", "it2", ",", "\" not found.\"", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "it1", ",", "it2", ",", "\" pair already exists\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.semsimcalculus.calculate_sim_it1_it2_test_gpu": [[77, 109], ["database.check_if_pair_exist", "print", "str", "ssmpy.get_id", "ssmpy.get_id", "ssmpy.ssm_resnik", "ssmpy.ssm_resnik", "ssmpy.ssm_lin", "ssmpy.ssm_lin", "ssmpy.ssm_jiang_conrath", "ssmpy.ssm_jiang_conrath", "database.insert_row", "sys.stdout.flush", "it1.item().astype", "it2.item().astype", "print", "it1.item", "it2.item"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.check_if_pair_exist", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.insert_row"], ["", "", "def", "calculate_sim_it1_it2_test_gpu", "(", "it1", ",", "e1", ",", "onto_ids", ",", "name_prefix", ")", ":", "\n", "    ", "\"\"\"\n    Calculate similarity between it1 and it2 and insert in database\n    :param it1: entity 1 (id)\n    :param e1: id of the entity 1\n    :param onto_ids:\n    :param name_prefix: Prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    :return: \n    \"\"\"", "\n", "for", "it2", "in", "onto_ids", ":", "\n", "        ", "if", "not", "check_if_pair_exist", "(", "it1", ",", "it2", ")", ":", "\n", "\n", "            ", "if", "name_prefix", "==", "'HP_'", ":", "\n", "                ", "it2", "=", "'{:07d}'", ".", "format", "(", "it2", ")", "\n", "\n", "", "it2_", "=", "name_prefix", "+", "str", "(", "it2", ")", "\n", "\n", "try", ":", "\n", "                ", "e2", "=", "ssmpy", ".", "get_id", "(", "it2_", ")", "\n", "items_sim_resnik", "=", "ssmpy", ".", "ssm_resnik", "(", "e1", ",", "e2", ")", "\n", "items_sim_lin", "=", "ssmpy", ".", "ssm_lin", "(", "e1", ",", "e2", ")", "\n", "items_sim_jc", "=", "ssmpy", ".", "ssm_jiang_conrath", "(", "e1", ",", "e2", ")", "\n", "insert_row", "(", "it1", ".", "item", "(", ")", ".", "astype", "(", "int", ")", ",", "it2", ".", "item", "(", ")", ".", "astype", "(", "int", ")", ",", "items_sim_resnik", ",", "items_sim_lin", ",", "items_sim_jc", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "print", "(", "it1", ",", "\" or \"", ",", "it2", ",", "\" not found.\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "it1", ",", "it2", ",", "\" pair already exists\"", ")", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.semsimcalculus.calculate_semantic_similarity": [[112, 150], ["cfg.getInstance", "ssmpy.semantic_base", "ssmpy.semantic_base", "print", "print", "len", "len", "print", "ssmpy.get_id", "ssmpy.get_id", "multiprocessing.Pool", "time.time", "mp.Pool.starmap_async().get", "time.time", "print", "mp.Pool.close", "print", "str", "str", "mp.Pool.starmap_async"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "", "", "def", "calculate_semantic_similarity", "(", "onto_ids", ":", "object", ",", "name_prefix", ":", "object", ",", "train", ":", "object", ")", "->", "object", ":", "\n", "    ", "\"\"\"\n    Calculate semantic similarity \n    :param onto_ids: list of ids (int)\n    :param name_prefix: Prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    :param train: list of train dataset\n    :return:\n    \"\"\"", "\n", "\n", "conf", "=", "cfg", ".", "getInstance", "(", ")", "\n", "\n", "ssmpy", ".", "semantic_base", "(", "conf", ".", "path_to_ontology", ")", "\n", "\n", "print", "(", "\"test size: \"", ",", "len", "(", "onto_ids", ")", ")", "\n", "print", "(", "\"train size: \"", ",", "len", "(", "train", ")", ")", "\n", "\n", "count", "=", "0", "\n", "for", "it1", "in", "onto_ids", ":", "\n", "        ", "if", "name_prefix", "==", "'HP_'", ":", "\n", "            ", "it1_", "=", "'{:07d}'", ".", "format", "(", "it1", ")", "\n", "it1_", "=", "name_prefix", "+", "str", "(", "it1", ")", "\n", "", "else", ":", "\n", "            ", "it1_", "=", "name_prefix", "+", "str", "(", "it1", ")", "\n", "", "print", "(", "it1_", ")", "\n", "e1", "=", "ssmpy", ".", "get_id", "(", "it1_", ")", "\n", "# pool = mp.Pool(mp.cpu_count())", "\n", "pool", "=", "mp", ".", "Pool", "(", "30", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "pool", ".", "starmap_async", "(", "calculate_sim_it1_it2", ",", "\n", "[", "(", "it1", ",", "it2", ",", "e1", ",", "conf", ".", "host", ",", "conf", ".", "user", ",", "conf", ".", "password", ",", "conf", ".", "database", ")", "for", "it2", "in", "train", "]", ")", ".", "get", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "end", "-", "start", ")", "\n", "pool", ".", "close", "(", ")", "\n", "count", "+=", "1", "\n", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.semsimcalculus.calculate_semantic_similarity_gpu": [[153, 182], ["cfg.getInstance", "ssmpy.semantic_base", "ssmpy.semantic_base", "print", "ssmpy.get_id", "ssmpy.get_id", "semsimcalculus.calculate_sim_it1_it2_test_gpu", "numpy.where", "numpy.delete", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.semsimcalculus.calculate_sim_it1_it2_test_gpu"], ["", "", "def", "calculate_semantic_similarity_gpu", "(", "onto_ids", ",", "name_prefix", ")", ":", "\n", "    ", "\"\"\"\n    Calculate semantic similarity \n    :param onto_ids: list of ids (int)\n    :param name_prefix: Prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    :return:\n    \"\"\"", "\n", "\n", "conf", "=", "cfg", ".", "getInstance", "(", ")", "\n", "\n", "ssmpy", ".", "semantic_base", "(", "conf", ".", "path_to_ontology", ")", "\n", "\n", "count", "=", "0", "\n", "for", "it1", "in", "onto_ids", ":", "\n", "        ", "if", "name_prefix", "==", "'HP_'", ":", "\n", "            ", "it1", "=", "f'{s:07d}'", "+", "str", "(", "it1", ")", "\n", "", "it1_", "=", "name_prefix", "+", "str", "(", "it1", ")", "\n", "print", "(", "it1_", ")", "\n", "e1", "=", "ssmpy", ".", "get_id", "(", "it1_", ")", "\n", "\n", "# pool = mp.Pool(mp.cpu_count())", "\n", "\n", "calculate_sim_it1_it2_test_gpu", "(", "it1", ",", "e1", ",", "onto_ids", ",", "name_prefix", ")", "\n", "\n", "mask", "=", "np", ".", "where", "(", "onto_ids", "==", "it1", ")", "\n", "onto_ids", "=", "np", ".", "delete", "(", "onto_ids", ",", "mask", ")", "\n", "count", "+=", "1", "\n", "print", "(", "count", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_relevants_by_user": [[36, 43], ["None"], "function", ["None"], ["def", "get_relevants_by_user", "(", "df", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"\n    Get relevants user accordling some threshold\n    :param df: pandas DataFrame\n    :param threshold: minimum value in the ontology\n    \"\"\"", "\n", "return", "df", "[", "df", ".", "rating", ">=", "threshold", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_top_n": [[47, 56], ["items_scores.sort_values.sort_values", "items_scores.sort_values.head"], "function", ["None"], ["", "def", "get_top_n", "(", "items_scores", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    Get top@k\n    :param items_scores: \n    :param n: n for top@k\n    :return First n items scores\n    \"\"\"", "\n", "items_scores", "=", "items_scores", ".", "sort_values", "(", "by", "=", "[", "'score'", "]", ",", "ascending", "=", "False", ")", "\n", "return", "items_scores", ".", "head", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.precision": [[61, 64], ["numpy.isin", "len", "len"], "function", ["None"], ["", "def", "precision", "(", "recomendations", ",", "relevant", ")", ":", "\n", "    ", "mask", "=", "np", ".", "isin", "(", "recomendations", ",", "relevant", ")", "\n", "return", "(", "len", "(", "recomendations", "[", "mask", "]", ")", "/", "len", "(", "recomendations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.recall": [[69, 75], ["numpy.isin", "len", "len", "len"], "function", ["None"], ["", "def", "recall", "(", "recomendations", ",", "relevant", ")", ":", "\n", "    ", "mask", "=", "np", ".", "isin", "(", "recomendations", ",", "relevant", ")", "\n", "if", "len", "(", "relevant", "!=", "0", ")", ":", "\n", "        ", "return", "(", "len", "(", "recomendations", "[", "mask", "]", ")", "/", "len", "(", "relevant", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.fmeasure": [[80, 85], ["None"], "function", ["None"], ["", "", "def", "fmeasure", "(", "precision", ",", "recall", ")", ":", "\n", "    ", "if", "precision", "==", "0", "and", "recall", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "(", "2", "*", "(", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_real_item_rating": [[90, 94], ["rank[].map().fillna", "rank[].map", "user_ratings.set_index"], "function", ["None"], ["", "", "def", "get_real_item_rating", "(", "rank", ",", "user_ratings", ")", ":", "\n", "# map the items to the rating given by the user", "\n", "    ", "rank", "[", "\"rating\"", "]", "=", "rank", "[", "\"item\"", "]", ".", "map", "(", "user_ratings", ".", "set_index", "(", "'index_item'", ")", "[", "\"rating\"", "]", ")", ".", "fillna", "(", "0", ")", "\n", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.dcg_at_k": [[96, 106], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "0", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "(", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.ndcg_at_k": [[111, 116], ["recommender_evaluation.dcg_at_k", "sorted", "recommender_evaluation.dcg_at_k"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.dcg_at_k", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "method", "=", "0", ")", ":", "\n", "    ", "dcg_max", "=", "dcg_at_k", "(", "sorted", "(", "r", ",", "reverse", "=", "True", ")", ",", "k", ",", "method", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "(", "dcg_at_k", "(", "r", ",", "k", ",", "method", ")", "/", "dcg_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.reciprocal_rank": [[121, 128], ["len", "rs.to_numpy().nonzero", "rs.to_numpy"], "function", ["None"], ["", "def", "reciprocal_rank", "(", "rs", ")", ":", "\n", "    ", "if", "len", "(", "rs", "[", "rs", "!=", "0", "]", ">", "0", ")", ":", "\n", "        ", "first_nonzero_position", "=", "rs", ".", "to_numpy", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "[", "0", "]", "+", "1", "\n", "# print(first_nonzero_position)", "\n", "return", "(", "1", "/", "first_nonzero_position", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.false_positive_rate": [[133, 150], ["numpy.isin", "numpy.isin", "len", "len", "len"], "function", ["None"], ["", "", "def", "false_positive_rate", "(", "list_of_test_items", ",", "relevants", ",", "rank", ")", ":", "\n", "    ", "\"\"\"\n\n    :param list_of_test_items: all candidates items to be recommended\n    :param relevants: all relevants items in the test set\n    :param rank: listed ranked by the algorithm\n    :return: false positive rate\n    \"\"\"", "\n", "\n", "mask", "=", "np", ".", "isin", "(", "list_of_test_items", ",", "relevants", ")", "\n", "all_negatives", "=", "list_of_test_items", "[", "~", "mask", "]", "\n", "mask2", "=", "np", ".", "isin", "(", "rank", ".", "item", ",", "relevants", ")", "\n", "fp", "=", "rank", ".", "item", "[", "~", "mask2", "]", "\n", "if", "len", "(", "all_negatives", ")", "!=", "0", ":", "\n", "        ", "return", "(", "len", "(", "fp", ")", "/", "len", "(", "all_negatives", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_auc": [[155, 167], ["recall.append", "fpr.append", "numpy.sum", "sklearn.metrics.auc", "numpy.array"], "function", ["None"], ["", "", "def", "get_auc", "(", "recall", ",", "fpr", ")", ":", "\n", "# add point 1,1", "\n", "    ", "recall", ".", "append", "(", "1", ")", "\n", "fpr", ".", "append", "(", "1", ")", "\n", "\n", "if", "np", ".", "sum", "(", "np", ".", "array", "(", "fpr", ")", ")", "==", "0", ":", "\n", "        ", "auc", "=", "1", "\n", "", "else", ":", "\n", "        ", "auc", "=", "metrics", ".", "auc", "(", "fpr", ",", "recall", ")", "\n", "", "del", "recall", "[", "-", "1", "]", "\n", "del", "fpr", "[", "-", "1", "]", "\n", "return", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.auc_": [[169, 179], ["range", "numpy.array", "sklearn.metrics.auc", "auc_list.append"], "function", ["None"], ["", "def", "auc_", "(", "recall", ",", "fpr", ",", "max_n", ")", ":", "\n", "    ", "auc_list", "=", "[", "]", "\n", "\n", "for", "a", "in", "range", "(", "1", ",", "max_n", ")", ":", "\n", "        ", "recall_", "=", "recall", "[", "0", ":", "a", "+", "1", "]", "\n", "fpr_", "=", "fpr", "[", "0", ":", "a", "+", "1", "]", "\n", "auc", "=", "metrics", ".", "auc", "(", "fpr_", ",", "recall_", ")", "\n", "auc_list", ".", "append", "(", "auc", ")", "\n", "# print(auc_list)", "\n", "", "return", "np", ".", "array", "(", "auc_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.rmse": [[184, 186], ["predict.rmse"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.rmse"], ["", "def", "rmse", "(", "predictions_list", ",", "real_list", ")", ":", "\n", "    ", "return", "predict", ".", "rmse", "(", "predictions_list", ",", "real_list", ",", "missing", "=", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.mae": [[191, 193], ["predict.mae"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.mae"], ["", "def", "mae", "(", "predictions_list", ",", "real_list", ")", ":", "\n", "    ", "return", "predict", ".", "mae", "(", "predictions_list", ",", "real_list", ",", "missing", "=", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.normalize_between_range": [[198, 200], ["array.min", "array.max", "array.min"], "function", ["None"], ["", "def", "normalize_between_range", "(", "array", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "(", "(", "(", "b", "-", "a", ")", "*", "(", "(", "array", "-", "array", ".", "min", "(", ")", ")", "/", "(", "array", ".", "max", "(", ")", "-", "array", ".", "min", "(", ")", ")", ")", ")", "+", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.topk_metrics_sum": [[205, 217], ["pathlib.Path", "pathlib.Path.is_file", "pandas.read_csv", "numpy.array", "numpy.add", "numpy.savetxt", "numpy.array", "numpy.savetxt", "numpy.array", "str", "str", "str"], "function", ["None"], ["", "def", "topk_metrics_sum", "(", "P", ",", "R", ",", "F", ",", "rr", ",", "nDCG", ",", "n", ")", ":", "\n", "    ", "my_file", "=", "Path", "(", "\"temp\"", "+", "str", "(", "n", ")", "+", "\".csv\"", ")", "\n", "if", "my_file", ".", "is_file", "(", ")", ":", "\n", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "my_file", ",", "sep", "=", "','", ",", "header", "=", "None", ")", "\n", "df_array", "=", "np", ".", "array", "(", "df", ")", "\n", "df_array", "[", "0", "]", "=", "np", ".", "add", "(", "np", ".", "array", "(", "[", "P", ",", "R", ",", "F", ",", "rr", ",", "nDCG", "]", ")", ",", "df_array", "[", "0", "]", ")", "\n", "#        print(df_array)", "\n", "np", ".", "savetxt", "(", "\"temp\"", "+", "str", "(", "n", ")", "+", "\".csv\"", ",", "df_array", ",", "delimiter", "=", "\",\"", ")", "\n", "", "else", ":", "\n", "        ", "line", "=", "np", ".", "array", "(", "[", "[", "P", ",", "R", ",", "F", ",", "rr", ",", "nDCG", "]", "]", ")", "\n", "np", ".", "savetxt", "(", "\"temp\"", "+", "str", "(", "n", ")", "+", "\".csv\"", ",", "line", ",", "delimiter", "=", "\",\"", ")", "\n", "# line.to_csv(\"mlData/temp\" + str(n) + \".csv\")", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.get_shuffle_users": [[31, 41], ["numpy.array", "numpy.random.shuffle", "dataset.index_user.unique"], "function", ["None"], ["def", "get_shuffle_users", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    shuffle the array of users\n    :param dataset: pandas dataframe\n    :return: array of shuffled users\n    \"\"\"", "\n", "users", "=", "np", ".", "array", "(", "dataset", ".", "index_user", ".", "unique", "(", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "users", ")", "\n", "# print(\"Users shape: \", users.shape)", "\n", "return", "users", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.get_shuffle_items": [[44, 55], ["numpy.array", "numpy.random.shuffle", "dataset.index_item.unique"], "function", ["None"], ["", "def", "get_shuffle_items", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    shuffle the array of items\n    :param dataset: pandas dataframe\n    :return: array of shuffled items\n    \"\"\"", "\n", "items", "=", "np", ".", "array", "(", "dataset", ".", "index_item", ".", "unique", "(", ")", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "items", ")", "\n", "# print(\"Items shape: \",  items.shape)", "\n", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.divide_users_train_test": [[58, 60], ["numpy.array"], "function", ["None"], ["", "def", "divide_users_train_test", "(", "users", ",", "min_val", ",", "max_val", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "users", ")", "[", "min_val", ":", "max_val", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.divide_items_train_test": [[63, 65], ["numpy.array"], "function", ["None"], ["", "def", "divide_items_train_test", "(", "items", ",", "min_val", ",", "max_val", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "items", ")", "[", "min_val", ":", "max_val", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean": [[68, 74], ["None"], "function", ["None"], ["", "def", "calculate_dictionary_mean", "(", "dict", ",", "division", ")", ":", "\n", "\n", "    ", "for", "i", "in", "dict", ":", "\n", "        ", "dict", "[", "i", "]", "=", "dict", "[", "i", "]", "/", "division", "\n", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.prepare_train_test": [[77, 93], ["ratings.index_user.isin", "ratings.index_item.isin", "ratings.index_user.isin", "ratings.index_item.isin"], "function", ["None"], ["", "def", "prepare_train_test", "(", "ratings", ",", "test_users", ",", "test_items", ")", ":", "\n", "    ", "\"\"\"\n    Serarates the test and the train from the whole dataset\n\n    :param ratings: pandas dataframe of user, item, rating\n    :param test_users: list of users IDs to be used as test\n    :param test_items: list of items IDs to be used as test\n    :return: pd DataFrame test_set, pd DataFrame train_set\n    \"\"\"", "\n", "\n", "test_set", "=", "ratings", "[", "(", "ratings", ".", "index_user", ".", "isin", "(", "test_users", ")", ")", "&", "(", "ratings", ".", "index_item", ".", "isin", "(", "test_items", ")", ")", "]", "\n", "#train_set = ratings.drop(", "\n", "#    ratings[(ratings.user.isin(test_users)) & (ratings.item.isin(test_items))].index)  # train", "\n", "train_set", "=", "ratings", "[", "~", "(", "(", "ratings", ".", "index_user", ".", "isin", "(", "test_users", ")", ")", "&", "(", "ratings", ".", "index_item", ".", "isin", "(", "test_items", ")", ")", ")", "]", "\n", "\n", "return", "test_set", ",", "train_set", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.check_items_in_model": [[96, 109], ["numpy.isin", "len", "len", "numpy.isin", "print"], "function", ["None"], ["", "def", "check_items_in_model", "(", "train_items", ",", "test_items", ")", ":", "\n", "    ", "check", "=", "True", "\n", "mask", "=", "np", ".", "isin", "(", "train_items", ",", "test_items", ")", "\n", "\n", "if", "len", "(", "train_items", "[", "mask", "]", ")", "!=", "len", "(", "test_items", ")", ":", "\n", "        ", "check", "=", "False", "\n", "mask2", "=", "np", ".", "isin", "(", "test_items", ",", "train_items", ")", "\n", "\n", "print", "(", "\"Items in model: \"", ",", "test_items", "[", "~", "mask2", "]", ")", "\n", "\n", "test_items", "=", "test_items", "[", "mask2", "]", "\n", "#print(check)", "\n", "", "return", "test_items", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.add_dict": [[112, 120], ["dict1.get", "dict2.get", "set", "set"], "function", ["None"], ["", "def", "add_dict", "(", "dict1", ",", "dict2", ",", "count_cv", ",", "count_cv_items", ")", ":", "\n", "\n", "    ", "if", "count_cv", "==", "0", "and", "count_cv_items", "==", "0", ":", "\n", "        ", "dict1", "=", "dict2", "\n", "", "else", ":", "\n", "        ", "dict1", "=", "{", "key", ":", "dict1", ".", "get", "(", "key", ",", "0", ")", "+", "dict2", ".", "get", "(", "key", ",", "0", ")", "for", "key", "in", "\n", "set", "(", "dict1", ")", "|", "set", "(", "dict2", ")", "}", "\n", "", "return", "dict1", "", "", ""]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.dataset.upload_dataset": [[30, 56], ["pandas.read_csv", "len", "matrix[].str.replace().astype", "matrix[].astype().str.startswith", "matrix[].str.replace", "matrix[].astype"], "function", ["None"], ["def", "upload_dataset", "(", "csv_path", ",", "name_prefix", ")", ":", "\n", "    ", "'''\n\n    :param csv_path: <user, item, rating, ... > csv file\n    :param name_prefix: prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    :return: user, item, rating pandas dataframe\n    '''", "\n", "\n", "matrix", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "sep", "=", "','", ")", "\n", "\n", "if", "(", "len", "(", "matrix", ".", "columns", ")", ">", "3", ")", ":", "\n", "        ", "matrix", ".", "columns", "=", "[", "'user_name'", ",", "'item'", ",", "'rating'", ",", "'user'", ",", "'item_label'", "]", "\n", "matrix", "=", "matrix", "[", "[", "'user'", ",", "'item'", ",", "'rating'", "]", "]", "\n", "", "else", ":", "\n", "        ", "matrix", ".", "columns", "=", "[", "'user'", ",", "'item'", ",", "'rating'", "]", "\n", "\n", "", "if", "(", "matrix", ".", "dtypes", "[", "'item'", "]", "==", "np", ".", "object", ")", ":", "\n", "# filter rows for specific ontology", "\n", "        ", "matrix", "=", "matrix", "[", "matrix", "[", "'item'", "]", ".", "astype", "(", "str", ")", ".", "str", ".", "startswith", "(", "name_prefix", ")", "]", "\n", "# filter by number of users", "\n", "#matrix = matrix.groupby( 'user' ).filter( lambda x: len( x ) > 19 )", "\n", "# remove acronym of ontology and convert as int", "\n", "matrix", "[", "'item'", "]", "=", "matrix", "[", "'item'", "]", ".", "str", ".", "replace", "(", "name_prefix", ",", "''", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "return", "matrix", "", "", ""]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.data.three_columns_matrix_to_csr": [[35, 45], ["print", "scipy.sparse.coo_matrix", "len", "len", "matrix.index_item.unique", "matrix.index_user.unique"], "function", ["None"], ["def", "three_columns_matrix_to_csr", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"\n\n    :param matrix: pandas dataframe of user, item, rating\n    :return: (item, user) rating sparse matrix\n    \"\"\"", "\n", "\n", "print", "(", "len", "(", "matrix", ".", "index_item", ".", "unique", "(", ")", ")", ",", "len", "(", "matrix", ".", "index_user", ".", "unique", "(", ")", ")", ")", "\n", "ratings_sparse", "=", "coo_matrix", "(", "(", "matrix", ".", "rating", ",", "(", "matrix", ".", "index_item", ",", "matrix", ".", "index_user", ")", ")", ")", "\n", "return", "ratings_sparse", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.data.save_final_data": [[48, 58], ["pandas.DataFrame.from_dict", "df.reindex.reindex", "df.reindex.to_csv", "sorted"], "function", ["None"], ["", "def", "save_final_data", "(", "data", ",", "path_csv", ")", ":", "\n", "    ", "\"\"\"\n    Save data to csv file\n    :param data: pandas Dataframe with columns <user, item, rating>\n    :param path_csv: path to the csv file\n    :return\n    \"\"\"", "\n", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "data", ")", "\n", "df", "=", "df", ".", "reindex", "(", "sorted", "(", "df", ".", "columns", ")", ",", "axis", "=", "1", ")", "\n", "df", ".", "to_csv", "(", "path_csv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.data.create_directory": [[61, 68], ["pathlib.Path().mkdir", "pathlib.Path"], "function", ["None"], ["", "def", "create_directory", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Create directory to csv file\n    :param path: path to save data\n    :return\n    \"\"\"", "\n", "return", "Path", "(", "path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.data.id_to_index": [[71, 89], ["numpy.arange", "numpy.arange", "pandas.DataFrame", "pandas.DataFrame", "df[].map().fillna", "df[].map().fillna", "len", "len", "df.item.unique", "df.user.unique", "df.item.unique", "df.user.unique", "df[].map", "df[].map", "pd.DataFrame.set_index", "pd.DataFrame.set_index"], "function", ["None"], ["", "def", "id_to_index", "(", "df", ")", ":", "\n", "    ", "\"\"\"\n    maps the values to the lowest consecutive values\n    :param df: pandas Dataframe with columns user, item, rating\n    :return: pandas Dataframe with the columns index_item and index_user\n    \"\"\"", "\n", "index_item", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "df", ".", "item", ".", "unique", "(", ")", ")", ")", "\n", "index_user", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "df", ".", "user", ".", "unique", "(", ")", ")", ")", "\n", "\n", "df_item_index", "=", "pd", ".", "DataFrame", "(", "df", ".", "item", ".", "unique", "(", ")", ",", "columns", "=", "[", "\"item\"", "]", ")", "\n", "df_item_index", "[", "\"new_index\"", "]", "=", "index_item", "\n", "df_user_index", "=", "pd", ".", "DataFrame", "(", "df", ".", "user", ".", "unique", "(", ")", ",", "columns", "=", "[", "\"user\"", "]", ")", "\n", "df_user_index", "[", "\"new_index\"", "]", "=", "index_user", "\n", "\n", "df", "[", "\"index_item\"", "]", "=", "df", "[", "\"item\"", "]", ".", "map", "(", "df_item_index", ".", "set_index", "(", "'item'", ")", "[", "\"new_index\"", "]", ")", ".", "fillna", "(", "0", ")", "\n", "df", "[", "\"index_user\"", "]", "=", "df", "[", "\"user\"", "]", ".", "map", "(", "df_user_index", ".", "set_index", "(", "'user'", ")", "[", "\"new_index\"", "]", ")", ".", "fillna", "(", "0", ")", "\n", "\n", "return", "df", ",", "df_item_index", ",", "df_user_index", "\n", "", ""]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance": [[30, 63], ["configargparse.ArgParser", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "configargparse.ArgParser.add", "myconfiguration.MyConfiguration", "configargparse.ArgParser.parse_args"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "getInstance", "(", ")", "->", "object", ":", "\n", "        ", "\"\"\" Static access method. \"\"\"", "\n", "if", "MyConfiguration", ".", "__instance", "is", "None", ":", "\n", "            ", "p", "=", "configargparse", ".", "ArgParser", "(", "default_config_files", "=", "[", "'../config/config.ini'", "]", ")", "\n", "\n", "p", ".", "add", "(", "'-mc'", ",", "'--my-config'", ",", "is_config_file", "=", "True", ",", "help", "=", "'alternative config file path'", ")", "\n", "\n", "p", ".", "add", "(", "\"-ds\"", ",", "\"--path_to_dataset\"", ",", "required", "=", "False", ",", "help", "=", "\"path to dataset\"", ",", "type", "=", "str", ")", "\n", "\n", "p", ".", "add", "(", "\"-cv\"", ",", "\"--cv\"", ",", "required", "=", "False", ",", "help", "=", "\"cross validation folds\"", ",", "\n", "type", "=", "int", ")", "\n", "\n", "p", ".", "add", "(", "\"-k\"", ",", "\"--topk\"", ",", "required", "=", "False", ",", "help", "=", "\"k for topk\"", ",", "type", "=", "int", ")", "\n", "p", ".", "add", "(", "\"-n\"", ",", "\"--n\"", ",", "required", "=", "False", ",", "help", "=", "\"n most similar items\"", ",", "type", "=", "int", ")", "\n", "\n", "p", ".", "add", "(", "\"-host\"", ",", "\"--host\"", ",", "required", "=", "False", ",", "help", "=", "\"db host\"", ",", "type", "=", "str", ")", "\n", "p", ".", "add", "(", "\"-user\"", ",", "\"--user\"", ",", "required", "=", "False", ",", "help", "=", "\"db user\"", ",", "type", "=", "str", ")", "\n", "p", ".", "add", "(", "\"-pwd\"", ",", "\"--password\"", ",", "required", "=", "False", ",", "help", "=", "\"db password\"", ",", "type", "=", "str", ")", "\n", "p", ".", "add", "(", "\"-db_name\"", ",", "\"--database\"", ",", "required", "=", "False", ",", "help", "=", "\"db name\"", ",", "type", "=", "str", ")", "\n", "\n", "p", ".", "add", "(", "\"-owl\"", ",", "\"--path_to_owl\"", ",", "required", "=", "False", ",", "help", "=", "\"path to owl ontology\"", ",", "type", "=", "str", ")", "\n", "p", ".", "add", "(", "\"-db_onto\"", ",", "\"--path_to_ontology_db\"", ",", "required", "=", "False", ",", "help", "=", "\"path to ontology db\"", ",", "type", "=", "str", ")", "\n", "\n", "p", ".", "add", "(", "\"-sim_metric\"", ",", "\"--similarity_metric\"", ",", "required", "=", "False", ",", "help", "=", "\"similarity metric acronym db\"", ",", "type", "=", "str", ")", "\n", "\n", "p", ".", "add", "(", "\"-prefix\"", ",", "\"--items_prefix\"", ",", "required", "=", "False", ",", "help", "=", "\"items prefix\"", ",", "type", "=", "str", ")", "\n", "p", ".", "add", "(", "\"-n_split\"", ",", "\"--n_split_dataset\"", ",", "required", "=", "False", ",", "help", "=", "\"number to split the list of entities\"", ",", "\n", "type", "=", "int", ")", "\n", "\n", "MyConfiguration", "(", "p", ".", "parse_args", "(", ")", ")", "\n", "\n", "", "return", "MyConfiguration", ".", "__instance", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.__init__": [[64, 92], ["Exception"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Virtually private constructor.\n        \"\"\"", "\n", "if", "MyConfiguration", ".", "__instance", "is", "not", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"This class is a singleton!\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset", "=", "options", ".", "path_to_dataset", "\n", "\n", "self", ".", "cv", "=", "options", ".", "cv", "\n", "self", ".", "topk", "=", "options", ".", "topk", "\n", "self", ".", "n", "=", "options", ".", "n", "\n", "\n", "self", ".", "host", "=", "options", ".", "host", "\n", "self", ".", "user", "=", "options", ".", "user", "\n", "self", ".", "password", "=", "options", ".", "password", "\n", "self", ".", "database", "=", "options", ".", "database", "\n", "\n", "self", ".", "path_to_owl", "=", "options", ".", "path_to_owl", "\n", "self", ".", "path_to_ontology", "=", "options", ".", "path_to_ontology_db", "\n", "\n", "self", ".", "sim_metric", "=", "options", ".", "similarity_metric", "\n", "\n", "self", ".", "n_split", "=", "options", ".", "n_split_dataset", "\n", "self", ".", "item_prefix", "=", "options", ".", "items_prefix", "\n", "\n", "", "MyConfiguration", ".", "__instance", "=", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.recommendations": [[44, 47], ["train_data.T.tocsr", "model.rank_items"], "function", ["None"], ["def", "recommendations", "(", "model", ",", "train_data", ",", "test_items", ",", "user", ")", ":", "\n", "    ", "user_items", "=", "train_data", ".", "T", ".", "tocsr", "(", ")", "# user, item, rating", "\n", "return", "model", ".", "rank_items", "(", "user", ",", "user_items", ",", "test_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_original_id_to_system_id": [[50, 62], ["item_score.rename", "iscore_ontology[].map().fillna", "cfg.getInstance", "iscore_ontology[].map", "original_item_id.set_index"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "map_original_id_to_system_id", "(", "item_score", ",", "original_item_id", ")", ":", "\n", "    ", "\"\"\"\n    map the original id to the system ids\n    :param item_score:\n    :param original_item_id:\n    :return:\n    \"\"\"", "\n", "name_prefix", "=", "cfg", ".", "getInstance", "(", ")", ".", "item_prefix", "[", ":", "-", "1", "]", "\n", "iscore_ontology", "=", "item_score", ".", "rename", "(", "columns", "=", "{", "\"item\"", ":", "\"item_\"", "+", "name_prefix", "}", ")", "\n", "iscore_ontology", "[", "\"item\"", "]", "=", "iscore_ontology", "[", "\"item_\"", "+", "name_prefix", "]", ".", "map", "(", "\n", "original_item_id", ".", "set_index", "(", "'item'", ")", "[", "\"new_index\"", "]", ")", ".", "fillna", "(", "0", ")", "\n", "return", "iscore_ontology", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_system_id_to_original_id": [[65, 76], ["item_score[].map().fillna", "cfg.getInstance", "item_score[].map", "original_item_id.set_index"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "map_system_id_to_original_id", "(", "item_score", ",", "original_item_id", ")", ":", "\n", "    ", "\"\"\"\n    map the id to the original ids\n    :param item_score:\n    :param original_item_id:\n    :return:\n    \"\"\"", "\n", "name_prefix", "=", "cfg", ".", "getInstance", "(", ")", ".", "item_prefix", "[", ":", "-", "1", "]", "\n", "item_score", "[", "\"item_\"", "+", "name_prefix", "]", "=", "item_score", "[", "\"item\"", "]", ".", "map", "(", "\n", "original_item_id", ".", "set_index", "(", "'new_index'", ")", "[", "\"item\"", "]", ")", ".", "fillna", "(", "0", ")", "\n", "return", "item_score", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.select_metric": [[79, 96], ["item_score.rename.groupby().apply", "item_score.rename.rename", "item_score.rename.item.astype", "item_score.rename.groupby", "x.sort_values().head().mean", "x.sort_values().head", "x.sort_values", "cfg.getInstance"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "select_metric", "(", "scores_by_item", ",", "metric", ")", ":", "\n", "    ", "\"\"\"\n    select the column with the metric to use\n    :param scores_by_item: pd DataFrame with all compounds and metrics\n    :param metric: metric to select to calculate the mean of the similarities\n    :return: pd DataFrame with columns item, score\n    \"\"\"", "\n", "item_score", "=", "scores_by_item", "[", "[", "'comp_1'", ",", "metric", "]", "]", "\n", "\n", "# item_score = item_score.groupby(['comp_1']).sum().reset_index().sort_values(metric, ascending=False).head(5).mean()", "\n", "item_score", "=", "item_score", ".", "groupby", "(", "'comp_1'", ")", ".", "apply", "(", "\n", "lambda", "x", ":", "x", ".", "sort_values", "(", "(", "metric", ")", ",", "ascending", "=", "False", ")", ".", "head", "(", "cfg", ".", "getInstance", "(", ")", ".", "n", ")", ".", "mean", "(", ")", ")", "\n", "\n", "item_score", "=", "item_score", ".", "rename", "(", "columns", "=", "{", "'comp_1'", ":", "'item'", ",", "metric", ":", "'score'", "}", ")", "\n", "item_score", ".", "item", "=", "item_score", ".", "item", ".", "astype", "(", "int", ")", "\n", "\n", "return", "item_score", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.onto_algorithm": [[99, 125], ["train_ratings_for_t_us.item.unique", "algorithms.get_score_by_item", "len", "algorithms.select_metric", "algorithms.select_metric", "algorithms.select_metric"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_item", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.select_metric", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.select_metric", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.select_metric"], ["", "def", "onto_algorithm", "(", "train_ratings_for_t_us", ",", "test_items_onto_id", ",", "metric", ")", ":", "\n", "    ", "\"\"\"\n\n    :param train_ratings_for_t_us:\n    :param test_items_onto_id:\n    :param metric:\n    :return: pandas dataframe: columns = item, score (item with onto_id)\n    \"\"\"", "\n", "\n", "# get just the IDs of the items in the train set", "\n", "train_items_for_t_us", "=", "train_ratings_for_t_us", ".", "item", ".", "unique", "(", ")", "\n", "#training items for this user to be used for finding the similarity", "\n", "# get the score for each item in the test set", "\n", "scores_by_item", "=", "get_score_by_item", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", "\n", "if", "len", "(", "scores_by_item", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "iscore_lin", ",", "iscore_resnik", ",", "iscore_jc", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "metric", "in", "(", "'sim_lin'", ",", "'all'", ")", ":", "\n", "        ", "iscore_lin", "=", "select_metric", "(", "scores_by_item", ",", "'sim_lin'", ")", "\n", "", "if", "metric", "in", "(", "'sim_resnik'", ",", "'all'", ")", ":", "\n", "        ", "iscore_resnik", "=", "select_metric", "(", "scores_by_item", ",", "'sim_resnik'", ")", "\n", "", "if", "metric", "in", "(", "'sim_jc'", ",", "'all'", ")", ":", "\n", "        ", "iscore_jc", "=", "select_metric", "(", "scores_by_item", ",", "'sim_jc'", ")", "\n", "\n", "", "return", "iscore_lin", ",", "iscore_resnik", ",", "iscore_jc", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics": [[128, 176], ["range", "cfg.getInstance", "recommender_evaluation.get_top_n", "recommender_evaluation.get_top_n.item.astype", "recommender_evaluation.false_positive_rate", "np.array().astype", "recommender_evaluation.precision", "recommender_evaluation.recall", "recommender_evaluation.fmeasure", "recommender_evaluation.reciprocal_rank", "user_r.append", "user_fpr.append", "recommender_evaluation.ndcg_at_k", "recommender_evaluation.get_auc", "recommender_evaluation.get_real_item_rating", "np.array", "np.array", "len", "metrics_dict.update", "np.array", "np.array", "metrics_dict.update", "np.array", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_top_n", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.false_positive_rate", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.precision", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.recall", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.fmeasure", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.reciprocal_rank", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.ndcg_at_k", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_auc", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_real_item_rating"], ["", "def", "all_evaluation_metrics", "(", "item_score", ",", "ratings_t_us", ",", "test_items", ",", "relevant", ",", "metrics_dict", ")", ":", "\n", "    ", "\"\"\"\n    calculate the top k (size of the list of recommendations) for all metrics:\n    P, R, F, fpr, rr, nDCG, auc\n    :param item_score:\n    :param ratings_t_us:\n    :param test_items:\n    :param relevant:\n    :param metrics_dict: list of\n    :return: list of the top k with all metrics: P, R, F, fpr, rr, nDCG, auc\n    \"\"\"", "\n", "\n", "user_r", "=", "[", "0.0", "]", "\n", "user_fpr", "=", "[", "0.0", "]", "\n", "k", "=", "cfg", ".", "getInstance", "(", ")", ".", "topk", "\n", "for", "i", "in", "range", "(", "1", ",", "k", "+", "1", ")", ":", "\n", "        ", "top_n", "=", "get_top_n", "(", "item_score", ",", "i", ")", "\n", "top_n", ".", "item", "=", "top_n", ".", "item", ".", "astype", "(", "int", ")", "\n", "\n", "topn_real_ratings", "=", "get_real_item_rating", "(", "top_n", ",", "ratings_t_us", ")", ".", "rating", "\n", "\n", "fpr", "=", "false_positive_rate", "(", "test_items", ",", "relevant", ",", "top_n", ")", "\n", "\n", "recs", "=", "np", ".", "array", "(", "top_n", ".", "item", ")", ".", "astype", "(", "int", ")", "\n", "P", "=", "precision", "(", "recs", ",", "np", ".", "array", "(", "relevant", ")", ")", "\n", "R", "=", "recall", "(", "recs", ",", "np", ".", "array", "(", "relevant", ")", ")", "\n", "F", "=", "fmeasure", "(", "P", ",", "R", ")", "\n", "rr", "=", "reciprocal_rank", "(", "topn_real_ratings", ")", "\n", "\n", "user_r", ".", "append", "(", "R", ")", "\n", "user_fpr", ".", "append", "(", "fpr", ")", "\n", "\n", "nDCG", "=", "ndcg_at_k", "(", "topn_real_ratings", ",", "i", ",", "method", "=", "0", ")", "\n", "\n", "# auc = metrics.auc(user_fpr, user_r)", "\n", "auc", "=", "get_auc", "(", "user_r", ",", "user_fpr", ")", "\n", "\n", "if", "len", "(", "metrics_dict", ")", "!=", "k", ":", "\n", "            ", "metrics_dict", ".", "update", "(", "{", "'top'", "+", "str", "(", "i", ")", ":", "[", "P", ",", "R", ",", "F", ",", "fpr", ",", "rr", ",", "nDCG", ",", "auc", "]", "}", ")", "\n", "\n", "", "else", ":", "\n", "            ", "old", "=", "np", ".", "array", "(", "metrics_dict", "[", "'top'", "+", "str", "(", "i", ")", "]", ")", "\n", "new", "=", "np", ".", "array", "(", "[", "P", ",", "R", ",", "F", ",", "fpr", ",", "rr", ",", "nDCG", ",", "auc", "]", ")", "\n", "\n", "to_update", "=", "old", "+", "new", "\n", "metrics_dict", ".", "update", "(", "{", "'top'", "+", "str", "(", "i", ")", ":", "to_update", "}", ")", "\n", "\n", "", "", "return", "metrics_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_evaluation": [[179, 471], ["implicit.bpr.BayesianPersonalizedRanking", "implicit.als.AlternatingLeastSquares", "implicit.als.AlternatingLeastSquares.fit", "implicit.bpr.BayesianPersonalizedRanking.fit", "all_ratings[].item.unique", "print", "print", "print", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "gc.collect", "print", "sys.stdout.flush", "algorithms.onto_algorithm", "algorithms.get_score_by_implicit", "algorithms.map_system_id_to_original_id", "algorithms.get_score_by_implicit", "algorithms.map_system_id_to_original_id", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "recommender_evaluation.get_relevants_by_user", "len", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "float", "float", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "cross_val.calculate_dictionary_mean", "np.sum", "len", "len", "algorithms.map_original_id_to_system_id", "algorithms.map_original_id_to_system_id", "algorithms.map_original_id_to_system_id", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.merge_algorithms_scores", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "algorithms.all_evaluation_metrics", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "all_ratings_for_t_us.index_item.isin", "open", "g.write", "g.close", "all_ratings_for_t_us.index_item.isin", "all_ratings.index_item.isin"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.onto_algorithm", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_implicit", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_system_id_to_original_id", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_implicit", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_system_id_to_original_id", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_relevants_by_user", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_original_id_to_system_id", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_original_id_to_system_id", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.map_original_id_to_system_id", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics"], ["", "def", "get_evaluation", "(", "test_users", ",", "test_users_size", ",", "count_cv", ",", "count_cv_items", ",", "ratings_test", ",", "\n", "ratings_train_sparse_CF", ",", "test_items", ",", "all_ratings", ",", "original_item_id", ",", "metric", ")", ":", "\n", "    ", "\"\"\"\n    evaluate the results for all the algorithms and all the metrics, before save it in\n    the csv file\n    :param test_users:\n    :param test_users_size:\n    :param count_cv:\n    :param count_cv_items:\n    :param ratings_test:\n    :param ratings_train_sparse_CF:\n    :param test_items:\n    :param all_ratings:\n    :param original_item_id:\n    :return: metrics_dict* for all algorithms (and combinations) and all the metrics\n    \"\"\"", "\n", "\n", "# CB", "\n", "onto_lin", "=", "{", "}", "\n", "onto_resnik", "=", "{", "}", "\n", "onto_jc", "=", "{", "}", "\n", "\n", "# CF", "\n", "als", "=", "{", "}", "\n", "bpr", "=", "{", "}", "\n", "\n", "# Hybrid", "\n", "als_onto_lin_m1", "=", "{", "}", "\n", "als_onto_resnik_m1", "=", "{", "}", "\n", "als_onto_jc_m1", "=", "{", "}", "\n", "bpr_onto_lin_m1", "=", "{", "}", "\n", "bpr_onto_resnik_m1", "=", "{", "}", "\n", "bpr_onto_jc_m1", "=", "{", "}", "\n", "\n", "als_onto_lin_m2", "=", "{", "}", "\n", "als_onto_resnik_m2", "=", "{", "}", "\n", "als_onto_jc_m2", "=", "{", "}", "\n", "bpr_onto_lin_m2", "=", "{", "}", "\n", "bpr_onto_resnik_m2", "=", "{", "}", "\n", "bpr_onto_jc_m2", "=", "{", "}", "\n", "\n", "model_bayes", "=", "implicit", ".", "bpr", ".", "BayesianPersonalizedRanking", "(", "factors", "=", "150", ",", "num_threads", "=", "10", ",", "use_gpu", "=", "False", ")", "\n", "model_als", "=", "implicit", ".", "als", ".", "AlternatingLeastSquares", "(", "factors", "=", "150", ",", "num_threads", "=", "10", ",", "use_gpu", "=", "False", ")", "\n", "\n", "# print(ratings_train_sparse_CF)", "\n", "model_als", ".", "fit", "(", "ratings_train_sparse_CF", ")", "\n", "model_bayes", ".", "fit", "(", "ratings_train_sparse_CF", ")", "\n", "\n", "progress", "=", "0", "\n", "users_to_remove", "=", "0", "\n", "relevant_items_sum", "=", "0", "\n", "\n", "# to use in onto algorithm", "\n", "test_items_onto_id", "=", "all_ratings", "[", "all_ratings", ".", "index_item", ".", "isin", "(", "\n", "test_items", ")", "]", ".", "item", ".", "unique", "(", ")", "\n", "\n", "for", "t_us", "in", "test_users", ":", "\n", "        ", "progress", "+=", "1", "\n", "print", "(", "progress", ",", "' of '", ",", "test_users_size", ",", "\"cv \"", ",", "count_cv", ",", "\"-\"", ",", "count_cv_items", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# all ratings for user t_us (index_user)", "\n", "all_ratings_for_t_us", "=", "all_ratings", "[", "all_ratings", ".", "index_user", "==", "t_us", "]", "\n", "\n", "# train ratings for user t_us", "\n", "train_ratings_for_t_us_CB", "=", "all_ratings_for_t_us", "[", "\n", "~", "(", "all_ratings_for_t_us", ".", "index_item", ".", "isin", "(", "ratings_test", ".", "index_item", ")", ")", "]", "\n", "\n", "# verify it user has condition to be evaluated, i.e., it has al least one item in the test set", "\n", "ratings_test_t_us", "=", "all_ratings_for_t_us", "[", "(", "all_ratings_for_t_us", ".", "index_item", ".", "isin", "(", "ratings_test", ".", "index_item", ")", ")", "]", "\n", "\n", "if", "np", ".", "sum", "(", "ratings_test_t_us", ".", "rating", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "len", "(", "train_ratings_for_t_us_CB", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "continue", "\n", "\n", "", "iscore_lin", ",", "iscore_resnik", ",", "iscore_jc", "=", "onto_algorithm", "(", "train_ratings_for_t_us_CB", ",", "\n", "test_items_onto_id", ",", "metric", ")", "\n", "\n", "# TO REMOVE PRINT", "\n", "if", "len", "(", "iscore_lin", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "\n", "with", "open", "(", "'../iscore_lin_empty.txt'", ",", "'a'", ")", "as", "g", ":", "\n", "                ", "g", ".", "write", "(", "\"item score: {item} \\ntrain: {train}\\n\"", ".", "\n", "format", "(", "\n", "item", "=", "iscore_lin", ",", "\n", "train", "=", "train_ratings_for_t_us_CB", ")", "\n", ")", "\n", "g", ".", "close", "(", ")", "\n", "", "\"\"\" print(iscore_lin)\n            print('EMPTYYYY')\n            print(train_ratings_for_t_us_CB) \"\"\"", "\n", "continue", "\n", "\n", "", "if", "metric", "in", "(", "'sim_lin'", ",", "'all'", ")", ":", "\n", "            ", "iscore_lin", "=", "map_original_id_to_system_id", "(", "iscore_lin", ",", "original_item_id", ")", "\n", "", "if", "metric", "in", "(", "'sim_resnik'", ",", "'all'", ")", ":", "\n", "            ", "iscore_resnik", "=", "map_original_id_to_system_id", "(", "iscore_resnik", ",", "original_item_id", ")", "\n", "", "if", "metric", "in", "(", "'sim_jc'", ",", "'all'", ")", ":", "\n", "            ", "iscore_jc", "=", "map_original_id_to_system_id", "(", "iscore_jc", ",", "original_item_id", ")", "\n", "\n", "", "iscore_implicit_als", "=", "get_score_by_implicit", "(", "model_als", ",", "ratings_train_sparse_CF", ",", "test_items", ",", "t_us", ")", "\n", "iscore_implicit_als", "=", "map_system_id_to_original_id", "(", "iscore_implicit_als", ",", "original_item_id", ")", "\n", "iscore_implicit_bpr", "=", "get_score_by_implicit", "(", "model_bayes", ",", "ratings_train_sparse_CF", ",", "test_items", ",", "t_us", ")", "\n", "iscore_implicit_bpr", "=", "map_system_id_to_original_id", "(", "iscore_implicit_bpr", ",", "original_item_id", ")", "\n", "\n", "# print('onto lin')", "\n", "# print(iscore_lin.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('onto resnik')", "\n", "# print(iscore_resnik.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('onto jc')", "\n", "# print(iscore_jc.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('als')", "\n", "# print(iscore_implicit_als.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr')", "\n", "# print(iscore_implicit_bpr.sort_values(by=['score'], ascending=False).head(20))", "\n", "\n", "# Different merge scores will be used:", "\n", "#   1: product", "\n", "#   2: arithmetic", "\n", "#   3: quadratic", "\n", "#   4: harmonic", "\n", "\n", "iscore_als_onto_lin_m1", "=", "merge_algorithms_scores", "(", "iscore_lin", ",", "iscore_implicit_als", ",", "1", ")", "\n", "iscore_als_onto_lin_m2", "=", "merge_algorithms_scores", "(", "iscore_lin", ",", "iscore_implicit_als", ",", "2", ")", "\n", "iscore_bpr_onto_lin_m1", "=", "merge_algorithms_scores", "(", "iscore_lin", ",", "iscore_implicit_bpr", ",", "1", ")", "\n", "iscore_bpr_onto_lin_m2", "=", "merge_algorithms_scores", "(", "iscore_lin", ",", "iscore_implicit_bpr", ",", "2", ")", "\n", "\n", "# print('als_onto_lin_m1')", "\n", "# print(iscore_als_onto_lin_m1.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('als_onto_lin_m2')", "\n", "# print(iscore_als_onto_lin_m2.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr_onto_lin_m1')", "\n", "# print(iscore_bpr_onto_lin_m1.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr_onto_lin_m2')", "\n", "# print(iscore_bpr_onto_lin_m2.sort_values(by=['score'], ascending=False).head(20))", "\n", "\n", "if", "metric", "in", "(", "'sim_resnik'", ",", "'all'", ")", ":", "\n", "            ", "iscore_als_onto_resnik_m1", "=", "merge_algorithms_scores", "(", "iscore_resnik", ",", "iscore_implicit_als", ",", "1", ")", "\n", "iscore_als_onto_resnik_m2", "=", "merge_algorithms_scores", "(", "iscore_resnik", ",", "iscore_implicit_als", ",", "2", ")", "\n", "iscore_bpr_onto_resnik_m1", "=", "merge_algorithms_scores", "(", "iscore_resnik", ",", "iscore_implicit_bpr", ",", "1", ")", "\n", "iscore_bpr_onto_resnik_m2", "=", "merge_algorithms_scores", "(", "iscore_resnik", ",", "iscore_implicit_bpr", ",", "2", ")", "\n", "\n", "# print('als_onto_resnik_m1')", "\n", "# print(iscore_als_onto_resnik_m1.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('als_onto_resnik_m2')", "\n", "# print(iscore_als_onto_resnik_m2.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr_onto_resnik_m1')", "\n", "# print(iscore_bpr_onto_resnik_m1.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr_onto_resnik_m2')", "\n", "# print(iscore_bpr_onto_resnik_m2.sort_values(by=['score'], ascending=False).head(20))", "\n", "\n", "", "if", "metric", "in", "(", "'sim_jc'", ",", "'all'", ")", ":", "\n", "            ", "iscore_als_onto_jc_m1", "=", "merge_algorithms_scores", "(", "iscore_jc", ",", "iscore_implicit_als", ",", "1", ")", "\n", "iscore_als_onto_jc_m2", "=", "merge_algorithms_scores", "(", "iscore_jc", ",", "iscore_implicit_als", ",", "2", ")", "\n", "iscore_bpr_onto_jc_m1", "=", "merge_algorithms_scores", "(", "iscore_jc", ",", "iscore_implicit_bpr", ",", "1", ")", "\n", "iscore_bpr_onto_jc_m2", "=", "merge_algorithms_scores", "(", "iscore_jc", ",", "iscore_implicit_bpr", ",", "2", ")", "\n", "\n", "# print('als_onto_jc_m1')", "\n", "# print(iscore_als_onto_jc_m1.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('als_onto_jc_m2')", "\n", "# print(iscore_als_onto_jc_m2.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr_onto_jc_m1')", "\n", "# print(iscore_bpr_onto_jc_m1.sort_values(by=['score'], ascending=False).head(20))", "\n", "# print('bpr_onto_jc_m2')", "\n", "# print(iscore_bpr_onto_jc_m2.sort_values(by=['score'], ascending=False).head(20))", "\n", "\n", "", "relevant", "=", "get_relevants_by_user", "(", "ratings_test_t_us", ",", "0", ")", "\n", "# print(\"relevant: \", relevant)", "\n", "\n", "relevant_items_sum", "+=", "len", "(", "relevant", ")", "# so esta a fazer media", "\n", "\n", "als", "=", "all_evaluation_metrics", "(", "iscore_implicit_als", ",", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "als", ")", "\n", "bpr", "=", "all_evaluation_metrics", "(", "iscore_implicit_bpr", ",", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "bpr", ")", "\n", "\n", "if", "metric", "in", "(", "'sim_lin'", ",", "'all'", ")", ":", "\n", "# hybrid ", "\n", "            ", "onto_lin", "=", "all_evaluation_metrics", "(", "iscore_lin", ",", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "onto_lin", ")", "\n", "# hybrid metric 1", "\n", "als_onto_lin_m1", "=", "all_evaluation_metrics", "(", "iscore_als_onto_lin_m1", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "relevant", ".", "index_item", ",", "\n", "als_onto_lin_m1", ")", "\n", "bpr_onto_lin_m1", "=", "all_evaluation_metrics", "(", "iscore_bpr_onto_lin_m1", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "relevant", ".", "index_item", ",", "\n", "bpr_onto_lin_m1", ")", "\n", "# hybrid metric 2", "\n", "als_onto_lin_m2", "=", "all_evaluation_metrics", "(", "iscore_als_onto_lin_m2", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "relevant", ".", "index_item", ",", "\n", "als_onto_lin_m2", ")", "\n", "bpr_onto_lin_m2", "=", "all_evaluation_metrics", "(", "iscore_bpr_onto_lin_m2", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "relevant", ".", "index_item", ",", "\n", "bpr_onto_lin_m2", ")", "\n", "\n", "", "if", "metric", "in", "(", "'sim_resnik'", ",", "'all'", ")", ":", "\n", "# hybrid ", "\n", "            ", "onto_resnik", "=", "all_evaluation_metrics", "(", "iscore_resnik", ",", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "onto_resnik", ")", "\n", "# hybrid metric 1", "\n", "als_onto_resnik_m1", "=", "all_evaluation_metrics", "(", "iscore_als_onto_resnik_m1", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "als_onto_resnik_m1", ")", "\n", "bpr_onto_resnik_m1", "=", "all_evaluation_metrics", "(", "iscore_bpr_onto_resnik_m1", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "bpr_onto_resnik_m1", ")", "\n", "\n", "# hybrid metric 2       ", "\n", "als_onto_resnik_m2", "=", "all_evaluation_metrics", "(", "iscore_als_onto_resnik_m2", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "als_onto_resnik_m2", ")", "\n", "bpr_onto_resnik_m2", "=", "all_evaluation_metrics", "(", "iscore_bpr_onto_resnik_m2", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "bpr_onto_resnik_m2", ")", "\n", "\n", "", "if", "metric", "in", "(", "'sim_jc'", ",", "'all'", ")", ":", "\n", "# hybrid", "\n", "            ", "onto_jc", "=", "all_evaluation_metrics", "(", "iscore_jc", ",", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "onto_jc", ")", "\n", "# hybrid metric 1", "\n", "als_onto_jc_m1", "=", "all_evaluation_metrics", "(", "iscore_als_onto_jc_m1", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "als_onto_jc_m1", ")", "\n", "bpr_onto_jc_m1", "=", "all_evaluation_metrics", "(", "iscore_bpr_onto_jc_m1", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "bpr_onto_jc_m1", ")", "\n", "# hybrid metric 2  ", "\n", "als_onto_jc_m2", "=", "all_evaluation_metrics", "(", "iscore_als_onto_jc_m2", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "als_onto_jc_m2", ")", "\n", "bpr_onto_jc_m2", "=", "all_evaluation_metrics", "(", "iscore_bpr_onto_jc_m2", ",", "\n", "ratings_test_t_us", ",", "test_items", ",", "\n", "relevant", ".", "index_item", ",", "\n", "bpr_onto_jc_m2", ")", "\n", "\n", "", "", "print", "(", "\"users size: \"", ",", "test_users_size", ")", "\n", "test_users_size", "=", "test_users_size", "-", "users_to_remove", "\n", "\n", "print", "(", "\"n users removed: \"", ",", "users_to_remove", ")", "\n", "\n", "relevant_items_mean", "=", "relevant_items_sum", "/", "test_users_size", "\n", "\n", "print", "(", "\"mean of relevant items: \"", ",", "relevant_items_mean", ")", "\n", "\n", "als", "=", "calculate_dictionary_mean", "(", "als", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr", "=", "calculate_dictionary_mean", "(", "bpr", ",", "float", "(", "test_users_size", ")", ")", "\n", "\n", "if", "metric", "in", "(", "'sim_lin'", ",", "'all'", ")", ":", "\n", "        ", "onto_lin", "=", "calculate_dictionary_mean", "(", "onto_lin", ",", "float", "(", "test_users_size", ")", ")", "\n", "als_onto_lin_m1", "=", "calculate_dictionary_mean", "(", "als_onto_lin_m1", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr_onto_lin_m1", "=", "calculate_dictionary_mean", "(", "bpr_onto_lin_m1", ",", "float", "(", "test_users_size", ")", ")", "\n", "als_onto_lin_m2", "=", "calculate_dictionary_mean", "(", "als_onto_lin_m2", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr_onto_lin_m2", "=", "calculate_dictionary_mean", "(", "bpr_onto_lin_m2", ",", "float", "(", "test_users_size", ")", ")", "\n", "\n", "", "if", "metric", "in", "(", "'sim_resnik'", ",", "'all'", ")", ":", "\n", "        ", "onto_resnik", "=", "calculate_dictionary_mean", "(", "onto_resnik", ",", "float", "(", "test_users_size", ")", ")", "\n", "als_onto_resnik_m1", "=", "calculate_dictionary_mean", "(", "als_onto_resnik_m1", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr_onto_resnik_m1", "=", "calculate_dictionary_mean", "(", "bpr_onto_resnik_m1", ",", "float", "(", "test_users_size", ")", ")", "\n", "als_onto_resnik_m2", "=", "calculate_dictionary_mean", "(", "als_onto_resnik_m2", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr_onto_resnik_m2", "=", "calculate_dictionary_mean", "(", "bpr_onto_resnik_m2", ",", "float", "(", "test_users_size", ")", ")", "\n", "\n", "", "if", "metric", "in", "(", "'sim_jc'", ",", "'all'", ")", ":", "\n", "        ", "onto_jc", "=", "calculate_dictionary_mean", "(", "onto_jc", ",", "float", "(", "test_users_size", ")", ")", "\n", "als_onto_jc_m1", "=", "calculate_dictionary_mean", "(", "als_onto_jc_m1", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr_onto_jc_m1", "=", "calculate_dictionary_mean", "(", "bpr_onto_jc_m1", ",", "float", "(", "test_users_size", ")", ")", "\n", "als_onto_jc_m2", "=", "calculate_dictionary_mean", "(", "als_onto_jc_m2", ",", "float", "(", "test_users_size", ")", ")", "\n", "bpr_onto_jc_m2", "=", "calculate_dictionary_mean", "(", "bpr_onto_jc_m2", ",", "float", "(", "test_users_size", ")", ")", "\n", "\n", "", "del", "model_bayes", "\n", "del", "model_als", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "return", "onto_lin", ",", "onto_resnik", ",", "onto_jc", ",", "als", ",", "bpr", ",", "als_onto_lin_m1", ",", "als_onto_resnik_m1", ",", "als_onto_jc_m1", ",", "bpr_onto_lin_m1", ",", "bpr_onto_resnik_m1", ",", "bpr_onto_jc_m1", ",", "als_onto_lin_m2", ",", "als_onto_resnik_m2", ",", "als_onto_jc_m2", ",", "bpr_onto_lin_m2", ",", "bpr_onto_resnik_m2", ",", "bpr_onto_jc_m2", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_all_metrics_by_cv_implicit": [[474, 509], ["algorithms.metrics_dict_aux", "print", "sys.stdout.flush", "recommender_evaluation.get_relevants_by_user", "len", "algorithms.recommendations", "pd.DataFrame", "algorithms.all_evaluation_metrics", "np.sum", "len", "np.array"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.metrics_dict_aux", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_relevants_by_user", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.recommendations", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics"], ["", "def", "get_all_metrics_by_cv_implicit", "(", "test_users", ",", "test_users_size", ",", "count_cv", ",", "count_cv_items", ",", "ratings_test", ",", "model_als", ",", "\n", "ratings_sparse", ",", "test_items", ",", "train_ratings", ")", ":", "\n", "    ", "metrics_dict", "=", "{", "}", "\n", "\n", "progress", "=", "0", "\n", "users_to_remove", "=", "0", "\n", "relevant_items_sum", "=", "0", "\n", "\n", "for", "t_us", "in", "test_users", ":", "\n", "\n", "        ", "progress", "+=", "1", "\n", "print", "(", "progress", ",", "' of '", ",", "test_users_size", ",", "\"cv \"", ",", "count_cv", ",", "\"-\"", ",", "count_cv_items", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "ratings_t_us", "=", "ratings_test", "[", "ratings_test", ".", "user", "==", "t_us", "]", "\n", "train_ratings_t_us", "=", "train_ratings", "[", "train_ratings", ".", "user", "==", "t_us", "]", "\n", "\n", "if", "np", ".", "sum", "(", "ratings_t_us", ".", "rating", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "len", "(", "train_ratings_t_us", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "continue", "\n", "\n", "", "relevant", "=", "get_relevants_by_user", "(", "ratings_t_us", ",", "0", ")", "\n", "relevant_items_sum", "+=", "len", "(", "relevant", ")", "\n", "\n", "item_score", "=", "recommendations", "(", "model_als", ",", "ratings_sparse", ",", "test_items", ",", "t_us", ")", "\n", "item_score", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "item_score", ")", ",", "columns", "=", "[", "\"item\"", ",", "\"score\"", "]", ")", "\n", "\n", "metrics_dict", "=", "all_evaluation_metrics", "(", "item_score", ",", "ratings_t_us", ",", "test_items", ",", "relevant", ",", "metrics_dict", ")", "\n", "\n", "", "return", "metrics_dict_aux", "(", "test_users_size", ",", "users_to_remove", ",", "relevant_items_sum", ",", "metrics_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.metrics_dict_aux": [[512, 517], ["cross_val.calculate_dictionary_mean", "float"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.cross_val.calculate_dictionary_mean"], ["", "def", "metrics_dict_aux", "(", "users_size", ",", "users_to_remove", ",", "relevant", ",", "metrics", ")", ":", "\n", "#users_size = users_size - users_to_remove", "\n", "#relevant_mean = relevant / users_size", "\n", "# print(\"mean of relevant items: \", relevant_mean, \" n users removed: \", users_to_remove)", "\n", "    ", "return", "calculate_dictionary_mean", "(", "metrics", ",", "float", "(", "users_size", "-", "users_to_remove", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_item": [[521, 533], ["database.get_read_all", "database.get_read_all", "sims_inverse.rename.rename", "pd.concat", "len"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_read_all", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_read_all"], ["", "def", "get_score_by_item", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", ":", "\n", "    ", "sims", "=", "get_read_all", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", "\n", "sims_inverse", "=", "get_read_all", "(", "train_items_for_t_us", ",", "test_items_onto_id", ")", "\n", "sims_inverse", "=", "sims_inverse", ".", "rename", "(", "columns", "=", "{", "\"comp_1\"", ":", "\"comp_2\"", ",", "\"comp_2\"", ":", "\"comp_1\"", "}", ")", "\n", "\n", "sims_concat", "=", "pd", ".", "concat", "(", "[", "sims", ",", "sims_inverse", "]", ",", "axis", "=", "0", ",", "join", "=", "'outer'", ",", "ignore_index", "=", "True", ",", "sort", "=", "False", ")", "\n", "\n", "if", "len", "(", "sims_concat", ")", ">", "0", ":", "\n", "# scores_by_item = sims_concat.groupby(['comp_1']).mean().reset_index()", "\n", "        ", "return", "sims_concat", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_all_metrics_by_ontology": [[536, 593], ["all_ratings[].item.unique", "algorithms.metrics_dict_aux", "train_ratings_for_t_us.item.unique", "print", "sys.stdout.flush", "algorithms.get_score_by_item", "recommender_evaluation.get_relevants_by_user", "len", "np.sum", "len", "len", "item_score.rename.rename", "item_score.rename.item.astype", "algorithms.all_evaluation_metrics", "all_ratings_for_t_us.index_item.isin", "cfg.getInstance", "all_ratings_for_t_us.index_item.isin", "all_ratings.index_item.isin"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.metrics_dict_aux", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_item", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_relevants_by_user", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "", "def", "get_all_metrics_by_ontology", "(", "test_users", ",", "test_users_size", ",", "count_cv", ",", "count_cv_items", ",", "ratings_test", ",", "\n", "test_items", ",", "all_ratings", ")", ":", "\n", "    ", "metrics_dict", "=", "{", "}", "\n", "progress", "=", "0", "\n", "users_to_remove", "=", "0", "\n", "relevant_items_sum", "=", "0", "\n", "\n", "#test items onto id!!!  what i'm rating. Array is equal for all users", "\n", "test_items_onto_id", "=", "all_ratings", "[", "all_ratings", ".", "index_item", ".", "isin", "(", "\n", "test_items", ")", "]", ".", "item", ".", "unique", "(", ")", "\n", "\n", "for", "t_us", "in", "test_users", ":", "\n", "\n", "        ", "all_ratings_for_t_us", "=", "all_ratings", "[", "all_ratings", ".", "index_user", "==", "t_us", "]", "\n", "\n", "test_ratings_for_t_us", "=", "all_ratings_for_t_us", "[", "all_ratings_for_t_us", ".", "index_item", ".", "isin", "(", "test_items", ")", "]", "\n", "train_ratings_for_t_us", "=", "all_ratings_for_t_us", "[", "~", "(", "all_ratings_for_t_us", ".", "index_item", ".", "isin", "(", "test_items", ")", ")", "]", "\n", "\n", "# training items for this user to be used for finding the similarity", "\n", "train_items_for_t_us", "=", "train_ratings_for_t_us", ".", "item", ".", "unique", "(", ")", "\n", "\n", "progress", "+=", "1", "\n", "print", "(", "progress", ",", "' of '", ",", "test_users_size", ",", "\"cv \"", ",", "count_cv", ",", "\"-\"", ",", "count_cv_items", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "ratings_t_us", "=", "ratings_test", "[", "ratings_test", ".", "user", "==", "t_us", "]", "\n", "\n", "if", "np", ".", "sum", "(", "ratings_t_us", ".", "rating", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "\n", "continue", "\n", "\n", "", "if", "len", "(", "train_ratings_for_t_us", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "\n", "continue", "\n", "\n", "", "scores_by_item", "=", "get_score_by_item", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", "\n", "\n", "relevant", "=", "get_relevants_by_user", "(", "test_ratings_for_t_us", ",", "0", ")", "\n", "\n", "relevant_items_sum", "+=", "len", "(", "relevant", ")", "\n", "\n", "if", "len", "(", "scores_by_item", ")", ">", "0", ":", "\n", "# item_score = recommendations(model_als, ratings_train_sparse_CF, test_items, t_us)", "\n", "# item_score = pd.DataFrame(np.array(item_score), columns=[\"item\", \"score\"])", "\n", "\n", "            ", "sim_metric", "=", "cfg", ".", "getInstance", "(", ")", ".", "sim_metric", "\n", "item_score", "=", "scores_by_item", "[", "[", "'comp_1'", ",", "sim_metric", "]", "]", "\n", "item_score", "=", "item_score", ".", "rename", "(", "columns", "=", "{", "\"comp_1\"", ":", "\"item\"", ",", "sim_metric", ":", "\"score\"", "}", ")", "\n", "item_score", ".", "item", "=", "item_score", ".", "item", ".", "astype", "(", "int", ")", "\n", "\n", "metrics_dict", "=", "all_evaluation_metrics", "(", "item_score", ",", "test_ratings_for_t_us", ",", "test_items_onto_id", ",", "\n", "relevant", ",", "metrics_dict", ")", "\n", "\n", "", "", "return", "metrics_dict_aux", "(", "test_users_size", ",", "users_to_remove", ",", "relevant_items_sum", ",", "metrics_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores": [[596, 622], ["pd.merge", "merged_item_scores[].sort_values", "math.sqrt", "cfg.getInstance"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "merge_algorithms_scores", "(", "iscore_ontology", ",", "iscore_implicit", ",", "metric", ")", ":", "\n", "    ", "\"\"\"\n    calculates the scores for each test item with hybrid algorithm\n    :param iscore_ontology: item score from CB\n    :param iscore_implicit: item score from CF\n    :param metric: 1: multiplication of the scores; 2: mean of the scores\n    :return: item score dataframe order descending\n    \"\"\"", "\n", "\n", "merged_item_scores", "=", "pd", ".", "merge", "(", "iscore_implicit", ",", "iscore_ontology", ",", "on", "=", "'item'", ")", "\n", "\n", "if", "metric", "==", "1", ":", "\n", "        ", "merged_item_scores", "[", "'score'", "]", "=", "merged_item_scores", ".", "score_x", "*", "merged_item_scores", ".", "score_y", "\n", "\n", "", "elif", "metric", "==", "2", ":", "#'arithmetic'", "\n", "        ", "merged_item_scores", "[", "'score'", "]", "=", "(", "merged_item_scores", ".", "score_x", "+", "merged_item_scores", ".", "score_y", ")", "/", "2", "\n", "\n", "", "elif", "metric", "==", "3", ":", "#'quadratic'", "\n", "        ", "merged_item_scores", "[", "'score'", "]", "=", "math", ".", "sqrt", "(", "merged_item_scores", ".", "score_x", "**", "2", "+", "merged_item_scores", ".", "score_y", "**", "2", ")", "/", "2", "\n", "\n", "", "elif", "metric", "==", "4", ":", "#'harmonic'", "\n", "        ", "merged_item_scores", "[", "'score'", "]", "=", "2", "/", "(", "1", "/", "merged_item_scores", ".", "score_x", "+", "1", "/", "merged_item_scores", ".", "score_y", ")", "\n", "\n", "\n", "", "return", "merged_item_scores", "[", "[", "'item'", ",", "'score'", ",", "'item_'", "+", "cfg", ".", "getInstance", "(", ")", ".", "item_prefix", "+", "'x'", "]", "]", ".", "sort_values", "(", "\n", "by", "=", "[", "'score'", "]", ",", "ascending", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.hybrid_implicit_ontology": [[625, 685], ["all_ratings[].item.unique", "algorithms.metrics_dict_aux", "print", "sys.stdout.flush", "train_ratings_for_t_us.item.unique", "algorithms.get_score_by_implicit", "algorithms.get_score_by_ontology", "algorithms.merge_algorithms_scores", "recommender_evaluation.get_relevants_by_user", "len", "algorithms.all_evaluation_metrics", "np.sum", "len", "all_ratings_for_t_us.index_item.isin", "all_ratings_for_t_us.index_item.isin", "all_ratings.index_item.isin"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.metrics_dict_aux", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_implicit", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_ontology", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.merge_algorithms_scores", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.recommender_evaluation.get_relevants_by_user", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.all_evaluation_metrics"], ["", "def", "hybrid_implicit_ontology", "(", "test_users", ",", "test_users_size", ",", "count_cv", ",", "count_cv_items", ",", "ratings_test", ",", "model_als", ",", "\n", "ratings_sparse", ",", "test_items", ",", "train_ratings", ",", "all_ratings", ",", "original_item_id", ")", ":", "\n", "    ", "\"\"\"\n    \n    :param\n    :param\n    :param sim_metric: specify the similarity metric (sim_lin, sim_resnik or sim_jc)\n    :return: item score dataframe order descending\n    \"\"\"", "\n", "metrics_dict", "=", "{", "}", "\n", "\n", "progress", "=", "0", "\n", "\n", "users_to_remove", "=", "0", "\n", "relevant_items_sum", "=", "0", "\n", "# ssmpy.semantic_base(\"/mlData/X.db\")", "\n", "\n", "# test items onto id!!!  what i'm rating. Array is equal for all users", "\n", "test_items_onto_id", "=", "all_ratings", "[", "all_ratings", ".", "index_item", ".", "isin", "(", "\n", "test_items", ")", "]", ".", "item", ".", "unique", "(", ")", "\n", "\n", "for", "t_us", "in", "test_users", ":", "\n", "\n", "        ", "progress", "+=", "1", "\n", "print", "(", "progress", ",", "' of '", ",", "test_users_size", ",", "\"cv \"", ",", "count_cv", ",", "\"-\"", ",", "count_cv_items", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# implicit", "\n", "ratings_t_us", "=", "ratings_test", "[", "ratings_test", ".", "user", "==", "t_us", "]", "\n", "train_ratings_t_us", "=", "train_ratings", "[", "train_ratings", ".", "user", "==", "t_us", "]", "\n", "\n", "# ontology", "\n", "all_ratings_for_t_us", "=", "all_ratings", "[", "all_ratings", ".", "index_user", "==", "t_us", "]", "\n", "test_ratings_for_t_us", "=", "all_ratings_for_t_us", "[", "all_ratings_for_t_us", ".", "index_item", ".", "isin", "(", "test_items", ")", "]", "\n", "train_ratings_for_t_us", "=", "all_ratings_for_t_us", "[", "~", "(", "all_ratings_for_t_us", ".", "index_item", ".", "isin", "(", "test_items", ")", ")", "]", "\n", "# training items for this user to be user for finding the similarity", "\n", "train_items_for_t_us", "=", "train_ratings_for_t_us", ".", "item", ".", "unique", "(", ")", "\n", "\n", "if", "np", ".", "sum", "(", "ratings_t_us", ".", "rating", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "\n", "continue", "\n", "\n", "", "if", "len", "(", "train_ratings_t_us", ")", "==", "0", ":", "\n", "            ", "users_to_remove", "+=", "1", "\n", "\n", "continue", "\n", "\n", "", "iscore_implicit", "=", "get_score_by_implicit", "(", "model_als", ",", "ratings_sparse", ",", "test_items", ",", "t_us", ")", "\n", "iscore_ontology", "=", "get_score_by_ontology", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", "\n", "\n", "item_score", "=", "merge_algorithms_scores", "(", "iscore_ontology", ",", "original_item_id", ",", "iscore_implicit", ")", "\n", "\n", "relevant", "=", "get_relevants_by_user", "(", "ratings_t_us", ",", "0", ")", "\n", "relevant_items_sum", "+=", "len", "(", "relevant", ")", "\n", "\n", "metrics_dict", "=", "all_evaluation_metrics", "(", "item_score", ",", "ratings_t_us", ",", "test_items", ",", "relevant", ",", "metrics_dict", ")", "\n", "\n", "", "return", "metrics_dict_aux", "(", "test_users_size", ",", "users_to_remove", ",", "relevant_items_sum", ",", "metrics_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_implicit": [[688, 694], ["algorithms.recommendations", "pd.DataFrame", "pd.DataFrame.item.astype", "np.array"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.recommendations"], ["", "def", "get_score_by_implicit", "(", "model", ",", "ratings_sparse", ",", "test_items", ",", "t_us", ")", ":", "\n", "    ", "item_score", "=", "recommendations", "(", "model", ",", "ratings_sparse", ",", "test_items", ",", "t_us", ")", "\n", "item_score", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "item_score", ")", ",", "columns", "=", "[", "\"item\"", ",", "\"score\"", "]", ")", "\n", "item_score", ".", "item", "=", "item_score", ".", "item", ".", "astype", "(", "int", ")", "\n", "\n", "return", "item_score", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_ontology": [[697, 709], ["algorithms.get_score_by_item", "item_score.rename.rename", "item_score.rename.item.astype", "cfg.getInstance"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.algorithms.get_score_by_item", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "get_score_by_ontology", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", ":", "\n", "    ", "scores_by_item", "=", "get_score_by_item", "(", "test_items_onto_id", ",", "train_items_for_t_us", ")", "\n", "\n", "# item_score = scores_by_item[['comp_1', 'sim_lin']]", "\n", "# item_score = item_score.rename(columns={\"comp_1\": \"item\", \"sim_lin\": \"score\"})", "\n", "\n", "sim_metric", "=", "cfg", ".", "getInstance", "(", ")", ".", "sim_metric", "\n", "item_score", "=", "scores_by_item", "[", "[", "'comp_1'", ",", "sim_metric", "]", "]", "\n", "item_score", "=", "item_score", ".", "rename", "(", "columns", "=", "{", "'comp_1'", ":", "'item'", ",", "sim_metric", ":", "'score'", "}", ")", "\n", "item_score", ".", "item", "=", "item_score", ".", "item", ".", "astype", "(", "int", ")", "\n", "\n", "return", "item_score", "", "", ""]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_default_connection_mysql": [[41, 56], ["myconfiguration.MyConfiguration.getInstance", "isinstance", "mysql.connect"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["def", "create_default_connection_mysql", "(", ")", ":", "\n", "    ", "\"\"\"\n    create a default connection to the mysql database\n        specified by host, user and password defined in config.ini\n    :param\n    :return: Connection object\n    \"\"\"", "\n", "conf", "=", "cfg", ".", "getInstance", "(", ")", "\n", "assert", "isinstance", "(", "conf", ".", "password", ",", "object", ")", "\n", "mydb", "=", "connector", ".", "connect", "(", "\n", "host", "=", "conf", ".", "host", ",", "\n", "user", "=", "conf", ".", "user", ",", "\n", "password", "=", "conf", ".", "password", "\n", ")", "\n", "return", "mydb", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_connection_mysql": [[60, 71], ["database.create_default_connection_mysql", "myconfiguration.MyConfiguration.getInstance"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_default_connection_mysql", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "create_connection_mysql", "(", ")", ":", "\n", "    ", "\"\"\" create a connection to the mysql database\n       specified by host, user, password and\n       database name defined in config.ini\n   :param\n   :return: Connection object\n   \"\"\"", "\n", "mydb", "=", "create_default_connection_mysql", "(", ")", "\n", "mydb", ".", "database", "=", "cfg", ".", "getInstance", "(", ")", ".", "database", "\n", "\n", "return", "mydb", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_connection_sqlite": [[75, 91], ["sqlite3.connect", "print"], "function", ["None"], ["", "def", "create_connection_sqlite", "(", "sb_file", ")", ":", "\n", "    ", "\"\"\" \n    \n     Create a database connection to the SQLite database\n    specified by sb_file\n    :param sb_file: sqlite database filename\n    :type sb_file: string\n    :return: Connection object or None\n    \"\"\"", "\n", "try", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "sb_file", ")", "\n", "return", "conn", "\n", "", "except", "Error", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_engine_mysql": [[95, 116], ["myconfiguration.MyConfiguration.getInstance", "sqlalchemy.create_engine"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "create_engine_mysql", "(", ")", ":", "\n", "    ", "\"\"\"\n    \n    Create a pool and dialect together connection to provide a source of database\n    and behavior\n    :param:\n    :return: Connection engine\n    \"\"\"", "\n", "# in case of connection error, change the host as in the next commented code", "\n", "conf", "=", "cfg", ".", "getInstance", "(", ")", "\n", "host", "=", "conf", ".", "host", "\n", "user", "=", "conf", ".", "user", "\n", "passwd", "=", "conf", ".", "password", "\n", "db_name", "=", "conf", ".", "database", "\n", "\n", "return", "create_engine", "(", "\"mysql+pymysql://{user}:{pw}@{host}/{db}\"", "\n", ".", "format", "(", "user", "=", "user", ",", "\n", "pw", "=", "passwd", ",", "\n", "host", "=", "host", ",", "\n", "db", "=", "db_name", ")", ",", "\n", "pool_pre_ping", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.check_database": [[120, 157], ["database.create_default_connection_mysql", "create_default_connection_mysql.cursor", "mydb.cursor.execute", "create_default_connection_mysql.is_connected", "myconfiguration.MyConfiguration.getInstance", "print", "print", "print", "mydb.cursor.close", "create_default_connection_mysql.close", "x[].decode"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_default_connection_mysql", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.myconfiguration.MyConfiguration.getInstance"], ["", "def", "check_database", "(", ")", ":", "\n", "    ", "\"\"\"\n    check the existence of a database with the name defined in config.ini\n    if none, a new is created as well as a table of similarity\n    :param: none\n    :return:\n    \"\"\"", "\n", "global", "mydb", ",", "mycursor", "\n", "try", ":", "\n", "        ", "check", "=", "False", "\n", "mydb", "=", "create_default_connection_mysql", "(", ")", "\n", "\n", "mycursor", "=", "mydb", ".", "cursor", "(", ")", "\n", "\n", "db_name", "=", "cfg", ".", "getInstance", "(", ")", ".", "database", "\n", "\n", "mycursor", ".", "execute", "(", "\"SHOW DATABASES\"", ")", "\n", "for", "x", "in", "mycursor", ":", "\n", "# x = x[0].decode(\"unicode-escape\") # decode was giving an error (note: decode is needed when using mysql docker)", "\n", "\n", "            ", "if", "x", "[", "0", "]", ".", "decode", "(", "\"unicode-escape\"", ")", "==", "db_name", ":", "\n", "# x[0].encode().decode('utf-8') == db_name:", "\n", "                ", "check", "=", "True", "\n", "\n", "", "", "if", "check", "!=", "False", ":", "\n", "            ", "print", "(", "\"Database already exists\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"The database is not available. Calculate similarity based \"", "+", "\n", "\"on SemanticSimDBCreator project\"", ")", "\n", "\n", "", "", "except", "Error", "as", "e", ":", "\n", "        ", "print", "(", "\"Error while connecting to MySQL\"", ",", "e", ")", "\n", "", "finally", ":", "\n", "        ", "if", "mydb", ".", "is_connected", "(", ")", ":", "\n", "            ", "mycursor", ".", "close", "(", ")", "\n", "mydb", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.insert_row": [[161, 190], ["database.create_connection_mysql", "create_connection_mysql.cursor", "mydb.cursor.execute", "create_connection_mysql.commit", "create_connection_mysql.is_connected", "print", "mydb.cursor.close", "create_connection_mysql.close"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_connection_mysql"], ["", "", "", "def", "insert_row", "(", "it1", ",", "it2", ",", "sim_res", ",", "sim_l", ",", "sim_j", ")", ":", "\n", "    ", "\"\"\"\n    insert rows in a similarity table with the corresponding values\n    :param it1: entity 1 (id)\n    :param it2: entity 2 (id)\n    :param sim_res: Resnik semantic similarity\n    :param sim_l: Lin's semantic similarity\n    :param sim_j: Jiang and Conrath's semantic similarity\n    :return:\n    \"\"\"", "\n", "\n", "global", "mydb", ",", "mycursor", "\n", "try", ":", "\n", "        ", "mydb", "=", "create_connection_mysql", "(", ")", "\n", "\n", "mycursor", "=", "mydb", ".", "cursor", "(", ")", "\n", "\n", "sql", "=", "\"INSERT INTO similarity (comp_1, comp_2, sim_resnik, sim_lin, sim_jc) VALUES (%s,%s,%s,%s,%s)\"", "\n", "\n", "val", "=", "(", "it1", ",", "it2", ",", "sim_res", ",", "sim_l", ",", "sim_j", ")", "\n", "mycursor", ".", "execute", "(", "sql", ",", "val", ")", "\n", "\n", "mydb", ".", "commit", "(", ")", "\n", "", "except", "Error", "as", "e", ":", "\n", "        ", "print", "(", "\"Error while connecting to MySQL\"", ",", "e", ")", "\n", "", "finally", ":", "\n", "        ", "if", "mydb", ".", "is_connected", "(", ")", ":", "\n", "            ", "mycursor", ".", "close", "(", ")", "\n", "mydb", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_sim_where_comp": [[192, 218], ["database.create_connection_mysql", "create_connection_mysql.cursor", "mydb.cursor.execute", "mydb.cursor.fetchall", "len", "create_connection_mysql.is_connected", "print", "mydb.cursor.close", "create_connection_mysql.close"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_connection_mysql"], ["", "", "", "def", "get_sim_where_comp", "(", "it1", ",", "it2", ")", ":", "\n", "    ", "\"\"\"\n    Get similarity between it1 and it2\n    :param it1: entity 1 (id)\n    :param it2: entity 2 (id)\n    \"\"\"", "\n", "global", "len_my_cursor", ",", "mydb", ",", "mycursor", "\n", "try", ":", "\n", "        ", "mydb", "=", "create_connection_mysql", "(", ")", "\n", "\n", "mycursor", "=", "mydb", ".", "cursor", "(", ")", "\n", "sql", "=", "\"select * from similarity where comp_1 = %s and comp_2 = %s\"", "\n", "sql", "=", "sql", "%", "(", "it1", ",", "it2", ")", "\n", "mycursor", ".", "execute", "(", "sql", ")", "\n", "\n", "my_cursor", "=", "mycursor", ".", "fetchall", "(", ")", "\n", "len_my_cursor", "=", "len", "(", "my_cursor", ")", "\n", "\n", "", "except", "Error", "as", "e", ":", "\n", "        ", "print", "(", "\"Error while connecting to MySQL\"", ",", "e", ")", "\n", "", "finally", ":", "\n", "        ", "if", "(", "mydb", ".", "is_connected", "(", ")", ")", ":", "\n", "            ", "mycursor", ".", "close", "(", ")", "\n", "mydb", ".", "close", "(", ")", "\n", "\n", "", "", "return", "len_my_cursor", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.check_if_pair_exist": [[221, 238], ["print", "database.get_sim_where_comp", "database.get_sim_where_comp"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_sim_where_comp", "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_sim_where_comp"], ["", "def", "check_if_pair_exist", "(", "it1", ",", "it2", ")", ":", "\n", "    ", "\"\"\"\n    Check if similarity between ontology list exist\n    :param it1: entity 1 (id)\n    :param it2: entity 2 (id)\n    :return: true or false\n    \"\"\"", "\n", "print", "(", "it1", ",", "it2", ")", "\n", "\n", "exist", "=", "get_sim_where_comp", "(", "it1", ",", "it2", ")", "\n", "exist_reverse", "=", "get_sim_where_comp", "(", "it2", ",", "it1", ")", "\n", "if", "exist", "==", "0", "and", "exist_reverse", "==", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_items_ids": [[241, 252], ["dataset.item.map().astype", "dataset.item.unique", "dataset.item.map", "x.lstrip"], "function", ["None"], ["", "", "def", "get_items_ids", "(", "dataset", ",", "name_prefix", ")", ":", "\n", "    ", "\"\"\"\n\n    :param dataset: dataset\n    :param name_prefix: Prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    \"\"\"", "\n", "dataset", ".", "item", "=", "dataset", ".", "item", ".", "map", "(", "lambda", "x", ":", "x", ".", "lstrip", "(", "name_prefix", ")", ")", ".", "astype", "(", "int", ")", "\n", "ids", "=", "dataset", ".", "item", ".", "unique", "(", ")", "\n", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.confirm_all_test_train_similarities_create": [[255, 289], ["print", "pandas.DataFrame", "not_found_in_db.l1.unique", "not_found_in_db.l2.unique", "len", "list", "pd.DataFrame.l1.isin", "pd.DataFrame.l2.isin", "pd.DataFrame.l2.isin", "pd.DataFrame.l1.isin", "len", "calculate_semantic_similarity", "print", "itertools.product", "scores_by_item.comp_1.astype().tolist", "scores_by_item.comp_2.astype().tolist", "scores_by_item.comp_1.astype().tolist", "scores_by_item.comp_2.astype().tolist", "scores_by_item.comp_1.astype", "scores_by_item.comp_2.astype", "scores_by_item.comp_1.astype", "scores_by_item.comp_2.astype"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.semsimcalculus.calculate_semantic_similarity"], ["", "def", "confirm_all_test_train_similarities_create", "(", "list1", ",", "list2", ",", "scores_by_item", ",", "name_prefix", ")", ":", "\n", "    ", "\"\"\"\n    \n    :param list1: test_items of onto_id\n    :param list2: train_items_for_t_us\n    :param scores_by_item:\n    :param name_prefix: prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    :return:\n    \"\"\"", "\n", "# test_items_onto_id = np.insert(test_items_onto_id, 1, 10000)", "\n", "print", "(", "\"items in train\"", ",", "len", "(", "list2", ")", ")", "\n", "\n", "# check if all item-item pair was found in the database", "\n", "lists_combinations", "=", "pd", ".", "DataFrame", "(", "list", "(", "product", "(", "list1", ",", "list2", ")", ")", ",", "\n", "columns", "=", "[", "'l1'", ",", "'l2'", "]", ")", "\n", "\n", "ss", "=", "lists_combinations", ".", "l1", ".", "isin", "(", "\n", "scores_by_item", ".", "comp_1", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "&", "lists_combinations", ".", "l2", ".", "isin", "(", "\n", "scores_by_item", ".", "comp_2", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "ss2", "=", "lists_combinations", ".", "l2", ".", "isin", "(", "\n", "scores_by_item", ".", "comp_1", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "&", "lists_combinations", ".", "l1", ".", "isin", "(", "\n", "scores_by_item", ".", "comp_2", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "not_found_in_db", "=", "lists_combinations", "[", "(", "~", "ss", ")", "&", "(", "~", "ss2", ")", "]", "\n", "\n", "unique_test", "=", "not_found_in_db", ".", "l1", ".", "unique", "(", ")", "\n", "unique_train", "=", "not_found_in_db", ".", "l2", ".", "unique", "(", ")", "\n", "\n", "if", "len", "(", "unique_test", ")", ">", "0", ":", "\n", "        ", "calculate_semantic_similarity", "(", "unique_test", ",", "name_prefix", ",", "unique_train", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"all items in DB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.confirm_all_test_train_similarities": [[292, 312], ["pandas.DataFrame", "not_found_in_db.l1.unique().tolist", "not_found_in_db.l2.unique().tolist", "list", "pd.DataFrame.l1.isin", "pd.DataFrame.l2.isin", "pd.DataFrame.l2.isin", "pd.DataFrame.l1.isin", "itertools.product", "pairs_from_db.comp_1.astype().tolist", "pairs_from_db.comp_2.astype().tolist", "pairs_from_db.comp_1.astype().tolist", "pairs_from_db.comp_2.astype().tolist", "not_found_in_db.l1.unique", "not_found_in_db.l2.unique", "pairs_from_db.comp_1.astype", "pairs_from_db.comp_2.astype", "pairs_from_db.comp_1.astype", "pairs_from_db.comp_2.astype"], "function", ["None"], ["", "", "def", "confirm_all_test_train_similarities", "(", "list1", ",", "list2", ",", "pairs_from_db", ")", ":", "\n", "# check if all item-item pair was found in the database", "\n", "\n", "    ", "lists_combinations", "=", "pd", ".", "DataFrame", "(", "list", "(", "product", "(", "list1", ",", "list2", ")", ")", ",", "\n", "columns", "=", "[", "'l1'", ",", "'l2'", "]", ")", "\n", "\n", "ss", "=", "lists_combinations", ".", "l1", ".", "isin", "(", "\n", "pairs_from_db", ".", "comp_1", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "&", "lists_combinations", ".", "l2", ".", "isin", "(", "\n", "pairs_from_db", ".", "comp_2", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "ss2", "=", "lists_combinations", ".", "l2", ".", "isin", "(", "\n", "pairs_from_db", ".", "comp_1", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "&", "lists_combinations", ".", "l1", ".", "isin", "(", "\n", "pairs_from_db", ".", "comp_2", ".", "astype", "(", "'int64'", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "not_found_in_db", "=", "lists_combinations", "[", "(", "~", "ss", ")", "&", "(", "~", "ss2", ")", "]", "\n", "\n", "not_found_list_1", "=", "not_found_in_db", ".", "l1", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "not_found_list_2", "=", "not_found_in_db", ".", "l2", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "not_found_list_1", ",", "not_found_list_2", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_sims": [[315, 355], ["database.create_connection_mysql", "create_connection_mysql.cursor", "mydb.cursor.execute", "mydb.cursor.fetchall", "create_connection_mysql.is_connected", "tuple", "tuple", "len", "pandas.DataFrame", "pandas.DataFrame", "print", "mydb.cursor.close", "create_connection_mysql.close", "len", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_connection_mysql"], ["", "def", "get_sims", "(", "entry_ids_1", ",", "entry_ids_2", ")", ":", "\n", "    ", "\"\"\"\n    Return <id, comp_1, comp_2> from database between 2 list of entries\n    :param entry_ids_1: list of entries 1\n    :param entry_ids_2: list of entries 2\n    :return result: pandas Dataframe\n    \"\"\"", "\n", "global", "mydb", ",", "result", "\n", "\n", "try", ":", "\n", "        ", "mydb", "=", "create_connection_mysql", "(", ")", "\n", "mycursor", "=", "mydb", ".", "cursor", "(", ")", "\n", "\n", "format_strings1", "=", "','", ".", "join", "(", "[", "'%s'", "]", "*", "len", "(", "entry_ids_1", ")", ")", "\n", "format_strings2", "=", "','", ".", "join", "(", "[", "'%s'", "]", "*", "len", "(", "entry_ids_2", ")", ")", "\n", "sql", "=", "\"select id, comp_1, comp_2 from similarity where comp_1 in (%s) and comp_2 in (%s)\"", "\n", "format_strings1", "=", "format_strings1", "%", "tuple", "(", "entry_ids_1", ")", "\n", "format_strings2", "=", "format_strings2", "%", "tuple", "(", "entry_ids_2", ")", "\n", "sql", "=", "sql", "%", "(", "format_strings1", ",", "format_strings2", ")", "\n", "\n", "mycursor", ".", "execute", "(", "sql", ")", "\n", "\n", "result", "=", "mycursor", ".", "fetchall", "(", ")", "\n", "\n", "if", "len", "(", "result", ")", "!=", "0", ":", "\n", "\n", "            ", "result", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "result", ")", ",", "\n", "columns", "=", "[", "'id'", ",", "'comp_1'", ",", "'comp_2'", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'id'", ",", "'comp_1'", ",", "'comp_2'", "]", ")", "\n", "\n", "", "", "except", "Error", "as", "e", ":", "\n", "        ", "print", "(", "\"Error while connecting to MySQL\"", ",", "e", ")", "\n", "", "finally", ":", "\n", "        ", "if", "mydb", ".", "is_connected", "(", ")", ":", "\n", "            ", "mycursor", ".", "close", "(", ")", "\n", "mydb", ".", "close", "(", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.get_read_all": [[358, 389], ["entry_ids_1.tolist", "entry_ids_2.tolist", "database.create_connection_mysql", "pandas.read_sql_query", "create_connection_mysql.is_connected", "tuple", "tuple", "print", "create_connection_mysql.close", "len", "len"], "function", ["home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.create_connection_mysql"], ["", "def", "get_read_all", "(", "entry_ids_1", ",", "entry_ids_2", ")", ":", "\n", "    ", "\"\"\"\n    Return all columns from database between 2 list of entries\n    :param entry_ids_1: list of entries 1\n    :param entry_ids_2: list of entries 2\n    :return result: pandas Dataframe\n\n    \"\"\"", "\n", "\n", "global", "mydb", ",", "result", "\n", "list1", "=", "entry_ids_1", ".", "tolist", "(", ")", "\n", "list2", "=", "entry_ids_2", ".", "tolist", "(", ")", "\n", "try", ":", "\n", "        ", "mydb", "=", "create_connection_mysql", "(", ")", "\n", "\n", "format_strings1", "=", "','", ".", "join", "(", "[", "'%s'", "]", "*", "len", "(", "list1", ")", ")", "\n", "format_strings2", "=", "','", ".", "join", "(", "[", "'%s'", "]", "*", "len", "(", "list2", ")", ")", "\n", "sql", "=", "\"select * from similarity where comp_1 in (%s) and comp_2 in (%s)\"", "\n", "format_strings1", "=", "format_strings1", "%", "tuple", "(", "list1", ")", "\n", "format_strings2", "=", "format_strings2", "%", "tuple", "(", "list2", ")", "\n", "sql", "=", "sql", "%", "(", "format_strings1", ",", "format_strings2", ")", "\n", "\n", "result", "=", "pd", ".", "read_sql_query", "(", "sql", ",", "con", "=", "mydb", ")", "\n", "\n", "", "except", "Error", "as", "e", ":", "\n", "        ", "print", "(", "\"Error while connecting to MySQL\"", ",", "e", ")", "\n", "", "finally", ":", "\n", "        ", "if", "mydb", ".", "is_connected", "(", ")", ":", "\n", "            ", "mydb", ".", "close", "(", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lasigeBioTM_ChemRecSys.src.database.save_to_mysql": [[393, 407], ["df.comp_1.map().astype", "df.comp_2.map().astype", "df.to_sql", "df.comp_1.map", "df.comp_2.map", "x.lstrip", "x.lstrip"], "function", ["None"], ["", "def", "save_to_mysql", "(", "df", ",", "engine", ",", "table_name", ",", "name_prefix", ")", ":", "\n", "    ", "\"\"\"\n\n    :param df: pandas Dataframe\n    :param engine: engine object\n    :param table_name: name of table where results are saved\n    :param name_prefix: Prefix of the concepts to be extracted from the ontology\n    :type name_prefix: string\n    \"\"\"", "\n", "\n", "df", ".", "comp_1", "=", "df", ".", "comp_1", ".", "map", "(", "lambda", "x", ":", "x", ".", "lstrip", "(", "name_prefix", ")", ")", ".", "astype", "(", "int", ")", "\n", "df", ".", "comp_2", "=", "df", ".", "comp_2", ".", "map", "(", "lambda", "x", ":", "x", ".", "lstrip", "(", "name_prefix", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "df", ".", "to_sql", "(", "table_name", ",", "con", "=", "engine", ",", "if_exists", "=", "'append'", ",", "index", "=", "False", ",", "method", "=", "'multi'", ",", "chunksize", "=", "10000", ")", "\n", "", ""]]}