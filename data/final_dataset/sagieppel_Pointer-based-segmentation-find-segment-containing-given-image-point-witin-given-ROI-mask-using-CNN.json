{"home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.FCN_NetModel.Net.__init__": [[13, 67], ["torch.Module.__init__", "torchvision.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "FCN_NetModel.Net.SkipConnections.append", "FCN_NetModel.Net.SkipConnections.append", "FCN_NetModel.Net.SkipConnections.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "FCN_NetModel.Net.SqueezeUpsample.append", "FCN_NetModel.Net.SqueezeUpsample.append", "FCN_NetModel.Net.SqueezeUpsample.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "FCN_NetModel.Net.PSPLayers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.NET_FCN_RESNET101.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "NumClasses", "=", "2", ")", ":", "\n", "# Generate standart FCN net for image segmentation with only image as input (attention layers will be added at next function", "\n", "# --------------Build layers for standart FCN with only image as input------------------------------------------------------", "\n", "            ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# ---------------Load pretrained  Resnet 50 encoder----------------------------------------------------------", "\n", "self", ".", "Encoder", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "# ---------------Create Pyramid Scene Parsing PSP layer -------------------------------------------------------------------------", "\n", "self", ".", "PSPScales", "=", "[", "1", ",", "1", "/", "2", ",", "1", "/", "4", ",", "1", "/", "8", "]", "\n", "\n", "self", ".", "PSPLayers", "=", "nn", ".", "ModuleList", "(", ")", "# [] # Layers for decoder", "\n", "for", "Ps", "in", "self", ".", "PSPScales", ":", "\n", "                ", "self", ".", "PSPLayers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "1024", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ")", ")", "\n", "# nn.BatchNorm2d(1024)))", "\n", "", "self", ".", "PSPSqueeze", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4096", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "# ------------------Skip conncetion layers for upsampling-----------------------------------------------------------------------------", "\n", "self", ".", "SkipConnections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "SkipConnections", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SkipConnections", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SkipConnections", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "# ------------------Skip squeeze applied to the (concat of upsample+skip conncection layers)-----------------------------------------------------------------------------", "\n", "self", ".", "SqueezeUpsample", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "SqueezeUpsample", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SqueezeUpsample", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "512", ",", "256", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SqueezeUpsample", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "128", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "\n", "# ----------------Final prediction layer predict class per region/pixel------------------------------------------------------------------------------------------", "\n", "self", ".", "FinalPrdiction", "=", "nn", ".", "Conv2d", "(", "128", ",", "NumClasses", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.FCN_NetModel.Net.AddAttententionLayer": [[71, 80], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "AddAttententionLayer", "(", "self", ")", ":", "\n", "                ", "self", ".", "AttentionLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ROIEncoder", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "ROIEncoder", ".", "bias", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "ROIEncoder", ".", "bias", ".", "data", ".", "shape", ")", "\n", "self", ".", "ROIEncoder", ".", "weight", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "ROIEncoder", ".", "weight", ".", "data", ".", "shape", ")", "\n", "\n", "self", ".", "PointerEncoder", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "PointerEncoder", ".", "bias", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "ROIEncoder", ".", "bias", ".", "data", ".", "shape", ")", "\n", "self", ".", "PointerEncoder", ".", "weight", ".", "data", "=", "torch", ".", "ones", "(", "self", ".", "ROIEncoder", ".", "weight", ".", "data", ".", "shape", ")", "\n", "##########################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.FCN_NetModel.Net.forward": [[81, 154], ["torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "range", "FCN_NetModel.Net.Encoder.conv1", "FCN_NetModel.Net.Encoder.bn1", "FCN_NetModel.Net.ROIEncoder", "FCN_NetModel.Net.PointerEncoder", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "FCN_NetModel.Net.Encoder.relu", "FCN_NetModel.Net.Encoder.maxpool", "FCN_NetModel.Net.Encoder.layer1", "SkipConFeatures.append", "FCN_NetModel.Net.Encoder.layer2", "SkipConFeatures.append", "FCN_NetModel.Net.Encoder.layer3", "SkipConFeatures.append", "FCN_NetModel.Net.Encoder.layer4", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FCN_NetModel.Net.PSPSqueeze", "range", "FCN_NetModel.Net.FinalPrdiction", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.max", "torch.cat.max", "torch.cat.max", "ROImap.cuda.cuda.cuda", "Pointermap.cuda.cuda.cuda", "InpImages.cuda.cuda.cuda", "len", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "PSPLayer", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "PSPFeatures.append", "len", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "tuple", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "ROI.astype", "Pointer.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Images.astype"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Images", ",", "Pointer", ",", "ROI", ",", "UseGPU", "=", "True", ")", ":", "\n", "\n", "#----------------------Convert image to pytorch and normalize values-----------------------------------------------------------------", "\n", "                ", "RGBMean", "=", "[", "123.68", ",", "116.779", ",", "103.939", "]", "\n", "RGBStd", "=", "[", "65", ",", "65", ",", "65", "]", "\n", "InpImages", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "Images", ".", "astype", "(", "float", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "#-------------------Convert ROI mask and pointer point mask into pytorch format----------------------------------------------------------------", "\n", "ROImap", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "ROI", ".", "astype", "(", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "Pointermap", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "Pointer", ".", "astype", "(", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "#---------------Convert to cuda gpu-------------------------------------------------------------------------------------------------------------------", "\n", "if", "UseGPU", ":", "\n", "                    ", "ROImap", "=", "ROImap", ".", "cuda", "(", ")", "\n", "Pointermap", "=", "Pointermap", ".", "cuda", "(", ")", "\n", "InpImages", "=", "InpImages", ".", "cuda", "(", ")", "\n", "#----------------Normalize image values-----------------------------------------------------------------------------------------------------------", "\n", "", "for", "i", "in", "range", "(", "len", "(", "RGBMean", ")", ")", ":", "InpImages", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "(", "InpImages", "[", ":", ",", "i", ",", ":", ",", ":", "]", "-", "RGBMean", "[", "i", "]", ")", "/", "RGBStd", "[", "i", "]", "# normalize image values", "\n", "x", "=", "InpImages", "\n", "#--------------------------------------------------------------------------------------------------------------------------", "\n", "SkipConFeatures", "=", "[", "]", "# Store features map of layers used for skip connection", "\n", "#---------------Run Encoder first layer-----------------------------------------------------------------------------------------------------", "\n", "x", "=", "self", ".", "Encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "bn1", "(", "x", ")", "\n", "#------------------------Convery ROI mask and pointer map into attention layer and merge with image feature mask-----------------------------------------------------------", "\n", "r", "=", "self", ".", "ROIEncoder", "(", "ROImap", ")", "# Generate attention map from ROI mask", "\n", "pt", "=", "self", ".", "PointerEncoder", "(", "Pointermap", ")", "# Generate attention Mask from Pointer point", "\n", "sp", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "pt", "=", "nn", ".", "functional", ".", "interpolate", "(", "pt", ",", "size", "=", "sp", ",", "mode", "=", "'bilinear'", ")", "#", "\n", "r", "=", "nn", ".", "functional", ".", "interpolate", "(", "r", ",", "size", "=", "sp", ",", "mode", "=", "'bilinear'", ")", "# Resize", "\n", "x", "=", "x", "*", "pt", "+", "r", "# Merge feature mask and attention maps", "\n", "#-------------------------Run remaining encoder layer------------------------------------------------------------------------------------------", "\n", "x", "=", "self", ".", "Encoder", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer1", "(", "x", ")", "\n", "SkipConFeatures", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer2", "(", "x", ")", "\n", "SkipConFeatures", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer3", "(", "x", ")", "\n", "SkipConFeatures", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer4", "(", "x", ")", "\n", "#------------------Run psp  Layers----------------------------------------------------------------------------------------------", "\n", "PSPSize", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# Size of the original features map", "\n", "\n", "PSPFeatures", "=", "[", "]", "# Results of various of scaled procceessing", "\n", "for", "i", ",", "PSPLayer", "in", "enumerate", "(", "self", ".", "PSPLayers", ")", ":", "# run PSP layers scale features map to various of sizes apply convolution and concat the results", "\n", "                      ", "NewSize", "=", "(", "np", ".", "array", "(", "PSPSize", ")", "*", "self", ".", "PSPScales", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "NewSize", "[", "0", "]", "<", "1", ":", "NewSize", "[", "0", "]", "=", "1", "\n", "if", "NewSize", "[", "1", "]", "<", "1", ":", "NewSize", "[", "1", "]", "=", "1", "\n", "\n", "# print(str(i)+\")\"+str(NewSize))", "\n", "y", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "tuple", "(", "NewSize", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "#print(y.shape)", "\n", "y", "=", "PSPLayer", "(", "y", ")", "\n", "y", "=", "nn", ".", "functional", ".", "interpolate", "(", "y", ",", "PSPSize", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "#      if np.min(PSPSize*self.ScaleRates[i])<0.4: y*=0", "\n", "PSPFeatures", ".", "append", "(", "y", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "PSPFeatures", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "PSPSqueeze", "(", "x", ")", "\n", "#----------------------------Upsample features map  and combine with layers from encoder using skip  connection-----------------------------------------------------------------------------------------------------------", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SkipConnections", ")", ")", ":", "\n", "                  ", "sp", "=", "(", "SkipConFeatures", "[", "-", "1", "-", "i", "]", ".", "shape", "[", "2", "]", ",", "SkipConFeatures", "[", "-", "1", "-", "i", "]", ".", "shape", "[", "3", "]", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "sp", ",", "mode", "=", "'bilinear'", ")", "#Resize", "\n", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "SkipConnections", "[", "i", "]", "(", "SkipConFeatures", "[", "-", "1", "-", "i", "]", ")", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "SqueezeUpsample", "[", "i", "]", "(", "x", ")", "\n", "#---------------------------------Final prediction-------------------------------------------------------------------------------", "\n", "", "x", "=", "self", ".", "FinalPrdiction", "(", "x", ")", "# Make prediction per pixel", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "InpImages", ".", "shape", "[", "2", ":", "4", "]", ",", "mode", "=", "'bilinear'", ")", "# Resize to original image size", "\n", "#********************************************************************************************************", "\n", "#x = nn.UpsamplingBilinear2d(size=InpImages.shape[2:4])(x)", "\n", "Prob", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "# Calculate class probability per pixel", "\n", "tt", ",", "Labels", "=", "x", ".", "max", "(", "1", ")", "# Find label per pixel", "\n", "return", "Prob", ",", "Labels", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.TRAIN.UpdateFractaleLearninRate": [[19, 23], ["TRAIN.UpdateFractaleLearninRate"], "function", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.TRAIN.UpdateFractaleLearninRate"], ["def", "UpdateFractaleLearninRate", "(", "LearningRate", ",", "ind", "=", "1", ")", ":", "\n", "    ", "LearningRate", "[", "ind", "]", "*=", "0.7", "\n", "if", "LearningRate", "[", "ind", "]", "<", "5e-8", ":", "UpdateFractaleLearninRate", "(", "LearningRate", ",", "ind", "+", "1", ")", "\n", "LearningRate", "[", "ind", "-", "1", "]", "=", "LearningRate", "[", "ind", "]", "\n", "##################################Input paramaters#########################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.ConvertLabelToOneHotEncoding.LabelConvert": [[3, 12], ["torch.from_numpy().cuda", "torch.from_numpy().cuda.size", "torch.zeros().cuda", "range", "torch.autograd.Variable", "range", "torch.from_numpy", "torch.zeros"], "function", ["None"], ["def", "LabelConvert", "(", "label", ",", "NumClasses", "=", "2", ")", ":", "\n", "    ", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "cuda", "(", ")", "\n", "# create one-hot encoding", "\n", "batchsize", ",", "h", ",", "w", "=", "label", ".", "size", "(", ")", "\n", "target", "=", "torch", ".", "zeros", "(", "batchsize", ",", "NumClasses", ",", "h", ",", "w", ")", ".", "cuda", "(", ")", "\n", "for", "c", "in", "range", "(", "NumClasses", ")", ":", "\n", "       ", "for", "b", "in", "range", "(", "batchsize", ")", ":", "\n", "         ", "target", "[", "b", "]", "[", "c", "]", "[", "label", "[", "b", "]", "==", "c", "]", "=", "1", "\n", "", "", "return", "torch", ".", "autograd", ".", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.__init__": [[21, 57], ["os.listdir", "open", "json.load", "random.shuffle", "CocoPanoptic_Reader.Reader.StartLoadBatch", "CocoPanoptic_Reader.Reader.FileList.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], ["    ", "def", "__init__", "(", "self", ",", "ImageDir", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/train2017\"", ",", "AnnotationDir", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/COCO_panoptic/panoptic_train2017/panoptic_train2017\"", ",", "DataFile", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/COCO_panoptic/panoptic_train2017.json\"", ",", "MaxBatchSize", "=", "100", ",", "MinSize", "=", "250", ",", "MaxSize", "=", "800", ",", "MaxPixels", "=", "800", "*", "800", "*", "5", ",", "AnnotationFileType", "=", "\"png\"", ",", "ImageFileType", "=", "\"jpg\"", ",", "UnlabeledTag", "=", "0", ",", "Suffle", "=", "True", ",", "TrainingMode", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "ImageDir", "=", "ImageDir", "# Image dir", "\n", "self", ".", "AnnotationDir", "=", "AnnotationDir", "# File containing image annotation", "\n", "self", ".", "MaxBatchSize", "=", "MaxBatchSize", "# Max number of image in batch", "\n", "self", ".", "MinSize", "=", "MinSize", "# Min image width and hight in pixels", "\n", "self", ".", "MaxSize", "=", "MaxSize", "#Max image width and hight in pixels", "\n", "self", ".", "MaxPixels", "=", "MaxPixels", "# Max number of pixel in all the batch (reduce to solve oom out of memory issues)", "\n", "self", ".", "AnnotationFileType", "=", "AnnotationFileType", "# What is the the type (ending) of the annotation files", "\n", "self", ".", "ImageFileType", "=", "ImageFileType", "# What is the the type (ending) of the image files", "\n", "self", ".", "DataFile", "=", "DataFile", "# Json File that contain data on the annotation of each image", "\n", "self", ".", "UnlabeledTag", "=", "UnlabeledTag", "# Value of unlabled region in the annotation map (usually 0)", "\n", "self", ".", "ReadStuff", "=", "True", "# Read things that are not instace object (like sky or grass)", "\n", "self", ".", "SplitThings", "=", "False", "#True # Split instance of things (object) to connected component region and use each connected region as an instance", "\n", "self", ".", "SplitStuff", "=", "True", "# Split instance of things (object) to connected component region and use each connected region as instance", "\n", "self", ".", "SplitCrowd", "=", "True", "# Split areas marked as Crowds using connected componennt", "\n", "self", ".", "IgnoreCrowds", "=", "True", "# Ignore areas marked as crowd", "\n", "self", ".", "PickBySize", "=", "True", "# Pick instances of with probablity proportional to their sizes", "\n", "self", ".", "StuffAreaFactor", "=", "0.225", "# Since we pick segments according to their size stuf segments (ground, sky) will have higher  probability to be chosen compare to things (objets) this factor balance this", "\n", "self", ".", "MinSegSize", "=", "100", "# Ignore segments which are smaller then this size in pixel", "\n", "self", ".", "Epoch", "=", "0", "# Training Epoch", "\n", "self", ".", "itr", "=", "0", "# Training iteratation", "\n", "self", ".", "suffle", "=", "Suffle", "# Suffle list of file", "\n", "\n", "#........................Read data file................................................................................................................", "\n", "with", "open", "(", "DataFile", ")", "as", "json_file", ":", "\n", "            ", "self", ".", "AnnData", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "#-------------------Get All files in folder--------------------------------------------------------------------------------------", "\n", "", "self", ".", "FileList", "=", "[", "]", "\n", "for", "FileName", "in", "os", ".", "listdir", "(", "AnnotationDir", ")", ":", "\n", "            ", "if", "AnnotationFileType", "in", "FileName", ":", "\n", "                ", "self", ".", "FileList", ".", "append", "(", "FileName", ")", "\n", "", "", "if", "self", ".", "suffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "FileList", ")", "\n", "", "if", "TrainingMode", ":", "self", ".", "StartLoadBatch", "(", ")", "\n", "##############################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.GetAnnnotationData": [[59, 63], ["None"], "methods", ["None"], ["", "def", "GetAnnnotationData", "(", "self", ",", "AnnFileName", ")", ":", "\n", "            ", "for", "item", "in", "self", ".", "AnnData", "[", "'annotations'", "]", ":", "# Get Annotation Data", "\n", "                ", "if", "(", "item", "[", "\"file_name\"", "]", "==", "AnnFileName", ")", ":", "\n", "                    ", "return", "(", "item", "[", "'segments_info'", "]", ")", "\n", "############################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.GetCategoryData": [[65, 69], ["None"], "methods", ["None"], ["", "", "", "def", "GetCategoryData", "(", "self", ",", "ID", ")", ":", "\n", "                ", "for", "item", "in", "self", ".", "AnnData", "[", "'categories'", "]", ":", "\n", "                    ", "if", "item", "[", "\"id\"", "]", "==", "ID", ":", "\n", "                        ", "return", "item", "[", "\"name\"", "]", ",", "item", "[", "\"isthing\"", "]", "\n", "##########################################################################################################################################3333", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.GetConnectedSegment": [[71, 81], ["cv2.connectedComponentsWithStats", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "Seg.astype"], "methods", ["None"], ["", "", "", "def", "GetConnectedSegment", "(", "self", ",", "Seg", ")", ":", "\n", "            ", "[", "NumCCmp", ",", "CCmpMask", ",", "CCompBB", ",", "CCmpCntr", "]", "=", "cv2", ".", "connectedComponentsWithStats", "(", "Seg", ".", "astype", "(", "np", ".", "uint8", ")", ")", "# apply connected component", "\n", "Mask", "=", "np", ".", "zeros", "(", "[", "NumCCmp", ",", "Seg", ".", "shape", "[", "0", "]", ",", "Seg", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "bool", ")", "\n", "BBox", "=", "np", ".", "zeros", "(", "[", "NumCCmp", ",", "4", "]", ")", "\n", "Sz", "=", "np", ".", "zeros", "(", "[", "NumCCmp", "]", ",", "np", ".", "uint32", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "NumCCmp", ")", ":", "\n", "                ", "Mask", "[", "i", "-", "1", "]", "=", "(", "CCmpMask", "==", "i", ")", "\n", "BBox", "[", "i", "-", "1", "]", "=", "CCompBB", "[", "i", "]", "[", ":", "4", "]", "\n", "Sz", "[", "i", "-", "1", "]", "=", "CCompBB", "[", "i", "]", "[", "4", "]", "#segment Size", "\n", "", "return", "Mask", ",", "BBox", ",", "Sz", ",", "NumCCmp", "-", "1", "\n", "#################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.PickRandomSegment": [[83, 96], ["Sgs.pop", "range", "numpy.random.randint", "numpy.random.randint", "Sgs.__len__", "len"], "methods", ["None"], ["", "def", "PickRandomSegment", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "\n", "            ", "if", "self", ".", "PickBySize", ":", "# Pick random segment with probability proportional to size", "\n", "                ", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "TotAreas", "=", "0", "\n", "for", "ind", "in", "range", "(", "Sgs", ".", "__len__", "(", ")", ")", ":", "\n", "                    ", "TotAreas", "+=", "Sgs", "[", "ind", "]", "[", "'Area'", "]", "\n", "if", "TotAreas", ">=", "r", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "ind", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "Sgs", ")", ")", "#Pick Random segment with equal probability", "\n", "# print(\"ind\" + str(ind))", "\n", "SelectedSg", "=", "Sgs", ".", "pop", "(", "ind", ")", "\n", "SumAreas", "-=", "SelectedSg", "[", "\"Area\"", "]", "\n", "return", "SelectedSg", ",", "SumAreas", "\n", "##########################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.GenerateRandomROIMask": [[98, 117], ["numpy.ones", "numpy.random.randint", "CocoPanoptic_Reader.Reader.PickRandomSegment", "numpy.random.randint", "numpy.random.randint", "Sgs.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegment"], ["", "def", "GenerateRandomROIMask", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "\n", "\n", "            ", "ROI", "=", "np", ".", "ones", "(", "Sgs", "[", "0", "]", "[", "\"Mask\"", "]", ".", "shape", ")", "\n", "if", "SumAreas", "<=", "0", "and", "np", ".", "random", ".", "randint", "(", "6", ")", "==", "0", ":", "return", "ROI", "\n", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "\n", "while", "(", "SumAreas", ">", "r", ")", ":", "\n", "                ", "SumAreasOld", "=", "SumAreas", "\n", "SelectedSg", ",", "SumAreas", "=", "self", ".", "PickRandomSegment", "(", "Sgs", ",", "SumAreas", ")", "\n", "# misc.imshow(SelectedSg[\"Mask\"].astype(float))", "\n", "if", "SumAreas", ">", "r", ":", "\n", "                    ", "ROI", "[", "SelectedSg", "[", "\"Mask\"", "]", "]", "=", "0", "\n", "#    misc.imshow(ROI.astype(float))", "\n", "", "else", ":", "\n", "                    ", "if", "np", ".", "random", ".", "randint", "(", "SumAreas", ",", "SumAreasOld", ")", ">", "r", ":", "# and (SumAreas>1000):", "\n", "                        ", "ROI", "[", "SelectedSg", "[", "\"Mask\"", "]", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "Sgs", ".", "append", "(", "SelectedSg", ")", "\n", "", "", "", "return", "(", "ROI", ")", "\n", "#############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.PickRandomPointInSegment": [[120, 137], ["int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "cv2.erode", "Seg[].astype", "numpy.ones", "cv2.erode.sum", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "PickRandomPointInSegment", "(", "self", ",", "Seg", ",", "ErodeMask", "=", "10", ")", ":", "\n", "\n", "            ", "x0", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "0", "]", ")", ")", "# Bounding box x position", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "y0", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "1", "]", ")", ")", "# Bounding box y position", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "if", "ErodeMask", ":", "\n", "                ", "Msk", "=", "cv2", ".", "erode", "(", "Seg", "[", "\"Mask\"", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "ErodeMask", ")", "\n", "if", "Msk", ".", "sum", "(", ")", "==", "0", ":", "Msk", "=", "Seg", "[", "\"Mask\"", "]", "\n", "", "else", ":", "\n", "                ", "Msk", "=", "Seg", "[", "\"Mask\"", "]", "\n", "\n", "", "while", "(", "True", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "randint", "(", "Wbox", ")", "+", "x0", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "Hbox", ")", "+", "y0", "\n", "if", "(", "Msk", "[", "y", ",", "x", "]", ")", "==", "1", ":", "\n", "                    ", "return", "x", ",", "y", "\n", "##############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.DisplayTrainExample": [[139, 161], ["Img2.copy", "ROI2.copy", "Segment2.copy", "SelectedPoint2.copy", "scipy.imshow", "cv2.dilate", "scipy.imshow", "scipy.imshow", "scipy.imshow", "scipy.imshow", "cv2.dilate.astype", "numpy.ones", "cv2.dilate.astype", "cv2.dilate.astype", "Segment2.copy.astype", "ROI2.copy.astype", "Segment2.copy.astype", "cv2.dilate.astype", "cv2.dilate.astype", "ROI2.copy.astype", "Segment2.copy.astype", "cv2.dilate.astype"], "methods", ["None"], ["", "", "", "def", "DisplayTrainExample", "(", "self", ",", "Img2", ",", "ROI2", ",", "Segment2", ",", "SelectedPoint2", ")", ":", "\n", "        ", "Img", "=", "Img2", ".", "copy", "(", ")", "\n", "ROI", "=", "ROI2", ".", "copy", "(", ")", "\n", "Segment", "=", "Segment2", ".", "copy", "(", ")", "\n", "SelectedPoint", "=", "SelectedPoint2", ".", "copy", "(", ")", "\n", "misc", ".", "imshow", "(", "Img", ")", "\n", "SelectedPoint", "=", "cv2", ".", "dilate", "(", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "1", ")", "\n", "Img", "[", "SelectedPoint", "]", "[", ":", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "Img", "[", ":", ",", ":", ",", "0", "]", "=", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "+", "(", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", ")", "*", "Img", "[", ":", ",", ":", ",", "0", "]", "\n", "Img", "[", ":", ",", ":", ",", "1", "]", "*=", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "Img", "[", ":", ",", ":", ",", "2", "]", "*=", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "Img", "[", ":", ",", ":", ",", "0", "]", "*=", "1", "-", "(", "ROI", ".", "astype", "(", "np", ".", "uint8", ")", "-", "Segment", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "#Img[:, :, 1] += ROI.astype(np.uint8)*40", "\n", "Img", "[", ":", ",", ":", ",", "2", "]", "*=", "1", "-", "Segment", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "#  misc.imshow(Img)", "\n", "#print(ROI.mean())", "\n", "ROI", "[", "0", ",", "0", "]", "=", "0", "\n", "misc", ".", "imshow", "(", "ROI", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "Segment", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "SelectedPoint", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "Img", ")", "\n", "#############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.CropResize": [[163, 231], ["numpy.max", "int", "int", "numpy.min", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "int", "int", "cv2.resize", "cv2.resize", "cv2.resize", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.random.rand", "numpy.max", "numpy.max", "cv2.resize.astype", "cv2.resize.astype", "numpy.random.randint", "numpy.random.randint", "cv2.resize.astype", "cv2.resize.astype", "float", "float", "numpy.float32", "numpy.max.astype"], "methods", ["None"], ["", "def", "CropResize", "(", "self", ",", "Img", ",", "Mask", ",", "bbox", ",", "ROImask", ",", "Px", ",", "Py", ",", "Hb", ",", "Wb", ")", ":", "\n", "# ========================resize image if it too small to the batch size==================================================================================", "\n", "\n", "        ", "[", "h", ",", "w", ",", "d", "]", "=", "Img", ".", "shape", "\n", "Rs", "=", "np", ".", "max", "(", "(", "Hb", "/", "h", ",", "Wb", "/", "w", ")", ")", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "2", "]", ")", ")", "# Segment Bounding box width", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "3", "]", ")", ")", "# Segment Bounding box height", "\n", "\n", "\n", "Bs", "=", "np", ".", "min", "(", "(", "Hb", "/", "Hbox", ",", "Wb", "/", "Wbox", ")", ")", "\n", "if", "Rs", ">", "1", "or", "Bs", "<", "1", "or", "np", ".", "random", ".", "rand", "(", ")", "<", "0.3", ":", "# Resize image and mask to batch size if mask is smaller then batch or if segment bounding box larger then batch image size", "\n", "            ", "h", "=", "int", "(", "np", ".", "max", "(", "(", "h", "*", "Rs", ",", "Hb", ")", ")", ")", "\n", "w", "=", "int", "(", "np", ".", "max", "(", "(", "w", "*", "Rs", ",", "Wb", ")", ")", ")", "\n", "Img", "=", "cv2", ".", "resize", "(", "Img", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "Mask", "=", "cv2", ".", "resize", "(", "Mask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "ROImask", "=", "cv2", ".", "resize", "(", "ROImask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "bbox", "=", "(", "np", ".", "float32", "(", "bbox", ")", "*", "Rs", ".", "astype", "(", "np", ".", "float", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "Px", "=", "int", "(", "float", "(", "Px", ")", "*", "Rs", ")", "\n", "Py", "=", "int", "(", "float", "(", "Py", ")", "*", "Rs", ")", "\n", "if", "Px", ">=", "w", ":", "\n", "                ", "Px", "=", "w", "-", "1", "\n", "", "if", "Py", ">=", "h", ":", "\n", "                ", "Py", "=", "h", "-", "1", "\n", "\n", "# =======================Crop image to fit batch size===================================================================================", "\n", "", "", "x1", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "0", "]", ")", ")", "# Bounding box x position", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "y1", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "1", "]", ")", ")", "# Bounding box y position", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "\n", "if", "Wb", ">", "Wbox", ":", "\n", "            ", "Xmax", "=", "np", ".", "min", "(", "(", "w", "-", "Wb", ",", "x1", ")", ")", "\n", "Xmin", "=", "np", ".", "max", "(", "(", "0", ",", "x1", "-", "(", "Wb", "-", "Wbox", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Xmin", "=", "x1", "\n", "Xmax", "=", "np", ".", "min", "(", "(", "w", "-", "Wb", ",", "x1", "+", "(", "Wbox", "-", "Wb", ")", "+", "1", ")", ")", "\n", "\n", "", "if", "Hb", ">", "Hbox", ":", "\n", "            ", "Ymax", "=", "np", ".", "min", "(", "(", "h", "-", "Hb", ",", "y1", ")", ")", "\n", "Ymin", "=", "np", ".", "max", "(", "(", "0", ",", "y1", "-", "(", "Hb", "-", "Hbox", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Ymin", "=", "y1", "\n", "Ymax", "=", "np", ".", "min", "(", "(", "h", "-", "Hb", ",", "y1", "+", "(", "Hbox", "-", "Hb", ")", "+", "1", ")", ")", "\n", "\n", "", "if", "Ymax", "<=", "Ymin", ":", "y0", "=", "Ymin", "\n", "else", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "y0", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "Ymin", ",", "high", "=", "Ymax", "+", "1", ")", "\n", "if", "(", "y0", "<=", "Py", ")", "and", "Py", "<", "(", "y0", "+", "Hb", ")", ":", "break", "\n", "", "", "if", "Xmax", "<=", "Xmin", ":", "x0", "=", "Xmin", "\n", "else", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "Xmin", ",", "high", "=", "Xmax", "+", "1", ")", "\n", "if", "(", "x0", "<=", "Px", ")", "and", "Px", "<", "(", "x0", "+", "Wb", ")", ":", "break", "\n", "# Img[:,:,1]*=Mask", "\n", "# misc.imshow(Img)", "\n", "", "", "Px", "-=", "x0", "\n", "Py", "-=", "y0", "\n", "Img", "=", "Img", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", ",", ":", "]", "\n", "Mask", "=", "Mask", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", "]", "\n", "ROImask", "=", "ROImask", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", "]", "\n", "#------------------------------------------Verify shape match the batch shape----------------------------------------------------------------------------------------", "\n", "if", "not", "(", "Img", ".", "shape", "[", "0", "]", "==", "Hb", "and", "Img", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "Img", "=", "cv2", ".", "resize", "(", "Img", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "not", "(", "Mask", ".", "shape", "[", "0", "]", "==", "Hb", "and", "Mask", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "Mask", "=", "cv2", ".", "resize", "(", "Mask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "if", "not", "(", "ROImask", ".", "shape", "[", "0", "]", "==", "Hb", "and", "ROImask", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "ROImask", "=", "cv2", ".", "resize", "(", "ROImask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "#-----------------------------------------------------------------------------------------------------------------------------------", "\n", "return", "Img", ",", "Mask", ",", "ROImask", ",", "Px", ",", "Py", "\n", "# misc.imshow(Img)", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.GeneratListOfAllSegments": [[236, 297], ["CocoPanoptic_Reader.Reader.GetAnnnotationData", "CocoPanoptic_Reader.Reader.GetCategoryData", "CocoPanoptic_Reader.Reader.GetConnectedSegment", "range", "CocoPanoptic_Reader.Reader.GetConnectedSegment", "range", "Sgs.append", "Sgs.append", "Sgs.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetAnnnotationData", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetCategoryData", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment"], ["", "def", "GeneratListOfAllSegments", "(", "self", ",", "Ann", ",", "Ann_name", ",", "AddUnLabeled", "=", "False", ",", "IgnoreSmallSeg", "=", "True", ")", ":", "\n", "        ", "AnnList", "=", "self", ".", "GetAnnnotationData", "(", "Ann_name", ")", "\n", "Sgs", "=", "[", "]", "# List of segments and their info", "\n", "SumAreas", "=", "0", "# Sum areas of all segments up to image", "\n", "for", "an", "in", "AnnList", ":", "\n", "            ", "an", "[", "\"name\"", "]", ",", "an", "[", "\"isthing\"", "]", "=", "self", ".", "GetCategoryData", "(", "an", "[", "\"category_id\"", "]", ")", "\n", "if", "(", "an", "[", "\"iscrowd\"", "]", "and", "self", ".", "IgnoreCrowds", ")", "or", "(", "not", "an", "[", "\"isthing\"", "]", "and", "not", "self", ".", "ReadStuff", ")", ":", "\n", "                ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "if", "(", "an", "[", "\"isthing\"", "]", "and", "self", ".", "SplitThings", ")", "or", "(", "an", "[", "\"isthing\"", "]", "==", "False", "and", "self", ".", "SplitStuff", ")", "or", "(", "an", "[", "\"iscrowd\"", "]", "and", "self", ".", "SplitCrowd", ")", ":", "#Things are objects that have instances", "\n", "                ", "TMask", ",", "TBBox", ",", "TSz", ",", "TNm", "=", "self", ".", "GetConnectedSegment", "(", "Ann", "==", "an", "[", "'id'", "]", ")", "# Split to connected components", "\n", "for", "i", "in", "range", "(", "TNm", ")", ":", "\n", "                    ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "TMask", "[", "i", "]", "\n", "seg", "[", "\"BBox\"", "]", "=", "TBBox", "[", "i", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "TSz", "[", "i", "]", "\n", "if", "(", "not", "an", "[", "\"isthing\"", "]", ")", ":", "seg", "[", "\"Area\"", "]", "*=", "self", ".", "StuffAreaFactor", "\n", "if", "seg", "[", "\"Area\"", "]", "<", "self", ".", "MinSegSize", "and", "IgnoreSmallSeg", ":", "\n", "                        ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "seg", "[", "\"NumParts\"", "]", "=", "TNm", "\n", "seg", "[", "\"IsSplit\"", "]", "=", "TNm", ">", "1", "\n", "seg", "[", "\"IsThing\"", "]", "=", "an", "[", "\"isthing\"", "]", "\n", "seg", "[", "\"Name\"", "]", "=", "an", "[", "\"name\"", "]", "\n", "seg", "[", "\"IsCrowd\"", "]", "=", "an", "[", "\"iscrowd\"", "]", "\n", "seg", "[", "\"CatId\"", "]", "=", "an", "[", "\"category_id\"", "]", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "True", "\n", "SumAreas", "+=", "seg", "[", "\"Area\"", "]", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "", "", "else", ":", "# none object classes such as sky", "\n", "                    ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "(", "Ann", "==", "an", "[", "'id'", "]", ")", "\n", "seg", "[", "\"BBox\"", "]", "=", "an", "[", "\"bbox\"", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "an", "[", "\"area\"", "]", "\n", "if", "(", "not", "an", "[", "\"isthing\"", "]", ")", ":", "seg", "[", "\"Area\"", "]", "*=", "self", ".", "StuffAreaFactor", "\n", "if", "seg", "[", "\"Area\"", "]", "<", "self", ".", "MinSegSize", "and", "IgnoreSmallSeg", ":", "# Ignore very small segments", "\n", "                        ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "seg", "[", "\"NumParts\"", "]", "=", "1", "\n", "seg", "[", "\"IsSplit\"", "]", "=", "False", "\n", "seg", "[", "\"IsThing\"", "]", "=", "an", "[", "\"isthing\"", "]", "\n", "seg", "[", "\"Name\"", "]", "=", "an", "[", "\"name\"", "]", "\n", "seg", "[", "\"IsCrowd\"", "]", "=", "an", "[", "\"iscrowd\"", "]", "\n", "seg", "[", "\"CatId\"", "]", "=", "an", "[", "\"category_id\"", "]", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "True", "\n", "SumAreas", "+=", "seg", "[", "\"Area\"", "]", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "\n", "", "", "if", "AddUnLabeled", ":", "#Add unlabeled region as additional segments", "\n", "            ", "TMask", ",", "TBBox", ",", "TSz", ",", "TNm", "=", "self", ".", "GetConnectedSegment", "(", "Ann", "==", "self", ".", "UnlabeledTag", ")", "# Split to connected components", "\n", "for", "i", "in", "range", "(", "TNm", ")", ":", "\n", "                ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "TMask", "[", "i", "]", "\n", "seg", "[", "\"BBox\"", "]", "=", "TBBox", "[", "i", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "TSz", "[", "i", "]", "\n", "seg", "[", "\"NumParts\"", "]", "=", "TNm", "\n", "seg", "[", "\"Name\"", "]", "=", "\"unlabeled\"", "\n", "seg", "[", "\"CatId\"", "]", "=", "self", ".", "UnlabeledTag", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "False", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "", "", "return", "Sgs", ",", "SumAreas", "\n", "##################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.LoadNextGivenROI": [[298, 351], ["numpy.zeros", "numpy.expand_dims().astype", "CocoPanoptic_Reader.Reader.FileList[].replace", "cv2.imread", "cv2.imread", "CocoPanoptic_Reader.rgb2id", "numpy.ones", "CocoPanoptic_Reader.Reader.GeneratListOfAllSegments", "numpy.expand_dims().astype", "numpy.expand_dims().astype", "rgb2id.astype", "numpy.random.randint", "numpy.random.randint", "numpy.expand_dims", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments"], ["", "def", "LoadNextGivenROI", "(", "self", ",", "NewImg", "=", "True", ")", ":", "\n", "# This function is used serially on the same image cascade full image segmentation", "\n", "# Pick random point on a given ROI mask", "\n", "# return the point the ROI mask and the image", "\n", "#-------------If new image load the next image and annotation data--------------------------------------------------", "\n", "            ", "if", "NewImg", ":", "\n", "                ", "Img_name", "=", "self", ".", "FileList", "[", "self", ".", "itr", "]", ".", "replace", "(", "self", ".", "AnnotationFileType", ",", "self", ".", "ImageFileType", ")", "\n", "Ann_name", "=", "self", ".", "FileList", "[", "self", ".", "itr", "]", "# Get label image name", "\n", "#  print(Ann_name)", "\n", "\n", "# print(Img_name)", "\n", "# print(Ann_name)", "\n", "Img", "=", "cv2", ".", "imread", "(", "self", ".", "ImageDir", "+", "\"/\"", "+", "Img_name", ")", "# Load Image", "\n", "Img", "=", "Img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "(", "Img", ".", "ndim", "==", "2", ")", ":", "# If grayscale turn to rgb", "\n", "                    ", "Img", "=", "np", ".", "expand_dims", "(", "Img", ",", "3", ")", "\n", "Img", "=", "np", ".", "concatenate", "(", "[", "Img", ",", "Img", ",", "Img", "]", ",", "axis", "=", "2", ")", "\n", "", "Img", "=", "Img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# Get first 3 channels incase there are more", "\n", "\n", "Ann", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "Ann_name", ")", "# Load Annotation", "\n", "Ann", "=", "Ann", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "self", ".", "AnnColor", "=", "Ann", "\n", "Ann", "=", "rgb2id", "(", "Ann", ")", "\n", "# misc.imshow((Ann==0).astype(float))", "\n", "# misc.imshow(Img)", "\n", "H", ",", "W", "=", "Ann", ".", "shape", "\n", "\n", "ROIMap", "=", "np", ".", "ones", "(", "[", "H", ",", "W", "]", ")", "# Generate ROI mask that cover the full image", "\n", "#  AnnList = self.GetAnnnotationData(Ann_name)", "\n", "Sgs", ",", "SumAreas", "=", "self", ".", "GeneratListOfAllSegments", "(", "Ann", ",", "Ann_name", ",", "AddUnLabeled", "=", "True", ",", "IgnoreSmallSeg", "=", "False", ")", "\n", "self", ".", "Sgs", "=", "Sgs", "\n", "self", ".", "BImgs", "=", "np", ".", "expand_dims", "(", "Img", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#    self.BAnnList = AnnList", "\n", "self", ".", "BROIMask", "=", "np", ".", "expand_dims", "(", "ROIMap", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "BAnn", "=", "Ann", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#-----------------Load", "\n", "", "else", ":", "\n", "#    Img = self.BImgs[0]", "\n", "\n", "#    AnnList = self.BAnnList", "\n", "                 ", "ROIMap", "=", "self", ".", "BROIMask", "[", "0", "]", "\n", "Ann", "=", "self", ".", "BAnn", "\n", "H", ",", "W", "=", "Ann", ".", "shape", "\n", "# self.BCat = np.zeros((BatchSize", "\n", "", "while", "(", "True", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "if", "(", "ROIMap", "[", "y", ",", "x", "]", ")", "==", "1", ":", "break", "\n", "", "PointerMask", "=", "np", ".", "zeros", "(", "Ann", ".", "shape", ",", "dtype", "=", "float", ")", "\n", "PointerMask", "[", "y", ",", "x", "]", "=", "1", "\n", "PointerMask", "=", "np", ".", "expand_dims", "(", "PointerMask", ",", "axis", "=", "0", ")", ".", "astype", "(", "float", ")", "\n", "\n", "return", "PointerMask", ",", "self", ".", "BImgs", ",", "self", ".", "BROIMask", "\n", "#########################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.FindCorrespondingSegmentMaxIOU": [[355, 371], ["SegMask.sum", "TopSeg[].sum", "TopSeg[].astype", "TopSeg[].sum", "SegMask.sum", "seg[].sum", "SegMask.sum"], "methods", ["None"], ["", "def", "FindCorrespondingSegmentMaxIOU", "(", "self", ",", "SegMask", ")", ":", "\n", "        ", "MaxIOU", "=", "-", "1", "\n", "TopSeg", "=", "0", "\n", "for", "seg", "in", "self", ".", "Sgs", ":", "\n", "            ", "IOU", "=", "(", "seg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "(", "seg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "+", "SegMask", ".", "sum", "(", ")", "-", "(", "seg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", ")", "\n", "if", "IOU", ">", "MaxIOU", ":", "\n", "                ", "MaxIOU", "=", "IOU", "\n", "TopSeg", "=", "seg", "\n", "", "", "IOU", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "(", "TopSeg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "+", "SegMask", ".", "sum", "(", ")", "-", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", ")", "\n", "Precision", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "SegMask", ".", "sum", "(", ")", "\n", "Recall", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "TopSeg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "\n", "if", "not", "TopSeg", "[", "\"IsLabeled\"", "]", ":", "SegType", "=", "\"Unlabeled\"", "\n", "elif", "TopSeg", "[", "\"IsCrowd\"", "]", ":", "SegType", "=", "\"crowd\"", "\n", "elif", "TopSeg", "[", "\"IsThing\"", "]", ":", "SegType", "=", "\"thing\"", "\n", "else", ":", "SegType", "=", "\"stuff\"", "\n", "return", "IOU", ",", "Precision", ",", "Recall", ",", "SegType", ",", "TopSeg", "[", "\"Mask\"", "]", ".", "astype", "(", "float", ")", "\n", "############################################################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.LoadNext": [[377, 418], ["CocoPanoptic_Reader.Reader.FileList[].replace", "cv2.imread", "cv2.imread", "CocoPanoptic_Reader.rgb2id", "CocoPanoptic_Reader.Reader.GeneratListOfAllSegments", "CocoPanoptic_Reader.Reader.PickRandomPointInSegment", "numpy.zeros", "numpy.expand_dims", "numpy.concatenate", "Sgs.__len__", "CocoPanoptic_Reader.Reader.PickRandomSegment", "print", "numpy.random.randint", "CocoPanoptic_Reader.Reader.LoadNext", "Sgs.__len__", "CocoPanoptic_Reader.Reader.GenerateRandomROIMask", "numpy.ones", "CocoPanoptic_Reader.Reader.CropResize", "len"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomPointInSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GenerateRandomROIMask", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.CropResize"], ["", "def", "LoadNext", "(", "self", ",", "batch_pos", ",", "itr_pos", ",", "Hb", "=", "-", "1", ",", "Wb", "=", "-", "1", ")", ":", "\n", "            ", "Img_name", "=", "self", ".", "FileList", "[", "itr_pos", "]", ".", "replace", "(", "self", ".", "AnnotationFileType", ",", "self", ".", "ImageFileType", ")", "\n", "Ann_name", "=", "self", ".", "FileList", "[", "itr_pos", "]", "# Get label image name", "\n", "Img", "=", "cv2", ".", "imread", "(", "self", ".", "ImageDir", "+", "\"/\"", "+", "Img_name", ")", "# Load Image", "\n", "Img", "=", "Img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "(", "Img", ".", "ndim", "==", "2", ")", ":", "# If grayscale turn to rgb", "\n", "                ", "Img", "=", "np", ".", "expand_dims", "(", "Img", ",", "3", ")", "\n", "Img", "=", "np", ".", "concatenate", "(", "[", "Img", ",", "Img", ",", "Img", "]", ",", "axis", "=", "2", ")", "\n", "", "Img", "=", "Img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# Get first 3 channels incase there are more", "\n", "\n", "Ann", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "Ann_name", ")", "# Load Annotation", "\n", "Ann", "=", "Ann", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "Ann", "=", "rgb2id", "(", "Ann", ")", "\n", "#--------------------------Generate list of all segments using annotation map--------------------------------------------------------------------------------", "\n", "Sgs", ",", "SumAreas", "=", "self", ".", "GeneratListOfAllSegments", "(", "Ann", ",", "Ann_name", ")", "\n", "#----------------------------------------------------------------------------------------------------------------------------------------", "\n", "if", "Sgs", ".", "__len__", "(", ")", ">", "0", ":", "\n", "               ", "SelectedSg", ",", "SumAreas", "=", "self", ".", "PickRandomSegment", "(", "Sgs", ",", "SumAreas", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"No Segments to pick\"", ")", "\n", "itr_pos", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "FileList", ")", ")", "\n", "return", "self", ".", "LoadNext", "(", "batch_pos", ",", "itr_pos", ",", "Hb", ",", "Wb", ")", "\n", "", "if", "Sgs", ".", "__len__", "(", ")", ">", "0", ":", "\n", "                ", "ROIMask", "=", "self", ".", "GenerateRandomROIMask", "(", "Sgs", ",", "SumAreas", ")", "\n", "", "else", ":", "\n", "                ", "ROIMask", "=", "np", ".", "ones", "(", "Ann", ".", "shape", ")", "\n", "\n", "", "Px", ",", "Py", "=", "self", ".", "PickRandomPointInSegment", "(", "SelectedSg", ")", "\n", "if", "not", "Hb", "==", "-", "1", ":", "\n", "               ", "Img", ",", "SegMask", ",", "ROIMask", ",", "Px", ",", "Py", "=", "self", ".", "CropResize", "(", "Img", ",", "SelectedSg", "[", "\"Mask\"", "]", ",", "SelectedSg", "[", "\"BBox\"", "]", ",", "ROIMask", ",", "Px", ",", "Py", ",", "Hb", ",", "Wb", ")", "\n", "# else:", "\n", "#     SegMask=SelectedSg[\"Mask\"]", "\n", "#---------------------------------------------------------------------------------------------------------------------------------", "\n", "", "PointerMap", "=", "np", ".", "zeros", "(", "SegMask", ".", "shape", ")", "\n", "PointerMap", "[", "Py", ",", "Px", "]", "=", "1", "\n", "self", ".", "BImgs", "[", "batch_pos", "]", "=", "Img", "\n", "self", ".", "BSegmentMask", "[", "batch_pos", "]", "=", "SegMask", "\n", "self", ".", "BROIMask", "[", "batch_pos", "]", "=", "ROIMask", "\n", "self", ".", "BPointerMap", "[", "batch_pos", "]", "=", "PointerMap", "\n", "self", ".", "BIsThing", "[", "batch_pos", "]", "=", "SelectedSg", "[", "\"IsThing\"", "]", "\n", "self", ".", "BCat", "[", "batch_pos", "]", "=", "SelectedSg", "[", "\"CatId\"", "]", "\n", "############################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.StartLoadBatch": [[420, 445], ["numpy.int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.min", "len", "threading.Thread", "CocoPanoptic_Reader.Reader.thread_list.append", "threading.Thread.start", "random.shuffle", "numpy.floor", "str"], "methods", ["None"], ["", "def", "StartLoadBatch", "(", "self", ")", ":", "\n", "# =====================Initiate batch=============================================================================================", "\n", "        ", "while", "True", ":", "\n", "            ", "Hb", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "MinSize", ",", "high", "=", "self", ".", "MaxSize", ")", "# Batch hight", "\n", "Wb", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "MinSize", ",", "high", "=", "self", ".", "MaxSize", ")", "# batch  width", "\n", "if", "Hb", "*", "Wb", "<", "self", ".", "MaxPixels", ":", "break", "\n", "", "BatchSize", "=", "np", ".", "int", "(", "np", ".", "min", "(", "(", "np", ".", "floor", "(", "self", ".", "MaxPixels", "/", "(", "Hb", "*", "Wb", ")", ")", ",", "self", ".", "MaxBatchSize", ")", ")", ")", "\n", "self", ".", "BImgs", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ",", "3", ")", ")", "#", "\n", "self", ".", "BSegmentMask", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BROIMask", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "#", "\n", "self", ".", "BPointerMap", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BIsThing", "=", "np", ".", "zeros", "(", "(", "BatchSize", ")", ")", "\n", "self", ".", "BCat", "=", "np", ".", "zeros", "(", "(", "BatchSize", ")", ")", "\n", "#===============if epoch finished reshuffle file list and start new epoch====================================", "\n", "if", "self", ".", "itr", "+", "BatchSize", ">=", "len", "(", "self", ".", "FileList", ")", ":", "\n", "            ", "if", "self", ".", "suffle", ":", "random", ".", "shuffle", "(", "self", ".", "FileList", ")", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "Epoch", "+=", "1", "\n", "#====================Start reading data multithreaded===========================================================", "\n", "", "self", ".", "thread_list", "=", "[", "]", "\n", "for", "pos", "in", "range", "(", "BatchSize", ")", ":", "\n", "            ", "th", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "LoadNext", ",", "name", "=", "\"thread\"", "+", "str", "(", "pos", ")", ",", "args", "=", "(", "pos", ",", "self", ".", "itr", "+", "pos", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "thread_list", ".", "append", "(", "th", ")", "\n", "th", ".", "start", "(", ")", "\n", "", "self", ".", "itr", "+=", "BatchSize", "\n", "###########################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.WaitLoadBatch": [[447, 450], ["th.join"], "methods", ["None"], ["", "def", "WaitLoadBatch", "(", "self", ")", ":", "\n", "            ", "for", "th", "in", "self", ".", "thread_list", ":", "\n", "                 ", "th", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.LoadBatch": [[452, 462], ["CocoPanoptic_Reader.Reader.WaitLoadBatch", "CocoPanoptic_Reader.Reader.StartLoadBatch"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.WaitLoadBatch", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], ["", "", "def", "LoadBatch", "(", "self", ")", ":", "\n", "# Load batch for training (muti threaded  run in parallel with the training proccess)", "\n", "# For training", "\n", "            ", "self", ".", "WaitLoadBatch", "(", ")", "\n", "Imgs", "=", "self", ".", "BImgs", "\n", "SegmentMask", "=", "self", ".", "BSegmentMask", "\n", "ROIMask", "=", "self", ".", "BROIMask", "\n", "PointerMap", "=", "self", ".", "BPointerMap", "\n", "self", ".", "StartLoadBatch", "(", ")", "\n", "return", "Imgs", ",", "SegmentMask", ",", "ROIMask", ",", "PointerMap", "\n", "########################################################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.Reader.LoadSingleClean": [[463, 486], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "CocoPanoptic_Reader.Reader.LoadNext", "len", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext"], ["", "def", "LoadSingleClean", "(", "self", ")", ":", "\n", "# Load batch of on image segment and pointer point without croping or resizing", "\n", "# for evaluation step", "\n", "        ", "if", "self", ".", "itr", ">=", "len", "(", "self", ".", "FileList", ")", ":", "\n", "            ", "self", ".", "itr", "=", "0", "\n", "self", ".", "Epoch", "+=", "1", "\n", "", "Hb", ",", "Wb", ",", "d", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "self", ".", "FileList", "[", "self", ".", "itr", "]", ")", ".", "shape", "\n", "self", ".", "BImgs", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ",", "3", ")", ")", "#", "\n", "self", ".", "BSegmentMask", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BROIMask", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "#", "\n", "self", ".", "BPointerMap", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BIsThing", "=", "np", ".", "zeros", "(", "(", "1", ")", ")", "\n", "self", ".", "BCat", "=", "np", ".", "zeros", "(", "(", "1", ")", ")", "\n", "\n", "self", ".", "LoadNext", "(", "0", ",", "self", ".", "itr", ",", "Hb", ",", "Wb", ")", "\n", "\n", "self", ".", "itr", "+=", "1", "\n", "Imgs", "=", "self", ".", "BImgs", "\n", "SegmentMask", "=", "self", ".", "BSegmentMask", "\n", "ROIMask", "=", "self", ".", "BROIMask", "\n", "PointerMap", "=", "self", ".", "BPointerMap", "\n", "IsThing", "=", "self", ".", "BIsThing", "[", "0", "]", "\n", "return", "Imgs", ",", "SegmentMask", ",", "ROIMask", ",", "PointerMap", ",", "IsThing", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.None.CocoPanoptic_Reader.rgb2id": [[11, 17], ["isinstance", "len", "color.astype.astype"], "function", ["None"], ["def", "rgb2id", "(", "color", ")", ":", "# Convert annotation map from 3 channel RGB to instance", "\n", "    ", "if", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", "and", "len", "(", "color", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "color", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "color", "=", "color", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "", "return", "color", "[", ":", ",", ":", ",", "0", "]", "+", "256", "*", "color", "[", ":", ",", ":", ",", "1", "]", "+", "256", "*", "256", "*", "color", "[", ":", ",", ":", ",", "2", "]", "\n", "", "return", "color", "[", "0", "]", "+", "256", "*", "color", "[", "1", "]", "+", "256", "*", "256", "*", "color", "[", "2", "]", "\n", "#########################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.__init__": [[28, 65], ["os.listdir", "open", "json.load", "random.shuffle", "ReaderMode1_ONLY_4_out_of_5.Reader.StartLoadBatch", "ReaderMode1_ONLY_4_out_of_5.Reader.FileList.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], ["    ", "def", "__init__", "(", "self", ",", "ImageDir", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/train2017\"", ",", "AnnotationDir", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/COCO_panoptic/panoptic_train2017/panoptic_train2017\"", ",", "DataFile", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/COCO_panoptic/panoptic_train2017.json\"", ",", "MaxBatchSize", "=", "100", ",", "MinSize", "=", "250", ",", "MaxSize", "=", "800", ",", "MaxPixels", "=", "800", "*", "800", "*", "5", ",", "AnnotationFileType", "=", "\"png\"", ",", "ImageFileType", "=", "\"jpg\"", ",", "UnlabeledTag", "=", "0", ",", "Suffle", "=", "True", ",", "MultiThread", "=", "True", ")", ":", "\n", "        ", "self", ".", "ImageDir", "=", "ImageDir", "# Image dir", "\n", "self", ".", "AnnotationDir", "=", "AnnotationDir", "# File containing image annotation", "\n", "self", ".", "MaxBatchSize", "=", "MaxBatchSize", "# Max number of image in batch", "\n", "self", ".", "MinSize", "=", "MinSize", "# Min image width and hight", "\n", "self", ".", "MaxSize", "=", "MaxSize", "#MAx image width and hight", "\n", "self", ".", "MaxPixels", "=", "MaxPixels", "# Max number of pixel in all the batch (reduce to solve out of memory issues)", "\n", "self", ".", "AnnotationFileType", "=", "AnnotationFileType", "# What is the the type (ending) of the annotation files", "\n", "self", ".", "ImageFileType", "=", "ImageFileType", "# What is the the type (ending) of the image files", "\n", "self", ".", "DataFile", "=", "DataFile", "# Json File that contain data on the annotation", "\n", "self", ".", "UnlabeledTag", "=", "UnlabeledTag", "# Value of unlabled region usuall 0", "\n", "self", ".", "ReadStuff", "=", "True", "# Read things that are not instace object (like sky or grass)", "\n", "self", ".", "SplitThings", "=", "False", "#True # Split instance of things (object) to connected component region and use each connected region as instance", "\n", "self", ".", "SplitStuff", "=", "True", "# Split instance of things (object) to connected component region and use each connected region as instance", "\n", "self", ".", "SplitCrowd", "=", "True", "# Split areas marked as Crowds using connected componennt", "\n", "self", ".", "IgnoreCrowds", "=", "True", "# Ignore areas marked as crowd", "\n", "self", ".", "PickBySize", "=", "True", "# Pick instances of with probablity proportional to their sizes", "\n", "self", ".", "StuffAreaFactor", "=", "0.225", "# Since we pick segments according to their size stuf segments (wall ground sky) will have higher  probability to be chose compare to things  this factor balance this", "\n", "self", ".", "MinSegSize", "=", "100", "\n", "self", ".", "Epoch", "=", "0", "# Training Epoch", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "suffle", "=", "Suffle", "# Suffle list of file", "\n", "# self.SumThings = 0", "\n", "# self.SumStuff = 0", "\n", "\n", "#........................Read data file................................................................................................................", "\n", "with", "open", "(", "DataFile", ")", "as", "json_file", ":", "\n", "            ", "self", ".", "AnnData", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "#-------------------Get All files in folder--------------------------------------------------------------------------------------", "\n", "", "self", ".", "FileList", "=", "[", "]", "\n", "for", "FileName", "in", "os", ".", "listdir", "(", "AnnotationDir", ")", ":", "\n", "            ", "if", "AnnotationFileType", "in", "FileName", ":", "\n", "                ", "self", ".", "FileList", ".", "append", "(", "FileName", ")", "\n", "", "", "if", "self", ".", "suffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "FileList", ")", "\n", "", "if", "MultiThread", ":", "self", ".", "StartLoadBatch", "(", ")", "\n", "##############################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.GetAnnnotationData": [[67, 71], ["None"], "methods", ["None"], ["", "def", "GetAnnnotationData", "(", "self", ",", "AnnFileName", ")", ":", "\n", "            ", "for", "item", "in", "self", ".", "AnnData", "[", "'annotations'", "]", ":", "# Get Annotation Data", "\n", "                ", "if", "(", "item", "[", "\"file_name\"", "]", "==", "AnnFileName", ")", ":", "\n", "                    ", "return", "(", "item", "[", "'segments_info'", "]", ")", "\n", "############################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.GetCategoryData": [[72, 76], ["None"], "methods", ["None"], ["", "", "", "def", "GetCategoryData", "(", "self", ",", "ID", ")", ":", "\n", "                ", "for", "item", "in", "self", ".", "AnnData", "[", "'categories'", "]", ":", "\n", "                    ", "if", "item", "[", "\"id\"", "]", "==", "ID", ":", "\n", "                        ", "return", "item", "[", "\"name\"", "]", ",", "item", "[", "\"isthing\"", "]", "\n", "##########################################################################################################################################3333", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.GetConnectedSegment": [[78, 93], ["cv2.connectedComponentsWithStats", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "Seg.astype"], "methods", ["None"], ["", "", "", "def", "GetConnectedSegment", "(", "self", ",", "Seg", ")", ":", "\n", "\n", "            ", "[", "NumCCmp", ",", "CCmpMask", ",", "CCompBB", ",", "CCmpCntr", "]", "=", "cv2", ".", "connectedComponentsWithStats", "(", "Seg", ".", "astype", "(", "np", ".", "uint8", ")", ")", "# apply connected component", "\n", "\n", "\n", "Mask", "=", "np", ".", "zeros", "(", "[", "NumCCmp", ",", "Seg", ".", "shape", "[", "0", "]", ",", "Seg", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "bool", ")", "\n", "BBox", "=", "np", ".", "zeros", "(", "[", "NumCCmp", ",", "4", "]", ")", "\n", "Sz", "=", "np", ".", "zeros", "(", "[", "NumCCmp", "]", ",", "np", ".", "uint32", ")", "\n", "# if NumCCmp>2:", "\n", "#     print(\"lllll\")", "\n", "for", "i", "in", "range", "(", "1", ",", "NumCCmp", ")", ":", "\n", "                ", "Mask", "[", "i", "-", "1", "]", "=", "(", "CCmpMask", "==", "i", ")", "\n", "BBox", "[", "i", "-", "1", "]", "=", "CCompBB", "[", "i", "]", "[", ":", "4", "]", "\n", "Sz", "[", "i", "-", "1", "]", "=", "CCompBB", "[", "i", "]", "[", "4", "]", "#segment Size", "\n", "", "return", "Mask", ",", "BBox", ",", "Sz", ",", "NumCCmp", "-", "1", "\n", "#################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.PickRandomSegment": [[94, 107], ["Sgs.pop", "range", "numpy.random.randint", "numpy.random.randint", "Sgs.__len__"], "methods", ["None"], ["", "def", "PickRandomSegment", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "# Pick and return random segment and remove it from the segment list", "\n", "            ", "if", "self", ".", "PickBySize", ":", "# Pick random segment with probability proportional to size", "\n", "                ", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "TotAreas", "=", "0", "\n", "for", "ind", "in", "range", "(", "Sgs", ".", "__len__", "(", ")", ")", ":", "\n", "                    ", "TotAreas", "+=", "Sgs", "[", "ind", "]", "[", "'Area'", "]", "\n", "if", "TotAreas", ">=", "r", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "ind", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "#Pick Random segment with equal probability", "\n", "# print(\"ind\" + str(ind))", "\n", "SelectedSg", "=", "Sgs", ".", "pop", "(", "ind", ")", "\n", "SumAreas", "-=", "SelectedSg", "[", "\"Area\"", "]", "\n", "return", "SelectedSg", ",", "SumAreas", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.PickRandomSegmentODD": [[109, 124], ["range", "numpy.random.randint", "Sgs.pop", "numpy.random.randint", "Sgs.__len__"], "methods", ["None"], ["", "def", "PickRandomSegmentODD", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "# Pick and return random segment and remove it from the segment list", "\n", "            ", "if", "self", ".", "PickBySize", ":", "# Pick random segment with probability proportional to size", "\n", "                ", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "TotAreas", "=", "0", "\n", "for", "ind", "in", "range", "(", "Sgs", ".", "__len__", "(", ")", ")", ":", "\n", "                    ", "TotAreas", "+=", "Sgs", "[", "ind", "]", "[", "'Area'", "]", "\n", "if", "TotAreas", ">=", "r", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "ind", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "#Pick Random segment with equal probability", "\n", "if", "Sgs", "[", "ind", "]", "[", "\"CatId\"", "]", "%", "5", "!=", "0", ":", "\n", "                ", "SelectedSg", "=", "Sgs", ".", "pop", "(", "ind", ")", "\n", "SumAreas", "-=", "SelectedSg", "[", "\"Area\"", "]", "\n", "return", "SelectedSg", ",", "SumAreas", "\n", "", "else", ":", "\n", "                ", "return", "Sgs", "[", "ind", "]", ",", "SumAreas", "\n", "##########################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.GenerateRandomROIMask": [[125, 147], ["numpy.ones", "numpy.random.randint", "ReaderMode1_ONLY_4_out_of_5.Reader.PickRandomSegment", "numpy.random.randint", "numpy.random.randint", "Sgs.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegment"], ["", "", "def", "GenerateRandomROIMask", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "# Pick set of segments and generate random ROI map", "\n", "\n", "            ", "ROI", "=", "np", ".", "ones", "(", "Sgs", "[", "0", "]", "[", "\"Mask\"", "]", ".", "shape", ")", "\n", "if", "SumAreas", "<=", "0", "and", "np", ".", "random", ".", "randint", "(", "6", ")", "==", "0", ":", "return", "ROI", "\n", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "\n", "while", "(", "SumAreas", ">", "r", ")", ":", "\n", "                ", "SumAreasOld", "=", "SumAreas", "\n", "SelectedSg", ",", "SumAreas", "=", "self", ".", "PickRandomSegment", "(", "Sgs", ",", "SumAreas", ")", "\n", "# misc.imshow(SelectedSg[\"Mask\"].astype(float))", "\n", "if", "SumAreas", ">", "r", ":", "\n", "                    ", "ROI", "[", "SelectedSg", "[", "\"Mask\"", "]", "]", "=", "0", "\n", "#    misc.imshow(ROI.astype(float))", "\n", "", "else", ":", "\n", "                    ", "if", "np", ".", "random", ".", "randint", "(", "SumAreas", ",", "SumAreasOld", ")", ">", "r", ":", "# and (SumAreas>1000):", "\n", "                        ", "ROI", "[", "SelectedSg", "[", "\"Mask\"", "]", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "Sgs", ".", "append", "(", "SelectedSg", ")", "\n", "#print(\"F\")", "\n", "#misc.imshow(ROI.astype(float))", "\n", "\n", "", "", "", "return", "(", "ROI", ")", "\n", "#############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.PickRandomPointInSegment": [[149, 166], ["int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "cv2.erode", "Seg[].astype", "numpy.ones", "cv2.erode.sum", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "PickRandomPointInSegment", "(", "self", ",", "Seg", ",", "ErodeMask", "=", "10", ")", ":", "# Pick Random point from", "\n", "\n", "            ", "x0", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "0", "]", ")", ")", "# Bounding box x position", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "y0", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "1", "]", ")", ")", "# Bounding box y position", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "if", "ErodeMask", ":", "\n", "                ", "Msk", "=", "cv2", ".", "erode", "(", "Seg", "[", "\"Mask\"", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "ErodeMask", ")", "\n", "if", "Msk", ".", "sum", "(", ")", "==", "0", ":", "Msk", "=", "Seg", "[", "\"Mask\"", "]", "\n", "", "else", ":", "\n", "                ", "Msk", "=", "Seg", "[", "\"Mask\"", "]", "\n", "\n", "", "while", "(", "True", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "randint", "(", "Wbox", ")", "+", "x0", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "Hbox", ")", "+", "y0", "\n", "if", "(", "Msk", "[", "y", ",", "x", "]", ")", "==", "1", ":", "\n", "                    ", "return", "x", ",", "y", "\n", "##############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.DisplayTrainExample": [[167, 189], ["Img2.copy", "ROI2.copy", "Segment2.copy", "SelectedPoint2.copy", "scipy.imshow", "cv2.dilate", "scipy.imshow", "scipy.imshow", "scipy.imshow", "scipy.imshow", "cv2.dilate.astype", "numpy.ones", "cv2.dilate.astype", "cv2.dilate.astype", "Segment2.copy.astype", "ROI2.copy.astype", "Segment2.copy.astype", "cv2.dilate.astype", "cv2.dilate.astype", "ROI2.copy.astype", "Segment2.copy.astype", "cv2.dilate.astype"], "methods", ["None"], ["", "", "", "def", "DisplayTrainExample", "(", "self", ",", "Img2", ",", "ROI2", ",", "Segment2", ",", "SelectedPoint2", ")", ":", "\n", "        ", "Img", "=", "Img2", ".", "copy", "(", ")", "\n", "ROI", "=", "ROI2", ".", "copy", "(", ")", "\n", "Segment", "=", "Segment2", ".", "copy", "(", ")", "\n", "SelectedPoint", "=", "SelectedPoint2", ".", "copy", "(", ")", "\n", "misc", ".", "imshow", "(", "Img", ")", "\n", "SelectedPoint", "=", "cv2", ".", "dilate", "(", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "1", ")", "\n", "Img", "[", "SelectedPoint", "]", "[", ":", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "Img", "[", ":", ",", ":", ",", "0", "]", "=", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "+", "(", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", ")", "*", "Img", "[", ":", ",", ":", ",", "0", "]", "\n", "Img", "[", ":", ",", ":", ",", "1", "]", "*=", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "Img", "[", ":", ",", ":", ",", "2", "]", "*=", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "Img", "[", ":", ",", ":", ",", "0", "]", "*=", "1", "-", "(", "ROI", ".", "astype", "(", "np", ".", "uint8", ")", "-", "Segment", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "#Img[:, :, 1] += ROI.astype(np.uint8)*40", "\n", "Img", "[", ":", ",", ":", ",", "2", "]", "*=", "1", "-", "Segment", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "#  misc.imshow(Img)", "\n", "#print(ROI.mean())", "\n", "ROI", "[", "0", ",", "0", "]", "=", "0", "\n", "misc", ".", "imshow", "(", "ROI", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "Segment", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "SelectedPoint", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "Img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.CropResize": [[192, 265], ["numpy.max", "int", "int", "numpy.min", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "int", "int", "cv2.resize", "cv2.resize", "cv2.resize", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.random.rand", "numpy.max", "numpy.max", "cv2.resize.astype", "cv2.resize.astype", "numpy.random.randint", "numpy.random.randint", "cv2.resize.astype", "cv2.resize.astype", "float", "float", "numpy.float32", "numpy.max.astype"], "methods", ["None"], ["", "def", "CropResize", "(", "self", ",", "Img", ",", "Mask", ",", "bbox", ",", "ROImask", ",", "Px", ",", "Py", ",", "Hb", ",", "Wb", ")", ":", "# Crop and resize image and mask and ROI to feet batch size", "\n", "# ========================resize image if it two small to the batch size==================================================================================", "\n", "        ", "[", "h", ",", "w", ",", "d", "]", "=", "Img", ".", "shape", "\n", "\n", "Rs", "=", "np", ".", "max", "(", "(", "Hb", "/", "h", ",", "Wb", "/", "w", ")", ")", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "\n", "\n", "Bs", "=", "np", ".", "min", "(", "(", "Hb", "/", "Hbox", ",", "Wb", "/", "Wbox", ")", ")", "\n", "if", "Rs", ">", "1", "or", "Bs", "<", "1", "or", "np", ".", "random", ".", "rand", "(", ")", "<", "0.3", ":", "# Resize image and mask to batch size if mask is smaller then batch or if segment bounding box larger then batch size", "\n", "            ", "h", "=", "int", "(", "np", ".", "max", "(", "(", "h", "*", "Rs", ",", "Hb", ")", ")", ")", "\n", "w", "=", "int", "(", "np", ".", "max", "(", "(", "w", "*", "Rs", ",", "Wb", ")", ")", ")", "\n", "Img", "=", "cv2", ".", "resize", "(", "Img", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "Mask", "=", "cv2", ".", "resize", "(", "Mask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "ROImask", "=", "cv2", ".", "resize", "(", "ROImask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "bbox", "=", "(", "np", ".", "float32", "(", "bbox", ")", "*", "Rs", ".", "astype", "(", "np", ".", "float", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "Px", "=", "int", "(", "float", "(", "Px", ")", "*", "Rs", ")", "\n", "Py", "=", "int", "(", "float", "(", "Py", ")", "*", "Rs", ")", "\n", "if", "Px", ">=", "w", ":", "\n", "                ", "Px", "=", "w", "-", "1", "\n", "", "if", "Py", ">=", "h", ":", "\n", "                ", "Py", "=", "h", "-", "1", "\n", "\n", "# =======================Crop image to fit batch size===================================================================================", "\n", "", "", "x1", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "0", "]", ")", ")", "# Bounding box x position", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "y1", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "1", "]", ")", ")", "# Bounding box y position", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "\n", "if", "Wb", ">", "Wbox", ":", "\n", "            ", "Xmax", "=", "np", ".", "min", "(", "(", "w", "-", "Wb", ",", "x1", ")", ")", "\n", "Xmin", "=", "np", ".", "max", "(", "(", "0", ",", "x1", "-", "(", "Wb", "-", "Wbox", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Xmin", "=", "x1", "\n", "Xmax", "=", "np", ".", "min", "(", "(", "w", "-", "Wb", ",", "x1", "+", "(", "Wbox", "-", "Wb", ")", "+", "1", ")", ")", "\n", "\n", "", "if", "Hb", ">", "Hbox", ":", "\n", "            ", "Ymax", "=", "np", ".", "min", "(", "(", "h", "-", "Hb", ",", "y1", ")", ")", "\n", "Ymin", "=", "np", ".", "max", "(", "(", "0", ",", "y1", "-", "(", "Hb", "-", "Hbox", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Ymin", "=", "y1", "\n", "Ymax", "=", "np", ".", "min", "(", "(", "h", "-", "Hb", ",", "y1", "+", "(", "Hbox", "-", "Hb", ")", "+", "1", ")", ")", "\n", "# if Xmax < Xmin:", "\n", "#     print(\"waaa\")", "\n", "# if Ymax < Ymin:", "\n", "#     print(\"dddd\")", "\n", "", "if", "Ymax", "<=", "Ymin", ":", "y0", "=", "Ymin", "\n", "else", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "y0", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "Ymin", ",", "high", "=", "Ymax", "+", "1", ")", "\n", "if", "(", "y0", "<=", "Py", ")", "and", "Py", "<", "(", "y0", "+", "Hb", ")", ":", "break", "\n", "", "", "if", "Xmax", "<=", "Xmin", ":", "x0", "=", "Xmin", "\n", "else", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "Xmin", ",", "high", "=", "Xmax", "+", "1", ")", "\n", "if", "(", "x0", "<=", "Px", ")", "and", "Px", "<", "(", "x0", "+", "Wb", ")", ":", "break", "\n", "\n", "\n", "# Img[:,:,1]*=Mask", "\n", "# misc.imshow(Img)", "\n", "", "", "Px", "-=", "x0", "\n", "Py", "-=", "y0", "\n", "Img", "=", "Img", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", ",", ":", "]", "\n", "Mask", "=", "Mask", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", "]", "\n", "ROImask", "=", "ROImask", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", "]", "\n", "#------------------------------------------Verify shape change completed----------------------------------------------------------------------------------------", "\n", "if", "not", "(", "Img", ".", "shape", "[", "0", "]", "==", "Hb", "and", "Img", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "Img", "=", "cv2", ".", "resize", "(", "Img", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "not", "(", "Mask", ".", "shape", "[", "0", "]", "==", "Hb", "and", "Mask", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "Mask", "=", "cv2", ".", "resize", "(", "Mask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "if", "not", "(", "ROImask", ".", "shape", "[", "0", "]", "==", "Hb", "and", "ROImask", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "ROImask", "=", "cv2", ".", "resize", "(", "ROImask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "#-----------------------------------------------------------------------------------------------------------------------------------", "\n", "return", "Img", ",", "Mask", ",", "ROImask", ",", "Px", ",", "Py", "\n", "# misc.imshow(Img)", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.GeneratListOfAllSegments": [[268, 332], ["ReaderMode1_ONLY_4_out_of_5.Reader.GetAnnnotationData", "ReaderMode1_ONLY_4_out_of_5.Reader.GetCategoryData", "ReaderMode1_ONLY_4_out_of_5.Reader.GetConnectedSegment", "range", "ReaderMode1_ONLY_4_out_of_5.Reader.GetConnectedSegment", "range", "Sgs.append", "Sgs.append", "Sgs.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetAnnnotationData", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetCategoryData", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment"], ["", "def", "GeneratListOfAllSegments", "(", "self", ",", "Ann", ",", "Ann_name", ",", "AddUnLabeled", "=", "False", ",", "IgnoreSmallSeg", "=", "True", ")", ":", "\n", "        ", "AnnList", "=", "self", ".", "GetAnnnotationData", "(", "Ann_name", ")", "\n", "Sgs", "=", "[", "]", "# List of segments", "\n", "SumAreas", "=", "0", "# Sum areas of all segments up to this element", "\n", "for", "an", "in", "AnnList", ":", "\n", "            ", "an", "[", "\"name\"", "]", ",", "an", "[", "\"isthing\"", "]", "=", "self", ".", "GetCategoryData", "(", "an", "[", "\"category_id\"", "]", ")", "\n", "if", "(", "an", "[", "\"iscrowd\"", "]", "and", "self", ".", "IgnoreCrowds", ")", "or", "(", "not", "an", "[", "\"isthing\"", "]", "and", "not", "self", ".", "ReadStuff", ")", ":", "\n", "                ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "if", "(", "an", "[", "\"isthing\"", "]", "and", "self", ".", "SplitThings", ")", "or", "(", "an", "[", "\"isthing\"", "]", "==", "False", "and", "self", ".", "SplitStuff", ")", "or", "(", "an", "[", "\"iscrowd\"", "]", "and", "self", ".", "SplitCrowd", ")", ":", "\n", "                ", "TMask", ",", "TBBox", ",", "TSz", ",", "TNm", "=", "self", ".", "GetConnectedSegment", "(", "Ann", "==", "an", "[", "'id'", "]", ")", "# Split to connected components", "\n", "for", "i", "in", "range", "(", "TNm", ")", ":", "\n", "                    ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "TMask", "[", "i", "]", "\n", "seg", "[", "\"BBox\"", "]", "=", "TBBox", "[", "i", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "TSz", "[", "i", "]", "\n", "if", "(", "not", "an", "[", "\"isthing\"", "]", ")", ":", "seg", "[", "\"Area\"", "]", "*=", "self", ".", "StuffAreaFactor", "\n", "if", "seg", "[", "\"Area\"", "]", "<", "self", ".", "MinSegSize", "and", "IgnoreSmallSeg", ":", "\n", "                        ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "seg", "[", "\"NumParts\"", "]", "=", "TNm", "\n", "seg", "[", "\"IsSplit\"", "]", "=", "TNm", ">", "1", "\n", "seg", "[", "\"IsThing\"", "]", "=", "an", "[", "\"isthing\"", "]", "\n", "seg", "[", "\"Name\"", "]", "=", "an", "[", "\"name\"", "]", "\n", "seg", "[", "\"IsCrowd\"", "]", "=", "an", "[", "\"iscrowd\"", "]", "\n", "seg", "[", "\"CatId\"", "]", "=", "an", "[", "\"category_id\"", "]", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "True", "\n", "SumAreas", "+=", "seg", "[", "\"Area\"", "]", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "", "", "else", ":", "\n", "                    ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "(", "Ann", "==", "an", "[", "'id'", "]", ")", "\n", "seg", "[", "\"BBox\"", "]", "=", "an", "[", "\"bbox\"", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "an", "[", "\"area\"", "]", "\n", "if", "(", "not", "an", "[", "\"isthing\"", "]", ")", ":", "seg", "[", "\"Area\"", "]", "*=", "self", ".", "StuffAreaFactor", "\n", "if", "seg", "[", "\"Area\"", "]", "<", "self", ".", "MinSegSize", "and", "IgnoreSmallSeg", ":", "# Ignore very small segments", "\n", "                        ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "seg", "[", "\"NumParts\"", "]", "=", "1", "\n", "seg", "[", "\"IsSplit\"", "]", "=", "False", "\n", "seg", "[", "\"IsThing\"", "]", "=", "an", "[", "\"isthing\"", "]", "\n", "seg", "[", "\"Name\"", "]", "=", "an", "[", "\"name\"", "]", "\n", "seg", "[", "\"IsCrowd\"", "]", "=", "an", "[", "\"iscrowd\"", "]", "\n", "seg", "[", "\"CatId\"", "]", "=", "an", "[", "\"category_id\"", "]", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "True", "\n", "SumAreas", "+=", "seg", "[", "\"Area\"", "]", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "\n", "", "", "if", "AddUnLabeled", ":", "#Add unlabeled region as additional segments", "\n", "            ", "TMask", ",", "TBBox", ",", "TSz", ",", "TNm", "=", "self", ".", "GetConnectedSegment", "(", "Ann", "==", "self", ".", "UnlabeledTag", ")", "# Split to connected components", "\n", "for", "i", "in", "range", "(", "TNm", ")", ":", "\n", "                ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "TMask", "[", "i", "]", "\n", "seg", "[", "\"BBox\"", "]", "=", "TBBox", "[", "i", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "TSz", "[", "i", "]", "\n", "seg", "[", "\"NumParts\"", "]", "=", "TNm", "\n", "seg", "[", "\"Name\"", "]", "=", "\"unlabeled\"", "\n", "seg", "[", "\"CatId\"", "]", "=", "self", ".", "UnlabeledTag", "\n", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "False", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "\n", "\n", "", "", "return", "Sgs", ",", "SumAreas", "\n", "##################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.LoadNextGivenROI": [[333, 408], ["numpy.zeros", "numpy.expand_dims().astype", "ReaderMode1_ONLY_4_out_of_5.Reader.FileList[].replace", "cv2.imread", "cv2.imread", "ReaderMode1_ONLY_4_out_of_5.rgb2id", "numpy.ones", "ReaderMode1_ONLY_4_out_of_5.Reader.GeneratListOfAllSegments", "numpy.expand_dims().astype", "numpy.expand_dims().astype", "rgb2id.astype", "numpy.random.randint", "numpy.random.randint", "numpy.expand_dims", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments"], ["", "def", "LoadNextGivenROI", "(", "self", ",", "NewImg", "=", "True", ")", ":", "\n", "# ==========================Read image annotation and data===============================================================================================", "\n", "\n", "            ", "if", "NewImg", ":", "\n", "                ", "Img_name", "=", "self", ".", "FileList", "[", "self", ".", "itr", "]", ".", "replace", "(", "self", ".", "AnnotationFileType", ",", "self", ".", "ImageFileType", ")", "\n", "Ann_name", "=", "self", ".", "FileList", "[", "self", ".", "itr", "]", "# Get label image name", "\n", "#  print(Ann_name)", "\n", "\n", "# print(Img_name)", "\n", "# print(Ann_name)", "\n", "Img", "=", "cv2", ".", "imread", "(", "self", ".", "ImageDir", "+", "\"/\"", "+", "Img_name", ")", "# Load Image", "\n", "Img", "=", "Img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "(", "Img", ".", "ndim", "==", "2", ")", ":", "# If grayscale turn to rgb", "\n", "                    ", "Img", "=", "np", ".", "expand_dims", "(", "Img", ",", "3", ")", "\n", "Img", "=", "np", ".", "concatenate", "(", "[", "Img", ",", "Img", ",", "Img", "]", ",", "axis", "=", "2", ")", "\n", "", "Img", "=", "Img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# Get first 3 channels incase there are more", "\n", "\n", "Ann", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "Ann_name", ")", "# Load Annotation", "\n", "Ann", "=", "Ann", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "Ann", "=", "rgb2id", "(", "Ann", ")", "\n", "# misc.imshow((Ann==0).astype(float))", "\n", "# misc.imshow(Img)", "\n", "H", ",", "W", "=", "Ann", ".", "shape", "\n", "\n", "ROIMap", "=", "np", ".", "ones", "(", "[", "H", ",", "W", "]", ")", "\n", "#  AnnList = self.GetAnnnotationData(Ann_name)", "\n", "Sgs", ",", "SumAreas", "=", "self", ".", "GeneratListOfAllSegments", "(", "Ann", ",", "Ann_name", ",", "AddUnLabeled", "=", "True", ",", "IgnoreSmallSeg", "=", "False", ")", "\n", "self", ".", "Sgs", "=", "Sgs", "\n", "self", ".", "BImgs", "=", "np", ".", "expand_dims", "(", "Img", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#    self.BAnnList = AnnList", "\n", "self", ".", "BROIMask", "=", "np", ".", "expand_dims", "(", "ROIMap", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "BAnn", "=", "Ann", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "#    Img = self.BImgs[0]", "\n", "\n", "#    AnnList = self.BAnnList", "\n", "                 ", "ROIMap", "=", "self", ".", "BROIMask", "[", "0", "]", "\n", "Ann", "=", "self", ".", "BAnn", "\n", "H", ",", "W", "=", "Ann", ".", "shape", "\n", "\n", "\n", "# self.BCat = np.zeros((BatchSize", "\n", "", "while", "(", "True", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "if", "(", "ROIMap", "[", "y", ",", "x", "]", ")", "==", "1", ":", "break", "\n", "# Id=Ann[y,x]", "\n", "\n", "\n", "# SegmentMask=(Ann==Id).astype(float)", "\n", "# ConnectedMask=SegmentMask", "\n", "# if Id==self.UnlabeledTag:", "\n", "#          SegType = \"Unlabeled\"", "\n", "# else:", "\n", "#     for seg in Sgs:", "\n", "#         if (seg[\"Mask\"][y,x]>0):", "\n", "#             SegmentMask=seg[\"Mask\"]", "\n", "#             # if an[\"isthing\"]:", "\n", "#             #     SegType=\"thing\"", "\n", "#             # else:", "\n", "#             #     SegType=\"stuff\"", "\n", "#             # if an[\"iscrowd\"]:", "\n", "#             #     SegType = \"crowd\"", "\n", "#             # TMask, TBBox, TSz, TNm = self.GetConnectedSegment(Ann == an['id'])  # Split to connected components", "\n", "#             # for i in range(TNm):", "\n", "#             #     if TMask[i][y, x]:", "\n", "#             #         ConnectedMask = TMask[i]", "\n", "#             #         break", "\n", "#             # break", "\n", "\n", "", "PointerMask", "=", "np", ".", "zeros", "(", "Ann", ".", "shape", ",", "dtype", "=", "float", ")", "\n", "PointerMask", "[", "y", ",", "x", "]", "=", "1", "\n", "PointerMask", "=", "np", ".", "expand_dims", "(", "PointerMask", ",", "axis", "=", "0", ")", ".", "astype", "(", "float", ")", "\n", "\n", "return", "PointerMask", ",", "self", ".", "BImgs", ",", "self", ".", "BROIMask", "\n", "#########################################################################################################################################3", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.FindCorrespondingSegmentMaxIOU": [[409, 425], ["SegMask.sum", "TopSeg[].sum", "TopSeg[].astype", "TopSeg[].sum", "SegMask.sum", "seg[].sum", "SegMask.sum"], "methods", ["None"], ["", "def", "FindCorrespondingSegmentMaxIOU", "(", "self", ",", "SegMask", ")", ":", "# Find image segment with the highest IOU correlation  to SegMask", "\n", "        ", "MaxIOU", "=", "-", "1", "\n", "TopSeg", "=", "0", "\n", "for", "seg", "in", "self", ".", "Sgs", ":", "\n", "            ", "IOU", "=", "(", "seg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "(", "seg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "+", "SegMask", ".", "sum", "(", ")", "-", "(", "seg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", ")", "\n", "if", "IOU", ">", "MaxIOU", ":", "\n", "                ", "MaxIOU", "=", "IOU", "\n", "TopSeg", "=", "seg", "\n", "", "", "IOU", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "(", "TopSeg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "+", "SegMask", ".", "sum", "(", ")", "-", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", ")", "\n", "Precision", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "SegMask", ".", "sum", "(", ")", "\n", "Recall", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "TopSeg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "\n", "if", "not", "TopSeg", "[", "\"IsLabeled\"", "]", ":", "SegType", "=", "\"Unlabeled\"", "\n", "elif", "TopSeg", "[", "\"IsCrowd\"", "]", ":", "SegType", "=", "\"crowd\"", "\n", "elif", "TopSeg", "[", "\"IsThing\"", "]", ":", "SegType", "=", "\"thing\"", "\n", "else", ":", "SegType", "=", "\"stuff\"", "\n", "return", "IOU", ",", "Precision", ",", "Recall", ",", "SegType", ",", "TopSeg", "[", "\"Mask\"", "]", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.LoadNext": [[442, 530], ["ReaderMode1_ONLY_4_out_of_5.Reader.FileList[].replace", "cv2.imread", "cv2.imread", "ReaderMode1_ONLY_4_out_of_5.rgb2id", "ReaderMode1_ONLY_4_out_of_5.Reader.GeneratListOfAllSegments", "print", "ReaderMode1_ONLY_4_out_of_5.Reader.PickRandomPointInSegment", "numpy.zeros", "numpy.expand_dims", "numpy.concatenate", "range", "print", "numpy.random.randint", "ReaderMode1_ONLY_4_out_of_5.Reader.LoadNext", "Sgs.__len__", "ReaderMode1_ONLY_4_out_of_5.Reader.GenerateRandomROIMask", "numpy.ones", "ReaderMode1_ONLY_4_out_of_5.Reader.CropResize", "Sgs.__len__", "ReaderMode1_ONLY_4_out_of_5.Reader.PickRandomSegmentODD", "len"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomPointInSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GenerateRandomROIMask", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.CropResize", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegmentODD"], ["", "def", "LoadNext", "(", "self", ",", "batch_pos", ",", "itr_pos", ",", "Hb", "=", "-", "1", ",", "Wb", "=", "-", "1", ")", ":", "\n", "# ==========================Read image annotation and data===============================================================================================", "\n", "\n", "\n", "            ", "Img_name", "=", "self", ".", "FileList", "[", "itr_pos", "]", ".", "replace", "(", "self", ".", "AnnotationFileType", ",", "self", ".", "ImageFileType", ")", "\n", "Ann_name", "=", "self", ".", "FileList", "[", "itr_pos", "]", "# Get label image name", "\n", "#  print(Ann_name)", "\n", "\n", "# print(Img_name)", "\n", "# print(Ann_name)", "\n", "Img", "=", "cv2", ".", "imread", "(", "self", ".", "ImageDir", "+", "\"/\"", "+", "Img_name", ")", "# Load Image", "\n", "Img", "=", "Img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "(", "Img", ".", "ndim", "==", "2", ")", ":", "# If grayscale turn to rgb", "\n", "                ", "Img", "=", "np", ".", "expand_dims", "(", "Img", ",", "3", ")", "\n", "Img", "=", "np", ".", "concatenate", "(", "[", "Img", ",", "Img", ",", "Img", "]", ",", "axis", "=", "2", ")", "\n", "", "Img", "=", "Img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# Get first 3 channels incase there are more", "\n", "\n", "Ann", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "Ann_name", ")", "# Load Annotation", "\n", "Ann", "=", "Ann", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "Ann", "=", "rgb2id", "(", "Ann", ")", "\n", "# misc.imshow((Ann==0).astype(float))", "\n", "# misc.imshow(Img)", "\n", "\n", "\n", "\n", "#--------------------------Generate list of all segments--------------------------------------------------------------------------------", "\n", "\n", "Sgs", ",", "SumAreas", "=", "self", ".", "GeneratListOfAllSegments", "(", "Ann", ",", "Ann_name", ")", "\n", "#----------------------Check if there even labels------------------------------------------------------------------------------------------------------------------", "\n", "Evens", "=", "False", "\n", "for", "sg", "in", "Sgs", ":", "\n", "              ", "if", "sg", "[", "\"CatId\"", "]", "%", "5", "!=", "0", ":", "\n", "                  ", "Evens", "=", "True", "\n", "break", "\n", "", "", "SegmentSelected", "=", "False", "\n", "if", "Sgs", ".", "__len__", "(", ")", ">", "0", "and", "Evens", ":", "\n", "               ", "for", "t", "in", "range", "(", "10", ")", ":", "\n", "                 ", "SelectedSg", ",", "SumAreas", "=", "self", ".", "PickRandomSegmentODD", "(", "Sgs", ",", "SumAreas", ")", "\n", "if", "SelectedSg", "[", "\"CatId\"", "]", "%", "5", "!=", "0", ":", "\n", "                     ", "SegmentSelected", "=", "True", "\n", "break", "\n", "\n", "# -------------------------------------------------------------------------------------------", "\n", "", "", "", "if", "not", "SegmentSelected", ":", "\n", "                ", "print", "(", "\"No Segments to pick\"", ")", "\n", "itr_pos", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "FileList", ")", ")", "\n", "return", "self", ".", "LoadNext", "(", "batch_pos", ",", "itr_pos", ",", "Hb", ",", "Wb", ")", "\n", "", "if", "Sgs", ".", "__len__", "(", ")", ">", "0", ":", "\n", "                ", "ROIMask", "=", "self", ".", "GenerateRandomROIMask", "(", "Sgs", ",", "SumAreas", ")", "\n", "", "else", ":", "\n", "                ", "ROIMask", "=", "np", ".", "ones", "(", "Ann", ".", "shape", ")", "\n", "\n", "", "print", "(", "SelectedSg", "[", "\"CatId\"", "]", ")", "\n", "\n", "# misc.imshow(SelectedSg[\"Mask\"].astype(float))", "\n", "# misc.imshow(Img)", "\n", "\n", "\n", "Px", ",", "Py", "=", "self", ".", "PickRandomPointInSegment", "(", "SelectedSg", ")", "\n", "\n", "\n", "\n", "#-----------------------------Crop and resize--------------------------------------------------------------------------------------------------------", "\n", "\n", "# self.SumThings += SelectedSg[\"IsThing\"]", "\n", "# self.SumStuff += 1-SelectedSg[\"IsThing\"]", "\n", "# print(self.SumThings)", "\n", "# print(\"stuff\")", "\n", "# print(self.SumStuff)", "\n", "if", "not", "Hb", "==", "-", "1", ":", "\n", "               ", "Img", ",", "SegMask", ",", "ROIMask", ",", "Px", ",", "Py", "=", "self", ".", "CropResize", "(", "Img", ",", "SelectedSg", "[", "\"Mask\"", "]", ",", "SelectedSg", "[", "\"BBox\"", "]", ",", "ROIMask", ",", "Px", ",", "Py", ",", "Hb", ",", "Wb", ")", "\n", "# else:", "\n", "#     SegMask=SelectedSg[\"Mask\"]", "\n", "#---------------------------------------------------------------------------------------------------------------------------------", "\n", "", "PointerMap", "=", "np", ".", "zeros", "(", "SegMask", ".", "shape", ")", "\n", "PointerMap", "[", "Py", ",", "Px", "]", "=", "1", "\n", "\n", "\n", "\n", "#          self.DisplayTrainExample(Img, ROIMask, SegMask, PointerMap)", "\n", "# print(\"______\")", "\n", "# print(batch_pos)", "\n", "self", ".", "BImgs", "[", "batch_pos", "]", "=", "Img", "\n", "self", ".", "BSegmentMask", "[", "batch_pos", "]", "=", "SegMask", "\n", "self", ".", "BROIMask", "[", "batch_pos", "]", "=", "ROIMask", "\n", "self", ".", "BPointerMap", "[", "batch_pos", "]", "=", "PointerMap", "\n", "self", ".", "BIsThing", "[", "batch_pos", "]", "=", "SelectedSg", "[", "\"IsThing\"", "]", "\n", "self", ".", "BCat", "[", "batch_pos", "]", "=", "SelectedSg", "[", "\"CatId\"", "]", "\n", "#  print(\"CAT_ID \"+str(SelectedSg[\"CatId\"]))", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.StartLoadBatch": [[535, 562], ["numpy.int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.min", "len", "threading.Thread", "ReaderMode1_ONLY_4_out_of_5.Reader.thread_list.append", "threading.Thread.start", "random.shuffle", "numpy.floor", "str"], "methods", ["None"], ["", "def", "StartLoadBatch", "(", "self", ")", ":", "\n", "# =====================Initiate batch=============================================================================================", "\n", "        ", "while", "True", ":", "\n", "            ", "Hb", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "MinSize", ",", "high", "=", "self", ".", "MaxSize", ")", "# Batch hight", "\n", "Wb", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "MinSize", ",", "high", "=", "self", ".", "MaxSize", ")", "# batch  width", "\n", "if", "Hb", "*", "Wb", "<", "self", ".", "MaxPixels", ":", "break", "\n", "", "BatchSize", "=", "np", ".", "int", "(", "np", ".", "min", "(", "(", "np", ".", "floor", "(", "self", ".", "MaxPixels", "/", "(", "Hb", "*", "Wb", ")", ")", ",", "self", ".", "MaxBatchSize", ")", ")", ")", "\n", "self", ".", "BImgs", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ",", "3", ")", ")", "#", "\n", "self", ".", "BSegmentMask", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BROIMask", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "#", "\n", "self", ".", "BPointerMap", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BIsThing", "=", "np", ".", "zeros", "(", "(", "BatchSize", ")", ")", "\n", "self", ".", "BCat", "=", "np", ".", "zeros", "(", "(", "BatchSize", ")", ")", "\n", "\n", "if", "self", ".", "itr", "+", "BatchSize", ">=", "len", "(", "self", ".", "FileList", ")", ":", "\n", "            ", "if", "self", ".", "suffle", ":", "random", ".", "shuffle", "(", "self", ".", "FileList", ")", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "Epoch", "+=", "1", "\n", "\n", "# print(\"No More files to read\")", "\n", "# return", "\n", "", "self", ".", "thread_list", "=", "[", "]", "\n", "for", "pos", "in", "range", "(", "BatchSize", ")", ":", "\n", "            ", "th", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "LoadNext", ",", "name", "=", "\"thread\"", "+", "str", "(", "pos", ")", ",", "args", "=", "(", "pos", ",", "self", ".", "itr", "+", "pos", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "thread_list", ".", "append", "(", "th", ")", "\n", "th", ".", "start", "(", ")", "\n", "", "self", ".", "itr", "+=", "BatchSize", "\n", "###########################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.WaitLoadBatch": [[563, 566], ["th.join"], "methods", ["None"], ["", "def", "WaitLoadBatch", "(", "self", ")", ":", "\n", "            ", "for", "th", "in", "self", ".", "thread_list", ":", "\n", "                 ", "th", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.LoadBatch": [[568, 576], ["ReaderMode1_ONLY_4_out_of_5.Reader.WaitLoadBatch", "ReaderMode1_ONLY_4_out_of_5.Reader.StartLoadBatch"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.WaitLoadBatch", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], ["", "", "def", "LoadBatch", "(", "self", ")", ":", "\n", "            ", "self", ".", "WaitLoadBatch", "(", ")", "\n", "Imgs", "=", "self", ".", "BImgs", "\n", "SegmentMask", "=", "self", ".", "BSegmentMask", "\n", "ROIMask", "=", "self", ".", "BROIMask", "\n", "PointerMap", "=", "self", ".", "BPointerMap", "\n", "self", ".", "StartLoadBatch", "(", ")", "\n", "return", "Imgs", ",", "SegmentMask", ",", "ROIMask", ",", "PointerMap", "\n", "########################################################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.Reader.LoadSingleClean": [[577, 598], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "ReaderMode1_ONLY_4_out_of_5.Reader.LoadNext", "len", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext"], ["", "def", "LoadSingleClean", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "itr", ">=", "len", "(", "self", ".", "FileList", ")", ":", "\n", "            ", "self", ".", "itr", "=", "0", "\n", "self", ".", "Epoch", "+=", "1", "\n", "", "Hb", ",", "Wb", ",", "d", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "self", ".", "FileList", "[", "self", ".", "itr", "]", ")", ".", "shape", "\n", "self", ".", "BImgs", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ",", "3", ")", ")", "#", "\n", "self", ".", "BSegmentMask", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BROIMask", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "#", "\n", "self", ".", "BPointerMap", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BIsThing", "=", "np", ".", "zeros", "(", "(", "1", ")", ")", "\n", "self", ".", "BCat", "=", "np", ".", "zeros", "(", "(", "1", ")", ")", "\n", "\n", "self", ".", "LoadNext", "(", "0", ",", "self", ".", "itr", ",", "Hb", ",", "Wb", ")", "\n", "\n", "self", ".", "itr", "+=", "1", "\n", "Imgs", "=", "self", ".", "BImgs", "\n", "SegmentMask", "=", "self", ".", "BSegmentMask", "\n", "ROIMask", "=", "self", ".", "BROIMask", "\n", "PointerMap", "=", "self", ".", "BPointerMap", "\n", "IsThing", "=", "self", ".", "BIsThing", "[", "0", "]", "\n", "return", "Imgs", ",", "SegmentMask", ",", "ROIMask", ",", "PointerMap", ",", "IsThing", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_4_out_of_5.rgb2id": [[19, 25], ["isinstance", "len", "color.astype.astype"], "function", ["None"], ["def", "rgb2id", "(", "color", ")", ":", "\n", "    ", "if", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", "and", "len", "(", "color", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "color", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "color", "=", "color", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "", "return", "color", "[", ":", ",", ":", ",", "0", "]", "+", "256", "*", "color", "[", ":", ",", ":", ",", "1", "]", "+", "256", "*", "256", "*", "color", "[", ":", ",", ":", ",", "2", "]", "\n", "", "return", "color", "[", "0", "]", "+", "256", "*", "color", "[", "1", "]", "+", "256", "*", "256", "*", "color", "[", "2", "]", "\n", "#-----------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.__init__": [[28, 65], ["os.listdir", "open", "json.load", "random.shuffle", "ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch", "ReaderMode1_ONLY_1_out_of_5.Reader.FileList.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], ["    ", "def", "__init__", "(", "self", ",", "ImageDir", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/train2017\"", ",", "AnnotationDir", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/COCO_panoptic/panoptic_train2017/panoptic_train2017\"", ",", "DataFile", "=", "\"/media/sagi/9be0bc81-09a7-43be-856a-45a5ab241d90/Data_zoo/COCO/COCO_panoptic/panoptic_train2017.json\"", ",", "MaxBatchSize", "=", "100", ",", "MinSize", "=", "250", ",", "MaxSize", "=", "800", ",", "MaxPixels", "=", "800", "*", "800", "*", "5", ",", "AnnotationFileType", "=", "\"png\"", ",", "ImageFileType", "=", "\"jpg\"", ",", "UnlabeledTag", "=", "0", ",", "Suffle", "=", "True", ",", "MultiThread", "=", "True", ")", ":", "\n", "        ", "self", ".", "ImageDir", "=", "ImageDir", "# Image dir", "\n", "self", ".", "AnnotationDir", "=", "AnnotationDir", "# File containing image annotation", "\n", "self", ".", "MaxBatchSize", "=", "MaxBatchSize", "# Max number of image in batch", "\n", "self", ".", "MinSize", "=", "MinSize", "# Min image width and hight", "\n", "self", ".", "MaxSize", "=", "MaxSize", "#MAx image width and hight", "\n", "self", ".", "MaxPixels", "=", "MaxPixels", "# Max number of pixel in all the batch (reduce to solve out of memory issues)", "\n", "self", ".", "AnnotationFileType", "=", "AnnotationFileType", "# What is the the type (ending) of the annotation files", "\n", "self", ".", "ImageFileType", "=", "ImageFileType", "# What is the the type (ending) of the image files", "\n", "self", ".", "DataFile", "=", "DataFile", "# Json File that contain data on the annotation", "\n", "self", ".", "UnlabeledTag", "=", "UnlabeledTag", "# Value of unlabled region usuall 0", "\n", "self", ".", "ReadStuff", "=", "True", "# Read things that are not instace object (like sky or grass)", "\n", "self", ".", "SplitThings", "=", "False", "#True # Split instance of things (object) to connected component region and use each connected region as instance", "\n", "self", ".", "SplitStuff", "=", "True", "# Split instance of things (object) to connected component region and use each connected region as instance", "\n", "self", ".", "SplitCrowd", "=", "True", "# Split areas marked as Crowds using connected componennt", "\n", "self", ".", "IgnoreCrowds", "=", "True", "# Ignore areas marked as crowd", "\n", "self", ".", "PickBySize", "=", "True", "# Pick instances of with probablity proportional to their sizes", "\n", "self", ".", "StuffAreaFactor", "=", "0.225", "# Since we pick segments according to their size stuf segments (wall ground sky) will have higher  probability to be chose compare to things  this factor balance this", "\n", "self", ".", "MinSegSize", "=", "100", "\n", "self", ".", "Epoch", "=", "0", "# Training Epoch", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "suffle", "=", "Suffle", "# Suffle list of file", "\n", "# self.SumThings = 0", "\n", "# self.SumStuff = 0", "\n", "\n", "#........................Read data file................................................................................................................", "\n", "with", "open", "(", "DataFile", ")", "as", "json_file", ":", "\n", "            ", "self", ".", "AnnData", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "#-------------------Get All files in folder--------------------------------------------------------------------------------------", "\n", "", "self", ".", "FileList", "=", "[", "]", "\n", "for", "FileName", "in", "os", ".", "listdir", "(", "AnnotationDir", ")", ":", "\n", "            ", "if", "AnnotationFileType", "in", "FileName", ":", "\n", "                ", "self", ".", "FileList", ".", "append", "(", "FileName", ")", "\n", "", "", "if", "self", ".", "suffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "FileList", ")", "\n", "", "if", "MultiThread", ":", "self", ".", "StartLoadBatch", "(", ")", "\n", "##############################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetAnnnotationData": [[67, 71], ["None"], "methods", ["None"], ["", "def", "GetAnnnotationData", "(", "self", ",", "AnnFileName", ")", ":", "\n", "            ", "for", "item", "in", "self", ".", "AnnData", "[", "'annotations'", "]", ":", "# Get Annotation Data", "\n", "                ", "if", "(", "item", "[", "\"file_name\"", "]", "==", "AnnFileName", ")", ":", "\n", "                    ", "return", "(", "item", "[", "'segments_info'", "]", ")", "\n", "############################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetCategoryData": [[72, 76], ["None"], "methods", ["None"], ["", "", "", "def", "GetCategoryData", "(", "self", ",", "ID", ")", ":", "\n", "                ", "for", "item", "in", "self", ".", "AnnData", "[", "'categories'", "]", ":", "\n", "                    ", "if", "item", "[", "\"id\"", "]", "==", "ID", ":", "\n", "                        ", "return", "item", "[", "\"name\"", "]", ",", "item", "[", "\"isthing\"", "]", "\n", "##########################################################################################################################################3333", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment": [[78, 93], ["cv2.connectedComponentsWithStats", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "Seg.astype"], "methods", ["None"], ["", "", "", "def", "GetConnectedSegment", "(", "self", ",", "Seg", ")", ":", "\n", "\n", "            ", "[", "NumCCmp", ",", "CCmpMask", ",", "CCompBB", ",", "CCmpCntr", "]", "=", "cv2", ".", "connectedComponentsWithStats", "(", "Seg", ".", "astype", "(", "np", ".", "uint8", ")", ")", "# apply connected component", "\n", "\n", "\n", "Mask", "=", "np", ".", "zeros", "(", "[", "NumCCmp", ",", "Seg", ".", "shape", "[", "0", "]", ",", "Seg", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "bool", ")", "\n", "BBox", "=", "np", ".", "zeros", "(", "[", "NumCCmp", ",", "4", "]", ")", "\n", "Sz", "=", "np", ".", "zeros", "(", "[", "NumCCmp", "]", ",", "np", ".", "uint32", ")", "\n", "# if NumCCmp>2:", "\n", "#     print(\"lllll\")", "\n", "for", "i", "in", "range", "(", "1", ",", "NumCCmp", ")", ":", "\n", "                ", "Mask", "[", "i", "-", "1", "]", "=", "(", "CCmpMask", "==", "i", ")", "\n", "BBox", "[", "i", "-", "1", "]", "=", "CCompBB", "[", "i", "]", "[", ":", "4", "]", "\n", "Sz", "[", "i", "-", "1", "]", "=", "CCompBB", "[", "i", "]", "[", "4", "]", "#segment Size", "\n", "", "return", "Mask", ",", "BBox", ",", "Sz", ",", "NumCCmp", "-", "1", "\n", "#################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegment": [[94, 107], ["Sgs.pop", "range", "numpy.random.randint", "numpy.random.randint", "Sgs.__len__"], "methods", ["None"], ["", "def", "PickRandomSegment", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "# Pick and return random segment and remove it from the segment list", "\n", "            ", "if", "self", ".", "PickBySize", ":", "# Pick random segment with probability proportional to size", "\n", "                ", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "TotAreas", "=", "0", "\n", "for", "ind", "in", "range", "(", "Sgs", ".", "__len__", "(", ")", ")", ":", "\n", "                    ", "TotAreas", "+=", "Sgs", "[", "ind", "]", "[", "'Area'", "]", "\n", "if", "TotAreas", ">=", "r", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "ind", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "#Pick Random segment with equal probability", "\n", "# print(\"ind\" + str(ind))", "\n", "SelectedSg", "=", "Sgs", ".", "pop", "(", "ind", ")", "\n", "SumAreas", "-=", "SelectedSg", "[", "\"Area\"", "]", "\n", "return", "SelectedSg", ",", "SumAreas", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegmentODD": [[109, 124], ["range", "numpy.random.randint", "Sgs.pop", "numpy.random.randint", "Sgs.__len__"], "methods", ["None"], ["", "def", "PickRandomSegmentODD", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "# Pick and return random segment and remove it from the segment list", "\n", "            ", "if", "self", ".", "PickBySize", ":", "# Pick random segment with probability proportional to size", "\n", "                ", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "TotAreas", "=", "0", "\n", "for", "ind", "in", "range", "(", "Sgs", ".", "__len__", "(", ")", ")", ":", "\n", "                    ", "TotAreas", "+=", "Sgs", "[", "ind", "]", "[", "'Area'", "]", "\n", "if", "TotAreas", ">=", "r", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "ind", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "#Pick Random segment with equal probability", "\n", "if", "Sgs", "[", "ind", "]", "[", "\"CatId\"", "]", "%", "5", "==", "0", ":", "\n", "                ", "SelectedSg", "=", "Sgs", ".", "pop", "(", "ind", ")", "\n", "SumAreas", "-=", "SelectedSg", "[", "\"Area\"", "]", "\n", "return", "SelectedSg", ",", "SumAreas", "\n", "", "else", ":", "\n", "                ", "return", "Sgs", "[", "ind", "]", ",", "SumAreas", "\n", "##########################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GenerateRandomROIMask": [[125, 147], ["numpy.ones", "numpy.random.randint", "ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegment", "numpy.random.randint", "numpy.random.randint", "Sgs.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegment"], ["", "", "def", "GenerateRandomROIMask", "(", "self", ",", "Sgs", ",", "SumAreas", ")", ":", "# Pick set of segments and generate random ROI map", "\n", "\n", "            ", "ROI", "=", "np", ".", "ones", "(", "Sgs", "[", "0", "]", "[", "\"Mask\"", "]", ".", "shape", ")", "\n", "if", "SumAreas", "<=", "0", "and", "np", ".", "random", ".", "randint", "(", "6", ")", "==", "0", ":", "return", "ROI", "\n", "r", "=", "np", ".", "random", ".", "randint", "(", "SumAreas", ")", "+", "1", "\n", "\n", "while", "(", "SumAreas", ">", "r", ")", ":", "\n", "                ", "SumAreasOld", "=", "SumAreas", "\n", "SelectedSg", ",", "SumAreas", "=", "self", ".", "PickRandomSegment", "(", "Sgs", ",", "SumAreas", ")", "\n", "# misc.imshow(SelectedSg[\"Mask\"].astype(float))", "\n", "if", "SumAreas", ">", "r", ":", "\n", "                    ", "ROI", "[", "SelectedSg", "[", "\"Mask\"", "]", "]", "=", "0", "\n", "#    misc.imshow(ROI.astype(float))", "\n", "", "else", ":", "\n", "                    ", "if", "np", ".", "random", ".", "randint", "(", "SumAreas", ",", "SumAreasOld", ")", ">", "r", ":", "# and (SumAreas>1000):", "\n", "                        ", "ROI", "[", "SelectedSg", "[", "\"Mask\"", "]", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "Sgs", ".", "append", "(", "SelectedSg", ")", "\n", "#print(\"F\")", "\n", "#misc.imshow(ROI.astype(float))", "\n", "\n", "", "", "", "return", "(", "ROI", ")", "\n", "#############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomPointInSegment": [[149, 166], ["int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "cv2.erode", "Seg[].astype", "numpy.ones", "cv2.erode.sum", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "PickRandomPointInSegment", "(", "self", ",", "Seg", ",", "ErodeMask", "=", "10", ")", ":", "# Pick Random point from", "\n", "\n", "            ", "x0", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "0", "]", ")", ")", "# Bounding box x position", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "y0", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "1", "]", ")", ")", "# Bounding box y position", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "Seg", "[", "\"BBox\"", "]", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "if", "ErodeMask", ":", "\n", "                ", "Msk", "=", "cv2", ".", "erode", "(", "Seg", "[", "\"Mask\"", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "ErodeMask", ")", "\n", "if", "Msk", ".", "sum", "(", ")", "==", "0", ":", "Msk", "=", "Seg", "[", "\"Mask\"", "]", "\n", "", "else", ":", "\n", "                ", "Msk", "=", "Seg", "[", "\"Mask\"", "]", "\n", "\n", "", "while", "(", "True", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "randint", "(", "Wbox", ")", "+", "x0", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "Hbox", ")", "+", "y0", "\n", "if", "(", "Msk", "[", "y", ",", "x", "]", ")", "==", "1", ":", "\n", "                    ", "return", "x", ",", "y", "\n", "##############################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.DisplayTrainExample": [[167, 189], ["Img2.copy", "ROI2.copy", "Segment2.copy", "SelectedPoint2.copy", "scipy.imshow", "cv2.dilate", "scipy.imshow", "scipy.imshow", "scipy.imshow", "scipy.imshow", "cv2.dilate.astype", "numpy.ones", "cv2.dilate.astype", "cv2.dilate.astype", "Segment2.copy.astype", "ROI2.copy.astype", "Segment2.copy.astype", "cv2.dilate.astype", "cv2.dilate.astype", "ROI2.copy.astype", "Segment2.copy.astype", "cv2.dilate.astype"], "methods", ["None"], ["", "", "", "def", "DisplayTrainExample", "(", "self", ",", "Img2", ",", "ROI2", ",", "Segment2", ",", "SelectedPoint2", ")", ":", "\n", "        ", "Img", "=", "Img2", ".", "copy", "(", ")", "\n", "ROI", "=", "ROI2", ".", "copy", "(", ")", "\n", "Segment", "=", "Segment2", ".", "copy", "(", ")", "\n", "SelectedPoint", "=", "SelectedPoint2", ".", "copy", "(", ")", "\n", "misc", ".", "imshow", "(", "Img", ")", "\n", "SelectedPoint", "=", "cv2", ".", "dilate", "(", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "1", ")", "\n", "Img", "[", "SelectedPoint", "]", "[", ":", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "Img", "[", ":", ",", ":", ",", "0", "]", "=", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "+", "(", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", ")", "*", "Img", "[", ":", ",", ":", ",", "0", "]", "\n", "Img", "[", ":", ",", ":", ",", "1", "]", "*=", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "Img", "[", ":", ",", ":", ",", "2", "]", "*=", "1", "-", "SelectedPoint", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "Img", "[", ":", ",", ":", ",", "0", "]", "*=", "1", "-", "(", "ROI", ".", "astype", "(", "np", ".", "uint8", ")", "-", "Segment", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "#Img[:, :, 1] += ROI.astype(np.uint8)*40", "\n", "Img", "[", ":", ",", ":", ",", "2", "]", "*=", "1", "-", "Segment", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "#  misc.imshow(Img)", "\n", "#print(ROI.mean())", "\n", "ROI", "[", "0", ",", "0", "]", "=", "0", "\n", "misc", ".", "imshow", "(", "ROI", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "Segment", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "SelectedPoint", ".", "astype", "(", "float", ")", ")", "\n", "misc", ".", "imshow", "(", "Img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.CropResize": [[192, 265], ["numpy.max", "int", "int", "numpy.min", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "int", "int", "cv2.resize", "cv2.resize", "cv2.resize", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.random.rand", "numpy.max", "numpy.max", "cv2.resize.astype", "cv2.resize.astype", "numpy.random.randint", "numpy.random.randint", "cv2.resize.astype", "cv2.resize.astype", "float", "float", "numpy.float32", "numpy.max.astype"], "methods", ["None"], ["", "def", "CropResize", "(", "self", ",", "Img", ",", "Mask", ",", "bbox", ",", "ROImask", ",", "Px", ",", "Py", ",", "Hb", ",", "Wb", ")", ":", "# Crop and resize image and mask and ROI to feet batch size", "\n", "# ========================resize image if it two small to the batch size==================================================================================", "\n", "        ", "[", "h", ",", "w", ",", "d", "]", "=", "Img", ".", "shape", "\n", "\n", "Rs", "=", "np", ".", "max", "(", "(", "Hb", "/", "h", ",", "Wb", "/", "w", ")", ")", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "\n", "\n", "Bs", "=", "np", ".", "min", "(", "(", "Hb", "/", "Hbox", ",", "Wb", "/", "Wbox", ")", ")", "\n", "if", "Rs", ">", "1", "or", "Bs", "<", "1", "or", "np", ".", "random", ".", "rand", "(", ")", "<", "0.3", ":", "# Resize image and mask to batch size if mask is smaller then batch or if segment bounding box larger then batch size", "\n", "            ", "h", "=", "int", "(", "np", ".", "max", "(", "(", "h", "*", "Rs", ",", "Hb", ")", ")", ")", "\n", "w", "=", "int", "(", "np", ".", "max", "(", "(", "w", "*", "Rs", ",", "Wb", ")", ")", ")", "\n", "Img", "=", "cv2", ".", "resize", "(", "Img", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "Mask", "=", "cv2", ".", "resize", "(", "Mask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "ROImask", "=", "cv2", ".", "resize", "(", "ROImask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "bbox", "=", "(", "np", ".", "float32", "(", "bbox", ")", "*", "Rs", ".", "astype", "(", "np", ".", "float", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "Px", "=", "int", "(", "float", "(", "Px", ")", "*", "Rs", ")", "\n", "Py", "=", "int", "(", "float", "(", "Py", ")", "*", "Rs", ")", "\n", "if", "Px", ">=", "w", ":", "\n", "                ", "Px", "=", "w", "-", "1", "\n", "", "if", "Py", ">=", "h", ":", "\n", "                ", "Py", "=", "h", "-", "1", "\n", "\n", "# =======================Crop image to fit batch size===================================================================================", "\n", "", "", "x1", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "0", "]", ")", ")", "# Bounding box x position", "\n", "Wbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "2", "]", ")", ")", "# Bounding box width", "\n", "y1", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "1", "]", ")", ")", "# Bounding box y position", "\n", "Hbox", "=", "int", "(", "np", ".", "floor", "(", "bbox", "[", "3", "]", ")", ")", "# Bounding box height", "\n", "\n", "if", "Wb", ">", "Wbox", ":", "\n", "            ", "Xmax", "=", "np", ".", "min", "(", "(", "w", "-", "Wb", ",", "x1", ")", ")", "\n", "Xmin", "=", "np", ".", "max", "(", "(", "0", ",", "x1", "-", "(", "Wb", "-", "Wbox", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Xmin", "=", "x1", "\n", "Xmax", "=", "np", ".", "min", "(", "(", "w", "-", "Wb", ",", "x1", "+", "(", "Wbox", "-", "Wb", ")", "+", "1", ")", ")", "\n", "\n", "", "if", "Hb", ">", "Hbox", ":", "\n", "            ", "Ymax", "=", "np", ".", "min", "(", "(", "h", "-", "Hb", ",", "y1", ")", ")", "\n", "Ymin", "=", "np", ".", "max", "(", "(", "0", ",", "y1", "-", "(", "Hb", "-", "Hbox", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Ymin", "=", "y1", "\n", "Ymax", "=", "np", ".", "min", "(", "(", "h", "-", "Hb", ",", "y1", "+", "(", "Hbox", "-", "Hb", ")", "+", "1", ")", ")", "\n", "# if Xmax < Xmin:", "\n", "#     print(\"waaa\")", "\n", "# if Ymax < Ymin:", "\n", "#     print(\"dddd\")", "\n", "", "if", "Ymax", "<=", "Ymin", ":", "y0", "=", "Ymin", "\n", "else", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "y0", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "Ymin", ",", "high", "=", "Ymax", "+", "1", ")", "\n", "if", "(", "y0", "<=", "Py", ")", "and", "Py", "<", "(", "y0", "+", "Hb", ")", ":", "break", "\n", "", "", "if", "Xmax", "<=", "Xmin", ":", "x0", "=", "Xmin", "\n", "else", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "Xmin", ",", "high", "=", "Xmax", "+", "1", ")", "\n", "if", "(", "x0", "<=", "Px", ")", "and", "Px", "<", "(", "x0", "+", "Wb", ")", ":", "break", "\n", "\n", "\n", "# Img[:,:,1]*=Mask", "\n", "# misc.imshow(Img)", "\n", "", "", "Px", "-=", "x0", "\n", "Py", "-=", "y0", "\n", "Img", "=", "Img", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", ",", ":", "]", "\n", "Mask", "=", "Mask", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", "]", "\n", "ROImask", "=", "ROImask", "[", "y0", ":", "y0", "+", "Hb", ",", "x0", ":", "x0", "+", "Wb", "]", "\n", "#------------------------------------------Verify shape change completed----------------------------------------------------------------------------------------", "\n", "if", "not", "(", "Img", ".", "shape", "[", "0", "]", "==", "Hb", "and", "Img", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "Img", "=", "cv2", ".", "resize", "(", "Img", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "not", "(", "Mask", ".", "shape", "[", "0", "]", "==", "Hb", "and", "Mask", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "Mask", "=", "cv2", ".", "resize", "(", "Mask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "if", "not", "(", "ROImask", ".", "shape", "[", "0", "]", "==", "Hb", "and", "ROImask", ".", "shape", "[", "1", "]", "==", "Wb", ")", ":", "ROImask", "=", "cv2", ".", "resize", "(", "ROImask", ".", "astype", "(", "float", ")", ",", "dsize", "=", "(", "Wb", ",", "Hb", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "#-----------------------------------------------------------------------------------------------------------------------------------", "\n", "return", "Img", ",", "Mask", ",", "ROImask", ",", "Px", ",", "Py", "\n", "# misc.imshow(Img)", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments": [[268, 332], ["ReaderMode1_ONLY_1_out_of_5.Reader.GetAnnnotationData", "ReaderMode1_ONLY_1_out_of_5.Reader.GetCategoryData", "ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment", "range", "ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment", "range", "Sgs.append", "Sgs.append", "Sgs.append"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetAnnnotationData", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetCategoryData", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GetConnectedSegment"], ["", "def", "GeneratListOfAllSegments", "(", "self", ",", "Ann", ",", "Ann_name", ",", "AddUnLabeled", "=", "False", ",", "IgnoreSmallSeg", "=", "True", ")", ":", "\n", "        ", "AnnList", "=", "self", ".", "GetAnnnotationData", "(", "Ann_name", ")", "\n", "Sgs", "=", "[", "]", "# List of segments", "\n", "SumAreas", "=", "0", "# Sum areas of all segments up to this element", "\n", "for", "an", "in", "AnnList", ":", "\n", "            ", "an", "[", "\"name\"", "]", ",", "an", "[", "\"isthing\"", "]", "=", "self", ".", "GetCategoryData", "(", "an", "[", "\"category_id\"", "]", ")", "\n", "if", "(", "an", "[", "\"iscrowd\"", "]", "and", "self", ".", "IgnoreCrowds", ")", "or", "(", "not", "an", "[", "\"isthing\"", "]", "and", "not", "self", ".", "ReadStuff", ")", ":", "\n", "                ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "if", "(", "an", "[", "\"isthing\"", "]", "and", "self", ".", "SplitThings", ")", "or", "(", "an", "[", "\"isthing\"", "]", "==", "False", "and", "self", ".", "SplitStuff", ")", "or", "(", "an", "[", "\"iscrowd\"", "]", "and", "self", ".", "SplitCrowd", ")", ":", "\n", "                ", "TMask", ",", "TBBox", ",", "TSz", ",", "TNm", "=", "self", ".", "GetConnectedSegment", "(", "Ann", "==", "an", "[", "'id'", "]", ")", "# Split to connected components", "\n", "for", "i", "in", "range", "(", "TNm", ")", ":", "\n", "                    ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "TMask", "[", "i", "]", "\n", "seg", "[", "\"BBox\"", "]", "=", "TBBox", "[", "i", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "TSz", "[", "i", "]", "\n", "if", "(", "not", "an", "[", "\"isthing\"", "]", ")", ":", "seg", "[", "\"Area\"", "]", "*=", "self", ".", "StuffAreaFactor", "\n", "if", "seg", "[", "\"Area\"", "]", "<", "self", ".", "MinSegSize", "and", "IgnoreSmallSeg", ":", "\n", "                        ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "seg", "[", "\"NumParts\"", "]", "=", "TNm", "\n", "seg", "[", "\"IsSplit\"", "]", "=", "TNm", ">", "1", "\n", "seg", "[", "\"IsThing\"", "]", "=", "an", "[", "\"isthing\"", "]", "\n", "seg", "[", "\"Name\"", "]", "=", "an", "[", "\"name\"", "]", "\n", "seg", "[", "\"IsCrowd\"", "]", "=", "an", "[", "\"iscrowd\"", "]", "\n", "seg", "[", "\"CatId\"", "]", "=", "an", "[", "\"category_id\"", "]", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "True", "\n", "SumAreas", "+=", "seg", "[", "\"Area\"", "]", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "", "", "else", ":", "\n", "                    ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "(", "Ann", "==", "an", "[", "'id'", "]", ")", "\n", "seg", "[", "\"BBox\"", "]", "=", "an", "[", "\"bbox\"", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "an", "[", "\"area\"", "]", "\n", "if", "(", "not", "an", "[", "\"isthing\"", "]", ")", ":", "seg", "[", "\"Area\"", "]", "*=", "self", ".", "StuffAreaFactor", "\n", "if", "seg", "[", "\"Area\"", "]", "<", "self", ".", "MinSegSize", "and", "IgnoreSmallSeg", ":", "# Ignore very small segments", "\n", "                        ", "Ann", "[", "Ann", "==", "an", "[", "'id'", "]", "]", "=", "self", ".", "UnlabeledTag", "\n", "continue", "\n", "", "seg", "[", "\"NumParts\"", "]", "=", "1", "\n", "seg", "[", "\"IsSplit\"", "]", "=", "False", "\n", "seg", "[", "\"IsThing\"", "]", "=", "an", "[", "\"isthing\"", "]", "\n", "seg", "[", "\"Name\"", "]", "=", "an", "[", "\"name\"", "]", "\n", "seg", "[", "\"IsCrowd\"", "]", "=", "an", "[", "\"iscrowd\"", "]", "\n", "seg", "[", "\"CatId\"", "]", "=", "an", "[", "\"category_id\"", "]", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "True", "\n", "SumAreas", "+=", "seg", "[", "\"Area\"", "]", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "\n", "", "", "if", "AddUnLabeled", ":", "#Add unlabeled region as additional segments", "\n", "            ", "TMask", ",", "TBBox", ",", "TSz", ",", "TNm", "=", "self", ".", "GetConnectedSegment", "(", "Ann", "==", "self", ".", "UnlabeledTag", ")", "# Split to connected components", "\n", "for", "i", "in", "range", "(", "TNm", ")", ":", "\n", "                ", "seg", "=", "{", "}", "\n", "seg", "[", "\"Mask\"", "]", "=", "TMask", "[", "i", "]", "\n", "seg", "[", "\"BBox\"", "]", "=", "TBBox", "[", "i", "]", "\n", "seg", "[", "\"Area\"", "]", "=", "TSz", "[", "i", "]", "\n", "seg", "[", "\"NumParts\"", "]", "=", "TNm", "\n", "seg", "[", "\"Name\"", "]", "=", "\"unlabeled\"", "\n", "seg", "[", "\"CatId\"", "]", "=", "self", ".", "UnlabeledTag", "\n", "\n", "seg", "[", "\"IsLabeled\"", "]", "=", "False", "\n", "Sgs", ".", "append", "(", "seg", ")", "\n", "\n", "\n", "", "", "return", "Sgs", ",", "SumAreas", "\n", "##################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNextGivenROI": [[333, 408], ["numpy.zeros", "numpy.expand_dims().astype", "ReaderMode1_ONLY_1_out_of_5.Reader.FileList[].replace", "cv2.imread", "cv2.imread", "ReaderMode1_ONLY_1_out_of_5.rgb2id", "numpy.ones", "ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments", "numpy.expand_dims().astype", "numpy.expand_dims().astype", "rgb2id.astype", "numpy.random.randint", "numpy.random.randint", "numpy.expand_dims", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments"], ["", "def", "LoadNextGivenROI", "(", "self", ",", "NewImg", "=", "True", ")", ":", "\n", "# ==========================Read image annotation and data===============================================================================================", "\n", "\n", "            ", "if", "NewImg", ":", "\n", "                ", "Img_name", "=", "self", ".", "FileList", "[", "self", ".", "itr", "]", ".", "replace", "(", "self", ".", "AnnotationFileType", ",", "self", ".", "ImageFileType", ")", "\n", "Ann_name", "=", "self", ".", "FileList", "[", "self", ".", "itr", "]", "# Get label image name", "\n", "#  print(Ann_name)", "\n", "\n", "# print(Img_name)", "\n", "# print(Ann_name)", "\n", "Img", "=", "cv2", ".", "imread", "(", "self", ".", "ImageDir", "+", "\"/\"", "+", "Img_name", ")", "# Load Image", "\n", "Img", "=", "Img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "(", "Img", ".", "ndim", "==", "2", ")", ":", "# If grayscale turn to rgb", "\n", "                    ", "Img", "=", "np", ".", "expand_dims", "(", "Img", ",", "3", ")", "\n", "Img", "=", "np", ".", "concatenate", "(", "[", "Img", ",", "Img", ",", "Img", "]", ",", "axis", "=", "2", ")", "\n", "", "Img", "=", "Img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# Get first 3 channels incase there are more", "\n", "\n", "Ann", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "Ann_name", ")", "# Load Annotation", "\n", "Ann", "=", "Ann", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "Ann", "=", "rgb2id", "(", "Ann", ")", "\n", "# misc.imshow((Ann==0).astype(float))", "\n", "# misc.imshow(Img)", "\n", "H", ",", "W", "=", "Ann", ".", "shape", "\n", "\n", "ROIMap", "=", "np", ".", "ones", "(", "[", "H", ",", "W", "]", ")", "\n", "#  AnnList = self.GetAnnnotationData(Ann_name)", "\n", "Sgs", ",", "SumAreas", "=", "self", ".", "GeneratListOfAllSegments", "(", "Ann", ",", "Ann_name", ",", "AddUnLabeled", "=", "True", ",", "IgnoreSmallSeg", "=", "False", ")", "\n", "self", ".", "Sgs", "=", "Sgs", "\n", "self", ".", "BImgs", "=", "np", ".", "expand_dims", "(", "Img", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#    self.BAnnList = AnnList", "\n", "self", ".", "BROIMask", "=", "np", ".", "expand_dims", "(", "ROIMap", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "BAnn", "=", "Ann", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "#    Img = self.BImgs[0]", "\n", "\n", "#    AnnList = self.BAnnList", "\n", "                 ", "ROIMap", "=", "self", ".", "BROIMask", "[", "0", "]", "\n", "Ann", "=", "self", ".", "BAnn", "\n", "H", ",", "W", "=", "Ann", ".", "shape", "\n", "\n", "\n", "# self.BCat = np.zeros((BatchSize", "\n", "", "while", "(", "True", ")", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "if", "(", "ROIMap", "[", "y", ",", "x", "]", ")", "==", "1", ":", "break", "\n", "# Id=Ann[y,x]", "\n", "\n", "\n", "# SegmentMask=(Ann==Id).astype(float)", "\n", "# ConnectedMask=SegmentMask", "\n", "# if Id==self.UnlabeledTag:", "\n", "#          SegType = \"Unlabeled\"", "\n", "# else:", "\n", "#     for seg in Sgs:", "\n", "#         if (seg[\"Mask\"][y,x]>0):", "\n", "#             SegmentMask=seg[\"Mask\"]", "\n", "#             # if an[\"isthing\"]:", "\n", "#             #     SegType=\"thing\"", "\n", "#             # else:", "\n", "#             #     SegType=\"stuff\"", "\n", "#             # if an[\"iscrowd\"]:", "\n", "#             #     SegType = \"crowd\"", "\n", "#             # TMask, TBBox, TSz, TNm = self.GetConnectedSegment(Ann == an['id'])  # Split to connected components", "\n", "#             # for i in range(TNm):", "\n", "#             #     if TMask[i][y, x]:", "\n", "#             #         ConnectedMask = TMask[i]", "\n", "#             #         break", "\n", "#             # break", "\n", "\n", "", "PointerMask", "=", "np", ".", "zeros", "(", "Ann", ".", "shape", ",", "dtype", "=", "float", ")", "\n", "PointerMask", "[", "y", ",", "x", "]", "=", "1", "\n", "PointerMask", "=", "np", ".", "expand_dims", "(", "PointerMask", ",", "axis", "=", "0", ")", ".", "astype", "(", "float", ")", "\n", "\n", "return", "PointerMask", ",", "self", ".", "BImgs", ",", "self", ".", "BROIMask", "\n", "#########################################################################################################################################3", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.FindCorrespondingSegmentMaxIOU": [[409, 425], ["SegMask.sum", "TopSeg[].sum", "TopSeg[].astype", "TopSeg[].sum", "SegMask.sum", "seg[].sum", "SegMask.sum"], "methods", ["None"], ["", "def", "FindCorrespondingSegmentMaxIOU", "(", "self", ",", "SegMask", ")", ":", "# Find image segment with the highest IOU correlation  to SegMask", "\n", "        ", "MaxIOU", "=", "-", "1", "\n", "TopSeg", "=", "0", "\n", "for", "seg", "in", "self", ".", "Sgs", ":", "\n", "            ", "IOU", "=", "(", "seg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "(", "seg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "+", "SegMask", ".", "sum", "(", ")", "-", "(", "seg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", ")", "\n", "if", "IOU", ">", "MaxIOU", ":", "\n", "                ", "MaxIOU", "=", "IOU", "\n", "TopSeg", "=", "seg", "\n", "", "", "IOU", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "(", "TopSeg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "+", "SegMask", ".", "sum", "(", ")", "-", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", ")", "\n", "Precision", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "SegMask", ".", "sum", "(", ")", "\n", "Recall", "=", "(", "TopSeg", "[", "\"Mask\"", "]", "*", "SegMask", ")", ".", "sum", "(", ")", "/", "TopSeg", "[", "\"Mask\"", "]", ".", "sum", "(", ")", "\n", "if", "not", "TopSeg", "[", "\"IsLabeled\"", "]", ":", "SegType", "=", "\"Unlabeled\"", "\n", "elif", "TopSeg", "[", "\"IsCrowd\"", "]", ":", "SegType", "=", "\"crowd\"", "\n", "elif", "TopSeg", "[", "\"IsThing\"", "]", ":", "SegType", "=", "\"thing\"", "\n", "else", ":", "SegType", "=", "\"stuff\"", "\n", "return", "IOU", ",", "Precision", ",", "Recall", ",", "SegType", ",", "TopSeg", "[", "\"Mask\"", "]", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext": [[442, 530], ["ReaderMode1_ONLY_1_out_of_5.Reader.FileList[].replace", "cv2.imread", "cv2.imread", "ReaderMode1_ONLY_1_out_of_5.rgb2id", "ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments", "print", "ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomPointInSegment", "numpy.zeros", "numpy.expand_dims", "numpy.concatenate", "range", "print", "numpy.random.randint", "ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext", "Sgs.__len__", "ReaderMode1_ONLY_1_out_of_5.Reader.GenerateRandomROIMask", "numpy.ones", "ReaderMode1_ONLY_1_out_of_5.Reader.CropResize", "Sgs.__len__", "ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegmentODD", "len"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GeneratListOfAllSegments", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomPointInSegment", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.GenerateRandomROIMask", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.CropResize", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.PickRandomSegmentODD"], ["", "def", "LoadNext", "(", "self", ",", "batch_pos", ",", "itr_pos", ",", "Hb", "=", "-", "1", ",", "Wb", "=", "-", "1", ")", ":", "\n", "# ==========================Read image annotation and data===============================================================================================", "\n", "\n", "\n", "            ", "Img_name", "=", "self", ".", "FileList", "[", "itr_pos", "]", ".", "replace", "(", "self", ".", "AnnotationFileType", ",", "self", ".", "ImageFileType", ")", "\n", "Ann_name", "=", "self", ".", "FileList", "[", "itr_pos", "]", "# Get label image name", "\n", "#  print(Ann_name)", "\n", "\n", "# print(Img_name)", "\n", "# print(Ann_name)", "\n", "Img", "=", "cv2", ".", "imread", "(", "self", ".", "ImageDir", "+", "\"/\"", "+", "Img_name", ")", "# Load Image", "\n", "Img", "=", "Img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "(", "Img", ".", "ndim", "==", "2", ")", ":", "# If grayscale turn to rgb", "\n", "                ", "Img", "=", "np", ".", "expand_dims", "(", "Img", ",", "3", ")", "\n", "Img", "=", "np", ".", "concatenate", "(", "[", "Img", ",", "Img", ",", "Img", "]", ",", "axis", "=", "2", ")", "\n", "", "Img", "=", "Img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# Get first 3 channels incase there are more", "\n", "\n", "Ann", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "Ann_name", ")", "# Load Annotation", "\n", "Ann", "=", "Ann", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "Ann", "=", "rgb2id", "(", "Ann", ")", "\n", "# misc.imshow((Ann==0).astype(float))", "\n", "# misc.imshow(Img)", "\n", "\n", "\n", "\n", "#--------------------------Generate list of all segments--------------------------------------------------------------------------------", "\n", "\n", "Sgs", ",", "SumAreas", "=", "self", ".", "GeneratListOfAllSegments", "(", "Ann", ",", "Ann_name", ")", "\n", "#----------------------Check if there even labels------------------------------------------------------------------------------------------------------------------", "\n", "Evens", "=", "False", "\n", "for", "sg", "in", "Sgs", ":", "\n", "              ", "if", "sg", "[", "\"CatId\"", "]", "%", "5", "==", "0", ":", "\n", "                  ", "Evens", "=", "True", "\n", "break", "\n", "", "", "SegmentSelected", "=", "False", "\n", "if", "Sgs", ".", "__len__", "(", ")", ">", "0", "and", "Evens", ":", "\n", "               ", "for", "t", "in", "range", "(", "10", ")", ":", "\n", "                 ", "SelectedSg", ",", "SumAreas", "=", "self", ".", "PickRandomSegmentODD", "(", "Sgs", ",", "SumAreas", ")", "\n", "if", "SelectedSg", "[", "\"CatId\"", "]", "%", "5", "==", "0", ":", "\n", "                     ", "SegmentSelected", "=", "True", "\n", "break", "\n", "\n", "# -------------------------------------------------------------------------------------------", "\n", "", "", "", "if", "not", "SegmentSelected", ":", "\n", "                ", "print", "(", "\"No Segments to pick\"", ")", "\n", "itr_pos", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "FileList", ")", ")", "\n", "return", "self", ".", "LoadNext", "(", "batch_pos", ",", "itr_pos", ",", "Hb", ",", "Wb", ")", "\n", "", "if", "Sgs", ".", "__len__", "(", ")", ">", "0", ":", "\n", "                ", "ROIMask", "=", "self", ".", "GenerateRandomROIMask", "(", "Sgs", ",", "SumAreas", ")", "\n", "", "else", ":", "\n", "                ", "ROIMask", "=", "np", ".", "ones", "(", "Ann", ".", "shape", ")", "\n", "\n", "", "print", "(", "SelectedSg", "[", "\"CatId\"", "]", ")", "\n", "\n", "# misc.imshow(SelectedSg[\"Mask\"].astype(float))", "\n", "# misc.imshow(Img)", "\n", "\n", "\n", "Px", ",", "Py", "=", "self", ".", "PickRandomPointInSegment", "(", "SelectedSg", ")", "\n", "\n", "\n", "\n", "#-----------------------------Crop and resize--------------------------------------------------------------------------------------------------------", "\n", "\n", "# self.SumThings += SelectedSg[\"IsThing\"]", "\n", "# self.SumStuff += 1-SelectedSg[\"IsThing\"]", "\n", "# print(self.SumThings)", "\n", "# print(\"stuff\")", "\n", "# print(self.SumStuff)", "\n", "if", "not", "Hb", "==", "-", "1", ":", "\n", "               ", "Img", ",", "SegMask", ",", "ROIMask", ",", "Px", ",", "Py", "=", "self", ".", "CropResize", "(", "Img", ",", "SelectedSg", "[", "\"Mask\"", "]", ",", "SelectedSg", "[", "\"BBox\"", "]", ",", "ROIMask", ",", "Px", ",", "Py", ",", "Hb", ",", "Wb", ")", "\n", "# else:", "\n", "#     SegMask=SelectedSg[\"Mask\"]", "\n", "#---------------------------------------------------------------------------------------------------------------------------------", "\n", "", "PointerMap", "=", "np", ".", "zeros", "(", "SegMask", ".", "shape", ")", "\n", "PointerMap", "[", "Py", ",", "Px", "]", "=", "1", "\n", "\n", "\n", "\n", "#          self.DisplayTrainExample(Img, ROIMask, SegMask, PointerMap)", "\n", "# print(\"______\")", "\n", "# print(batch_pos)", "\n", "self", ".", "BImgs", "[", "batch_pos", "]", "=", "Img", "\n", "self", ".", "BSegmentMask", "[", "batch_pos", "]", "=", "SegMask", "\n", "self", ".", "BROIMask", "[", "batch_pos", "]", "=", "ROIMask", "\n", "self", ".", "BPointerMap", "[", "batch_pos", "]", "=", "PointerMap", "\n", "self", ".", "BIsThing", "[", "batch_pos", "]", "=", "SelectedSg", "[", "\"IsThing\"", "]", "\n", "self", ".", "BCat", "[", "batch_pos", "]", "=", "SelectedSg", "[", "\"CatId\"", "]", "\n", "#  print(\"CAT_ID \"+str(SelectedSg[\"CatId\"]))", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch": [[535, 562], ["numpy.int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.min", "len", "threading.Thread", "ReaderMode1_ONLY_1_out_of_5.Reader.thread_list.append", "threading.Thread.start", "random.shuffle", "numpy.floor", "str"], "methods", ["None"], ["", "def", "StartLoadBatch", "(", "self", ")", ":", "\n", "# =====================Initiate batch=============================================================================================", "\n", "        ", "while", "True", ":", "\n", "            ", "Hb", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "MinSize", ",", "high", "=", "self", ".", "MaxSize", ")", "# Batch hight", "\n", "Wb", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "MinSize", ",", "high", "=", "self", ".", "MaxSize", ")", "# batch  width", "\n", "if", "Hb", "*", "Wb", "<", "self", ".", "MaxPixels", ":", "break", "\n", "", "BatchSize", "=", "np", ".", "int", "(", "np", ".", "min", "(", "(", "np", ".", "floor", "(", "self", ".", "MaxPixels", "/", "(", "Hb", "*", "Wb", ")", ")", ",", "self", ".", "MaxBatchSize", ")", ")", ")", "\n", "self", ".", "BImgs", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ",", "3", ")", ")", "#", "\n", "self", ".", "BSegmentMask", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BROIMask", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "#", "\n", "self", ".", "BPointerMap", "=", "np", ".", "zeros", "(", "(", "BatchSize", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BIsThing", "=", "np", ".", "zeros", "(", "(", "BatchSize", ")", ")", "\n", "self", ".", "BCat", "=", "np", ".", "zeros", "(", "(", "BatchSize", ")", ")", "\n", "\n", "if", "self", ".", "itr", "+", "BatchSize", ">=", "len", "(", "self", ".", "FileList", ")", ":", "\n", "            ", "if", "self", ".", "suffle", ":", "random", ".", "shuffle", "(", "self", ".", "FileList", ")", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "Epoch", "+=", "1", "\n", "\n", "# print(\"No More files to read\")", "\n", "# return", "\n", "", "self", ".", "thread_list", "=", "[", "]", "\n", "for", "pos", "in", "range", "(", "BatchSize", ")", ":", "\n", "            ", "th", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "LoadNext", ",", "name", "=", "\"thread\"", "+", "str", "(", "pos", ")", ",", "args", "=", "(", "pos", ",", "self", ".", "itr", "+", "pos", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "thread_list", ".", "append", "(", "th", ")", "\n", "th", ".", "start", "(", ")", "\n", "", "self", ".", "itr", "+=", "BatchSize", "\n", "###########################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.WaitLoadBatch": [[563, 566], ["th.join"], "methods", ["None"], ["", "def", "WaitLoadBatch", "(", "self", ")", ":", "\n", "            ", "for", "th", "in", "self", ".", "thread_list", ":", "\n", "                 ", "th", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadBatch": [[568, 576], ["ReaderMode1_ONLY_1_out_of_5.Reader.WaitLoadBatch", "ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.WaitLoadBatch", "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.StartLoadBatch"], ["", "", "def", "LoadBatch", "(", "self", ")", ":", "\n", "            ", "self", ".", "WaitLoadBatch", "(", ")", "\n", "Imgs", "=", "self", ".", "BImgs", "\n", "SegmentMask", "=", "self", ".", "BSegmentMask", "\n", "ROIMask", "=", "self", ".", "BROIMask", "\n", "PointerMap", "=", "self", ".", "BPointerMap", "\n", "self", ".", "StartLoadBatch", "(", ")", "\n", "return", "Imgs", ",", "SegmentMask", ",", "ROIMask", ",", "PointerMap", "\n", "########################################################################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadSingleClean": [[577, 598], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext", "len", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.Reader.LoadNext"], ["", "def", "LoadSingleClean", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "itr", ">=", "len", "(", "self", ".", "FileList", ")", ":", "\n", "            ", "self", ".", "itr", "=", "0", "\n", "self", ".", "Epoch", "+=", "1", "\n", "", "Hb", ",", "Wb", ",", "d", "=", "cv2", ".", "imread", "(", "self", ".", "AnnotationDir", "+", "\"/\"", "+", "self", ".", "FileList", "[", "self", ".", "itr", "]", ")", ".", "shape", "\n", "self", ".", "BImgs", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ",", "3", ")", ")", "#", "\n", "self", ".", "BSegmentMask", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BROIMask", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "#", "\n", "self", ".", "BPointerMap", "=", "np", ".", "zeros", "(", "(", "1", ",", "Hb", ",", "Wb", ")", ")", "\n", "self", ".", "BIsThing", "=", "np", ".", "zeros", "(", "(", "1", ")", ")", "\n", "self", ".", "BCat", "=", "np", ".", "zeros", "(", "(", "1", ")", ")", "\n", "\n", "self", ".", "LoadNext", "(", "0", ",", "self", ".", "itr", ",", "Hb", ",", "Wb", ")", "\n", "\n", "self", ".", "itr", "+=", "1", "\n", "Imgs", "=", "self", ".", "BImgs", "\n", "SegmentMask", "=", "self", ".", "BSegmentMask", "\n", "ROIMask", "=", "self", ".", "BROIMask", "\n", "PointerMap", "=", "self", ".", "BPointerMap", "\n", "IsThing", "=", "self", ".", "BIsThing", "[", "0", "]", "\n", "return", "Imgs", ",", "SegmentMask", ",", "ROIMask", ",", "PointerMap", ",", "IsThing", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.ReaderMode1_ONLY_1_out_of_5.rgb2id": [[19, 25], ["isinstance", "len", "color.astype.astype"], "function", ["None"], ["def", "rgb2id", "(", "color", ")", ":", "\n", "    ", "if", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", "and", "len", "(", "color", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "color", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "color", "=", "color", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "", "return", "color", "[", ":", ",", ":", ",", "0", "]", "+", "256", "*", "color", "[", ":", ",", ":", ",", "1", "]", "+", "256", "*", "256", "*", "color", "[", ":", ",", ":", ",", "2", "]", "\n", "", "return", "color", "[", "0", "]", "+", "256", "*", "color", "[", "1", "]", "+", "256", "*", "256", "*", "color", "[", "2", "]", "\n", "#-----------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.NET_FCN_RESNET101.Net.__init__": [[11, 62], ["torch.Module.__init__", "torchvision.resnet101", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "NET_FCN_RESNET101.Net.SkipConnections.append", "NET_FCN_RESNET101.Net.SkipConnections.append", "NET_FCN_RESNET101.Net.SkipConnections.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "NET_FCN_RESNET101.Net.SqueezeUpsample.append", "NET_FCN_RESNET101.Net.SqueezeUpsample.append", "NET_FCN_RESNET101.Net.SqueezeUpsample.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "NET_FCN_RESNET101.Net.PSPLayers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.NET_FCN_RESNET101.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "NumClasses", "=", "2", ")", ":", "# Load pretrained encoder and prepare net layers", "\n", "            ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# ---------------Load pretrained encoder----------------------------------------------------------", "\n", "self", ".", "Encoder", "=", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "# ----------------Fully convolutional final encoder layers -------------------------------------------------------------------------", "\n", "self", ".", "PSPScales", "=", "[", "1", ",", "1", "/", "2", ",", "1", "/", "4", ",", "1", "/", "8", "]", "\n", "\n", "self", ".", "PSPLayers", "=", "nn", ".", "ModuleList", "(", ")", "# [] # Layers for decoder", "\n", "for", "Ps", "in", "self", ".", "PSPScales", ":", "\n", "                ", "self", ".", "PSPLayers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "1024", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ")", ")", "\n", "# nn.BatchNorm2d(1024)))", "\n", "", "self", ".", "PSPSqueeze", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4096", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "# ------------------Skip conncetion pass layers from the encoder to layer from the decoder/upsampler after convolution-----------------------------------------------------------------------------", "\n", "self", ".", "SkipConnections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "SkipConnections", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SkipConnections", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SkipConnections", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "# ------------------Skip squeeze concat of upsample+skip conncecion-----------------------------------------------------------------------------", "\n", "self", ".", "SqueezeUpsample", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "SqueezeUpsample", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SqueezeUpsample", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "512", ",", "256", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "self", ".", "SqueezeUpsample", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "128", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "# ----------------Final prediction layer predict class per region/pixel------------------------------------------------------------------------------------------", "\n", "self", ".", "FinalPrdiction", "=", "nn", ".", "Conv2d", "(", "128", ",", "NumClasses", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.NET_FCN_RESNET101.Net.AddAttententionLayer": [[65, 74], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "AddAttententionLayer", "(", "self", ")", ":", "\n", "                ", "self", ".", "AttentionLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ROIEncoder", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "ROIEncoder", ".", "bias", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "ROIEncoder", ".", "bias", ".", "data", ".", "shape", ")", "\n", "self", ".", "ROIEncoder", ".", "weight", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "ROIEncoder", ".", "weight", ".", "data", ".", "shape", ")", "\n", "\n", "self", ".", "PointerEncoder", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "PointerEncoder", ".", "bias", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "ROIEncoder", ".", "bias", ".", "data", ".", "shape", ")", "\n", "self", ".", "PointerEncoder", ".", "weight", ".", "data", "=", "torch", ".", "ones", "(", "self", ".", "ROIEncoder", ".", "weight", ".", "data", ".", "shape", ")", "\n", "# self.AttentionLayers.append(self.ROIEncoder)", "\n"]], "home.repos.pwc.inspect_result.sagieppel_Pointer-based-segmentation-find-segment-containing-given-image-point-witin-given-ROI-mask-using-CNN.Unused.NET_FCN_RESNET101.Net.forward": [[77, 165], ["torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().transpose().transpose().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "torch.autograd.Variable().unsqueeze().type", "range", "NET_FCN_RESNET101.Net.Encoder.conv1", "NET_FCN_RESNET101.Net.Encoder.bn1", "NET_FCN_RESNET101.Net.ROIEncoder", "NET_FCN_RESNET101.Net.PointerEncoder", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "NET_FCN_RESNET101.Net.Encoder.relu", "NET_FCN_RESNET101.Net.Encoder.maxpool", "NET_FCN_RESNET101.Net.Encoder.layer1", "SkipConFeatures.append", "NET_FCN_RESNET101.Net.Encoder.layer2", "SkipConFeatures.append", "NET_FCN_RESNET101.Net.Encoder.layer3", "SkipConFeatures.append", "NET_FCN_RESNET101.Net.Encoder.layer4", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NET_FCN_RESNET101.Net.PSPSqueeze", "range", "NET_FCN_RESNET101.Net.FinalPrdiction", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.max", "torch.cat.max", "torch.cat.max", "ROImap.cuda.cuda.cuda", "Pointermap.cuda.cuda.cuda", "InpImages.cuda.cuda.cuda", "len", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "PSPLayer", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "PSPFeatures.append", "len", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().transpose().transpose", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "torch.autograd.Variable().unsqueeze", "tuple", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable().transpose", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "ROI.astype", "Pointer.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Images.astype"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Images", ",", "Pointer", ",", "ROI", ",", "UseGPU", "=", "True", ")", ":", "\n", "\n", "#----------------------Convert image to pytorch and normalize values-----------------------------------------------------------------", "\n", "                ", "RGBMean", "=", "[", "123.68", ",", "116.779", ",", "103.939", "]", "\n", "RGBStd", "=", "[", "65", ",", "65", ",", "65", "]", "\n", "InpImages", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "Images", ".", "astype", "(", "float", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "\n", "ROImap", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "ROI", ".", "astype", "(", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "Pointermap", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "Pointer", ".", "astype", "(", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "UseGPU", ":", "\n", "                    ", "ROImap", "=", "ROImap", ".", "cuda", "(", ")", "\n", "Pointermap", "=", "Pointermap", ".", "cuda", "(", ")", "\n", "InpImages", "=", "InpImages", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "RGBMean", ")", ")", ":", "InpImages", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "(", "InpImages", "[", ":", ",", "i", ",", ":", ",", ":", "]", "-", "RGBMean", "[", "i", "]", ")", "/", "RGBStd", "[", "i", "]", "# normalize image values", "\n", "x", "=", "InpImages", "\n", "#--------------------Run Encoder------------------------------------------------------------------------------------------------------", "\n", "#--------------------Run Encoder------------------------------------------------------------------------------------------------------", "\n", "SkipConFeatures", "=", "[", "]", "# Store features map of layers used for skip connection", "\n", "#--------------------------------------------------------------------------------------------------------------------", "\n", "x", "=", "self", ".", "Encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "bn1", "(", "x", ")", "\n", "#------------------------Add ROI map and pointer map-----------------------------------------------------------", "\n", "r", "=", "self", ".", "ROIEncoder", "(", "ROImap", ")", "\n", "# print(\"Pointer\")", "\n", "# print(np.array(self.PointerEncoder.weight.data).mean())", "\n", "# print(\"ROI\")", "\n", "# print(np.array(self.ROIEncoder.weight.data).mean())", "\n", "# print(\"Conv\")", "\n", "# print(np.array(self.Encoder.conv1.weight.data).mean())", "\n", "pt", "=", "self", ".", "PointerEncoder", "(", "Pointermap", ")", "\n", "sp", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "pt", "=", "nn", ".", "functional", ".", "interpolate", "(", "pt", ",", "size", "=", "sp", ",", "mode", "=", "'bilinear'", ")", "#", "\n", "r", "=", "nn", ".", "functional", ".", "interpolate", "(", "r", ",", "size", "=", "sp", ",", "mode", "=", "'bilinear'", ")", "# Resize", "\n", "x", "=", "x", "+", "r", "+", "pt", "\n", "#-------------------------------------------------------------------------------------------------------------------", "\n", "\n", "\n", "\n", "x", "=", "self", ".", "Encoder", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer1", "(", "x", ")", "\n", "SkipConFeatures", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer2", "(", "x", ")", "\n", "SkipConFeatures", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer3", "(", "x", ")", "\n", "SkipConFeatures", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "Encoder", ".", "layer4", "(", "x", ")", "\n", "#------------------Run psp  decoder Layers----------------------------------------------------------------------------------------------", "\n", "PSPSize", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# Size of the original features map", "\n", "\n", "PSPFeatures", "=", "[", "]", "# Results of various of scaled procceessing", "\n", "for", "i", ",", "PSPLayer", "in", "enumerate", "(", "self", ".", "PSPLayers", ")", ":", "# run PSP layers scale features map to various of sizes apply convolution and concat the results", "\n", "                      ", "NewSize", "=", "(", "np", ".", "array", "(", "PSPSize", ")", "*", "self", ".", "PSPScales", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "NewSize", "[", "0", "]", "<", "1", ":", "NewSize", "[", "0", "]", "=", "1", "\n", "if", "NewSize", "[", "1", "]", "<", "1", ":", "NewSize", "[", "1", "]", "=", "1", "\n", "\n", "# print(str(i)+\")\"+str(NewSize))", "\n", "y", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "tuple", "(", "NewSize", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "#print(y.shape)", "\n", "y", "=", "PSPLayer", "(", "y", ")", "\n", "y", "=", "nn", ".", "functional", ".", "interpolate", "(", "y", ",", "PSPSize", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "#      if np.min(PSPSize*self.ScaleRates[i])<0.4: y*=0", "\n", "PSPFeatures", ".", "append", "(", "y", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "PSPFeatures", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "PSPSqueeze", "(", "x", ")", "\n", "#----------------------------Upsample features map  and combine with layers from encoder using skip  connection-----------------------------------------------------------------------------------------------------------", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SkipConnections", ")", ")", ":", "\n", "                  ", "sp", "=", "(", "SkipConFeatures", "[", "-", "1", "-", "i", "]", ".", "shape", "[", "2", "]", ",", "SkipConFeatures", "[", "-", "1", "-", "i", "]", ".", "shape", "[", "3", "]", ")", "\n", "#x=selnn.functional.interpolateLayers[i](x) # Apply transpose convolution", "\n", "# print(\"Skip\")", "\n", "# print(sp)", "\n", "# print(\"Layer\")", "\n", "# print(x.shape)", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "sp", ",", "mode", "=", "'bilinear'", ")", "#Resize", "\n", "# print(x.shape)", "\n", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "SkipConnections", "[", "i", "]", "(", "SkipConFeatures", "[", "-", "1", "-", "i", "]", ")", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "SqueezeUpsample", "[", "i", "]", "(", "x", ")", "\n", "#---------------------------------Final prediction-------------------------------------------------------------------------------", "\n", "", "x", "=", "self", ".", "FinalPrdiction", "(", "x", ")", "# Make prediction per pixel", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "InpImages", ".", "shape", "[", "2", ":", "4", "]", ",", "mode", "=", "'bilinear'", ")", "# Resize to original image size", "\n", "#********************************************************************************************************", "\n", "#x = nn.UpsamplingBilinear2d(size=InpImages.shape[2:4])(x)", "\n", "Prob", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "# Calculate class probability per pixel", "\n", "tt", ",", "Labels", "=", "x", ".", "max", "(", "1", ")", "# Find label per pixel", "\n", "return", "Prob", ",", "Labels", "\n", "\n"]]}