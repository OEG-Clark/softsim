{"home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.cluster_predictions": [[14, 36], ["pickle.load", "code.utils.scan_directory", "open", "print", "code.utils.load_feature_data", "print", "code.clustering.predict_files_from_directory", "len"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.scan_directory", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.load_feature_data", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict_files_from_directory"], ["def", "cluster_predictions", "(", "cfg", ")", ":", "\n", "\n", "    ", "cluster", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "c_file", ",", "\"rb\"", ")", ")", "\n", "\n", "ids_directory", ",", "_", ",", "_", "=", "scan_directory", "(", "cfg", ".", "visual_features_dir", ",", "file_rgb_posfix", "=", "cfg", ".", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "cfg", ".", "file_flow_posfix", ",", "\n", "file_extension", "=", "cfg", ".", "visual_file_extension", ",", "use_flow", "=", "cfg", ".", "use_flow", ")", "\n", "i", "=", "0", "\n", "n_files", "=", "10000", "\n", "while", "i", "+", "n_files", "<=", "len", "(", "ids_directory", ")", "+", "n_files", ":", "\n", "        ", "print", "(", "f\"Loading files from {cfg.visual_features_dir} - Batch {i}-{i+n_files}\"", ")", "\n", "_", ",", "data_rgb", ",", "files_rgb", ",", "data_flow", ",", "_", "=", "load_feature_data", "(", "ids_directory", ",", "directory", "=", "cfg", ".", "visual_features_dir", ",", "\n", "file_rgb_posfix", "=", "cfg", ".", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "cfg", ".", "file_flow_posfix", ",", "\n", "file_extension", "=", "cfg", ".", "visual_file_extension", ",", "\n", "use_flow", "=", "cfg", ".", "use_flow", ",", "\n", "start", "=", "i", ",", "end", "=", "i", "+", "n_files", ")", "\n", "print", "(", "f\"Predicting clusters\"", ")", "\n", "if", "cfg", ".", "use_flow", ":", "\n", "            ", "data_rgb", "=", "data_rgb", "+", "data_flow", "\n", "", "predict_files_from_directory", "(", "data_rgb", ",", "files_rgb", ",", "cluster", ",", "cfg", ".", "output_cluster_predictions_dir", ",", "cfg", ".", "clusters_file_extension", ")", "\n", "i", "=", "i", "+", "n_files", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.visual_glove_embeddings": [[38, 65], ["pickle.load", "code.visualglove.VisualGloveModel", "code.visualglove.VisualGloveModel.load_state_dict", "code.visualglove.VisualGloveModel.to", "code.utils.scan_directory", "open", "torch.load", "print", "print", "code.utils.load_feature_data", "print", "code.visualglove.predict_visual_embedding", "len"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.scan_directory", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.load_feature_data", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.predict_visual_embedding"], ["", "", "def", "visual_glove_embeddings", "(", "cfg", ")", ":", "\n", "\n", "    ", "cluster", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "c_file", ",", "\"rb\"", ")", ")", "\n", "glove", "=", "VisualGloveModel", "(", "cfg", ".", "vocabulary_size", ",", "cfg", ".", "vg_emb_dim", ")", "\n", "glove", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "vg_file", ")", ")", "\n", "glove", ".", "to", "(", "cfg", ".", "device", ")", "\n", "\n", "ids_directory", ",", "_", ",", "_", "=", "scan_directory", "(", "cfg", ".", "visual_features_dir", ",", "file_rgb_posfix", "=", "cfg", ".", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "cfg", ".", "file_flow_posfix", ",", "\n", "file_extension", "=", "cfg", ".", "visual_file_extension", ",", "use_flow", "=", "cfg", ".", "use_flow_in_concatenation", ")", "\n", "\n", "i", "=", "0", "\n", "n_files", "=", "10000", "\n", "while", "i", "+", "n_files", "<=", "len", "(", "ids_directory", ")", "+", "n_files", ":", "\n", "        ", "print", "(", "f\"Exporting Visual GloVe embeddings\"", ")", "\n", "\n", "print", "(", "f\"Loading files from {cfg.visual_features_dir} - Batch {i}-{i+n_files}\"", ")", "\n", "\n", "_", ",", "data_rgb", ",", "files_rgb", ",", "data_flow", ",", "files_flow", "=", "load_feature_data", "(", "ids_directory", ",", "directory", "=", "cfg", ".", "visual_features_dir", ",", "\n", "file_rgb_posfix", "=", "cfg", ".", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "cfg", ".", "file_flow_posfix", ",", "\n", "file_extension", "=", "cfg", ".", "visual_file_extension", ",", "\n", "use_flow", "=", "cfg", ".", "use_flow_in_concatenation", ",", "\n", "start", "=", "i", ",", "end", "=", "i", "+", "n_files", ")", "\n", "print", "(", "f\"Embedding videos\"", ")", "\n", "predict_visual_embedding", "(", "glove", ",", "cluster", ",", "data_rgb", ",", "files_rgb", ",", "data_flow", ",", "files_flow", ",", "cfg", ".", "output_embedding_dir", ",", "cfg", ".", "embedding_file_extension", ",", "cfg", ".", "output_concatenated_stack_embedding", ",", "cfg", ".", "concatenated_file_extension", ",", "use_flow", "=", "cfg", ".", "use_flow_in_concatenation", ")", "\n", "i", "=", "i", "+", "n_files", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.training_models": [[67, 103], ["json.loads", "print", "code.utils.load_feature_data", "numpy.concatenate", "print", "print", "code.clustering.mini_batch_k_means_clustering", "print", "print", "code.utils.load_feature_data", "print", "code.visualglove.training", "open().read", "open"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.load_feature_data", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.mini_batch_k_means_clustering", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.load_feature_data", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.training"], ["", "", "def", "training_models", "(", "cfg", ")", ":", "\n", "\n", "    ", "train_ids", "=", "json", ".", "loads", "(", "open", "(", "cfg", ".", "train_ids_file", ")", ".", "read", "(", ")", ")", "\n", "\n", "\n", "print", "(", "\"Loading cluster training data...\"", ")", "\n", "\n", "_", ",", "data", ",", "_", ",", "_", ",", "_", "=", "load_feature_data", "(", "train_ids", ",", "directory", "=", "cfg", ".", "visual_features_dir", ",", "\n", "file_rgb_posfix", "=", "cfg", ".", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "cfg", ".", "file_flow_posfix", ",", "\n", "file_extension", "=", "cfg", ".", "visual_file_extension", ",", "use_flow", "=", "cfg", ".", "use_flow", ",", "end", "=", "20000000", ")", "\n", "\n", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "print", "(", "f\"{data.shape[0]} tokens with {data.shape[1]}-d loaded\"", ")", "\n", "print", "(", "f\"Training Mini-Batch K-means...\"", ")", "\n", "cluster", "=", "mini_batch_k_means_clustering", "(", "data", ",", "output_file", "=", "cfg", ".", "c_file", ",", "\n", "epochs", "=", "cfg", ".", "c_epochs", ",", "n_clusters", "=", "cfg", ".", "vocabulary_size", ",", "\n", "random_state", "=", "cfg", ".", "c_random_state", ",", "\n", "batch_size", "=", "cfg", ".", "c_batch_size", ",", "save_file", "=", "True", ")", "\n", "\n", "\n", "print", "(", "f\"Loading Visual GloVe training data...\"", ")", "\n", "print", "(", "f\"We need to load training data again due to RAM size limitations (we have only 32 GB)\"", ")", "\n", "\n", "_", ",", "data", ",", "_", ",", "_", ",", "_", "=", "load_feature_data", "(", "train_ids", ",", "directory", "=", "cfg", ".", "visual_features_dir", ",", "\n", "file_rgb_posfix", "=", "cfg", ".", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "cfg", ".", "file_flow_posfix", ",", "\n", "file_extension", "=", "cfg", ".", "visual_file_extension", ",", "use_flow", "=", "cfg", ".", "use_flow", ")", "\n", "\n", "\n", "print", "(", "f\"Training Visual GloVe model\"", ")", "\n", "training", "(", "cluster", ",", "data", ",", "n_epochs", "=", "cfg", ".", "vg_epochs", ",", "\n", "batch_size", "=", "cfg", ".", "vg_batch_size", ",", "window_size", "=", "cfg", ".", "vg_window_size", ",", "\n", "x_max", "=", "cfg", ".", "vg_x_max", ",", "alpha", "=", "cfg", ".", "vg_alpha", ",", "embed_dim", "=", "cfg", ".", "vg_emb_dim", ",", "\n", "max_epochs_lower", "=", "cfg", ".", "vg_early_stopping", ",", "model_path", "=", "cfg", ".", "vg_file", ",", "\n", "plot_loss", "=", "True", ",", "plot_vocabulary", "=", "True", ",", "vocab_size", "=", "cfg", ".", "vocabulary_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.main": [[105, 120], ["print", "pprint.pprint", "time.time", "code.config.Config", "print", "print", "vars", "main.training_models", "main.cluster_predictions", "main.visual_glove_embeddings", "Exception", "time.time"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.training_models", "home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.cluster_predictions", "home.repos.pwc.inspect_result.valterlej_dvcusi.None.main.visual_glove_embeddings"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"Visual Glove\"", ")", "\n", "pprint", "(", "vars", "(", "args", ")", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "cfg", "=", "Config", "(", "args", ")", "\n", "if", "cfg", ".", "procedure", "==", "\"training\"", ":", "\n", "        ", "training_models", "(", "cfg", ")", "\n", "", "elif", "cfg", ".", "procedure", "==", "\"cluster_predictions\"", ":", "\n", "        ", "cluster_predictions", "(", "cfg", ")", "\n", "", "elif", "cfg", ".", "procedure", "==", "\"visual_glove_embeddings\"", ":", "\n", "        ", "visual_glove_embeddings", "(", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Invalid procedure.\"", ")", "\n", "", "print", "(", "f\"Time taken: {time.time()-start} sec\"", ")", "\n", "print", "(", "f\"Finish!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.config.Config.__init__": [[6, 66], ["torch.cuda.set_device", "os.path.isdir", "Exception", "Exception", "Exception", "Exception", "len", "Exception", "Exception", "Exception", "Exception", "Exception", "Exception", "os.path.isfile", "Exception", "os.path.isfile"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "self", ".", "procedure", "=", "args", ".", "procedure", "\n", "self", ".", "train_ids_file", "=", "args", ".", "train_ids_file", "\n", "self", ".", "visual_features_dir", "=", "args", ".", "visual_features_dir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "visual_features_dir", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Visual features dir do not exists.\"", ")", "\n", "", "self", ".", "visual_file_extension", "=", "args", ".", "visual_file_extension", "\n", "self", ".", "file_rgb_posfix", "=", "args", ".", "file_rgb_posfix", "\n", "self", ".", "file_flow_posfix", "=", "args", ".", "file_flow_posfix", "\n", "self", ".", "output_embedding_dir", "=", "args", ".", "output_embedding_dir", "\n", "self", ".", "output_concatenated_stack_embedding", "=", "args", ".", "output_concatenated_stack_embedding", "\n", "self", ".", "concatenated_file_extension", "=", "args", ".", "concatenated_file_extension", "\n", "self", ".", "embedding_file_extension", "=", "args", ".", "embedding_file_extension", "\n", "self", ".", "output_cluster_predictions_dir", "=", "args", ".", "output_cluster_predictions_dir", "\n", "self", ".", "clusters_file_extension", "=", "args", ".", "clusters_file_extension", "\n", "self", ".", "use_flow", "=", "args", ".", "use_flow", "\n", "self", ".", "use_flow_in_concatenation", "=", "args", ".", "use_flow_in_concatenation", "\n", "self", ".", "c_file", "=", "args", ".", "c_file", "\n", "if", "self", ".", "procedure", "==", "\"cluster_predictions\"", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "c_file", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Cluster file does not exist.\"", ")", "\n", "", "", "self", ".", "c_epochs", "=", "args", ".", "c_epochs", "\n", "if", "self", ".", "c_epochs", "<=", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid number of cluster epochs training.\"", ")", "\n", "", "self", ".", "c_batch_size", "=", "args", ".", "c_batch_size", "\n", "if", "self", ".", "c_batch_size", "<=", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid number of cluster batch size.\"", ")", "\n", "", "self", ".", "c_random_state", "=", "0", "\n", "self", ".", "vocabulary_size", "=", "args", ".", "vocabulary_size", "\n", "if", "self", ".", "vocabulary_size", "<=", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid number of vocabulary size.\"", ")", "\n", "", "self", ".", "device_ids", "=", "args", ".", "device_ids", "\n", "self", ".", "device", "=", "f'cuda:{self.device_ids[0]}'", "\n", "self", ".", "vg_batch_size", "=", "args", ".", "vg_batch_size", "*", "len", "(", "self", ".", "device_ids", ")", "\n", "if", "self", ".", "vg_batch_size", "<=", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid visual glove batch size.\"", ")", "\n", "", "self", ".", "vg_epochs", "=", "args", ".", "vg_epochs", "\n", "if", "self", ".", "vg_epochs", "<", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid visual glove epochs.\"", ")", "\n", "", "self", ".", "vg_window_size", "=", "args", ".", "vg_window_size", "\n", "if", "self", ".", "vg_window_size", "<", "2", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid window size context.\"", ")", "\n", "", "self", ".", "vg_x_max", "=", "args", ".", "vg_x_max", "\n", "if", "self", ".", "vg_x_max", "<", "0", "or", "self", ".", "vg_x_max", ">", "100", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid vg_x_max value. Must be between 0 and 100.\"", ")", "\n", "", "self", ".", "vg_alpha", "=", "args", ".", "vg_alpha", "\n", "if", "self", ".", "vg_alpha", "<", "0", "or", "self", ".", "vg_alpha", ">", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid alpha. Must be between 0 and 1.\"", ")", "\n", "", "self", ".", "vg_emb_dim", "=", "args", ".", "vg_emb_dim", "\n", "if", "self", ".", "vg_emb_dim", "<", "32", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid embedding dimension. We suggest values above 32.\"", ")", "\n", "", "self", ".", "vg_early_stopping", "=", "args", ".", "vg_early_stopping", "\n", "if", "self", ".", "vg_early_stopping", "<", "0", ":", "\n", "            ", "self", ".", "vg_early_stopping", "=", "self", ".", "vg_epochs", "\n", "", "self", ".", "vg_file", "=", "args", ".", "vg_file", "\n", "if", "self", ".", "procedure", "==", "\"visual_glove_embeddings\"", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "vg_file", ")", ":", "\n", "                ", "raise", "(", "\"Invalid visual glove file model.\"", ")", "\n", "", "", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "device", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.mini_batch_k_means_clustering": [[9, 22], ["sklearn.cluster.MiniBatchKMeans", "tqdm.tqdm", "range", "time.time", "print", "numpy.random.shuffle", "sklearn.cluster.MiniBatchKMeans.fit_predict", "print", "print", "pickle.dump", "open", "time.time"], "function", ["None"], ["def", "mini_batch_k_means_clustering", "(", "inp_data", ",", "output_file", "=", "\"./data/cluster.pkl\"", ",", "epochs", "=", "5", ",", "n_clusters", "=", "1000", ",", "random_state", "=", "0", ",", "batch_size", "=", "20000", ",", "save_file", "=", "True", ")", ":", "\n", "\n", "    ", "cluster", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "n_clusters", ",", "random_state", "=", "random_state", ",", "batch_size", "=", "batch_size", ")", "\n", "for", "e", "in", "tqdm", "(", "range", "(", "epochs", ")", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Training epoch: {e}\"", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inp_data", ")", "\n", "cluster", ".", "fit_predict", "(", "inp_data", ")", "\n", "print", "(", "f\"Time taken for training once {time.time()-start} sec\"", ")", "\n", "if", "save_file", ":", "\n", "            ", "print", "(", "f\"Saving model\"", ")", "\n", "pickle", ".", "dump", "(", "cluster", ",", "open", "(", "output_file", ",", "'wb'", ")", ")", "\n", "", "", "return", "cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict": [[24, 32], ["cluster.predict", "list", "open", "numpy.save"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict"], ["", "def", "predict", "(", "vid_stack", ",", "cluster", ",", "output_file", "=", "None", ",", "save_file", "=", "True", ",", "return_prediction", "=", "False", ")", ":", "\n", "    ", "pred", "=", "cluster", ".", "predict", "(", "vid_stack", ")", "\n", "pred_list", "=", "list", "(", "pred", ")", "\n", "if", "save_file", ":", "\n", "        ", "with", "open", "(", "output_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "np", ".", "save", "(", "f", ",", "pred", ")", "\n", "", "", "if", "return_prediction", ":", "\n", "        ", "return", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict_files_from_directory": [[33, 43], ["tqdm.tqdm", "os.path.isdir", "os.makedirs", "range", "os.path.join", "clustering.predict", "len", "file.replace().replace().replace", "file.replace().replace", "file.replace"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict"], ["", "", "def", "predict_files_from_directory", "(", "vid_stacks", ",", "files", ",", "cluster", ",", "output_dir", ",", "file_extension", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "vid_stacks", ")", ")", ")", ":", "\n", "        ", "stack", "=", "vid_stacks", "[", "i", "]", "\n", "file", "=", "files", "[", "i", "]", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file", ".", "replace", "(", "\"_rgb\"", ",", "\"\"", ")", ".", "replace", "(", "\"_flow\"", ",", "\"\"", ")", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "+", "file_extension", ")", "\n", "predict", "(", "stack", ",", "cluster", ",", "out_file", ",", "save_file", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.scan_directory": [[7, 45], ["glob.glob", "sorted", "tqdm.tqdm", "glob.glob", "sorted", "range", "len", "rgb_files_[].replace().replace().split", "ids.append", "rgb_files.append", "rgb_files_[].replace().replace", "flow_files_[].replace().replace", "Exception", "ids.append", "rgb_files.append", "flow_files.append", "len", "rgb_files_[].replace().replace", "flow_files.append", "rgb_files_[].split", "rgb_files_[].replace", "flow_files_[].replace", "rgb_files_[].split", "flow_files_[].split", "rgb_files_[].replace", "flow_files_[].split"], "function", ["None"], ["def", "scan_directory", "(", "directory", ",", "ids_filter", "=", "[", "]", ",", "filter_by_ids", "=", "False", ",", "file_rgb_posfix", "=", "\"_rgb\"", ",", "file_flow_posfix", "=", "\"_flow\"", ",", "file_extension", "=", "\".npy\"", ",", "use_flow", "=", "False", ",", "start", "=", "0", ",", "end", "=", "10000000", ")", ":", "\n", "\n", "    ", "if", "directory", "[", "-", "1", "]", "==", "\"/\"", ":", "\n", "        ", "directory", "=", "directory", "[", "0", ":", "len", "(", "directory", ")", "-", "1", "]", "\n", "\n", "", "rgb_files_", "=", "glob", ".", "glob", "(", "directory", "+", "\"/*\"", "+", "file_rgb_posfix", "+", "file_extension", ")", "\n", "rgb_files_", "=", "sorted", "(", "rgb_files_", ")", "\n", "rgb_files_", "=", "rgb_files_", "[", "start", ":", "end", "]", "\n", "if", "use_flow", ":", "\n", "        ", "flow_files_", "=", "glob", ".", "glob", "(", "directory", "+", "\"/*\"", "+", "file_flow_posfix", "+", "file_extension", ")", "\n", "flow_files_", "=", "sorted", "(", "flow_files_", ")", "\n", "flow_files_", "=", "flow_files_", "[", "start", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "flow_files_", "=", "[", "]", "\n", "\n", "", "ids", "=", "[", "]", "\n", "rgb_files", "=", "[", "]", "\n", "flow_files", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "rgb_files_", ")", ")", ")", ":", "\n", "\n", "        ", "id", "=", "rgb_files_", "[", "i", "]", ".", "replace", "(", "file_rgb_posfix", "+", "\".\"", ",", "\".\"", ")", ".", "replace", "(", "file_extension", ",", "\"\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "if", "use_flow", ":", "\n", "            ", "if", "rgb_files_", "[", "i", "]", ".", "replace", "(", "file_rgb_posfix", "+", "\".\"", ",", "\".\"", ")", ".", "replace", "(", "file_extension", ",", "\"\"", ")", "!=", "flow_files_", "[", "i", "]", ".", "replace", "(", "file_flow_posfix", "+", "\".\"", ",", "\".\"", ")", ".", "replace", "(", "file_extension", ",", "\"\"", ")", ":", "\n", "                ", "raise", "Exception", "(", "f\"{i} - {id} - {rgb_files_[i]} and {flow_files_[i]} are missaligned\"", ")", "\n", "\n", "", "", "if", "filter_by_ids", ":", "\n", "            ", "if", "id", "in", "ids_filter", ":", "\n", "                ", "ids", ".", "append", "(", "id", ")", "\n", "rgb_files", ".", "append", "(", "rgb_files_", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "if", "use_flow", ":", "\n", "                    ", "flow_files", ".", "append", "(", "flow_files_", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "ids", ".", "append", "(", "id", ")", "\n", "rgb_files", ".", "append", "(", "rgb_files_", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "if", "use_flow", ":", "\n", "                ", "flow_files", ".", "append", "(", "flow_files_", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "ids", ",", "rgb_files", ",", "flow_files", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.is_file_in_ids": [[47, 52], ["None"], "function", ["None"], ["", "def", "is_file_in_ids", "(", "file", ",", "ids", ")", ":", "\n", "    ", "for", "i", "in", "ids", ":", "\n", "        ", "if", "i", "in", "file", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.load_feature_data": [[54, 114], ["utils.scan_directory", "enumerate", "tqdm.tqdm", "len", "Exception", "len", "numpy.load", "os.path.join", "numpy.load", "print", "len", "len", "utils.is_file_in_ids", "os.path.join", "len", "ids_loaded.append", "stack_rgb.append", "files_rgb.append", "ids_loaded.append", "stack_rgb.append", "stack_flow.append", "files_rgb.append", "files_flow.append", "len", "utils.is_file_in_ids", "len", "len", "i_rgb.split", "i_rgb.split", "i_flow.split"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.scan_directory", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.is_file_in_ids", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.utils.is_file_in_ids"], ["", "def", "load_feature_data", "(", "ids", "=", "[", "]", ",", "directory", "=", "\"/\"", ",", "file_rgb_posfix", "=", "\"_rgb\"", ",", "\n", "file_flow_posfix", "=", "\"_flow\"", ",", "file_extension", "=", "\".npy\"", ",", "\n", "use_flow", "=", "False", ",", "start", "=", "0", ",", "end", "=", "10000000", ")", ":", "\n", "\n", "    ", "if", "ids", "==", "None", "or", "len", "(", "ids", ")", "==", "0", ":", "\n", "        ", "filter_by_ids", "=", "False", "\n", "", "else", ":", "\n", "        ", "filter_by_ids", "=", "True", "\n", "", "_", ",", "f_rgb", ",", "f_flow", "=", "scan_directory", "(", "directory", "=", "directory", ",", "\n", "ids_filter", "=", "ids", ",", "\n", "filter_by_ids", "=", "filter_by_ids", ",", "\n", "file_rgb_posfix", "=", "file_rgb_posfix", ",", "\n", "file_flow_posfix", "=", "file_flow_posfix", ",", "\n", "file_extension", "=", "file_extension", ",", "\n", "use_flow", "=", "use_flow", ",", "\n", "start", "=", "start", ",", "end", "=", "end", ")", "\n", "\n", "if", "directory", "[", "-", "1", "]", "==", "\"/\"", ":", "\n", "        ", "directory", "=", "directory", "[", "0", ":", "len", "(", "directory", ")", "-", "1", "]", "\n", "\n", "# effectively loaded", "\n", "", "ids_loaded", "=", "[", "]", "\n", "files_rgb", "=", "[", "]", "\n", "files_flow", "=", "[", "]", "\n", "\n", "stack_rgb", "=", "[", "]", "\n", "stack_flow", "=", "[", "]", "\n", "for", "x", ",", "i_rgb", "in", "enumerate", "(", "tqdm", "(", "f_rgb", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "i_flow", "=", "None", "\n", "if", "len", "(", "ids", ")", "!=", "0", "and", "not", "is_file_in_ids", "(", "i_rgb", ",", "ids", ")", ":", "\n", "                ", "continue", "\n", "", "video_stack_rgb", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "i_rgb", ")", ",", "allow_pickle", "=", "True", ")", "\n", "if", "use_flow", ":", "\n", "                ", "i_flow", "=", "f_flow", "[", "x", "]", "\n", "if", "len", "(", "ids", ")", "!=", "0", "and", "not", "is_file_in_ids", "(", "i_flow", ",", "ids", ")", ":", "\n", "                    ", "continue", "\n", "", "video_stack_flow", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "i_flow", ")", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "", "if", "not", "use_flow", ":", "\n", "                ", "if", "len", "(", "video_stack_rgb", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "ids_loaded", ".", "append", "(", "ids", "[", "x", "]", ")", "\n", "stack_rgb", ".", "append", "(", "video_stack_rgb", ")", "\n", "files_rgb", ".", "append", "(", "i_rgb", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "", "", "elif", "len", "(", "video_stack_rgb", ".", "shape", ")", "==", "2", "and", "len", "(", "video_stack_flow", ".", "shape", ")", "==", "2", ":", "\n", "                ", "ids_loaded", ".", "append", "(", "ids", "[", "x", "]", ")", "\n", "stack_rgb", ".", "append", "(", "video_stack_rgb", ")", "\n", "stack_flow", ".", "append", "(", "video_stack_flow", ")", "\n", "files_rgb", ".", "append", "(", "i_rgb", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "files_flow", ".", "append", "(", "i_flow", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "continue", "\n", "\n", "", "", "if", "len", "(", "stack_rgb", ")", "==", "0", ":", "\n", "        ", "raise", "Exception", "(", "\"Features not loaded.\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "ids", ",", "stack_rgb", ",", "files_rgb", ",", "stack_flow", ",", "files_flow", "\n", "", "", ""]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveDataset.__init__": [[18, 28], ["len", "visualglove.VisualGloveDataset._create_coocurrence_matrix", "visualglove.VisualGloveDataset._ids_tokens.append", "enumerate", "visualglove.VisualGloveDataset._word2id.items", "range"], "methods", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveDataset._create_coocurrence_matrix"], ["    ", "def", "__init__", "(", "self", ",", "tokens", ",", "window_size", "=", "25", ",", "vocab_size", "=", "1000", ")", ":", "\n", "        ", "self", ".", "_window_size", "=", "window_size", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "_word2id", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "range", "(", "0", ",", "vocab_size", ")", ")", "}", "\n", "self", ".", "_id2word", "=", "{", "i", ":", "w", "for", "w", ",", "i", "in", "self", ".", "_word2id", ".", "items", "(", ")", "}", "\n", "self", ".", "_vocab_len", "=", "len", "(", "self", ".", "_word2id", ")", "\n", "self", ".", "_ids_tokens", "=", "[", "]", "\n", "for", "sent_tokens", "in", "self", ".", "tokens", ":", "\n", "                ", "self", ".", "_ids_tokens", ".", "append", "(", "[", "self", ".", "_word2id", "[", "w", "]", "for", "w", "in", "sent_tokens", "]", ")", "\n", "", "self", ".", "_create_coocurrence_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveDataset._create_coocurrence_matrix": [[29, 55], ["collections.defaultdict", "list", "list", "list", "collections.defaultdict.items", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "enumerate", "cnt.items", "max", "min", "range", "visualglove.VisualGloveDataset._i_idx.append", "visualglove.VisualGloveDataset._j_idx.append", "visualglove.VisualGloveDataset._xij.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "max", "abs"], "methods", ["None"], ["", "def", "_create_coocurrence_matrix", "(", "self", ")", ":", "\n", "        ", "cooc_mat", "=", "defaultdict", "(", "Counter", ")", "\n", "\n", "for", "_id_tokens", "in", "self", ".", "_ids_tokens", ":", "\n", "            ", "for", "i", ",", "w", "in", "enumerate", "(", "_id_tokens", ")", ":", "\n", "                ", "start_i", "=", "max", "(", "i", "-", "self", ".", "_window_size", ",", "0", ")", "\n", "end_i", "=", "min", "(", "i", "+", "self", ".", "_window_size", "+", "1", ",", "len", "(", "_id_tokens", ")", ")", "\n", "for", "j", "in", "range", "(", "start_i", ",", "end_i", ")", ":", "\n", "                    ", "if", "i", "!=", "j", ":", "\n", "                        ", "c", "=", "_id_tokens", "[", "j", "]", "\n", "cooc_mat", "[", "w", "]", "[", "c", "]", "+=", "1", "/", "max", "(", "abs", "(", "j", "-", "1", ")", ",", "1", ")", "\n", "\n", "", "", "", "", "self", ".", "_i_idx", "=", "list", "(", ")", "\n", "self", ".", "_j_idx", "=", "list", "(", ")", "\n", "self", ".", "_xij", "=", "list", "(", ")", "\n", "\n", "# create indexes and x value tensors", "\n", "for", "w", ",", "cnt", "in", "cooc_mat", ".", "items", "(", ")", ":", "\n", "            ", "for", "c", ",", "v", "in", "cnt", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_i_idx", ".", "append", "(", "w", ")", "\n", "self", ".", "_j_idx", ".", "append", "(", "c", ")", "\n", "self", ".", "_xij", ".", "append", "(", "v", ")", "\n", "\n", "", "", "self", ".", "_i_idx", "=", "torch", ".", "LongTensor", "(", "self", ".", "_i_idx", ")", ".", "cuda", "(", ")", "\n", "self", ".", "_j_idx", "=", "torch", ".", "LongTensor", "(", "self", ".", "_j_idx", ")", ".", "cuda", "(", ")", "\n", "self", ".", "_xij", "=", "torch", ".", "FloatTensor", "(", "self", ".", "_xij", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveDataset.get_batches": [[56, 62], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "numpy.random.choice", "len", "len", "len"], "methods", ["None"], ["", "def", "get_batches", "(", "self", ",", "batch_size", ")", ":", "\n", "# generate random idx", "\n", "        ", "rand_ids", "=", "torch", ".", "LongTensor", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "_xij", ")", ",", "len", "(", "self", ".", "_xij", ")", ",", "replace", "=", "False", ")", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "len", "(", "rand_ids", ")", ",", "batch_size", ")", ":", "\n", "            ", "batch_ids", "=", "rand_ids", "[", "p", ":", "p", "+", "batch_size", "]", "\n", "yield", "self", ".", "_xij", "[", "batch_ids", "]", ",", "self", ".", "_i_idx", "[", "batch_ids", "]", ",", "self", ".", "_j_idx", "[", "batch_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveModel.__init__": [[80, 91], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "visualglove.VisualGloveModel.wi.weight.data.uniform_", "visualglove.VisualGloveModel.wj.weight.data.uniform_", "visualglove.VisualGloveModel.bi.weight.data.zero_", "visualglove.VisualGloveModel.bj.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveEmbedder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "        ", "super", "(", "VisualGloveModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wi", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "\n", "self", ".", "wj", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "\n", "self", ".", "bi", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "1", ")", "\n", "self", ".", "bj", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "1", ")", "\n", "\n", "self", ".", "wi", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "wj", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "bi", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bj", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveModel.forward": [[92, 100], ["visualglove.VisualGloveModel.wi", "visualglove.VisualGloveModel.wj", "visualglove.VisualGloveModel.bi().squeeze", "visualglove.VisualGloveModel.bj().squeeze", "visualglove.VisualGloveModel.bi", "visualglove.VisualGloveModel.bj", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "i_indices", ",", "j_indices", ")", ":", "\n", "        ", "w_i", "=", "self", ".", "wi", "(", "i_indices", ")", "\n", "w_j", "=", "self", ".", "wj", "(", "j_indices", ")", "\n", "b_i", "=", "self", ".", "bi", "(", "i_indices", ")", ".", "squeeze", "(", ")", "\n", "b_j", "=", "self", ".", "bj", "(", "j_indices", ")", ".", "squeeze", "(", ")", "\n", "x", "=", "torch", ".", "sum", "(", "w_i", "*", "w_j", ",", "dim", "=", "1", ")", "+", "b_i", "+", "b_j", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveEmbedder.__init__": [[103, 108], ["visualglove.VisualGloveEmbedder.model.wi.weight.cpu().data.numpy", "visualglove.VisualGloveEmbedder.model.wj.weight.cpu().data.numpy", "visualglove.VisualGloveEmbedder.model.wi.weight.cpu", "visualglove.VisualGloveEmbedder.model.wj.weight.cpu"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "glove_model", ")", ":", "\n", "        ", "self", ".", "model", "=", "glove_model", "\n", "emb_i", "=", "self", ".", "model", ".", "wi", ".", "weight", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "emb_j", "=", "self", ".", "model", ".", "wj", ".", "weight", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "emb", "=", "emb_i", "+", "emb_j", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveEmbedder.get_embedding": [[110, 112], ["None"], "methods", ["None"], ["def", "get_embedding", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "emb", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveEmbedder.get_embedding_from_video_stack": [[113, 116], ["list", "cluster.predict"], "methods", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict"], ["", "def", "get_embedding_from_video_stack", "(", "self", ",", "stack", ",", "cluster", ")", ":", "\n", "        ", "predictions", "=", "list", "(", "cluster", ".", "predict", "(", "stack", ")", ")", "\n", "return", "self", ".", "emb", "[", "predictions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.predicting_video_clusters": [[64, 76], ["tqdm.tqdm", "random.shuffle", "code.clustering.predict", "all_tokens.append", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.clustering.predict"], ["", "", "", "def", "predicting_video_clusters", "(", "cluster", ",", "data", ",", "split_rate", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Predict video clusters and store in individual lists\n    \"\"\"", "\n", "all_tokens", "=", "[", "]", "\n", "for", "d", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "preds", "=", "predict", "(", "d", ",", "cluster", ",", "None", ",", "False", ",", "True", ")", "\n", "all_tokens", ".", "append", "(", "preds", ")", "\n", "", "random", ".", "shuffle", "(", "all_tokens", ")", "\n", "train", "=", "all_tokens", "[", ":", "int", "(", "len", "(", "all_tokens", ")", "*", "split_rate", ")", "]", "\n", "val", "=", "all_tokens", "[", "int", "(", "len", "(", "all_tokens", ")", "*", "split_rate", ")", ":", "]", "\n", "\n", "return", "train", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.training": [[117, 187], ["visualglove.predicting_video_clusters", "visualglove.VisualGloveDataset", "visualglove.VisualGloveModel", "VisualGloveModel.cuda", "torch.Adagrad", "int", "list", "list", "range", "enumerate", "print", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min.cuda", "torch.mean().cuda", "torch.mean().cuda", "torch.mean().cuda", "torch.mean().cuda", "VisualGloveModel.parameters", "visualglove.VisualGloveDataset.get_batches", "list.append", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.mse_loss", "len", "optim.Adagrad.zero_grad", "VisualGloveModel.", "visualglove.training.weight_func"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.predicting_video_clusters", "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveDataset.get_batches"], ["", "", "def", "training", "(", "cluster", ",", "data", ",", "n_epochs", "=", "1500", ",", "batch_size", "=", "2048", ",", "\n", "window_size", "=", "25", ",", "x_max", "=", "20", ",", "alpha", "=", "0.75", ",", "embed_dim", "=", "128", ",", "\n", "max_epochs_lower", "=", "80", ",", "model_path", "=", "\"./data/visualglove.pt\"", ",", "\n", "plot_loss", "=", "False", ",", "plot_vocabulary", "=", "False", ",", "vocabulary_size", "=", "1000", ")", ":", "\n", "\n", "    ", "train", ",", "_", "=", "predicting_video_clusters", "(", "cluster", ",", "data", ",", "split_rate", "=", "1.0", ")", "\n", "\n", "dataset", "=", "VisualGloveDataset", "(", "train", ",", "window_size", "=", "window_size", ",", "vocab_size", "=", "vocabulary_size", ")", "\n", "glove", "=", "VisualGloveModel", "(", "dataset", ".", "_vocab_len", ",", "embed_dim", ")", "\n", "glove", ".", "cuda", "(", ")", "\n", "\n", "def", "weight_func", "(", "x", ",", "x_max", ",", "alpha", ")", ":", "\n", "        ", "wx", "=", "(", "x", "/", "x_max", ")", "**", "alpha", "\n", "wx", "=", "torch", ".", "min", "(", "wx", ",", "torch", ".", "ones_like", "(", "wx", ")", ")", "\n", "return", "wx", ".", "cuda", "(", ")", "\n", "\n", "", "def", "wmse_loss", "(", "weights", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "loss", "=", "weights", "*", "F", ".", "mse_loss", "(", "inputs", ",", "targets", ",", "reduction", "=", "'none'", ")", "\n", "return", "torch", ".", "mean", "(", "loss", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adagrad", "(", "glove", ".", "parameters", "(", ")", ",", "lr", "=", "0.05", ")", "\n", "\n", "n_batches", "=", "int", "(", "len", "(", "dataset", ".", "_xij", ")", "/", "batch_size", ")", "\n", "loss_values", "=", "list", "(", ")", "\n", "epochs_loss_values", "=", "list", "(", ")", "\n", "\n", "lower_loss", "=", "1", "\n", "epochs_lower", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "1", ",", "n_epochs", "+", "1", ")", ":", "\n", "        ", "batch_i", "=", "0", "\n", "\n", "for", "x_ij", ",", "i_idx", ",", "j_idx", "in", "dataset", ".", "get_batches", "(", "batch_size", ")", ":", "\n", "\n", "            ", "batch_i", "+=", "1", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "outputs", "=", "glove", "(", "i_idx", ",", "j_idx", ")", "\n", "weights_x", "=", "weight_func", "(", "x_ij", ",", "x_max", ",", "alpha", ")", "\n", "loss", "=", "wmse_loss", "(", "weights_x", ",", "outputs", ",", "torch", ".", "log", "(", "x_ij", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "batch_i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "f\"Epoch: {e}/{n_epochs} \\t Batch: {batch_i}/{n_batches} \\t Loss: {np.mean(loss_values[-100:])}\"", ")", "\n", "\n", "", "", "epochs_loss_values", ".", "append", "(", "loss_values", "[", "-", "1", "]", ")", "\n", "if", "lower_loss", ">", "epochs_loss_values", "[", "-", "1", "]", ":", "\n", "            ", "lower_loss", "=", "epochs_loss_values", "[", "-", "1", "]", "\n", "epochs_lower", "=", "0", "\n", "", "else", ":", "\n", "            ", "if", "epochs_lower", "==", "0", ":", "\n", "                ", "print", "(", "f\"saving model in epoch {e}\"", ")", "\n", "torch", ".", "save", "(", "glove", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "", "epochs_lower", "+=", "1", "\n", "if", "epochs_lower", "==", "max_epochs_lower", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "for", "e", ",", "l", "in", "enumerate", "(", "epochs_loss_values", ")", ":", "\n", "        ", "if", "e", "%", "20", "==", "0", ":", "\n", "            ", "print", "(", "f\"Epoch: {e}\\tLoss: {l}\"", ")", "\n", "\n", "", "", "print", "(", "f\"Lower loss: {lower_loss}\"", ")", "\n", "return", "glove", "\n", "\n"]], "home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.predict_visual_embedding": [[189, 231], ["visualglove.VisualGloveEmbedder", "enumerate", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "tqdm.tqdm", "visualglove.VisualGloveEmbedder.get_embedding_from_video_stack", "os.path.join", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "os.path.join", "print", "file_rgb.replace().replace().replace", "open", "numpy.save", "os.path.join", "open", "numpy.save", "print", "open", "numpy.save", "file_rgb.replace().replace", "file_rgb.replace().replace().replace", "file_flow.replace().replace().replace", "file_rgb.replace", "file_rgb.replace().replace", "file_flow.replace().replace", "file_rgb.replace", "file_flow.replace"], "function", ["home.repos.pwc.inspect_result.valterlej_dvcusi.code.visualglove.VisualGloveEmbedder.get_embedding_from_video_stack"], ["", "def", "predict_visual_embedding", "(", "glove_model", ",", "cluster", ",", "stacks_rgb", ",", "files_rgb", ",", "stacks_flow", ",", "files_flow", ",", "output_emb_dir", ",", "emb_file_extension", ",", "output_concat_dir", ",", "concat_file_extension", ",", "use_flow", "=", "True", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_emb_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_emb_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_concat_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_concat_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "embedder", "=", "VisualGloveEmbedder", "(", "glove_model", ")", "\n", "\n", "for", "i", ",", "stack_rgb", "in", "enumerate", "(", "tqdm", "(", "stacks_rgb", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "file_rgb", "=", "files_rgb", "[", "i", "]", "\n", "if", "use_flow", ":", "\n", "                ", "stack_flow", "=", "stacks_flow", "[", "i", "]", "\n", "file_flow", "=", "files_flow", "[", "i", "]", "\n", "\n", "", "x", "=", "embedder", ".", "get_embedding_from_video_stack", "(", "stack_rgb", ",", "cluster", ")", "\n", "\n", "x_", "=", "x", "/", "2", "\n", "\n", "if", "not", "use_flow", ":", "\n", "                ", "emb_rgb", "=", "np", ".", "concatenate", "(", "(", "stack_rgb", ",", "x", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "emb_rgb", "=", "np", ".", "concatenate", "(", "(", "stack_rgb", ",", "x_", ")", ",", "axis", "=", "1", ")", "\n", "emb_flow", "=", "np", ".", "concatenate", "(", "(", "stack_flow", ",", "x_", ")", ",", "axis", "=", "1", ")", "### emb_rgb and emb_flow are summed in the BMT method", "\n", "\n", "", "f_emb", "=", "os", ".", "path", ".", "join", "(", "output_emb_dir", ",", "file_rgb", ".", "replace", "(", "\"_rgb\"", ",", "\"\"", ")", ".", "replace", "(", "\"_flow\"", ",", "\"\"", ")", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "+", "emb_file_extension", ")", "\n", "try", ":", "\n", "                ", "f_concat_rgb", "=", "os", ".", "path", ".", "join", "(", "output_concat_dir", ",", "file_rgb", ".", "replace", "(", "\"_rgb\"", ",", "\"\"", ")", ".", "replace", "(", "\"_flow\"", ",", "\"\"", ")", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "+", "\"_rgb\"", "+", "concat_file_extension", ")", "\n", "with", "open", "(", "f_concat_rgb", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "np", ".", "save", "(", "f_concat_rgb", ",", "emb_rgb", ")", "\n", "", "if", "use_flow", ":", "\n", "                    ", "f_concat_flow", "=", "os", ".", "path", ".", "join", "(", "output_concat_dir", ",", "file_flow", ".", "replace", "(", "\"_rgb\"", ",", "\"\"", ")", ".", "replace", "(", "\"_flow\"", ",", "\"\"", ")", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "+", "\"_flow\"", "+", "concat_file_extension", ")", "\n", "with", "open", "(", "f_concat_flow", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "np", ".", "save", "(", "f_concat_flow", ",", "emb_flow", ")", "\n", "", "", "with", "open", "(", "f_emb", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "np", ".", "save", "(", "f", ",", "x", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "f\"{f} was ignored due to problems with files\"", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "continue", "", "", "", "", ""]]}