{"home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric._fast_hist": [[4, 11], ["np.bincount().reshape", "np.bincount", "label_true[].astype"], "function", ["None"], ["def", "_fast_hist", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ",", "\n", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric.scores": [[13, 33], ["np.zeros", "zip", "np.nanmean", "np.nanmean", "dict", "metric._fast_hist", "np.diag().sum", "np.zeros.sum", "np.diag", "np.zeros.sum", "np.diag", "np.zeros.sum", "np.zeros.sum", "np.zeros.sum", "zip", "lt.flatten", "lp.flatten", "np.diag", "range", "np.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric._fast_hist"], ["", "def", "scores", "(", "label_trues", ",", "label_preds", ",", "n_class", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "n_class", ")", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "valid", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", "[", "valid", "]", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "n_class", ")", ",", "iu", ")", ")", "\n", "\n", "return", "{", "\n", "\"Overall Acc\"", ":", "acc", ",", "\n", "\"Mean Acc\"", ":", "acc_cls", ",", "\n", "\"FreqW Acc\"", ":", "fwavacc", ",", "\n", "\"Mean IoU\"", ":", "mean_iu", ",", "\n", "\"Class IoU\"", ":", "cls_iu", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric.batch_pix_accuracy": [[36, 47], ["torch.max", "np.sum", "np.sum", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "target", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "0", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric.batch_intersection_union": [[49, 66], ["torch.max", "np.histogram", "np.histogram", "np.histogram", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "predict", "=", "predict", "*", "(", "target", ">", "0", ")", ".", "astype", "(", "predict", ".", "dtype", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "predict", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "(", "area_inter", "<=", "area_union", ")", ".", "all", "(", ")", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric.pixel_accuracy": [[68, 74], ["np.asarray", "np.asarray", "np.sum", "np.sum"], "function", ["None"], ["", "def", "pixel_accuracy", "(", "im_pred", ",", "im_lab", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "im_lab", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "im_pred", "==", "im_lab", ")", "*", "(", "im_lab", ">", "0", ")", ")", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.metric.intersection_and_union": [[76, 89], ["np.asarray", "np.asarray", "np.histogram", "np.histogram", "np.histogram"], "function", ["None"], ["", "def", "intersection_and_union", "(", "im_pred", ",", "im_lab", ",", "num_class", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "im_pred", "=", "im_pred", "*", "(", "im_lab", ">", "0", ")", "\n", "intersection", "=", "im_pred", "*", "(", "im_pred", "==", "im_lab", ")", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "im_pred", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "im_lab", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "return", "area_inter", ",", "area_union", "\n", "", ""]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.modelsummary.get_model_summary": [[12, 155], ["collections.namedtuple", "model.eval", "model.apply", "model", "hook.remove", "str", "isinstance", "isinstance", "summary.append", "hooks.append", "str", "module.parameters", "hasattr", "collections.namedtuple.", "isinstance", "isinstance", "module.register_forward_hook", "str.find", "str.find", "str.find", "str.find", "str.find", "str.find", "hasattr", "param_.view().size", "str.find", "str.find", "module.mask.mean().item", "int", "isinstance", "list", "list", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "int", "input[].size", "output.size", "param_.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "module.mask.mean", "list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "output.size", "len", "len", "len", "len", "len", "module.weight.data.size", "list", "list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "output.size", "torch.prod", "torch.prod", "input[].size", "len", "len", "len", "len", "len", "input[].size", "module.weight.data.size", "list", "list", "torch.LongTensor", "torch.LongTensor", "str", "str", "str", "str", "output.size", "module.weight.data.size", "list", "output.size", "list", "output.size", "output.size"], "function", ["None"], ["def", "get_model_summary", "(", "model", ",", "*", "input_tensors", ",", "item_length", "=", "26", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "summary", "=", "[", "]", "\n", "\n", "ModuleDetails", "=", "namedtuple", "(", "\n", "\"Layer\"", ",", "[", "\"name\"", ",", "\"input_size\"", ",", "\"output_size\"", ",", "\"num_parameters\"", ",", "\"multiply_adds\"", ",", "\"num_param_counts\"", "]", ")", "\n", "hooks", "=", "[", "]", "\n", "layer_instances", "=", "{", "}", "\n", "\n", "def", "add_hooks", "(", "module", ")", ":", "\n", "\n", "        ", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "class_name", "=", "str", "(", "module", ".", "__class__", ".", "__name__", ")", "\n", "\n", "instance_index", "=", "1", "\n", "if", "class_name", "not", "in", "layer_instances", ":", "\n", "                ", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "", "else", ":", "\n", "                ", "instance_index", "=", "layer_instances", "[", "class_name", "]", "+", "1", "\n", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "\n", "", "layer_name", "=", "class_name", "+", "\"_\"", "+", "str", "(", "instance_index", ")", "\n", "\n", "params", "=", "0", "\n", "counts", "=", "0", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "'conv'", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "'Temp'", ")", "!=", "-", "1", ":", "\n", "                ", "for", "param_", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "param_", ".", "requires_grad", ":", "\n", "                        ", "params", "+=", "param_", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "counts", "+=", "1", "\n", "\n", "", "", "", "flops", "=", "\"Not Available\"", "\n", "\n", "if", "(", "class_name", ".", "find", "(", "\"ConvTranspose2d\"", ")", "!=", "-", "1", ")", "and", "hasattr", "(", "module", ",", "\"weight\"", ")", ":", "\n", "                ", "flops", "=", "(", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "data", ".", "size", "(", ")", ")", ")", ")", "*", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", "[", "2", ":", "]", ")", ")", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "elif", "(", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", ")", "and", "hasattr", "(", "module", ",", "\"weight\"", ")", ":", "\n", "                ", "flops", "=", "(", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "data", ".", "size", "(", ")", ")", ")", ")", "*", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", "[", "2", ":", "]", ")", ")", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "elif", "class_name", ".", "find", "(", "\"conv\"", ")", "!=", "-", "1", ":", "\n", "                ", "flops", "=", "(", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "data", ".", "size", "(", ")", ")", ")", ")", "*", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", "[", "2", ":", "]", ")", ")", ")", ".", "item", "(", ")", "\n", "p", "=", "module", ".", "mask", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "p2", "=", "module", ".", "p", "\n", "flops", "=", "int", "(", "flops", "*", "p", ")", "\n", "if", "module", ".", "interpolate", "==", "'rbf'", "or", "module", ".", "interpolate", "==", "'pooling'", "or", "module", ".", "interpolate", "==", "'conv'", ":", "\n", "                    ", "flops", "+=", "int", "(", "(", "1", "-", "p", ")", "*", "p", "*", "output", ".", "size", "(", "1", ")", "*", "(", "module", ".", "r", "*", "module", ".", "r", ")", "*", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "flops", "=", "(", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", ")", ")", "*", "input", "[", "0", "]", ".", "size", "(", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "summary", ".", "append", "(", "\n", "ModuleDetails", "(", "\n", "name", "=", "layer_name", ",", "\n", "input_size", "=", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", ",", "\n", "output_size", "=", "list", "(", "output", ".", "size", "(", ")", ")", ",", "\n", "num_parameters", "=", "params", ",", "\n", "multiply_adds", "=", "flops", ",", "\n", "num_param_counts", "=", "counts", ",", ")", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "ModuleList", ")", "and", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", "and", "module", "!=", "model", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "add_hooks", ")", "\n", "\n", "space_len", "=", "item_length", "\n", "\n", "model", "(", "*", "input_tensors", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "details", "=", "''", "\n", "if", "verbose", ":", "\n", "        ", "details", "=", "\"Model Summary\"", "+", "os", ".", "linesep", "+", "\"Name{}Input Size{}Output Size{}Parameters{}Multiply Adds (Flops){}\"", ".", "format", "(", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Name\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Input Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Output Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Parameters\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Multiply Adds (Flops)\"", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "params_sum", "=", "0", "\n", "flops_sum", "=", "0", "\n", "counts_sum", "=", "0", "\n", "for", "layer", "in", "summary", ":", "\n", "        ", "params_sum", "+=", "layer", ".", "num_parameters", "\n", "if", "layer", ".", "multiply_adds", "!=", "\"Not Available\"", ":", "\n", "            ", "flops_sum", "+=", "layer", ".", "multiply_adds", "\n", "", "counts_sum", "+=", "layer", ".", "num_param_counts", "\n", "shown_flops", "=", "layer", ".", "multiply_adds", "/", "(", "1024", "**", "3", ")", "if", "layer", ".", "multiply_adds", "!=", "'Not Available'", "else", "0", "\n", "if", "verbose", ":", "\n", "            ", "if", "shown_flops", "<", "1", ":", "\n", "                ", "details", "+=", "''", "\n", "", "else", ":", "\n", "                ", "details", "+=", "\"{}{}{}{}{}{}{}{}{}{}\"", ".", "format", "(", "\n", "layer", ".", "name", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "layer", ".", "name", ")", ")", ",", "\n", "layer", ".", "input_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "input_size", ")", ")", ")", ",", "\n", "layer", ".", "output_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "output_size", ")", ")", ")", ",", "\n", "layer", ".", "num_parameters", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "num_parameters", ")", ")", ")", ",", "\n", "shown_flops", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "shown_flops", ")", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "", "", "details", "+=", "os", ".", "linesep", "+", "\"Total Parameters: {:,}\"", ".", "format", "(", "params_sum", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Total Multiply Adds (For Convolution and Linear Layers only): {:,} GFLOPs\"", ".", "format", "(", "flops_sum", "/", "(", "1024", "**", "3", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Number of Layers\"", "+", "os", ".", "linesep", "\n", "for", "layer", "in", "layer_instances", ":", "\n", "        ", "details", "+=", "\"{} : {} layers   \"", ".", "format", "(", "layer", ",", "layer_instances", "[", "layer", "]", ")", "\n", "\n", "", "return", "details", ",", "{", "'params'", ":", "params_sum", ",", "\n", "'flops'", ":", "flops_sum", ",", "\n", "'counts'", ":", "counts_sum", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.FullModel.__init__": [[32, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "loss", ")", ":", "\n", "    ", "super", "(", "FullModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.FullModel.forward": [[37, 41], ["utils.FullModel.model", "utils.FullModel.loss", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "loss", "(", "outputs", ",", "labels", ")", "\n", "return", "torch", ".", "unsqueeze", "(", "loss", ",", "0", ")", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.FullEEModel.__init__": [[44, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "config", "=", "None", ")", ":", "\n", "    ", "super", "(", "FullEEModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "cfg", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.FullEEModel.forward": [[50, 57], ["utils.FullEEModel.model", "enumerate", "losses.append", "utils.FullEEModel.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "losses", "=", "[", "]", "\n", "for", "i", ",", "output", "in", "enumerate", "(", "outputs", ")", ":", "\n", "        ", "losses", ".", "append", "(", "self", ".", "loss", "(", "outputs", "[", "i", "]", ",", "labels", ")", ")", "\n", "\n", "", "return", "losses", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.__init__": [[69, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.initialize": [[76, 82], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "val", "\n", "self", ".", "sum", "=", "val", "*", "weight", "\n", "self", ".", "count", "=", "weight", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update": [[83, 88], ["utils.AverageMeter.initialize", "utils.AverageMeter.add"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.initialize", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.add"], ["", "def", "update", "(", "self", ",", "val", ",", "weight", "=", "1", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", "val", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add", "(", "val", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.add": [[89, 94], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "weight", "\n", "self", ".", "count", "+=", "weight", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.value": [[95, 97], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average": [[98, 100], ["None"], "methods", ["None"], ["", "def", "average", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.json_save": [[18, 22], ["open", "json.dump"], "function", ["None"], ["def", "json_save", "(", "filename", ",", "json_obj", ")", ":", "\n", "    ", "import", "json", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "json_obj", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.json_read": [[23, 29], ["open", "json.load"], "function", ["None"], ["", "", "def", "json_read", "(", "filename", ")", ":", "\n", "    ", "import", "json", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size": [[58, 62], ["torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size"], ["", "", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank": [[63, 67], ["torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.create_logger": [[101, 129], ["pathlib.Path", "os.makedirs", "os.makedirs", "print", "final_output_dir.mkdir", "time.strftime", "time.strftime", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger().addHandler", "print", "tensorboard_log_dir.mkdir", "os.path.basename().split", "str", "str", "str", "logging.getLogger", "os.path.basename"], "function", ["None"], ["", "", "def", "create_logger", "(", "cfg", ",", "cfg_name", ",", "phase", "=", "'train'", ")", ":", "\n", "    ", "root_output_dir", "=", "Path", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "OUTPUT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "dataset", "=", "cfg", ".", "DATASET", ".", "DATASET", "\n", "model", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "cfg_name", "=", "os", ".", "path", ".", "basename", "(", "cfg_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "final_output_dir", "=", "root_output_dir", "\n", "os", ".", "makedirs", "(", "final_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "final_output_dir", ")", ")", "\n", "final_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "log_file", "=", "'{}_{}_{}.log'", ".", "format", "(", "cfg_name", ",", "time_str", ",", "phase", ")", "\n", "final_log_file", "=", "final_output_dir", "/", "log_file", "\n", "head", "=", "'%(asctime)-15s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "str", "(", "final_log_file", ")", ",", "\n", "format", "=", "head", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "tensorboard_log_dir", "=", "final_output_dir", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "tensorboard_log_dir", ")", ")", "\n", "tensorboard_log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "return", "logger", ",", "str", "(", "final_output_dir", ")", ",", "str", "(", "tensorboard_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_confusion_matrix_gpu": [[131, 155], ["pred.transpose().transpose", "torch.bincount", "torch.bincount", "torch.bincount", "numpy.zeros", "range", "torch.max", "torch.max", "torch.max", "seg_gt.to.get_device", "seg_gt.to.to", "range", "pred.transpose", "len"], "function", ["None"], ["", "def", "get_confusion_matrix_gpu", "(", "label", ",", "pred", ",", "size", ",", "num_class", ",", "ignore", "=", "-", "1", ",", "device", "=", "0", ")", ":", "\n", "    ", "output", "=", "pred", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "seg_pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "3", ")", "[", "1", "]", "\n", "seg_gt", "=", "label", "\n", "\n", "ignore_index", "=", "seg_gt", "!=", "ignore", "\n", "\n", "seg_gt", "=", "seg_gt", "[", "ignore_index", "]", "\n", "\n", "seg_pred", "=", "seg_pred", "[", "ignore_index", "]", "\n", "if", "seg_gt", ".", "get_device", "(", ")", "==", "-", "1", ":", "\n", "        ", "seg_gt", "=", "seg_gt", ".", "to", "(", "0", ")", "\n", "\n", "", "index", "=", "(", "(", "seg_gt", "*", "num_class", ")", ".", "long", "(", ")", "+", "seg_pred", ")", "\n", "label_count", "=", "torch", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "num_class", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "for", "i_pred", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "num_class", "+", "i_pred", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "\n", "i_pred", "]", "=", "label_count", "[", "cur_index", "]", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.adjust_learning_rate": [[156, 162], ["enumerate", "float"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "max_iters", ",", "\n", "cur_iters", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "(", "power", ")", ")", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "", "", ""]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.__init__": [[13, 63], ["base_dataset.BaseDataset.__init__", "torch.FloatTensor().cuda", "cityscapes.Cityscapes.read_files", "line.strip().split", "torch.FloatTensor", "open", "line.strip"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "19", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "2048", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "Cityscapes", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ",", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_weights", "=", "torch", ".", "FloatTensor", "(", "[", "0.8373", ",", "0.918", ",", "0.866", ",", "1.0345", ",", "\n", "1.0166", ",", "0.9969", ",", "0.9754", ",", "1.0489", ",", "\n", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "\n", "1.1116", ",", "0.9037", ",", "1.0865", ",", "1.0955", ",", "\n", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "center_crop_test", "=", "center_crop_test", "\n", "\n", "self", ".", "img_list", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "root", "+", "list_path", ")", "]", "\n", "\n", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n", "", "self", ".", "label_mapping", "=", "{", "-", "1", ":", "ignore_label", ",", "0", ":", "ignore_label", ",", "\n", "1", ":", "ignore_label", ",", "2", ":", "ignore_label", ",", "\n", "3", ":", "ignore_label", ",", "4", ":", "ignore_label", ",", "\n", "5", ":", "ignore_label", ",", "6", ":", "ignore_label", ",", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "9", ":", "ignore_label", ",", "\n", "10", ":", "ignore_label", ",", "11", ":", "2", ",", "12", ":", "3", ",", "\n", "13", ":", "4", ",", "14", ":", "ignore_label", ",", "15", ":", "ignore_label", ",", "\n", "16", ":", "ignore_label", ",", "17", ":", "5", ",", "18", ":", "ignore_label", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "\n", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "\n", "29", ":", "ignore_label", ",", "30", ":", "ignore_label", ",", "\n", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.read_files": [[64, 85], ["files.append", "files.append", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "if", "'test'", "in", "self", ".", "list_path", ":", "\n", "            ", "for", "item", "in", "self", ".", "img_list", ":", "\n", "                ", "image_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_path", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "image_path", "[", "0", "]", ",", "\n", "\"name\"", ":", "name", ",", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "item", "in", "self", ".", "img_list", ":", "\n", "                ", "image_path", ",", "label_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "image_path", ",", "\n", "\"label\"", ":", "label_path", ",", "\n", "\"name\"", ":", "name", ",", "\n", "\"weight\"", ":", "1", "\n", "}", ")", "\n", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.convert_label": [[86, 95], ["label.copy", "cityscapes.Cityscapes.label_mapping.items", "cityscapes.Cityscapes.label_mapping.items"], "methods", ["None"], ["", "def", "convert_label", "(", "self", ",", "label", ",", "inverse", "=", "False", ")", ":", "\n", "        ", "temp", "=", "label", ".", "copy", "(", ")", "\n", "if", "inverse", ":", "\n", "            ", "for", "v", ",", "k", "in", "self", ".", "label_mapping", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "label_mapping", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.__getitem__": [[96, 118], ["cv2.imread", "cv2.imread", "cityscapes.Cityscapes.convert_label", "cityscapes.Cityscapes.gen_sample", "os.path.join", "cityscapes.Cityscapes.input_transform", "image.transpose.transpose.transpose", "os.path.join", "image.transpose.transpose.copy", "cityscapes.Cityscapes.copy", "numpy.array", "image.transpose.transpose.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.convert_label", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'cityscapes'", ",", "item", "[", "\"img\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "size", "=", "image", ".", "shape", "\n", "\n", "if", "'test'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'cityscapes'", ",", "item", "[", "\"label\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "label", "=", "self", ".", "convert_label", "(", "label", ")", "\n", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "self", ".", "flip", ",", "\n", "self", ".", "center_crop_test", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.multi_scale_inference": [[119, 170], ["[].transpose().copy.size", "[].transpose().copy", "numpy.int", "numpy.int", "torch.zeros().cuda", "cityscapes.Cityscapes.multi_scale_aug", "torch.nn.functional.upsample", "[].transpose", "torch.zeros", "torch.from_numpy.transpose", "numpy.expand_dims", "torch.from_numpy", "cityscapes.Cityscapes.inference", "torch.zeros().cuda", "torch.zeros().cuda", "range", "numpy.int", "numpy.int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "max", "max", "torch.from_numpy.transpose", "numpy.expand_dims", "torch.from_numpy", "cityscapes.Cityscapes.inference", "[].transpose().copy.numpy", "int", "int"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.inference"], ["", "def", "multi_scale_inference", "(", "self", ",", "model", ",", "image", ",", "scales", "=", "[", "1", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "batch", ",", "_", ",", "ori_height", ",", "ori_width", "=", "image", ".", "size", "(", ")", "\n", "assert", "batch", "==", "1", ",", "\"only supporting batchsize 1.\"", "\n", "image", "=", "image", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", ")", "\n", "stride_h", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.0", ")", "\n", "stride_w", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.0", ")", "\n", "final_pred", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "ori_height", ",", "ori_width", "]", ")", ".", "cuda", "(", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "new_img", "=", "self", ".", "multi_scale_aug", "(", "image", "=", "image", ",", "\n", "rand_scale", "=", "scale", ",", "\n", "rand_crop", "=", "False", ")", "\n", "height", ",", "width", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "scale", "<=", "1.0", ":", "\n", "                ", "new_img", "=", "new_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_img", "=", "np", ".", "expand_dims", "(", "new_img", ",", "axis", "=", "0", ")", "\n", "new_img", "=", "torch", ".", "from_numpy", "(", "new_img", ")", "\n", "preds", "=", "self", ".", "inference", "(", "model", ",", "new_img", ",", "flip", ")", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "", "else", ":", "\n", "                ", "new_h", ",", "new_w", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "rows", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_h", "-", "\n", "self", ".", "crop_size", "[", "0", "]", ")", "/", "stride_h", ")", ")", "+", "1", "\n", "cols", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_w", "-", "\n", "self", ".", "crop_size", "[", "1", "]", ")", "/", "stride_w", ")", ")", "+", "1", "\n", "preds", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "h0", "=", "r", "*", "stride_h", "\n", "w0", "=", "c", "*", "stride_w", "\n", "h1", "=", "min", "(", "h0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "new_h", ")", "\n", "w1", "=", "min", "(", "w0", "+", "self", ".", "crop_size", "[", "1", "]", ",", "new_w", ")", "\n", "h0", "=", "max", "(", "int", "(", "h1", "-", "self", ".", "crop_size", "[", "0", "]", ")", ",", "0", ")", "\n", "w0", "=", "max", "(", "int", "(", "w1", "-", "self", ".", "crop_size", "[", "1", "]", ")", ",", "0", ")", "\n", "crop_img", "=", "new_img", "[", "h0", ":", "h1", ",", "w0", ":", "w1", ",", ":", "]", "\n", "crop_img", "=", "crop_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "crop_img", "=", "np", ".", "expand_dims", "(", "crop_img", ",", "axis", "=", "0", ")", "\n", "crop_img", "=", "torch", ".", "from_numpy", "(", "crop_img", ")", "\n", "pred", "=", "self", ".", "inference", "(", "model", ",", "crop_img", ",", "flip", ")", "\n", "preds", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "pred", "[", ":", ",", ":", ",", "0", ":", "h1", "-", "h0", ",", "0", ":", "w1", "-", "w0", "]", "\n", "count", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "1", "\n", "", "", "preds", "=", "preds", "/", "count", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "\n", "", "preds", "=", "F", ".", "upsample", "(", "preds", ",", "(", "ori_height", ",", "ori_width", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "final_pred", "+=", "preds", "\n", "", "return", "final_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.get_palette": [[171, 186], ["range"], "methods", ["None"], ["", "def", "get_palette", "(", "self", ",", "n", ")", ":", "\n", "        ", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "                ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.get_palette_cityscapes": [[187, 197], ["trainId2color.items"], "methods", ["None"], ["", "def", "get_palette_cityscapes", "(", "self", ",", "n", ")", ":", "\n", "        ", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "from", "cityscapesscripts", ".", "helpers", ".", "labels", "import", "labels", "\n", "trainId2color", "=", "{", "label", ".", "trainId", ":", "label", ".", "color", "for", "label", "in", "labels", "if", "(", "label", ".", "trainId", "!=", "255", "and", "label", ".", "trainId", "!=", "-", "1", ")", "}", "\n", "for", "trainId", ",", "color", "in", "trainId2color", ".", "items", "(", ")", ":", "\n", "            ", "palette", "[", "trainId", "*", "3", "]", "=", "color", "[", "0", "]", "\n", "palette", "[", "trainId", "*", "3", "+", "1", "]", "=", "color", "[", "1", "]", "\n", "palette", "[", "trainId", "*", "3", "+", "2", "]", "=", "color", "[", "2", "]", "\n", "\n", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.save_pred": [[199, 210], ["cityscapes.Cityscapes.get_palette_cityscapes", "numpy.asarray.cpu().numpy().copy", "numpy.asarray", "range", "numpy.argmax", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "numpy.asarray.cpu().numpy", "os.path.join", "numpy.asarray.cpu"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.get_palette_cityscapes"], ["", "def", "save_pred", "(", "self", ",", "preds", ",", "sv_path", ",", "name", ")", ":", "\n", "\n", "        ", "palette", "=", "self", ".", "get_palette_cityscapes", "(", "256", ")", "\n", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "preds", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pred", "=", "preds", "[", "i", "]", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "i", "]", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.save_ts": [[212, 220], ["cityscapes.Cityscapes.get_palette", "t.cpu().numpy().copy.cpu().numpy().copy.cpu().numpy().copy", "range", "cityscapes.Cityscapes.convert_label", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "t.cpu().numpy().copy.cpu().numpy().copy.cpu().numpy", "os.path.join", "t.cpu().numpy().copy.cpu().numpy().copy.cpu"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.get_palette", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.convert_label"], ["", "", "def", "save_ts", "(", "self", ",", "t", ",", "sv_path", ",", "name", ")", ":", "\n", "        ", "palette", "=", "self", ".", "get_palette", "(", "256", ")", "\n", "t", "=", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pred", "=", "self", ".", "convert_label", "(", "preds", "[", "i", "]", ",", "inverse", "=", "True", ")", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "i", "]", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.__init__": [[12, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "2048", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "downsample_rate", "=", "1.", "/", "downsample_rate", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.input_transform": [[35, 41], ["image.astype"], "methods", ["None"], ["", "def", "input_transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "/=", "self", ".", "std", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.label_transform": [[42, 44], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "label_transform", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.pad_image": [[45, 55], ["image.copy", "max", "max", "cv2.copyMakeBorder"], "methods", ["None"], ["", "def", "pad_image", "(", "self", ",", "image", ",", "h", ",", "w", ",", "size", ",", "padvalue", ")", ":", "\n", "        ", "pad_image", "=", "image", ".", "copy", "(", ")", "\n", "pad_h", "=", "max", "(", "size", "[", "0", "]", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "size", "[", "1", "]", "-", "w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "pad_image", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "padvalue", ")", "\n", "\n", "", "return", "pad_image", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.rand_crop": [[56, 70], ["base_dataset.BaseDataset.pad_image", "base_dataset.BaseDataset.pad_image", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "rand_crop", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "-", "1", "]", "\n", "image", "=", "self", ".", "pad_image", "(", "image", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label", "=", "self", ".", "pad_image", "(", "label", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "\n", "new_h", ",", "new_w", "=", "label", ".", "shape", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "new_w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "new_h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "image", "=", "image", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "label", "=", "label", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.center_crop": [[71, 79], ["int", "int", "round", "round"], "methods", ["None"], ["", "def", "center_crop", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "x", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "/", "2.", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "/", "2.", ")", ")", "\n", "image", "=", "image", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "label", "=", "label", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.image_resize": [[80, 98], ["cv2.resize", "numpy.int", "numpy.int", "cv2.resize"], "methods", ["None"], ["", "def", "image_resize", "(", "self", ",", "image", ",", "long_size", ",", "label", "=", "None", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "h", ">", "w", ":", "\n", "            ", "new_h", "=", "long_size", "\n", "new_w", "=", "np", ".", "int", "(", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "new_w", "=", "long_size", "\n", "new_h", "=", "np", ".", "int", "(", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "new_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "new_w", ",", "new_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "return", "image", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.multi_scale_aug": [[99, 110], ["numpy.int", "base_dataset.BaseDataset.image_resize", "base_dataset.BaseDataset.image_resize", "base_dataset.BaseDataset.rand_crop"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.rand_crop"], ["", "def", "multi_scale_aug", "(", "self", ",", "image", ",", "label", "=", "None", ",", "\n", "rand_scale", "=", "1", ",", "rand_crop", "=", "True", ")", ":", "\n", "        ", "long_size", "=", "np", ".", "int", "(", "self", ".", "base_size", "*", "rand_scale", "+", "0.5", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "image_resize", "(", "image", ",", "long_size", ",", "label", ")", "\n", "if", "rand_crop", ":", "\n", "                ", "image", ",", "label", "=", "self", ".", "rand_crop", "(", "image", ",", "label", ")", "\n", "", "return", "image", ",", "label", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "image_resize", "(", "image", ",", "long_size", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.gen_sample": [[111, 142], ["base_dataset.BaseDataset.input_transform", "base_dataset.BaseDataset.label_transform", "image.transpose.transpose.transpose", "base_dataset.BaseDataset.multi_scale_aug", "base_dataset.BaseDataset.image_resize", "base_dataset.BaseDataset.center_crop", "cv2.resize", "random.randint", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.center_crop"], ["", "", "def", "gen_sample", "(", "self", ",", "image", ",", "label", ",", "\n", "multi_scale", "=", "True", ",", "is_flip", "=", "True", ",", "center_crop_test", "=", "False", ")", ":", "\n", "        ", "if", "multi_scale", ":", "\n", "            ", "rand_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "scale_factor", ")", "/", "10.0", "\n", "image", ",", "label", "=", "self", ".", "multi_scale_aug", "(", "image", ",", "label", ",", "\n", "rand_scale", "=", "rand_scale", ")", "\n", "\n", "", "if", "center_crop_test", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "image_resize", "(", "image", ",", "\n", "self", ".", "base_size", ",", "\n", "label", ")", "\n", "image", ",", "label", "=", "self", ".", "center_crop", "(", "image", ",", "label", ")", "\n", "\n", "", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "is_flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "if", "self", ".", "downsample_rate", "!=", "1", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "\n", "None", ",", "\n", "fx", "=", "self", ".", "downsample_rate", ",", "\n", "fy", "=", "self", ".", "downsample_rate", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.inference": [[143, 160], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.cpu().numpy().copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "torch.nn.functional.upsample.cpu().numpy", "torch.from_numpy", "flip_pred[].copy", "torch.nn.functional.upsample.cpu"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", "=", "False", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_pred", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.multi_scale_inference": [[161, 224], ["[].transpose().copy.size", "torch.device", "[].transpose().copy", "numpy.int", "numpy.int", "torch.zeros().to", "numpy.array", "base_dataset.BaseDataset.multi_scale_aug", "torch.nn.functional.upsample", "[].transpose", "torch.zeros", "numpy.array", "max", "numpy.min", "base_dataset.BaseDataset.pad_image", "base_dataset.BaseDataset.transpose", "numpy.expand_dims", "torch.from_numpy", "base_dataset.BaseDataset.inference", "torch.zeros().to", "torch.zeros().to", "range", "base_dataset.BaseDataset.pad_image", "numpy.int", "numpy.int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "base_dataset.BaseDataset.transpose", "numpy.expand_dims", "torch.from_numpy", "base_dataset.BaseDataset.inference", "[].transpose().copy.numpy", "base_dataset.BaseDataset.pad_image"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "multi_scale_inference", "(", "self", ",", "model", ",", "image", ",", "scales", "=", "[", "1", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "batch", ",", "_", ",", "ori_height", ",", "ori_width", "=", "image", ".", "size", "(", ")", "\n", "assert", "batch", "==", "1", ",", "\"only supporting batchsize 1.\"", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "model", ".", "device_ids", "[", "0", "]", ")", "\n", "image", "=", "image", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", ")", "\n", "stride_h", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "2.0", "/", "3.0", ")", "\n", "stride_w", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "2.0", "/", "3.0", ")", "\n", "final_pred", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "ori_height", ",", "ori_width", "]", ")", ".", "to", "(", "device", ")", "\n", "padvalue", "=", "-", "1.0", "*", "np", ".", "array", "(", "self", ".", "mean", ")", "/", "np", ".", "array", "(", "self", ".", "std", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "new_img", "=", "self", ".", "multi_scale_aug", "(", "image", "=", "image", ",", "\n", "rand_scale", "=", "scale", ",", "\n", "rand_crop", "=", "False", ")", "\n", "height", ",", "width", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "max", "(", "height", ",", "width", ")", "<=", "np", ".", "min", "(", "self", ".", "crop_size", ")", ":", "\n", "                ", "new_img", "=", "self", ".", "pad_image", "(", "new_img", ",", "height", ",", "width", ",", "\n", "self", ".", "crop_size", ",", "padvalue", ")", "\n", "new_img", "=", "new_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_img", "=", "np", ".", "expand_dims", "(", "new_img", ",", "axis", "=", "0", ")", "\n", "new_img", "=", "torch", ".", "from_numpy", "(", "new_img", ")", "\n", "preds", "=", "self", ".", "inference", "(", "model", ",", "new_img", ",", "flip", ")", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "", "else", ":", "\n", "                ", "if", "height", "<", "self", ".", "crop_size", "[", "0", "]", "or", "width", "<", "self", ".", "crop_size", "[", "1", "]", ":", "\n", "                    ", "new_img", "=", "self", ".", "pad_image", "(", "new_img", ",", "height", ",", "width", ",", "\n", "self", ".", "crop_size", ",", "padvalue", ")", "\n", "", "new_h", ",", "new_w", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "rows", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_h", "-", "\n", "self", ".", "crop_size", "[", "0", "]", ")", "/", "stride_h", ")", ")", "+", "1", "\n", "cols", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_w", "-", "\n", "self", ".", "crop_size", "[", "1", "]", ")", "/", "stride_w", ")", ")", "+", "1", "\n", "preds", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "new_h", ",", "new_w", "]", ")", ".", "to", "(", "device", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "new_h", ",", "new_w", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "h0", "=", "r", "*", "stride_h", "\n", "w0", "=", "c", "*", "stride_w", "\n", "h1", "=", "min", "(", "h0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "new_h", ")", "\n", "w1", "=", "min", "(", "w0", "+", "self", ".", "crop_size", "[", "1", "]", ",", "new_w", ")", "\n", "crop_img", "=", "new_img", "[", "h0", ":", "h1", ",", "w0", ":", "w1", ",", ":", "]", "\n", "if", "h1", "==", "new_h", "or", "w1", "==", "new_w", ":", "\n", "                            ", "crop_img", "=", "self", ".", "pad_image", "(", "crop_img", ",", "\n", "h1", "-", "h0", ",", "\n", "w1", "-", "w0", ",", "\n", "self", ".", "crop_size", ",", "\n", "padvalue", ")", "\n", "", "crop_img", "=", "crop_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "crop_img", "=", "np", ".", "expand_dims", "(", "crop_img", ",", "axis", "=", "0", ")", "\n", "crop_img", "=", "torch", ".", "from_numpy", "(", "crop_img", ")", "\n", "pred", "=", "self", ".", "inference", "(", "model", ",", "crop_img", ",", "flip", ")", "\n", "\n", "preds", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "pred", "[", ":", ",", ":", ",", "0", ":", "h1", "-", "h0", ",", "0", ":", "w1", "-", "w0", "]", "\n", "count", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "1", "\n", "", "", "preds", "=", "preds", "/", "count", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "\n", "", "preds", "=", "F", ".", "upsample", "(", "preds", ",", "(", "ori_height", ",", "ori_width", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "final_pred", "+=", "preds", "\n", "", "return", "final_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.config.default.update_config": [[117, 124], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.__init__": [[9, 30], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.zeros", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "p", "=", "0.5", ",", "interpolate", "=", "'none'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "mask", "=", "None", "\n", "self", ".", "mask_built", "=", "False", "\n", "self", ".", "p", "=", "p", "\n", "\n", "self", ".", "interpolate", "=", "interpolate", "\n", "self", ".", "r", "=", "7", "\n", "self", ".", "padding_interpolate", "=", "3", "\n", "\n", "self", ".", "Lambda", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "3.0", ")", ")", "\n", "square_dis", "=", "np", ".", "zeros", "(", "(", "self", ".", "r", ",", "self", ".", "r", ")", ")", "\n", "center_point", "=", "(", "square_dis", ".", "shape", "[", "0", "]", "//", "2", ",", "square_dis", ".", "shape", "[", "1", "]", "//", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "square_dis", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "square_dis", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "square_dis", "[", "i", "]", "[", "j", "]", "=", "(", "i", "-", "center_point", "[", "0", "]", ")", "**", "2", "+", "(", "j", "-", "center_point", "[", "1", "]", ")", "**", "2", "\n", "\n", "", "", "square_dis", "[", "center_point", "[", "0", "]", "]", "[", "center_point", "[", "1", "]", "]", "=", "100000.0", "\n", "\n", "self", ".", "square_dis", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "square_dis", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.build_mask": [[31, 39], ["x.new().fill_", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "mask[].float", "print", "x.new", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "build_mask", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask_p", "=", "x", ".", "new", "(", "x", ".", "shape", "[", "2", ":", "]", ")", ".", "fill_", "(", "self", ".", "p", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask_p", ")", "\n", "self", ".", "mask", "=", "mask", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", "\n", "self", ".", "mask_built", "=", "True", "\n", "\n", "if", "self", ".", "in_channels", "==", "3", ":", "\n", "            ", "print", "(", "'Mask sum:'", ",", "torch", ".", "sum", "(", "self", ".", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.build_mask_random": [[40, 45], ["x.new().fill_", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "mask[].float", "x.new"], "methods", ["None"], ["", "", "def", "build_mask_random", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask_p", "=", "x", ".", "new", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ")", ".", "fill_", "(", "self", ".", "p", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask_p", ")", "\n", "self", ".", "mask", "=", "mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", "\n", "self", ".", "mask_built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.set_mask": [[46, 49], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "self", ".", "mask", "=", "mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "self", ".", "mask_built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.forward": [[50, 65], ["super().forward", "kernel.expand.expand.expand", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward.size", "super().forward.size", "conv_mask.conv_mask_uniform.build_mask_random", "kernel.expand.expand.sum", "kernel.expand.expand.size", "kernel.expand.expand.size", "conv_mask.conv_mask_uniform.square_dis.detach"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.forward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.build_mask_random"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "self", ".", "out_h", ",", "self", ".", "out_w", "=", "y", ".", "size", "(", "-", "2", ")", ",", "y", ".", "size", "(", "-", "1", ")", "\n", "if", "not", "self", ".", "mask_built", ":", "\n", "            ", "self", ".", "build_mask_random", "(", "y", ")", "\n", "\n", "", "kernel", "=", "(", "-", "(", "self", ".", "Lambda", "**", "2", ")", "*", "self", ".", "square_dis", ".", "detach", "(", ")", ")", ".", "exp", "(", ")", "\n", "kernel", "=", "kernel", "/", "(", "kernel", ".", "sum", "(", ")", "+", "10", "**", "(", "-", "5", ")", ")", "\n", "kernel", "=", "kernel", ".", "expand", "(", "(", "self", ".", "out_channels", ",", "1", ",", "kernel", ".", "size", "(", "0", ")", ",", "kernel", ".", "size", "(", "1", ")", ")", ")", "\n", "interpolated", "=", "F", ".", "conv2d", "(", "y", "*", "self", ".", "mask", ",", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "padding_interpolate", ",", "groups", "=", "self", ".", "out_channels", ")", "\n", "\n", "out", "=", "y", "*", "self", ".", "mask", "+", "interpolated", "*", "(", "1", "-", "self", ".", "mask", ")", "\n", "self", ".", "mask_built", "=", "False", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "model_anytime.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_anytime.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.conv3x3", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.BasicBlock.forward": [[45, 62], ["model_anytime.BasicBlock.conv1", "model_anytime.BasicBlock.bn1", "model_anytime.BasicBlock.relu", "model_anytime.BasicBlock.conv2", "model_anytime.BasicBlock.bn2", "model_anytime.BasicBlock.relu", "model_anytime.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.Bottleneck.__init__": [[67, 81], ["torch.Module.__init__", "used_conv", "BatchNorm2d", "used_conv", "BatchNorm2d", "used_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "used_conv", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "used_conv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "used_conv", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.Bottleneck.forward": [[82, 103], ["model_anytime.Bottleneck.conv1", "model_anytime.Bottleneck.bn1", "model_anytime.Bottleneck.relu", "model_anytime.Bottleneck.conv2", "model_anytime.Bottleneck.bn2", "model_anytime.Bottleneck.relu", "model_anytime.Bottleneck.conv3", "model_anytime.Bottleneck.bn3", "model_anytime.Bottleneck.relu", "model_anytime.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule.__init__": [[106, 122], ["torch.Module.__init__", "model_anytime.HighResolutionModule._check_branches", "model_anytime.HighResolutionModule._make_branches", "model_anytime.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._check_branches": [[123, 142], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._make_one_branch": [[143, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "used_conv", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._make_branches": [[167, 175], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "model_anytime.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule._make_fuse_layers": [[176, 221], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "used_conv", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "used_conv", "BatchNorm2d", "used_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule.get_num_inchannels": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule.forward": [[225, 250], ["range", "range", "len", "range", "x_fuse.append", "model_anytime.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_transition_layer": [[260, 295], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "used_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "used_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["    ", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_layer": [[296, 312], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "used_conv", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_stage": [[313, 340], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_anytime.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.__init__": [[341, 429], ["torch.Module.__init__", "functools.partial", "functools.partial", "len", "used_conv", "BatchNorm2d", "used_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_anytime.HighResolutionNet._make_layer", "model_anytime.HighResolutionNet.get_exit_layer", "model_anytime.HighResolutionNet._make_transition_layer", "model_anytime.HighResolutionNet._make_stage", "model_anytime.HighResolutionNet.get_exit_layer", "model_anytime.HighResolutionNet._make_transition_layer", "model_anytime.HighResolutionNet._make_stage", "model_anytime.HighResolutionNet.get_exit_layer", "model_anytime.HighResolutionNet._make_transition_layer", "model_anytime.HighResolutionNet._make_stage", "numpy.int", "model_anytime.HighResolutionNet.get_exit_layer", "print", "print", "numpy.int", "numpy.int", "numpy.sum", "sum", "sum", "utils.utils.AverageMeter", "range", "numpy.sum", "range", "numpy.sum", "range", "range", "len", "len", "len", "p.numel", "p.numel", "model_anytime.HighResolutionNet.parameters", "model_anytime.HighResolutionNet.parameters"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_layer"], ["", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "\n", "\n", "        ", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "self", ".", "extra", "=", "extra", "\n", "self", ".", "mask_cfg", "=", "config", ".", "MASK", "\n", "\n", "global", "mask_conv", ",", "mask_conv_no_interpolate", "\n", "mask_conv", "=", "partial", "(", "conv_mask_uniform", ",", "p", "=", "self", ".", "mask_cfg", ".", "P", ",", "interpolate", "=", "self", ".", "mask_cfg", ".", "INTERPOLATION", ")", "\n", "mask_conv_no_interpolate", "=", "partial", "(", "conv_mask_uniform", ",", "p", "=", "self", ".", "mask_cfg", ".", "P", ",", "interpolate", "=", "'none'", ")", "\n", "global", "used_conv", "\n", "used_conv", "=", "nn", ".", "Conv2d", "\n", "\n", "self", ".", "num_exits", "=", "len", "(", "extra", ".", "EE_WEIGHTS", ")", "\n", "self", ".", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", "\n", "if", "'profiling_cpu'", "in", "kwargs", "or", "'profiling_gpu'", "in", "kwargs", ":", "\n", "            ", "self", ".", "profiling_meters", "=", "[", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "self", ".", "num_exits", ")", "]", "\n", "self", ".", "profiling_gpu", "=", "'profiling_gpu'", "in", "kwargs", "\n", "self", ".", "profiling_cpu", "=", "'profiling_cpu'", "in", "kwargs", "\n", "self", ".", "forward_count", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "profiling_gpu", ",", "self", ".", "profiling_cpu", "=", "False", ",", "False", "\n", "\n", "", "self", ".", "conv1", "=", "used_conv", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "used_conv", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "self", ".", "exit1", "=", "self", ".", "get_exit_layer", "(", "stage1_out_channel", ",", "config", ",", "exit_number", "=", "1", ")", "\n", "\n", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "            ", "used_conv", "=", "mask_conv", "\n", "", "else", ":", "\n", "            ", "used_conv", "=", "nn", ".", "Conv2d", "\n", "\n", "", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "self", ".", "exit2", "=", "self", ".", "get_exit_layer", "(", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", ",", "config", ",", "exit_number", "=", "2", ")", "\n", "\n", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "            ", "used_conv", "=", "mask_conv", "\n", "", "else", ":", "\n", "            ", "used_conv", "=", "nn", ".", "Conv2d", "\n", "\n", "\n", "", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "self", ".", "exit3", "=", "self", ".", "get_exit_layer", "(", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", ",", "config", ",", "exit_number", "=", "3", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "self", ".", "last_layer", "=", "self", ".", "get_exit_layer", "(", "last_inp_channels", ",", "config", ",", "last", "=", "True", ")", "\n", "\n", "print", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "print", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.profile": [[432, 453], ["print", "model_anytime.HighResolutionNet.profiling_meters[].update", "times.append", "print", "out.cpu", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "model_anytime.HighResolutionNet.profiling_meters[].update", "model_anytime.HighResolutionNet.profiling_meters[].average", "numpy.mean", "time.time", "range", "time.time"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average"], ["", "def", "profile", "(", "self", ",", "out", ",", "index", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "profiling_cpu", "or", "self", ".", "profiling_gpu", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "forward_count", "+=", "1", "\n", "print", "(", "self", ".", "forward_count", ")", "\n", "start_count", "=", "25", "*", "4", "\n", "if", "self", ".", "forward_count", "<", "start_count", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "profiling_cpu", ":", "\n", "            ", "self", ".", "profiling_meters", "[", "index", "]", ".", "update", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start", ")", "\n", "", "elif", "self", ".", "profiling_gpu", ":", "\n", "            ", "tmp_out", "=", "out", ".", "cpu", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "self", ".", "profiling_meters", "[", "index", "]", ".", "update", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start", ")", "\n", "", "else", ":", "\n", "            ", "return", "\n", "", "if", "index", "==", "self", ".", "num_exits", "-", "1", "and", "(", "self", ".", "forward_count", ">", "start_count", "+", "10", ")", ":", "\n", "            ", "times", "=", "[", "self", ".", "profiling_meters", "[", "i", "]", ".", "average", "(", ")", "for", "i", "in", "range", "(", "self", ".", "num_exits", ")", "]", "\n", "times", ".", "append", "(", "np", ".", "mean", "(", "times", ")", ")", "\n", "print", "(", "'\\t'", ".", "join", "(", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "times", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_points_from_confs": [[454, 473], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "point_coords_int.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "point_coords_int.unsqueeze().repeat.unsqueeze().repeat.size", "int", "confs.view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "confs.size", "confs.size", "confs.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "h_pos.unsqueeze", "w_pos.unsqueeze", "point_coords_int.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "point_coords_int.unsqueeze().repeat.unsqueeze().repeat.view", "float", "float", "torch.arange.view", "torch.arange.view", "torch.arange.view", "torch.arange.view"], "methods", ["None"], ["", "", "def", "get_points_from_confs", "(", "self", ",", "confs", ",", "ratio", ")", ":", "\n", "        ", "bs", ",", "h", ",", "w", "=", "confs", ".", "size", "(", "0", ")", ",", "confs", ".", "size", "(", "2", ")", ",", "confs", ".", "size", "(", "3", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "h", "*", "w", ",", "device", "=", "confs", ".", "device", ")", "\n", "h_pos", "=", "idx", "//", "w", "\n", "w_pos", "=", "idx", "%", "w", "\n", "point_coords_int", "=", "torch", ".", "cat", "(", "(", "h_pos", ".", "unsqueeze", "(", "1", ")", ",", "w_pos", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "point_coords_int", "=", "point_coords_int", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ",", "1", ")", "\n", "num_sampled", "=", "point_coords_int", ".", "size", "(", "1", ")", "\n", "\n", "num_certain_points", "=", "int", "(", "ratio", "*", "h", "*", "w", ")", "\n", "point_certainties", "=", "confs", ".", "view", "(", "bs", ",", "1", ",", "-", "1", ")", "\n", "values", ",", "idx", "=", "torch", ".", "topk", "(", "point_certainties", "[", ":", ",", "0", ",", ":", "]", ",", "k", "=", "num_certain_points", ",", "dim", "=", "1", ")", "\n", "shift", "=", "num_sampled", "*", "torch", ".", "arange", "(", "bs", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "confs", ".", "device", ")", "\n", "idx", "+=", "shift", "[", ":", ",", "None", "]", "\n", "point_coords_selected_int", "=", "point_coords_int", ".", "view", "(", "-", "1", ",", "2", ")", "[", "idx", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "\n", "bs", ",", "num_certain_points", ",", "2", "\n", ")", "\n", "point_coords_selected_frac", "=", "torch", ".", "cat", "(", "(", "(", "point_coords_selected_int", "[", ":", ",", ":", ",", "0", ":", "1", "]", "+", "0.5", ")", "/", "float", "(", "h", ")", ",", "(", "point_coords_selected_int", "[", ":", ",", ":", ",", "1", ":", "2", "]", "+", "0.5", ")", "/", "float", "(", "w", ")", ")", ",", "dim", "=", "2", ")", "\n", "return", "point_coords_selected_int", ",", "point_coords_selected_frac", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_resized_mask_from_logits": [[474, 486], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.max", "logits.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logits.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "get_resized_mask_from_logits", "(", "self", ",", "logits", ",", "h", ",", "w", ",", "criterion", ")", ":", "\n", "        ", "if", "criterion", "==", "'conf_thre'", ":", "\n", "            ", "resized_logits", "=", "F", ".", "interpolate", "(", "logits", ",", "size", "=", "(", "h", ",", "w", ")", ")", "\n", "resized_probs", "=", "F", ".", "softmax", "(", "resized_logits", ",", "dim", "=", "1", ")", "\n", "resized_confs", ",", "_", "=", "resized_probs", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "mask", "=", "(", "resized_confs", "<=", "self", ".", "mask_cfg", ".", "CONF_THRE", ")", ".", "float", "(", ")", ".", "view", "(", "logits", ".", "size", "(", "0", ")", ",", "h", ",", "w", ")", "\n", "", "elif", "criterion", "==", "'entropy_thre'", ":", "\n", "            ", "resized_logits", "=", "F", ".", "interpolate", "(", "logits", ",", "size", "=", "(", "h", ",", "w", ")", ")", "\n", "resized_probs", "=", "F", ".", "softmax", "(", "resized_logits", ",", "dim", "=", "1", ")", "\n", "resized_confs", "=", "torch", ".", "sum", "(", "-", "resized_probs", "*", "torch", ".", "log", "(", "resized_probs", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# ", "\n", "mask", "=", "(", "resized_confs", ">=", "self", ".", "mask_cfg", ".", "ENTROPY_THRE", ")", ".", "float", "(", ")", ".", "view", "(", "logits", ".", "size", "(", "0", ")", ",", "h", ",", "w", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.generate_grid_priors": [[487, 512], ["model_anytime.HighResolutionNet.modules", "hasattr", "isinstance", "len", "logger.info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.size", "torch.zeros.size", "torch.zeros.size", "torch.zeros.size", "range", "logger.info", "torch.zeros.size", "torch.zeros.size", "torch.zeros.size", "torch.zeros.size"], "methods", ["None"], ["", "def", "generate_grid_priors", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'mask_grid_prior_dict'", ")", "and", "len", "(", "self", ".", "mask_grid_prior_dict", ")", ">", "0", ":", "\n", "            ", "return", "\n", "", "self", ".", "mask_grid_prior_dict", "=", "{", "}", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "conv_mask_uniform", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "h", ",", "w", "=", "m", ".", "out_h", ",", "m", ".", "out_w", "\n", "", "except", ":", "\n", "                    ", "logger", ".", "info", "(", "\"First forwarding, collecting output size, quit generating grid priors\"", ")", "\n", "break", "\n", "\n", "", "if", "(", "h", ",", "w", ")", "in", "self", ".", "mask_grid_prior_dict", ":", "\n", "                    ", "continue", "\n", "", "logger", ".", "info", "(", "f\"generating grid priors for size {(h,w)}\"", ")", "\n", "res", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "device", "=", "m", ".", "weight", ".", "device", ")", "\n", "stride", "=", "self", ".", "mask_cfg", ".", "GRID_STRIDE", "\n", "start", "=", "(", "stride", "-", "1", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "start", ",", "res", ".", "size", "(", "0", ")", ",", "stride", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "start", ",", "res", ".", "size", "(", "1", ")", ",", "stride", ")", ":", "\n", "                        ", "res", "[", "i", "]", "[", "j", "]", "=", "1.", "\n", "\n", "", "", "self", ".", "mask_grid_prior_dict", "[", "(", "h", ",", "w", ")", "]", "=", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.set_masks": [[513, 531], ["model_anytime.HighResolutionNet.modules", "isinstance", "m.set_mask", "model_anytime.HighResolutionNet.get_resized_mask_from_logits", "m.set_mask", "logger.info", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.set_mask", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_resized_mask_from_logits", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.set_mask"], ["", "", "", "def", "set_masks", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "mask_dict", "=", "{", "}", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "conv_mask_uniform", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "h", ",", "w", "=", "m", ".", "out_h", ",", "m", ".", "out_w", "\n", "", "except", ":", "\n", "                    ", "logger", ".", "info", "(", "\"First forwarding, collecting output size, quit setting masks\"", ")", "\n", "break", "\n", "\n", "", "if", "(", "h", ",", "w", ")", "in", "self", ".", "mask_dict", ":", "\n", "                    ", "m", ".", "set_mask", "(", "self", ".", "mask_dict", "[", "(", "h", ",", "w", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "mask_dict", "[", "(", "h", ",", "w", ")", "]", "=", "self", ".", "get_resized_mask_from_logits", "(", "logits", ",", "h", ",", "w", ",", "criterion", "=", "self", ".", "mask_cfg", ".", "CRIT", ")", "\n", "\n", "if", "self", ".", "mask_cfg", ".", "GRID_PRIOR", ":", "\n", "                        ", "self", ".", "mask_dict", "[", "(", "h", ",", "w", ")", "]", "=", "torch", ".", "max", "(", "self", ".", "mask_dict", "[", "(", "h", ",", "w", ")", "]", ",", "self", ".", "mask_grid_prior_dict", "[", "(", "h", ",", "w", ")", "]", ")", "\n", "", "m", ".", "set_mask", "(", "self", ".", "mask_dict", "[", "(", "h", ",", "w", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.set_part_masks": [[533, 549], ["time.time", "module.modules", "isinstance", "m.set_mask", "model_anytime.HighResolutionNet.get_resized_mask_from_logits", "m.set_mask", "logger.info"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.set_mask", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_resized_mask_from_logits", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.conv_mask.conv_mask_uniform.set_mask"], ["", "", "", "", "def", "set_part_masks", "(", "self", ",", "logits", ",", "ref_name", ",", "masked_modules", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "part_mask_dicts", "[", "ref_name", "]", "=", "{", "}", "\n", "for", "module", "in", "masked_modules", ":", "\n", "            ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "conv_mask_uniform", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "h", ",", "w", "=", "m", ".", "out_h", ",", "m", ".", "out_w", "\n", "", "except", ":", "\n", "                        ", "logger", ".", "info", "(", "\"First forwarding, collecting output size, quit setting masks\"", ")", "\n", "break", "\n", "", "if", "(", "h", ",", "w", ")", "in", "self", ".", "part_mask_dicts", "[", "ref_name", "]", ":", "\n", "                        ", "m", ".", "set_mask", "(", "self", ".", "part_mask_dicts", "[", "ref_name", "]", "[", "(", "h", ",", "w", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "part_mask_dicts", "[", "ref_name", "]", "[", "(", "h", ",", "w", ")", "]", "=", "self", ".", "get_resized_mask_from_logits", "(", "logits", ",", "h", ",", "w", ",", "criterion", "=", "self", ".", "mask_cfg", ".", "CRIT", ")", "\n", "m", ".", "set_mask", "(", "self", ".", "part_mask_dicts", "[", "ref_name", "]", "[", "(", "h", ",", "w", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.forward": [[550, 638], ["model_anytime.HighResolutionNet.conv1", "model_anytime.HighResolutionNet.bn1", "model_anytime.HighResolutionNet.relu", "model_anytime.HighResolutionNet.conv2", "model_anytime.HighResolutionNet.bn2", "model_anytime.HighResolutionNet.relu", "model_anytime.HighResolutionNet.layer1", "model_anytime.HighResolutionNet.get_exit_input", "model_anytime.HighResolutionNet.exit1", "hasattr", "range", "model_anytime.HighResolutionNet.stage2", "model_anytime.HighResolutionNet.get_exit_input", "model_anytime.HighResolutionNet.exit2", "hasattr", "range", "model_anytime.HighResolutionNet.stage3", "model_anytime.HighResolutionNet.get_exit_input", "model_anytime.HighResolutionNet.exit3", "hasattr", "range", "model_anytime.HighResolutionNet.stage4", "model_anytime.HighResolutionNet.get_exit_input", "model_anytime.HighResolutionNet.last_layer", "model_anytime.HighResolutionNet.profile", "hasattr", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "model_anytime.HighResolutionNet.size", "model_anytime.HighResolutionNet.size", "model_anytime.HighResolutionNet.set_part_masks", "model_anytime.HighResolutionNet.set_part_masks", "model_anytime.HighResolutionNet.set_part_masks", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_input", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_input", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_input", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_input", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.profile", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.set_part_masks", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.set_part_masks", "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.set_part_masks"], ["", "", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "part_mask_dicts", "=", "{", "}", "\n", "\n", "if", "self", ".", "profiling_gpu", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "if", "self", ".", "profiling_cpu", "or", "self", ".", "profiling_gpu", ":", "\n", "            ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out1_feat", "=", "self", ".", "get_exit_input", "(", "[", "x", "]", ",", "detach", "=", "self", ".", "extra", ".", "EARLY_DETACH", ")", "\n", "out1", "=", "self", ".", "exit1", "(", "out1_feat", ")", "# logits of exit 1", "\n", "out_size", "=", "(", "out1", ".", "size", "(", "-", "2", ")", ",", "out1", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# Set mask for all conv_mask modules between exit 1 and exit 2", "\n", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "            ", "self", ".", "set_part_masks", "(", "out1", ",", "'out1'", ",", "[", "self", ".", "transition1", ",", "self", ".", "stage2", ",", "self", ".", "exit2", "]", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"stop1\"", ")", ":", "\n", "            ", "return", "out1", "\n", "\n", "", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "out2_feat", "=", "self", ".", "get_exit_input", "(", "y_list", ",", "detach", "=", "self", ".", "extra", ".", "EARLY_DETACH", ")", "\n", "out2", "=", "self", ".", "exit2", "(", "out2_feat", ")", "\n", "\n", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "# Compute logits, aggregate results from the previous exit", "\n", "            ", "if", "self", ".", "mask_cfg", ".", "AGGR", "==", "'copy'", "and", "len", "(", "self", ".", "part_mask_dicts", "[", "'out1'", "]", ")", ">", "0", ":", "\n", "                ", "result_mask", "=", "self", ".", "part_mask_dicts", "[", "'out1'", "]", "[", "out_size", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "out2", "=", "out1", "*", "(", "1", "-", "result_mask", ")", "+", "out2", "*", "result_mask", "\n", "# Set mask for all conv_mask modules between exit 2 and exit 3", "\n", "", "self", ".", "set_part_masks", "(", "out2", ",", "'out2'", ",", "[", "self", ".", "transition2", ",", "self", ".", "stage3", ",", "self", ".", "exit3", "]", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"stop2\"", ")", ":", "\n", "            ", "return", "out2", "\n", "\n", "", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "out3_feat", "=", "self", ".", "get_exit_input", "(", "y_list", ",", "detach", "=", "self", ".", "extra", ".", "EARLY_DETACH", ")", "\n", "out3", "=", "self", ".", "exit3", "(", "out3_feat", ")", "\n", "\n", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "# Compute logits, aggregate results from the previous exit", "\n", "            ", "if", "self", ".", "mask_cfg", ".", "AGGR", "==", "'copy'", "and", "len", "(", "self", ".", "part_mask_dicts", "[", "'out2'", "]", ")", ">", "0", ":", "\n", "                ", "result_mask", "=", "self", ".", "part_mask_dicts", "[", "'out2'", "]", "[", "out_size", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "out3", "=", "out2", "*", "(", "1", "-", "result_mask", ")", "+", "out3", "*", "result_mask", "\n", "# Set mask for all conv_mask module between exit 3 and exit 4", "\n", "", "self", ".", "set_part_masks", "(", "out3", ",", "'out3'", ",", "[", "self", ".", "transition3", ",", "self", ".", "stage4", ",", "self", ".", "last_layer", "]", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"stop3\"", ")", ":", "\n", "            ", "return", "out3", "\n", "\n", "", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "out4_feat", "=", "self", ".", "get_exit_input", "(", "y_list", ",", "detach", "=", "False", ")", "\n", "out4", "=", "self", ".", "last_layer", "(", "out4_feat", ")", "\n", "\n", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "            ", "if", "self", ".", "mask_cfg", ".", "AGGR", "==", "'copy'", "and", "len", "(", "self", ".", "part_mask_dicts", "[", "'out3'", "]", ")", ">", "0", ":", "\n", "                ", "result_mask", "=", "self", ".", "part_mask_dicts", "[", "'out3'", "]", "[", "out_size", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "out4", "=", "out3", "*", "(", "1", "-", "result_mask", ")", "+", "out4", "*", "result_mask", "\n", "\n", "", "", "self", ".", "profile", "(", "out4", ",", "3", ")", "\n", "if", "hasattr", "(", "self", ",", "\"stop4\"", ")", ":", "\n", "            ", "return", "out4", "\n", "\n", "", "outs", "=", "[", "out1", ",", "out2", ",", "out3", ",", "out4", "]", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_layer": [[640, 831], ["print", "int", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "exit_conv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "exit_conv", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "exit_conv", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "exit_conv", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "exit_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "exit_conv"], "methods", ["None"], ["", "def", "get_exit_layer", "(", "self", ",", "num_channels", ",", "config", ",", "last", "=", "False", ",", "exit_number", "=", "0", ")", ":", "\n", "        ", "print", "(", "f'EXIT num_channels:{num_channels}'", ")", "\n", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "layer_type", "=", "config", ".", "EXIT", ".", "TYPE", "if", "(", "not", "last", ")", "else", "'original'", "\n", "\n", "inter_channel", "=", "int", "(", "num_channels", ")", "\n", "\n", "if", "layer_type", "==", "'flex'", ":", "\n", "            ", "assert", "exit_number", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "type_map", "=", "{", "1", ":", "'downup_pool_1x1_inter_triple'", ",", "2", ":", "'downup_pool_1x1_inter_double'", ",", "3", ":", "'downup_pool_1x1_inter'", "}", "\n", "layer_type", "=", "type_map", "[", "exit_number", "]", "\n", "inter_channel", "=", "config", ".", "EXIT", ".", "INTER_CHANNEL", "\n", "\n", "", "if", "self", ".", "mask_cfg", ".", "USE", ":", "\n", "            ", "exit_conv", "=", "used_conv", "\n", "", "else", ":", "\n", "            ", "exit_conv", "=", "nn", ".", "Conv2d", "\n", "\n", "", "norm_layer", "=", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "\n", "if", "layer_type", "==", "'original'", ":", "\n", "            ", "exit_layer", "=", "[", "\n", "exit_conv", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "num_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", ",", "\n", "\n", "norm_layer", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "kernel_size", "=", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "]", "\n", "\n", "", "elif", "layer_type", "==", "'downup_pool_1x1_inter'", ":", "\n", "            ", "exit_layer", "=", "[", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "kernel_size", "=", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "]", "\n", "\n", "\n", "\n", "", "elif", "layer_type", "==", "'downup_pool_1x1_inter_double'", ":", "\n", "            ", "exit_layer", "=", "[", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", "\n", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", "\n", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "kernel_size", "=", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "]", "\n", "\n", "\n", "", "elif", "layer_type", "==", "'downup_pool_1x1_inter_triple'", ":", "\n", "            ", "exit_layer", "=", "[", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", "\n", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", "\n", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", "\n", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "inter_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", "\n", ")", ",", "\n", "BatchNorm2d", "(", "inter_channel", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "exit_conv", "(", "\n", "in_channels", "=", "inter_channel", ",", "\n", "out_channels", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "kernel_size", "=", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "config", ".", "EXIT", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "]", "\n", "\n", "", "exit_layer", "=", "nn", ".", "Sequential", "(", "*", "exit_layer", ")", "\n", "\n", "return", "exit_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.get_exit_input": [[832, 842], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].size", "x[].size", "len", "interpolated_list.append", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample"], "methods", ["None"], ["", "def", "get_exit_input", "(", "self", ",", "x", ",", "detach", "=", "True", ")", ":", "\n", "        ", "interpolated_list", "=", "[", "x", "[", "0", "]", "]", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "x", ")", ")", ":", "\n", "            ", "interpolated_list", ".", "append", "(", "F", ".", "upsample", "(", "x", "[", "i", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "", "ret", "=", "torch", ".", "cat", "(", "interpolated_list", ",", "1", ")", "\n", "\n", "return", "ret", ".", "detach", "(", ")", "if", "detach", "else", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.init_weights": [[845, 875], ["logger.info", "model_anytime.HighResolutionNet.modules", "logger.info", "model_anytime.HighResolutionNet.update", "model_anytime.HighResolutionNet.load_state_dict", "isinstance", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "model_anytime.HighResolutionNet.state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "model_anytime.HighResolutionNet.state_dict", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "model_anytime.HighResolutionNet.state_dict", "model_anytime.HighResolutionNet.keys", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "len", "model_anytime.HighResolutionNet.keys", "k.startswith", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "len", "model_anytime.HighResolutionNet.keys", "len", "len"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", "load_stage", "=", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", "and", "load_stage", "==", "0", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", "and", "load_stage", "==", "1", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", "[", "len", "(", "'model.'", ")", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "[", "len", "(", "'model.'", ")", ":", "]", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "'exit'", ")", "}", "\n", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", "and", "load_stage", "==", "2", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", "[", "len", "(", "'model.'", ")", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "[", "len", "(", "'model.'", ")", ":", "]", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "\n", "", "logger", ".", "info", "(", "'loading stage: {}, loading {} dict keys'", ".", "format", "(", "load_stage", ",", "len", "(", "pretrained_dict", ")", ")", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.L2Norm.__init__": [[878, 880], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L2Norm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.L2Norm.forward": [[880, 882], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.TemperatureScaling.__init__": [[885, 891], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_wise", ",", "location_wise", ")", ":", "\n", "        ", "super", "(", "TemperatureScaling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channel_wise", "=", "channel_wise", "\n", "self", ".", "location_wise", "=", "location_wise", "\n", "self", ".", "shift", "=", "0.5413", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.TemperatureScaling.forward": [[892, 894], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.TemperatureScalingFixed.__init__": [[896, 907], ["model_anytime.TemperatureScaling.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_wise", "=", "False", ",", "location_wise", "=", "False", ",", "num_channels", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "TemperatureScalingFixed", ",", "self", ")", ".", "__init__", "(", "channel_wise", "=", "channel_wise", ",", "location_wise", "=", "location_wise", ")", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "\n", "assert", "(", "not", "self", ".", "location_wise", ")", "\n", "\n", "if", "channel_wise", ":", "\n", "            ", "self", ".", "t_vector", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_channels", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.TemperatureScalingFixed.forward": [[908, 917], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "channel_wise", ":", "\n", "            ", "positive_t_vector", "=", "F", ".", "softplus", "(", "self", ".", "t_vector", "+", "self", ".", "shift", ")", "\n", "out", "=", "x", "*", "positive_t_vector", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "positive_t", "=", "F", ".", "softplus", "(", "self", ".", "t", "+", "self", ".", "shift", ")", "\n", "out", "=", "x", "*", "positive_t", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.TemperatureScalingPredicted.__init__": [[919, 949], ["model_anytime.TemperatureScaling.__init__", "used_conv", "used_conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "used_conv", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "used_conv"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_wise", "=", "False", ",", "location_wise", "=", "False", ",", "in_channels", "=", "0", ",", "layer_type", "=", "'conv1'", ")", ":", "\n", "        ", "super", "(", "TemperatureScalingPredicted", ",", "self", ")", ".", "__init__", "(", "channel_wise", "=", "channel_wise", ",", "location_wise", "=", "location_wise", ")", "\n", "assert", "self", ".", "location_wise", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "layer_type", "=", "layer_type", "\n", "\n", "if", "self", ".", "layer_type", "==", "'conv1'", ":", "\n", "            ", "self", ".", "layer", "=", "used_conv", "(", "in_channels", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "elif", "self", ".", "layer_type", "==", "'conv3'", ":", "\n", "            ", "self", ".", "layer", "=", "used_conv", "(", "in_channels", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "", "elif", "self", ".", "layer_type", "==", "'default_exit'", ":", "\n", "            ", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "used_conv", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "BatchNorm2d", "(", "in_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "used_conv", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'TemperatureScalingPredicted layer type {} not implemented!'", ".", "format", "(", "self", ".", "layer_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.TemperatureScalingPredicted.forward": [[950, 956], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "model_anytime.TemperatureScalingPredicted.layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "x", "[", "0", "]", "\n", "features", "=", "x", "[", "1", "]", "\n", "self", ".", "t_map", "=", "self", ".", "layer", "(", "features", ")", "*", "1.0", "\n", "self", ".", "positive_t_map", "=", "F", ".", "softplus", "(", "self", ".", "t_map", "+", "self", ".", "shift", ")", "\n", "return", "logits", "*", "self", ".", "positive_t_map", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.conv3x3": [[27, 30], ["used_conv"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "used_conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.get_seg_model": [[958, 963], ["model_anytime.HighResolutionNet", "model_anytime.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.models.model_anytime.HighResolutionNet.init_weights"], ["", "", "def", "get_seg_model", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "cfg", ",", "**", "kwargs", ")", "\n", "model", ".", "init_weights", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ",", "cfg", ".", "MODEL", ".", "LOAD_STAGE", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABN.forward": [[76, 108], ["functions._count_samples", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "running_mean.contiguous", "running_var.contiguous", "running_mean.mul_", "running_var.mul_"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._count_samples", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.forward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._act_forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABN.backward": [[109, 128], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._act_backward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync.forward": [[131, 186], ["cls._parse_extra", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "functions._count_samples", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "range", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "running_mean.contiguous", "running_var.contiguous", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather.append", "torch.gather.append", "queue.put", "running_mean.mul_", "running_var.mul_", "comm.gather.mean.unsqueeze", "var.unsqueeze", "mean_w.unsqueeze", "var_w.unsqueeze", "comm.gather.mean.get_device"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync._parse_extra", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.forward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._act_forward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._count_samples"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "cls", ".", "_parse_extra", "(", "ctx", ",", "extra", ")", "\n", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "means", ".", "append", "(", "mean_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "vars", ".", "append", "(", "var_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "means", "=", "comm", ".", "gather", "(", "means", ")", "\n", "vars", "=", "comm", ".", "gather", "(", "vars", ")", "\n", "\n", "mean", "=", "means", ".", "mean", "(", "0", ")", "\n", "var", "=", "(", "vars", "+", "(", "mean", "-", "means", ")", "**", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "mean", ",", "var", ")", ",", "[", "mean", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "mean", ",", "var", ")", ")", "\n", "mean", ",", "var", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "\n", "", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync.backward": [[187, 225], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "range", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size", "len", "ctx.master_queue.get", "ctx.master_queue.task_done", "edzs.append", "eydzs.append", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "queue.put", "dz.contiguous.new_zeros.get_device"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._act_backward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "edzs", ",", "eydzs", "=", "[", "edz", "]", ",", "[", "eydz", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "ctx", ".", "worker_queues", ")", ")", ":", "\n", "                    ", "edz_w", ",", "eydz_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "edzs", ".", "append", "(", "edz_w", ")", "\n", "eydzs", ".", "append", "(", "eydz_w", ")", "\n", "\n", "", "edz", "=", "comm", ".", "reduce_add", "(", "edzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "eydz", "=", "comm", ".", "reduce_add", "(", "eydzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "edz", ",", "eydz", ")", ",", "[", "edz", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "edz", ",", "eydz", ")", ")", "\n", "edz", ",", "eydz", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync._parse_extra": [[226, 236], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_parse_extra", "(", "ctx", ",", "extra", ")", ":", "\n", "        ", "ctx", ".", "is_master", "=", "extra", "[", "\"is_master\"", "]", "\n", "if", "ctx", ".", "is_master", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queues", "=", "extra", "[", "\"worker_queues\"", "]", "\n", "ctx", ".", "worker_ids", "=", "extra", "[", "\"worker_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queue", "=", "extra", "[", "\"worker_queue\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._check": [[25, 29], ["fn", "RuntimeError"], "function", ["None"], ["def", "_check", "(", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "success", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"CUDA Error encountered in {}\"", ".", "format", "(", "fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._broadcast_shape": [[31, 39], ["enumerate", "x.size", "out_size.append", "out_size.append"], "function", ["None"], ["", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n", "    ", "out_size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "out_size", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._reduce": [[41, 47], ["len", "x.sum", "x.contiguous().view().sum().sum", "x.size", "x.size", "x.contiguous().view().sum", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "def", "_reduce", "(", "x", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._count_samples": [[49, 55], ["enumerate", "x.size"], "function", ["None"], ["", "", "def", "_count_samples", "(", "x", ")", ":", "\n", "    ", "count", "=", "1", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "count", "*=", "s", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._act_forward": [[57, 64], ["_backend.leaky_relu_forward", "_backend.elu_forward"], "function", ["None"], ["", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions._act_backward": [[66, 73], ["_backend.leaky_relu_backward", "_backend.elu_backward"], "function", ["None"], ["", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_backward", "(", "x", ",", "dx", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.ABN.__init__": [[23, 57], ["torch.Module.__init__", "bn.ABN.register_buffer", "bn.ABN.register_buffer", "bn.ABN.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.ABN.register_parameter", "bn.ABN.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.ABN.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "ABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "slope", "=", "slope", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.ABN.reset_parameters": [[58, 64], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.ABN.forward": [[65, 77], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "functional", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "activation", "==", "ACT_RELU", ":", "\n", "            ", "return", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "            ", "return", "functional", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "slope", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_ELU", ":", "\n", "            ", "return", "functional", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.ABN.__repr__": [[78, 86], ["rep.format"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.InPlaceABN.__init__": [[91, 110], ["bn.ABN.__init__"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABN", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.InPlaceABN.forward": [[111, 114], ["inplace_abn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "inplace_abn", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.InPlaceABNSync.__init__": [[122, 150], ["bn.ABN.__init__", "Queue", "list", "len", "Queue", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "devices", "=", "None", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "\n", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates a synchronized, InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        devices : list of int or None\n            IDs of the GPUs that will run the replicas of this module.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABNSync", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "self", ".", "devices", "=", "devices", "if", "devices", "else", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.InPlaceABNSync.forward": [[151, 170], ["inplace_abn_sync", "x.get_device", "bn.InPlaceABNSync.worker_ids.index", "x.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "\n", "", "return", "inplace_abn_sync", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.bn.InPlaceABNSync.__repr__": [[171, 179], ["rep.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, devices={devices}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.reduce_tensor": [[25, 33], ["utils.utils.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.reduce"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size"], ["def", "reduce_tensor", "(", "inp", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "inp", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "reduced_inp", "=", "inp", "\n", "dist", ".", "reduce", "(", "reduced_inp", ",", "dst", "=", "0", ")", "\n", "", "return", "reduced_inp", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.train_ee": [[35, 124], ["model.train", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "utils.utils.get_rank", "utils.utils.get_world_size", "enumerate", "model.eval", "model.module.model.exit1.train", "model.module.model.exit2.train", "model.module.model.exit3.train", "model.module.model.last_layer.train", "utils.utils.AverageMeter.update", "images.to.to", "labels.long().to.long().to", "model", "enumerate", "function.reduce_tensor", "model.zero_grad", "loss.backward", "optimizer.step", "utils.utils.AverageMeter.update", "utils.utils.adjust_learning_rate", "utils.utils.AverageMeter.update", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "logging.info", "utils.utils.get_rank", "reduced_losses.append", "reduce_tensor.item", "logging.info", "writer.add_scalar", "writer.add_scalars", "time.time", "time.time", "labels.long().to.long", "function.reduce_tensor", "time.time", "time.time", "utils.utils.AverageMeter.average", "utils.utils.AverageMeter.average", "reduced_losses[].item", "reduced_losses[].item", "reduced_losses[].item", "reduced_losses[].item"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.reduce_tensor", "home.repos.pwc.inspect_result.liuzhuang13_anytime.inplace_abn.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.reduce_tensor", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average"], ["", "def", "train_ee", "(", "config", ",", "epoch", ",", "num_epoch", ",", "epoch_iters", ",", "base_lr", ",", "num_iters", ",", "\n", "trainloader", ",", "optimizer", ",", "model", ",", "writer_dict", ",", "device", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "torch", ".", "manual_seed", "(", "get_rank", "(", ")", "+", "epoch", "*", "123", ")", "\n", "\n", "if", "config", ".", "TRAIN", ".", "EE_ONLY", "or", "config", ".", "TRAIN", ".", "ALLE_ONLY", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "model", ".", "module", ".", "model", ".", "exit1", ".", "train", "(", ")", "\n", "model", ".", "module", ".", "model", ".", "exit2", ".", "train", "(", ")", "\n", "model", ".", "module", ".", "model", ".", "exit3", ".", "train", "(", ")", "\n", "", "if", "config", ".", "TRAIN", ".", "ALLE_ONLY", ":", "\n", "        ", "model", ".", "module", ".", "model", ".", "last_layer", ".", "train", "(", ")", "\n", "\n", "\n", "", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "ave_loss", "=", "AverageMeter", "(", ")", "\n", "\n", "tic_data", "=", "time", ".", "time", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "tic_total", "=", "time", ".", "time", "(", ")", "\n", "cur_iters", "=", "epoch", "*", "epoch_iters", "\n", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'train_global_steps'", "]", "\n", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "for", "i_iter", ",", "batch", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tic_data", ")", "\n", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "losses", ",", "_", "=", "model", "(", "images", ",", "labels", ")", "\n", "\n", "loss", "=", "0", "\n", "reduced_losses", "=", "[", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "losses", ")", ":", "\n", "            ", "loss", "+=", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", "[", "i", "]", "*", "losses", "[", "i", "]", "\n", "reduced_losses", ".", "append", "(", "reduce_tensor", "(", "losses", "[", "i", "]", ")", ")", "\n", "", "reduced_loss", "=", "reduce_tensor", "(", "loss", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "ave_loss", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ")", "\n", "\n", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "\n", "base_lr", ",", "\n", "num_iters", ",", "\n", "i_iter", "+", "cur_iters", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tic", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "if", "i_iter", "%", "config", ".", "PRINT_FREQ", "==", "0", "and", "rank", "==", "0", ":", "\n", "\n", "            ", "print_loss", "=", "reduced_loss", "/", "world_size", "\n", "msg", "=", "'Epoch: [{: >3d}/{}] Iter:[{: >3d}/{}], Time: {:.2f}, Data Time: {:.2f} '", "'lr: {:.6f}, Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "num_epoch", ",", "i_iter", ",", "epoch_iters", ",", "\n", "batch_time", ".", "average", "(", ")", ",", "data_time", ".", "average", "(", ")", ",", "lr", ",", "print_loss", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "global_steps", "=", "writer_dict", "[", "'train_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "print_loss", ",", "global_steps", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "'exit_train_loss'", ",", "{", "\n", "'exit1'", ":", "reduced_losses", "[", "0", "]", ".", "item", "(", ")", "/", "world_size", ",", "\n", "'exit2'", ":", "reduced_losses", "[", "1", "]", ".", "item", "(", ")", "/", "world_size", ",", "\n", "'exit3'", ":", "reduced_losses", "[", "2", "]", ".", "item", "(", ")", "/", "world_size", ",", "\n", "'exit4'", ":", "reduced_losses", "[", "3", "]", ".", "item", "(", ")", "/", "world_size", ",", "\n", "}", ",", "\n", "global_steps", ")", "\n", "\n", "writer_dict", "[", "'train_global_steps'", "]", "+=", "1", "\n", "\n", "", "tic_data", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "train_time", "=", "time", ".", "time", "(", ")", "-", "tic_total", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "f'Train time:{train_time}s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.validate_ee": [[125, 238], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "utils.utils.get_rank", "utils.utils.get_world_size", "model.eval", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "len", "enumerate", "utils.utils.get_rank", "utils.utils.AverageMeter", "numpy.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "function.reduce_tensor", "reduce_tensor.cpu().numpy", "reduced_confusion_matrix.cpu().numpy.sum", "reduced_confusion_matrix.cpu().numpy.sum", "numpy.diag", "IoU_array.mean", "results.append", "time.time", "time.time", "logging.info", "mean_IoUs.append", "logging.info", "writer.add_scalar", "writer.add_scalars", "writer.add_scalars", "range", "range", "utils.utils.AverageMeter.update", "label.long().to.size", "image.to.to", "label.long().to.long().to", "model", "enumerate", "enumerate", "function.reduce_tensor", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "time.time", "time.time", "time.time", "time.time", "np.diag.sum", "confusion_matrix.sum.sum", "numpy.maximum", "numpy.mean", "utils.utils.get_confusion_matrix_gpu", "reduced_losses.append", "ave_losses[].update", "reduce_tensor.item", "logging.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "reduce_tensor.cpu", "time.time", "time.time", "label.long().to.long", "torch.nn.functional.upsample", "function.reduce_tensor", "reduced_losses[].item", "time.time", "time.time", "utils.utils.AverageMeter.average", "len", "utils.utils.AverageMeter.average", "utils.utils.AverageMeter.average", "numpy.maximum", "ave_losses[].average", "ave_losses[].average", "ave_losses[].average", "ave_losses[].average", "range", "F.upsample.size", "F.upsample.size"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_world_size", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.reduce_tensor", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.reduce_tensor", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_confusion_matrix_gpu", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.reduce_tensor", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.average"], ["", "", "def", "validate_ee", "(", "config", ",", "testloader", ",", "model", ",", "writer_dict", ",", "device", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "get_rank", "(", ")", ")", "\n", "\n", "tic_data", "=", "time", ".", "time", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "tic_total", "=", "time", ".", "time", "(", ")", "\n", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "ave_loss", "=", "AverageMeter", "(", ")", "\n", "\n", "num_exits", "=", "len", "(", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", ")", "\n", "\n", "ave_losses", "=", "[", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "num_exits", ")", "]", "\n", "\n", "confusion_matrices", "=", "[", "np", ".", "zeros", "(", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "for", "i", "in", "range", "(", "num_exits", ")", "]", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i_iter", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tic_data", ")", "\n", "\n", "image", ",", "label", ",", "_", ",", "_", "=", "batch", "\n", "size", "=", "label", ".", "size", "(", ")", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "losses", ",", "preds", "=", "model", "(", "image", ",", "label", ")", "\n", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "                ", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "-", "2", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "-", "1", "]", ":", "\n", "                    ", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "confusion_matrices", "[", "i", "]", "+=", "get_confusion_matrix_gpu", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "", "loss", "=", "0", "\n", "reduced_losses", "=", "[", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "losses", ")", ":", "\n", "                ", "loss", "+=", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", "[", "i", "]", "*", "losses", "[", "i", "]", "\n", "reduced_losses", ".", "append", "(", "reduce_tensor", "(", "losses", "[", "i", "]", ")", ")", "\n", "ave_losses", "[", "i", "]", ".", "update", "(", "reduced_losses", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "\n", "", "reduced_loss", "=", "reduce_tensor", "(", "loss", ")", "\n", "ave_loss", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tic", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "tic_data", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i_iter", "%", "config", ".", "PRINT_FREQ", "==", "0", "and", "rank", "==", "0", ":", "\n", "                ", "print_loss", "=", "ave_loss", ".", "average", "(", ")", "/", "world_size", "\n", "msg", "=", "'Iter:[{: >3d}/{}], Time: {:.2f}, Data Time: {:.2f} '", "'Loss: {:.6f}'", ".", "format", "(", "\n", "i_iter", ",", "len", "(", "testloader", ")", ",", "batch_time", ".", "average", "(", ")", ",", "data_time", ".", "average", "(", ")", ",", "print_loss", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "\n", "", "", "", "results", "=", "[", "]", "\n", "for", "i", ",", "confusion_matrix", "in", "enumerate", "(", "confusion_matrices", ")", ":", "\n", "\n", "        ", "confusion_matrix", "=", "torch", ".", "from_numpy", "(", "confusion_matrix", ")", ".", "to", "(", "device", ")", "\n", "reduced_confusion_matrix", "=", "reduce_tensor", "(", "confusion_matrix", ")", "\n", "confusion_matrix", "=", "reduced_confusion_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "pixel_acc", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_acc", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "\n", "results", ".", "append", "(", "(", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", ")", ")", "\n", "\n", "", "val_time", "=", "time", ".", "time", "(", ")", "-", "tic_total", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "f'Validation time:{val_time}s'", ")", "\n", "mean_IoUs", "=", "[", "result", "[", "0", "]", "for", "result", "in", "results", "]", "\n", "mean_IoUs", ".", "append", "(", "np", ".", "mean", "(", "mean_IoUs", ")", ")", "\n", "print_result", "=", "'\\t'", ".", "join", "(", "[", "'{:.2f}'", ".", "format", "(", "m", "*", "100", ")", "for", "m", "in", "mean_IoUs", "]", ")", "\n", "logging", ".", "info", "(", "f'mean_IoUs: {print_result}'", ")", "\n", "\n", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'valid_loss'", ",", "print_loss", ",", "global_steps", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "'exit_valid_loss'", ",", "{", "\n", "'exit1'", ":", "ave_losses", "[", "0", "]", ".", "average", "(", ")", "/", "world_size", ",", "\n", "'exit2'", ":", "ave_losses", "[", "1", "]", ".", "average", "(", ")", "/", "world_size", ",", "\n", "'exit3'", ":", "ave_losses", "[", "2", "]", ".", "average", "(", ")", "/", "world_size", ",", "\n", "'exit4'", ":", "ave_losses", "[", "3", "]", ".", "average", "(", ")", "/", "world_size", ",", "\n", "}", ",", "\n", "global_steps", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "'valid_mIoUs'", ",", "\n", "{", "f'valid_mIoU{i+1}'", ":", "results", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "num_exits", ")", "}", ",", "\n", "global_steps", "\n", ")", "\n", "writer_dict", "[", "'valid_global_steps'", "]", "+=", "1", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.testval_ee": [[245, 365], ["model.eval", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "enumerate", "utils.utils.get_rank", "numpy.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "confusion_matrix.sum", "confusion_matrix.sum", "numpy.diag", "IoU_array.mean", "results.append", "print", "range", "tqdm.tqdm", "label.size", "model", "enumerate", "np.diag.sum", "confusion_matrices[].sum.sum", "numpy.maximum", "torch.nn.functional.interpolate", "time.time", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.utils.get_confusion_matrix_gpu", "time.time", "time.time", "torch.nn.functional.upsample", "print", "os.path.join", "os.makedirs", "test_dataset.save_pred", "logging.info", "confusion_matrices[].sum", "confusion_matrices[].sum", "numpy.diag", "IoU_array.mean", "logging.info", "numpy.maximum", "torch.nn.functional.softmax", "os.path.join", "F.softmax.max", "function.testval_ee.save_float_img"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_confusion_matrix_gpu", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.save_pred"], ["def", "testval_ee", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "manual_seed", "(", "get_rank", "(", ")", ")", "\n", "num_exits", "=", "len", "(", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", ")", "\n", "\n", "confusion_matrices", "=", "[", "np", ".", "zeros", "(", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "for", "i", "in", "range", "(", "num_exits", ")", "]", "\n", "\n", "total_time", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "config", ".", "PYRAMID_TEST", ".", "USE", ":", "\n", "                ", "image", "=", "F", ".", "interpolate", "(", "image", ",", "(", "config", ".", "PYRAMID_TEST", ".", "SIZE", "//", "2", ",", "config", ".", "PYRAMID_TEST", ".", "SIZE", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "size", "=", "label", ".", "size", "(", ")", "\n", "\n", "if", "TIMING", ":", "\n", "                ", "start", "=", "time", ".", "time", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "preds", "=", "model", "(", "image", ")", "\n", "\n", "if", "TIMING", ":", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "total_time", "+=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "", "for", "i", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "                ", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "-", "2", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "-", "1", "]", ":", "\n", "                    ", "original_logits", "=", "pred", "\n", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "confusion_matrices", "[", "i", "]", "+=", "get_confusion_matrix_gpu", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "if", "sv_pred", "and", "index", "%", "20", "==", "0", "and", "VIS", ":", "\n", "                    ", "print", "(", "\"Saving ... \"", ",", "name", ")", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_results/{i+1}'", ")", "\n", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "test_dataset", ".", "save_pred", "(", "pred", ",", "sv_path", ",", "name", ")", "\n", "\n", "if", "VIS_T", "or", "VIS_CONF", ":", "\n", "                        ", "def", "save_float_img", "(", "t", ",", "sv_path", ",", "name", ",", "normalize", "=", "False", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "if", "normalize", ":", "\n", "                                ", "t", "=", "t", "/", "t", ".", "max", "(", ")", "\n", "", "torch", ".", "save", "(", "t", ",", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.pth'", ")", ")", "\n", "t", "=", "t", "[", "0", "]", "[", "0", "]", "\n", "t", "=", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.npy'", ")", ",", "t", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.png'", ")", ",", "t", "*", "255", ")", "\n", "\n", "", "def", "save_long_img", "(", "t", ",", "sv_path", ",", "name", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "t", "=", "t", "[", "0", "]", "[", "0", "]", "\n", "t", "=", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.png'", ")", ",", "t", ")", "\n", "\n", "", "def", "save_tensor", "(", "t", ",", "sv_path", ",", "name", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "t", ",", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.pth'", ")", ")", "\n", "\n", "\n", "", "", "if", "VIS_CONF", ":", "\n", "\n", "                        ", "out", "=", "F", ".", "softmax", "(", "original_logits", ",", "dim", "=", "1", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_conf/{i+1}'", ")", "\n", "original_conf_map", ",", "_", "=", "out", ".", "max", "(", "dim", "=", "1", ")", "\n", "save_float_img", "(", "original_conf_map", ".", "unsqueeze", "(", "0", ")", ",", "sv_path", ",", "name", ",", "normalize", "=", "False", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_pred/{i+1}'", ")", "\n", "max_index", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "save_long_img", "(", "max_index", ".", "unsqueeze", "(", "0", ")", ",", "sv_path", ",", "name", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_logits/{i+1}'", ")", "\n", "save_tensor", "(", "original_logits", ",", "sv_path", ",", "name", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_results/{i+1}'", ")", "\n", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "test_dataset", ".", "save_pred", "(", "original_logits", ",", "sv_path", ",", "name", ")", "\n", "\n", "if", "hasattr", "(", "model", ".", "module", ",", "'mask_dict'", ")", ":", "\n", "                            ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_masks/'", ")", "\n", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "mask_dict", ",", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.pth'", ")", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                            ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_gt/'", ")", "\n", "save_long_img", "(", "label", ".", "unsqueeze", "(", "0", ")", ",", "sv_path", ",", "name", ")", "\n", "", "", "", "if", "index", "%", "100", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "f'processing: {index} images with exit {i}'", ")", "\n", "pos", "=", "confusion_matrices", "[", "i", "]", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrices", "[", "i", "]", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrices", "[", "i", "]", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "logging", ".", "info", "(", "'mIoU: %.4f'", "%", "(", "mean_IoU", ")", ")", "\n", "\n", "", "", "", "", "results", "=", "[", "]", "\n", "for", "i", ",", "confusion_matrix", "in", "enumerate", "(", "confusion_matrices", ")", ":", "\n", "        ", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "pixel_acc", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_acc", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "\n", "results", ".", "append", "(", "(", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", ")", ")", "\n", "\n", "", "if", "TIMING", ":", "\n", "        ", "print", "(", "\"Total_time\"", ",", "total_time", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.testval_ee_class": [[367, 475], ["model.eval", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "enumerate", "utils.utils.get_rank", "numpy.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "confusion_matrix.sum", "confusion_matrix.sum", "numpy.diag", "IoU_array.mean", "results.append", "print", "range", "tqdm.tqdm", "label.size", "model", "enumerate", "np.diag.sum", "confusion_matrices[].sum.sum", "numpy.maximum", "utils.utils.get_confusion_matrix_gpu", "torch.nn.functional.upsample", "print", "os.path.join", "os.makedirs", "test_dataset.save_pred", "logging.info", "confusion_matrices[].sum", "confusion_matrices[].sum", "numpy.diag", "IoU_array.mean", "logging.info", "numpy.maximum", "torch.nn.functional.softmax", "os.path.join", "F.softmax.max", "function.testval_ee.save_float_img"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_confusion_matrix_gpu", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.cityscapes.Cityscapes.save_pred"], ["", "def", "testval_ee_class", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "manual_seed", "(", "get_rank", "(", ")", ")", "\n", "num_exits", "=", "len", "(", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", ")", "\n", "\n", "confusion_matrices", "=", "[", "np", ".", "zeros", "(", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "for", "i", "in", "range", "(", "num_exits", ")", "]", "\n", "\n", "total_time", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "\n", "size", "=", "label", ".", "size", "(", ")", "\n", "preds", "=", "model", "(", "image", ")", "\n", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "                ", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "-", "2", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "-", "1", "]", ":", "\n", "                    ", "original_logits", "=", "pred", "\n", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "confusion_matrices", "[", "i", "]", "+=", "get_confusion_matrix_gpu", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "if", "sv_pred", "and", "index", "%", "20", "==", "0", "and", "VIS", ":", "\n", "                    ", "print", "(", "\"Saving ... \"", ",", "name", ")", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_results/{i+1}'", ")", "\n", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "test_dataset", ".", "save_pred", "(", "pred", ",", "sv_path", ",", "name", ")", "\n", "\n", "if", "VIS_T", "or", "VIS_CONF", ":", "\n", "                        ", "def", "save_float_img", "(", "t", ",", "sv_path", ",", "name", ",", "normalize", "=", "False", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "if", "normalize", ":", "\n", "                                ", "t", "=", "t", "/", "t", ".", "max", "(", ")", "\n", "", "torch", ".", "save", "(", "t", ",", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.pth'", ")", ")", "\n", "t", "=", "t", "[", "0", "]", "[", "0", "]", "\n", "t", "=", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.npy'", ")", ",", "t", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.png'", ")", ",", "t", "*", "255", ")", "\n", "\n", "", "def", "save_long_img", "(", "t", ",", "sv_path", ",", "name", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "t", "=", "t", "[", "0", "]", "[", "0", "]", "\n", "t", "=", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.png'", ")", ",", "t", ")", "\n", "\n", "", "def", "save_tensor", "(", "t", ",", "sv_path", ",", "name", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "t", ",", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.pth'", ")", ")", "\n", "", "", "if", "VIS_CONF", ":", "\n", "                        ", "out", "=", "F", ".", "softmax", "(", "original_logits", ",", "dim", "=", "1", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_conf/{i+1}'", ")", "\n", "original_conf_map", ",", "_", "=", "out", ".", "max", "(", "dim", "=", "1", ")", "\n", "save_float_img", "(", "original_conf_map", ".", "unsqueeze", "(", "0", ")", ",", "sv_path", ",", "name", ",", "normalize", "=", "False", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_pred/{i+1}'", ")", "\n", "max_index", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "save_long_img", "(", "max_index", ".", "unsqueeze", "(", "0", ")", ",", "sv_path", ",", "name", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_logits/{i+1}'", ")", "\n", "save_tensor", "(", "original_logits", ",", "sv_path", ",", "name", ")", "\n", "\n", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_original_results/{i+1}'", ")", "\n", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "test_dataset", ".", "save_pred", "(", "original_logits", ",", "sv_path", ",", "name", ")", "\n", "\n", "if", "hasattr", "(", "model", ".", "module", ",", "'mask_dict'", ")", ":", "\n", "                            ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_masks/'", ")", "\n", "os", ".", "makedirs", "(", "sv_path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "mask_dict", ",", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "0", "]", "+", "'.pth'", ")", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                            ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "f'test_val_gt/'", ")", "\n", "save_long_img", "(", "label", ".", "unsqueeze", "(", "0", ")", ",", "sv_path", ",", "name", ")", "\n", "\n", "", "", "", "if", "index", "%", "100", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "f'processing: {index} images with exit {i}'", ")", "\n", "pos", "=", "confusion_matrices", "[", "i", "]", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrices", "[", "i", "]", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrices", "[", "i", "]", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "logging", ".", "info", "(", "'mIoU: %.4f'", "%", "(", "mean_IoU", ")", ")", "\n", "\n", "", "", "", "", "results", "=", "[", "]", "\n", "for", "i", ",", "confusion_matrix", "in", "enumerate", "(", "confusion_matrices", ")", ":", "\n", "        ", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "pixel_acc", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_acc", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "\n", "results", ".", "append", "(", "(", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", ")", ")", "\n", "\n", "", "if", "TIMING", ":", "\n", "        ", "print", "(", "\"Total_time\"", ",", "total_time", ")", "\n", "\n", "", "return", "results", "\n", "", "def", "testval_ee_profiling", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.testval_ee_profiling": [[475, 509], ["model.eval", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "range", "numpy.mean", "utils.utils.get_rank", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "final_stats[].append", "tqdm.tqdm", "range", "gflops.append", "numpy.mean", "torch.nn.functional.interpolate", "setattr", "utils.modelsummary.get_model_summary", "delattr", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.modelsummary.get_model_summary"], ["", "def", "testval_ee_profiling", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "manual_seed", "(", "get_rank", "(", ")", ")", "\n", "num_exits", "=", "len", "(", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", ")", "\n", "total_time", "=", "0", "\n", "\n", "gflops", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "config", ".", "PYRAMID_TEST", ".", "USE", ":", "\n", "                ", "image", "=", "F", ".", "interpolate", "(", "image", ",", "(", "config", ".", "PYRAMID_TEST", ".", "SIZE", ",", "config", ".", "PYRAMID_TEST", ".", "SIZE", "//", "2", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "stats", "=", "{", "}", "\n", "saved_stats", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "setattr", "(", "model", ".", "module", ",", "f\"stop{i+1}\"", ",", "\"anY_RanDOM_ThiNg\"", ")", "\n", "summary", ",", "stats", "[", "i", "+", "1", "]", "=", "get_model_summary", "(", "model", ",", "image", ",", "verbose", "=", "False", ")", "\n", "delattr", "(", "model", ".", "module", ",", "f\"stop{i+1}\"", ")", "\n", "\n", "", "saved_stats", "[", "'params'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'params'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'flops'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'flops'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'counts'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'counts'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'Gflops'", "]", "=", "[", "f", "/", "(", "1024", "**", "3", ")", "for", "f", "in", "saved_stats", "[", "'flops'", "]", "]", "\n", "saved_stats", "[", "'Mparams'", "]", "=", "[", "f", "/", "(", "10", "**", "6", ")", "for", "f", "in", "saved_stats", "[", "'params'", "]", "]", "\n", "gflops", ".", "append", "(", "saved_stats", "[", "'Gflops'", "]", ")", "\n", "\n", "", "", "final_stats", "=", "saved_stats", "\n", "final_stats", "[", "'Gflops'", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "final_stats", "[", "'Gflops'", "]", ".", "append", "(", "np", ".", "mean", "(", "[", "x", "[", "i", "]", "for", "x", "in", "gflops", "]", ")", ")", "\n", "", "final_stats", "[", "'Gflops_mean'", "]", "=", "np", ".", "mean", "(", "final_stats", "[", "'Gflops'", "]", ")", "\n", "return", "final_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.testval_ee_profiling_actual": [[510, 552], ["model.eval", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "range", "utils.utils.get_rank", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.mean", "print", "tqdm.tqdm", "range", "print", "isinstance", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "time.time", "model", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "t.append", "isinstance", "times.append", "setattr", "setattr", "delattr", "delattr", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.get_rank"], ["", "def", "testval_ee_profiling_actual", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "manual_seed", "(", "get_rank", "(", ")", ")", "\n", "num_exits", "=", "len", "(", "config", ".", "MODEL", ".", "EXTRA", ".", "EE_WEIGHTS", ")", "\n", "total_time", "=", "0", "\n", "\n", "stats", "=", "{", "}", "\n", "stats", "[", "'time'", "]", "=", "{", "}", "\n", "times", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "t", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "setattr", "(", "model", ".", "module", ",", "f\"stop{i+1}\"", ",", "\"anY_RanDOM_ThiNg\"", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "model", ",", "f\"stop{i+1}\"", ",", "\"anY_RanDOM_ThiNg\"", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "model", "(", "image", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "delattr", "(", "model", ".", "module", ",", "f\"stop{i+1}\"", ")", "\n", "", "else", ":", "\n", "                    ", "delattr", "(", "model", ",", "f\"stop{i+1}\"", ")", "\n", "\n", "", "", "if", "index", ">", "5", ":", "\n", "                ", "times", ".", "append", "(", "t", ")", "\n", "", "if", "index", ">", "20", ":", "\n", "                ", "break", "\n", "\n", "", "print", "(", "t", ")", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "stats", "[", "'time'", "]", "[", "i", "]", "=", "np", ".", "mean", "(", "[", "t", "[", "i", "]", "for", "t", "in", "times", "]", ")", "\n", "print", "(", "stats", ")", "\n", "", "return", "stats", "\n", "", ""]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__": [[6, 11], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "-", "1", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "CrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.criterion.CrossEntropy.forward": [[12, 22], ["criterion.CrossEntropy.criterion", "torch.nn.functional.upsample.size", "torch.nn.functional.upsample.size", "target.size", "target.size", "torch.nn.functional.upsample", "torch.nn.functional.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ")", ":", "\n", "        ", "ph", ",", "pw", "=", "score", ".", "size", "(", "2", ")", ",", "score", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "if", "ph", "!=", "h", "or", "pw", "!=", "w", ":", "\n", "            ", "score", "=", "F", ".", "upsample", "(", "\n", "input", "=", "score", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "score", ",", "target", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.train_ee.parse_args": [[34, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.test_ee.parse_args", "home.repos.pwc.inspect_result.liuzhuang13_anytime.config.default.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train segmentation network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.train_ee.main": [[52, 331], ["train_ee.parse_args", "utils.utils.create_logger", "list", "torch.device", "torch.device", "torch.device", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "core.criterion.CrossEntropy", "utils.utils.FullEEModel", "torch.SyncBatchNorm.convert_sync_batchnorm", "nn.parallel.DistributedDataParallel.to", "torch.parallel.DistributedDataParallel", "numpy.int", "timeit.default_timer", "logger.info", "range", "logger.info", "tensorboardX.SummaryWriter", "len", "eval", "os.path.dirname", "os.path.join", "os.path.exists", "shutil.copytree", "shutil.copytree", "shutil.copytree", "shutil.copytree", "nn.parallel.DistributedDataParallel.eval", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "range", "utils.utils.json_save", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "eval", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "eval", "torch.utils.data.distributed.DistributedSampler", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ValueError", "os.path.isfile", "open", "f.write", "shutil.rmtree", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "nn.parallel.DistributedDataParallel.to", "torch.rand.to", "nn.parallel.DistributedDataParallel.to", "torch.rand.to", "setattr", "utils.modelsummary.get_model_summary", "delattr", "os.path.join", "eval", "torch.utils.data.distributed.DistributedSampler", "len", "os.path.join", "os.path.isfile", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "nn.parallel.DistributedDataParallel.module.load_state_dict", "logger.info", "torch.utils.data.distributed.DistributedSampler.set_epoch", "core.function.train_ee", "core.function.train_ee", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "config.config.dump", "nn.parallel.DistributedDataParallel.to", "torch.rand.to", "logger.info", "logger.info", "range", "range", "range", "train_dataset.__len__", "torch.optim.SGD.load_state_dict", "os.path.join", "nn.parallel.DistributedDataParallel.module.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "writer_dict[].close", "timeit.default_timer", "logger.info", "logger.info", "os.getpid", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "subprocess.run", "nn.parallel.DistributedDataParallel.module.model.exit1.parameters", "nn.parallel.DistributedDataParallel.module.model.exit2.parameters", "nn.parallel.DistributedDataParallel.module.model.exit3.parameters", "nn.parallel.DistributedDataParallel.module.model.last_layer.parameters", "nn.parallel.DistributedDataParallel.module.state_dict", "torch.optim.SGD.state_dict", "nn.parallel.DistributedDataParallel.module.state_dict", "os.path.join", "devices.split", "nn.parallel.DistributedDataParallel.module.model.exit1.parameters", "nn.parallel.DistributedDataParallel.module.model.exit2.parameters", "nn.parallel.DistributedDataParallel.module.model.exit3.parameters", "filter", "nn.parallel.DistributedDataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.test_ee.parse_args", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.create_logger", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.json_save", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.modelsummary.get_model_summary", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.train_ee", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.train_ee", "home.repos.pwc.inspect_result.liuzhuang13_anytime.datasets.base_dataset.BaseDataset.__len__"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "tb_log_dir", "=", "create_logger", "(", "\n", "config", ",", "args", ".", "cfg", ",", "'train'", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "config", ")", "\n", "\n", "", "writer_dict", "=", "{", "\n", "'writer'", ":", "SummaryWriter", "(", "tb_log_dir", ")", ",", "\n", "'train_global_steps'", ":", "0", ",", "\n", "'valid_global_steps'", ":", "0", ",", "\n", "}", "\n", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "deterministic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "distributed", "=", "len", "(", "gpus", ")", ">", "1", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "local_rank", ")", ")", "\n", "\n", "model", "=", "eval", "(", "'models.'", "+", "config", ".", "MODEL", ".", "NAME", "+", "\n", "'.get_seg_model'", ")", "(", "config", ")", "\n", "\n", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "with", "open", "(", "f\"{final_output_dir}/config.yaml\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "config", ".", "dump", "(", ")", ")", "\n", "\n", "", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "models_dst_dir", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'code'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "models_dst_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "models_dst_dir", ")", "\n", "", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "'../lib'", ")", ",", "os", ".", "path", ".", "join", "(", "models_dst_dir", ",", "'lib'", ")", ")", "\n", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "'../tools'", ")", ",", "os", ".", "path", ".", "join", "(", "models_dst_dir", ",", "'tools'", ")", ")", "\n", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "'../scripts'", ")", ",", "os", ".", "path", ".", "join", "(", "models_dst_dir", ",", "'scripts'", ")", ")", "\n", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "'../experiments'", ")", ",", "os", ".", "path", ".", "join", "(", "models_dst_dir", ",", "'experiments'", ")", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "dump_input", "=", "torch", ".", "rand", "(", "\n", "(", "1", ",", "3", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", ")", "\n", "dump_output", "=", "model", ".", "to", "(", "device", ")", "(", "dump_input", ".", "to", "(", "device", ")", ")", "\n", "\n", "dump_output", "=", "model", ".", "to", "(", "device", ")", "(", "dump_input", ".", "to", "(", "device", ")", ")", "\n", "\n", "stats", "=", "{", "}", "\n", "saved_stats", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "setattr", "(", "model", ",", "f\"stop{i+1}\"", ",", "\"anY_RanDOM_ThiNg\"", ")", "\n", "summary", ",", "stats", "[", "i", "+", "1", "]", "=", "get_model_summary", "(", "model", ".", "to", "(", "device", ")", ",", "dump_input", ".", "to", "(", "device", ")", ",", "verbose", "=", "False", ")", "\n", "delattr", "(", "model", ",", "f\"stop{i+1}\"", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f'\\n\\n>>>>>>>>>>>>>>>>>>>>>>>  EXIT {i+1}  >>>>>>>>>>>>>>>>>>>>>>>>>>  '", ")", "\n", "logger", ".", "info", "(", "summary", ")", "\n", "\n", "", "", "saved_stats", "[", "'params'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'params'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'flops'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'flops'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'counts'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'counts'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'Gflops'", "]", "=", "[", "f", "/", "(", "1024", "**", "3", ")", "for", "f", "in", "saved_stats", "[", "'flops'", "]", "]", "\n", "saved_stats", "[", "'Mparams'", "]", "=", "[", "f", "/", "(", "10", "**", "6", ")", "for", "f", "in", "saved_stats", "[", "'params'", "]", "]", "\n", "\n", "json_save", "(", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'stats.json'", ")", ",", "saved_stats", ")", "\n", "\n", "\n", "", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ",", "\n", ")", "\n", "\n", "", "crop_size", "=", "(", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "train_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TRAIN_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "config", ".", "TRAIN", ".", "MULTI_SCALE", ",", "\n", "flip", "=", "config", ".", "TRAIN", ".", "FLIP", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", "downsample_rate", "=", "config", ".", "TRAIN", ".", "DOWNSAMPLERATE", ",", "\n", "scale_factor", "=", "config", ".", "TRAIN", ".", "SCALE_FACTOR", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", ",", "\n", "shuffle", "=", "config", ".", "TRAIN", ".", "SHUFFLE", "and", "train_sampler", "is", "None", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ")", "\n", "\n", "if", "config", ".", "DATASET", ".", "EXTRA_TRAIN_SET", ":", "\n", "        ", "extra_train_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "EXTRA_TRAIN_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "config", ".", "TRAIN", ".", "MULTI_SCALE", ",", "\n", "flip", "=", "config", ".", "TRAIN", ".", "FLIP", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", "downsample_rate", "=", "config", ".", "TRAIN", ".", "DOWNSAMPLERATE", ",", "\n", "scale_factor", "=", "config", ".", "TRAIN", ".", "SCALE_FACTOR", ")", "\n", "\n", "if", "distributed", ":", "\n", "            ", "extra_train_sampler", "=", "DistributedSampler", "(", "extra_train_dataset", ")", "\n", "", "else", ":", "\n", "            ", "extra_train_sampler", "=", "None", "\n", "\n", "", "extra_trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "extra_train_dataset", ",", "\n", "batch_size", "=", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", ",", "\n", "shuffle", "=", "config", ".", "TRAIN", ".", "SHUFFLE", "and", "extra_train_sampler", "is", "None", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "extra_train_sampler", ")", "\n", "\n", "", "test_size", "=", "(", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "test_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TEST_SET", ",", "\n", "num_samples", "=", "config", ".", "TEST", ".", "NUM_SAMPLES", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "False", ",", "\n", "flip", "=", "False", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TEST", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "test_size", ",", "\n", "center_crop_test", "=", "config", ".", "TEST", ".", "CENTER_CROP_TEST", ",", "\n", "downsample_rate", "=", "1", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "test_sampler", "=", "DistributedSampler", "(", "test_dataset", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "config", ".", "TEST", ".", "BATCH_SIZE_PER_GPU", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler", ")", "\n", "\n", "criterion", "=", "CrossEntropy", "(", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "weight", "=", "train_dataset", ".", "class_weights", ")", "\n", "\n", "model", "=", "FullEEModel", "(", "model", ",", "criterion", ",", "config", "=", "config", ")", "\n", "\n", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ")", "\n", "\n", "if", "config", ".", "TRAIN", ".", "OPTIMIZER", "==", "'sgd'", ":", "\n", "        ", "if", "config", ".", "TRAIN", ".", "ALLE_ONLY", ":", "\n", "            ", "param", "=", "[", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "exit1", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "exit2", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "exit3", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "last_layer", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", ",", "\n", "]", "\n", "", "elif", "config", ".", "TRAIN", ".", "EE_ONLY", ":", "\n", "            ", "param", "=", "[", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "exit1", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "exit2", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "model", ".", "exit3", ".", "parameters", "(", ")", ",", "'lr'", ":", "config", ".", "TRAIN", ".", "EXTRA_LR", "}", "\n", "]", "\n", "", "else", ":", "\n", "            ", "param", "=", "[", "\n", "{", "'params'", ":", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "model", ".", "parameters", "(", ")", ")", ",", "\n", "'lr'", ":", "config", ".", "TRAIN", ".", "LR", "}", "\n", "]", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param", ",", "\n", "lr", "=", "config", ".", "TRAIN", ".", "LR", ",", "\n", "momentum", "=", "config", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "config", ".", "TRAIN", ".", "WD", ",", "\n", "nesterov", "=", "config", ".", "TRAIN", ".", "NESTEROV", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Only Support SGD optimizer'", ")", "\n", "\n", "", "epoch_iters", "=", "np", ".", "int", "(", "train_dataset", ".", "__len__", "(", ")", "/", "\n", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", "/", "len", "(", "gpus", ")", ")", "\n", "best_mIoU", "=", "0", "\n", "last_epoch", "=", "0", "\n", "if", "config", ".", "TRAIN", ".", "RESUME", ":", "\n", "        ", "if", "config", ".", "DATASET", ".", "EXTRA_TRAIN_SET", ":", "\n", "            ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "config", ".", "RESUME_DIR", ",", "'checkpoint.pth.tar'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "model_state_file", ")", "\n", "load_optimizer_dict", "=", "False", "\n", "", "else", ":", "\n", "            ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'checkpoint.pth.tar'", ")", "\n", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "model_state_file", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "best_mIoU", "=", "checkpoint", "[", "'best_mIoU'", "]", "\n", "last_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "if", "not", "config", ".", "DATASET", ".", "EXTRA_TRAIN_SET", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "logger", ".", "info", "(", "\"=> loaded checkpoint (epoch {})\"", "\n", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "\n", "", "", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "end_epoch", "=", "config", ".", "TRAIN", ".", "END_EPOCH", "+", "config", ".", "TRAIN", ".", "EXTRA_EPOCH", "\n", "num_iters", "=", "config", ".", "TRAIN", ".", "END_EPOCH", "*", "epoch_iters", "\n", "extra_iters", "=", "config", ".", "TRAIN", ".", "EXTRA_EPOCH", "*", "epoch_iters", "\n", "\n", "logger", ".", "info", "(", "'Starting training at rank {}'", ".", "format", "(", "args", ".", "local_rank", ")", ")", "\n", "for", "epoch", "in", "range", "(", "last_epoch", ",", "end_epoch", ")", ":", "\n", "        ", "if", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "epoch", ">=", "config", ".", "TRAIN", ".", "END_EPOCH", ":", "\n", "            ", "train_ee", "(", "config", ",", "epoch", "-", "config", ".", "TRAIN", ".", "END_EPOCH", ",", "\n", "config", ".", "TRAIN", ".", "EXTRA_EPOCH", ",", "epoch_iters", ",", "\n", "config", ".", "TRAIN", ".", "EXTRA_LR", ",", "extra_iters", ",", "\n", "extra_trainloader", ",", "optimizer", ",", "model", ",", "\n", "writer_dict", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "train_ee", "(", "config", ",", "epoch", ",", "config", ".", "TRAIN", ".", "END_EPOCH", ",", "\n", "epoch_iters", ",", "config", ".", "TRAIN", ".", "LR", ",", "num_iters", ",", "\n", "trainloader", ",", "optimizer", ",", "model", ",", "writer_dict", ",", "\n", "device", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'=> saving checkpoint to {}'", ".", "format", "(", "\n", "final_output_dir", "+", "'checkpoint.pth.tar'", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_mIoU'", ":", "best_mIoU", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "\n", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'checkpoint.pth'", ")", ")", "\n", "\n", "\n", "if", "epoch", "==", "end_epoch", "-", "1", ":", "\n", "                ", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'final_state.pth'", ")", ")", "\n", "\n", "writer_dict", "[", "'writer'", "]", ".", "close", "(", ")", "\n", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "logger", ".", "info", "(", "'Hours: {}'", ".", "format", "(", "(", "end", "-", "start", ")", "/", "3600", ")", ")", "\n", "logger", ".", "info", "(", "'Done'", ")", "\n", "\n", "\n", "pid", "=", "os", ".", "getpid", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "devices", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "\n", "device", "=", "devices", ".", "split", "(", "','", ")", "[", "1", "]", "\n", "command", "=", "f'CUDA_VISIBLE_DEVICES={device} python tools/test_ee.py --cfg {final_output_dir}/config.yaml'", "\n", "print", "(", "command", ")", "\n", "\n", "subprocess", ".", "run", "(", "command", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.tools._init_paths.add_path": [[9, 12], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.test_ee.parse_args": [[29, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.test_ee.parse_args", "home.repos.pwc.inspect_result.liuzhuang13_anytime.config.default.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train segmentation network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.test_ee.main": [[47, 189], ["test_ee.parse_args", "config.config.defrost", "config.config.freeze", "utils.utils.create_logger", "logger.info", "logger.info", "nn.DataParallel().cuda.eval", "torch.rand", "torch.rand", "torch.rand", "logger.info", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.state_dict", "model.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "torch.DataParallel().cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "timeit.default_timer", "enumerate", "mean_IoUs.append", "timeit.default_timer", "logger.info", "logger.info", "logging.info", "pprint.pformat", "pprint.pformat", "eval", "torch.rand", "torch.rand", "torch.rand", "nn.DataParallel().cuda.to", "torch.rand.to", "nn.DataParallel().cuda.to", "torch.rand.to", "range", "numpy.mean", "utils.utils.json_save", "os.path.join", "eval", "core.function.testval_ee", "logging.info", "logging.info", "mean_IoUs.append", "numpy.mean", "open", "f.write", "os.path.join", "setattr", "utils.modelsummary.get_model_summary", "delattr", "logger.info", "logger.info", "os.path.join", "torch.load.items", "torch.DataParallel", "core.function.testval_ee_profiling", "utils.utils.json_save", "numpy.int", "len", "nn.DataParallel().cuda.to", "torch.rand.to", "range", "range", "range", "model.state_dict.keys", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.liuzhuang13_anytime.tools.test_ee.parse_args", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.create_logger", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.json_save", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.testval_ee", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.modelsummary.get_model_summary", "home.repos.pwc.inspect_result.liuzhuang13_anytime.core.function.testval_ee_profiling", "home.repos.pwc.inspect_result.liuzhuang13_anytime.utils.utils.json_save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "OUTPUT_DIR", "=", "args", ".", "cfg", "[", ":", "-", "len", "(", "'config.yaml'", ")", "]", "\n", "try", ":", "\n", "        ", "if", "config", ".", "TEST", ".", "SUB_DIR", ":", "\n", "            ", "config", ".", "OUTPUT_DIR", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT_DIR", ",", "config", ".", "TEST", ".", "SUB_DIR", ")", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "config", ".", "freeze", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "_", "=", "create_logger", "(", "\n", "config", ",", "args", ".", "cfg", ",", "'test'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "config", ")", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "deterministic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "model", "=", "eval", "(", "'models.'", "+", "config", ".", "MODEL", ".", "NAME", "+", "\n", "'.get_seg_model'", ")", "(", "config", ")", "\n", "\n", "device", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "dump_input", "=", "torch", ".", "rand", "(", "\n", "(", "1", ",", "3", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", ")", "\n", "\n", "if", "config", ".", "PYRAMID_TEST", ".", "USE", ":", "\n", "        ", "dump_input", "=", "torch", ".", "rand", "(", "\n", "(", "1", ",", "3", ",", "config", ".", "PYRAMID_TEST", ".", "SIZE", ",", "config", ".", "PYRAMID_TEST", ".", "SIZE", "//", "2", ")", "\n", ")", "\n", "", "dump_output", "=", "model", ".", "to", "(", "device", ")", "(", "dump_input", ".", "to", "(", "device", ")", ")", "\n", "del", "dump_output", "\n", "dump_output", "=", "model", ".", "to", "(", "device", ")", "(", "dump_input", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "not", "(", "config", ".", "MASK", ".", "USE", "and", "(", "config", ".", "MASK", ".", "CRIT", "==", "'conf_thre'", "or", "config", ".", "MASK", ".", "CRIT", "==", "'entropy_thre'", ")", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "saved_stats", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "setattr", "(", "model", ",", "f\"stop{i+1}\"", ",", "\"anY_RanDOM_ThiNg\"", ")", "\n", "summary", ",", "stats", "[", "i", "+", "1", "]", "=", "get_model_summary", "(", "model", ".", "to", "(", "device", ")", ",", "dump_input", ".", "to", "(", "device", ")", ",", "verbose", "=", "True", ")", "\n", "delattr", "(", "model", ",", "f\"stop{i+1}\"", ")", "\n", "\n", "logger", ".", "info", "(", "f'\\n\\n>>>>>>>>>>>>>>>>>>>>>>>  EXIT {i+1}  >>>>>>>>>>>>>>>>>>>>>>>>>>  '", ")", "\n", "logger", ".", "info", "(", "summary", ")", "\n", "\n", "", "saved_stats", "[", "'params'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'params'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'flops'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'flops'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'counts'", "]", "=", "[", "stats", "[", "i", "+", "1", "]", "[", "'counts'", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "saved_stats", "[", "'Gflops'", "]", "=", "[", "f", "/", "(", "1024", "**", "3", ")", "for", "f", "in", "saved_stats", "[", "'flops'", "]", "]", "\n", "saved_stats", "[", "'Gflops_mean'", "]", "=", "np", ".", "mean", "(", "saved_stats", "[", "'Gflops'", "]", ")", "\n", "saved_stats", "[", "'Mparams'", "]", "=", "[", "f", "/", "(", "10", "**", "6", ")", "for", "f", "in", "saved_stats", "[", "'params'", "]", "]", "\n", "json_save", "(", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'test_stats.json'", ")", ",", "saved_stats", ")", "\n", "\n", "", "if", "config", ".", "TEST", ".", "MODEL_FILE", ":", "\n", "        ", "model_state_file", "=", "config", ".", "TEST", ".", "MODEL_FILE", "\n", "", "else", ":", "\n", "        ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'final_state.pth'", ")", "\n", "\n", "", "try", ":", "\n", "        ", "if", "config", ".", "TEST", ".", "SUB_DIR", ":", "\n", "            ", "model_state_file", "=", "args", ".", "cfg", "[", ":", "-", "len", "(", "'config.yaml'", ")", "]", "+", "'final_state.pth'", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "logger", ".", "info", "(", "'=> loading model from {}'", ".", "format", "(", "model_state_file", ")", ")", "\n", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "model_state_file", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", "[", "6", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "[", "6", ":", "]", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "gpus", "=", "[", "0", "]", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "test_size", "=", "(", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "test_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TEST_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "False", ",", "\n", "flip", "=", "False", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TEST", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "test_size", ",", "\n", "downsample_rate", "=", "1", ")", "\n", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "if", "'val'", "in", "config", ".", "DATASET", ".", "TEST_SET", ":", "\n", "        ", "results", "=", "testval_ee", "(", "config", ",", "\n", "test_dataset", ",", "\n", "testloader", ",", "\n", "model", ",", "sv_dir", "=", "final_output_dir", ",", "sv_pred", "=", "True", ")", "\n", "\n", "if", "config", ".", "MASK", ".", "USE", "and", "config", ".", "MASK", ".", "CRIT", "==", "'conf_thre'", ":", "\n", "            ", "results_profiling", "=", "testval_ee_profiling", "(", "config", ",", "\n", "test_dataset", ",", "\n", "testloader", ",", "\n", "model", ",", "sv_dir", "=", "final_output_dir", ",", "sv_pred", "=", "True", ")", "\n", "json_save", "(", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'test_stats.json'", ")", ",", "results_profiling", ")", "\n", "\n", "", "", "mean_IoUs", "=", "[", "]", "\n", "for", "i", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", "=", "result", "\n", "\n", "msg", "=", "'Exit: {}, MeanIU: {: 4.4f}, Pixel_Acc: {: 4.4f}, \\\n            Mean_Acc: {: 4.4f}, Class IoU: '", ".", "format", "(", "i", "+", "1", ",", "mean_IoU", ",", "\n", "pixel_acc", ",", "mean_acc", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "logging", ".", "info", "(", "IoU_array", ")", "\n", "\n", "mean_IoUs", ".", "append", "(", "mean_IoU", ")", "\n", "\n", "\n", "", "mean_IoUs", ".", "append", "(", "np", ".", "mean", "(", "mean_IoUs", ")", ")", "\n", "print_result", "=", "'\\t'", ".", "join", "(", "[", "'{:.2f}'", ".", "format", "(", "m", "*", "100", ")", "for", "m", "in", "mean_IoUs", "]", ")", "\n", "result_file_name", "=", "f'{final_output_dir}/result.txt'", "\n", "\n", "with", "open", "(", "result_file_name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "print_result", ")", "\n", "\n", "", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "logger", ".", "info", "(", "'Mins: %d'", "%", "np", ".", "int", "(", "(", "end", "-", "start", ")", "/", "60", ")", ")", "\n", "logger", ".", "info", "(", "'Done'", ")", "\n", "logging", ".", "info", "(", "print_result", ")", "\n", "\n"]]}