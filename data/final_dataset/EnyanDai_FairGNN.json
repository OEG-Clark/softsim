{"home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.train_fairGNN.fair_metric": [[113, 126], ["labels[].cpu().numpy", "numpy.bitwise_and", "numpy.bitwise_and", "abs", "abs", "labels[].cpu", "sens.cpu().numpy", "sens.cpu().numpy", "idx.cpu().numpy", "idx.cpu().numpy", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sens.cpu", "sens.cpu", "idx.cpu", "idx.cpu", "output[].squeeze"], "function", ["None"], ["", "def", "fair_metric", "(", "output", ",", "idx", ")", ":", "\n", "    ", "val_y", "=", "labels", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "idx_s0", "=", "sens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "==", "0", "\n", "idx_s1", "=", "sens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "==", "1", "\n", "\n", "idx_s0_y1", "=", "np", ".", "bitwise_and", "(", "idx_s0", ",", "val_y", "==", "1", ")", "\n", "idx_s1_y1", "=", "np", ".", "bitwise_and", "(", "idx_s1", ",", "val_y", "==", "1", ")", "\n", "\n", "pred_y", "=", "(", "output", "[", "idx", "]", ".", "squeeze", "(", ")", ">", "0", ")", ".", "type_as", "(", "labels", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "parity", "=", "abs", "(", "sum", "(", "pred_y", "[", "idx_s0", "]", ")", "/", "sum", "(", "idx_s0", ")", "-", "sum", "(", "pred_y", "[", "idx_s1", "]", ")", "/", "sum", "(", "idx_s1", ")", ")", "\n", "equality", "=", "abs", "(", "sum", "(", "pred_y", "[", "idx_s0_y1", "]", ")", "/", "sum", "(", "idx_s0_y1", ")", "-", "sum", "(", "pred_y", "[", "idx_s1_y1", "]", ")", "/", "sum", "(", "idx_s1_y1", ")", ")", "\n", "\n", "return", "parity", ",", "equality", "\n", "#%%", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.encode_onehot": [[8, 15], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.load_data": [[19, 59], ["print", "numpy.genfromtxt", "scipy.csr_matrix", "utils.encode_onehot", "print", "numpy.array", "numpy.genfromtxt", "numpy.array().reshape", "scipy.coo_matrix", "utils.normalize", "range", "range", "range", "torch.FloatTensor", "torch.LongTensor", "utils.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor.multiply", "numpy.array", "numpy.dtype", "enumerate", "numpy.array", "numpy.ones", "sparse_mx_to_torch_sparse_tensor.T.multiply", "scipy.eye", "torch.FloatTensor.todense", "numpy.where", "list", "map", "np.genfromtxt.flatten"], "function", ["home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.encode_onehot", "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.normalize", "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_data", "(", "path", "=", "\"../dataset/cora/\"", ",", "dataset", "=", "\"cora\"", ")", ":", "\n", "    ", "\"\"\"Load citation network dataset (cora only for now)\"\"\"", "\n", "print", "(", "'Loading {} dataset...'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "idx_features_labels", "=", "np", ".", "genfromtxt", "(", "\"{}{}.content\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "\n", "dtype", "=", "np", ".", "dtype", "(", "str", ")", ")", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "idx_features_labels", "[", ":", ",", "1", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "encode_onehot", "(", "idx_features_labels", "[", ":", ",", "-", "1", "]", ")", "\n", "print", "(", "labels", ")", "\n", "\n", "# build graph", "\n", "idx", "=", "np", ".", "array", "(", "idx_features_labels", "[", ":", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "edges_unordered", "=", "np", ".", "genfromtxt", "(", "\"{}{}.cites\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "# features = normalize(features)", "\n", "adj", "=", "normalize", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "idx_train", "=", "range", "(", "140", ")", "\n", "idx_val", "=", "range", "(", "200", ",", "500", ")", "\n", "idx_test", "=", "range", "(", "500", ",", "1500", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "where", "(", "labels", ")", "[", "1", "]", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.load_pokec": [[60, 131], ["print", "pandas.read_csv", "list", "list.remove", "list.remove", "list.remove", "scipy.csr_matrix", "numpy.array", "numpy.genfromtxt", "numpy.array().reshape", "scipy.coo_matrix", "torch.FloatTensor", "torch.LongTensor", "random.seed", "random.shuffle", "set", "numpy.asarray", "torch.FloatTensor", "list", "random.seed", "random.shuffle", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join", "os.path.join", "sp.coo_matrix.multiply", "scipy.eye", "numpy.array", "numpy.where", "list", "enumerate", "numpy.array", "numpy.ones", "sp.coo_matrix.T.multiply", "torch.FloatTensor.todense", "min", "int", "int", "numpy.where", "set", "list", "int", "int", "set", "set", "map", "len", "len", "np.genfromtxt.flatten", "len", "len"], "function", ["None"], ["", "def", "load_pokec", "(", "dataset", ",", "sens_attr", ",", "predict_attr", ",", "path", "=", "\"../dataset/pokec/\"", ",", "label_number", "=", "1000", ",", "sens_number", "=", "500", ",", "seed", "=", "19", ",", "test_idx", "=", "False", ")", ":", "\n", "    ", "\"\"\"Load data\"\"\"", "\n", "print", "(", "'Loading {} dataset from {}'", ".", "format", "(", "dataset", ",", "path", ")", ")", "\n", "\n", "idx_features_labels", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}.csv\"", ".", "format", "(", "dataset", ")", ")", ")", "\n", "header", "=", "list", "(", "idx_features_labels", ".", "columns", ")", "\n", "header", ".", "remove", "(", "\"user_id\"", ")", "\n", "\n", "header", ".", "remove", "(", "sens_attr", ")", "\n", "header", ".", "remove", "(", "predict_attr", ")", "\n", "\n", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "idx_features_labels", "[", "header", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "idx_features_labels", "[", "predict_attr", "]", ".", "values", "\n", "\n", "\n", "# build graph", "\n", "idx", "=", "np", ".", "array", "(", "idx_features_labels", "[", "\"user_id\"", "]", ",", "dtype", "=", "int", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "edges_unordered", "=", "np", ".", "genfromtxt", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}_relationship.txt\"", ".", "format", "(", "dataset", ")", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ",", "\n", "dtype", "=", "int", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "# features = normalize(features)", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "# adj = sparse_mx_to_torch_sparse_tensor(adj)", "\n", "\n", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "label_idx", "=", "np", ".", "where", "(", "labels", ">=", "0", ")", "[", "0", "]", "\n", "random", ".", "shuffle", "(", "label_idx", ")", "\n", "\n", "idx_train", "=", "label_idx", "[", ":", "min", "(", "int", "(", "0.5", "*", "len", "(", "label_idx", ")", ")", ",", "label_number", ")", "]", "\n", "idx_val", "=", "label_idx", "[", "int", "(", "0.5", "*", "len", "(", "label_idx", ")", ")", ":", "int", "(", "0.75", "*", "len", "(", "label_idx", ")", ")", "]", "\n", "if", "test_idx", ":", "\n", "        ", "idx_test", "=", "label_idx", "[", "label_number", ":", "]", "\n", "idx_val", "=", "idx_test", "\n", "", "else", ":", "\n", "        ", "idx_test", "=", "label_idx", "[", "int", "(", "0.75", "*", "len", "(", "label_idx", ")", ")", ":", "]", "\n", "\n", "\n", "\n", "\n", "", "sens", "=", "idx_features_labels", "[", "sens_attr", "]", ".", "values", "\n", "\n", "sens_idx", "=", "set", "(", "np", ".", "where", "(", "sens", ">=", "0", ")", "[", "0", "]", ")", "\n", "idx_test", "=", "np", ".", "asarray", "(", "list", "(", "sens_idx", "&", "set", "(", "idx_test", ")", ")", ")", "\n", "sens", "=", "torch", ".", "FloatTensor", "(", "sens", ")", "\n", "idx_sens_train", "=", "list", "(", "sens_idx", "-", "set", "(", "idx_val", ")", "-", "set", "(", "idx_test", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "shuffle", "(", "idx_sens_train", ")", "\n", "idx_sens_train", "=", "torch", ".", "LongTensor", "(", "idx_sens_train", "[", ":", "sens_number", "]", ")", "\n", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "\n", "# random.shuffle(sens_idx)", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "sens", ",", "idx_sens_train", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.normalize": [[132, 140], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.feature_norm": [[141, 147], ["features.min", "features.max"], "function", ["None"], ["", "def", "feature_norm", "(", "features", ")", ":", "\n", "\n", "    ", "min_values", "=", "features", ".", "min", "(", "axis", "=", "0", ")", "[", "0", "]", "\n", "max_values", "=", "features", ".", "max", "(", "axis", "=", "0", ")", "[", "0", "]", "\n", "\n", "return", "2", "*", "(", "features", "-", "min_values", ")", ".", "div", "(", "max_values", "-", "min_values", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.accuracy": [[148, 154], ["output.squeeze.squeeze", "preds.eq().double", "correct.sum.sum", "len", "preds.eq"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "preds", "=", "(", "output", ">", "0", ")", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "", "def", "accuracy_softmax", "(", "output", ",", "labels", ")", ":", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.accuracy_softmax": [[154, 159], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy_softmax", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.sparse_mx_to_torch_sparse_tensor": [[160, 168], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.src.utils.load_pokec_emb": [[174, 251], ["print", "numpy.genfromtxt", "pandas.DataFrame", "embedding_df[].astype", "embedding_df.rename.rename", "pandas.read_csv", "pandas.merge", "idx_features_labels.fillna.fillna", "list", "list.remove", "list.remove", "list.remove", "scipy.csr_matrix", "numpy.array", "numpy.genfromtxt", "numpy.array().reshape", "scipy.coo_matrix", "torch.FloatTensor", "torch.LongTensor", "random.seed", "random.shuffle", "set", "numpy.asarray", "torch.FloatTensor", "list", "random.seed", "random.shuffle", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join", "os.path.join", "os.path.join", "sp.coo_matrix.multiply", "scipy.eye", "numpy.array", "numpy.where", "list", "enumerate", "numpy.array", "numpy.ones", "sp.coo_matrix.T.multiply", "torch.FloatTensor.todense", "min", "int", "int", "numpy.where", "set", "list", "int", "int", "set", "set", "map", "len", "len", "np.genfromtxt.flatten", "len", "len"], "function", ["None"], ["", "def", "load_pokec_emb", "(", "dataset", ",", "sens_attr", ",", "predict_attr", ",", "path", "=", "\"../dataset/pokec/\"", ",", "label_number", "=", "1000", ",", "sens_number", "=", "500", ",", "seed", "=", "19", ",", "test_idx", "=", "False", ")", ":", "\n", "    ", "print", "(", "'Loading {} dataset from {}'", ".", "format", "(", "dataset", ",", "path", ")", ")", "\n", "\n", "graph_embedding", "=", "np", ".", "genfromtxt", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}.embedding\"", ".", "format", "(", "dataset", ")", ")", ",", "\n", "skip_header", "=", "1", ",", "\n", "dtype", "=", "float", "\n", ")", "\n", "embedding_df", "=", "pd", ".", "DataFrame", "(", "graph_embedding", ")", "\n", "embedding_df", "[", "0", "]", "=", "embedding_df", "[", "0", "]", ".", "astype", "(", "int", ")", "\n", "embedding_df", "=", "embedding_df", ".", "rename", "(", "index", "=", "int", ",", "columns", "=", "{", "0", ":", "\"user_id\"", "}", ")", "\n", "\n", "idx_features_labels", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}.csv\"", ".", "format", "(", "dataset", ")", ")", ")", "\n", "idx_features_labels", "=", "pd", ".", "merge", "(", "idx_features_labels", ",", "embedding_df", ",", "how", "=", "\"left\"", ",", "on", "=", "\"user_id\"", ")", "\n", "idx_features_labels", "=", "idx_features_labels", ".", "fillna", "(", "0", ")", "\n", "#%%", "\n", "\n", "header", "=", "list", "(", "idx_features_labels", ".", "columns", ")", "\n", "header", ".", "remove", "(", "\"user_id\"", ")", "\n", "\n", "header", ".", "remove", "(", "sens_attr", ")", "\n", "header", ".", "remove", "(", "predict_attr", ")", "\n", "\n", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "idx_features_labels", "[", "header", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "idx_features_labels", "[", "predict_attr", "]", ".", "values", "\n", "\n", "#%%", "\n", "# build graph", "\n", "idx", "=", "np", ".", "array", "(", "idx_features_labels", "[", "\"user_id\"", "]", ",", "dtype", "=", "int", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "edges_unordered", "=", "np", ".", "genfromtxt", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}_relationship.txt\"", ".", "format", "(", "dataset", ")", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "\n", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "label_idx", "=", "np", ".", "where", "(", "labels", ">=", "0", ")", "[", "0", "]", "\n", "random", ".", "shuffle", "(", "label_idx", ")", "\n", "\n", "idx_train", "=", "label_idx", "[", ":", "min", "(", "int", "(", "0.5", "*", "len", "(", "label_idx", ")", ")", ",", "label_number", ")", "]", "\n", "idx_val", "=", "label_idx", "[", "int", "(", "0.5", "*", "len", "(", "label_idx", ")", ")", ":", "int", "(", "0.75", "*", "len", "(", "label_idx", ")", ")", "]", "\n", "if", "test_idx", ":", "\n", "        ", "idx_test", "=", "label_idx", "[", "label_number", ":", "]", "\n", "", "else", ":", "\n", "        ", "idx_test", "=", "label_idx", "[", "int", "(", "0.75", "*", "len", "(", "label_idx", ")", ")", ":", "]", "\n", "\n", "\n", "\n", "\n", "", "sens", "=", "idx_features_labels", "[", "sens_attr", "]", ".", "values", "\n", "\n", "sens_idx", "=", "set", "(", "np", ".", "where", "(", "sens", ">=", "0", ")", "[", "0", "]", ")", "\n", "idx_test", "=", "np", ".", "asarray", "(", "list", "(", "sens_idx", "&", "set", "(", "idx_test", ")", ")", ")", "\n", "sens", "=", "torch", ".", "FloatTensor", "(", "sens", ")", "\n", "idx_sens_train", "=", "list", "(", "sens_idx", "-", "set", "(", "idx_val", ")", "-", "set", "(", "idx_test", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "shuffle", "(", "idx_sens_train", ")", "\n", "idx_sens_train", "=", "torch", ".", "LongTensor", "(", "idx_sens_train", "[", ":", "sens_number", "]", ")", "\n", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "sens", ",", "idx_sens_train", "", "", ""]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.FairGNN.FairGNN.__init__": [[20, 39], ["torch.Module.__init__", "models.GCN.GCN", "FairGNN.get_model", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "list", "FairGNN.FairGNN.adv.parameters", "list", "list", "FairGNN.FairGNN.estimator.parameters", "FairGNN.FairGNN.GNN.parameters", "FairGNN.FairGNN.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.__init__", "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.FairGNN.get_model"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "args", ")", ":", "\n", "        ", "super", "(", "FairGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "nhid", "=", "args", ".", "num_hidden", "\n", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "estimator", "=", "GCN", "(", "nfeat", ",", "args", ".", "hidden", ",", "1", ",", "dropout", ")", "\n", "self", ".", "GNN", "=", "get_model", "(", "nfeat", ",", "args", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "nhid", ",", "1", ")", "\n", "self", ".", "adv", "=", "nn", ".", "Linear", "(", "nhid", ",", "1", ")", "\n", "\n", "G_params", "=", "list", "(", "self", ".", "GNN", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "estimator", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "G_params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "self", ".", "optimizer_A", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "adv", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "self", ".", "G_loss", "=", "0", "\n", "self", ".", "A_loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.FairGNN.FairGNN.forward": [[40, 45], ["FairGNN.FairGNN.estimator", "FairGNN.FairGNN.GNN", "FairGNN.FairGNN.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "s", "=", "self", ".", "estimator", "(", "g", ",", "x", ")", "\n", "z", "=", "self", ".", "GNN", "(", "g", ",", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "z", ")", "\n", "return", "y", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.FairGNN.FairGNN.optimize": [[46, 82], ["FairGNN.FairGNN.train", "FairGNN.FairGNN.adv.requires_grad_", "FairGNN.FairGNN.optimizer_G.zero_grad", "FairGNN.FairGNN.estimator", "FairGNN.FairGNN.GNN", "FairGNN.FairGNN.classifier", "FairGNN.FairGNN.adv", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "sens[].unsqueeze().float", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "FairGNN.FairGNN.criterion", "FairGNN.FairGNN.criterion", "FairGNN.FairGNN.G_loss.backward", "FairGNN.FairGNN.optimizer_G.step", "FairGNN.FairGNN.adv.requires_grad_", "FairGNN.FairGNN.optimizer_A.zero_grad", "FairGNN.FairGNN.adv", "FairGNN.FairGNN.criterion", "FairGNN.FairGNN.A_loss.backward", "FairGNN.FairGNN.optimizer_A.step", "FairGNN.FairGNN.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "labels[].unsqueeze().float", "FairGNN.FairGNN.detach", "sens[].unsqueeze", "labels[].unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "optimize", "(", "self", ",", "g", ",", "x", ",", "labels", ",", "idx_train", ",", "sens", ",", "idx_sens_train", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "### update E, G", "\n", "self", ".", "adv", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "\n", "s", "=", "self", ".", "estimator", "(", "g", ",", "x", ")", "\n", "h", "=", "self", ".", "GNN", "(", "g", ",", "x", ")", "\n", "y", "=", "self", ".", "classifier", "(", "h", ")", "\n", "\n", "\n", "\n", "s_g", "=", "self", ".", "adv", "(", "h", ")", "\n", "\n", "s_score", "=", "torch", ".", "sigmoid", "(", "s", ".", "detach", "(", ")", ")", "\n", "# s_score = (s_score > 0.5).float()", "\n", "s_score", "[", "idx_sens_train", "]", "=", "sens", "[", "idx_sens_train", "]", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "y_score", "=", "torch", ".", "sigmoid", "(", "y", ")", "\n", "self", ".", "cov", "=", "torch", ".", "abs", "(", "torch", ".", "mean", "(", "(", "s_score", "-", "torch", ".", "mean", "(", "s_score", ")", ")", "*", "(", "y_score", "-", "torch", ".", "mean", "(", "y_score", ")", ")", ")", ")", "\n", "\n", "\n", "self", ".", "cls_loss", "=", "self", ".", "criterion", "(", "y", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "adv_loss", "=", "self", ".", "criterion", "(", "s_g", ",", "s_score", ")", "\n", "\n", "self", ".", "G_loss", "=", "self", ".", "cls_loss", "+", "self", ".", "args", ".", "alpha", "*", "self", ".", "cov", "-", "self", ".", "args", ".", "beta", "*", "self", ".", "adv_loss", "\n", "self", ".", "G_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "## update Adv", "\n", "self", ".", "adv", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "optimizer_A", ".", "zero_grad", "(", ")", "\n", "s_g", "=", "self", ".", "adv", "(", "h", ".", "detach", "(", ")", ")", "\n", "self", ".", "A_loss", "=", "self", ".", "criterion", "(", "s_g", ",", "s_score", ")", "\n", "self", ".", "A_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_A", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.FairGNN.get_model": [[6, 17], ["models.GCN.GCN_Body", "models.GAT.GAT_body", "print"], "function", ["None"], ["def", "get_model", "(", "nfeat", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "==", "\"GCN\"", ":", "\n", "        ", "model", "=", "GCN_Body", "(", "nfeat", ",", "args", ".", "num_hidden", ",", "args", ".", "dropout", ")", "\n", "", "elif", "args", ".", "model", "==", "\"GAT\"", ":", "\n", "        ", "heads", "=", "(", "[", "args", ".", "num_heads", "]", "*", "args", ".", "num_layers", ")", "+", "[", "args", ".", "num_out_heads", "]", "\n", "model", "=", "GAT_body", "(", "args", ".", "num_layers", ",", "nfeat", ",", "args", ".", "num_hidden", ",", "heads", ",", "args", ".", "dropout", ",", "args", ".", "attn_drop", ",", "args", ".", "negative_slope", ",", "args", ".", "residual", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Model not implement\"", ")", "\n", "return", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GAT.GAT_body.__init__": [[6, 33], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "GAT.GAT_body.gat_layers.append", "range", "GAT.GAT_body.gat_layers.append", "dgl.nn.pytorch.GATConv", "GAT.GAT_body.gat_layers.append", "dgl.nn.pytorch.GATConv", "dgl.nn.pytorch.GATConv"], "methods", ["home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "in_dim", ",", "\n", "num_hidden", ",", "\n", "heads", ",", "\n", "feat_drop", ",", "\n", "attn_drop", ",", "\n", "negative_slope", ",", "\n", "residual", ")", ":", "\n", "        ", "super", "(", "GAT_body", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "gat_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activation", "=", "F", ".", "elu", "\n", "# input projection (no residual)", "\n", "self", ".", "gat_layers", ".", "append", "(", "GATConv", "(", "\n", "in_dim", ",", "num_hidden", ",", "heads", "[", "0", "]", ",", "\n", "feat_drop", ",", "attn_drop", ",", "negative_slope", ",", "False", ",", "self", ".", "activation", ")", ")", "\n", "# hidden layers", "\n", "for", "l", "in", "range", "(", "1", ",", "num_layers", ")", ":", "\n", "# due to multi-head, the in_dim = num_hidden * num_heads", "\n", "            ", "self", ".", "gat_layers", ".", "append", "(", "GATConv", "(", "\n", "num_hidden", "*", "heads", "[", "l", "-", "1", "]", ",", "num_hidden", ",", "heads", "[", "l", "]", ",", "\n", "feat_drop", ",", "attn_drop", ",", "negative_slope", ",", "residual", ",", "self", ".", "activation", ")", ")", "\n", "# output projection", "\n", "", "self", ".", "gat_layers", ".", "append", "(", "GATConv", "(", "\n", "num_hidden", "*", "heads", "[", "-", "2", "]", ",", "num_hidden", ",", "heads", "[", "-", "1", "]", ",", "\n", "feat_drop", ",", "attn_drop", ",", "negative_slope", ",", "residual", ",", "None", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GAT.GAT_body.forward": [[33, 41], ["range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "inputs", ")", ":", "\n", "        ", "h", "=", "inputs", "\n", "for", "l", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "gat_layers", "[", "l", "]", "(", "g", ",", "h", ")", ".", "flatten", "(", "1", ")", "\n", "# output projection", "\n", "", "logits", "=", "self", ".", "gat_layers", "[", "-", "1", "]", "(", "g", ",", "h", ")", ".", "mean", "(", "1", ")", "\n", "\n", "return", "logits", "\n", "", "", "class", "GAT", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GAT.GAT.__init__": [[42, 56], ["torch.Module.__init__", "GAT.GAT_body", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "in_dim", ",", "\n", "num_hidden", ",", "\n", "num_classes", ",", "\n", "heads", ",", "\n", "feat_drop", ",", "\n", "attn_drop", ",", "\n", "negative_slope", ",", "\n", "residual", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "GAT_body", "(", "num_layers", ",", "in_dim", ",", "num_hidden", ",", "heads", ",", "feat_drop", ",", "attn_drop", ",", "negative_slope", ",", "residual", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "num_hidden", ",", "num_classes", ")", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GAT.GAT.forward": [[56, 62], ["GAT.GAT.body", "GAT.GAT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "inputs", ")", ":", "\n", "\n", "        ", "logits", "=", "self", ".", "body", "(", "g", ",", "inputs", ")", "\n", "logits", "=", "self", ".", "fc", "(", "logits", ")", "\n", "\n", "return", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN.__init__": [[6, 10], ["torch.Module.__init__", "GCN.GCN_Body", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "GCN_Body", "(", "nfeat", ",", "nhid", ",", "dropout", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN.forward": [[11, 15], ["GCN.GCN.body", "GCN.GCN.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "body", "(", "g", ",", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.__init__": [[18, 24], ["torch.Module.__init__", "dgl.nn.pytorch.GraphConv", "dgl.nn.pytorch.GraphConv", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN_Body", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConv", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GraphConv", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EnyanDai_FairGNN.models.GCN.GCN_Body.forward": [[25, 31], ["torch.relu", "torch.relu", "GCN.GCN_Body.dropout", "GCN.GCN_Body.gc2", "GCN.GCN_Body.gc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "g", ",", "x", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "gc2", "(", "g", ",", "x", ")", "\n", "# x = self.dropout(x)", "\n", "return", "x", "\n", "\n"]]}