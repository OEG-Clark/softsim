{"home.repos.pwc.inspect_result.google-research_augmix.None.cifar.AugMixDataset.__init__": [[187, 191], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "preprocess", ",", "no_jsd", "=", "False", ")", ":", "\n", "    ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "no_jsd", "=", "no_jsd", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.AugMixDataset.__getitem__": [[192, 200], ["cifar.aug", "cifar.AugMixDataset.preprocess", "cifar.aug", "cifar.aug"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "x", ",", "y", "=", "self", ".", "dataset", "[", "i", "]", "\n", "if", "self", ".", "no_jsd", ":", "\n", "      ", "return", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ",", "y", "\n", "", "else", ":", "\n", "      ", "im_tuple", "=", "(", "self", ".", "preprocess", "(", "x", ")", ",", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ",", "\n", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ")", "\n", "return", "im_tuple", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.AugMixDataset.__len__": [[201, 203], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.get_lr": [[146, 150], ["numpy.cos"], "function", ["None"], ["def", "get_lr", "(", "step", ",", "total_steps", ",", "lr_max", ",", "lr_min", ")", ":", "\n", "  ", "\"\"\"Compute learning rate according to cosine annealing schedule.\"\"\"", "\n", "return", "lr_min", "+", "(", "lr_max", "-", "lr_min", ")", "*", "0.5", "*", "(", "1", "+", "\n", "np", ".", "cos", "(", "step", "/", "total_steps", "*", "np", ".", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.aug": [[152, 182], ["numpy.float32", "numpy.float32", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "numpy.random.dirichlet", "numpy.random.beta", "preprocess", "image.copy", "range", "numpy.random.randint", "numpy.random.choice", "np.random.choice.", "preprocess", "preprocess"], "function", ["None"], ["", "def", "aug", "(", "image", ",", "preprocess", ")", ":", "\n", "  ", "\"\"\"Perform AugMix augmentations and compute mixture.\n\n  Args:\n    image: PIL.Image input image\n    preprocess: Preprocessing function which should return a torch tensor.\n\n  Returns:\n    mixed: Augmented and mixed image.\n  \"\"\"", "\n", "aug_list", "=", "augmentations", ".", "augmentations", "\n", "if", "args", ".", "all_ops", ":", "\n", "    ", "aug_list", "=", "augmentations", ".", "augmentations_all", "\n", "\n", "", "ws", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "dirichlet", "(", "[", "1", "]", "*", "args", ".", "mixture_width", ")", ")", "\n", "m", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "beta", "(", "1", ",", "1", ")", ")", "\n", "\n", "mix", "=", "torch", ".", "zeros_like", "(", "preprocess", "(", "image", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "mixture_width", ")", ":", "\n", "    ", "image_aug", "=", "image", ".", "copy", "(", ")", "\n", "depth", "=", "args", ".", "mixture_depth", "if", "args", ".", "mixture_depth", ">", "0", "else", "np", ".", "random", ".", "randint", "(", "\n", "1", ",", "4", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "      ", "op", "=", "np", ".", "random", ".", "choice", "(", "aug_list", ")", "\n", "image_aug", "=", "op", "(", "image_aug", ",", "args", ".", "aug_severity", ")", "\n", "# Preprocessing commutes since all coefficients are convex", "\n", "", "mix", "+=", "ws", "[", "i", "]", "*", "preprocess", "(", "image_aug", ")", "\n", "\n", "", "mixed", "=", "(", "1", "-", "m", ")", "*", "preprocess", "(", "image", ")", "+", "m", "*", "mix", "\n", "return", "mixed", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.train": [[205, 246], ["net.train", "enumerate", "optimizer.zero_grad", "F.cross_entropy.backward", "optimizer.step", "scheduler.step", "images.cuda.cuda", "targets.cuda.cuda", "net", "torch.cross_entropy", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "targets.cuda.cuda", "net", "torch.split", "torch.split", "torch.split", "torch.cross_entropy", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "print", "images[].size", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.train"], ["", "", "def", "train", "(", "net", ",", "train_loader", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "  ", "\"\"\"Train for one epoch.\"\"\"", "\n", "net", ".", "train", "(", ")", "\n", "loss_ema", "=", "0.", "\n", "for", "i", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "no_jsd", ":", "\n", "      ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "logits", "=", "net", "(", "images", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "", "else", ":", "\n", "      ", "images_all", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "logits_all", "=", "net", "(", "images_all", ")", "\n", "logits_clean", ",", "logits_aug1", ",", "logits_aug2", "=", "torch", ".", "split", "(", "\n", "logits_all", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Cross-entropy is only computed on clean images", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits_clean", ",", "targets", ")", "\n", "\n", "p_clean", ",", "p_aug1", ",", "p_aug2", "=", "F", ".", "softmax", "(", "\n", "logits_clean", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "\n", "logits_aug1", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "\n", "logits_aug2", ",", "dim", "=", "1", ")", "\n", "\n", "# Clamp mixture distribution to avoid exploding KL divergence", "\n", "p_mixture", "=", "torch", ".", "clamp", "(", "(", "p_clean", "+", "p_aug1", "+", "p_aug2", ")", "/", "3.", ",", "1e-7", ",", "1", ")", ".", "log", "(", ")", "\n", "loss", "+=", "12", "*", "(", "F", ".", "kl_div", "(", "p_mixture", ",", "p_clean", ",", "reduction", "=", "'batchmean'", ")", "+", "\n", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug1", ",", "reduction", "=", "'batchmean'", ")", "+", "\n", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug2", ",", "reduction", "=", "'batchmean'", ")", ")", "/", "3.", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "loss_ema", "=", "loss_ema", "*", "0.9", "+", "float", "(", "loss", ")", "*", "0.1", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "      ", "print", "(", "'Train Loss {:.3f}'", ".", "format", "(", "loss_ema", ")", ")", "\n", "\n", "", "", "return", "loss_ema", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.test": [[248, 264], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "torch.cross_entropy", "float", "pred.eq().sum().item", "len", "len", "images.cuda", "targets.cuda", "net.data.max", "pred.eq().sum", "pred.eq"], "function", ["None"], ["", "def", "test", "(", "net", ",", "test_loader", ")", ":", "\n", "  ", "\"\"\"Evaluate network on given dataset.\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "total_loss", "=", "0.", "\n", "total_correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "images", ",", "targets", "in", "test_loader", ":", "\n", "      ", "images", ",", "targets", "=", "images", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "logits", "=", "net", "(", "images", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "pred", "=", "logits", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "total_loss", "+=", "float", "(", "loss", ".", "data", ")", "\n", "total_correct", "+=", "pred", ".", "eq", "(", "targets", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "total_loss", "/", "len", "(", "test_loader", ".", "dataset", ")", ",", "total_correct", "/", "len", "(", "\n", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.test_c": [[266, 287], ["numpy.mean", "numpy.load", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "cifar.test", "corruption_accs.append", "print", "numpy.load"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test"], ["", "def", "test_c", "(", "net", ",", "test_data", ",", "base_path", ")", ":", "\n", "  ", "\"\"\"Evaluate network on given corrupted dataset.\"\"\"", "\n", "corruption_accs", "=", "[", "]", "\n", "for", "corruption", "in", "CORRUPTIONS", ":", "\n", "# Reference to original data is mutated", "\n", "    ", "test_data", ".", "data", "=", "np", ".", "load", "(", "base_path", "+", "corruption", "+", "'.npy'", ")", "\n", "test_data", ".", "targets", "=", "torch", ".", "LongTensor", "(", "np", ".", "load", "(", "base_path", "+", "'labels.npy'", ")", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "args", ".", "eval_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "net", ",", "test_loader", ")", "\n", "corruption_accs", ".", "append", "(", "test_acc", ")", "\n", "print", "(", "'{}\\n\\tTest Loss {:.3f} | Test Error {:.3f}'", ".", "format", "(", "\n", "corruption", ",", "test_loss", ",", "100", "-", "100.", "*", "test_acc", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "corruption_accs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.main": [[289, 437], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "cifar.AugMixDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "os.path.join", "print", "range", "cifar.test_c", "print", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "third_party.ResNeXt_DenseNet.models.densenet.densenet", "third_party.ResNeXt_DenseNet.models.resnext.resnext29.parameters", "os.path.isfile", "cifar.test", "print", "cifar.test_c", "print", "os.path.exists", "os.makedirs", "os.path.isdir", "Exception", "open", "f.write", "time.time", "cifar.train", "cifar.test", "max", "os.path.join", "torch.save", "torch.save", "torch.save", "print", "open", "f.write", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "third_party.WideResNet_pytorch.wideresnet.WideResNet", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "third_party.ResNeXt_DenseNet.models.resnext.resnext29.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "third_party.ResNeXt_DenseNet.models.resnext.resnext29.state_dict", "torch.optim.SGD.state_dict", "shutil.copyfile", "open", "f.write", "models.cifar.allconv.AllConvNet", "cifar.get_lr", "os.path.join", "int", "third_party.ResNeXt_DenseNet.models.resnext.resnext29", "len", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test_c", "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.densenet", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test_c", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.train", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test", "home.repos.pwc.inspect_result.google-research_augmix.None.cifar.get_lr", "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.resnext29"], ["", "def", "main", "(", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "\n", "# Load datasets", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", "]", ")", "\n", "preprocess", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", "]", "*", "3", ",", "[", "0.5", "]", "*", "3", ")", "]", ")", "\n", "test_transform", "=", "preprocess", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "    ", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "'./data/cifar'", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "'./data/cifar'", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "base_c_path", "=", "'./data/cifar/CIFAR-10-C/'", "\n", "num_classes", "=", "10", "\n", "", "else", ":", "\n", "    ", "train_data", "=", "datasets", ".", "CIFAR100", "(", "\n", "'./data/cifar'", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR100", "(", "\n", "'./data/cifar'", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "base_c_path", "=", "'./data/cifar/CIFAR-100-C/'", "\n", "num_classes", "=", "100", "\n", "\n", "", "train_data", "=", "AugMixDataset", "(", "train_data", ",", "preprocess", ",", "args", ".", "no_jsd", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "args", ".", "eval_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# Create model", "\n", "if", "args", ".", "model", "==", "'densenet'", ":", "\n", "    ", "net", "=", "densenet", "(", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'wrn'", ":", "\n", "    ", "net", "=", "WideResNet", "(", "args", ".", "layers", ",", "num_classes", ",", "args", ".", "widen_factor", ",", "args", ".", "droprate", ")", "\n", "", "elif", "args", ".", "model", "==", "'allconv'", ":", "\n", "    ", "net", "=", "AllConvNet", "(", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'resnext'", ":", "\n", "    ", "net", "=", "resnext29", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "net", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "decay", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "# Distribute model across all visible GPUs", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "'Model restored from epoch:'", ",", "start_epoch", ")", "\n", "\n", "", "", "if", "args", ".", "evaluate", ":", "\n", "# Evaluate clean accuracy first because test_c mutates underlying data", "\n", "    ", "test_loss", ",", "test_acc", "=", "test", "(", "net", ",", "test_loader", ")", "\n", "print", "(", "'Clean\\n\\tTest Loss {:.3f} | Test Error {:.2f}'", ".", "format", "(", "\n", "test_loss", ",", "100", "-", "100.", "*", "test_acc", ")", ")", "\n", "\n", "test_c_acc", "=", "test_c", "(", "net", ",", "test_data", ",", "base_c_path", ")", "\n", "print", "(", "'Mean Corruption Error: {:.3f}'", ".", "format", "(", "100", "-", "100.", "*", "test_c_acc", ")", ")", "\n", "return", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "\n", "lr_lambda", "=", "lambda", "step", ":", "get_lr", "(", "# pylint: disable=g-long-lambda", "\n", "step", ",", "\n", "args", ".", "epochs", "*", "len", "(", "train_loader", ")", ",", "\n", "1", ",", "# lr_lambda computes multiplicative factor", "\n", "1e-6", "/", "args", ".", "learning_rate", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save", ")", ":", "\n", "    ", "raise", "Exception", "(", "'%s is not a dir'", "%", "args", ".", "save", ")", "\n", "\n", "", "log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "\n", "args", ".", "dataset", "+", "'_'", "+", "args", ".", "model", "+", "'_training_log.csv'", ")", "\n", "with", "open", "(", "log_path", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "'epoch,time(s),train_loss,test_loss,test_error(%)\\n'", ")", "\n", "\n", "", "best_acc", "=", "0", "\n", "print", "(", "'Beginning training from epoch:'", ",", "start_epoch", "+", "1", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "    ", "begin_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_loss_ema", "=", "train", "(", "net", ",", "train_loader", ",", "optimizer", ",", "scheduler", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "net", ",", "test_loader", ")", "\n", "\n", "is_best", "=", "test_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "test_acc", ",", "best_acc", ")", "\n", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'dataset'", ":", "args", ".", "dataset", ",", "\n", "'model'", ":", "args", ".", "model", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "save_path", ")", "\n", "if", "is_best", ":", "\n", "      ", "shutil", ".", "copyfile", "(", "save_path", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n", "", "with", "open", "(", "log_path", ",", "'a'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "'%03d,%05d,%0.6f,%0.5f,%0.2f\\n'", "%", "(", "\n", "(", "epoch", "+", "1", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "begin_time", ",", "\n", "train_loss_ema", ",", "\n", "test_loss", ",", "\n", "100", "-", "100.", "*", "test_acc", ",", "\n", ")", ")", "\n", "\n", "", "print", "(", "\n", "'Epoch {0:3d} | Time {1:5d} | Train Loss {2:.4f} | Test Loss {3:.3f} |'", "\n", "' Test Error {4:.2f}'", "\n", ".", "format", "(", "(", "epoch", "+", "1", ")", ",", "int", "(", "time", ".", "time", "(", ")", "-", "begin_time", ")", ",", "train_loss_ema", ",", "\n", "test_loss", ",", "100", "-", "100.", "*", "test_acc", ")", ")", "\n", "\n", "", "test_c_acc", "=", "test_c", "(", "net", ",", "test_data", ",", "base_c_path", ")", "\n", "print", "(", "'Mean Corruption Error: {:.3f}'", ".", "format", "(", "100", "-", "100.", "*", "test_c_acc", ")", ")", "\n", "\n", "with", "open", "(", "log_path", ",", "'a'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "'%03d,%05d,%0.6f,%0.5f,%0.2f\\n'", "%", "\n", "(", "args", ".", "epochs", "+", "1", ",", "0", ",", "0", ",", "0", ",", "100", "-", "100", "*", "test_c_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augment_and_mix.normalize": [[25, 31], ["image.transpose.transpose", "image.transpose.transpose", "numpy.array", "numpy.array"], "function", ["None"], ["def", "normalize", "(", "image", ")", ":", "\n", "  ", "\"\"\"Normalize input image channel-wise to zero mean and unit variance.\"\"\"", "\n", "image", "=", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# Switch to channel-first", "\n", "mean", ",", "std", "=", "np", ".", "array", "(", "MEAN", ")", ",", "np", ".", "array", "(", "STD", ")", "\n", "image", "=", "(", "image", "-", "mean", "[", ":", ",", "None", ",", "None", "]", ")", "/", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augment_and_mix.apply_op": [[33, 38], ["numpy.clip().astype", "PIL.Image.fromarray", "op", "numpy.asarray", "numpy.clip"], "function", ["None"], ["", "def", "apply_op", "(", "image", ",", "op", ",", "severity", ")", ":", "\n", "  ", "image", "=", "np", ".", "clip", "(", "image", "*", "255.", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pil_img", "=", "Image", ".", "fromarray", "(", "image", ")", "# Convert to PIL.Image", "\n", "pil_img", "=", "op", "(", "pil_img", ",", "severity", ")", "\n", "return", "np", ".", "asarray", "(", "pil_img", ")", "/", "255.", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augment_and_mix.augment_and_mix": [[40, 70], ["numpy.float32", "numpy.float32", "numpy.zeros_like", "range", "numpy.random.dirichlet", "numpy.random.beta", "image.copy", "range", "numpy.random.randint", "numpy.random.choice", "augment_and_mix.apply_op", "augment_and_mix.normalize", "augment_and_mix.normalize"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augment_and_mix.apply_op", "home.repos.pwc.inspect_result.google-research_augmix.None.augment_and_mix.normalize", "home.repos.pwc.inspect_result.google-research_augmix.None.augment_and_mix.normalize"], ["", "def", "augment_and_mix", "(", "image", ",", "severity", "=", "3", ",", "width", "=", "3", ",", "depth", "=", "-", "1", ",", "alpha", "=", "1.", ")", ":", "\n", "  ", "\"\"\"Perform AugMix augmentations and compute mixture.\n\n  Args:\n    image: Raw input image as float32 np.ndarray of shape (h, w, c)\n    severity: Severity of underlying augmentation operators (between 1 to 10).\n    width: Width of augmentation chain\n    depth: Depth of augmentation chain. -1 enables stochastic depth uniformly\n      from [1, 3]\n    alpha: Probability coefficient for Beta and Dirichlet distributions.\n\n  Returns:\n    mixed: Augmented and mixed image.\n  \"\"\"", "\n", "ws", "=", "np", ".", "float32", "(", "\n", "np", ".", "random", ".", "dirichlet", "(", "[", "alpha", "]", "*", "width", ")", ")", "\n", "m", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", ")", "\n", "\n", "mix", "=", "np", ".", "zeros_like", "(", "image", ")", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "    ", "image_aug", "=", "image", ".", "copy", "(", ")", "\n", "d", "=", "depth", "if", "depth", ">", "0", "else", "np", ".", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "for", "_", "in", "range", "(", "d", ")", ":", "\n", "      ", "op", "=", "np", ".", "random", ".", "choice", "(", "augmentations", ".", "augmentations", ")", "\n", "image_aug", "=", "apply_op", "(", "image_aug", ",", "op", ",", "severity", ")", "\n", "# Preprocessing commutes since all coefficients are convex", "\n", "", "mix", "+=", "ws", "[", "i", "]", "*", "normalize", "(", "image_aug", ")", "\n", "\n", "", "mixed", "=", "(", "1", "-", "m", ")", "*", "normalize", "(", "image", ")", "+", "m", "*", "mix", "\n", "return", "mixed", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.AugMixDataset.__init__": [[233, 237], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "preprocess", ",", "no_jsd", "=", "False", ")", ":", "\n", "    ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "no_jsd", "=", "no_jsd", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.AugMixDataset.__getitem__": [[238, 246], ["imagenet.aug", "imagenet.AugMixDataset.preprocess", "imagenet.aug", "imagenet.aug"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "x", ",", "y", "=", "self", ".", "dataset", "[", "i", "]", "\n", "if", "self", ".", "no_jsd", ":", "\n", "      ", "return", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ",", "y", "\n", "", "else", ":", "\n", "      ", "im_tuple", "=", "(", "self", ".", "preprocess", "(", "x", ")", ",", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ",", "\n", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ")", "\n", "return", "im_tuple", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.AugMixDataset.__len__": [[247, 249], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.adjust_learning_rate": [[155, 168], ["None"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "  ", "\"\"\"Sets the learning rate to the initial LR (linearly scaled to batch size) decayed by 10 every n / 3 epochs.\"\"\"", "\n", "b", "=", "args", ".", "batch_size", "/", "256.", "\n", "k", "=", "args", ".", "epochs", "//", "3", "\n", "if", "epoch", "<", "k", ":", "\n", "    ", "m", "=", "1", "\n", "", "elif", "epoch", "<", "2", "*", "k", ":", "\n", "    ", "m", "=", "0.1", "\n", "", "else", ":", "\n", "    ", "m", "=", "0.01", "\n", "", "lr", "=", "args", ".", "learning_rate", "*", "m", "*", "b", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "    ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.accuracy": [[170, 185], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "      ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.compute_mce": [[187, 195], ["range", "len", "numpy.mean"], "function", ["None"], ["", "", "def", "compute_mce", "(", "corruption_accs", ")", ":", "\n", "  ", "\"\"\"Compute mCE (mean Corruption Error) normalized by AlexNet performance.\"\"\"", "\n", "mce", "=", "0.", "\n", "for", "i", "in", "range", "(", "len", "(", "CORRUPTIONS", ")", ")", ":", "\n", "    ", "avg_err", "=", "1", "-", "np", ".", "mean", "(", "corruption_accs", "[", "CORRUPTIONS", "[", "i", "]", "]", ")", "\n", "ce", "=", "100", "*", "avg_err", "/", "ALEXNET_ERR", "[", "i", "]", "\n", "mce", "+=", "ce", "/", "15", "\n", "", "return", "mce", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.aug": [[197, 228], ["numpy.float32", "numpy.float32", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "numpy.random.dirichlet", "numpy.random.beta", "preprocess", "image.copy", "range", "numpy.random.randint", "numpy.random.choice", "np.random.choice.", "preprocess", "preprocess"], "function", ["None"], ["", "def", "aug", "(", "image", ",", "preprocess", ")", ":", "\n", "  ", "\"\"\"Perform AugMix augmentations and compute mixture.\n\n  Args:\n    image: PIL.Image input image\n    preprocess: Preprocessing function which should return a torch tensor.\n\n  Returns:\n    mixed: Augmented and mixed image.\n  \"\"\"", "\n", "aug_list", "=", "augmentations", ".", "augmentations", "\n", "if", "args", ".", "all_ops", ":", "\n", "    ", "aug_list", "=", "augmentations", ".", "augmentations_all", "\n", "\n", "", "ws", "=", "np", ".", "float32", "(", "\n", "np", ".", "random", ".", "dirichlet", "(", "[", "args", ".", "aug_prob_coeff", "]", "*", "args", ".", "mixture_width", ")", ")", "\n", "m", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "beta", "(", "args", ".", "aug_prob_coeff", ",", "args", ".", "aug_prob_coeff", ")", ")", "\n", "\n", "mix", "=", "torch", ".", "zeros_like", "(", "preprocess", "(", "image", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "mixture_width", ")", ":", "\n", "    ", "image_aug", "=", "image", ".", "copy", "(", ")", "\n", "depth", "=", "args", ".", "mixture_depth", "if", "args", ".", "mixture_depth", ">", "0", "else", "np", ".", "random", ".", "randint", "(", "\n", "1", ",", "4", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "      ", "op", "=", "np", ".", "random", ".", "choice", "(", "aug_list", ")", "\n", "image_aug", "=", "op", "(", "image_aug", ",", "args", ".", "aug_severity", ")", "\n", "# Preprocessing commutes since all coefficients are convex", "\n", "", "mix", "+=", "ws", "[", "i", "]", "*", "preprocess", "(", "image_aug", ")", "\n", "\n", "", "mixed", "=", "(", "1", "-", "m", ")", "*", "preprocess", "(", "image", ")", "+", "m", "*", "mix", "\n", "return", "mixed", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.train": [[251, 315], ["net.train", "time.time", "enumerate", "optimizer.zero_grad", "F.cross_entropy.backward", "optimizer.step", "time.time", "time.time", "images.cuda.cuda", "targets.cuda.cuda", "net", "torch.cross_entropy", "imagenet.accuracy", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "targets.cuda.cuda", "net", "torch.split", "torch.split", "torch.split", "torch.cross_entropy", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "imagenet.accuracy", "time.time", "print", "images[].size", "torch.softmax", "torch.softmax", "torch.softmax", "float", "float", "float", "float", "float", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "len", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.train", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.accuracy", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.accuracy"], ["", "", "def", "train", "(", "net", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "  ", "\"\"\"Train for one epoch.\"\"\"", "\n", "net", ".", "train", "(", ")", "\n", "data_ema", "=", "0.", "\n", "batch_ema", "=", "0.", "\n", "loss_ema", "=", "0.", "\n", "acc1_ema", "=", "0.", "\n", "acc5_ema", "=", "0.", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# Compute data loading time", "\n", "    ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "no_jsd", ":", "\n", "      ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "logits", "=", "net", "(", "images", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "logits", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "# pylint: disable=unbalanced-tuple-unpacking", "\n", "", "else", ":", "\n", "      ", "images_all", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "logits_all", "=", "net", "(", "images_all", ")", "\n", "logits_clean", ",", "logits_aug1", ",", "logits_aug2", "=", "torch", ".", "split", "(", "\n", "logits_all", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Cross-entropy is only computed on clean images", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits_clean", ",", "targets", ")", "\n", "\n", "p_clean", ",", "p_aug1", ",", "p_aug2", "=", "F", ".", "softmax", "(", "\n", "logits_clean", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "\n", "logits_aug1", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "\n", "logits_aug2", ",", "dim", "=", "1", ")", "\n", "\n", "# Clamp mixture distribution to avoid exploding KL divergence", "\n", "p_mixture", "=", "torch", ".", "clamp", "(", "(", "p_clean", "+", "p_aug1", "+", "p_aug2", ")", "/", "3.", ",", "1e-7", ",", "1", ")", ".", "log", "(", ")", "\n", "loss", "+=", "12", "*", "(", "F", ".", "kl_div", "(", "p_mixture", ",", "p_clean", ",", "reduction", "=", "'batchmean'", ")", "+", "\n", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug1", ",", "reduction", "=", "'batchmean'", ")", "+", "\n", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug2", ",", "reduction", "=", "'batchmean'", ")", ")", "/", "3.", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "logits_clean", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "# pylint: disable=unbalanced-tuple-unpacking", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Compute batch computation time and update moving averages.", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "data_ema", "=", "data_ema", "*", "0.1", "+", "float", "(", "data_time", ")", "*", "0.9", "\n", "batch_ema", "=", "batch_ema", "*", "0.1", "+", "float", "(", "batch_time", ")", "*", "0.9", "\n", "loss_ema", "=", "loss_ema", "*", "0.1", "+", "float", "(", "loss", ")", "*", "0.9", "\n", "acc1_ema", "=", "acc1_ema", "*", "0.1", "+", "float", "(", "acc1", ")", "*", "0.9", "\n", "acc5_ema", "=", "acc5_ema", "*", "0.1", "+", "float", "(", "acc5", ")", "*", "0.9", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "      ", "print", "(", "\n", "'Batch {}/{}: Data Time {:.3f} | Batch Time {:.3f} | Train Loss {:.3f} | Train Acc1 '", "\n", "'{:.3f} | Train Acc5 {:.3f}'", ".", "format", "(", "i", ",", "len", "(", "train_loader", ")", ",", "data_ema", ",", "\n", "batch_ema", ",", "loss_ema", ",", "acc1_ema", ",", "\n", "acc5_ema", ")", ")", "\n", "\n", "", "", "return", "loss_ema", ",", "acc1_ema", ",", "batch_ema", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test": [[317, 333], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "torch.cross_entropy", "float", "pred.eq().sum().item", "len", "len", "images.cuda", "targets.cuda", "net.data.max", "pred.eq().sum", "pred.eq"], "function", ["None"], ["", "def", "test", "(", "net", ",", "test_loader", ")", ":", "\n", "  ", "\"\"\"Evaluate network on given dataset.\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "total_loss", "=", "0.", "\n", "total_correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "images", ",", "targets", "in", "test_loader", ":", "\n", "      ", "images", ",", "targets", "=", "images", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "logits", "=", "net", "(", "images", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "pred", "=", "logits", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "total_loss", "+=", "float", "(", "loss", ".", "data", ")", "\n", "total_correct", "+=", "pred", ".", "eq", "(", "targets", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "total_loss", "/", "len", "(", "test_loader", ".", "dataset", ")", ",", "total_correct", "/", "len", "(", "\n", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test_c": [[335, 359], ["print", "range", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "imagenet.test", "print", "str", "torchvision.datasets.ImageFolder", "corruption_accs[].append"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test"], ["", "def", "test_c", "(", "net", ",", "test_transform", ")", ":", "\n", "  ", "\"\"\"Evaluate network on given corrupted dataset.\"\"\"", "\n", "corruption_accs", "=", "{", "}", "\n", "for", "c", "in", "CORRUPTIONS", ":", "\n", "    ", "print", "(", "c", ")", "\n", "for", "s", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "      ", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "corrupted_data", ",", "c", ",", "str", "(", "s", ")", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "test_transform", ")", ",", "\n", "batch_size", "=", "args", ".", "eval_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "loss", ",", "acc1", "=", "test", "(", "net", ",", "val_loader", ")", "\n", "if", "c", "in", "corruption_accs", ":", "\n", "        ", "corruption_accs", "[", "c", "]", ".", "append", "(", "acc1", ")", "\n", "", "else", ":", "\n", "        ", "corruption_accs", "[", "c", "]", "=", "[", "acc1", "]", "\n", "\n", "", "print", "(", "'\\ts={}: Test Loss {:.3f} | Test Acc1 {:.3f}'", ".", "format", "(", "\n", "s", ",", "loss", ",", "100.", "*", "acc1", ")", ")", "\n", "\n", "", "", "return", "corruption_accs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.main": [[361, 490], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "torchvision.datasets.ImageFolder", "imagenet.AugMixDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "os.path.join", "print", "range", "imagenet.test_c", "print", "torchvision.datasets.ImageFolder", "print", "print", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "imagenet.test", "print", "imagenet.test_c", "print", "os.path.exists", "os.makedirs", "os.path.isdir", "Exception", "open", "f.write", "imagenet.adjust_learning_rate", "imagenet.train", "imagenet.test", "max", "os.path.join", "torch.save", "torch.save", "torch.save", "print", "print", "imagenet.compute_mce", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "imagenet.compute_mce", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "shutil.copyfile", "open", "f.write", "os.path.join", "map", "map"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test_c", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test_c", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.adjust_learning_rate", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.train", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.test", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.compute_mce", "home.repos.pwc.inspect_result.google-research_augmix.None.imagenet.compute_mce"], ["", "def", "main", "(", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "\n", "# Load datasets", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", ")", "\n", "preprocess", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "preprocess", ",", "\n", "]", ")", "\n", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "clean_data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "clean_data", ",", "'val'", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "traindir", ",", "train_transform", ")", "\n", "train_dataset", "=", "AugMixDataset", "(", "train_dataset", ",", "preprocess", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "test_transform", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "if", "args", ".", "pretrained", ":", "\n", "    ", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "net", "=", "models", ".", "__dict__", "[", "args", ".", "model", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "net", "=", "models", ".", "__dict__", "[", "args", ".", "model", "]", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "net", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "decay", ")", "\n", "\n", "# Distribute model across all visible GPUs", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "'Model restored from epoch:'", ",", "start_epoch", ")", "\n", "\n", "", "", "if", "args", ".", "evaluate", ":", "\n", "    ", "test_loss", ",", "test_acc1", "=", "test", "(", "net", ",", "val_loader", ")", "\n", "print", "(", "'Clean\\n\\tTest Loss {:.3f} | Test Acc1 {:.3f}'", ".", "format", "(", "\n", "test_loss", ",", "100", "*", "test_acc1", ")", ")", "\n", "\n", "corruption_accs", "=", "test_c", "(", "net", ",", "test_transform", ")", "\n", "for", "c", "in", "CORRUPTIONS", ":", "\n", "      ", "print", "(", "'\\t'", ".", "join", "(", "[", "c", "]", "+", "map", "(", "str", ",", "corruption_accs", "[", "c", "]", ")", ")", ")", "\n", "\n", "", "print", "(", "'mCE (normalized by AlexNet): '", ",", "compute_mce", "(", "corruption_accs", ")", ")", "\n", "return", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save", ")", ":", "\n", "    ", "raise", "Exception", "(", "'%s is not a dir'", "%", "args", ".", "save", ")", "\n", "\n", "", "log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "\n", "'imagenet_{}_training_log.csv'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "with", "open", "(", "log_path", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "\n", "'epoch,batch_time,train_loss,train_acc1(%),test_loss,test_acc1(%)\\n'", ")", "\n", "\n", "", "best_acc1", "=", "0", "\n", "print", "(", "'Beginning training from epoch:'", ",", "start_epoch", "+", "1", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "    ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss_ema", ",", "train_acc1_ema", ",", "batch_ema", "=", "train", "(", "net", ",", "train_loader", ",", "\n", "optimizer", ")", "\n", "test_loss", ",", "test_acc1", "=", "test", "(", "net", ",", "val_loader", ")", "\n", "\n", "is_best", "=", "test_acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "test_acc1", ",", "best_acc1", ")", "\n", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "args", ".", "model", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "save_path", ")", "\n", "if", "is_best", ":", "\n", "      ", "shutil", ".", "copyfile", "(", "save_path", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n", "", "with", "open", "(", "log_path", ",", "'a'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "'%03d,%0.3f,%0.6f,%0.2f,%0.5f,%0.2f\\n'", "%", "(", "\n", "(", "epoch", "+", "1", ")", ",", "\n", "batch_ema", ",", "\n", "train_loss_ema", ",", "\n", "100.", "*", "train_acc1_ema", ",", "\n", "test_loss", ",", "\n", "100.", "*", "test_acc1", ",", "\n", ")", ")", "\n", "\n", "", "print", "(", "\n", "'Epoch {:3d} | Train Loss {:.4f} | Test Loss {:.3f} | Test Acc1 '", "\n", "'{:.2f}'", "\n", ".", "format", "(", "(", "epoch", "+", "1", ")", ",", "train_loss_ema", ",", "test_loss", ",", "100.", "*", "test_acc1", ")", ")", "\n", "\n", "", "corruption_accs", "=", "test_c", "(", "net", ",", "test_transform", ")", "\n", "for", "c", "in", "CORRUPTIONS", ":", "\n", "    ", "print", "(", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "[", "c", "]", "+", "corruption_accs", "[", "c", "]", ")", ")", ")", "\n", "\n", "", "print", "(", "'mCE (normalized by AlexNet):'", ",", "compute_mce", "(", "corruption_accs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.int_parameter": [[24, 36], ["int"], "function", ["None"], ["def", "int_parameter", "(", "level", ",", "maxval", ")", ":", "\n", "  ", "\"\"\"Helper function to scale `val` between 0 and maxval .\n\n  Args:\n    level: Level of the operation that will be between [0, `PARAMETER_MAX`].\n    maxval: Maximum value that the operation can have. This will be scaled to\n      level/PARAMETER_MAX.\n\n  Returns:\n    An int that results from scaling `maxval` according to `level`.\n  \"\"\"", "\n", "return", "int", "(", "level", "*", "maxval", "/", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter": [[38, 50], ["float"], "function", ["None"], ["", "def", "float_parameter", "(", "level", ",", "maxval", ")", ":", "\n", "  ", "\"\"\"Helper function to scale `val` between 0 and maxval.\n\n  Args:\n    level: Level of the operation that will be between [0, `PARAMETER_MAX`].\n    maxval: Maximum value that the operation can have. This will be scaled to\n      level/PARAMETER_MAX.\n\n  Returns:\n    A float that results from scaling `maxval` according to `level`.\n  \"\"\"", "\n", "return", "float", "(", "level", ")", "*", "maxval", "/", "10.", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level": [[52, 54], ["numpy.random.uniform"], "function", ["None"], ["", "def", "sample_level", "(", "n", ")", ":", "\n", "  ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.1", ",", "high", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.autocontrast": [[56, 58], ["PIL.ImageOps.autocontrast"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.autocontrast"], ["", "def", "autocontrast", "(", "pil_img", ",", "_", ")", ":", "\n", "  ", "return", "ImageOps", ".", "autocontrast", "(", "pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.equalize": [[60, 62], ["PIL.ImageOps.equalize"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.equalize"], ["", "def", "equalize", "(", "pil_img", ",", "_", ")", ":", "\n", "  ", "return", "ImageOps", ".", "equalize", "(", "pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.posterize": [[64, 67], ["augmentations.int_parameter", "PIL.ImageOps.posterize", "augmentations.sample_level"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.int_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.posterize", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "posterize", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "4", ")", "\n", "return", "ImageOps", ".", "posterize", "(", "pil_img", ",", "4", "-", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.rotate": [[69, 74], ["augmentations.int_parameter", "pil_img.rotate", "augmentations.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.int_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.rotate", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "rotate", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "degrees", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "30", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "degrees", "=", "-", "degrees", "\n", "", "return", "pil_img", ".", "rotate", "(", "degrees", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.solarize": [[76, 79], ["augmentations.int_parameter", "PIL.ImageOps.solarize", "augmentations.sample_level"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.int_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.solarize", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "solarize", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "256", ")", "\n", "return", "ImageOps", ".", "solarize", "(", "pil_img", ",", "256", "-", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.shear_x": [[81, 88], ["augmentations.float_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "shear_x", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "0.3", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "level", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.shear_y": [[90, 97], ["augmentations.float_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "shear_y", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "0.3", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "level", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.translate_x": [[99, 106], ["augmentations.int_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.int_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "translate_x", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "IMAGE_SIZE", "/", "3", ")", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "level", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.translate_y": [[108, 115], ["augmentations.int_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.int_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "translate_y", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "IMAGE_SIZE", "/", "3", ")", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "level", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.color": [[118, 121], ["PIL.ImageEnhance.Color().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "color", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Color", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.contrast": [[124, 127], ["PIL.ImageEnhance.Contrast().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "contrast", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Contrast", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.brightness": [[130, 133], ["PIL.ImageEnhance.Brightness().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "brightness", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Brightness", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sharpness": [[136, 139], ["PIL.ImageEnhance.Sharpness().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.float_parameter", "home.repos.pwc.inspect_result.google-research_augmix.None.augmentations.sample_level"], ["", "def", "sharpness", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Sharpness", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.Bottleneck.__init__": [[11, 20], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__"], ["def", "__init__", "(", "self", ",", "n_channels", ",", "growth_rate", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "4", "*", "growth_rate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "n_channels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "n_channels", ",", "inter_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inter_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "inter_channels", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.Bottleneck.forward": [[21, 26], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.SingleLayer.__init__": [[31, 36], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__"], ["def", "__init__", "(", "self", ",", "n_channels", ",", "growth_rate", ")", ":", "\n", "    ", "super", "(", "SingleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "n_channels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "n_channels", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.SingleLayer.forward": [[37, 41], ["densenet.SingleLayer.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "densenet.SingleLayer.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.Transition.__init__": [[46, 51], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__"], ["def", "__init__", "(", "self", ",", "n_channels", ",", "n_out_channels", ")", ":", "\n", "    ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "n_channels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "n_channels", ",", "n_out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.Transition.forward": [[52, 56], ["densenet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.DenseNet.__init__": [[61, 102], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense", "int", "densenet.Transition", "densenet.DenseNet._make_dense", "int", "densenet.Transition", "densenet.DenseNet._make_dense", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "int", "int", "math.floor", "math.floor", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__", "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.DenseNet._make_dense", "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.DenseNet._make_dense", "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.DenseNet._make_dense"], ["def", "__init__", "(", "self", ",", "growth_rate", ",", "depth", ",", "reduction", ",", "n_classes", ",", "bottleneck", ")", ":", "\n", "    ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bottleneck", ":", "\n", "      ", "n_dense_blocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "", "else", ":", "\n", "      ", "n_dense_blocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "3", ")", "\n", "\n", "", "n_channels", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "n_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense", "(", "n_channels", ",", "growth_rate", ",", "n_dense_blocks", ",", "\n", "bottleneck", ")", "\n", "n_channels", "+=", "n_dense_blocks", "*", "growth_rate", "\n", "n_out_channels", "=", "int", "(", "math", ".", "floor", "(", "n_channels", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "n_channels", ",", "n_out_channels", ")", "\n", "\n", "n_channels", "=", "n_out_channels", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense", "(", "n_channels", ",", "growth_rate", ",", "n_dense_blocks", ",", "\n", "bottleneck", ")", "\n", "n_channels", "+=", "n_dense_blocks", "*", "growth_rate", "\n", "n_out_channels", "=", "int", "(", "math", ".", "floor", "(", "n_channels", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "n_channels", ",", "n_out_channels", ")", "\n", "\n", "n_channels", "=", "n_out_channels", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense", "(", "n_channels", ",", "growth_rate", ",", "n_dense_blocks", ",", "\n", "bottleneck", ")", "\n", "n_channels", "+=", "n_dense_blocks", "*", "growth_rate", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "n_channels", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_channels", ",", "n_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.DenseNet._make_dense": [[103, 112], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "layers.append", "densenet.Bottleneck", "densenet.SingleLayer"], "methods", ["None"], ["", "", "", "def", "_make_dense", "(", "self", ",", "n_channels", ",", "growth_rate", ",", "n_dense_blocks", ",", "bottleneck", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "int", "(", "n_dense_blocks", ")", ")", ":", "\n", "      ", "if", "bottleneck", ":", "\n", "        ", "layers", ".", "append", "(", "Bottleneck", "(", "n_channels", ",", "growth_rate", ")", ")", "\n", "", "else", ":", "\n", "        ", "layers", ".", "append", "(", "SingleLayer", "(", "n_channels", ",", "growth_rate", ")", ")", "\n", "", "n_channels", "+=", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.DenseNet.forward": [[113, 121], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.dense3", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "densenet.DenseNet.fc", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense3", "(", "out", ")", "\n", "out", "=", "torch", ".", "squeeze", "(", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", ",", "8", ")", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.densenet.densenet": [[123, 126], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "densenet", "(", "growth_rate", "=", "12", ",", "depth", "=", "40", ",", "num_classes", "=", "10", ")", ":", "\n", "  ", "model", "=", "DenseNet", "(", "growth_rate", ",", "depth", ",", "1.", ",", "num_classes", ",", "False", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.ResNeXtBottleneck.__init__": [[12, 52], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "math.floor"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "cardinality", ",", "\n", "base_width", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "dim", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", ")", "\n", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "\n", "dim", "*", "cardinality", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "dim", "*", "cardinality", ")", "\n", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "\n", "dim", "*", "cardinality", ",", "\n", "dim", "*", "cardinality", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "dim", "*", "cardinality", ")", "\n", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "\n", "dim", "*", "cardinality", ",", "\n", "planes", "*", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.ResNeXtBottleneck.forward": [[53, 69], ["resnext.ResNeXtBottleneck.conv_reduce", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.conv_conv", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.conv_expand", "resnext.ResNeXtBottleneck.bn_expand", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.bn_reduce", "resnext.ResNeXtBottleneck.bn", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "bottleneck", "=", "self", ".", "conv_reduce", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "bottleneck", "=", "self", ".", "conv_conv", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "bottleneck", "=", "self", ".", "conv_expand", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.CifarResNeXt.__init__": [[74, 105], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.CifarResNeXt._make_layer", "resnext.CifarResNeXt._make_layer", "resnext.CifarResNeXt._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnext.CifarResNeXt.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__", "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "depth", ",", "cardinality", ",", "base_width", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 29, 38, 47, 56, 101'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "256", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.CifarResNeXt._make_layer": [[106, 129], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "cardinality", ",", "self", ".", "base_width", ",", "stride", ",", "\n", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "cardinality", ",", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.CifarResNeXt.forward": [[130, 139], ["resnext.CifarResNeXt.conv_1_3x3", "torch.relu", "torch.relu", "resnext.CifarResNeXt.stage_1", "resnext.CifarResNeXt.stage_2", "resnext.CifarResNeXt.stage_3", "resnext.CifarResNeXt.avgpool", "x.view.view.view", "resnext.CifarResNeXt.classifier", "resnext.CifarResNeXt.bn_1", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.models.resnext.resnext29": [[141, 145], ["resnext.CifarResNeXt"], "function", ["None"], ["", "", "def", "resnext29", "(", "num_classes", "=", "10", ",", "cardinality", "=", "4", ",", "base_width", "=", "32", ")", ":", "\n", "  ", "model", "=", "CifarResNeXt", "(", "ResNeXtBottleneck", ",", "29", ",", "cardinality", ",", "base_width", ",", "\n", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.BasicBlock.__init__": [[11, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "drop_rate", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "is_in_equal_out", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "conv_shortcut", "=", "(", "not", "self", ".", "is_in_equal_out", ")", "and", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.BasicBlock.forward": [[36, 52], ["wideresnet.BasicBlock.conv2", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.relu2", "wideresnet.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.bn2", "wideresnet.BasicBlock.bn2", "wideresnet.BasicBlock.conv_shortcut", "wideresnet.BasicBlock.conv1", "wideresnet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_in_equal_out", ":", "\n", "      ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "is_in_equal_out", ":", "\n", "      ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "      ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "is_in_equal_out", ":", "\n", "      ", "return", "torch", ".", "add", "(", "self", ".", "conv_shortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "      ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock.__init__": [[57, 67], ["torch.Module.__init__", "wideresnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__", "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "nb_layers", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "block", ",", "\n", "stride", ",", "\n", "drop_rate", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "\n", "stride", ",", "drop_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock._make_layer": [[68, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "\n", "drop_rate", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "\n", "i", "==", "0", "and", "stride", "or", "1", ",", "drop_rate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.NetworkBlock.forward": [[77, 79], ["wideresnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.WideResNet.__init__": [[84, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__"], ["def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "drop_rate", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_channels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "n_channels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "n_channels", "[", "0", "]", ",", "n_channels", "[", "1", "]", ",", "block", ",", "1", ",", "\n", "drop_rate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "n_channels", "[", "1", "]", ",", "n_channels", "[", "2", "]", ",", "block", ",", "2", ",", "\n", "drop_rate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "n_channels", "[", "2", "]", ",", "n_channels", "[", "3", "]", ",", "block", ",", "2", ",", "\n", "drop_rate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "n_channels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_channels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.WideResNet_pytorch.wideresnet.WideResNet.forward": [[118, 127], ["wideresnet.WideResNet.conv1", "wideresnet.WideResNet.block1", "wideresnet.WideResNet.block2", "wideresnet.WideResNet.block3", "wideresnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnet.WideResNet.fc", "wideresnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "n_channels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.GELU.forward": [[23, 25], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "1.702", "*", "x", ")", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__": [[52, 72], ["torch.Module.__init__", "allconv.make_layers", "torch.Linear", "torch.Linear", "allconv.AllConvNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.__init__", "home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "AllConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "width1", ",", "w1", "=", "96", ",", "96", "\n", "self", ".", "width2", ",", "w2", "=", "192", ",", "192", "\n", "\n", "self", ".", "features", "=", "make_layers", "(", "\n", "[", "w1", ",", "w1", ",", "w1", ",", "'Md'", ",", "w2", ",", "w2", ",", "w2", ",", "'Md'", ",", "'nopad'", ",", "'NIN'", ",", "'NIN'", ",", "'A'", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "width2", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "# He initialization", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.AllConvNet.forward": [[73, 78], ["allconv.AllConvNet.features", "allconv.AllConvNet.view", "allconv.AllConvNet.classifier", "allconv.AllConvNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_augmix.cifar.allconv.make_layers": [[27, 47], ["torch.Sequential", "torch.MaxPool2d", "torch.Dropout", "torch.AvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "allconv.GELU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "allconv.GELU", "torch.BatchNorm2d", "allconv.GELU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ")", ":", "\n", "  ", "\"\"\"Create a single layer.\"\"\"", "\n", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "    ", "if", "v", "==", "'Md'", ":", "\n", "      ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "]", "\n", "", "elif", "v", "==", "'A'", ":", "\n", "      ", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "8", ")", "]", "\n", "", "elif", "v", "==", "'NIN'", ":", "\n", "      ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "1", ")", "\n", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "GELU", "(", ")", "]", "\n", "", "elif", "v", "==", "'nopad'", ":", "\n", "      ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", "\n", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "GELU", "(", ")", "]", "\n", "", "else", ":", "\n", "      ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "GELU", "(", ")", "]", "\n", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]]}