{"home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.SW_Faster_ICR_CCR._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.SW_Faster_ICR_CCR.da_train_net.sampler.__init__": [[234, 245], ["int", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_data", "=", "train_size", "\n", "self", ".", "num_per_batch", "=", "int", "(", "train_size", "/", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "range", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", ".", "view", "(", "1", ",", "batch_size", ")", ".", "long", "(", ")", "\n", "self", ".", "leftover_flag", "=", "False", "\n", "if", "train_size", "%", "batch_size", ":", "\n", "            ", "self", ".", "leftover", "=", "torch", ".", "arange", "(", "\n", "self", ".", "num_per_batch", "*", "batch_size", ",", "train_size", "\n", ")", ".", "long", "(", ")", "\n", "self", ".", "leftover_flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.SW_Faster_ICR_CCR.da_train_net.sampler.__iter__": [[246, 258], ["da_train_net.sampler.rand_num.view", "iter", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "rand_num.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "rand_num", "=", "torch", ".", "randperm", "(", "self", ".", "num_per_batch", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "self", ".", "batch_size", "\n", "self", ".", "rand_num", "=", "(", "\n", "rand_num", ".", "expand", "(", "self", ".", "num_per_batch", ",", "self", ".", "batch_size", ")", "+", "self", ".", "range", "\n", ")", "\n", "\n", "self", ".", "rand_num_view", "=", "self", ".", "rand_num", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "leftover_flag", ":", "\n", "            ", "self", ".", "rand_num_view", "=", "torch", ".", "cat", "(", "(", "self", ".", "rand_num_view", ",", "self", ".", "leftover", ")", ",", "0", ")", "\n", "\n", "", "return", "iter", "(", "self", ".", "rand_num_view", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.SW_Faster_ICR_CCR.da_train_net.sampler.__len__": [[259, 261], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.SW_Faster_ICR_CCR.da_train_net.parse_args": [[42, 231], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n  Parse input arguments    \n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train a Fast R-CNN network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "dest", "=", "\"dataset\"", ",", "\n", "help", "=", "\"training dataset\"", ",", "\n", "default", "=", "\"cityscape\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--net\"", ",", "dest", "=", "\"net\"", ",", "help", "=", "\"vgg16, res101\"", ",", "default", "=", "\"vgg16\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained_path\"", ",", "\n", "dest", "=", "\"pretrained_path\"", ",", "\n", "help", "=", "\"vgg16, res101\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint_interval\"", ",", "\n", "dest", "=", "\"checkpoint_interval\"", ",", "\n", "help", "=", "\"number of iterations to save checkpoint\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_dir\"", ",", "\n", "dest", "=", "\"save_dir\"", ",", "\n", "help", "=", "\"directory to save models\"", ",", "\n", "default", "=", "\" \"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nw\"", ",", "\n", "dest", "=", "\"num_workers\"", ",", "\n", "help", "=", "\"number of worker to load data\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cuda\"", ",", "dest", "=", "\"cuda\"", ",", "help", "=", "\"whether use CUDA\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ls\"", ",", "\n", "dest", "=", "\"large_scale\"", ",", "\n", "help", "=", "\"whether use large imag scale\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bs\"", ",", "dest", "=", "\"batch_size\"", ",", "help", "=", "\"batch_size\"", ",", "default", "=", "1", ",", "type", "=", "int", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cag\"", ",", "\n", "dest", "=", "\"class_agnostic\"", ",", "\n", "help", "=", "\"whether perform class_agnostic bbox regression\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "\n", "# config optimization", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_iter\"", ",", "\n", "dest", "=", "\"max_iter\"", ",", "\n", "help", "=", "\"max iteration for train\"", ",", "\n", "default", "=", "10000", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--o\"", ",", "dest", "=", "\"optimizer\"", ",", "help", "=", "\"training optimizer\"", ",", "default", "=", "\"sgd\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "dest", "=", "\"lr\"", ",", "help", "=", "\"starting learning rate\"", ",", "default", "=", "0.001", ",", "type", "=", "float", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_decay_step\"", ",", "\n", "dest", "=", "\"lr_decay_step\"", ",", "\n", "help", "=", "\"step to do learning rate decay, unit is iter\"", ",", "\n", "default", "=", "5", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_decay_gamma\"", ",", "\n", "dest", "=", "\"lr_decay_gamma\"", ",", "\n", "help", "=", "\"learning rate decay ratio\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lamda\"", ",", "dest", "=", "\"lamda\"", ",", "help", "=", "\"DA loss param\"", ",", "default", "=", "0.1", ",", "type", "=", "float", "\n", ")", "\n", "\n", "# set training session", "\n", "parser", ".", "add_argument", "(", "\n", "\"--s\"", ",", "dest", "=", "\"session\"", ",", "help", "=", "\"training session\"", ",", "default", "=", "1", ",", "type", "=", "int", "\n", ")", "\n", "\n", "# resume trained model", "\n", "parser", ".", "add_argument", "(", "\n", "\"--r\"", ",", "dest", "=", "\"resume\"", ",", "help", "=", "\"resume checkpoint or not\"", ",", "default", "=", "False", ",", "type", "=", "bool", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume_name\"", ",", "\n", "dest", "=", "\"resume_name\"", ",", "\n", "help", "=", "\"resume checkpoint path\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_name\"", ",", "\n", "dest", "=", "\"model_name\"", ",", "\n", "help", "=", "\"resume from which model\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "# setting display config", "\n", "parser", ".", "add_argument", "(", "\n", "\"--disp_interval\"", ",", "\n", "dest", "=", "\"disp_interval\"", ",", "\n", "help", "=", "\"number of iterations to display\"", ",", "\n", "default", "=", "100", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lc\"", ",", "\n", "dest", "=", "\"lc\"", ",", "\n", "help", "=", "\"whether use context vector for pixel level\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gc\"", ",", "\n", "dest", "=", "\"gc\"", ",", "\n", "help", "=", "\"whether use context vector for global level\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--da_use_contex\"", ",", "\n", "dest", "=", "\"da_use_contex\"", ",", "\n", "help", "=", "\"whether use context vector for instance da\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ef\"", ",", "\n", "dest", "=", "\"ef\"", ",", "\n", "help", "=", "\"whether use exponential focal loss\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gamma\"", ",", "dest", "=", "\"gamma\"", ",", "help", "=", "\"value of gamma\"", ",", "default", "=", "5", ",", "type", "=", "float", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_epochs\"", ",", "\n", "dest", "=", "\"max_epochs\"", ",", "\n", "help", "=", "\"max epoch for train\"", ",", "\n", "default", "=", "7", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start_epoch\"", ",", "dest", "=", "\"start_epoch\"", ",", "help", "=", "\"starting epoch\"", ",", "default", "=", "1", ",", "type", "=", "int", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eta\"", ",", "\n", "dest", "=", "\"eta\"", ",", "\n", "help", "=", "\"trade-off parameter between detection loss and domain-alignment loss.\"", "\n", "\" Used for Car datasets\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--instance_da_eta\"", ",", "\n", "dest", "=", "\"instance_da_eta\"", ",", "\n", "help", "=", "\"instance_da_eta\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--da_weight\"", ",", "dest", "=", "\"da_weight\"", ",", "help", "=", "\"da_weight\"", ",", "default", "=", "1.0", ",", "type", "=", "float", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.lib.setup.get_extensions": [[15, 55], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "os.path.join", "extension"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"model\"", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"model._C\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roibatchLoader.roibatchLoader.__init__": [[16, 57], ["len", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "int", "range", "numpy.ceil", "min", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "roidb", ",", "\n", "ratio_list", ",", "\n", "ratio_index", ",", "\n", "batch_size", ",", "\n", "num_classes", ",", "\n", "training", "=", "True", ",", "\n", "normalize", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_roidb", "=", "roidb", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "# we make the height of image consistent to trim_height, trim_width", "\n", "self", ".", "trim_height", "=", "cfg", ".", "TRAIN", ".", "TRIM_HEIGHT", "\n", "self", ".", "trim_width", "=", "cfg", ".", "TRAIN", ".", "TRIM_WIDTH", "\n", "self", ".", "max_num_box", "=", "cfg", ".", "MAX_NUM_GT_BOXES", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "ratio_list", "=", "ratio_list", "\n", "self", ".", "ratio_index", "=", "ratio_index", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_size", "=", "len", "(", "self", ".", "ratio_list", ")", "\n", "\n", "# given the ratio_list, we want to make the ratio same for each batch.", "\n", "self", ".", "ratio_list_batch", "=", "torch", ".", "Tensor", "(", "self", ".", "data_size", ")", ".", "zero_", "(", ")", "\n", "num_batch", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "ratio_index", ")", "/", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "left_idx", "=", "i", "*", "batch_size", "\n", "right_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", "-", "1", ",", "self", ".", "data_size", "-", "1", ")", "\n", "\n", "if", "ratio_list", "[", "right_idx", "]", "<", "1", ":", "\n", "# for ratio < 1, we preserve the leftmost in each batch.", "\n", "                ", "target_ratio", "=", "ratio_list", "[", "left_idx", "]", "\n", "", "elif", "ratio_list", "[", "left_idx", "]", ">", "1", ":", "\n", "# for ratio > 1, we preserve the rightmost in each batch.", "\n", "                ", "target_ratio", "=", "ratio_list", "[", "right_idx", "]", "\n", "", "else", ":", "\n", "# for ratio cross 1, we make it to be 1.", "\n", "                ", "target_ratio", "=", "1", "\n", "\n", "", "self", ".", "ratio_list_batch", "[", "left_idx", ":", "(", "right_idx", "+", "1", ")", "]", "=", "target_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roibatchLoader.roibatchLoader.__getitem__": [[58, 222], ["roi_data_layer.minibatch.get_minibatch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "data.permute().contiguous().view.permute().contiguous().view.size", "data.permute().contiguous().view.permute().contiguous().view.size", "numpy.random.shuffle", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.permute().contiguous", "torch.FloatTensor().zero_.permute().contiguous", "im_info.view.view.view", "data.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "im_info.view.view.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "int", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.size", "torch.FloatTensor().zero_.size", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "min", "int", "int", "int", "gt_boxes[].clamp_", "gt_boxes[].clamp_", "int", "int", "int", "gt_boxes[].clamp_", "gt_boxes[].clamp_", "numpy.floor", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.size", "torch.FloatTensor().zero_.size", "min", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "gt_boxes[].clamp_", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor().zero_.permute", "torch.FloatTensor().zero_.permute", "data.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.floor", "float", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.ceil", "float", "float", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "max", "min", "int", "max", "min", "int", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "data.permute().contiguous().view.permute().contiguous().view.permute", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.ceil", "int", "range", "range", "range", "range", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.minibatch.get_minibatch"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "index_ratio", "=", "int", "(", "self", ".", "ratio_index", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "index_ratio", "=", "index", "\n", "\n", "# get the anchor index for current sample index", "\n", "# here we set the anchor index to the last one", "\n", "# sample in this group", "\n", "", "minibatch_db", "=", "[", "self", ".", "_roidb", "[", "index_ratio", "]", "]", "\n", "blobs", "=", "get_minibatch", "(", "minibatch_db", ",", "self", ".", "_num_classes", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "\"data\"", "]", ")", "\n", "im_info", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "\"im_info\"", "]", ")", "\n", "# we need to random shuffle the bounding box.", "\n", "data_height", ",", "data_width", "=", "data", ".", "size", "(", "1", ")", ",", "data", ".", "size", "(", "2", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "blobs", "[", "\"gt_boxes\"", "]", ")", "\n", "gt_boxes", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "\"gt_boxes\"", "]", ")", "\n", "\n", "########################################################", "\n", "# padding the input image to fixed size for each group #", "\n", "########################################################", "\n", "\n", "# NOTE1: need to cope with the case where a group cover both conditions. (done)", "\n", "# NOTE2: need to consider the situation for the tail samples. (no worry)", "\n", "# NOTE3: need to implement a parallel data loader. (no worry)", "\n", "# get the index range", "\n", "\n", "# if the image need to crop, crop to the target size.", "\n", "ratio", "=", "self", ".", "ratio_list_batch", "[", "index", "]", "\n", "\n", "if", "self", ".", "_roidb", "[", "index_ratio", "]", "[", "\"need_crop\"", "]", ":", "\n", "                ", "if", "ratio", "<", "1", ":", "\n", "# this means that data_width << data_height, we need to crop the", "\n", "# data_height", "\n", "                    ", "min_y", "=", "int", "(", "torch", ".", "min", "(", "gt_boxes", "[", ":", ",", "1", "]", ")", ")", "\n", "max_y", "=", "int", "(", "torch", ".", "max", "(", "gt_boxes", "[", ":", ",", "3", "]", ")", ")", "\n", "trim_size", "=", "int", "(", "np", ".", "floor", "(", "data_width", "/", "ratio", ")", ")", "\n", "if", "trim_size", ">", "data_height", ":", "\n", "                        ", "trim_size", "=", "data_height", "\n", "", "box_region", "=", "max_y", "-", "min_y", "+", "1", "\n", "if", "min_y", "==", "0", ":", "\n", "                        ", "y_s", "=", "0", "\n", "", "else", ":", "\n", "                        ", "if", "(", "box_region", "-", "trim_size", ")", "<", "0", ":", "\n", "                            ", "y_s_min", "=", "max", "(", "max_y", "-", "trim_size", ",", "0", ")", "\n", "y_s_max", "=", "min", "(", "min_y", ",", "data_height", "-", "trim_size", ")", "\n", "if", "y_s_min", "==", "y_s_max", ":", "\n", "                                ", "y_s", "=", "y_s_min", "\n", "", "else", ":", "\n", "                                ", "y_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "y_s_min", ",", "y_s_max", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "y_s_add", "=", "int", "(", "(", "box_region", "-", "trim_size", ")", "/", "2", ")", "\n", "if", "y_s_add", "==", "0", ":", "\n", "                                ", "y_s", "=", "min_y", "\n", "", "else", ":", "\n", "                                ", "y_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min_y", ",", "min_y", "+", "y_s_add", ")", ")", "\n", "# crop the image", "\n", "", "", "", "data", "=", "data", "[", ":", ",", "y_s", ":", "(", "y_s", "+", "trim_size", ")", ",", ":", ",", ":", "]", "\n", "\n", "# shift y coordiante of gt_boxes", "\n", "gt_boxes", "[", ":", ",", "1", "]", "=", "gt_boxes", "[", ":", ",", "1", "]", "-", "float", "(", "y_s", ")", "\n", "gt_boxes", "[", ":", ",", "3", "]", "=", "gt_boxes", "[", ":", ",", "3", "]", "-", "float", "(", "y_s", ")", "\n", "\n", "# update gt bounding box according the trip", "\n", "gt_boxes", "[", ":", ",", "1", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "gt_boxes", "[", ":", ",", "3", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "# this means that data_width >> data_height, we need to crop the", "\n", "# data_width", "\n", "                    ", "min_x", "=", "int", "(", "torch", ".", "min", "(", "gt_boxes", "[", ":", ",", "0", "]", ")", ")", "\n", "max_x", "=", "int", "(", "torch", ".", "max", "(", "gt_boxes", "[", ":", ",", "2", "]", ")", ")", "\n", "trim_size", "=", "int", "(", "np", ".", "ceil", "(", "data_height", "*", "ratio", ")", ")", "\n", "if", "trim_size", ">", "data_width", ":", "\n", "                        ", "trim_size", "=", "data_width", "\n", "", "box_region", "=", "max_x", "-", "min_x", "+", "1", "\n", "if", "min_x", "==", "0", ":", "\n", "                        ", "x_s", "=", "0", "\n", "", "else", ":", "\n", "                        ", "if", "(", "box_region", "-", "trim_size", ")", "<", "0", ":", "\n", "                            ", "x_s_min", "=", "max", "(", "max_x", "-", "trim_size", ",", "0", ")", "\n", "x_s_max", "=", "min", "(", "min_x", ",", "data_width", "-", "trim_size", ")", "\n", "if", "x_s_min", "==", "x_s_max", ":", "\n", "                                ", "x_s", "=", "x_s_min", "\n", "", "else", ":", "\n", "                                ", "x_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "x_s_min", ",", "x_s_max", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "x_s_add", "=", "int", "(", "(", "box_region", "-", "trim_size", ")", "/", "2", ")", "\n", "if", "x_s_add", "==", "0", ":", "\n", "                                ", "x_s", "=", "min_x", "\n", "", "else", ":", "\n", "                                ", "x_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min_x", ",", "min_x", "+", "x_s_add", ")", ")", "\n", "# crop the image", "\n", "", "", "", "data", "=", "data", "[", ":", ",", ":", ",", "x_s", ":", "(", "x_s", "+", "trim_size", ")", ",", ":", "]", "\n", "\n", "# shift x coordiante of gt_boxes", "\n", "gt_boxes", "[", ":", ",", "0", "]", "=", "gt_boxes", "[", ":", ",", "0", "]", "-", "float", "(", "x_s", ")", "\n", "gt_boxes", "[", ":", ",", "2", "]", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "float", "(", "x_s", ")", "\n", "# update gt bounding box according the trip", "\n", "gt_boxes", "[", ":", ",", "0", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "gt_boxes", "[", ":", ",", "2", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "\n", "# based on the ratio, padding the image.", "\n", "", "", "if", "ratio", "<", "1", ":", "\n", "# this means that data_width < data_height", "\n", "                ", "trim_size", "=", "int", "(", "np", ".", "floor", "(", "data_width", "/", "ratio", ")", ")", "\n", "\n", "padding_data", "=", "torch", ".", "FloatTensor", "(", "\n", "int", "(", "np", ".", "ceil", "(", "data_width", "/", "ratio", ")", ")", ",", "data_width", ",", "3", "\n", ")", ".", "zero_", "(", ")", "\n", "\n", "padding_data", "[", ":", "data_height", ",", ":", ",", ":", "]", "=", "data", "[", "0", "]", "\n", "# update im_info", "\n", "im_info", "[", "0", ",", "0", "]", "=", "padding_data", ".", "size", "(", "0", ")", "\n", "# print(\"height %d %d \\n\" %(index, anchor_idx))", "\n", "", "elif", "ratio", ">", "1", ":", "\n", "# this means that data_width > data_height", "\n", "# if the image need to crop.", "\n", "                ", "padding_data", "=", "torch", ".", "FloatTensor", "(", "\n", "data_height", ",", "int", "(", "np", ".", "ceil", "(", "data_height", "*", "ratio", ")", ")", ",", "3", "\n", ")", ".", "zero_", "(", ")", "\n", "padding_data", "[", ":", ",", ":", "data_width", ",", ":", "]", "=", "data", "[", "0", "]", "\n", "im_info", "[", "0", ",", "1", "]", "=", "padding_data", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "trim_size", "=", "min", "(", "data_height", ",", "data_width", ")", "\n", "padding_data", "=", "torch", ".", "FloatTensor", "(", "trim_size", ",", "trim_size", ",", "3", ")", ".", "zero_", "(", ")", "\n", "padding_data", "=", "data", "[", "0", "]", "[", ":", "trim_size", ",", ":", "trim_size", ",", ":", "]", "\n", "# gt_boxes.clamp_(0, trim_size)", "\n", "gt_boxes", "[", ":", ",", ":", "4", "]", ".", "clamp_", "(", "0", ",", "trim_size", ")", "\n", "im_info", "[", "0", ",", "0", "]", "=", "trim_size", "\n", "im_info", "[", "0", ",", "1", "]", "=", "trim_size", "\n", "\n", "# check the bounding box:", "\n", "", "not_keep", "=", "(", "gt_boxes", "[", ":", ",", "0", "]", "==", "gt_boxes", "[", ":", ",", "2", "]", ")", "|", "(", "\n", "gt_boxes", "[", ":", ",", "1", "]", "==", "gt_boxes", "[", ":", ",", "3", "]", "\n", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "not_keep", "==", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "gt_boxes_padding", "=", "torch", ".", "FloatTensor", "(", "\n", "self", ".", "max_num_box", ",", "gt_boxes", ".", "size", "(", "1", ")", "\n", ")", ".", "zero_", "(", ")", "\n", "if", "keep", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                ", "gt_boxes", "=", "gt_boxes", "[", "keep", "]", "\n", "num_boxes", "=", "min", "(", "gt_boxes", ".", "size", "(", "0", ")", ",", "self", ".", "max_num_box", ")", "\n", "gt_boxes_padding", "[", ":", "num_boxes", ",", ":", "]", "=", "gt_boxes", "[", ":", "num_boxes", "]", "\n", "", "else", ":", "\n", "                ", "num_boxes", "=", "0", "\n", "\n", "# permute trim_data to adapt to downstream processing", "\n", "", "padding_data", "=", "padding_data", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "im_info", "=", "im_info", ".", "view", "(", "3", ")", "\n", "\n", "return", "padding_data", ",", "im_info", ",", "gt_boxes_padding", ",", "num_boxes", "\n", "", "else", ":", "\n", "            ", "data", "=", "(", "\n", "data", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "data_height", ",", "data_width", ")", "\n", ")", "\n", "im_info", "=", "im_info", ".", "view", "(", "3", ")", "\n", "\n", "gt_boxes", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "num_boxes", "=", "0", "\n", "\n", "return", "data", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roibatchLoader.roibatchLoader.__len__": [[223, 225], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_roidb", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.minibatch.get_minibatch": [[19, 59], ["len", "numpy.randint", "minibatch._get_image_blob", "numpy.empty", "numpy.array", "len", "len", "len", "numpy.where", "numpy.where", "len", "numpy.all", "[].toarray"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.minibatch._get_image_blob"], ["def", "get_minibatch", "(", "roidb", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Given a roidb, construct a minibatch sampled from it.\"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "# Sample random scales to use for each image in this batch", "\n", "random_scale_inds", "=", "npr", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ",", "size", "=", "num_images", ")", "\n", "assert", "(", "\n", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "%", "num_images", "==", "0", "\n", ")", ",", "\"num_images ({}) must divide BATCH_SIZE ({})\"", ".", "format", "(", "\n", "num_images", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", ")", "\n", "\n", "# Get the input image blob, formatted for caffe", "\n", "im_blob", ",", "im_scales", "=", "_get_image_blob", "(", "roidb", ",", "random_scale_inds", ")", "\n", "\n", "blobs", "=", "{", "\"data\"", ":", "im_blob", "}", "\n", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Single batch only\"", "\n", "assert", "len", "(", "roidb", ")", "==", "1", ",", "\"Single batch only\"", "\n", "\n", "# gt boxes: (x1, y1, x2, y2, cls)", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_ALL_GT", ":", "\n", "# Include all ground truth boxes", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "0", "]", "[", "\"gt_classes\"", "]", "!=", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# For the COCO ground truth boxes, exclude the ones that are ''iscrowd''", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "\n", "(", "roidb", "[", "0", "]", "[", "\"gt_classes\"", "]", "!=", "0", ")", "\n", "&", "np", ".", "all", "(", "roidb", "[", "0", "]", "[", "\"gt_overlaps\"", "]", ".", "toarray", "(", ")", ">", "-", "1.0", ",", "axis", "=", "1", ")", "\n", ")", "[", "0", "]", "\n", "", "gt_boxes", "=", "np", ".", "empty", "(", "(", "len", "(", "gt_inds", ")", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_boxes", "[", ":", ",", "0", ":", "4", "]", "=", "roidb", "[", "0", "]", "[", "\"boxes\"", "]", "[", "gt_inds", ",", ":", "]", "*", "im_scales", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "4", "]", "=", "roidb", "[", "0", "]", "[", "\"gt_classes\"", "]", "[", "gt_inds", "]", "\n", "blobs", "[", "\"gt_boxes\"", "]", "=", "gt_boxes", "\n", "blobs", "[", "\"im_info\"", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "im_blob", ".", "shape", "[", "1", "]", ",", "im_blob", ".", "shape", "[", "2", "]", ",", "im_scales", "[", "0", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "blobs", "[", "\"img_id\"", "]", "=", "roidb", "[", "0", "]", "[", "\"img_id\"", "]", "\n", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.minibatch._get_image_blob": [[61, 93], ["len", "range", "model.utils.blob.im_list_to_blob", "cv2.imread", "model.utils.blob.prep_im_for_blob", "im_scales.append", "processed_ims.append", "len", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.blob.im_list_to_blob", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.blob.prep_im_for_blob"], ["", "def", "_get_image_blob", "(", "roidb", ",", "scale_inds", ")", ":", "\n", "    ", "\"\"\"Builds an input blob from the images in the roidb at the specified\n  scales.\n  \"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "\n", "processed_ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "roidb", "[", "i", "]", "[", "\"image\"", "]", ")", "\n", "# im = imread(roidb[i][\"image\"])", "\n", "\n", "if", "len", "(", "im", ".", "shape", ")", "==", "2", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "im", "=", "np", ".", "concatenate", "(", "(", "im", ",", "im", ",", "im", ")", ",", "axis", "=", "2", ")", "\n", "# flip the channel, since the original one using cv2", "\n", "# rgb -> bgr", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "roidb", "[", "i", "]", "[", "\"flipped\"", "]", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "target_size", "=", "cfg", ".", "TRAIN", ".", "SCALES", "[", "scale_inds", "[", "i", "]", "]", "\n", "im", ",", "im_scale", "=", "prep_im_for_blob", "(", "\n", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "target_size", ",", "cfg", ".", "TRAIN", ".", "MAX_SIZE", "\n", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_scales", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roidb.prepare_roidb": [[11, 50], ["range", "len", "imdb.image_id_at", "imdb.image_path_at", "[].toarray", "[].toarray.max", "[].toarray.argmax", "all", "all", "imdb.name.startswith", "imdb.name.startswith", "numpy.where", "numpy.where", "PIL.Image.open", "range", "imdb.image_path_at"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_id_at", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at"], ["def", "prepare_roidb", "(", "imdb", ")", ":", "\n", "    ", "\"\"\"Enrich the imdb's roidb by adding some derived quantities that\n  are useful for training. This function precomputes the maximum\n  overlap, taken over ground-truth boxes, between each ROI and\n  each ground-truth box. The class with maximum overlap is also\n  recorded.\n  \"\"\"", "\n", "\n", "roidb", "=", "imdb", ".", "roidb", "\n", "if", "(", "\n", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "\"coco\"", ")", ")", "\n", "or", "\"car\"", "in", "imdb", ".", "name", "\n", "or", "\"sim10k\"", "in", "imdb", ".", "name", "\n", ")", ":", "\n", "        ", "sizes", "=", "[", "\n", "PIL", ".", "Image", ".", "open", "(", "imdb", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "for", "i", "in", "range", "(", "imdb", ".", "num_images", ")", "\n", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "imdb", ".", "image_index", ")", ")", ":", "\n", "        ", "roidb", "[", "i", "]", "[", "\"img_id\"", "]", "=", "imdb", ".", "image_id_at", "(", "i", ")", "\n", "roidb", "[", "i", "]", "[", "\"image\"", "]", "=", "imdb", ".", "image_path_at", "(", "i", ")", "\n", "if", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "\"coco\"", ")", ")", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"width\"", "]", "=", "sizes", "[", "i", "]", "[", "0", "]", "\n", "roidb", "[", "i", "]", "[", "\"height\"", "]", "=", "sizes", "[", "i", "]", "[", "1", "]", "\n", "# need gt_overlaps as a dense array for argmax", "\n", "", "gt_overlaps", "=", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ".", "toarray", "(", ")", "\n", "# max overlap with gt over classes (columns)", "\n", "max_overlaps", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "# gt class that had the max overlap", "\n", "max_classes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "roidb", "[", "i", "]", "[", "\"max_classes\"", "]", "=", "max_classes", "\n", "roidb", "[", "i", "]", "[", "\"max_overlaps\"", "]", "=", "max_overlaps", "\n", "# sanity checks", "\n", "# max overlap of 0 => class should be zero (background)", "\n", "zero_inds", "=", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "zero_inds", "]", "==", "0", ")", "\n", "# max overlap > 0 => class should not be zero (must be a fg class)", "\n", "nonzero_inds", "=", "np", ".", "where", "(", "max_overlaps", ">", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "nonzero_inds", "]", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roidb.rank_roidb_ratio": [[52, 77], ["range", "numpy.array", "numpy.argsort", "len", "np.array.append", "float"], "function", ["None"], ["", "", "def", "rank_roidb_ratio", "(", "roidb", ")", ":", "\n", "# rank roidb based on the ratio between width and height.", "\n", "    ", "ratio_large", "=", "2", "# largest ratio to preserve.", "\n", "ratio_small", "=", "0.5", "# smallest ratio to preserve.", "\n", "\n", "ratio_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "roidb", ")", ")", ":", "\n", "        ", "width", "=", "roidb", "[", "i", "]", "[", "\"width\"", "]", "\n", "height", "=", "roidb", "[", "i", "]", "[", "\"height\"", "]", "\n", "ratio", "=", "width", "/", "float", "(", "height", ")", "\n", "\n", "if", "ratio", ">", "ratio_large", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"need_crop\"", "]", "=", "1", "\n", "ratio", "=", "ratio_large", "\n", "", "elif", "ratio", "<", "ratio_small", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"need_crop\"", "]", "=", "1", "\n", "ratio", "=", "ratio_small", "\n", "", "else", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"need_crop\"", "]", "=", "0", "\n", "\n", "", "ratio_list", ".", "append", "(", "ratio", ")", "\n", "\n", "", "ratio_list", "=", "np", ".", "array", "(", "ratio_list", ")", "\n", "ratio_index", "=", "np", ".", "argsort", "(", "ratio_list", ")", "\n", "return", "ratio_list", "[", "ratio_index", "]", ",", "ratio_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roidb.filter_roidb": [[79, 91], ["print", "print", "len", "len", "len", "len"], "function", ["None"], ["", "def", "filter_roidb", "(", "roidb", ")", ":", "\n", "# filter the image without bounding box.", "\n", "    ", "print", "(", "\"before filtering, there are %d images...\"", "%", "(", "len", "(", "roidb", ")", ")", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "roidb", ")", ":", "\n", "        ", "if", "len", "(", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ")", "==", "0", ":", "\n", "            ", "del", "roidb", "[", "i", "]", "\n", "i", "-=", "1", "\n", "", "i", "+=", "1", "\n", "\n", "", "print", "(", "\"after filtering, there are %d images...\"", "%", "(", "len", "(", "roidb", ")", ")", ")", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_data_layer.roidb.combined_roidb": [[93, 138], ["roidb.rank_roidb_ratio", "print", "roidb.prepare_roidb", "print", "datasets.factory.get_imdb", "print", "datasets.factory.get_imdb.set_proposal_method", "print", "roidb.combined_roidb.get_training_roidb"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.rank_roidb_ratio", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.prepare_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.factory.get_imdb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method"], ["", "def", "combined_roidb", "(", "imdb_names", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n  Combine multiple roidbs\n  \"\"\"", "\n", "\n", "def", "get_training_roidb", "(", "imdb", ")", ":", "\n", "        ", "\"\"\"Returns a roidb (Region of Interest database) for use in training.\"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_FLIPPED", ":", "\n", "            ", "print", "(", "\"Appending horizontally-flipped training examples...\"", ")", "\n", "imdb", ".", "append_flipped_images", "(", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n", "", "print", "(", "\"Preparing training data...\"", ")", "\n", "\n", "prepare_roidb", "(", "imdb", ")", "\n", "# ratio_index = rank_roidb_ratio(imdb)", "\n", "print", "(", "\"done\"", ")", "\n", "\n", "return", "imdb", ".", "roidb", "\n", "\n", "", "def", "get_roidb", "(", "imdb_name", ")", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "imdb_name", ")", "\n", "print", "(", "\"Loaded dataset `{:s}` for training\"", ".", "format", "(", "imdb", ".", "name", ")", ")", "\n", "imdb", ".", "set_proposal_method", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", "\n", "print", "(", "\"Set proposal method: {:s}\"", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", ")", "\n", "roidb", "=", "get_training_roidb", "(", "imdb", ")", "\n", "return", "roidb", "\n", "\n", "", "roidbs", "=", "[", "get_roidb", "(", "s", ")", "for", "s", "in", "imdb_names", ".", "split", "(", "\"+\"", ")", "]", "\n", "roidb", "=", "roidbs", "[", "0", "]", "\n", "\n", "if", "len", "(", "roidbs", ")", ">", "1", ":", "\n", "        ", "for", "r", "in", "roidbs", "[", "1", ":", "]", ":", "\n", "            ", "roidb", ".", "extend", "(", "r", ")", "\n", "", "tmp", "=", "get_imdb", "(", "imdb_names", ".", "split", "(", "\"+\"", ")", "[", "1", "]", ")", "\n", "imdb", "=", "datasets", ".", "imdb", ".", "imdb", "(", "imdb_names", ",", "tmp", ".", "classes", ")", "\n", "", "else", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "imdb_names", ")", "\n", "\n", "", "if", "training", ":", "\n", "        ", "roidb", "=", "filter_roidb", "(", "roidb", ")", "\n", "\n", "", "ratio_list", ",", "ratio_index", "=", "rank_roidb_ratio", "(", "roidb", ")", "\n", "\n", "return", "imdb", ",", "roidb", ",", "ratio_list", ",", "ratio_index", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roibatchLoader.roibatchLoader.__init__": [[16, 60], ["len", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "int", "range", "numpy.ceil", "min", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "roidb", ",", "\n", "ratio_list", ",", "\n", "ratio_index", ",", "\n", "batch_size", ",", "\n", "num_classes", ",", "\n", "training", "=", "True", ",", "\n", "normalize", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_roidb", "=", "roidb", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "# we make the height of image consistent to trim_height, trim_width", "\n", "self", ".", "trim_height", "=", "cfg", ".", "TRAIN", ".", "TRIM_HEIGHT", "\n", "self", ".", "trim_width", "=", "cfg", ".", "TRAIN", ".", "TRIM_WIDTH", "\n", "self", ".", "max_num_box", "=", "cfg", ".", "MAX_NUM_GT_BOXES", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "ratio_list", "=", "ratio_list", "\n", "self", ".", "ratio_index", "=", "ratio_index", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_size", "=", "len", "(", "self", ".", "ratio_list", ")", "\n", "\n", "# given the ratio_list, we want to make the ratio same for each batch.", "\n", "self", ".", "ratio_list_batch", "=", "torch", ".", "Tensor", "(", "self", ".", "data_size", ")", ".", "zero_", "(", ")", "\n", "num_batch", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "ratio_index", ")", "/", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "left_idx", "=", "i", "*", "batch_size", "\n", "right_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", "-", "1", ",", "self", ".", "data_size", "-", "1", ")", "\n", "\n", "if", "ratio_list", "[", "right_idx", "]", "<", "1", ":", "\n", "# for ratio < 1, we preserve the leftmost in each batch.", "\n", "                ", "target_ratio", "=", "ratio_list", "[", "left_idx", "]", "\n", "", "elif", "ratio_list", "[", "left_idx", "]", ">", "1", ":", "\n", "# for ratio > 1, we preserve the rightmost in each batch.", "\n", "                ", "target_ratio", "=", "ratio_list", "[", "right_idx", "]", "\n", "", "else", ":", "\n", "# for ratio cross 1, we make it to be 1.", "\n", "                ", "target_ratio", "=", "1", "\n", "\n", "", "self", ".", "ratio_list_batch", "[", "left_idx", ":", "(", "right_idx", "+", "1", ")", "]", "=", "target_ratio", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "index_ratio", "=", "int", "(", "self", ".", "ratio_index", "[", "index", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roibatchLoader.roibatchLoader.__getitem__": [[61, 241], ["roi_da_data_layer.minibatch.get_minibatch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "data.permute().contiguous().view.permute().contiguous().view.size", "data.permute().contiguous().view.permute().contiguous().view.size", "numpy.random.shuffle", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.permute().contiguous", "torch.FloatTensor().zero_.permute().contiguous", "im_info.view.view.view", "data.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "im_info.view.view.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "int", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.size", "torch.FloatTensor().zero_.size", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "min", "int", "int", "int", "gt_boxes[].clamp_", "gt_boxes[].clamp_", "int", "int", "int", "gt_boxes[].clamp_", "gt_boxes[].clamp_", "numpy.floor", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.size", "torch.FloatTensor().zero_.size", "min", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "gt_boxes[].clamp_", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor().zero_.permute", "torch.FloatTensor().zero_.permute", "data.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.floor", "float", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.ceil", "float", "float", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "max", "min", "int", "max", "min", "int", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "data.permute().contiguous().view.permute().contiguous().view.permute", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.ceil", "int", "range", "range", "range", "range", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.minibatch.get_minibatch"], ["", "else", ":", "\n", "            ", "index_ratio", "=", "index", "\n", "\n", "# get the anchor index for current sample index", "\n", "# here we set the anchor index to the last one", "\n", "# sample in this group", "\n", "", "minibatch_db", "=", "[", "self", ".", "_roidb", "[", "index_ratio", "]", "]", "\n", "blobs", "=", "get_minibatch", "(", "minibatch_db", ",", "self", ".", "_num_classes", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "\"data\"", "]", ")", "\n", "im_info", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "\"im_info\"", "]", ")", "\n", "# we need to random shuffle the bounding box.", "\n", "data_height", ",", "data_width", "=", "data", ".", "size", "(", "1", ")", ",", "data", ".", "size", "(", "2", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "blobs", "[", "\"gt_boxes\"", "]", ")", "\n", "gt_boxes", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "\"gt_boxes\"", "]", ")", "\n", "\n", "########################################################", "\n", "# padding the input image to fixed size for each group #", "\n", "########################################################", "\n", "\n", "# NOTE1: need to cope with the case where a group cover both conditions. (done)", "\n", "# NOTE2: need to consider the situation for the tail samples. (no worry)", "\n", "# NOTE3: need to implement a parallel data loader. (no worry)", "\n", "# get the index range", "\n", "\n", "# if the image need to crop, crop to the target size.", "\n", "ratio", "=", "self", ".", "ratio_list_batch", "[", "index", "]", "\n", "\n", "if", "self", ".", "_roidb", "[", "index_ratio", "]", "[", "\"need_crop\"", "]", ":", "\n", "                ", "if", "ratio", "<", "1", ":", "\n", "# this means that data_width << data_height, we need to crop the", "\n", "# data_height", "\n", "                    ", "min_y", "=", "int", "(", "torch", ".", "min", "(", "gt_boxes", "[", ":", ",", "1", "]", ")", ")", "\n", "max_y", "=", "int", "(", "torch", ".", "max", "(", "gt_boxes", "[", ":", ",", "3", "]", ")", ")", "\n", "trim_size", "=", "int", "(", "np", ".", "floor", "(", "data_width", "/", "ratio", ")", ")", "\n", "if", "trim_size", ">", "data_height", ":", "\n", "                        ", "trim_size", "=", "data_height", "\n", "", "box_region", "=", "max_y", "-", "min_y", "+", "1", "\n", "if", "min_y", "==", "0", ":", "\n", "                        ", "y_s", "=", "0", "\n", "", "else", ":", "\n", "                        ", "if", "(", "box_region", "-", "trim_size", ")", "<", "0", ":", "\n", "                            ", "y_s_min", "=", "max", "(", "max_y", "-", "trim_size", ",", "0", ")", "\n", "y_s_max", "=", "min", "(", "min_y", ",", "data_height", "-", "trim_size", ")", "\n", "if", "y_s_min", "==", "y_s_max", ":", "\n", "                                ", "y_s", "=", "y_s_min", "\n", "", "else", ":", "\n", "                                ", "y_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "y_s_min", ",", "y_s_max", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "y_s_add", "=", "int", "(", "(", "box_region", "-", "trim_size", ")", "/", "2", ")", "\n", "if", "y_s_add", "==", "0", ":", "\n", "                                ", "y_s", "=", "min_y", "\n", "", "else", ":", "\n", "                                ", "y_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min_y", ",", "min_y", "+", "y_s_add", ")", ")", "\n", "# crop the image", "\n", "", "", "", "data", "=", "data", "[", ":", ",", "y_s", ":", "(", "y_s", "+", "trim_size", ")", ",", ":", ",", ":", "]", "\n", "\n", "# shift y coordiante of gt_boxes", "\n", "gt_boxes", "[", ":", ",", "1", "]", "=", "gt_boxes", "[", ":", ",", "1", "]", "-", "float", "(", "y_s", ")", "\n", "gt_boxes", "[", ":", ",", "3", "]", "=", "gt_boxes", "[", ":", ",", "3", "]", "-", "float", "(", "y_s", ")", "\n", "\n", "# update gt bounding box according the trip", "\n", "gt_boxes", "[", ":", ",", "1", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "gt_boxes", "[", ":", ",", "3", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "# this means that data_width >> data_height, we need to crop the", "\n", "# data_width", "\n", "                    ", "min_x", "=", "int", "(", "torch", ".", "min", "(", "gt_boxes", "[", ":", ",", "0", "]", ")", ")", "\n", "max_x", "=", "int", "(", "torch", ".", "max", "(", "gt_boxes", "[", ":", ",", "2", "]", ")", ")", "\n", "trim_size", "=", "int", "(", "np", ".", "ceil", "(", "data_height", "*", "ratio", ")", ")", "\n", "if", "trim_size", ">", "data_width", ":", "\n", "                        ", "trim_size", "=", "data_width", "\n", "", "box_region", "=", "max_x", "-", "min_x", "+", "1", "\n", "if", "min_x", "==", "0", ":", "\n", "                        ", "x_s", "=", "0", "\n", "", "else", ":", "\n", "                        ", "if", "(", "box_region", "-", "trim_size", ")", "<", "0", ":", "\n", "                            ", "x_s_min", "=", "max", "(", "max_x", "-", "trim_size", ",", "0", ")", "\n", "x_s_max", "=", "min", "(", "min_x", ",", "data_width", "-", "trim_size", ")", "\n", "if", "x_s_min", "==", "x_s_max", ":", "\n", "                                ", "x_s", "=", "x_s_min", "\n", "", "else", ":", "\n", "                                ", "x_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "x_s_min", ",", "x_s_max", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "x_s_add", "=", "int", "(", "(", "box_region", "-", "trim_size", ")", "/", "2", ")", "\n", "if", "x_s_add", "==", "0", ":", "\n", "                                ", "x_s", "=", "min_x", "\n", "", "else", ":", "\n", "                                ", "x_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min_x", ",", "min_x", "+", "x_s_add", ")", ")", "\n", "# crop the image", "\n", "", "", "", "data", "=", "data", "[", ":", ",", ":", ",", "x_s", ":", "(", "x_s", "+", "trim_size", ")", ",", ":", "]", "\n", "\n", "# shift x coordiante of gt_boxes", "\n", "gt_boxes", "[", ":", ",", "0", "]", "=", "gt_boxes", "[", ":", ",", "0", "]", "-", "float", "(", "x_s", ")", "\n", "gt_boxes", "[", ":", ",", "2", "]", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "float", "(", "x_s", ")", "\n", "# update gt bounding box according the trip", "\n", "gt_boxes", "[", ":", ",", "0", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "gt_boxes", "[", ":", ",", "2", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "\n", "# based on the ratio, padding the image.", "\n", "", "", "if", "ratio", "<", "1", ":", "\n", "# this means that data_width < data_height", "\n", "                ", "trim_size", "=", "int", "(", "np", ".", "floor", "(", "data_width", "/", "ratio", ")", ")", "\n", "\n", "padding_data", "=", "torch", ".", "FloatTensor", "(", "\n", "int", "(", "np", ".", "ceil", "(", "data_width", "/", "ratio", ")", ")", ",", "data_width", ",", "3", "\n", ")", ".", "zero_", "(", ")", "\n", "\n", "padding_data", "[", ":", "data_height", ",", ":", ",", ":", "]", "=", "data", "[", "0", "]", "\n", "# update im_info", "\n", "im_info", "[", "0", ",", "0", "]", "=", "padding_data", ".", "size", "(", "0", ")", "\n", "# print(\"height %d %d \\n\" %(index, anchor_idx))", "\n", "", "elif", "ratio", ">", "1", ":", "\n", "# this means that data_width > data_height", "\n", "# if the image need to crop.", "\n", "                ", "padding_data", "=", "torch", ".", "FloatTensor", "(", "\n", "data_height", ",", "int", "(", "np", ".", "ceil", "(", "data_height", "*", "ratio", ")", ")", ",", "3", "\n", ")", ".", "zero_", "(", ")", "\n", "padding_data", "[", ":", ",", ":", "data_width", ",", ":", "]", "=", "data", "[", "0", "]", "\n", "im_info", "[", "0", ",", "1", "]", "=", "padding_data", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "trim_size", "=", "min", "(", "data_height", ",", "data_width", ")", "\n", "padding_data", "=", "torch", ".", "FloatTensor", "(", "trim_size", ",", "trim_size", ",", "3", ")", ".", "zero_", "(", ")", "\n", "padding_data", "=", "data", "[", "0", "]", "[", ":", "trim_size", ",", ":", "trim_size", ",", ":", "]", "\n", "# gt_boxes.clamp_(0, trim_size)", "\n", "gt_boxes", "[", ":", ",", ":", "4", "]", ".", "clamp_", "(", "0", ",", "trim_size", ")", "\n", "im_info", "[", "0", ",", "0", "]", "=", "trim_size", "\n", "im_info", "[", "0", ",", "1", "]", "=", "trim_size", "\n", "\n", "# check the bounding box:", "\n", "", "not_keep", "=", "(", "gt_boxes", "[", ":", ",", "0", "]", "==", "gt_boxes", "[", ":", ",", "2", "]", ")", "|", "(", "\n", "gt_boxes", "[", ":", ",", "1", "]", "==", "gt_boxes", "[", ":", ",", "3", "]", "\n", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "not_keep", "==", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "gt_boxes_padding", "=", "torch", ".", "FloatTensor", "(", "\n", "self", ".", "max_num_box", ",", "gt_boxes", ".", "size", "(", "1", ")", "\n", ")", ".", "zero_", "(", ")", "\n", "if", "keep", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                ", "gt_boxes", "=", "gt_boxes", "[", "keep", "]", "\n", "num_boxes", "=", "min", "(", "gt_boxes", ".", "size", "(", "0", ")", ",", "self", ".", "max_num_box", ")", "\n", "gt_boxes_padding", "[", ":", "num_boxes", ",", ":", "]", "=", "gt_boxes", "[", ":", "num_boxes", "]", "\n", "", "else", ":", "\n", "                ", "num_boxes", "=", "0", "\n", "\n", "# permute trim_data to adapt to downstream processing", "\n", "", "padding_data", "=", "padding_data", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "im_info", "=", "im_info", ".", "view", "(", "3", ")", "\n", "\n", "return", "padding_data", ",", "im_info", ",", "gt_boxes_padding", ",", "num_boxes", "\n", "", "else", ":", "\n", "            ", "data", "=", "(", "\n", "data", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "data_height", ",", "data_width", ")", "\n", ")", "\n", "im_info", "=", "im_info", ".", "view", "(", "3", ")", "\n", "\n", "gt_boxes", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "num_boxes", "=", "0", "\n", "\n", "return", "data", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_roidb", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roibatchLoader.roibatchLoader.__len__": [[242, 244], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.minibatch.get_minibatch": [[19, 79], ["len", "numpy.randint", "minibatch._get_image_blob", "numpy.empty", "numpy.array", "minibatch.get_minibatch.gt_classes2cls_lb_onehot"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.minibatch._get_image_blob"], ["def", "get_minibatch", "(", "roidb", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Given a roidb, construct a minibatch sampled from it.\"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "# Sample random scales to use for each image in this batch", "\n", "random_scale_inds", "=", "npr", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ",", "size", "=", "num_images", ")", "\n", "assert", "(", "\n", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "%", "num_images", "==", "0", "\n", ")", ",", "\"num_images ({}) must divide BATCH_SIZE ({})\"", ".", "format", "(", "\n", "num_images", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", ")", "\n", "\n", "# Get the input image blob, formatted for caffe", "\n", "im_blob", ",", "im_scales", "=", "_get_image_blob", "(", "roidb", ",", "random_scale_inds", ")", "\n", "\n", "blobs", "=", "{", "\"data\"", ":", "im_blob", "}", "\n", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Single batch only\"", "\n", "assert", "len", "(", "roidb", ")", "==", "1", ",", "\"Single batch only\"", "\n", "\n", "# gt boxes: (x1, y1, x2, y2, cls)", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_ALL_GT", ":", "\n", "# Include all ground truth boxes", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "0", "]", "[", "\"gt_classes\"", "]", "!=", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# For the COCO ground truth boxes, exclude the ones that are ''iscrowd''", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "\n", "(", "roidb", "[", "0", "]", "[", "\"gt_classes\"", "]", "!=", "0", ")", "\n", "&", "np", ".", "all", "(", "roidb", "[", "0", "]", "[", "\"gt_overlaps\"", "]", ".", "toarray", "(", ")", ">", "-", "1.0", ",", "axis", "=", "1", ")", "\n", ")", "[", "0", "]", "\n", "", "gt_boxes", "=", "np", ".", "empty", "(", "(", "len", "(", "gt_inds", ")", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_boxes", "[", ":", ",", "0", ":", "4", "]", "=", "roidb", "[", "0", "]", "[", "\"boxes\"", "]", "[", "gt_inds", ",", ":", "]", "*", "im_scales", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "4", "]", "=", "roidb", "[", "0", "]", "[", "\"gt_classes\"", "]", "[", "gt_inds", "]", "\n", "blobs", "[", "\"gt_boxes\"", "]", "=", "gt_boxes", "\n", "blobs", "[", "\"im_info\"", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "im_blob", ".", "shape", "[", "1", "]", ",", "im_blob", ".", "shape", "[", "2", "]", ",", "im_scales", "[", "0", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "blobs", "[", "\"img_id\"", "]", "=", "roidb", "[", "0", "]", "[", "\"img_id\"", "]", "\n", "\n", "return", "blobs", "\n", "\n", "\n", "", "def", "_get_image_blob", "(", "roidb", ",", "scale_inds", ")", ":", "\n", "    ", "\"\"\"Builds an input blob from the images in the roidb at the specified\n  scales.\n  \"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "\n", "processed_ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "roidb", "[", "i", "]", "[", "\"image\"", "]", ")", "\n", "# im = imread(roidb[i][\"image\"])", "\n", "\n", "if", "len", "(", "im", ".", "shape", ")", "==", "2", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "im", "=", "np", ".", "concatenate", "(", "(", "im", ",", "im", ",", "im", ")", ",", "axis", "=", "2", ")", "\n", "# flip the channel, since the original one using cv2", "\n", "# rgb -> bgr", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.minibatch._get_image_blob": [[81, 111], ["len", "range", "model.utils.blob.im_list_to_blob", "cv2.imread", "model.utils.blob.prep_im_for_blob", "im_scales.append", "processed_ims.append", "len", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.blob.im_list_to_blob", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.blob.prep_im_for_blob"], ["            ", "im", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "target_size", "=", "cfg", ".", "TRAIN", ".", "SCALES", "[", "scale_inds", "[", "i", "]", "]", "\n", "im", ",", "im_scale", "=", "prep_im_for_blob", "(", "\n", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "target_size", ",", "cfg", ".", "TRAIN", ".", "MAX_SIZE", "\n", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_scales", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.prepare_roidb": [[11, 55], ["range", "len", "imdb.image_id_at", "imdb.image_path_at", "[].toarray", "[].toarray.max", "[].toarray.argmax", "all", "all", "imdb.name.startswith", "numpy.where", "numpy.where", "PIL.Image.open", "range", "imdb.name.startswith", "imdb.image_path_at"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_id_at", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at"], ["def", "prepare_roidb", "(", "imdb", ")", ":", "\n", "    ", "\"\"\"Enrich the imdb's roidb by adding some derived quantities that\n  are useful for training. This function precomputes the maximum\n  overlap, taken over ground-truth boxes, between each ROI and\n  each ground-truth box. The class with maximum overlap is also\n  recorded.\n  \"\"\"", "\n", "\n", "roidb", "=", "imdb", ".", "roidb", "\n", "if", "(", "\n", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "\"coco\"", ")", ")", "\n", "or", "\"car\"", "in", "imdb", ".", "name", "\n", "or", "\"sim10k\"", "in", "imdb", ".", "name", "\n", ")", ":", "\n", "        ", "sizes", "=", "[", "\n", "PIL", ".", "Image", ".", "open", "(", "imdb", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "for", "i", "in", "range", "(", "imdb", ".", "num_images", ")", "\n", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "imdb", ".", "image_index", ")", ")", ":", "\n", "        ", "roidb", "[", "i", "]", "[", "\"img_id\"", "]", "=", "imdb", ".", "image_id_at", "(", "i", ")", "\n", "roidb", "[", "i", "]", "[", "\"image\"", "]", "=", "imdb", ".", "image_path_at", "(", "i", ")", "\n", "if", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "\"coco\"", ")", ")", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"width\"", "]", "=", "sizes", "[", "i", "]", "[", "0", "]", "\n", "roidb", "[", "i", "]", "[", "\"height\"", "]", "=", "sizes", "[", "i", "]", "[", "1", "]", "\n", "# need gt_overlaps as a dense array for argmax", "\n", "", "gt_overlaps", "=", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ".", "toarray", "(", ")", "\n", "# max overlap with gt over classes (columns)", "\n", "max_overlaps", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "# gt class that had the max overlap", "\n", "max_classes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "roidb", "[", "i", "]", "[", "\"max_classes\"", "]", "=", "max_classes", "\n", "roidb", "[", "i", "]", "[", "\"max_overlaps\"", "]", "=", "max_overlaps", "\n", "# sanity checks", "\n", "# max overlap of 0 => class should be zero (background)", "\n", "zero_inds", "=", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "zero_inds", "]", "==", "0", ")", "\n", "# max overlap > 0 => class should not be zero (must be a fg class)", "\n", "nonzero_inds", "=", "np", ".", "where", "(", "max_overlaps", ">", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "nonzero_inds", "]", "!=", "0", ")", "\n", "\n", "\n", "", "", "def", "rank_roidb_ratio", "(", "roidb", ")", ":", "\n", "# rank roidb based on the ratio between width and height.", "\n", "    ", "ratio_large", "=", "2", "# largest ratio to preserve.", "\n", "ratio_small", "=", "0.5", "# smallest ratio to preserve.", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.rank_roidb_ratio": [[57, 82], ["range", "numpy.array", "numpy.argsort", "len", "np.array.append", "float"], "function", ["None"], ["ratio_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "roidb", ")", ")", ":", "\n", "        ", "width", "=", "roidb", "[", "i", "]", "[", "\"width\"", "]", "\n", "height", "=", "roidb", "[", "i", "]", "[", "\"height\"", "]", "\n", "ratio", "=", "width", "/", "float", "(", "height", ")", "\n", "\n", "if", "ratio", ">", "ratio_large", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"need_crop\"", "]", "=", "1", "\n", "ratio", "=", "ratio_large", "\n", "", "elif", "ratio", "<", "ratio_small", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"need_crop\"", "]", "=", "1", "\n", "ratio", "=", "ratio_small", "\n", "", "else", ":", "\n", "            ", "roidb", "[", "i", "]", "[", "\"need_crop\"", "]", "=", "0", "\n", "\n", "", "ratio_list", ".", "append", "(", "ratio", ")", "\n", "\n", "", "ratio_list", "=", "np", ".", "array", "(", "ratio_list", ")", "\n", "ratio_index", "=", "np", ".", "argsort", "(", "ratio_list", ")", "\n", "return", "ratio_list", "[", "ratio_index", "]", ",", "ratio_index", "\n", "\n", "\n", "", "def", "filter_roidb", "(", "roidb", ")", ":", "\n", "# filter the image without bounding box.", "\n", "    ", "print", "(", "\"before filtering, there are %d images...\"", "%", "(", "len", "(", "roidb", ")", ")", ")", "\n", "i", "=", "0", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.filter_roidb": [[84, 96], ["print", "print", "len", "len", "len", "len"], "function", ["None"], ["        ", "if", "len", "(", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ")", "==", "0", ":", "\n", "            ", "del", "roidb", "[", "i", "]", "\n", "i", "-=", "1", "\n", "", "i", "+=", "1", "\n", "\n", "", "print", "(", "\"after filtering, there are %d images...\"", "%", "(", "len", "(", "roidb", ")", ")", ")", "\n", "return", "roidb", "\n", "\n", "\n", "", "def", "combined_roidb", "(", "imdb_names", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n  Combine multiple roidbs\n  \"\"\"", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.combined_roidb": [[98, 153], ["print", "roidb.rank_roidb_ratio", "print", "roidb.prepare_roidb", "print", "datasets.factory.get_imdb", "print", "datasets.factory.get_imdb.set_proposal_method", "print", "roidb.combined_roidb.get_training_roidb"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.rank_roidb_ratio", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_da_data_layer.roidb.prepare_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.factory.get_imdb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method"], ["def", "get_training_roidb", "(", "imdb", ")", ":", "\n", "        ", "\"\"\"Returns a roidb (Region of Interest database) for use in training.\"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_FLIPPED", ":", "\n", "            ", "print", "(", "\"Appending horizontally-flipped training examples...\"", ")", "\n", "imdb", ".", "append_flipped_images", "(", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n", "", "print", "(", "\"Preparing training data...\"", ")", "\n", "\n", "prepare_roidb", "(", "imdb", ")", "\n", "# ratio_index = rank_roidb_ratio(imdb)", "\n", "print", "(", "\"done\"", ")", "\n", "\n", "return", "imdb", ".", "roidb", "\n", "\n", "", "def", "get_roidb", "(", "imdb_name", ")", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "imdb_name", ")", "\n", "print", "(", "\"Loaded dataset `{:s}` for training\"", ".", "format", "(", "imdb", ".", "name", ")", ")", "\n", "imdb", ".", "set_proposal_method", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", "\n", "print", "(", "\"Set proposal method: {:s}\"", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", ")", "\n", "roidb", "=", "get_training_roidb", "(", "imdb", ")", "\n", "return", "roidb", "\n", "\n", "", "roidbs", "=", "[", "get_roidb", "(", "s", ")", "for", "s", "in", "imdb_names", ".", "split", "(", "\"+\"", ")", "]", "\n", "roidb", "=", "roidbs", "[", "0", "]", "\n", "\n", "if", "len", "(", "roidbs", ")", ">", "1", ":", "\n", "        ", "for", "r", "in", "roidbs", "[", "1", ":", "]", ":", "\n", "            ", "roidb", ".", "extend", "(", "r", ")", "\n", "", "tmp", "=", "get_imdb", "(", "imdb_names", ".", "split", "(", "\"+\"", ")", "[", "1", "]", ")", "\n", "imdb", "=", "datasets", ".", "imdb", ".", "imdb", "(", "imdb_names", ",", "tmp", ".", "classes", ")", "\n", "", "else", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "imdb_names", ")", "\n", "\n", "", "if", "training", ":", "\n", "        ", "roidb", "=", "filter_roidb", "(", "roidb", ")", "\n", "\n", "", "ratio_list", ",", "ratio_index", "=", "rank_roidb_ratio", "(", "roidb", ")", "\n", "\n", "return", "imdb", ",", "roidb", ",", "ratio_list", ",", "ratio_index", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.ds_utils.unique_boxes": [[11, 17], ["numpy.array", "numpy.round().dot", "numpy.unique", "numpy.sort", "numpy.round"], "function", ["None"], ["def", "unique_boxes", "(", "boxes", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Return indices of unique boxes.\"\"\"", "\n", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "boxes", "*", "scale", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ")", "\n", "return", "np", ".", "sort", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.ds_utils.xywh_to_xyxy": [[19, 22], ["numpy.hstack"], "function", ["None"], ["", "def", "xywh_to_xyxy", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Convert [x y w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.ds_utils.xyxy_to_xywh": [[24, 27], ["numpy.hstack"], "function", ["None"], ["", "def", "xyxy_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x y w h] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.ds_utils.validate_boxes": [[29, 41], ["None"], "function", ["None"], ["", "def", "validate_boxes", "(", "boxes", ",", "width", "=", "0", ",", "height", "=", "0", ")", ":", "\n", "    ", "\"\"\"Check that a set of boxes are valid.\"\"\"", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "assert", "(", "x1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "y1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", ">=", "x1", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", ">=", "y1", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", "<", "width", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", "<", "height", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.ds_utils.filter_small_boxes": [[43, 48], ["numpy.where"], "function", ["None"], ["", "def", "filter_small_boxes", "(", "boxes", ",", "min_size", ")", ":", "\n", "    ", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "keep", "=", "np", ".", "where", "(", "(", "w", ">=", "min_size", ")", "&", "(", "h", ">", "min_size", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.__init__": [[29, 85], ["datasets.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc_rbg.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "pascal_voc_rbg.pascal_voc._get_default_path", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_default_path"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"voc_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", ")", "\n", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"aeroplane\"", ",", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"boat\"", ",", "\n", "\"bottle\"", ",", "\n", "\"bus\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"chair\"", ",", "\n", "\"cow\"", ",", "\n", "\"diningtable\"", ",", "\n", "\"dog\"", ",", "\n", "\"horse\"", ",", "\n", "\"motorbike\"", ",", "\n", "\"person\"", ",", "\n", "\"pottedplant\"", ",", "\n", "\"sheep\"", ",", "\n", "\"sofa\"", ",", "\n", "\"train\"", ",", "\n", "\"tvmonitor\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.image_path_at": [[87, 92], ["pascal_voc_rbg.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.image_path_from_index": [[93, 102], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._load_image_set_index": [[103, 119], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._get_default_path": [[120, 125], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"VOCdevkit\"", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.gt_roidb": [[126, 148], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc_rbg.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "try", ":", "\n", "                    ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "                    ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "\"bytes\"", ")", "\n", "", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.rpn_roidb": [[149, 158], ["pascal_voc_rbg.pascal_voc.gt_roidb", "pascal_voc_rbg.pascal_voc._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "pascal_voc_rbg.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._load_rpn_roidb": [[159, 166], ["print", "os.path.exists", "pascal_voc_rbg.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._load_pascal_annotation": [[167, 214], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.lower().strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "if", "not", "self", ".", "config", "[", "\"use_diff\"", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "            ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "==", "0", "\n", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._get_comp_id": [[216, 223], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._get_voc_results_file_template": [[224, 231], ["os.path.join", "pascal_voc_rbg.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ",", "filename", "\n", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._write_voc_results_file": [[232, 253], ["enumerate", "print", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._do_python_eval": [[256, 305], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc._do_matlab_eval": [[306, 319], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc_rbg.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.evaluate_detections": [[320, 332], ["pdb.set_trace", "pascal_voc_rbg.pascal_voc._write_voc_results_file", "pascal_voc_rbg.pascal_voc._do_python_eval", "pascal_voc_rbg.pascal_voc._do_matlab_eval", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_rbg.pascal_voc.competition_mode": [[333, 340], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.config_dataset._merge_a_into_b": [[24, 57], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config_dataset._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config._merge_a_into_b"], ["\n", "\n", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n  options in b whenever they are also specified in a.\n  \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "k", "not", "in", "b", ":", "\n", "            ", "raise", "KeyError", "(", "\"{} is not a valid config key\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "(", "\"Type mismatch ({} vs. {}) \"", "\"for config key: {}\"", ")", ".", "format", "(", "\n", "type", "(", "b", "[", "k", "]", ")", ",", "type", "(", "v", ")", ",", "k", "\n", ")", "\n", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "(", "\"Error under config key: {}\"", ".", "format", "(", "k", ")", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.config_dataset.cfg_from_file": [[59, 67], ["config_dataset._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config._merge_a_into_b"], ["\n", "\n", "", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.config_dataset.cfg_from_list": [[69, 93], ["zip", "k.split", "len", "literal_eval", "type", "type", "type", "type"], "function", ["None"], ["\n", "\n", "", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "\".\"", ")", "\n", "d", "=", "__D", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "subkey", "in", "d", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "            ", "value", "=", "v", "\n", "", "assert", "type", "(", "value", ")", "==", "type", "(", "\n", "d", "[", "subkey", "]", "\n", ")", ",", "\"type {} does not match original type {}\"", ".", "format", "(", "\n", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.__init__": [[28, 69], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "coco.coco._COCO.loadCats", "tuple", "dict", "dict", "coco.coco._load_image_set_index", "coco.coco.set_proposal_method", "coco.coco.competition_mode", "coco.coco._get_ann_file", "coco.coco._COCO.getCatIds", "list", "list", "zip", "zip", "list", "coco.coco._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"coco_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "\"use_salt\"", ":", "True", ",", "\"cleanup\"", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"coco\"", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "\"__background__\"", "]", "+", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "\n", "list", "(", "zip", "(", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ",", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "\"gt\"", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "\"minival2014\"", ":", "\"val2014\"", ",", "# 5k val2014 subset", "\n", "\"valminusminival2014\"", ":", "\"val2014\"", ",", "# val2014 \\setminus minival2014", "\n", "\"test-dev2015\"", ":", "\"test2015\"", ",", "\n", "\"valminuscapval2014\"", ":", "\"val2014\"", ",", "\n", "\"capval2014\"", ":", "\"val2014\"", ",", "\n", "\"captest2014\"", ":", "\"val2014\"", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "\n", "self", ".", "_view_map", "[", "coco_name", "]", "if", "coco_name", "in", "self", ".", "_view_map", "else", "coco_name", "\n", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"minival\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._get_ann_file": [[70, 76], ["os.join", "os.join", "coco.coco._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "\"instances\"", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", "else", "\"image_info\"", "\n", "return", "osp", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\n", "\"annotations\"", ",", "\n", "prefix", "+", "\"_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\".json\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._load_image_set_index": [[78, 84], ["coco.coco._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._get_widths": [[196, 198], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "r", "[", "\"width\"", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.image_path_at": [[90, 95], ["coco.coco.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.image_id_at": [[96, 101], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.image_path_from_index": [[102, 113], ["os.join", "os.join", "os.exists", "os.exists", "str().zfill", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".jpg\"", "\n", "# image_path = osp.join(self._data_path, \"images\", self._data_name, file_name)", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.gt_roidb": [[114, 132], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "coco.coco._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._load_coco_annotation": [[133, 194], ["coco.coco._COCO.getAnnIds", "coco.coco._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "coco.coco._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "\"width\"", "]", "\n", "height", "=", "im_ann", "[", "\"height\"", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "\"area\"", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "\"clean_bbox\"", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "\"clean_bbox\"", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "\"area\"", "]", "\n", "if", "obj", "[", "\"iscrowd\"", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.append_flipped_images": [[199, 221], ["coco.coco._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "coco.coco.roidb.append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"width\"", ":", "widths", "[", "i", "]", ",", "\n", "\"height\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "\"seg_areas\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._get_box_file": [[222, 227], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "        ", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".mat\"", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._print_detection_eval_metrics": [[228, 266], ["coco.coco._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "\n", "&", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\n", "(", "\"~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] \"", "\"~~~~\"", ")", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", "\n", ")", "\n", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "\n", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "\"~~~~ Summary metrics ~~~~\"", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._do_detection_eval": [[267, 279], ["coco.coco._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "coco.coco._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "        ", "ann_type", "=", "\"bbox\"", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "ann_type", "==", "\"segm\"", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "\"detection_results.pkl\"", ")", "\n", "with", "open", "(", "eval_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"Wrote COCO eval results to: {}\"", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._coco_results_one_category": [[280, 303], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "            ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "index", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"bbox\"", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco._write_coco_results_file": [[304, 325], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "coco.coco._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "        ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\n", "\"Collecting {} results ({:d}/{:d})\"", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "self", ".", "num_classes", "-", "1", "\n", ")", "\n", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "\n", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "coco_cat_id", ")", "\n", ")", "\n", "", "print", "(", "\"Writing results json to {}\"", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.evaluate_detections": [[326, 340], ["os.join", "os.join", "coco.coco._write_coco_results_file", "coco.coco._image_set.find", "coco.coco._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "res_file", "=", "osp", ".", "join", "(", "\n", "output_dir", ",", "(", "\"detections_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\"_results\"", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", ":", "\n", "            ", "res_file", "+=", "\"_{}\"", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "\".json\"", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", ":", "\n", "            ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.coco.coco.competition_mode": [[341, 348], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.voc_eval.parse_rec": [[15, 35], ["xml.parse", "ET.parse.findall", "int", "int", "obj.find", "objects.append", "obj.find", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_rec", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Parse a PASCAL VOC xml file \"\"\"", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "\"object\"", ")", ":", "\n", "        ", "obj_struct", "=", "{", "}", "\n", "obj_struct", "[", "\"name\"", "]", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", "\n", "obj_struct", "[", "\"pose\"", "]", "=", "obj", ".", "find", "(", "\"pose\"", ")", ".", "text", "\n", "obj_struct", "[", "\"truncated\"", "]", "=", "int", "(", "obj", ".", "find", "(", "\"truncated\"", ")", ".", "text", ")", "\n", "obj_struct", "[", "\"difficult\"", "]", "=", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "obj_struct", "[", "\"bbox\"", "]", "=", "[", "\n", "int", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", ",", "\n", "]", "\n", "objects", ".", "append", "(", "obj_struct", ")", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.voc_eval.voc_ap": [[37, 69], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n  Compute VOC AP given precision and recall.\n  If use_07_metric is true, uses the\n  VOC 07 11 point method (default:False).\n  \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.0", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.0", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "rec", ",", "[", "1.0", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "prec", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.voc_eval.voc_eval": [[71, 214], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "print", "numpy.array", "numpy.array().astype", "open", "f.readlines", "x.strip().split", "numpy.argsort", "numpy.sort", "range", "float", "numpy.maximum", "voc_eval.parse_rec", "open", "pickle.dump", "open", "len", "sum", "float", "BB[].astype", "R[].astype", "annopath.format", "print", "pickle.load", "numpy.array", "x.strip", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.finfo", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_ap", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.parse_rec"], ["", "def", "voc_eval", "(", "\n", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap = voc_eval(detpath,\n                              annopath,\n                              imagesetfile,\n                              classname,\n                              [ovthresh],\n                              [use_07_metric])\n\n  Top level function that does the PASCAL VOC evaluation.\n\n  detpath: Path to detections\n      detpath.format(classname) should produce the detection results file.\n  annopath: Path to annotations\n      annopath.format(imagename) should be the xml annotations file.\n  imagesetfile: Text file containing the list of images, one image per line.\n  classname: Category name (duh)\n  cachedir: Directory for caching the annotations\n  [ovthresh]: Overlap threshold (default = 0.5)\n  [use_07_metric]: Whether to use VOC07's 11 point AP computation\n      (default False)\n  \"\"\"", "\n", "# assumes detections are in detpath.format(classname)", "\n", "# assumes annotations are in annopath.format(imagename)", "\n", "# assumes imagesetfile is a text file with each line an image name", "\n", "# cachedir caches the annotations in a pickle file", "\n", "\n", "# first load gt", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "\"%s_annots.pkl\"", "%", "imagesetfile", ")", "\n", "# read list of images", "\n", "with", "open", "(", "imagesetfile", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annotations", "\n", "        ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "            ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "\"Reading annotation for {:d}/{:d}\"", ".", "format", "(", "i", "+", "1", ",", "len", "(", "imagenames", ")", ")", ")", "\n", "# save", "\n", "", "", "print", "(", "\"Saving cached annotations to {:s}\"", ".", "format", "(", "cachefile", ")", ")", "\n", "with", "open", "(", "cachefile", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "        ", "with", "open", "(", "cachefile", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "\n", "# extract gt objects for this class", "\n", "", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "        ", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "\"name\"", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "\"bbox\"", "]", "for", "x", "in", "R", "]", ")", "\n", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "\"difficult\"", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "\"bbox\"", ":", "bbox", ",", "\"difficult\"", ":", "difficult", ",", "\"det\"", ":", "det", "}", "\n", "\n", "# read dets", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "if", "BB", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# sort by confidence", "\n", "        ", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "            ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "\"bbox\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "                ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.0", ",", "0.0", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.0", ",", "0.0", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "\n", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.0", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.0", ")", "\n", "+", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "-", "inters", "\n", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "                ", "if", "not", "R", "[", "\"difficult\"", "]", "[", "jmax", "]", ":", "\n", "                    ", "if", "not", "R", "[", "\"det\"", "]", "[", "jmax", "]", ":", "\n", "                        ", "tp", "[", "d", "]", "=", "1.0", "\n", "R", "[", "\"det\"", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "d", "]", "=", "1.0", "\n", "", "", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.__init__": [[32, 131], ["datasets.imdb.imdb.__init__", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "os.path.join", "os.path.join", "vg.vg._load_image_set_index", "os.path.join", "vg.vg._classes.append", "os.path.join", "vg.vg._attributes.append", "os.path.join", "vg.vg._relations.append", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.dump", "n.lower().strip", "n.lower().strip", "n.lower().strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "object.split", "att.split", "rel.split", "n.lower", "n.lower", "n.lower"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "version", ",", "image_set", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"vg_\"", "+", "version", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_version", "=", "version", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"genome\"", ")", "\n", "self", ".", "_img_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"vg\"", ")", "\n", "# VG specific config options", "\n", "self", ".", "config", "=", "{", "\"cleanup\"", ":", "False", "}", "\n", "\n", "# Load classes", "\n", "self", ".", "_classes", "=", "[", "\"__background__\"", "]", "\n", "self", ".", "_class_to_ind", "=", "{", "}", "\n", "self", ".", "_class_to_ind", "[", "self", ".", "_classes", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "\"objects_vocab.txt\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "object", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "object", ".", "split", "(", "\",\"", ")", "]", "\n", "self", ".", "_classes", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "                    ", "self", ".", "_class_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "# Load attributes", "\n", "", "", "self", ".", "_attributes", "=", "[", "\"__no_attribute__\"", "]", "\n", "self", ".", "_attribute_to_ind", "=", "{", "}", "\n", "self", ".", "_attribute_to_ind", "[", "self", ".", "_attributes", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "\"attributes_vocab.txt\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "att", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "att", ".", "split", "(", "\",\"", ")", "]", "\n", "self", ".", "_attributes", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "                    ", "self", ".", "_attribute_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "# Load relations", "\n", "", "", "self", ".", "_relations", "=", "[", "\"__no_relation__\"", "]", "\n", "self", ".", "_relation_to_ind", "=", "{", "}", "\n", "self", ".", "_relation_to_ind", "[", "self", ".", "_relations", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "\"relations_vocab.txt\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "rel", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "rel", ".", "split", "(", "\",\"", ")", "]", "\n", "self", ".", "_relations", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "                    ", "self", ".", "_relation_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "", "", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "load_index_from_file", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", "\n", ")", ":", "\n", "            ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_image_index", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "load_index_from_file", "=", "True", "\n", "\n", "", "load_id_from_file", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", "\n", ")", ":", "\n", "            ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_id_to_dir", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "load_id_from_file", "=", "True", "\n", "\n", "", "if", "not", "load_index_from_file", "or", "not", "load_id_from_file", ":", "\n", "            ", "self", ".", "_image_index", ",", "self", ".", "_id_to_dir", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "_image_index", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "_id_to_dir", ",", "fp", ")", "\n", "\n", "", "", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.image_path_at": [[132, 137], ["vg.vg.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.image_id_at": [[138, 143], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "# return self._image_index[i]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.image_path_from_index": [[145, 153], ["os.path.join", "os.path.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "folder", "=", "self", ".", "_id_to_dir", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_img_path", ",", "folder", ",", "str", "(", "index", ")", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._image_split_path": [[154, 165], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_image_split_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_image_set", "==", "\"minitrain\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"train.txt\"", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"smalltrain\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"train.txt\"", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"minival\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"val.txt\"", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"smallval\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"val.txt\"", ")", "\n", "", "else", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_image_set", "+", "\".txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._load_image_set_index": [[166, 204], ["vg.vg._image_split_path", "os.path.exists", "open", "f.readlines", "line.split", "int", "vg.vg._annotation_path", "os.path.exists", "xml.parse", "xml.parse.findall", "[].split", "obj.find().text.lower().strip", "image_index.append", "obj.find().text.lower", "im_file.split", "ann_file.split", "obj.find"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._image_split_path", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._annotation_path"], ["", "", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "training_split_file", "=", "self", ".", "_image_split_path", "(", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "training_split_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "training_split_file", "\n", ")", "\n", "with", "open", "(", "training_split_file", ")", "as", "f", ":", "\n", "            ", "metadata", "=", "f", ".", "readlines", "(", ")", "\n", "if", "self", ".", "_image_set", "==", "\"minitrain\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "1000", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"smalltrain\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "20000", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"minival\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "100", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"smallval\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "2000", "]", "\n", "\n", "", "", "image_index", "=", "[", "]", "\n", "id_to_dir", "=", "{", "}", "\n", "for", "line", "in", "metadata", ":", "\n", "            ", "im_file", ",", "ann_file", "=", "line", ".", "split", "(", ")", "\n", "image_id", "=", "int", "(", "ann_file", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "filename", "=", "self", ".", "_annotation_path", "(", "image_id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "# Some images have no bboxes after object filtering, so there", "\n", "# is no xml annotation for these.", "\n", "                ", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "\"object\"", ")", ":", "\n", "                    ", "obj_name", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "_class_to_ind", ":", "\n", "# We have to actually load and check these to make sure they have", "\n", "# at least one object actually in vocab", "\n", "                        ", "image_index", ".", "append", "(", "image_id", ")", "\n", "id_to_dir", "[", "image_id", "]", "=", "im_file", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "break", "\n", "", "", "", "", "return", "image_index", ",", "id_to_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.gt_roidb": [[205, 225], ["os.path.join", "os.path.exists", "gzip.open", "pickle.dump", "gzip.open.close", "print", "gzip.open", "pickle.load", "gzip.open.close", "print", "vg.vg._load_vg_annotation"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._load_vg_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "fid", "=", "gzip", ".", "open", "(", "cache_file", ",", "\"rb\"", ")", "\n", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "fid", ".", "close", "(", ")", "\n", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_vg_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "fid", "=", "gzip", ".", "open", "(", "cache_file", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "fid", ".", "close", "(", ")", "\n", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._get_size": [[226, 228], ["PIL.Image.open", "vg.vg.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "_get_size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_from_index", "(", "index", ")", ")", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._annotation_path": [[229, 231], ["os.path.join", "str"], "methods", ["None"], ["", "def", "_annotation_path", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"xml\"", ",", "str", "(", "index", ")", "+", "\".xml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._load_vg_annotation": [[232, 320], ["vg.vg._get_size", "vg.vg._annotation_path", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "xml.parse.findall", "len", "set", "numpy.array", "obj.find().text.lower().strip", "list", "obj.find", "max", "max", "min", "min", "obj.findall", "rel.find", "pred.lower().strip.lower().strip.lower().strip", "obj.find().text.lower", "float", "float", "float", "float", "print", "att.text.lower().strip.text.lower().strip.text.lower().strip", "pred.lower().strip.lower().strip.lower", "triple.append", "triple.append", "triple.append", "numpy.array.add", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find", "att.text.lower().strip.text.lower().strip.text.lower", "tuple", "obj.find", "rel.find", "rel.find"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_size", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._annotation_path"], ["", "def", "_load_vg_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "width", ",", "height", "=", "self", ".", "_get_size", "(", "index", ")", "\n", "filename", "=", "self", ".", "_annotation_path", "(", "index", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Max of 16 attributes are observed in the data", "\n", "gt_attributes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "16", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "obj_dict", "=", "{", "}", "\n", "ix", "=", "0", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "obj_name", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "_class_to_ind", ":", "\n", "                ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "x1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", ")", "\n", "x2", "=", "min", "(", "width", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", ")", "\n", "y2", "=", "min", "(", "height", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", ")", "\n", "# If bboxes are not positive, just give whole image coords (there are a few examples)", "\n", "if", "x2", "<", "x1", "or", "y2", "<", "y1", ":", "\n", "                    ", "print", "(", "\"Failed bbox in %s, object %s\"", "%", "(", "filename", ",", "obj_name", ")", ")", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "width", "-", "1", "\n", "y2", "=", "width", "-", "1", "\n", "", "cls", "=", "self", ".", "_class_to_ind", "[", "obj_name", "]", "\n", "obj_dict", "[", "obj", ".", "find", "(", "\"object_id\"", ")", ".", "text", "]", "=", "ix", "\n", "atts", "=", "obj", ".", "findall", "(", "\"attribute\"", ")", "\n", "n", "=", "0", "\n", "for", "att", "in", "atts", ":", "\n", "                    ", "att", "=", "att", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "att", "in", "self", ".", "_attribute_to_ind", ":", "\n", "                        ", "gt_attributes", "[", "ix", ",", "n", "]", "=", "self", ".", "_attribute_to_ind", "[", "att", "]", "\n", "n", "+=", "1", "\n", "", "if", "n", ">=", "16", ":", "\n", "                        ", "break", "\n", "", "", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "ix", "+=", "1", "\n", "# clip gt_classes and gt_relations", "\n", "", "", "gt_classes", "=", "gt_classes", "[", ":", "ix", "]", "\n", "gt_attributes", "=", "gt_attributes", "[", ":", "ix", ",", ":", "]", "\n", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "gt_attributes", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "gt_attributes", ")", "\n", "\n", "rels", "=", "tree", ".", "findall", "(", "\"relation\"", ")", "\n", "num_rels", "=", "len", "(", "rels", ")", "\n", "gt_relations", "=", "set", "(", ")", "# Avoid duplicates", "\n", "for", "rel", "in", "rels", ":", "\n", "            ", "pred", "=", "rel", ".", "find", "(", "\"predicate\"", ")", ".", "text", "\n", "if", "pred", ":", "# One is empty", "\n", "                ", "pred", "=", "pred", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "pred", "in", "self", ".", "_relation_to_ind", ":", "\n", "                    ", "try", ":", "\n", "                        ", "triple", "=", "[", "]", "\n", "triple", ".", "append", "(", "obj_dict", "[", "rel", ".", "find", "(", "\"subject_id\"", ")", ".", "text", "]", ")", "\n", "triple", ".", "append", "(", "self", ".", "_relation_to_ind", "[", "pred", "]", ")", "\n", "triple", ".", "append", "(", "obj_dict", "[", "rel", ".", "find", "(", "\"object_id\"", ")", ".", "text", "]", ")", "\n", "gt_relations", ".", "add", "(", "tuple", "(", "triple", ")", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "# Object not in dictionary", "\n", "", "", "", "", "gt_relations", "=", "np", ".", "array", "(", "list", "(", "gt_relations", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_attributes\"", ":", "gt_attributes", ",", "\n", "\"gt_relations\"", ":", "gt_relations", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.evaluate_detections": [[322, 331], ["vg.vg._write_voc_results_file", "vg.vg._do_python_eval", "vg.vg._get_vg_results_file_template().format", "os.remove", "vg.vg._get_vg_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "self", ".", "classes", ",", "all_boxes", ",", "output_dir", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg.evaluate_attributes": [[332, 341], ["vg.vg._write_voc_results_file", "vg.vg._do_python_eval", "vg.vg._get_vg_results_file_template().format", "os.remove", "vg.vg._get_vg_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "", "", "def", "evaluate_attributes", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "self", ".", "attributes", ",", "all_boxes", ",", "output_dir", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ",", "eval_attributes", "=", "True", ")", "\n", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_attributes", ":", "\n", "                ", "if", "cls", "==", "\"__no_attribute__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._get_vg_results_file_template": [[342, 346], ["os.path.join"], "methods", ["None"], ["", "", "", "def", "_get_vg_results_file_template", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "filename", "=", "\"detections_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._write_voc_results_file": [[347, 368], ["enumerate", "print", "vg.vg._get_vg_results_file_template().format", "open", "enumerate", "vg.vg._get_vg_results_file_template", "xrange", "f.write", "str"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "classes", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'Writing \"{}\" vg results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "str", "(", "index", ")", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg.vg._do_python_eval": [[371, 451], ["print", "vg.vg.gt_roidb", "enumerate", "numpy.array", "numpy.mean", "os.path.join", "numpy.array", "numpy.array.sum", "print", "print", "print", "print", "print", "zip", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "vg.vg._get_vg_results_file_template().format", "vg_eval.vg_eval.vg_eval", "print", "open", "enumerate", "print", "numpy.nan_to_num", "float", "numpy.nan_to_num.write", "numpy.mean", "numpy.average", "numpy.mean", "vg.vg._get_vg_results_file_template", "open", "pickle.dump", "os.path.join", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg_eval.vg_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", ",", "pickle", "=", "True", ",", "eval_attributes", "=", "False", ")", ":", "\n", "# We re-use parts of the pascal voc python code for visual genome", "\n", "        ", "aps", "=", "[", "]", "\n", "nposs", "=", "[", "]", "\n", "thresh", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "# Load ground truth", "\n", "", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "if", "eval_attributes", ":", "\n", "            ", "classes", "=", "self", ".", "_attributes", "\n", "", "else", ":", "\n", "            ", "classes", "=", "self", ".", "_classes", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", "or", "cls", "==", "\"__no_attribute__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", ",", "scores", ",", "npos", "=", "vg_eval", "(", "\n", "filename", ",", "\n", "gt_roidb", ",", "\n", "self", ".", "image_index", ",", "\n", "i", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", "eval_attributes", "=", "eval_attributes", ",", "\n", ")", "\n", "\n", "# Determine per class detection thresholds that maximise f score", "\n", "if", "npos", ">", "1", ":", "\n", "                ", "f", "=", "np", ".", "nan_to_num", "(", "(", "prec", "*", "rec", ")", "/", "(", "prec", "+", "rec", ")", ")", "\n", "thresh", "+=", "[", "scores", "[", "np", ".", "argmax", "(", "f", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "thresh", "+=", "[", "0", "]", "\n", "", "aps", "+=", "[", "ap", "]", "\n", "nposs", "+=", "[", "float", "(", "npos", ")", "]", "\n", "print", "(", "\"AP for {} = {:.4f} (npos={:,})\"", ".", "format", "(", "cls", ",", "ap", ",", "npos", ")", ")", "\n", "if", "pickle", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "\n", "{", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"prec\"", ":", "prec", ",", "\n", "\"ap\"", ":", "ap", ",", "\n", "\"scores\"", ":", "scores", ",", "\n", "\"npos\"", ":", "npos", ",", "\n", "}", ",", "\n", "f", ",", "\n", ")", "\n", "\n", "# Set thresh to mean for classes with poor results", "\n", "", "", "", "thresh", "=", "np", ".", "array", "(", "thresh", ")", "\n", "avg_thresh", "=", "np", ".", "mean", "(", "thresh", "[", "thresh", "!=", "0", "]", ")", "\n", "thresh", "[", "thresh", "==", "0", "]", "=", "avg_thresh", "\n", "if", "eval_attributes", ":", "\n", "            ", "filename", "=", "\"attribute_thresholds_\"", "+", "self", ".", "_image_set", "+", "\".txt\"", "\n", "", "else", ":", "\n", "            ", "filename", "=", "\"object_thresholds_\"", "+", "self", ".", "_image_set", "+", "\".txt\"", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "with", "open", "(", "path", ",", "\"wt\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", "[", "1", ":", "]", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"{:s} {:.3f}\\n\"", ".", "format", "(", "cls", ",", "thresh", "[", "i", "]", ")", ")", "\n", "\n", "", "", "weights", "=", "np", ".", "array", "(", "nposs", ")", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "\n", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"Weighted Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "average", "(", "aps", ",", "weights", "=", "weights", ")", ")", ")", "\n", "print", "(", "\"Mean Detection Threshold = {:.3f}\"", ".", "format", "(", "avg_thresh", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", ",", "npos", "in", "zip", "(", "aps", ",", "nposs", ")", ":", "\n", "            ", "print", "(", "\"{:.3f}\\t{:.3f}\"", ".", "format", "(", "ap", ",", "npos", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** PASCAL VOC Python eval code.\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.__init__": [[39, 101], ["imdb.imdb.imdb.__init__", "dict", "clipart.clipart._load_image_set_index", "str", "os.path.exists", "os.path.exists", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"clipart_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "cfg_d", ".", "CLIPART", "\n", ")", "# self._get_default_path() if devkit_path is None \\", "\n", "#        self._devkit_path = self._get_default_path() if devkit_path is None \\", "\n", "#            else devkit_path", "\n", "self", ".", "_data_path", "=", "(", "\n", "self", ".", "_devkit_path", "\n", ")", "# os.path.join(self._devkit_path, 'clipart')", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"aeroplane\"", ",", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"boat\"", ",", "\n", "\"bottle\"", ",", "\n", "\"bus\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"chair\"", ",", "\n", "\"cow\"", ",", "\n", "\"diningtable\"", ",", "\n", "\"dog\"", ",", "\n", "\"horse\"", ",", "\n", "\"motorbike\"", ",", "\n", "\"person\"", ",", "\n", "\"pottedplant\"", ",", "\n", "\"sheep\"", ",", "\n", "\"sofa\"", ",", "\n", "\"train\"", ",", "\n", "\"tvmonitor\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "# if 'ksaito' in getpass.getuser():", "\n", "#     self._image_ext = ''", "\n", "# else:", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.image_path_at": [[103, 108], ["clipart.clipart.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.image_id_at": [[109, 114], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.image_path_from_index": [[115, 124], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._load_image_set_index": [[125, 140], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._get_default_path": [[141, 146], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ")", "# self._year)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.gt_roidb": [[147, 165], ["os.path.join", "os.path.exists", "print", "print", "clipart.clipart._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "# ,encoding='latin1')", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.selective_search_roidb": [[166, 193], ["os.path.join", "os.path.exists", "print", "print", "clipart.clipart.gt_roidb", "clipart.clipart._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "clipart.clipart._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.rpn_roidb": [[194, 203], ["clipart.clipart.gt_roidb", "clipart.clipart._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "clipart.clipart._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._load_rpn_roidb": [[204, 211], ["print", "os.path.exists", "clipart.clipart.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._load_selective_search_roidb": [[212, 231], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "clipart.clipart.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._load_pascal_annotation": [[232, 285], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._save_pascal_crop": [[287, 326], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "obj.find", "obj.find", "obj.find().text.lower().strip", "float", "float", "float", "float", "int", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find"], "methods", ["None"], ["", "def", "_save_pascal_crop", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._get_comp_id": [[327, 334], ["None"], "methods", ["None"], ["", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._get_voc_results_file_template": [[335, 343], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "clipart.clipart._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._write_voc_results_file": [[344, 365], ["enumerate", "print", "clipart.clipart._get_voc_results_file_template().format", "open", "enumerate", "clipart.clipart._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._do_python_eval": [[368, 415], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "clipart.clipart._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "open", "result_f.write", "print", "int", "open", "result_f.write", "open", "pickle.dump", "numpy.mean", "os.path.join", "numpy.mean", "clipart.clipart._get_voc_results_file_template", "os.path.join", "os.path.join", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "                ", "result_f", ".", "write", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "            ", "result_f", ".", "write", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart._do_matlab_eval": [[416, 429], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "clipart.clipart._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.evaluate_detections": [[430, 441], ["clipart.clipart._write_voc_results_file", "clipart.clipart._do_python_eval", "clipart.clipart._do_matlab_eval", "clipart.clipart._get_voc_results_file_template().format", "os.remove", "clipart.clipart._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.clipart.clipart.competition_mode": [[442, 449], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.__init__": [[40, 276], ["imdb.imdb.imdb.__init__", "dict", "rpc_fake.rpc_fake._load_image_set_index", "str", "os.path.exists", "os.path.exists", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"rpc_fake\"", "+", "\"_\"", "+", "image_set", ")", "\n", "# print(self.name)", "\n", "# print('cehck!!')", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "cfg_d", ".", "PASCALRPCFAKE", "\n", "self", ".", "_data_path", "=", "self", ".", "_devkit_path", "\n", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"1_puffed_food\"", ",", "\n", "\"2_puffed_food\"", ",", "\n", "\"3_puffed_food\"", ",", "\n", "\"4_puffed_food\"", ",", "\n", "\"5_puffed_food\"", ",", "\n", "\"6_puffed_food\"", ",", "\n", "\"7_puffed_food\"", ",", "\n", "\"8_puffed_food\"", ",", "\n", "\"9_puffed_food\"", ",", "\n", "\"10_puffed_food\"", ",", "\n", "\"11_puffed_food\"", ",", "\n", "\"12_puffed_food\"", ",", "\n", "\"13_dried_fruit\"", ",", "\n", "\"14_dried_fruit\"", ",", "\n", "\"15_dried_fruit\"", ",", "\n", "\"16_dried_fruit\"", ",", "\n", "\"17_dried_fruit\"", ",", "\n", "\"18_dried_fruit\"", ",", "\n", "\"19_dried_fruit\"", ",", "\n", "\"20_dried_fruit\"", ",", "\n", "\"21_dried_fruit\"", ",", "\n", "\"22_dried_food\"", ",", "\n", "\"23_dried_food\"", ",", "\n", "\"24_dried_food\"", ",", "\n", "\"25_dried_food\"", ",", "\n", "\"26_dried_food\"", ",", "\n", "\"27_dried_food\"", ",", "\n", "\"28_dried_food\"", ",", "\n", "\"29_dried_food\"", ",", "\n", "\"30_dried_food\"", ",", "\n", "\"31_instant_drink\"", ",", "\n", "\"32_instant_drink\"", ",", "\n", "\"33_instant_drink\"", ",", "\n", "\"34_instant_drink\"", ",", "\n", "\"35_instant_drink\"", ",", "\n", "\"36_instant_drink\"", ",", "\n", "\"37_instant_drink\"", ",", "\n", "\"38_instant_drink\"", ",", "\n", "\"39_instant_drink\"", ",", "\n", "\"40_instant_drink\"", ",", "\n", "\"41_instant_drink\"", ",", "\n", "\"42_instant_noodles\"", ",", "\n", "\"43_instant_noodles\"", ",", "\n", "\"44_instant_noodles\"", ",", "\n", "\"45_instant_noodles\"", ",", "\n", "\"46_instant_noodles\"", ",", "\n", "\"47_instant_noodles\"", ",", "\n", "\"48_instant_noodles\"", ",", "\n", "\"49_instant_noodles\"", ",", "\n", "\"50_instant_noodles\"", ",", "\n", "\"51_instant_noodles\"", ",", "\n", "\"52_instant_noodles\"", ",", "\n", "\"53_instant_noodles\"", ",", "\n", "\"54_dessert\"", ",", "\n", "\"55_dessert\"", ",", "\n", "\"56_dessert\"", ",", "\n", "\"57_dessert\"", ",", "\n", "\"58_dessert\"", ",", "\n", "\"59_dessert\"", ",", "\n", "\"60_dessert\"", ",", "\n", "\"61_dessert\"", ",", "\n", "\"62_dessert\"", ",", "\n", "\"63_dessert\"", ",", "\n", "\"64_dessert\"", ",", "\n", "\"65_dessert\"", ",", "\n", "\"66_dessert\"", ",", "\n", "\"67_dessert\"", ",", "\n", "\"68_dessert\"", ",", "\n", "\"69_dessert\"", ",", "\n", "\"70_dessert\"", ",", "\n", "\"71_drink\"", ",", "\n", "\"72_drink\"", ",", "\n", "\"73_drink\"", ",", "\n", "\"74_drink\"", ",", "\n", "\"75_drink\"", ",", "\n", "\"76_drink\"", ",", "\n", "\"77_drink\"", ",", "\n", "\"78_drink\"", ",", "\n", "\"79_alcohol\"", ",", "\n", "\"80_alcohol\"", ",", "\n", "\"81_drink\"", ",", "\n", "\"82_drink\"", ",", "\n", "\"83_drink\"", ",", "\n", "\"84_drink\"", ",", "\n", "\"85_drink\"", ",", "\n", "\"86_drink\"", ",", "\n", "\"87_drink\"", ",", "\n", "\"88_alcohol\"", ",", "\n", "\"89_alcohol\"", ",", "\n", "\"90_alcohol\"", ",", "\n", "\"91_alcohol\"", ",", "\n", "\"92_alcohol\"", ",", "\n", "\"93_alcohol\"", ",", "\n", "\"94_alcohol\"", ",", "\n", "\"95_alcohol\"", ",", "\n", "\"96_alcohol\"", ",", "\n", "\"97_milk\"", ",", "\n", "\"98_milk\"", ",", "\n", "\"99_milk\"", ",", "\n", "\"100_milk\"", ",", "\n", "\"101_milk\"", ",", "\n", "\"102_milk\"", ",", "\n", "\"103_milk\"", ",", "\n", "\"104_milk\"", ",", "\n", "\"105_milk\"", ",", "\n", "\"106_milk\"", ",", "\n", "\"107_milk\"", ",", "\n", "\"108_canned_food\"", ",", "\n", "\"109_canned_food\"", ",", "\n", "\"110_canned_food\"", ",", "\n", "\"111_canned_food\"", ",", "\n", "\"112_canned_food\"", ",", "\n", "\"113_canned_food\"", ",", "\n", "\"114_canned_food\"", ",", "\n", "\"115_canned_food\"", ",", "\n", "\"116_canned_food\"", ",", "\n", "\"117_canned_food\"", ",", "\n", "\"118_canned_food\"", ",", "\n", "\"119_canned_food\"", ",", "\n", "\"120_canned_food\"", ",", "\n", "\"121_canned_food\"", ",", "\n", "\"122_chocolate\"", ",", "\n", "\"123_chocolate\"", ",", "\n", "\"124_chocolate\"", ",", "\n", "\"125_chocolate\"", ",", "\n", "\"126_chocolate\"", ",", "\n", "\"127_chocolate\"", ",", "\n", "\"128_chocolate\"", ",", "\n", "\"129_chocolate\"", ",", "\n", "\"130_chocolate\"", ",", "\n", "\"131_chocolate\"", ",", "\n", "\"132_chocolate\"", ",", "\n", "\"133_chocolate\"", ",", "\n", "\"134_gum\"", ",", "\n", "\"135_gum\"", ",", "\n", "\"136_gum\"", ",", "\n", "\"137_gum\"", ",", "\n", "\"138_gum\"", ",", "\n", "\"139_gum\"", ",", "\n", "\"140_gum\"", ",", "\n", "\"141_gum\"", ",", "\n", "\"142_candy\"", ",", "\n", "\"143_candy\"", ",", "\n", "\"144_candy\"", ",", "\n", "\"145_candy\"", ",", "\n", "\"146_candy\"", ",", "\n", "\"147_candy\"", ",", "\n", "\"148_candy\"", ",", "\n", "\"149_candy\"", ",", "\n", "\"150_candy\"", ",", "\n", "\"151_candy\"", ",", "\n", "\"152_seasoner\"", ",", "\n", "\"153_seasoner\"", ",", "\n", "\"154_seasoner\"", ",", "\n", "\"155_seasoner\"", ",", "\n", "\"156_seasoner\"", ",", "\n", "\"157_seasoner\"", ",", "\n", "\"158_seasoner\"", ",", "\n", "\"159_seasoner\"", ",", "\n", "\"160_seasoner\"", ",", "\n", "\"161_seasoner\"", ",", "\n", "\"162_seasoner\"", ",", "\n", "\"163_seasoner\"", ",", "\n", "\"164_personal_hygiene\"", ",", "\n", "\"165_personal_hygiene\"", ",", "\n", "\"166_personal_hygiene\"", ",", "\n", "\"167_personal_hygiene\"", ",", "\n", "\"168_personal_hygiene\"", ",", "\n", "\"169_personal_hygiene\"", ",", "\n", "\"170_personal_hygiene\"", ",", "\n", "\"171_personal_hygiene\"", ",", "\n", "\"172_personal_hygiene\"", ",", "\n", "\"173_personal_hygiene\"", ",", "\n", "\"174_tissue\"", ",", "\n", "\"175_tissue\"", ",", "\n", "\"176_tissue\"", ",", "\n", "\"177_tissue\"", ",", "\n", "\"178_tissue\"", ",", "\n", "\"179_tissue\"", ",", "\n", "\"180_tissue\"", ",", "\n", "\"181_tissue\"", ",", "\n", "\"182_tissue\"", ",", "\n", "\"183_tissue\"", ",", "\n", "\"184_tissue\"", ",", "\n", "\"185_tissue\"", ",", "\n", "\"186_tissue\"", ",", "\n", "\"187_tissue\"", ",", "\n", "\"188_tissue\"", ",", "\n", "\"189_tissue\"", ",", "\n", "\"190_tissue\"", ",", "\n", "\"191_tissue\"", ",", "\n", "\"192_tissue\"", ",", "\n", "\"193_tissue\"", ",", "\n", "\"194_stationery\"", ",", "\n", "\"195_stationery\"", ",", "\n", "\"196_stationery\"", ",", "\n", "\"197_stationery\"", ",", "\n", "\"198_stationery\"", ",", "\n", "\"199_stationery\"", ",", "\n", "\"200_stationery\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.image_path_at": [[278, 283], ["rpc_fake.rpc_fake.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.image_id_at": [[284, 289], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.image_path_from_index": [[290, 299], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._load_image_set_index": [[300, 315], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._get_default_path": [[316, 321], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ")", "# self._year)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.gt_roidb": [[322, 341], ["os.path.join", "os.path.exists", "print", "print", "rpc_fake.rpc_fake._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.selective_search_roidb": [[342, 368], ["os.path.join", "os.path.exists", "print", "print", "rpc_fake.rpc_fake.gt_roidb", "rpc_fake.rpc_fake._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "rpc_fake.rpc_fake._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.rpn_roidb": [[369, 378], ["rpc_fake.rpc_fake.gt_roidb", "rpc_fake.rpc_fake._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "rpc_fake.rpc_fake._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._load_rpn_roidb": [[379, 386], ["print", "os.path.exists", "rpc_fake.rpc_fake.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._load_selective_search_roidb": [[387, 406], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "rpc_fake.rpc_fake.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._load_pascal_annotation": [[407, 460], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._save_pascal_crop": [[462, 502], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "obj.find", "obj.find", "obj.find().text.lower().strip", "float", "float", "float", "float", "int", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find"], "methods", ["None"], ["", "def", "_save_pascal_crop", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._get_comp_id": [[503, 510], ["None"], "methods", ["None"], ["", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._get_voc_results_file_template": [[511, 520], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "rpc_fake.rpc_fake._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "# print(filedir)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._write_voc_results_file": [[521, 544], ["enumerate", "print", "rpc_fake.rpc_fake._get_voc_results_file_template().format", "open", "enumerate", "rpc_fake.rpc_fake._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "# print(dets[k, :])", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._do_python_eval": [[547, 595], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "rpc_fake.rpc_fake._get_voc_results_file_template().format", "print", "voc_eval.voc_eval.voc_eval", "print", "open", "result_f.write", "print", "int", "open", "result_f.write", "open", "pickle.dump", "numpy.mean", "os.path.join", "numpy.mean", "rpc_fake.rpc_fake._get_voc_results_file_template", "os.path.join", "os.path.join", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "print", "(", "filename", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "                ", "result_f", ".", "write", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "            ", "result_f", ".", "write", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake._do_matlab_eval": [[596, 609], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "rpc_fake.rpc_fake._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.evaluate_detections": [[610, 621], ["rpc_fake.rpc_fake._write_voc_results_file", "rpc_fake.rpc_fake._do_python_eval", "rpc_fake.rpc_fake._do_matlab_eval", "rpc_fake.rpc_fake._get_voc_results_file_template().format", "os.remove", "rpc_fake.rpc_fake._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc_fake.rpc_fake.competition_mode": [[622, 629], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.__init__": [[38, 86], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc_water.pascal_voc_water._load_image_set_index", "str", "os.path.exists", "os.path.exists", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"voc_water_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "cfg_d", ".", "PASCALWATER", "\n", ")", "# self._get_default_path() if devkit_path is None \\", "\n", "# else devkit_path", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "# self._classes = ('__background__',  # always index 0", "\n", "#                  'aeroplane', 'bicycle', 'bird', 'boat',", "\n", "#                  'bottle', 'bus', 'car', 'cat', 'chair',", "\n", "#                  'cow', 'diningtable', 'dog', 'horse',", "\n", "#                  'motorbike', 'person', 'pottedplant',", "\n", "#                  'sheep', 'sofa', 'train', 'tvmonitor')", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"dog\"", ",", "\n", "\"person\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.image_path_at": [[88, 93], ["pascal_voc_water.pascal_voc_water.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.image_id_at": [[94, 99], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.image_path_from_index": [[100, 109], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._load_image_set_index": [[110, 130], ["os.path.join", "os.path.exists", "numpy.array", "numpy.array", "list", "open", "pascal_voc_water.pascal_voc_water._test_pascal_annotation", "x.strip", "f.readlines", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._test_pascal_annotation"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "count_box", "=", "[", "self", ".", "_test_pascal_annotation", "(", "index", ")", "for", "index", "in", "image_index", "]", "\n", "count_box", "=", "np", ".", "array", "(", "count_box", ")", "\n", "image_index", "=", "np", ".", "array", "(", "image_index", ")", "\n", "image_index", "=", "list", "(", "image_index", "[", "np", ".", "where", "(", "count_box", ">", "0", ")", "]", ")", "\n", "# print(len(image_index))", "\n", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._get_default_path": [[131, 136], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"VOCdevkit\"", ")", "# self._year)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.gt_roidb": [[137, 157], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc_water.pascal_voc_water._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "# print(len(self._image_index))", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "#", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.selective_search_roidb": [[158, 185], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc_water.pascal_voc_water.gt_roidb", "pascal_voc_water.pascal_voc_water._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc_water.pascal_voc_water._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.rpn_roidb": [[186, 195], ["pascal_voc_water.pascal_voc_water.gt_roidb", "pascal_voc_water.pascal_voc_water._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc_water.pascal_voc_water._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._load_rpn_roidb": [[196, 203], ["print", "os.path.exists", "pascal_voc_water.pascal_voc_water.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._load_selective_search_roidb": [[204, 223], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "pascal_voc_water.pascal_voc_water.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._test_pascal_annotation": [[224, 249], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "enumerate", "obj.find().text.lower().strip", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_test_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "count", "=", "0", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "count", "+=", "1", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._load_pascal_annotation": [[250, 316], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "enumerate", "obj.find", "obj.find", "float", "float", "float", "float", "int", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower().strip", "obj.find().text.lower", "obj.find().text.lower", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "count", "=", "0", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "count", "+=", "1", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "num_objs", "=", "count", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "# Load object bounding boxes into a data frame.", "\n", "count", "=", "0", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "\n", "try", ":", "\n", "                ", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "count", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "count", "]", "=", "cls", "\n", "overlaps", "[", "count", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "count", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "ishards", "[", "count", "]", "=", "difficult", "\n", "count", "+=", "1", "\n", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "\n", "", "", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._save_pascal_crop": [[318, 358], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "obj.find", "obj.find", "obj.find().text.lower().strip", "float", "float", "float", "float", "int", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find"], "methods", ["None"], ["", "def", "_save_pascal_crop", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._get_comp_id": [[359, 366], ["None"], "methods", ["None"], ["", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._get_voc_results_file_template": [[367, 375], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "pascal_voc_water.pascal_voc_water._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._write_voc_results_file": [[376, 397], ["enumerate", "print", "pascal_voc_water.pascal_voc_water._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc_water.pascal_voc_water._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._do_python_eval": [[400, 450], ["os.path.join", "os.path.join", "os.path.join", "print", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc_water.pascal_voc_water._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc_water.pascal_voc_water._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "print", "(", "output_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water._do_matlab_eval": [[451, 464], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc_water.pascal_voc_water._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.evaluate_detections": [[465, 476], ["pascal_voc_water.pascal_voc_water._write_voc_results_file", "pascal_voc_water.pascal_voc_water._do_python_eval", "pascal_voc_water.pascal_voc_water._do_matlab_eval", "pascal_voc_water.pascal_voc_water._get_voc_results_file_template().format", "os.remove", "pascal_voc_water.pascal_voc_water._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc_water.pascal_voc_water.competition_mode": [[477, 484], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.__init__": [[40, 104], ["imdb.imdb.imdb.__init__", "dict", "water.water._load_image_set_index", "str", "os.path.exists", "os.path.exists", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"watercolor_\"", "+", "\"_\"", "+", "image_set", ")", "\n", "# print(self.name)", "\n", "# print('cehck!!')", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "cfg_d", ".", "WATER", "\n", "self", ".", "_data_path", "=", "self", ".", "_devkit_path", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"aeroplane\"", ",", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"boat\"", ",", "\n", "\"bottle\"", ",", "\n", "\"bus\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"chair\"", ",", "\n", "\"cow\"", ",", "\n", "\"diningtable\"", ",", "\n", "\"dog\"", ",", "\n", "\"horse\"", ",", "\n", "\"motorbike\"", ",", "\n", "\"person\"", ",", "\n", "\"pottedplant\"", ",", "\n", "\"sheep\"", ",", "\n", "\"sofa\"", ",", "\n", "\"train\"", ",", "\n", "\"tvmonitor\"", ",", "\n", ")", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"dog\"", ",", "\n", "\"person\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.image_path_at": [[106, 111], ["water.water.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.image_id_at": [[112, 117], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.image_path_from_index": [[118, 127], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._load_image_set_index": [[128, 143], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._get_default_path": [[144, 149], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ")", "# self._year)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.gt_roidb": [[150, 169], ["os.path.join", "os.path.exists", "print", "print", "water.water._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.selective_search_roidb": [[170, 196], ["os.path.join", "os.path.exists", "print", "print", "water.water.gt_roidb", "water.water._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "water.water._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.rpn_roidb": [[197, 206], ["water.water.gt_roidb", "water.water._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "water.water._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._load_rpn_roidb": [[207, 214], ["print", "os.path.exists", "water.water.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._load_selective_search_roidb": [[215, 234], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "water.water.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._load_pascal_annotation": [[235, 288], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._save_pascal_crop": [[290, 330], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "obj.find", "obj.find", "obj.find().text.lower().strip", "float", "float", "float", "float", "int", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find"], "methods", ["None"], ["", "def", "_save_pascal_crop", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._get_comp_id": [[331, 338], ["None"], "methods", ["None"], ["", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._get_voc_results_file_template": [[339, 348], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "water.water._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "# print(filedir)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._write_voc_results_file": [[349, 372], ["enumerate", "print", "water.water._get_voc_results_file_template().format", "open", "enumerate", "water.water._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "# print(dets[k, :])", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._do_python_eval": [[375, 423], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "water.water._get_voc_results_file_template().format", "print", "voc_eval.voc_eval.voc_eval", "print", "open", "result_f.write", "print", "int", "open", "result_f.write", "open", "pickle.dump", "numpy.mean", "os.path.join", "numpy.mean", "water.water._get_voc_results_file_template", "os.path.join", "os.path.join", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "print", "(", "filename", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "                ", "result_f", ".", "write", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "            ", "result_f", ".", "write", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water._do_matlab_eval": [[424, 437], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "water.water._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.evaluate_detections": [[438, 449], ["water.water._write_voc_results_file", "water.water._do_python_eval", "water.water._do_matlab_eval", "water.water._get_voc_results_file_template().format", "os.remove", "water.water._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.water.water.competition_mode": [[450, 457], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.vg_eval.vg_eval": [[14, 132], ["zip", "numpy.array", "numpy.array", "numpy.argsort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "numpy.zeros().astype", "open", "f.readlines", "len", "x.strip().split", "numpy.sort", "BB[].astype", "R[].astype", "float", "numpy.maximum", "sum", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.zeros", "str", "x.strip", "float", "numpy.finfo", "numpy.where", "numpy.where", "numpy.any", "item[].toarray"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_ap"], ["def", "vg_eval", "(", "\n", "detpath", ",", "\n", "gt_roidb", ",", "\n", "image_index", ",", "\n", "classindex", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", "eval_attributes", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap, sorted_scores, npos = voc_eval(\n                                detpath, \n                                gt_roidb,\n                                image_index,\n                                classindex,\n                                [ovthresh],\n                                [use_07_metric])\n\n    Top level function that does the Visual Genome evaluation.\n\n    detpath: Path to detections\n    gt_roidb: List of ground truth structs.\n    image_index: List of image ids.\n    classindex: Category index\n    [ovthresh]: Overlap threshold (default = 0.5)\n    [use_07_metric]: Whether to use VOC07's 11 point AP computation\n        (default False)\n    \"\"\"", "\n", "# extract gt objects for this class", "\n", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "item", ",", "imagename", "in", "zip", "(", "gt_roidb", ",", "image_index", ")", ":", "\n", "        ", "if", "eval_attributes", ":", "\n", "            ", "bbox", "=", "item", "[", "\"boxes\"", "]", "[", "\n", "np", ".", "where", "(", "np", ".", "any", "(", "item", "[", "\"gt_attributes\"", "]", ".", "toarray", "(", ")", "==", "classindex", ",", "axis", "=", "1", ")", ")", "[", "\n", "0", "\n", "]", ",", "\n", ":", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "item", "[", "\"boxes\"", "]", "[", "np", ".", "where", "(", "item", "[", "\"gt_classes\"", "]", "==", "classindex", ")", "[", "0", "]", ",", ":", "]", "\n", "", "difficult", "=", "np", ".", "zeros", "(", "(", "bbox", ".", "shape", "[", "0", "]", ",", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "bbox", ".", "shape", "[", "0", "]", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "str", "(", "imagename", ")", "]", "=", "{", "\"bbox\"", ":", "bbox", ",", "\"difficult\"", ":", "difficult", ",", "\"det\"", ":", "det", "}", "\n", "", "if", "npos", "==", "0", ":", "\n", "# No ground truth examples", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "npos", "\n", "\n", "# read dets", "\n", "", "with", "open", "(", "detpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "lines", ")", "==", "0", ":", "\n", "# No detection examples", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "npos", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "-", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "\"bbox\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.0", ",", "0.0", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.0", ",", "0.0", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "\n", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.0", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.0", ")", "\n", "+", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "-", "inters", "\n", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "\"difficult\"", "]", "[", "jmax", "]", ":", "\n", "                ", "if", "not", "R", "[", "\"det\"", "]", "[", "jmax", "]", ":", "\n", "                    ", "tp", "[", "d", "]", "=", "1.0", "\n", "R", "[", "\"det\"", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1.0", "\n", "", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", ",", "sorted_scores", ",", "npos", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.__init__": [[24, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "classes", "=", "None", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_num_classes", "=", "0", "\n", "if", "not", "classes", ":", "\n", "            ", "self", ".", "_classes", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_classes", "=", "classes", "\n", "", "self", ".", "_image_index", "=", "[", "]", "\n", "self", ".", "_obj_proposer", "=", "\"gt\"", "\n", "self", ".", "_roidb", "=", "None", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "default_roidb", "\n", "# Use this dict for storing dataset specific config options", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.name": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.num_classes": [[42, 45], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.classes": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.image_index": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.roidb_handler": [[58, 61], ["None"], "methods", ["None"], ["", "@", "roidb_handler", ".", "setter", "\n", "def", "roidb_handler", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_roidb_handler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.set_proposal_method": [[62, 65], ["eval"], "methods", ["None"], ["", "def", "set_proposal_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "method", "=", "eval", "(", "\"self.\"", "+", "method", "+", "\"_roidb\"", ")", "\n", "self", ".", "roidb_handler", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.roidb": [[66, 77], ["imdb.imdb.roidb_handler"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.roidb_handler"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "# A roidb is a list of dictionaries, each with the following keys:", "\n", "#   boxes", "\n", "#   gt_overlaps", "\n", "#   gt_classes", "\n", "#   flipped", "\n", "        ", "if", "self", ".", "_roidb", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_roidb", "\n", "", "self", ".", "_roidb", "=", "self", ".", "roidb_handler", "(", ")", "\n", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.cache_path": [[78, 86], ["os.abspath", "os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "        ", "cache_path", "=", "osp", ".", "abspath", "(", "\n", "osp", ".", "join", "(", "\"/data/experiments/domain-adaptation\"", ",", "\"cache\"", ")", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_path", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.num_images": [[87, 90], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.image_path_at": [[91, 93], ["None"], "methods", ["None"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.image_id_at": [[94, 96], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.default_roidb": [[97, 99], ["None"], "methods", ["None"], ["", "def", "default_roidb", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.evaluate_detections": [[100, 110], ["None"], "methods", ["None"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n    all_boxes is a list of length number-of-classes.\n    Each list element is a list of length number-of-images.\n    Each of those list elements is either an empty list []\n    or a numpy array of detection.\n\n    all_boxes[class][image] = [] or np.array of shape #dets x 5\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb._get_widths": [[111, 115], ["range", "PIL.Image.open", "imdb.imdb.image_path_at"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.append_flipped_images": [[117, 140], ["imdb.imdb._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "range", "imdb.imdb.roidb.append", "len"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "##modified", "\n", "for", "b", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "                ", "if", "boxes", "[", "b", "]", "[", "2", "]", "<", "boxes", "[", "b", "]", "[", "0", "]", ":", "\n", "                    ", "boxes", "[", "b", "]", "[", "0", "]", "=", "0", "\n", "\n", "", "", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.create_roidb_from_box_list": [[231, 263], ["range", "len", "numpy.zeros", "scipy.sparse.csr_matrix", "roidb.append", "bbox_overlaps", "bbox_overlaps.argmax", "bbox_overlaps.max", "boxes.astype", "gt_boxes.astype", "numpy.where", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_overlaps"], ["", "def", "create_roidb_from_box_list", "(", "self", ",", "box_list", ",", "gt_roidb", ")", ":", "\n", "        ", "assert", "(", "\n", "len", "(", "box_list", ")", "==", "self", ".", "num_images", "\n", ")", ",", "\"Number of boxes must match number of ground-truth images\"", "\n", "roidb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "            ", "boxes", "=", "box_list", "[", "i", "]", "\n", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "gt_roidb", "is", "not", "None", "and", "gt_roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "size", ">", "0", ":", "\n", "                ", "gt_boxes", "=", "gt_roidb", "[", "i", "]", "[", "\"boxes\"", "]", "\n", "gt_classes", "=", "gt_roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", "\n", "gt_overlaps", "=", "bbox_overlaps", "(", "\n", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", "\n", ")", "\n", "argmaxes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "maxes", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "I", "=", "np", ".", "where", "(", "maxes", ">", "0", ")", "[", "0", "]", "\n", "overlaps", "[", "I", ",", "gt_classes", "[", "argmaxes", "[", "I", "]", "]", "]", "=", "maxes", "[", "I", "]", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "roidb", ".", "append", "(", "\n", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", "\n", ")", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.merge_roidbs": [[264, 275], ["range", "len", "len", "len", "numpy.vstack", "numpy.hstack", "scipy.sparse.vstack", "numpy.hstack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "merge_roidbs", "(", "a", ",", "b", ")", ":", "\n", "        ", "assert", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "a", "[", "i", "]", "[", "\"boxes\"", "]", "=", "np", ".", "vstack", "(", "(", "a", "[", "i", "]", "[", "\"boxes\"", "]", ",", "b", "[", "i", "]", "[", "\"boxes\"", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "\"gt_classes\"", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "b", "[", "i", "]", "[", "\"gt_classes\"", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "\"gt_overlaps\"", "]", "=", "scipy", ".", "sparse", ".", "vstack", "(", "\n", "[", "a", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "b", "[", "i", "]", "[", "\"gt_overlaps\"", "]", "]", "\n", ")", "\n", "a", "[", "i", "]", "[", "\"seg_areas\"", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "b", "[", "i", "]", "[", "\"seg_areas\"", "]", ")", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imdb.imdb.competition_mode": [[276, 278], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "\"\"\"Turn competition mode on or off.\"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imagenet.imagenet.__init__": [[29, 85], ["datasets.imdb.imdb.__init__", "datasets.imdb.imdb.__init__", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "xrange", "xrange", "dict", "dict", "dict", "dict", "range", "imagenet.imagenet._load_image_set_index", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "zip", "zip", "zip", "zip", "xrange", "xrange", "xrange", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "devkit_path", ",", "data_path", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "image_set", ")", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "self", ".", "_data_path", "=", "data_path", "\n", "synsets_image", "=", "sio", ".", "loadmat", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"data\"", ",", "\"meta_det.mat\"", ")", "\n", ")", "\n", "synsets_video", "=", "sio", ".", "loadmat", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"data\"", ",", "\"meta_vid.mat\"", ")", "\n", ")", "\n", "self", ".", "_classes_image", "=", "(", "\"__background__\"", ",", ")", "\n", "self", ".", "_wnid_image", "=", "(", "0", ",", ")", "\n", "\n", "self", ".", "_classes", "=", "(", "\"__background__\"", ",", ")", "\n", "self", ".", "_wnid", "=", "(", "0", ",", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "200", ")", ":", "\n", "            ", "self", ".", "_classes_image", "=", "self", ".", "_classes_image", "+", "(", "\n", "synsets_image", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "_wnid_image", "=", "self", ".", "_wnid_image", "+", "(", "\n", "synsets_image", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "30", ")", ":", "\n", "            ", "self", ".", "_classes", "=", "self", ".", "_classes", "+", "(", "synsets_video", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ",", ")", "\n", "self", ".", "_wnid", "=", "self", ".", "_wnid", "+", "(", "synsets_video", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", ",", ")", "\n", "\n", "", "self", ".", "_wnid_to_ind_image", "=", "dict", "(", "zip", "(", "self", ".", "_wnid_image", ",", "xrange", "(", "201", ")", ")", ")", "\n", "self", ".", "_class_to_ind_image", "=", "dict", "(", "zip", "(", "self", ".", "_classes_image", ",", "xrange", "(", "201", ")", ")", ")", "\n", "\n", "self", ".", "_wnid_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "_wnid", ",", "xrange", "(", "31", ")", ")", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "_classes", ",", "xrange", "(", "31", ")", ")", ")", "\n", "\n", "# check for valid intersection between video and image classes", "\n", "self", ".", "_valid_image_flag", "=", "[", "0", "]", "*", "201", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "201", ")", ":", "\n", "            ", "if", "self", ".", "_wnid_image", "[", "i", "]", "in", "self", ".", "_wnid_to_ind", ":", "\n", "                ", "self", ".", "_valid_image_flag", "[", "i", "]", "=", "1", "\n", "\n", "", "", "self", ".", "_image_ext", "=", "[", "\".JPEG\"", "]", "\n", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "\n", "# Specific config options", "\n", "self", ".", "config", "=", "{", "\"cleanup\"", ":", "True", ",", "\"use_salt\"", ":", "True", ",", "\"top_k\"", ":", "2000", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"Devkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imagenet.imagenet.image_path_at": [[87, 92], ["imagenet.imagenet.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imagenet.imagenet.image_path_from_index": [[93, 102], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"Data\"", ",", "self", ".", "_image_set", ",", "index", "+", "self", ".", "_image_ext", "[", "0", "]", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imagenet.imagenet._load_image_set_index": [[103, 178], ["os.path.join", "os.path.exists", "range", "range", "os.path.join", "open", "open.close", "os.path.join", "open", "open.read().split", "open.close", "print", "os.path.join", "len", "numpy.random.permutation", "open.write", "open", "open", "image_index.append", "os.path.join", "len", "numpy.random.permutation", "x.strip", "open.read", "image_index.append", "x.strip", "line.split.split.split", "os.popen().read().split", "open", "image_index.append", "open.readlines", "str", "open.readlines", "tmp_list.append", "x.strip", "os.popen().read", "str", "open.readlines", "os.popen"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._data_path + /ImageSets/val.txt", "\n", "\n", "if", "self", ".", "_image_set", "==", "\"train\"", ":", "\n", "            ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"trainr.txt\"", ")", "\n", "image_index", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ":", "\n", "                ", "f", "=", "open", "(", "image_set_file", ",", "\"r\"", ")", "\n", "data", "=", "f", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "for", "lines", "in", "data", ":", "\n", "                    ", "if", "lines", "!=", "\"\"", ":", "\n", "                        ", "image_index", ".", "append", "(", "lines", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "image_index", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "200", ")", ":", "\n", "                ", "print", "(", "i", ")", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"DET\"", ",", "\"train_\"", "+", "str", "(", "i", ")", "+", "\".txt\"", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                    ", "tmp_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "vtmp_index", "=", "[", "]", "\n", "for", "line", "in", "tmp_index", ":", "\n", "                        ", "line", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "image_list", "=", "(", "\n", "os", ".", "popen", "(", "\n", "\"ls \"", "\n", "+", "self", ".", "_data_path", "\n", "+", "\"/Data/DET/train/\"", "\n", "+", "line", "[", "0", "]", "\n", "+", "\"/*.JPEG\"", "\n", ")", "\n", ".", "read", "(", ")", "\n", ".", "split", "(", ")", "\n", ")", "\n", "tmp_list", "=", "[", "]", "\n", "for", "imgs", "in", "image_list", ":", "\n", "                            ", "tmp_list", ".", "append", "(", "imgs", "[", ":", "-", "5", "]", ")", "\n", "", "vtmp_index", "=", "vtmp_index", "+", "tmp_list", "\n", "\n", "", "", "num_lines", "=", "len", "(", "vtmp_index", ")", "\n", "ids", "=", "np", ".", "random", ".", "permutation", "(", "num_lines", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "2000", ":", "\n", "                    ", "image_index", ".", "append", "(", "vtmp_index", "[", "ids", "[", "count", "%", "num_lines", "]", "]", ")", "\n", "count", "=", "count", "+", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "201", ")", ":", "\n", "                ", "if", "self", ".", "_valid_image_flag", "[", "i", "]", "==", "1", ":", "\n", "                    ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"train_pos_\"", "+", "str", "(", "i", ")", "+", "\".txt\"", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                        ", "tmp_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "num_lines", "=", "len", "(", "tmp_index", ")", "\n", "ids", "=", "np", ".", "random", ".", "permutation", "(", "num_lines", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "2000", ":", "\n", "                        ", "image_index", ".", "append", "(", "tmp_index", "[", "ids", "[", "count", "%", "num_lines", "]", "]", ")", "\n", "count", "=", "count", "+", "1", "\n", "", "", "", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"trainr.txt\"", ")", "\n", "f", "=", "open", "(", "image_set_file", ",", "\"w\"", ")", "\n", "for", "lines", "in", "image_index", ":", "\n", "                ", "f", ".", "write", "(", "lines", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"val.txt\"", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imagenet.imagenet.gt_roidb": [[179, 197], ["os.path.join", "os.path.exists", "print", "print", "imagenet.imagenet._load_imagenet_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet._load_imagenet_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_imagenet_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.imagenet.imagenet._load_imagenet_annotation": [[198, 238], ["os.path.join", "xml.parseString.getElementsByTagName", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "open", "xml.parseString", "float", "float", "float", "float", "f.read", "imagenet.imagenet._load_imagenet_annotation.get_data_from_tag"], "methods", ["None"], ["", "def", "_load_imagenet_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from txt files of imagenet.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "self", ".", "_image_set", ",", "index", "+", "\".xml\"", "\n", ")", "\n", "\n", "# print 'Loading: {}'.format(filename)", "\n", "def", "get_data_from_tag", "(", "node", ",", "tag", ")", ":", "\n", "            ", "return", "node", ".", "getElementsByTagName", "(", "tag", ")", "[", "0", "]", ".", "childNodes", "[", "0", "]", ".", "data", "\n", "\n", "", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "data", "=", "minidom", ".", "parseString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "objs", "=", "data", ".", "getElementsByTagName", "(", "\"object\"", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "x1", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"xmin\"", ")", ")", "\n", "y1", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"ymin\"", ")", ")", "\n", "x2", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"xmax\"", ")", ")", "\n", "y2", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"ymax\"", ")", ")", "\n", "cls", "=", "self", ".", "_wnid_to_ind", "[", "str", "(", "get_data_from_tag", "(", "obj", ",", "\"name\"", ")", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.__init__": [[28, 74], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "cityscapes_car.cityscapes_car._COCO.loadCats", "tuple", "dict", "dict", "cityscapes_car.cityscapes_car._load_image_set_index", "print", "cityscapes_car.cityscapes_car.set_proposal_method", "cityscapes_car.cityscapes_car.competition_mode", "cityscapes_car.cityscapes_car._get_ann_file", "cityscapes_car.cityscapes_car._COCO.getCatIds", "list", "list", "len", "zip", "zip", "list", "cityscapes_car.cityscapes_car._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"cityscapes_car\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "\"use_salt\"", ":", "True", ",", "\"cleanup\"", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"cityscapes_car\"", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "\"__background__\"", "]", "+", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "\n", "list", "(", "zip", "(", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ",", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "print", "(", "len", "(", "self", ".", "_image_index", ")", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "\"gt\"", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "\"minival2014\"", ":", "\"val2014\"", ",", "# 5k val2014 subset", "\n", "\"valminusminival2014\"", ":", "\"val2014\"", ",", "# val2014 \\setminus minival2014", "\n", "\"test-dev2015\"", ":", "\"test2015\"", ",", "\n", "\"valminuscapval2014\"", ":", "\"val2014\"", ",", "\n", "\"capval2014\"", ":", "\"val2014\"", ",", "\n", "\"captest2014\"", ":", "\"val2014\"", ",", "\n", "\"sim10k_car_train2019\"", ":", "\"train2019\"", ",", "# image_set=sim10k_car_train, year=2019", "\n", "\"sim10k_car_val2019\"", ":", "\"train2019\"", ",", "\n", "\"cityscapes_car_train_2019\"", ":", "\"train2019\"", ",", "\n", "\"cityscapes_car_val_2019\"", ":", "\"val2019\"", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "\n", "self", ".", "_view_map", "[", "coco_name", "]", "if", "coco_name", "in", "self", ".", "_view_map", "else", "coco_name", "\n", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"minival\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._get_ann_file": [[75, 81], ["os.join", "os.join", "cityscapes_car.cityscapes_car._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "\"instances\"", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", "else", "\"image_info\"", "\n", "return", "osp", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\n", "\"annotations\"", ",", "\n", "prefix", "+", "\"_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\".json\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._load_image_set_index": [[83, 89], ["cityscapes_car.cityscapes_car._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._get_widths": [[201, 203], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "r", "[", "\"width\"", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.image_path_at": [[95, 100], ["cityscapes_car.cityscapes_car.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.image_id_at": [[101, 106], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.image_path_from_index": [[107, 118], ["os.join", "os.join", "os.exists", "os.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "\"target_\"", "+", "str", "(", "index", ")", "+", "\".jpg\"", "\n", "# image_path = osp.join(self._data_path, \"images\", self._data_name, file_name)", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.gt_roidb": [[119, 137], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "cityscapes_car.cityscapes_car._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._load_coco_annotation": [[138, 199], ["cityscapes_car.cityscapes_car._COCO.getAnnIds", "cityscapes_car.cityscapes_car._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "cityscapes_car.cityscapes_car._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "\"width\"", "]", "\n", "height", "=", "im_ann", "[", "\"height\"", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "\"area\"", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "\"clean_bbox\"", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "\"clean_bbox\"", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "\"area\"", "]", "\n", "if", "obj", "[", "\"iscrowd\"", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.append_flipped_images": [[204, 226], ["cityscapes_car.cityscapes_car._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "cityscapes_car.cityscapes_car.roidb.append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"width\"", ":", "widths", "[", "i", "]", ",", "\n", "\"height\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "\"seg_areas\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._get_box_file": [[227, 232], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "        ", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".mat\"", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._print_detection_eval_metrics": [[233, 271], ["cityscapes_car.cityscapes_car._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "\n", "&", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\n", "(", "\"~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] \"", "\"~~~~\"", ")", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", "\n", ")", "\n", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "\n", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "\"~~~~ Summary metrics ~~~~\"", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._do_detection_eval": [[272, 284], ["cityscapes_car.cityscapes_car._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "cityscapes_car.cityscapes_car._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "        ", "ann_type", "=", "\"bbox\"", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "ann_type", "==", "\"segm\"", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "\"detection_results.pkl\"", ")", "\n", "with", "open", "(", "eval_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"Wrote COCO eval results to: {}\"", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._coco_results_one_category": [[285, 308], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "            ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "index", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"bbox\"", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car._write_coco_results_file": [[309, 330], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "cityscapes_car.cityscapes_car._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "        ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\n", "\"Collecting {} results ({:d}/{:d})\"", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "self", ".", "num_classes", "-", "1", "\n", ")", "\n", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "\n", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "coco_cat_id", ")", "\n", ")", "\n", "", "print", "(", "\"Writing results json to {}\"", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.evaluate_detections": [[331, 345], ["os.join", "os.join", "cityscapes_car.cityscapes_car._write_coco_results_file", "cityscapes_car.cityscapes_car._image_set.find", "cityscapes_car.cityscapes_car._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "res_file", "=", "osp", ".", "join", "(", "\n", "output_dir", ",", "(", "\"detections_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\"_results\"", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", ":", "\n", "            ", "res_file", "+=", "\"_{}\"", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "\".json\"", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", ":", "\n", "            ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscapes_car.cityscapes_car.competition_mode": [[346, 353], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_caronly_coco.instances2dict": [[34, 86], ["isinstance", "print", "Image.open", "np.array", "np.unique", "os.path.abspath", "print", "Instance", "Instance", "Instance.toDict", "instances[].append", "print", "sys.stdout.flush", "len", "cv2.findContours", "mask.copy", "c.reshape().tolist", "c.reshape"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape"], ["def", "instances2dict", "(", "imageFileList", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "imgCount", "=", "0", "\n", "instanceDict", "=", "{", "}", "\n", "\n", "if", "not", "isinstance", "(", "imageFileList", ",", "list", ")", ":", "\n", "        ", "imageFileList", "=", "[", "imageFileList", "]", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Processing {} images...\"", ".", "format", "(", "len", "(", "imageFileList", ")", ")", ")", "\n", "\n", "", "for", "imageFileName", "in", "imageFileList", ":", "\n", "# Load image", "\n", "        ", "img", "=", "Image", ".", "open", "(", "imageFileName", ")", "\n", "\n", "# Image as numpy array", "\n", "imgNp", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "# Initialize label categories", "\n", "instances", "=", "{", "}", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "instances", "[", "label", ".", "name", "]", "=", "[", "]", "\n", "\n", "# Loop through all instance ids in instance image", "\n", "", "for", "instanceId", "in", "np", ".", "unique", "(", "imgNp", ")", ":", "\n", "            ", "instanceObj", "=", "Instance", "(", "imgNp", ",", "instanceId", ")", "\n", "if", "instanceId", "<", "1000", ":", "\n", "                ", "continue", "\n", "", "instanceObj", "=", "Instance", "(", "imgNp", ",", "instanceId", ")", "\n", "instanceObj_dict", "=", "instanceObj", ".", "toDict", "(", ")", "\n", "\n", "if", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "hasInstances", ":", "\n", "                ", "mask", "=", "(", "imgNp", "==", "instanceId", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "_", ",", "contour", ",", "_", "=", "cv2", ".", "findContours", "(", "\n", "mask", ".", "copy", "(", ")", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_NONE", "\n", ")", "\n", "\n", "polygons", "=", "[", "c", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "for", "c", "in", "contour", "]", "\n", "instanceObj_dict", "[", "\"contours\"", "]", "=", "polygons", "\n", "", "instances", "[", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "name", "]", ".", "append", "(", "instanceObj_dict", ")", "\n", "\n", "", "imgKey", "=", "os", ".", "path", ".", "abspath", "(", "imageFileName", ")", "\n", "instanceDict", "[", "imgKey", "]", "=", "instances", "\n", "imgCount", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rImages Processed: {}\"", ".", "format", "(", "imgCount", ")", ",", "end", "=", "\" \"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "\n", "", "return", "instanceDict", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_caronly_coco.main": [[88, 95], ["convert_cityscapes_to_caronly_coco.instances2dict", "len", "fileList.append"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "fileList", "=", "[", "]", "\n", "if", "len", "(", "argv", ")", ">", "2", ":", "\n", "        ", "for", "arg", "in", "argv", ":", "\n", "            ", "if", "\"png\"", "in", "arg", ":", "\n", "                ", "fileList", ".", "append", "(", "arg", ")", "\n", "", "", "", "instances2dict", "(", "fileList", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_caronly_coco.parse_args": [[97, 113], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Convert dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"cityscapes_car_only\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--datadir\"", ",", "\n", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_caronly_coco.getLabelID": [[116, 121], ["int"], "function", ["None"], ["", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "    ", "if", "instID", "<", "1000", ":", "\n", "        ", "return", "instID", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_caronly_coco.convert_cityscapes_car_only": [[123, 230], ["zip", "print", "os.path.join", "os.walk", "print", "print", "print", "print", "open", "outfile.write", "filename.endswith", "len", "len", "len", "os.path.join", "json.dumps", "json.load", "images.append", "os.path.join", "print", "open", "convert_cityscapes_to_caronly_coco.instances2dict", "data_set.split", "len", "os.path.join", "annotations.append", "data_set.split", "print", "len", "min", "print", "boxes.xyxy_to_xywh().tolist", "len", "len", "len", "len", "boxes.xyxy_to_xywh", "segms.polys_to_boxes", "data_set.split", "data_set.split"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.boxes.xyxy_to_xywh", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.segms.polys_to_boxes"], ["", "", "def", "convert_cityscapes_car_only", "(", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert from cityscapes format to COCO instance seg format - polygons\"\"\"", "\n", "sets", "=", "[", "\n", "\"gtFine_val\"", ",", "\n", "\"gtFine_train\"", ",", "\n", "# 'gtFine_test',", "\n", "# 'gtCoarse_train',", "\n", "# 'gtCoarse_val',", "\n", "# 'gtCoarse_train_extra'", "\n", "]", "\n", "ann_dirs", "=", "[", "\n", "\"gtFine_trainvaltest/gtFine/val\"", ",", "\n", "\"gtFine_trainvaltest/gtFine/train\"", ",", "\n", "# 'gtFine_trainvaltest/gtFine/test',", "\n", "# 'gtCoarse/train',", "\n", "# 'gtCoarse/train_extra',", "\n", "# 'gtCoarse/val'", "\n", "]", "\n", "json_name", "=", "\"caronly_filtered_%s.json\"", "\n", "ends_in", "=", "\"%s_polygons.json\"", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "cat_id", "=", "1", "\n", "category_dict", "=", "{", "}", "\n", "\n", "category_instancesonly", "=", "[", "\n", "\"car\"", ",", "\n", "]", "\n", "\n", "for", "data_set", ",", "ann_dir", "in", "zip", "(", "sets", ",", "ann_dirs", ")", ":", "\n", "        ", "print", "(", "\"Starting %s\"", "%", "data_set", ")", "\n", "ann_dict", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "ann_dir", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ann_dir", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "len", "(", "images", ")", "%", "50", "==", "0", ":", "\n", "                        ", "print", "(", "\n", "\"Processed %s images, %s annotations\"", "\n", "%", "(", "len", "(", "images", ")", ",", "len", "(", "annotations", ")", ")", "\n", ")", "\n", "", "json_ann", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", ")", "\n", "image", "=", "{", "}", "\n", "image", "[", "\"id\"", "]", "=", "img_id", "\n", "img_id", "+=", "1", "\n", "\n", "image", "[", "\"width\"", "]", "=", "json_ann", "[", "\"imgWidth\"", "]", "\n", "image", "[", "\"height\"", "]", "=", "json_ann", "[", "\"imgHeight\"", "]", "\n", "image", "[", "\"file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"leftImg8bit.png\"", "\n", ")", "\n", "image", "[", "\"seg_file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"%s_instanceIds.png\"", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "image", "[", "\"seg_file_name\"", "]", ")", "\n", "objects", "=", "instances2dict", "(", "[", "fullname", "]", ",", "verbose", "=", "False", ")", "[", "fullname", "]", "\n", "\n", "for", "object_cls", "in", "objects", ":", "\n", "                        ", "if", "object_cls", "not", "in", "category_instancesonly", ":", "\n", "                            ", "continue", "# skip non-instance categories", "\n", "\n", "", "for", "obj", "in", "objects", "[", "object_cls", "]", ":", "\n", "                            ", "if", "obj", "[", "\"contours\"", "]", "==", "[", "]", ":", "\n", "                                ", "print", "(", "\"Warning: empty contours.\"", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "len_p", "=", "[", "len", "(", "p", ")", "for", "p", "in", "obj", "[", "\"contours\"", "]", "]", "\n", "if", "min", "(", "len_p", ")", "<=", "4", ":", "\n", "                                ", "print", "(", "\"Warning: invalid contours.\"", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "ann", "=", "{", "}", "\n", "ann", "[", "\"id\"", "]", "=", "ann_id", "\n", "ann_id", "+=", "1", "\n", "ann", "[", "\"image_id\"", "]", "=", "image", "[", "\"id\"", "]", "\n", "ann", "[", "\"segmentation\"", "]", "=", "obj", "[", "\"contours\"", "]", "\n", "\n", "if", "object_cls", "not", "in", "category_dict", ":", "\n", "                                ", "category_dict", "[", "object_cls", "]", "=", "cat_id", "\n", "cat_id", "+=", "1", "\n", "", "ann", "[", "\"category_id\"", "]", "=", "category_dict", "[", "object_cls", "]", "\n", "ann", "[", "\"iscrowd\"", "]", "=", "0", "\n", "ann", "[", "\"area\"", "]", "=", "obj", "[", "\"pixelCount\"", "]", "\n", "ann", "[", "\"bbox\"", "]", "=", "bboxs_util", ".", "xyxy_to_xywh", "(", "\n", "segms_util", ".", "polys_to_boxes", "(", "[", "ann", "[", "\"segmentation\"", "]", "]", ")", "\n", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "", "", "", "ann_dict", "[", "\"images\"", "]", "=", "images", "\n", "categories", "=", "[", "\n", "{", "\"id\"", ":", "category_dict", "[", "name", "]", ",", "\"name\"", ":", "name", "}", "for", "name", "in", "category_dict", "\n", "]", "\n", "ann_dict", "[", "\"categories\"", "]", "=", "categories", "\n", "ann_dict", "[", "\"annotations\"", "]", "=", "annotations", "\n", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "categories", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "annotations", ")", ")", "\n", "print", "(", "categories", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_sim10k_to_coco.parse_args": [[21, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Convert dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"sim10k\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--datadir\"", ",", "\n", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_sim10k_to_coco.addCatItem": [[39, 49], ["dict", "coco[].append"], "function", ["None"], ["", "def", "addCatItem", "(", "name", ")", ":", "\n", "    ", "global", "category_item_id", "\n", "category_item", "=", "dict", "(", ")", "\n", "category_item", "[", "\"supercategory\"", "]", "=", "\"none\"", "\n", "category_item_id", "+=", "1", "\n", "category_item", "[", "\"id\"", "]", "=", "category_item_id", "\n", "category_item", "[", "\"name\"", "]", "=", "name", "\n", "coco", "[", "\"categories\"", "]", ".", "append", "(", "category_item", ")", "\n", "category_set", "[", "name", "]", "=", "category_item_id", "\n", "return", "category_item_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_sim10k_to_coco.addImgItem": [[51, 68], ["dict", "coco[].append", "image_set.add", "Exception", "Exception", "Exception"], "function", ["None"], ["", "def", "addImgItem", "(", "file_name", ",", "size", ")", ":", "\n", "    ", "global", "image_id", "\n", "if", "file_name", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find filename tag in xml file.\"", ")", "\n", "", "if", "size", "[", "\"width\"", "]", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find width tag in xml file.\"", ")", "\n", "", "if", "size", "[", "\"height\"", "]", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find height tag in xml file.\"", ")", "\n", "", "image_id", "+=", "1", "\n", "image_item", "=", "dict", "(", ")", "\n", "image_item", "[", "\"id\"", "]", "=", "image_id", "\n", "image_item", "[", "\"file_name\"", "]", "=", "file_name", "\n", "image_item", "[", "\"width\"", "]", "=", "size", "[", "\"width\"", "]", "\n", "image_item", "[", "\"height\"", "]", "=", "size", "[", "\"height\"", "]", "\n", "coco", "[", "\"images\"", "]", ".", "append", "(", "image_item", ")", "\n", "image_set", ".", "add", "(", "file_name", ")", "\n", "return", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_sim10k_to_coco.addAnnoItem": [[70, 100], ["dict", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "annotation_item[].append", "coco[].append"], "function", ["None"], ["", "def", "addAnnoItem", "(", "object_name", ",", "image_id", ",", "category_id", ",", "bbox", ")", ":", "\n", "    ", "global", "annotation_id", "\n", "annotation_item", "=", "dict", "(", ")", "\n", "annotation_item", "[", "\"segmentation\"", "]", "=", "[", "]", "\n", "seg", "=", "[", "]", "\n", "# bbox[] is x,y,w,h", "\n", "# left_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "# left_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "\n", "annotation_item", "[", "\"segmentation\"", "]", ".", "append", "(", "seg", ")", "\n", "\n", "annotation_item", "[", "\"area\"", "]", "=", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", "\n", "annotation_item", "[", "\"iscrowd\"", "]", "=", "0", "\n", "annotation_item", "[", "\"ignore\"", "]", "=", "0", "\n", "annotation_item", "[", "\"image_id\"", "]", "=", "image_id", "\n", "annotation_item", "[", "\"bbox\"", "]", "=", "bbox", "\n", "annotation_item", "[", "\"category_id\"", "]", "=", "category_id", "\n", "annotation_id", "+=", "1", "\n", "annotation_item", "[", "\"id\"", "]", "=", "annotation_id", "\n", "coco", "[", "\"annotations\"", "]", ".", "append", "(", "annotation_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_sim10k_to_coco.parseXmlFiles": [[102, 212], ["sorted", "print", "print", "print", "print", "os.listdir", "dict", "dict", "os.path.join", "print", "xml.parse", "ET.parse.getroot", "f.endswith", "Exception", "len", "len", "len", "Exception", "bbox.append", "bbox.append", "bbox.append", "bbox.append", "print", "convert_sim10k_to_coco.addAnnoItem", "convert_sim10k_to_coco.addImgItem", "print", "Exception", "f.split", "int", "int", "Exception", "Exception", "Exception", "Exception", "Exception"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addAnnoItem", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addImgItem"], ["", "def", "parseXmlFiles", "(", "xml_path", ")", ":", "\n", "\n", "    ", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "xml_path", ")", ")", ":", "\n", "        ", "if", "not", "f", ".", "endswith", "(", "\".xml\"", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "bndbox", "=", "dict", "(", ")", "\n", "size", "=", "dict", "(", ")", "\n", "current_image_id", "=", "None", "\n", "current_category_id", "=", "None", "\n", "file_name", "=", "None", "\n", "size", "[", "\"width\"", "]", "=", "None", "\n", "size", "[", "\"height\"", "]", "=", "None", "\n", "size", "[", "\"depth\"", "]", "=", "None", "\n", "\n", "xml_file", "=", "os", ".", "path", ".", "join", "(", "xml_path", ",", "f", ")", "\n", "print", "(", "xml_file", ")", "\n", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_file", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "if", "root", ".", "tag", "!=", "\"annotation\"", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"pascal voc xml root element should be annotation, rather than {}\"", ".", "format", "(", "\n", "root", ".", "tag", "\n", ")", "\n", ")", "\n", "\n", "# elem is <folder>, <filename>, <size>, <object>", "\n", "", "for", "elem", "in", "root", ":", "\n", "            ", "current_parent", "=", "elem", ".", "tag", "\n", "current_sub", "=", "None", "\n", "object_name", "=", "None", "\n", "\n", "if", "elem", ".", "tag", "==", "\"folder\"", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "elem", ".", "tag", "==", "\"filename\"", ":", "\n", "                ", "file_name", "=", "elem", ".", "text", "\n", "file_name", "=", "f", ".", "split", "(", "\".xml\"", ")", "[", "0", "]", "+", "\".jpg\"", "\n", "if", "file_name", "in", "category_set", ":", "\n", "                    ", "raise", "Exception", "(", "\"file_name duplicated\"", ")", "\n", "\n", "# subelem is <width>, <height>, <depth>, <name>, <bndbox>", "\n", "", "", "for", "subelem", "in", "elem", ":", "\n", "                ", "bndbox", "[", "\"xmin\"", "]", "=", "None", "\n", "bndbox", "[", "\"xmax\"", "]", "=", "None", "\n", "bndbox", "[", "\"ymin\"", "]", "=", "None", "\n", "bndbox", "[", "\"ymax\"", "]", "=", "None", "\n", "\n", "current_sub", "=", "subelem", ".", "tag", "\n", "if", "current_parent", "==", "\"object\"", "and", "subelem", ".", "tag", "==", "\"name\"", ":", "\n", "                    ", "object_name", "=", "subelem", ".", "text", "\n", "if", "object_name", "not", "in", "category_set", ":", "\n", "                        ", "break", "\n", "# current_category_id = addCatItem(object_name)", "\n", "", "else", ":", "\n", "                        ", "current_category_id", "=", "category_set", "[", "object_name", "]", "\n", "\n", "", "", "elif", "current_parent", "==", "\"size\"", ":", "\n", "                    ", "if", "size", "[", "subelem", ".", "tag", "]", "is", "not", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at size tag.\"", ")", "\n", "", "size", "[", "subelem", ".", "tag", "]", "=", "int", "(", "subelem", ".", "text", ")", "\n", "\n", "# option is <xmin>, <ymin>, <xmax>, <ymax>, when subelem is <bndbox>", "\n", "", "for", "option", "in", "subelem", ":", "\n", "                    ", "if", "current_sub", "==", "\"bndbox\"", ":", "\n", "                        ", "if", "bndbox", "[", "option", ".", "tag", "]", "is", "not", "None", ":", "\n", "                            ", "raise", "Exception", "(", "\"xml structure corrupted at bndbox tag.\"", ")", "\n", "", "bndbox", "[", "option", ".", "tag", "]", "=", "int", "(", "option", ".", "text", ")", "\n", "\n", "# only after parse the <object> tag", "\n", "", "", "if", "bndbox", "[", "\"xmin\"", "]", "is", "not", "None", ":", "\n", "                    ", "if", "object_name", "is", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at bndbox tag\"", ")", "\n", "", "if", "current_image_id", "is", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at bndbox tag\"", ")", "\n", "", "if", "current_category_id", "is", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at bndbox tag\"", ")", "\n", "", "bbox", "=", "[", "]", "\n", "# x", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"xmin\"", "]", ")", "\n", "# y", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"ymin\"", "]", ")", "\n", "# w", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"xmax\"", "]", "-", "bndbox", "[", "\"xmin\"", "]", ")", "\n", "# h", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"ymax\"", "]", "-", "bndbox", "[", "\"ymin\"", "]", ")", "\n", "print", "(", "\n", "\"add annotation with {},{},{},{}\"", ".", "format", "(", "\n", "object_name", ",", "current_image_id", ",", "current_category_id", ",", "bbox", "\n", ")", "\n", ")", "\n", "addAnnoItem", "(", "\n", "object_name", ",", "current_image_id", ",", "current_category_id", ",", "bbox", "\n", ")", "\n", "# add img item only after parse <size> tag", "\n", "", "", "if", "(", "\n", "current_image_id", "is", "None", "\n", "and", "file_name", "is", "not", "None", "\n", "and", "size", "[", "\"width\"", "]", "is", "not", "None", "\n", ")", ":", "\n", "                ", "if", "file_name", "not", "in", "image_set", ":", "\n", "                    ", "current_image_id", "=", "addImgItem", "(", "file_name", ",", "size", ")", "\n", "print", "(", "\"add image with {} and {}\"", ".", "format", "(", "file_name", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"duplicated image: {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "", "", "", "", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "coco", "[", "\"categories\"", "]", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "coco", "[", "\"images\"", "]", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "coco", "[", "\"annotations\"", "]", ")", ")", "\n", "print", "(", "category_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_unlabeled_caronly_coco.parse_args": [[30, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Convert dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "help", "=", "\"cityscapes_unlabeled_car_only\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--datadir\"", ",", "\n", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_unlabeled_caronly_coco.getLabelID": [[51, 56], ["int"], "function", ["None"], ["", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "    ", "if", "instID", "<", "1000", ":", "\n", "        ", "return", "instID", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.convert_cityscapes_to_unlabeled_caronly_coco.convert_cityscapes_car_only": [[58, 171], ["zip", "print", "os.path.join", "os.walk", "print", "print", "print", "print", "open", "outfile.write", "filename.endswith", "len", "len", "len", "os.path.join", "json.dumps", "json.load", "images.append", "os.path.join", "bbox.append", "bbox.append", "bbox.append", "bbox.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "annotations.append", "print", "open", "cityscapesscripts.instances2dict", "int", "int", "data_set.split", "len", "os.path.join", "data_set.split", "len", "len", "len", "len", "data_set.split", "data_set.split"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict"], ["", "", "def", "convert_cityscapes_car_only", "(", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert from cityscapes format to COCO instance seg format - polygons\"\"\"", "\n", "sets", "=", "[", "\n", "\"gtFine_val\"", ",", "\n", "\"gtFine_train\"", ",", "\n", "# 'gtFine_test',", "\n", "# 'gtCoarse_train',", "\n", "# 'gtCoarse_val',", "\n", "# 'gtCoarse_train_extra'", "\n", "]", "\n", "ann_dirs", "=", "[", "\n", "\"gtFine_trainvaltest/gtFine/val\"", ",", "\n", "\"gtFine_trainvaltest/gtFine/train\"", ",", "\n", "# 'gtFine_trainvaltest/gtFine/test',", "\n", "# 'gtCoarse/train',", "\n", "# 'gtCoarse/train_extra',", "\n", "# 'gtCoarse/val'", "\n", "]", "\n", "json_name", "=", "\"caronly_filtered_unlabeled_%s.json\"", "\n", "ends_in", "=", "\"%s_polygons.json\"", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "cat_id", "=", "1", "\n", "category_dict", "=", "{", "}", "\n", "\n", "category_instancesonly", "=", "[", "\n", "\"car\"", ",", "\n", "]", "\n", "category_dict", "[", "\"car\"", "]", "=", "cat_id", "\n", "\n", "for", "data_set", ",", "ann_dir", "in", "zip", "(", "sets", ",", "ann_dirs", ")", ":", "\n", "        ", "print", "(", "\"Starting %s\"", "%", "data_set", ")", "\n", "ann_dict", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "ann_dir", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ann_dir", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "len", "(", "images", ")", "%", "50", "==", "0", ":", "\n", "                        ", "print", "(", "\n", "\"Processed %s images, %s annotations\"", "\n", "%", "(", "len", "(", "images", ")", ",", "len", "(", "annotations", ")", ")", "\n", ")", "\n", "", "json_ann", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", ")", "\n", "image", "=", "{", "}", "\n", "image", "[", "\"id\"", "]", "=", "img_id", "\n", "img_id", "+=", "1", "\n", "\n", "image", "[", "\"width\"", "]", "=", "json_ann", "[", "\"imgWidth\"", "]", "\n", "image", "[", "\"height\"", "]", "=", "json_ann", "[", "\"imgHeight\"", "]", "\n", "image", "[", "\"file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"leftImg8bit.png\"", "\n", ")", "\n", "image", "[", "\"seg_file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"%s_instanceIds.png\"", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "image", "[", "\"seg_file_name\"", "]", ")", "\n", "objects", "=", "cs", ".", "instances2dict", "(", "[", "fullname", "]", ",", "verbose", "=", "False", ")", "[", "fullname", "]", "\n", "\n", "bbox", "=", "[", "]", "\n", "# x", "\n", "bbox", ".", "append", "(", "0", ")", "\n", "# y", "\n", "bbox", ".", "append", "(", "0", ")", "\n", "# w", "\n", "bbox", ".", "append", "(", "int", "(", "json_ann", "[", "\"imgWidth\"", "]", ")", ")", "\n", "# h", "\n", "bbox", ".", "append", "(", "int", "(", "json_ann", "[", "\"imgHeight\"", "]", ")", ")", "\n", "\n", "seg", "=", "[", "]", "\n", "# bbox[] is x,y,w,h", "\n", "# left_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "# left_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "\n", "ann", "=", "{", "}", "\n", "ann", "[", "\"id\"", "]", "=", "ann_id", "\n", "ann_id", "+=", "1", "\n", "ann", "[", "\"image_id\"", "]", "=", "image", "[", "\"id\"", "]", "\n", "ann", "[", "\"segmentation\"", "]", "=", "[", "seg", "]", "\n", "ann", "[", "\"category_id\"", "]", "=", "1", "\n", "ann", "[", "\"iscrowd\"", "]", "=", "0", "\n", "ann", "[", "\"area\"", "]", "=", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", "\n", "ann", "[", "\"bbox\"", "]", "=", "bbox", "\n", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "", "ann_dict", "[", "\"images\"", "]", "=", "images", "\n", "categories", "=", "[", "\n", "{", "\"id\"", ":", "category_dict", "[", "name", "]", ",", "\"name\"", ":", "name", "}", "for", "name", "in", "category_dict", "\n", "]", "\n", "ann_dict", "[", "\"categories\"", "]", "=", "categories", "\n", "ann_dict", "[", "\"annotations\"", "]", "=", "annotations", "\n", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "categories", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "annotations", ")", ")", "\n", "print", "(", "categories", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.__init__": [[40, 276], ["imdb.imdb.imdb.__init__", "dict", "rpc.rpc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"rpc\"", "+", "\"_\"", "+", "image_set", ")", "\n", "# print(self.name)", "\n", "# print('cehck!!')", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "cfg_d", ".", "PASCALRPC", "\n", "self", ".", "_data_path", "=", "self", ".", "_devkit_path", "\n", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"1_puffed_food\"", ",", "\n", "\"2_puffed_food\"", ",", "\n", "\"3_puffed_food\"", ",", "\n", "\"4_puffed_food\"", ",", "\n", "\"5_puffed_food\"", ",", "\n", "\"6_puffed_food\"", ",", "\n", "\"7_puffed_food\"", ",", "\n", "\"8_puffed_food\"", ",", "\n", "\"9_puffed_food\"", ",", "\n", "\"10_puffed_food\"", ",", "\n", "\"11_puffed_food\"", ",", "\n", "\"12_puffed_food\"", ",", "\n", "\"13_dried_fruit\"", ",", "\n", "\"14_dried_fruit\"", ",", "\n", "\"15_dried_fruit\"", ",", "\n", "\"16_dried_fruit\"", ",", "\n", "\"17_dried_fruit\"", ",", "\n", "\"18_dried_fruit\"", ",", "\n", "\"19_dried_fruit\"", ",", "\n", "\"20_dried_fruit\"", ",", "\n", "\"21_dried_fruit\"", ",", "\n", "\"22_dried_food\"", ",", "\n", "\"23_dried_food\"", ",", "\n", "\"24_dried_food\"", ",", "\n", "\"25_dried_food\"", ",", "\n", "\"26_dried_food\"", ",", "\n", "\"27_dried_food\"", ",", "\n", "\"28_dried_food\"", ",", "\n", "\"29_dried_food\"", ",", "\n", "\"30_dried_food\"", ",", "\n", "\"31_instant_drink\"", ",", "\n", "\"32_instant_drink\"", ",", "\n", "\"33_instant_drink\"", ",", "\n", "\"34_instant_drink\"", ",", "\n", "\"35_instant_drink\"", ",", "\n", "\"36_instant_drink\"", ",", "\n", "\"37_instant_drink\"", ",", "\n", "\"38_instant_drink\"", ",", "\n", "\"39_instant_drink\"", ",", "\n", "\"40_instant_drink\"", ",", "\n", "\"41_instant_drink\"", ",", "\n", "\"42_instant_noodles\"", ",", "\n", "\"43_instant_noodles\"", ",", "\n", "\"44_instant_noodles\"", ",", "\n", "\"45_instant_noodles\"", ",", "\n", "\"46_instant_noodles\"", ",", "\n", "\"47_instant_noodles\"", ",", "\n", "\"48_instant_noodles\"", ",", "\n", "\"49_instant_noodles\"", ",", "\n", "\"50_instant_noodles\"", ",", "\n", "\"51_instant_noodles\"", ",", "\n", "\"52_instant_noodles\"", ",", "\n", "\"53_instant_noodles\"", ",", "\n", "\"54_dessert\"", ",", "\n", "\"55_dessert\"", ",", "\n", "\"56_dessert\"", ",", "\n", "\"57_dessert\"", ",", "\n", "\"58_dessert\"", ",", "\n", "\"59_dessert\"", ",", "\n", "\"60_dessert\"", ",", "\n", "\"61_dessert\"", ",", "\n", "\"62_dessert\"", ",", "\n", "\"63_dessert\"", ",", "\n", "\"64_dessert\"", ",", "\n", "\"65_dessert\"", ",", "\n", "\"66_dessert\"", ",", "\n", "\"67_dessert\"", ",", "\n", "\"68_dessert\"", ",", "\n", "\"69_dessert\"", ",", "\n", "\"70_dessert\"", ",", "\n", "\"71_drink\"", ",", "\n", "\"72_drink\"", ",", "\n", "\"73_drink\"", ",", "\n", "\"74_drink\"", ",", "\n", "\"75_drink\"", ",", "\n", "\"76_drink\"", ",", "\n", "\"77_drink\"", ",", "\n", "\"78_drink\"", ",", "\n", "\"79_alcohol\"", ",", "\n", "\"80_alcohol\"", ",", "\n", "\"81_drink\"", ",", "\n", "\"82_drink\"", ",", "\n", "\"83_drink\"", ",", "\n", "\"84_drink\"", ",", "\n", "\"85_drink\"", ",", "\n", "\"86_drink\"", ",", "\n", "\"87_drink\"", ",", "\n", "\"88_alcohol\"", ",", "\n", "\"89_alcohol\"", ",", "\n", "\"90_alcohol\"", ",", "\n", "\"91_alcohol\"", ",", "\n", "\"92_alcohol\"", ",", "\n", "\"93_alcohol\"", ",", "\n", "\"94_alcohol\"", ",", "\n", "\"95_alcohol\"", ",", "\n", "\"96_alcohol\"", ",", "\n", "\"97_milk\"", ",", "\n", "\"98_milk\"", ",", "\n", "\"99_milk\"", ",", "\n", "\"100_milk\"", ",", "\n", "\"101_milk\"", ",", "\n", "\"102_milk\"", ",", "\n", "\"103_milk\"", ",", "\n", "\"104_milk\"", ",", "\n", "\"105_milk\"", ",", "\n", "\"106_milk\"", ",", "\n", "\"107_milk\"", ",", "\n", "\"108_canned_food\"", ",", "\n", "\"109_canned_food\"", ",", "\n", "\"110_canned_food\"", ",", "\n", "\"111_canned_food\"", ",", "\n", "\"112_canned_food\"", ",", "\n", "\"113_canned_food\"", ",", "\n", "\"114_canned_food\"", ",", "\n", "\"115_canned_food\"", ",", "\n", "\"116_canned_food\"", ",", "\n", "\"117_canned_food\"", ",", "\n", "\"118_canned_food\"", ",", "\n", "\"119_canned_food\"", ",", "\n", "\"120_canned_food\"", ",", "\n", "\"121_canned_food\"", ",", "\n", "\"122_chocolate\"", ",", "\n", "\"123_chocolate\"", ",", "\n", "\"124_chocolate\"", ",", "\n", "\"125_chocolate\"", ",", "\n", "\"126_chocolate\"", ",", "\n", "\"127_chocolate\"", ",", "\n", "\"128_chocolate\"", ",", "\n", "\"129_chocolate\"", ",", "\n", "\"130_chocolate\"", ",", "\n", "\"131_chocolate\"", ",", "\n", "\"132_chocolate\"", ",", "\n", "\"133_chocolate\"", ",", "\n", "\"134_gum\"", ",", "\n", "\"135_gum\"", ",", "\n", "\"136_gum\"", ",", "\n", "\"137_gum\"", ",", "\n", "\"138_gum\"", ",", "\n", "\"139_gum\"", ",", "\n", "\"140_gum\"", ",", "\n", "\"141_gum\"", ",", "\n", "\"142_candy\"", ",", "\n", "\"143_candy\"", ",", "\n", "\"144_candy\"", ",", "\n", "\"145_candy\"", ",", "\n", "\"146_candy\"", ",", "\n", "\"147_candy\"", ",", "\n", "\"148_candy\"", ",", "\n", "\"149_candy\"", ",", "\n", "\"150_candy\"", ",", "\n", "\"151_candy\"", ",", "\n", "\"152_seasoner\"", ",", "\n", "\"153_seasoner\"", ",", "\n", "\"154_seasoner\"", ",", "\n", "\"155_seasoner\"", ",", "\n", "\"156_seasoner\"", ",", "\n", "\"157_seasoner\"", ",", "\n", "\"158_seasoner\"", ",", "\n", "\"159_seasoner\"", ",", "\n", "\"160_seasoner\"", ",", "\n", "\"161_seasoner\"", ",", "\n", "\"162_seasoner\"", ",", "\n", "\"163_seasoner\"", ",", "\n", "\"164_personal_hygiene\"", ",", "\n", "\"165_personal_hygiene\"", ",", "\n", "\"166_personal_hygiene\"", ",", "\n", "\"167_personal_hygiene\"", ",", "\n", "\"168_personal_hygiene\"", ",", "\n", "\"169_personal_hygiene\"", ",", "\n", "\"170_personal_hygiene\"", ",", "\n", "\"171_personal_hygiene\"", ",", "\n", "\"172_personal_hygiene\"", ",", "\n", "\"173_personal_hygiene\"", ",", "\n", "\"174_tissue\"", ",", "\n", "\"175_tissue\"", ",", "\n", "\"176_tissue\"", ",", "\n", "\"177_tissue\"", ",", "\n", "\"178_tissue\"", ",", "\n", "\"179_tissue\"", ",", "\n", "\"180_tissue\"", ",", "\n", "\"181_tissue\"", ",", "\n", "\"182_tissue\"", ",", "\n", "\"183_tissue\"", ",", "\n", "\"184_tissue\"", ",", "\n", "\"185_tissue\"", ",", "\n", "\"186_tissue\"", ",", "\n", "\"187_tissue\"", ",", "\n", "\"188_tissue\"", ",", "\n", "\"189_tissue\"", ",", "\n", "\"190_tissue\"", ",", "\n", "\"191_tissue\"", ",", "\n", "\"192_tissue\"", ",", "\n", "\"193_tissue\"", ",", "\n", "\"194_stationery\"", ",", "\n", "\"195_stationery\"", ",", "\n", "\"196_stationery\"", ",", "\n", "\"197_stationery\"", ",", "\n", "\"198_stationery\"", ",", "\n", "\"199_stationery\"", ",", "\n", "\"200_stationery\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.image_path_at": [[278, 283], ["rpc.rpc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.image_id_at": [[284, 289], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.image_path_from_index": [[290, 299], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._load_image_set_index": [[300, 315], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._get_default_path": [[316, 321], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ")", "# self._year)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.gt_roidb": [[322, 341], ["os.path.join", "os.path.exists", "print", "print", "rpc.rpc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.selective_search_roidb": [[342, 368], ["os.path.join", "os.path.exists", "print", "print", "rpc.rpc.gt_roidb", "rpc.rpc._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "rpc.rpc._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.rpn_roidb": [[369, 378], ["rpc.rpc.gt_roidb", "rpc.rpc._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "rpc.rpc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._load_rpn_roidb": [[379, 386], ["print", "os.path.exists", "rpc.rpc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._load_selective_search_roidb": [[387, 406], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "rpc.rpc.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._load_pascal_annotation": [[407, 460], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._save_pascal_crop": [[462, 502], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "obj.find", "obj.find", "obj.find().text.lower().strip", "float", "float", "float", "float", "int", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find"], "methods", ["None"], ["", "def", "_save_pascal_crop", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._get_comp_id": [[503, 510], ["None"], "methods", ["None"], ["", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._get_voc_results_file_template": [[511, 520], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "rpc.rpc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "# print(filedir)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._write_voc_results_file": [[521, 544], ["enumerate", "print", "rpc.rpc._get_voc_results_file_template().format", "open", "enumerate", "rpc.rpc._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "# print(dets[k, :])", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._do_python_eval": [[547, 595], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "rpc.rpc._get_voc_results_file_template().format", "print", "voc_eval.voc_eval.voc_eval", "print", "open", "result_f.write", "print", "int", "open", "result_f.write", "open", "pickle.dump", "numpy.mean", "os.path.join", "numpy.mean", "rpc.rpc._get_voc_results_file_template", "os.path.join", "os.path.join", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "print", "(", "filename", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "                ", "result_f", ".", "write", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "            ", "result_f", ".", "write", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc._do_matlab_eval": [[596, 609], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "rpc.rpc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.evaluate_detections": [[610, 621], ["rpc.rpc._write_voc_results_file", "rpc.rpc._do_python_eval", "rpc.rpc._do_matlab_eval", "rpc.rpc._get_voc_results_file_template().format", "os.remove", "rpc.rpc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.rpc.rpc.competition_mode": [[622, 629], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.factory.get_imdb": [[119, 124], ["KeyError"], "function", ["None"], ["__sets", "[", "name", "]", "=", "lambda", "split", "=", "split", ",", "version", "=", "version", ":", "vg", "(", "version", ",", "split", ")", "\n", "\n", "# set up image net.", "\n", "", "", "for", "split", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"val1\"", ",", "\"val2\"", ",", "\"test\"", "]", ":", "\n", "    ", "name", "=", "\"imagenet_{}\"", ".", "format", "(", "split", ")", "\n", "devkit_path", "=", "\"data/imagenet/ILSVRC/devkit\"", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.factory.list_imdbs": [[126, 129], ["list", "__sets.keys"], "function", ["None"], ["__sets", "[", "\n", "name", "\n", "]", "=", "lambda", "split", "=", "split", ",", "devkit_path", "=", "devkit_path", ",", "data_path", "=", "data_path", ":", "imagenet", "(", "\n", "split", ",", "devkit_path", ",", "data_path", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.__init__": [[28, 73], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "sim10k_coco.sim10k._COCO.loadCats", "tuple", "dict", "dict", "sim10k_coco.sim10k._load_image_set_index", "sim10k_coco.sim10k.set_proposal_method", "sim10k_coco.sim10k.competition_mode", "sim10k_coco.sim10k._get_ann_file", "sim10k_coco.sim10k._COCO.getCatIds", "list", "list", "zip", "zip", "list", "sim10k_coco.sim10k._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"sim10k_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "\"use_salt\"", ":", "True", ",", "\"cleanup\"", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"sim10k\"", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "\"__background__\"", "]", "+", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "\n", "list", "(", "zip", "(", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ",", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "\"gt\"", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "\"minival2014\"", ":", "\"val2014\"", ",", "# 5k val2014 subset", "\n", "\"valminusminival2014\"", ":", "\"val2014\"", ",", "# val2014 \\setminus minival2014", "\n", "\"test-dev2015\"", ":", "\"test2015\"", ",", "\n", "\"valminuscapval2014\"", ":", "\"val2014\"", ",", "\n", "\"capval2014\"", ":", "\"val2014\"", ",", "\n", "\"captest2014\"", ":", "\"val2014\"", ",", "\n", "\"sim10k_car_train2019\"", ":", "\"train2019\"", ",", "# image_set=sim10k_car_train, year=2019", "\n", "\"sim10k_car_val2019\"", ":", "\"val2019\"", ",", "\n", "\"cityscapes_car_train_2019\"", ":", "\"train2019\"", ",", "\n", "\"cityscapes_car_val_2019\"", ":", "\"val2019\"", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "\n", "self", ".", "_view_map", "[", "coco_name", "]", "if", "coco_name", "in", "self", ".", "_view_map", "else", "coco_name", "\n", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"minival\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._get_ann_file": [[74, 80], ["os.join", "os.join", "sim10k_coco.sim10k._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "\"instances\"", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", "else", "\"image_info\"", "\n", "return", "osp", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\n", "\"annotations\"", ",", "\n", "prefix", "+", "\"_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\".json\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._load_image_set_index": [[82, 88], ["sim10k_coco.sim10k._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._get_widths": [[203, 205], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "r", "[", "\"width\"", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.image_path_at": [[94, 99], ["sim10k_coco.sim10k.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.image_id_at": [[100, 105], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.image_path_from_index": [[106, 120], ["os.join", "os.join", "os.exists", "os.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "# file_name = glob.globs(self._data_path)index + \".jpg\"", "\n", "# image_path = osp.join(self._data_path, \"images\", self._data_name, file_name)", "\n", "# image_path = osp.join(self._data_path, self._data_name, file_name)", "\n", "# image_path = glob.glob(osp.join(self._data_path, self._data_name+'/*.jpg'))[index-1]", "\n", "file_name", "=", "\"source_\"", "+", "str", "(", "index", ")", "+", "\".jpg\"", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.gt_roidb": [[121, 139], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "sim10k_coco.sim10k._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._load_coco_annotation": [[140, 201], ["sim10k_coco.sim10k._COCO.getAnnIds", "sim10k_coco.sim10k._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "sim10k_coco.sim10k._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "\"width\"", "]", "\n", "height", "=", "im_ann", "[", "\"height\"", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "\"area\"", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "\"clean_bbox\"", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "\"clean_bbox\"", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "\"area\"", "]", "\n", "if", "obj", "[", "\"iscrowd\"", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.append_flipped_images": [[206, 228], ["sim10k_coco.sim10k._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "sim10k_coco.sim10k.roidb.append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"width\"", ":", "widths", "[", "i", "]", ",", "\n", "\"height\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "\"seg_areas\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._get_box_file": [[229, 234], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "        ", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".mat\"", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._print_detection_eval_metrics": [[235, 273], ["sim10k_coco.sim10k._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "\n", "&", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\n", "(", "\"~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] \"", "\"~~~~\"", ")", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", "\n", ")", "\n", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "\n", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "\"~~~~ Summary metrics ~~~~\"", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._do_detection_eval": [[274, 286], ["sim10k_coco.sim10k._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "sim10k_coco.sim10k._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "        ", "ann_type", "=", "\"bbox\"", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "ann_type", "==", "\"segm\"", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "\"detection_results.pkl\"", ")", "\n", "with", "open", "(", "eval_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"Wrote COCO eval results to: {}\"", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._coco_results_one_category": [[287, 310], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "            ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "index", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"bbox\"", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k._write_coco_results_file": [[311, 332], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "sim10k_coco.sim10k._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "        ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\n", "\"Collecting {} results ({:d}/{:d})\"", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "self", ".", "num_classes", "-", "1", "\n", ")", "\n", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "\n", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "coco_cat_id", ")", "\n", ")", "\n", "", "print", "(", "\"Writing results json to {}\"", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.evaluate_detections": [[333, 347], ["os.join", "os.join", "sim10k_coco.sim10k._write_coco_results_file", "sim10k_coco.sim10k._image_set.find", "sim10k_coco.sim10k._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "res_file", "=", "osp", ".", "join", "(", "\n", "output_dir", ",", "(", "\"detections_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\"_results\"", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", ":", "\n", "            ", "res_file", "+=", "\"_{}\"", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "\".json\"", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", ":", "\n", "            ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.sim10k_coco.sim10k.competition_mode": [[348, 355], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.voc_eval_no_add_1.parse_rec": [[15, 35], ["xml.parse", "ET.parse.findall", "int", "int", "obj.find", "objects.append", "obj.find", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_rec", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Parse a PASCAL VOC xml file \"\"\"", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "\"object\"", ")", ":", "\n", "        ", "obj_struct", "=", "{", "}", "\n", "obj_struct", "[", "\"name\"", "]", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", "\n", "obj_struct", "[", "\"pose\"", "]", "=", "obj", ".", "find", "(", "\"pose\"", ")", ".", "text", "\n", "obj_struct", "[", "\"truncated\"", "]", "=", "int", "(", "obj", ".", "find", "(", "\"truncated\"", ")", ".", "text", ")", "\n", "obj_struct", "[", "\"difficult\"", "]", "=", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "obj_struct", "[", "\"bbox\"", "]", "=", "[", "\n", "int", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", ",", "\n", "]", "\n", "objects", ".", "append", "(", "obj_struct", ")", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.voc_eval_no_add_1.voc_ap": [[37, 69], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n  Compute VOC AP given precision and recall.\n  If use_07_metric is true, uses the\n  VOC 07 11 point method (default:False).\n  \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.0", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.0", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "rec", ",", "[", "1.0", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "prec", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.voc_eval_no_add_1.voc_eval": [[71, 214], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.cumsum", "numpy.cumsum", "voc_eval_no_add_1.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "print", "numpy.array", "numpy.array().astype", "open", "f.readlines", "x.strip().split", "numpy.argsort", "numpy.sort", "range", "float", "numpy.maximum", "voc_eval_no_add_1.parse_rec", "open", "pickle.dump", "open", "len", "sum", "float", "BB[].astype", "R[].astype", "annopath.format", "print", "pickle.load", "numpy.array", "x.strip", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.finfo", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_ap", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.parse_rec"], ["", "def", "voc_eval", "(", "\n", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap = voc_eval(detpath,\n                              annopath,\n                              imagesetfile,\n                              classname,\n                              [ovthresh],\n                              [use_07_metric])\n\n  Top level function that does the PASCAL VOC evaluation.\n\n  detpath: Path to detections\n      detpath.format(classname) should produce the detection results file.\n  annopath: Path to annotations\n      annopath.format(imagename) should be the xml annotations file.\n  imagesetfile: Text file containing the list of images, one image per line.\n  classname: Category name (duh)\n  cachedir: Directory for caching the annotations\n  [ovthresh]: Overlap threshold (default = 0.5)\n  [use_07_metric]: Whether to use VOC07's 11 point AP computation\n      (default False)\n  \"\"\"", "\n", "# assumes detections are in detpath.format(classname)", "\n", "# assumes annotations are in annopath.format(imagename)", "\n", "# assumes imagesetfile is a text file with each line an image name", "\n", "# cachedir caches the annotations in a pickle file", "\n", "\n", "# first load gt", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "\"%s_annots.pkl\"", "%", "imagesetfile", ")", "\n", "# read list of images", "\n", "with", "open", "(", "imagesetfile", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annotations", "\n", "        ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "            ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "\"Reading annotation for {:d}/{:d}\"", ".", "format", "(", "i", "+", "1", ",", "len", "(", "imagenames", ")", ")", ")", "\n", "# save", "\n", "", "", "print", "(", "\"Saving cached annotations to {:s}\"", ".", "format", "(", "cachefile", ")", ")", "\n", "with", "open", "(", "cachefile", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "        ", "with", "open", "(", "cachefile", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "\n", "# extract gt objects for this class", "\n", "", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "        ", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "\"name\"", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "\"bbox\"", "]", "for", "x", "in", "R", "]", ")", "\n", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "\"difficult\"", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "\"bbox\"", ":", "bbox", ",", "\"difficult\"", ":", "difficult", ",", "\"det\"", ":", "det", "}", "\n", "\n", "# read dets", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "if", "BB", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# sort by confidence", "\n", "        ", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "            ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "\"bbox\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "                ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", ",", "0.0", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", ",", "0.0", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "\n", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", ")", "\n", "+", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", ")", "*", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", ")", "\n", "-", "inters", "\n", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "                ", "if", "not", "R", "[", "\"difficult\"", "]", "[", "jmax", "]", ":", "\n", "                    ", "if", "not", "R", "[", "\"det\"", "]", "[", "jmax", "]", ":", "\n", "                        ", "tp", "[", "d", "]", "=", "1.0", "\n", "R", "[", "\"det\"", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "d", "]", "=", "1.0", "\n", "", "", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.segms.polys_to_boxes": [[36, 48], ["numpy.zeros", "range", "len", "min", "max", "min", "max", "len", "min", "max", "min", "max"], "function", ["None"], ["def", "polys_to_boxes", "(", "polys", ")", ":", "\n", "    ", "\"\"\"Convert a list of polygons into an array of tight bounding boxes.\"\"\"", "\n", "boxes_from_polys", "=", "np", ".", "zeros", "(", "(", "len", "(", "polys", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "polys", ")", ")", ":", "\n", "        ", "poly", "=", "polys", "[", "i", "]", "\n", "x0", "=", "min", "(", "min", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "x1", "=", "max", "(", "max", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y0", "=", "min", "(", "min", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y1", "=", "max", "(", "max", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "boxes_from_polys", "[", "i", ",", ":", "]", "=", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", "\n", "\n", "", "return", "boxes_from_polys", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.__init__": [[40, 95], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"voc_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "cfg_d", ".", "PASCAL", "\n", ")", "# self._get_default_path() if devkit_path is None \\", "\n", "# else devkit_path", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"aeroplane\"", ",", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"boat\"", ",", "\n", "\"bottle\"", ",", "\n", "\"bus\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"chair\"", ",", "\n", "\"cow\"", ",", "\n", "\"diningtable\"", ",", "\n", "\"dog\"", ",", "\n", "\"horse\"", ",", "\n", "\"motorbike\"", ",", "\n", "\"person\"", ",", "\n", "\"pottedplant\"", ",", "\n", "\"sheep\"", ",", "\n", "\"sofa\"", ",", "\n", "\"train\"", ",", "\n", "\"tvmonitor\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.image_path_at": [[97, 102], ["pascal_voc.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.image_id_at": [[103, 108], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.image_path_from_index": [[109, 118], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._load_image_set_index": [[119, 134], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._get_default_path": [[135, 140], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"VOCdevkit\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.gt_roidb": [[141, 161], ["os.path.join", "print", "os.path.exists", "print", "print", "pascal_voc.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "print", "(", "cache_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.selective_search_roidb": [[162, 189], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.rpn_roidb": [[190, 199], ["pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._load_rpn_roidb": [[200, 207], ["print", "os.path.exists", "pascal_voc.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._load_selective_search_roidb": [[208, 227], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "pascal_voc.pascal_voc.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._load_pascal_annotation": [[228, 289], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "xml.parse", "xml.parse.find", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "int", "int", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "ET.parse.find.find", "ET.parse.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "img_size", "=", "tree", ".", "find", "(", "\"size\"", ")", "# [0]", "\n", "# print(img_size)", "\n", "# print((int(tree.find('width').text)))", "\n", "seg_map", "=", "np", ".", "zeros", "(", "\n", "(", "int", "(", "img_size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", ",", "int", "(", "img_size", ".", "find", "(", "\"height\"", ")", ".", "text", ")", ")", "\n", ")", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "# seg_map[x1:x2,y1:y2] = cls", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "\"seg_map\"", ":", "seg_map", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._get_comp_id": [[291, 298], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._get_voc_results_file_template": [[299, 307], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._write_voc_results_file": [[308, 329], ["enumerate", "print", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc.pascal_voc._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._do_python_eval": [[332, 385], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "open", "result_f.write", "print", "int", "open", "result_f.write", "open", "pickle.dump", "os.path.join", "numpy.mean", "numpy.mean", "pascal_voc.pascal_voc._get_voc_results_file_template", "os.path.join", "os.path.join", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "                ", "result_f", ".", "write", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "            ", "result_f", ".", "write", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc._do_matlab_eval": [[386, 399], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.evaluate_detections": [[400, 411], ["pascal_voc.pascal_voc._write_voc_results_file", "pascal_voc.pascal_voc._do_python_eval", "pascal_voc.pascal_voc._do_matlab_eval", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.pascal_voc.pascal_voc.competition_mode": [[412, 419], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.boxes.xywh_to_xyxy": [[48, 62], ["isinstance", "isinstance", "len", "numpy.maximum", "numpy.maximum", "numpy.hstack", "TypeError", "numpy.maximum"], "function", ["None"], ["def", "xywh_to_xyxy", "(", "xywh", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "if", "isinstance", "(", "xywh", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Single box given as a list of coordinates", "\n", "        ", "assert", "len", "(", "xywh", ")", "==", "4", "\n", "x1", ",", "y1", "=", "xywh", "[", "0", "]", ",", "xywh", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.0", ",", "xywh", "[", "2", "]", "-", "1.0", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.0", ",", "xywh", "[", "3", "]", "-", "1.0", ")", "\n", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "", "elif", "isinstance", "(", "xywh", ",", "np", ".", "ndarray", ")", ":", "\n", "# Multiple boxes given as a 2D ndarray", "\n", "        ", "return", "np", ".", "hstack", "(", "(", "xywh", "[", ":", ",", "0", ":", "2", "]", ",", "xywh", "[", ":", ",", "0", ":", "2", "]", "+", "np", ".", "maximum", "(", "0", ",", "xywh", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Argument xywh must be a list, tuple, or numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.boxes.xyxy_to_xywh": [[64, 78], ["isinstance", "isinstance", "len", "numpy.hstack", "TypeError"], "function", ["None"], ["", "", "def", "xyxy_to_xywh", "(", "xyxy", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x1 y1 w h] format.\"\"\"", "\n", "if", "isinstance", "(", "xyxy", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Single box given as a list of coordinates", "\n", "        ", "assert", "len", "(", "xyxy", ")", "==", "4", "\n", "x1", ",", "y1", "=", "xyxy", "[", "0", "]", ",", "xyxy", "[", "1", "]", "\n", "w", "=", "xyxy", "[", "2", "]", "-", "x1", "+", "1", "\n", "h", "=", "xyxy", "[", "3", "]", "-", "y1", "+", "1", "\n", "return", "(", "x1", ",", "y1", ",", "w", ",", "h", ")", "\n", "", "elif", "isinstance", "(", "xyxy", ",", "np", ".", "ndarray", ")", ":", "\n", "# Multiple boxes given as a 2D ndarray", "\n", "        ", "return", "np", ".", "hstack", "(", "(", "xyxy", "[", ":", ",", "0", ":", "2", "]", ",", "xyxy", "[", ":", ",", "2", ":", "4", "]", "-", "xyxy", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Argument xyxy must be a list, tuple, or numpy array.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.__init__": [[39, 88], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "cityscape.cityscape._load_image_set_index", "str", "os.path.exists", "os.path.exists", "cityscape.cityscape._get_default_path", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_default_path"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"cityscape_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", ")", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"person\"", ",", "\n", "\"rider\"", ",", "\n", "\"car\"", ",", "\n", "\"truck\"", ",", "\n", "\"bus\"", ",", "\n", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\n", "\"bicycle\"", ",", "\n", ")", "\n", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "(", "\n", "self", ".", "_load_image_set_index", "(", ")", "\n", ")", "# train image name without .jpg", "\n", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.image_path_at": [[90, 95], ["cityscape.cityscape.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.image_id_at": [[96, 101], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.image_path_from_index": [[102, 112], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._load_image_set_index": [[113, 134], ["os.path.join", "os.path.exists", "open", "f.readlines", "len", "image_index.append", "x.strip"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "\n", "image_index", "=", "[", "]", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "print", "(", "\"image_set_file:\"", ",", "image_set_file", ")", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "for", "x", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "x", ")", ">", "1", ":", "\n", "                    ", "image_index", ".", "append", "(", "x", ".", "strip", "(", ")", ")", "\n", "# image_index = [x.strip() for x in f.readlines()]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._get_default_path": [[135, 140], ["os.path.join"], "methods", ["None"], ["\n", "", "", "", "return", "image_index", "\n", "\n", "", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.gt_roidb": [[141, 161], ["os.path.join", "os.path.exists", "print", "print", "cityscape.cityscape._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"cityscape\"", ")", "\n", "\n", "", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.selective_search_roidb": [[162, 190], ["os.path.join", "os.path.exists", "print", "print", "cityscape.cityscape.gt_roidb", "cityscape.cityscape._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "cityscape.cityscape._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n", "", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fidf", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.rpn_roidb": [[191, 200], ["cityscape.cityscape.gt_roidb", "cityscape.cityscape._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "cityscape.cityscape._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n", "", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._load_rpn_roidb": [[201, 208], ["print", "os.path.exists", "cityscape.cityscape.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n", "", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._load_selective_search_roidb": [[209, 228], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "cityscape.cityscape.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n", "", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._load_pascal_annotation": [[229, 287], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "print", "print", "input", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n", "", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "if", "boxes", "[", "ix", ",", "0", "]", ">", "2048", "or", "boxes", "[", "ix", ",", "1", "]", ">", "1024", ":", "\n", "                ", "print", "(", "boxes", "[", "ix", ",", ":", "]", ")", "\n", "print", "(", "filename", ")", "\n", "p", "=", "input", "(", ")", "\n", "\n", "", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._get_comp_id": [[289, 296], ["None"], "methods", ["None"], ["\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n", "\n", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._get_voc_results_file_template": [[297, 305], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "cityscape.cityscape._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n", "", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._write_voc_results_file": [[306, 327], ["enumerate", "print", "cityscape.cityscape._get_voc_results_file_template().format", "open", "enumerate", "cityscape.cityscape._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n", "", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._do_python_eval": [[330, 379], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "cityscape.cityscape._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "cityscape.cityscape._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape._do_matlab_eval": [[380, 393], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "cityscape.cityscape._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n", "", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.evaluate_detections": [[394, 405], ["cityscape.cityscape._write_voc_results_file", "cityscape.cityscape._do_python_eval", "cityscape.cityscape._do_matlab_eval", "cityscape.cityscape._get_voc_results_file_template().format", "os.remove", "cityscape.cityscape._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], [")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets.cityscape.cityscape.competition_mode": [[406, 413], ["None"], "methods", ["None"], ["                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n", "", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config.get_output_dir": [[305, 319], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "get_output_dir", "(", "imdb", ",", "weights_filename", ")", ":", "\n", "    ", "\"\"\"Return the directory where experimental artifacts are placed.\n  If the directory does not exist, it is created.\n\n  A canonical path is built using the name from an imdb and a network\n  (if not None).\n  \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "\"output\"", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "weights_filename", "is", "None", ":", "\n", "        ", "weights_filename", "=", "\"default\"", "\n", "", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "weights_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config.get_output_tb_dir": [[321, 335], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "get_output_tb_dir", "(", "imdb", ",", "weights_filename", ")", ":", "\n", "    ", "\"\"\"Return the directory where tensorflow summaries are placed.\n  If the directory does not exist, it is created.\n\n  A canonical path is built using the name from an imdb and a network\n  (if not None).\n  \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "\"tensorboard\"", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "weights_filename", "is", "None", ":", "\n", "        ", "weights_filename", "=", "\"default\"", "\n", "", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "weights_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config._merge_a_into_b": [[337, 370], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config._merge_a_into_b"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n  options in b whenever they are also specified in a.\n  \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "k", "not", "in", "b", ":", "\n", "            ", "raise", "KeyError", "(", "\"{} is not a valid config key\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "(", "\"Type mismatch ({} vs. {}) \"", "\"for config key: {}\"", ")", ".", "format", "(", "\n", "type", "(", "b", "[", "k", "]", ")", ",", "type", "(", "v", ")", ",", "k", "\n", ")", "\n", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "(", "\"Error under config key: {}\"", ".", "format", "(", "k", ")", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config.cfg_from_file": [[372, 380], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.config.cfg_from_list": [[382, 407], ["zip", "k.split", "len", "print", "literal_eval", "type", "type", "type", "type"], "function", ["None"], ["", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "\".\"", ")", "\n", "d", "=", "__C", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "subkey", "in", "d", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "print", "(", "d", ")", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "            ", "value", "=", "v", "\n", "", "assert", "type", "(", "value", ")", "==", "type", "(", "\n", "d", "[", "subkey", "]", "\n", ")", ",", "\"type {} does not match original type {}\"", ".", "format", "(", "\n", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", "\n", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.GradReverse.__init__": [[247, 249], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.GradReverse.forward": [[250, 252], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.GradReverse.backward": [[253, 256], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "return", "grad_output", "*", "-", "self", ".", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.EFocalLoss.__init__": [[277, 289], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "isinstance", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "class_num", ",", "alpha", "=", "None", ",", "gamma", "=", "2", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "EFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "class_num", ",", "1", ")", "*", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "alpha", ",", "Variable", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "alpha", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha", "=", "Variable", "(", "alpha", ")", "\n", "", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.EFocalLoss.forward": [[290, 319], ["inputs.size", "inputs.size", "torch.softmax", "torch.softmax", "torch.softmax", "inputs.data.new().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "targets.view", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "probs.log", "net_utils.EFocalLoss.alpha.cuda", "batch_loss.mean", "batch_loss.sum", "inputs.data.new", "targets.view.data.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# print(N)", "\n", "C", "=", "inputs", ".", "size", "(", "1", ")", "\n", "# inputs = F.sigmoid(inputs)", "\n", "P", "=", "F", ".", "softmax", "(", "inputs", ")", "\n", "class_mask", "=", "inputs", ".", "data", ".", "new", "(", "N", ",", "C", ")", ".", "fill_", "(", "0", ")", "\n", "class_mask", "=", "Variable", "(", "class_mask", ")", "\n", "ids", "=", "targets", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "class_mask", ".", "scatter_", "(", "1", ",", "ids", ".", "data", ",", "1.0", ")", "\n", "# print(class_mask)", "\n", "\n", "if", "inputs", ".", "is_cuda", "and", "not", "self", ".", "alpha", ".", "is_cuda", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "cuda", "(", ")", "\n", "", "alpha", "=", "self", ".", "alpha", "[", "ids", ".", "data", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "probs", "=", "(", "P", "*", "class_mask", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "# print('probs size= {}'.format(probs.size()))", "\n", "# print(probs)", "\n", "batch_loss", "=", "-", "alpha", "*", "torch", ".", "exp", "(", "-", "self", ".", "gamma", "*", "probs", ")", "*", "log_p", "\n", "# print('-----bacth_loss------')", "\n", "# print(batch_loss)", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.FocalLoss.__init__": [[336, 358], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "isinstance", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "class_num", ",", "\n", "alpha", "=", "None", ",", "\n", "gamma", "=", "2", ",", "\n", "size_average", "=", "True", ",", "\n", "sigmoid", "=", "False", ",", "\n", "reduce", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "class_num", ",", "1", ")", "*", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "alpha", ",", "Variable", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "alpha", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha", "=", "Variable", "(", "alpha", ")", "\n", "", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "sigmoid", "=", "sigmoid", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.FocalLoss.forward": [[359, 405], ["inputs.size", "inputs.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax", "torch.softmax", "inputs.data.new().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "targets.view", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "probs.log", "batch_loss.mean", "batch_loss.sum", "probs.log", "probs.log", "net_utils.FocalLoss.alpha.cuda", "inputs.data.new", "targets.view.data.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# print(N)", "\n", "C", "=", "inputs", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "sigmoid", ":", "\n", "            ", "P", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "# F.softmax(inputs)", "\n", "if", "targets", "==", "0", ":", "\n", "                ", "probs", "=", "1", "-", "P", "# (P * class_mask).sum(1).view(-1, 1)", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "batch_loss", "=", "-", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "", "if", "targets", "==", "1", ":", "\n", "                ", "probs", "=", "P", "# (P * class_mask).sum(1).view(-1, 1)", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "batch_loss", "=", "-", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "", "", "else", ":", "\n", "# inputs = F.sigmoid(inputs)", "\n", "            ", "P", "=", "F", ".", "softmax", "(", "inputs", ")", "\n", "\n", "class_mask", "=", "inputs", ".", "data", ".", "new", "(", "N", ",", "C", ")", ".", "fill_", "(", "0", ")", "\n", "class_mask", "=", "Variable", "(", "class_mask", ")", "\n", "ids", "=", "targets", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "class_mask", ".", "scatter_", "(", "1", ",", "ids", ".", "data", ",", "1.0", ")", "\n", "# print(class_mask)", "\n", "\n", "if", "inputs", ".", "is_cuda", "and", "not", "self", ".", "alpha", ".", "is_cuda", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "cuda", "(", ")", "\n", "", "alpha", "=", "self", ".", "alpha", "[", "ids", ".", "data", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "probs", "=", "(", "P", "*", "class_mask", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "# print('probs size= {}'.format(probs.size()))", "\n", "# print(probs)", "\n", "\n", "batch_loss", "=", "-", "alpha", "*", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "# print('-----bacth_loss------')", "\n", "# print(batch_loss)", "\n", "\n", "", "if", "not", "self", ".", "reduce", ":", "\n", "            ", "return", "batch_loss", "\n", "", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.save_net": [[11, 17], ["h5py.File", "net.state_dict().items", "h5py.File.create_dataset", "net.state_dict", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "save_net", "(", "fname", ",", "net", ")", ":", "\n", "    ", "import", "h5py", "\n", "\n", "h5f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "\"w\"", ")", "\n", "for", "k", ",", "v", "in", "net", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "h5f", ".", "create_dataset", "(", "k", ",", "data", "=", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.load_net": [[19, 26], ["h5py.File", "net.state_dict().items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "v.copy_", "net.state_dict", "numpy.asarray"], "function", ["None"], ["", "", "def", "load_net", "(", "fname", ",", "net", ")", ":", "\n", "    ", "import", "h5py", "\n", "\n", "h5f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "\"r\"", ")", "\n", "for", "k", ",", "v", "in", "net", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "param", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "h5f", "[", "k", "]", ")", ")", "\n", "v", ".", "copy_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.weights_normal_init": [[28, 38], ["isinstance", "model.modules", "net_utils.weights_normal_init", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.normal_"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.weights_normal_init"], ["", "", "def", "weights_normal_init", "(", "model", ",", "dev", "=", "0.01", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "list", ")", ":", "\n", "        ", "for", "m", "in", "model", ":", "\n", "            ", "weights_normal_init", "(", "m", ",", "dev", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "dev", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "dev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.clip_gradient": [[40, 52], ["model.parameters", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "max", "p.grad.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "p.grad.mul_"], "function", ["None"], ["", "", "", "", "def", "clip_gradient", "(", "model", ",", "clip_norm", ")", ":", "\n", "    ", "\"\"\"Computes a gradient clipping coefficient based on gradient norm.\"\"\"", "\n", "totalnorm", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "modulenorm", "=", "p", ".", "grad", ".", "norm", "(", ")", "\n", "totalnorm", "+=", "modulenorm", "**", "2", "\n", "", "", "totalnorm", "=", "torch", ".", "sqrt", "(", "totalnorm", ")", ".", "item", "(", ")", "\n", "norm", "=", "clip_norm", "/", "max", "(", "totalnorm", ",", "clip_norm", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "p", ".", "grad", ".", "mul_", "(", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.vis_detections": [[54, 71], ["range", "numpy.minimum", "tuple", "cv2.rectangle", "cv2.putText", "int", "numpy.round"], "function", ["None"], ["", "", "", "def", "vis_detections", "(", "im", ",", "class_name", ",", "dets", ",", "thresh", "=", "0.8", ")", ":", "\n", "    ", "\"\"\"Visual debugging of detections.\"\"\"", "\n", "for", "i", "in", "range", "(", "np", ".", "minimum", "(", "10", ",", "dets", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "bbox", "=", "tuple", "(", "int", "(", "np", ".", "round", "(", "x", ")", ")", "for", "x", "in", "dets", "[", "i", ",", ":", "4", "]", ")", "\n", "score", "=", "dets", "[", "i", ",", "-", "1", "]", "\n", "if", "score", ">", "thresh", ":", "\n", "            ", "cv2", ".", "rectangle", "(", "im", ",", "bbox", "[", "0", ":", "2", "]", ",", "bbox", "[", "2", ":", "4", "]", ",", "(", "0", ",", "204", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "\n", "im", ",", "\n", "\"%s: %.3f\"", "%", "(", "class_name", ",", "score", ")", ",", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "+", "15", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "1.0", ",", "\n", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "thickness", "=", "1", ",", "\n", ")", "\n", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.adjust_learning_rate": [[73, 77], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "decay", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 0.5 every 20 epochs\"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "decay", "*", "param_group", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.save_checkpoint": [[79, 81], ["torch.save", "torch.save", "torch.save"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "filename", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss": [[83, 106], ["torch.abs", "torch.abs", "torch.abs", "sorted", "loss_box.sum.mean", "loss_box.sum.sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "_smooth_l1_loss", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_inside_weights", ",", "\n", "bbox_outside_weights", ",", "\n", "sigma", "=", "1.0", ",", "\n", "dim", "=", "[", "1", "]", ",", "\n", ")", ":", "\n", "\n", "    ", "sigma_2", "=", "sigma", "**", "2", "\n", "box_diff", "=", "bbox_pred", "-", "bbox_targets", "\n", "in_box_diff", "=", "bbox_inside_weights", "*", "box_diff", "\n", "abs_in_box_diff", "=", "torch", ".", "abs", "(", "in_box_diff", ")", "\n", "smoothL1_sign", "=", "(", "abs_in_box_diff", "<", "1.0", "/", "sigma_2", ")", ".", "detach", "(", ")", ".", "float", "(", ")", "\n", "in_loss_box", "=", "torch", ".", "pow", "(", "in_box_diff", ",", "2", ")", "*", "(", "sigma_2", "/", "2.0", ")", "*", "smoothL1_sign", "+", "(", "\n", "abs_in_box_diff", "-", "(", "0.5", "/", "sigma_2", ")", "\n", ")", "*", "(", "1.0", "-", "smoothL1_sign", ")", "\n", "out_loss_box", "=", "bbox_outside_weights", "*", "in_loss_box", "\n", "loss_box", "=", "out_loss_box", "\n", "for", "i", "in", "sorted", "(", "dim", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "loss_box", "=", "loss_box", ".", "sum", "(", "i", ")", "\n", "", "loss_box", "=", "loss_box", ".", "mean", "(", ")", "\n", "return", "loss_box", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._crop_pool_layer": [[108, 179], ["rois.detach.detach", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "torch.autograd.Variable", "torch.cat().view", "torch.cat().view", "torch.cat().view", "rois.detach.size", "rois.detach.data.new().zero_", "torch.affine_grid", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous().view", "torch.grid_sample", "torch.max_pool2d", "torch.affine_grid", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous().view", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "rois.detach.data.new", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous", "rois.detach.size", "rois.detach.size", "rois.detach.size", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand", "bottom.view().contiguous().expand().contiguous().view.view().contiguous", "bottom.view().contiguous().expand().contiguous().view.view().contiguous", "bottom.view().contiguous().expand().contiguous().view.view", "bottom.view().contiguous().expand().contiguous().view.view"], "function", ["None"], ["", "def", "_crop_pool_layer", "(", "bottom", ",", "rois", ",", "max_pool", "=", "True", ")", ":", "\n", "# code modified from", "\n", "# https://github.com/ruotianluo/pytorch-faster-rcnn", "\n", "# implement it using stn", "\n", "# box to affine", "\n", "# input (x1,y1,x2,y2)", "\n", "    ", "\"\"\"\n    [  x2-x1             x1 + x2 - W + 1  ]\n    [  -----      0      ---------------  ]\n    [  W - 1                  W - 1       ]\n    [                                     ]\n    [           y2-y1    y1 + y2 - H + 1  ]\n    [    0      -----    ---------------  ]\n    [           H - 1         H - 1      ]\n    \"\"\"", "\n", "rois", "=", "rois", ".", "detach", "(", ")", "\n", "batch_size", "=", "bottom", ".", "size", "(", "0", ")", "\n", "D", "=", "bottom", ".", "size", "(", "1", ")", "\n", "H", "=", "bottom", ".", "size", "(", "2", ")", "\n", "W", "=", "bottom", ".", "size", "(", "3", ")", "\n", "roi_per_batch", "=", "rois", ".", "size", "(", "0", ")", "/", "batch_size", "\n", "x1", "=", "rois", "[", ":", ",", "1", ":", ":", "4", "]", "/", "16.0", "\n", "y1", "=", "rois", "[", ":", ",", "2", ":", ":", "4", "]", "/", "16.0", "\n", "x2", "=", "rois", "[", ":", ",", "3", ":", ":", "4", "]", "/", "16.0", "\n", "y2", "=", "rois", "[", ":", ",", "4", ":", ":", "4", "]", "/", "16.0", "\n", "\n", "height", "=", "bottom", ".", "size", "(", "2", ")", "\n", "width", "=", "bottom", ".", "size", "(", "3", ")", "\n", "\n", "# affine theta", "\n", "zero", "=", "Variable", "(", "rois", ".", "data", ".", "new", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ")", "\n", "theta", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "]", ",", "\n", "1", ",", "\n", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "if", "max_pool", ":", "\n", "        ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "grid", "=", "F", ".", "affine_grid", "(", "\n", "theta", ",", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ",", "pre_pool_size", ",", "pre_pool_size", ")", ")", "\n", ")", "\n", "bottom", "=", "(", "\n", "bottom", ".", "view", "(", "1", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "expand", "(", "roi_per_batch", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "-", "1", ",", "D", ",", "H", ",", "W", ")", "\n", ")", "\n", "crops", "=", "F", ".", "grid_sample", "(", "bottom", ",", "grid", ")", "\n", "crops", "=", "F", ".", "max_pool2d", "(", "crops", ",", "2", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "grid", "=", "F", ".", "affine_grid", "(", "\n", "theta", ",", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ",", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ")", "\n", ")", "\n", "bottom", "=", "(", "\n", "bottom", ".", "view", "(", "1", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "expand", "(", "roi_per_batch", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "-", "1", ",", "D", ",", "H", ",", "W", ")", "\n", ")", "\n", "crops", "=", "F", ".", "grid_sample", "(", "bottom", ",", "grid", ")", "\n", "\n", "", "return", "crops", ",", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._affine_grid_gen": [[181, 208], ["rois.detach.detach", "torch.autograd.Variable", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.affine_grid", "rois.detach.data.new().zero_", "torch.Size", "torch.Size", "torch.Size", "torch.cat", "torch.cat", "torch.cat", "rois.detach.data.new", "rois.detach.size", "rois.detach.size"], "function", ["None"], ["", "def", "_affine_grid_gen", "(", "rois", ",", "input_size", ",", "grid_size", ")", ":", "\n", "\n", "    ", "rois", "=", "rois", ".", "detach", "(", ")", "\n", "x1", "=", "rois", "[", ":", ",", "1", ":", ":", "4", "]", "/", "16.0", "\n", "y1", "=", "rois", "[", ":", ",", "2", ":", ":", "4", "]", "/", "16.0", "\n", "x2", "=", "rois", "[", ":", ",", "3", ":", ":", "4", "]", "/", "16.0", "\n", "y2", "=", "rois", "[", ":", ",", "4", ":", ":", "4", "]", "/", "16.0", "\n", "\n", "height", "=", "input_size", "[", "0", "]", "\n", "width", "=", "input_size", "[", "1", "]", "\n", "\n", "zero", "=", "Variable", "(", "rois", ".", "data", ".", "new", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ")", "\n", "theta", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "]", ",", "\n", "1", ",", "\n", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ",", "grid_size", ",", "grid_size", ")", ")", ")", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._affine_theta": [[210, 244], ["rois.detach.detach", "torch.autograd.Variable", "torch.cat().view", "torch.cat().view", "torch.cat().view", "rois.detach.data.new().zero_", "torch.cat", "torch.cat", "torch.cat", "rois.detach.data.new", "rois.detach.size"], "function", ["None"], ["", "def", "_affine_theta", "(", "rois", ",", "input_size", ")", ":", "\n", "\n", "    ", "rois", "=", "rois", ".", "detach", "(", ")", "\n", "x1", "=", "rois", "[", ":", ",", "1", ":", ":", "4", "]", "/", "16.0", "\n", "y1", "=", "rois", "[", ":", ",", "2", ":", ":", "4", "]", "/", "16.0", "\n", "x2", "=", "rois", "[", ":", ",", "3", ":", ":", "4", "]", "/", "16.0", "\n", "y2", "=", "rois", "[", ":", ",", "4", ":", ":", "4", "]", "/", "16.0", "\n", "\n", "height", "=", "input_size", "[", "0", "]", "\n", "width", "=", "input_size", "[", "1", "]", "\n", "\n", "zero", "=", "Variable", "(", "rois", ".", "data", ".", "new", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "# theta = torch.cat([\\", "\n", "#   (x2 - x1) / (width - 1),", "\n", "#   zero,", "\n", "#   (x1 + x2 - width + 1) / (width - 1),", "\n", "#   zero,", "\n", "#   (y2 - y1) / (height - 1),", "\n", "#   (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)", "\n", "\n", "theta", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "]", ",", "\n", "1", ",", "\n", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils.grad_reverse": [[258, 260], ["net_utils.GradReverse"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "    ", "return", "GradReverse", "(", "lambd", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.logger.Logger.__init__": [[13, 16], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.logger.Logger.scalar_summary": [[17, 21], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.logger.Logger.image_summary": [[22, 48], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "\n", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ",", "\n", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "\n", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"%s/%d\"", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", "\n", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.logger.Logger.histo_summary": [[49, 76], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.blob.im_list_to_blob": [[20, 33], ["numpy.array().max", "len", "numpy.zeros", "xrange", "numpy.array"], "function", ["None"], ["", "def", "im_list_to_blob", "(", "ims", ")", ":", "\n", "    ", "\"\"\"Convert a list of images into a network input.\n\n    Assumes images are already prepared (means subtracted, BGR order, ...).\n    \"\"\"", "\n", "max_shape", "=", "np", ".", "array", "(", "[", "im", ".", "shape", "for", "im", "in", "ims", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "num_images", "=", "len", "(", "ims", ")", "\n", "blob", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "max_shape", "[", "0", "]", ",", "max_shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "ims", "[", "i", "]", "\n", "blob", "[", "i", ",", "0", ":", "im", ".", "shape", "[", "0", "]", ",", "0", ":", "im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "im", "\n", "\n", "", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.blob.prep_im_for_blob": [[35, 54], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "float", "float"], "function", ["None"], ["", "def", "prep_im_for_blob", "(", "im", ",", "pixel_means", ",", "target_size", ",", "max_size", ")", ":", "\n", "    ", "\"\"\"Mean subtract and scale an image for use in a blob.\"\"\"", "\n", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "im", "-=", "pixel_means", "\n", "# im = im[:, :, ::-1]", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "# if np.round(im_scale * im_size_max) > max_size:", "\n", "#     im_scale = float(max_size) / float(im_size_max)", "\n", "# im = imresize(im, im_scale)", "\n", "im", "=", "cv2", ".", "resize", "(", "\n", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "\n", "return", "im", ",", "im_scale", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_pool._ROIPool.forward": [[11, 21], ["torch.nn.modules.utils._pair", "input.size", "model._C.roi_pool_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", ",", "argmax", "=", "_C", ".", "roi_pool_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "roi", ",", "argmax", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_pool._ROIPool.backward": [[22, 43], ["model._C.roi_pool_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "argmax", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_pool_backward", "(", "\n", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "argmax", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_pool.ROIPool.__init__": [[49, 53], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "super", "(", "ROIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_pool.ROIPool.forward": [[54, 56], ["roi_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_pool", "(", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_pool.ROIPool.__repr__": [[57, 63], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_align._ROIAlign.forward": [[11, 22], ["ctx.save_for_backward", "torch.nn.modules.utils._pair", "input.size", "model._C.roi_align_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "roi", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "roi_align_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_align._ROIAlign.backward": [[23, 44], ["model._C.roi_align_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "(", "rois", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_align_backward", "(", "\n", "grad_output", ",", "\n", "rois", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_align.ROIAlign.__init__": [[50, 55], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "super", "(", "ROIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_align.ROIAlign.forward": [[56, 59], ["roi_align"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_align", "(", "\n", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sampling_ratio", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_layers.roi_align.ROIAlign.__repr__": [[61, 68], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\", sampling_ratio=\"", "+", "str", "(", "self", ".", "sampling_ratio", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.netD_pixel.__init__": [[32, 41], ["torch.Module.__init__", "vgg16.conv1x1", "vgg16.conv1x1", "vgg16.conv1x1"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "256", ",", "256", ")", "\n", "# self.bn1 = nn.BatchNorm2d(256)", "\n", "self", ".", "conv2", "=", "conv1x1", "(", "256", ",", "128", ")", "\n", "# self.bn2 = nn.BatchNorm2d(128)", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "128", ",", "1", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.netD_pixel.forward": [[42, 54], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg16.netD_pixel.conv1", "vgg16.netD_pixel.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "vgg16.netD_pixel.conv3", "torch.sigmoid.view", "vgg16.netD_pixel.conv3", "torch.sigmoid.size", "torch.sigmoid.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "# feat = x", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", "# F.sigmoid(x)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.netD.__init__": [[57, 67], ["torch.Module.__init__", "vgg16.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vgg16.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vgg16.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.netD.forward": [[68, 81], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "vgg16.netD.view", "vgg16.netD.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg16.netD.bn1", "vgg16.netD.bn2", "vgg16.netD.bn3", "vgg16.netD.size", "vgg16.netD.size", "vgg16.netD.conv1", "vgg16.netD.conv2", "vgg16.netD.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.netD_dc.__init__": [[84, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.netD_dc.forward": [[92, 97], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "vgg16.netD_dc.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg16.netD_dc.bn1", "vgg16.netD_dc.bn2", "vgg16.netD_dc.fc1", "vgg16.netD_dc.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.vgg16.__init__": [[100, 120], ["model.da_faster_rcnn_instance_da_weight.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "classes", ",", "\n", "pretrained_path", ",", "\n", "pretrained", "=", "False", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "lc", "=", "False", ",", "\n", "gc", "=", "False", ",", "\n", "da_use_contex", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "pretrained_path", "\n", "self", ".", "dout_base_model", "=", "512", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "\n", "_fasterRCNN", ".", "__init__", "(", "\n", "self", ",", "classes", ",", "class_agnostic", ",", "self", ".", "lc", ",", "self", ".", "gc", ",", "self", ".", "da_use_contex", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.vgg16._init_modules": [[122, 161], ["torchvision.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg16.netD", "vgg16.netD_pixel", "range", "torch.Linear", "torch.Linear", "torch.Linear", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.vgg16.load_state_dict", "vgg16.vgg16.RCNN_base1[].parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "list", "torch.load.items", "torch.load.items", "torch.load.items", "torchvision.vgg16.classifier._modules.values", "torchvision.vgg16.features._modules.values", "torchvision.vgg16.features._modules.values", "torchvision.vgg16.state_dict"], "methods", ["None"], ["", "def", "_init_modules", "(", "self", ")", ":", "\n", "        ", "vgg", "=", "models", ".", "vgg16", "(", ")", "\n", "if", "self", ".", "pretrained", ":", "\n", "            ", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "self", ".", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "vgg", ".", "load_state_dict", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "vgg", ".", "state_dict", "(", ")", "}", "\n", ")", "\n", "\n", "", "vgg", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "classifier", ".", "_modules", ".", "values", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "# not using the last maxpool layer", "\n", "# print(vgg.features)", "\n", "self", ".", "RCNN_base1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ".", "_modules", ".", "values", "(", ")", ")", "[", ":", "14", "]", ")", "\n", "\n", "self", ".", "RCNN_base2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ".", "_modules", ".", "values", "(", ")", ")", "[", "14", ":", "-", "1", "]", ")", "\n", "# print(self.RCNN_base1)", "\n", "# print(self.RCNN_base2)", "\n", "self", ".", "netD", "=", "netD", "(", "context", "=", "self", ".", "gc", ")", "\n", "self", ".", "netD_pixel", "=", "netD_pixel", "(", "context", "=", "self", ".", "lc", ")", "\n", "feat_d", "=", "4096", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_d", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat_d", "+=", "128", "\n", "# Fix the layers before conv3:", "\n", "", "for", "layer", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base1", "[", "layer", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# self.RCNN_base = _RCNN_base(vgg.features, self.classes, self.dout_base_model)", "\n", "\n", "", "", "self", ".", "RCNN_top", "=", "vgg", ".", "classifier", "\n", "\n", "self", ".", "RCNN_cls_score", "=", "nn", ".", "Linear", "(", "feat_d", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "feat_d", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "feat_d", ",", "4", "*", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.vgg16._head_to_tail": [[162, 168], ["pool5.view", "vgg16.vgg16.RCNN_top", "pool5.size"], "methods", ["None"], ["", "", "def", "_head_to_tail", "(", "self", ",", "pool5", ")", ":", "\n", "\n", "        ", "pool5_flat", "=", "pool5", ".", "view", "(", "pool5", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "fc7", "=", "self", ".", "RCNN_top", "(", "pool5_flat", ")", "\n", "\n", "return", "fc7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.vgg16.conv1x1": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.LabelResizeLayer.ImageLabelResizeLayer.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageLabelResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.LabelResizeLayer.ImageLabelResizeLayer.forward": [[21, 40], ["x.detach().cpu().numpy", "need_backprop.detach().cpu().numpy", "numpy.zeros", "range", "gt_blob.transpose.transpose.transpose", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "y.squeeze().long.squeeze().long.squeeze().long", "numpy.array", "cv2.resize", "x.detach().cpu", "need_backprop.detach().cpu", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "y.squeeze().long.squeeze().long.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x.detach", "need_backprop.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "\n", "        ", "feats", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lbs", "=", "need_backprop", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_blob", "=", "np", ".", "zeros", "(", "\n", "(", "lbs", ".", "shape", "[", "0", "]", ",", "feats", ".", "shape", "[", "2", "]", ",", "feats", ".", "shape", "[", "3", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "for", "i", "in", "range", "(", "lbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "lb", "=", "np", ".", "array", "(", "[", "lbs", "[", "i", "]", "]", ")", "\n", "lbs_resize", "=", "cv2", ".", "resize", "(", "\n", "lb", ",", "(", "feats", ".", "shape", "[", "3", "]", ",", "feats", ".", "shape", "[", "2", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", "\n", ")", "\n", "gt_blob", "[", "i", ",", "0", ":", "lbs_resize", ".", "shape", "[", "0", "]", ",", "0", ":", "lbs_resize", ".", "shape", "[", "1", "]", ",", "0", "]", "=", "lbs_resize", "\n", "\n", "", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "gt_blob", "=", "gt_blob", ".", "transpose", "(", "channel_swap", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "gt_blob", ")", ")", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.LabelResizeLayer.InstanceLabelResizeLayer.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "InstanceLabelResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "minibatch", "=", "256", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.LabelResizeLayer.InstanceLabelResizeLayer.forward": [[47, 57], ["x.data.cpu().numpy", "need_backprop.data.cpu().numpy", "numpy.ones", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.data.cpu", "need_backprop.data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "feats", "=", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lbs", "=", "need_backprop", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "resized_lbs", "=", "np", ".", "ones", "(", "(", "feats", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "lbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "resized_lbs", "[", "i", "*", "self", ".", "minibatch", ":", "(", "i", "+", "1", ")", "*", "self", ".", "minibatch", "]", "=", "lbs", "[", "i", "]", "\n", "\n", "", "y", "=", "torch", ".", "from_numpy", "(", "resized_lbs", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.faster_rcnn._fasterRCNN.__init__": [[24, 58], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_layers.ROIPool", "model.roi_layers.ROIAlign", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "model.da_faster_rcnn_instance_da_weight.DA._InstanceDA"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ",", "da_use_contex", ",", "in_channel", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "ROIPool", "(", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "ROIAlign", "(", "\n", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ",", "0", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "(", "\n", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", ")", "\n", "\n", "self", ".", "conv_lst", "=", "nn", ".", "Conv2d", "(", "self", ".", "dout_base_model", ",", "self", ".", "n_classes", "-", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "# self.bn1 = nn.BatchNorm2d(self.dout_base_model, momentum=0.01)", "\n", "# self.bn2 = nn.BatchNorm2d(self.n_classes-1, momentum=0.01)", "\n", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "            ", "if", "self", ".", "lc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "", "self", ".", "RCNN_instanceDA", "=", "_InstanceDA", "(", "in_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.faster_rcnn._fasterRCNN.forward": [[59, 237], ["im_data.size", "faster_rcnn._fasterRCNN.RCNN_base1", "faster_rcnn._fasterRCNN.RCNN_base2", "faster_rcnn._fasterRCNN.RCNN_rpn", "faster_rcnn._fasterRCNN.avg_pool", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "torch.BCELoss.", "faster_rcnn._fasterRCNN.RCNN_bbox_pred", "cls_prob.view.view.view", "torch.gather.squeeze.view", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "faster_rcnn._fasterRCNN.RCNN_rpn.eval", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "faster_rcnn._fasterRCNN.RCNN_rpn.train", "faster_rcnn._fasterRCNN.netD_pixel", "faster_rcnn._fasterRCNN.netD_pixel", "faster_rcnn._fasterRCNN.netD", "faster_rcnn._fasterRCNN.netD", "faster_rcnn._fasterRCNN.netD", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "faster_rcnn._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN.RCNN_roi_align", "feat_pixel.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feat.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cls_prob.view.view.argmax().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "range", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "model.utils.net_utils.grad_reverse", "faster_rcnn._fasterRCNN.netD_pixel", "model.utils.net_utils.grad_reverse", "model.utils.net_utils.grad_reverse", "faster_rcnn._fasterRCNN.detach", "model.utils.net_utils.grad_reverse", "faster_rcnn._fasterRCNN.conv_lst().squeeze", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "faster_rcnn._fasterRCNN.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "faster_rcnn._fasterRCNN.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "cls_pre_label[].item", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "faster_rcnn._fasterRCNN.detach", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "feat_pixel.view().repeat.view().repeat.view", "feat.view().repeat.view().repeat.view", "cls_prob.view.view.argmax", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "target_weight.append", "target_weight.append", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.conv_lst", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "feat_pixel.view().repeat.view().repeat.detach", "feat.view().repeat.view().repeat.detach", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "im_data", ",", "\n", "im_info", ",", "\n", "im_cls_lb", ",", "\n", "gt_boxes", ",", "\n", "num_boxes", ",", "\n", "target", "=", "False", ",", "\n", "eta", "=", "1.0", ",", "\n", "weight_value", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "if", "target", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "train", "(", ")", "\n", "\n", "", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "\n", "# feed image data to base model to obtain base feature map", "\n", "base_feat1", "=", "self", ".", "RCNN_base1", "(", "im_data", ")", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "d_pixel", ",", "_", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "# print(d_pixel)", "\n", "# if not target:", "\n", "if", "True", ":", "\n", "                ", "_", ",", "feat_pixel", "=", "self", ".", "netD_pixel", "(", "base_feat1", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "d_pixel", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "", "base_feat", "=", "self", ".", "RCNN_base2", "(", "base_feat1", ")", "\n", "if", "self", ".", "gc", ":", "\n", "            ", "domain_p", ",", "_", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#, diff", "\n", "_", ",", "feat", "=", "self", ".", "netD", "(", "base_feat", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "domain_p", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#,diff", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "\n", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", ")", "\n", "# supervise base feature map with category level label", "\n", "cls_feat", "=", "self", ".", "avg_pool", "(", "base_feat", ")", "\n", "cls_feat", "=", "self", ".", "conv_lst", "(", "cls_feat", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# cls_feat = self.conv_lst(self.bn1(self.avg_pool(base_feat))).squeeze(-1).squeeze(-1)", "\n", "category_loss_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "cls_feat", ",", "im_cls_lb", ")", "\n", "\n", "# if it is training phrase, then use ground trubut bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "\n", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "\"align\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "\"pool\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "# feed pooled features to top model", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "instance_pooled_feat", "=", "pooled_feat", "\n", "# feat_pixel = torch.zeros(feat_pixel.size()).cuda()", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_pixel", "=", "feat_pixel", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat_pixel", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat_pixel", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat", "=", "feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "# compute bbox offset", "\n", "\n", "# compute object classification probability", "\n", "", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n", "# add instance da", "\n", "instance_sigmoid", ",", "same_size_label", "=", "self", ".", "RCNN_instanceDA", "(", "\n", "instance_pooled_feat", ",", "need_backprop", "\n", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "cls_pre_label", "=", "cls_prob", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "cls_feat_sig", "=", "F", ".", "sigmoid", "(", "cls_feat", "[", "0", "]", ")", ".", "detach", "(", ")", "\n", "target_weight", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cls_pre_label", ")", ")", ":", "\n", "                ", "label_i", "=", "cls_pre_label", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "label_i", ">", "0", ":", "\n", "                    ", "diff_value", "=", "torch", ".", "exp", "(", "\n", "weight_value", "\n", "*", "torch", ".", "abs", "(", "cls_feat_sig", "[", "label_i", "-", "1", "]", "-", "cls_prob", "[", "i", "]", "[", "label_i", "]", ")", "\n", ")", ".", "item", "(", ")", "\n", "target_weight", ".", "append", "(", "diff_value", ")", "\n", "", "else", ":", "\n", "                    ", "target_weight", ".", "append", "(", "1.0", ")", "\n", "\n", "", "", "instance_loss", "=", "nn", ".", "BCELoss", "(", "\n", "weight", "=", "torch", ".", "Tensor", "(", "target_weight", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "instance_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "", "DA_ins_loss_cls", "=", "instance_loss", "(", "instance_sigmoid", ",", "same_size_label", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "return", "d_pixel", ",", "domain_p", ",", "DA_ins_loss_cls", "\n", "\n", "# compute bbox offset", "\n", "", "bbox_pred", "=", "self", ".", "RCNN_bbox_pred", "(", "pooled_feat", ")", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "class_agnostic", ":", "\n", "            ", "bbox_pred_view", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "int", "(", "bbox_pred", ".", "size", "(", "1", ")", "/", "4", ")", ",", "4", "\n", ")", "\n", "bbox_pred_select", "=", "torch", ".", "gather", "(", "\n", "bbox_pred_view", ",", "\n", "1", ",", "\n", "rois_label", ".", "view", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "\n", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "4", "\n", ")", ",", "\n", ")", "\n", "bbox_pred", "=", "bbox_pred_select", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "RCNN_loss_cls", "=", "0", "\n", "RCNN_loss_bbox", "=", "0", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# classification loss", "\n", "            ", "RCNN_loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "rois_label", ")", "\n", "\n", "# bounding box regression L1 loss", "\n", "RCNN_loss_bbox", "=", "_smooth_l1_loss", "(", "\n", "bbox_pred", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "\n", ")", "\n", "\n", "", "cls_prob", "=", "cls_prob", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "return", "(", "\n", "rois", ",", "\n", "cls_prob", ",", "\n", "bbox_pred", ",", "\n", "category_loss_cls", ",", "\n", "rpn_loss_cls", ",", "\n", "rpn_loss_bbox", ",", "\n", "RCNN_loss_cls", ",", "\n", "RCNN_loss_bbox", ",", "\n", "rois_label", ",", "\n", "d_pixel", ",", "\n", "domain_p", ",", "\n", "DA_ins_loss_cls", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.faster_rcnn._fasterRCNN._init_weights": [[239, 258], ["faster_rcnn._fasterRCNN._init_weights.normal_init"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            weight initalizer: truncated normal and random normal.\n            \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_Conv", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_bbox_pred", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_bbox_pred", ",", "0", ",", "0.001", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.faster_rcnn._fasterRCNN.create_architecture": [[259, 262], ["faster_rcnn._fasterRCNN._init_modules", "faster_rcnn._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], ["", "def", "create_architecture", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_modules", "(", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA.GRLayer.forward": [[17, 22], ["input.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "0.1", "\n", "\n", "return", "input", ".", "view_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA.GRLayer.backward": [[23, 27], ["grad_outputs.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "output", "=", "grad_outputs", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA._ImageDA.__init__": [[34, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.da_faster_rcnn_instance_da_weight.LabelResizeLayer.ImageLabelResizeLayer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "_ImageDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "# feat layer          256*H*W for vgg16", "\n", "self", ".", "Conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "Conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "reLu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "LabelResizeLayer", "=", "ImageLabelResizeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA._ImageDA.forward": [[42, 48], ["DA.grad_reverse", "DA._ImageDA.reLu", "DA._ImageDA.Conv2", "DA._ImageDA.LabelResizeLayer", "DA._ImageDA.Conv1"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ")", "\n", "x", "=", "self", ".", "reLu", "(", "self", ".", "Conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "Conv2", "(", "x", ")", "\n", "label", "=", "self", ".", "LabelResizeLayer", "(", "x", ",", "need_backprop", ")", "\n", "return", "x", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA._InstanceDA.__init__": [[51, 63], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "model.da_faster_rcnn_instance_da_weight.LabelResizeLayer.InstanceLabelResizeLayer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channle", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_InstanceDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dc_ip1", "=", "nn", ".", "Linear", "(", "in_channle", ",", "1024", ")", "\n", "self", ".", "dc_relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dc_drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "dc_ip2", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "dc_relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dc_drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "clssifer", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ")", "\n", "self", ".", "LabelResizeLayer", "=", "InstanceLabelResizeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA._InstanceDA.forward": [[64, 71], ["DA.grad_reverse", "DA._InstanceDA.dc_drop1", "DA._InstanceDA.dc_drop2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "DA._InstanceDA.LabelResizeLayer", "DA._InstanceDA.dc_relu1", "DA._InstanceDA.dc_relu2", "DA._InstanceDA.clssifer", "DA._InstanceDA.dc_ip1", "DA._InstanceDA.dc_ip2"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ")", "\n", "x", "=", "self", ".", "dc_drop1", "(", "self", ".", "dc_relu1", "(", "self", ".", "dc_ip1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dc_drop2", "(", "self", ".", "dc_relu2", "(", "self", ".", "dc_ip2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "clssifer", "(", "x", ")", ")", "\n", "label", "=", "self", ".", "LabelResizeLayer", "(", "x", ",", "need_backprop", ")", "\n", "return", "x", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.DA.grad_reverse": [[29, 31], ["GRLayer.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GRLayer", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD_pixel.__init__": [[40, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.netD_pixel._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD_pixel._init_weights": [[48, 65], ["resnet.netD_pixel._init_weights.normal_init"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n        weight initalizer: truncated normal and random normal.\n        \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "# m.bias.data.zero_()", "\n", "\n", "", "", "normal_init", "(", "self", ".", "conv1", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv2", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv3", ",", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD_pixel.forward": [[66, 76], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.netD_pixel.conv1", "resnet.netD_pixel.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.netD_pixel.conv3", "resnet.netD_pixel.conv3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "resnet.netD_pixel.size", "resnet.netD_pixel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", ",", "feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD.__init__": [[79, 90], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "1024", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD.forward": [[91, 104], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.netD.view", "resnet.netD.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.netD.bn1", "resnet.netD.bn2", "resnet.netD.bn3", "resnet.netD.size", "resnet.netD.size", "resnet.netD.conv1", "resnet.netD.conv2", "resnet.netD.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD_dc.__init__": [[107, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.netD_dc.forward": [[115, 120], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "resnet.netD_dc.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.netD_dc.bn1", "resnet.netD_dc.bn2", "resnet.netD_dc.fc1", "resnet.netD_dc.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.BasicBlock.__init__": [[125, 134], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.BasicBlock.forward": [[135, 152], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.Bottleneck.__init__": [[157, 172], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "# change", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.Bottleneck.forward": [[173, 194], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.ResNet.__init__": [[197, 222], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", "\n", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.ResNet._make_layer": [[223, 244], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.ResNet.forward": [[245, 261], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet.__init__": [[319, 341], ["model.da_faster_rcnn_instance_da_weight.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "classes", ",", "\n", "num_layers", "=", "101", ",", "\n", "pretrained", "=", "False", ",", "\n", "pretrained_path", "=", "None", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "lc", "=", "False", ",", "\n", "gc", "=", "False", ",", "\n", "da_use_contex", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "pretrained_path", "\n", "self", ".", "dout_base_model", "=", "1024", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "self", ".", "layers", "=", "num_layers", "\n", "if", "not", "pretrained_path", ":", "\n", "            ", "self", ".", "model_path", "=", "pretrained_path", "\n", "", "_fasterRCNN", ".", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ",", "da_use_contex", ",", "2048", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet._init_modules": [[342, 396], ["resnet.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet50.netD_pixel", "resnet50.netD", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet50.resnet.RCNN_base1[].parameters", "resnet50.resnet.RCNN_base1[].parameters", "resnet50.resnet.RCNN_base1.apply", "resnet50.resnet.RCNN_base2.apply", "resnet50.resnet.RCNN_top.apply", "resnet.resnet50", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet50.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet50.state_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet50"], ["", "def", "_init_modules", "(", "self", ")", ":", "\n", "\n", "        ", "resnet", "=", "resnet101", "(", ")", "\n", "if", "self", ".", "layers", "==", "50", ":", "\n", "            ", "resnet", "=", "resnet50", "(", ")", "\n", "", "if", "self", ".", "pretrained", "==", "True", ":", "\n", "            ", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "self", ".", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "resnet", ".", "load_state_dict", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "resnet", ".", "state_dict", "(", ")", "}", "\n", ")", "\n", "# Build resnet.", "\n", "", "self", ".", "RCNN_base1", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "resnet", ".", "layer1", "\n", ")", "\n", "self", ".", "RCNN_base2", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "netD_pixel", "=", "netD_pixel", "(", "context", "=", "self", ".", "lc", ")", "\n", "self", ".", "netD", "=", "netD", "(", "context", "=", "self", ".", "gc", ")", "\n", "\n", "self", ".", "RCNN_top", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layer4", ")", "\n", "feat_d", "=", "2048", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_d", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat_d", "+=", "128", "\n", "", "self", ".", "RCNN_cls_score", "=", "nn", ".", "Linear", "(", "feat_d", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "feat_d", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "feat_d", ",", "4", "*", "self", ".", "n_classes", ")", "\n", "\n", "# Fix blocks", "\n", "", "for", "p", "in", "self", ".", "RCNN_base1", "[", "0", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "RCNN_base1", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# assert (0 <= cfg.RESNET.FIXED_BLOCKS < 4)", "\n", "# if cfg.RESNET.FIXED_BLOCKS >= 3:", "\n", "#   for p in self.RCNN_base1[6].parameters(): p.requires_grad=False", "\n", "# if cfg.RESNET.FIXED_BLOCKS >= 2:", "\n", "#   for p in self.RCNN_base1[5].parameters(): p.requires_grad=False", "\n", "# if cfg.RESNET.FIXED_BLOCKS >= 1:", "\n", "#  for p in self.RCNN_base1[4].parameters(): p.requires_grad=False", "\n", "\n", "", "def", "set_bn_fix", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "self", ".", "RCNN_base1", ".", "apply", "(", "set_bn_fix", ")", "\n", "self", ".", "RCNN_base2", ".", "apply", "(", "set_bn_fix", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_fix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet.train": [[397, 414], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet.resnet.RCNN_base1.eval", "resnet.resnet.RCNN_base1[].train", "resnet.resnet.RCNN_base2.train", "resnet.resnet.RCNN_base1.apply", "resnet.resnet.RCNN_base2.apply", "resnet.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override train so that the training mode is set as we want", "\n", "        ", "nn", ".", "Module", ".", "train", "(", "self", ",", "mode", ")", "\n", "if", "mode", ":", "\n", "# Set fixed blocks to be in eval mode", "\n", "            ", "self", ".", "RCNN_base1", ".", "eval", "(", ")", "\n", "self", ".", "RCNN_base1", "[", "4", "]", ".", "train", "(", ")", "\n", "self", ".", "RCNN_base2", ".", "train", "(", ")", "\n", "\n", "def", "set_bn_eval", "(", "m", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "self", ".", "RCNN_base1", ".", "apply", "(", "set_bn_eval", ")", "\n", "self", ".", "RCNN_base2", ".", "apply", "(", "set_bn_eval", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet._head_to_tail": [[415, 418], ["resnet.resnet.RCNN_top().mean().mean", "resnet.resnet.RCNN_top().mean", "resnet.resnet.RCNN_top"], "methods", ["None"], ["", "", "def", "_head_to_tail", "(", "self", ",", "pool5", ")", ":", "\n", "        ", "fc7", "=", "self", ".", "RCNN_top", "(", "pool5", ")", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "return", "fc7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.conv1x1": [[32, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet18": [[263, 272], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet34": [[274, 283], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet50": [[285, 294], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet101": [[296, 305], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_da_weight.resnet.resnet152": [[307, 316], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.rpn._RPN.__init__": [[18, 53], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "proposal_layer._ProposalLayer", "anchor_target_layer._AnchorTargetLayer", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "din", ")", ":", "\n", "        ", "super", "(", "_RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "din", "=", "din", "# get depth of input feature map, e.g., 512", "\n", "self", ".", "anchor_scales", "=", "cfg", ".", "ANCHOR_SCALES", "\n", "self", ".", "anchor_ratios", "=", "cfg", ".", "ANCHOR_RATIOS", "\n", "self", ".", "feat_stride", "=", "cfg", ".", "FEAT_STRIDE", "[", "0", "]", "\n", "\n", "# define the convrelu layers processing input feature map", "\n", "self", ".", "RPN_Conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "din", ",", "512", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# define bg/fg classifcation score layer", "\n", "self", ".", "nc_score_out", "=", "(", "\n", "len", "(", "self", ".", "anchor_scales", ")", "*", "len", "(", "self", ".", "anchor_ratios", ")", "*", "2", "\n", ")", "# 2(bg/fg) * 9 (anchors)", "\n", "self", ".", "RPN_cls_score", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "nc_score_out", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# define anchor box offset prediction layer", "\n", "self", ".", "nc_bbox_out", "=", "(", "\n", "len", "(", "self", ".", "anchor_scales", ")", "*", "len", "(", "self", ".", "anchor_ratios", ")", "*", "4", "\n", ")", "# 4(coords) * 9 (anchors)", "\n", "self", ".", "RPN_bbox_pred", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "nc_bbox_out", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# define proposal layer", "\n", "self", ".", "RPN_proposal", "=", "_ProposalLayer", "(", "\n", "self", ".", "feat_stride", ",", "self", ".", "anchor_scales", ",", "self", ".", "anchor_ratios", "\n", ")", "\n", "\n", "# define anchor target layer", "\n", "self", ".", "RPN_anchor_target", "=", "_AnchorTargetLayer", "(", "\n", "self", ".", "feat_stride", ",", "self", ".", "anchor_scales", ",", "self", ".", "anchor_ratios", "\n", ")", "\n", "\n", "self", ".", "rpn_loss_cls", "=", "0", "\n", "self", ".", "rpn_loss_box", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.rpn._RPN.reshape": [[54, 64], ["x.view.view.size", "x.view.view.view", "int", "int", "float", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reshape", "(", "x", ",", "d", ")", ":", "\n", "        ", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "input_shape", "[", "0", "]", ",", "\n", "int", "(", "d", ")", ",", "\n", "int", "(", "float", "(", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", ")", "/", "float", "(", "d", ")", ")", ",", "\n", "input_shape", "[", "3", "]", ",", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.rpn._RPN.forward": [[65, 137], ["base_feat.size", "torch.relu", "torch.relu", "torch.relu", "rpn._RPN.RPN_cls_score", "rpn._RPN.reshape", "torch.softmax", "torch.softmax", "torch.softmax", "rpn._RPN.reshape", "rpn._RPN.RPN_bbox_pred", "rpn._RPN.RPN_proposal", "rpn._RPN.RPN_Conv", "rpn._RPN.RPN_anchor_target", "rpn._RPN.permute().contiguous().view", "rpn_data[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.view().ne().nonzero().view", "torch.autograd.Variable.view().ne().nonzero().view", "torch.autograd.Variable.view().ne().nonzero().view", "torch.index_select.view", "torch.index_select.view", "torch.index_select.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "torch.autograd.Variable.data.ne", "torch.autograd.Variable.data.ne", "torch.autograd.Variable.data.ne", "rpn._RPN.permute().contiguous", "torch.autograd.Variable.view().ne().nonzero", "torch.autograd.Variable.view().ne().nonzero", "torch.autograd.Variable.view().ne().nonzero", "rpn._RPN.permute", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", ")", ":", "\n", "\n", "        ", "batch_size", "=", "base_feat", ".", "size", "(", "0", ")", "\n", "\n", "# return feature map after convrelu layer", "\n", "rpn_conv1", "=", "F", ".", "relu", "(", "self", ".", "RPN_Conv", "(", "base_feat", ")", ",", "inplace", "=", "True", ")", "\n", "# get rpn classification score", "\n", "rpn_cls_score", "=", "self", ".", "RPN_cls_score", "(", "rpn_conv1", ")", "\n", "\n", "rpn_cls_score_reshape", "=", "self", ".", "reshape", "(", "rpn_cls_score", ",", "2", ")", "\n", "rpn_cls_prob_reshape", "=", "F", ".", "softmax", "(", "rpn_cls_score_reshape", ",", "1", ")", "\n", "rpn_cls_prob", "=", "self", ".", "reshape", "(", "rpn_cls_prob_reshape", ",", "self", ".", "nc_score_out", ")", "\n", "\n", "# get rpn offsets to the anchor boxes", "\n", "rpn_bbox_pred", "=", "self", ".", "RPN_bbox_pred", "(", "rpn_conv1", ")", "\n", "\n", "# proposal layer", "\n", "cfg_key", "=", "\"TRAIN\"", "if", "self", ".", "training", "else", "\"TEST\"", "\n", "\n", "rois", "=", "self", ".", "RPN_proposal", "(", "\n", "(", "rpn_cls_prob", ".", "data", ",", "rpn_bbox_pred", ".", "data", ",", "im_info", ",", "cfg_key", ")", "\n", ")", "\n", "\n", "self", ".", "rpn_loss_cls", "=", "0", "\n", "self", ".", "rpn_loss_box", "=", "0", "\n", "\n", "# generating training labels and build the rpn loss", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "gt_boxes", "is", "not", "None", "\n", "\n", "rpn_data", "=", "self", ".", "RPN_anchor_target", "(", "\n", "(", "rpn_cls_score", ".", "data", ",", "gt_boxes", ",", "im_info", ",", "num_boxes", ")", "\n", ")", "\n", "\n", "# compute classification loss", "\n", "rpn_cls_score", "=", "(", "\n", "rpn_cls_score_reshape", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", ")", "\n", "rpn_label", "=", "rpn_data", "[", "0", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "rpn_keep", "=", "Variable", "(", "rpn_label", ".", "view", "(", "-", "1", ")", ".", "ne", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "rpn_cls_score", "=", "torch", ".", "index_select", "(", "rpn_cls_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "0", ",", "rpn_keep", ")", "\n", "rpn_label", "=", "torch", ".", "index_select", "(", "rpn_label", ".", "view", "(", "-", "1", ")", ",", "0", ",", "rpn_keep", ".", "data", ")", "\n", "rpn_label", "=", "Variable", "(", "rpn_label", ".", "long", "(", ")", ")", "\n", "self", ".", "rpn_loss_cls", "=", "F", ".", "cross_entropy", "(", "rpn_cls_score", ",", "rpn_label", ")", "\n", "fg_cnt", "=", "torch", ".", "sum", "(", "rpn_label", ".", "data", ".", "ne", "(", "0", ")", ")", "\n", "\n", "(", "\n", "rpn_bbox_targets", ",", "\n", "rpn_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights", ",", "\n", ")", "=", "rpn_data", "[", "1", ":", "]", "\n", "\n", "# compute bbox regression loss", "\n", "rpn_bbox_inside_weights", "=", "Variable", "(", "rpn_bbox_inside_weights", ")", "\n", "rpn_bbox_outside_weights", "=", "Variable", "(", "rpn_bbox_outside_weights", ")", "\n", "rpn_bbox_targets", "=", "Variable", "(", "rpn_bbox_targets", ")", "\n", "\n", "self", ".", "rpn_loss_box", "=", "_smooth_l1_loss", "(", "\n", "rpn_bbox_pred", ",", "\n", "rpn_bbox_targets", ",", "\n", "rpn_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights", ",", "\n", "sigma", "=", "3", ",", "\n", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "\n", ")", "\n", "\n", "", "return", "rois", ",", "self", ".", "rpn_loss_cls", ",", "self", ".", "rpn_loss_box", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._AnchorTargetLayer.__init__": [[37, 50], ["torch.Module.__init__", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "anchor_target_layer._AnchorTargetLayer._anchors.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "generate_anchors.generate_anchors.generate_anchors", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors.generate_anchors"], ["def", "__init__", "(", "self", ",", "feat_stride", ",", "scales", ",", "ratios", ")", ":", "\n", "        ", "super", "(", "_AnchorTargetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_feat_stride", "=", "feat_stride", "\n", "self", ".", "_scales", "=", "scales", "\n", "anchor_scales", "=", "scales", "\n", "self", ".", "_anchors", "=", "torch", ".", "from_numpy", "(", "\n", "generate_anchors", "(", "scales", "=", "np", ".", "array", "(", "anchor_scales", ")", ",", "ratios", "=", "np", ".", "array", "(", "ratios", ")", ")", "\n", ")", ".", "float", "(", ")", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_anchors", ".", "size", "(", "0", ")", "\n", "\n", "# allow boxes to sit over the edge by a small amount", "\n", "self", ".", "_allowed_border", "=", "0", "# default is 0", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._AnchorTargetLayer.forward": [[51, 242], ["gt_boxes.size", "numpy.meshgrid", "numpy.meshgrid", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as().float", "shifts.contiguous().type_as().float.contiguous().type_as().float.size", "anchor_target_layer._AnchorTargetLayer._anchors.type_as", "all_anchors.view.view.view", "int", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "gt_boxes.new().fill_", "gt_boxes.new().zero_", "gt_boxes.new().zero_", "bbox_transform.bbox_overlaps_batch", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "anchor_target_layer._compute_targets_batch", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "labels.view.view.view().permute().contiguous", "labels.view.view.view", "outputs.append", "bbox_targets.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "outputs.append", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.size", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view().expand", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous", "outputs.append", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view().expand", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous", "outputs.append", "rpn_cls_score.size", "rpn_cls_score.size", "rpn_cls_score.size", "rpn_cls_score.size", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.vstack().transpose", "numpy.vstack().transpose", "anchor_target_layer._AnchorTargetLayer._anchors.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.view", "bbox_transform.bbox_overlaps_batch.eq", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "gt_boxes.size", "offset.view().type_as", "[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "gt_boxes.new", "gt_boxes.new", "gt_boxes.new", "gt_max_overlaps.view().expand_as", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.sum.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "labels.view.view.view().permute", "bbox_targets.view().permute().contiguous.view().permute().contiguous.view().permute", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute", "numpy.vstack", "numpy.vstack", "long", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "offset.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous", "long", "gt_max_overlaps.view", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "gt_boxes.view", "labels.view.view.view", "bbox_targets.view().permute().contiguous.view().permute().contiguous.view", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "argmax_overlaps.view", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous", "numpy.random.permutation", "numpy.random.permutation", "torch.nonzero().view.size", "torch.nonzero().view.size", "numpy.random.permutation", "numpy.random.permutation", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_overlaps_batch", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._compute_targets_batch", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._unmap"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Algorithm:", "\n", "#", "\n", "# for each (H, W) location i", "\n", "#   generate 9 anchor boxes centered on cell i", "\n", "#   apply predicted bbox deltas at cell i to each of the 9 anchors", "\n", "# filter out-of-image anchors", "\n", "\n", "        ", "rpn_cls_score", "=", "input", "[", "0", "]", "\n", "gt_boxes", "=", "input", "[", "1", "]", "\n", "im_info", "=", "input", "[", "2", "]", "\n", "num_boxes", "=", "input", "[", "3", "]", "\n", "\n", "# map of shape (..., H, W)", "\n", "height", ",", "width", "=", "rpn_cls_score", ".", "size", "(", "2", ")", ",", "rpn_cls_score", ".", "size", "(", "3", ")", "\n", "\n", "batch_size", "=", "gt_boxes", ".", "size", "(", "0", ")", "\n", "\n", "feat_height", ",", "feat_width", "=", "rpn_cls_score", ".", "size", "(", "2", ")", ",", "rpn_cls_score", ".", "size", "(", "3", ")", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "feat_width", ")", "*", "self", ".", "_feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "feat_height", ")", "*", "self", ".", "_feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "\n", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", "\n", ")", ".", "transpose", "(", ")", "\n", ")", "\n", "shifts", "=", "shifts", ".", "contiguous", "(", ")", ".", "type_as", "(", "rpn_cls_score", ")", ".", "float", "(", ")", "\n", "\n", "A", "=", "self", ".", "_num_anchors", "\n", "K", "=", "shifts", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "_anchors", "=", "self", ".", "_anchors", ".", "type_as", "(", "gt_boxes", ")", "# move to specific gpu.", "\n", "all_anchors", "=", "self", ".", "_anchors", ".", "view", "(", "1", ",", "A", ",", "4", ")", "+", "shifts", ".", "view", "(", "K", ",", "1", ",", "4", ")", "\n", "all_anchors", "=", "all_anchors", ".", "view", "(", "K", "*", "A", ",", "4", ")", "\n", "\n", "total_anchors", "=", "int", "(", "K", "*", "A", ")", "\n", "\n", "keep", "=", "(", "\n", "(", "all_anchors", "[", ":", ",", "0", "]", ">=", "-", "self", ".", "_allowed_border", ")", "\n", "&", "(", "all_anchors", "[", ":", ",", "1", "]", ">=", "-", "self", ".", "_allowed_border", ")", "\n", "&", "(", "all_anchors", "[", ":", ",", "2", "]", "<", "long", "(", "im_info", "[", "0", "]", "[", "1", "]", ")", "+", "self", ".", "_allowed_border", ")", "\n", "&", "(", "all_anchors", "[", ":", ",", "3", "]", "<", "long", "(", "im_info", "[", "0", "]", "[", "0", "]", ")", "+", "self", ".", "_allowed_border", ")", "\n", ")", "\n", "\n", "inds_inside", "=", "torch", ".", "nonzero", "(", "keep", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# keep only inside anchors", "\n", "anchors", "=", "all_anchors", "[", "inds_inside", ",", ":", "]", "\n", "\n", "# label: 1 is positive, 0 is negative, -1 is dont care", "\n", "labels", "=", "gt_boxes", ".", "new", "(", "batch_size", ",", "inds_inside", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "-", "1", ")", "\n", "bbox_inside_weights", "=", "gt_boxes", ".", "new", "(", "batch_size", ",", "inds_inside", ".", "size", "(", "0", ")", ")", ".", "zero_", "(", ")", "\n", "bbox_outside_weights", "=", "gt_boxes", ".", "new", "(", "batch_size", ",", "inds_inside", ".", "size", "(", "0", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "overlaps", "=", "bbox_overlaps_batch", "(", "anchors", ",", "gt_boxes", ")", "\n", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "torch", ".", "max", "(", "overlaps", ",", "2", ")", "\n", "gt_max_overlaps", ",", "_", "=", "torch", ".", "max", "(", "overlaps", ",", "1", ")", "\n", "\n", "if", "not", "cfg", ".", "TRAIN", ".", "RPN_CLOBBER_POSITIVES", ":", "\n", "            ", "labels", "[", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", "]", "=", "0", "\n", "\n", "", "gt_max_overlaps", "[", "gt_max_overlaps", "==", "0", "]", "=", "1e-5", "\n", "keep", "=", "torch", ".", "sum", "(", "\n", "overlaps", ".", "eq", "(", "gt_max_overlaps", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "expand_as", "(", "overlaps", ")", ")", ",", "2", "\n", ")", "\n", "\n", "if", "torch", ".", "sum", "(", "keep", ")", ">", "0", ":", "\n", "            ", "labels", "[", "keep", ">", "0", "]", "=", "1", "\n", "\n", "# fg label: above threshold IOU", "\n", "", "labels", "[", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_OVERLAP", "]", "=", "1", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_CLOBBER_POSITIVES", ":", "\n", "            ", "labels", "[", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", "]", "=", "0", "\n", "\n", "", "num_fg", "=", "int", "(", "cfg", ".", "TRAIN", ".", "RPN_FG_FRACTION", "*", "cfg", ".", "TRAIN", ".", "RPN_BATCHSIZE", ")", "\n", "\n", "sum_fg", "=", "torch", ".", "sum", "(", "(", "labels", "==", "1", ")", ".", "int", "(", ")", ",", "1", ")", "\n", "sum_bg", "=", "torch", ".", "sum", "(", "(", "labels", "==", "0", ")", ".", "int", "(", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# subsample positive labels if we have too many", "\n", "            ", "if", "sum_fg", "[", "i", "]", ">", "num_fg", ":", "\n", "                ", "fg_inds", "=", "torch", ".", "nonzero", "(", "labels", "[", "i", "]", "==", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "# torch.randperm seems has a bug on multi-gpu setting that cause the segfault.", "\n", "# See https://github.com/pytorch/pytorch/issues/1868 for more details.", "\n", "# use numpy instead.", "\n", "# rand_num = torch.randperm(fg_inds.size(0)).type_as(gt_boxes).long()", "\n", "rand_num", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_inds", ".", "size", "(", "0", ")", ")", ")", "\n", ".", "type_as", "(", "gt_boxes", ")", "\n", ".", "long", "(", ")", "\n", ")", "\n", "disable_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_inds", ".", "size", "(", "0", ")", "-", "num_fg", "]", "]", "\n", "labels", "[", "i", "]", "[", "disable_inds", "]", "=", "-", "1", "\n", "\n", "#           num_bg = cfg.TRAIN.RPN_BATCHSIZE - sum_fg[i]", "\n", "", "num_bg", "=", "cfg", ".", "TRAIN", ".", "RPN_BATCHSIZE", "-", "torch", ".", "sum", "(", "(", "labels", "==", "1", ")", ".", "int", "(", ")", ",", "1", ")", "[", "i", "]", "\n", "\n", "# subsample negative labels if we have too many", "\n", "if", "sum_bg", "[", "i", "]", ">", "num_bg", ":", "\n", "                ", "bg_inds", "=", "torch", ".", "nonzero", "(", "labels", "[", "i", "]", "==", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "# rand_num = torch.randperm(bg_inds.size(0)).type_as(gt_boxes).long()", "\n", "\n", "rand_num", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "bg_inds", ".", "size", "(", "0", ")", ")", ")", "\n", ".", "type_as", "(", "gt_boxes", ")", "\n", ".", "long", "(", ")", "\n", ")", "\n", "disable_inds", "=", "bg_inds", "[", "rand_num", "[", ":", "bg_inds", ".", "size", "(", "0", ")", "-", "num_bg", "]", "]", "\n", "labels", "[", "i", "]", "[", "disable_inds", "]", "=", "-", "1", "\n", "\n", "", "", "offset", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", "*", "gt_boxes", ".", "size", "(", "1", ")", "\n", "\n", "argmax_overlaps", "=", "argmax_overlaps", "+", "offset", ".", "view", "(", "batch_size", ",", "1", ")", ".", "type_as", "(", "\n", "argmax_overlaps", "\n", ")", "\n", "bbox_targets", "=", "_compute_targets_batch", "(", "\n", "anchors", ",", "\n", "gt_boxes", ".", "view", "(", "-", "1", ",", "5", ")", "[", "argmax_overlaps", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "5", ")", ",", "\n", ")", "\n", "\n", "# use a single value instead of 4 values for easy index.", "\n", "bbox_inside_weights", "[", "labels", "==", "1", "]", "=", "cfg", ".", "TRAIN", ".", "RPN_BBOX_INSIDE_WEIGHTS", "[", "0", "]", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "<", "0", ":", "\n", "            ", "num_examples", "=", "torch", ".", "sum", "(", "labels", "[", "i", "]", ">=", "0", ")", "\n", "positive_weights", "=", "1.0", "/", "num_examples", ".", "item", "(", ")", "\n", "negative_weights", "=", "1.0", "/", "num_examples", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", ">", "0", ")", "&", "(", "\n", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "<", "1", "\n", ")", "\n", "\n", "", "bbox_outside_weights", "[", "labels", "==", "1", "]", "=", "positive_weights", "\n", "bbox_outside_weights", "[", "labels", "==", "0", "]", "=", "negative_weights", "\n", "\n", "labels", "=", "_unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "_unmap", "(", "\n", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "0", "\n", ")", "\n", "bbox_inside_weights", "=", "_unmap", "(", "\n", "bbox_inside_weights", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "0", "\n", ")", "\n", "bbox_outside_weights", "=", "_unmap", "(", "\n", "bbox_outside_weights", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "0", "\n", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "labels", "=", "(", "\n", "labels", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "A", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", ")", "\n", "labels", "=", "labels", ".", "view", "(", "batch_size", ",", "1", ",", "A", "*", "height", ",", "width", ")", "\n", "outputs", ".", "append", "(", "labels", ")", "\n", "\n", "bbox_targets", "=", "(", "\n", "bbox_targets", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "A", "*", "4", ")", "\n", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", ".", "contiguous", "(", ")", "\n", ")", "\n", "outputs", ".", "append", "(", "bbox_targets", ")", "\n", "\n", "anchors_count", "=", "bbox_inside_weights", ".", "size", "(", "1", ")", "\n", "bbox_inside_weights", "=", "bbox_inside_weights", ".", "view", "(", "\n", "batch_size", ",", "anchors_count", ",", "1", "\n", ")", ".", "expand", "(", "batch_size", ",", "anchors_count", ",", "4", ")", "\n", "\n", "bbox_inside_weights", "=", "(", "\n", "bbox_inside_weights", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "4", "*", "A", ")", "\n", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", ".", "contiguous", "(", ")", "\n", ")", "\n", "\n", "outputs", ".", "append", "(", "bbox_inside_weights", ")", "\n", "\n", "bbox_outside_weights", "=", "bbox_outside_weights", ".", "view", "(", "\n", "batch_size", ",", "anchors_count", ",", "1", "\n", ")", ".", "expand", "(", "batch_size", ",", "anchors_count", ",", "4", ")", "\n", "bbox_outside_weights", "=", "(", "\n", "bbox_outside_weights", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "4", "*", "A", ")", "\n", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", ".", "contiguous", "(", ")", "\n", ")", "\n", "outputs", ".", "append", "(", "bbox_outside_weights", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._AnchorTargetLayer.backward": [[243, 245], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._AnchorTargetLayer.reshape": [[246, 248], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._unmap": [[250, 261], ["data.dim", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data.size"], "function", ["None"], ["", "", "def", "_unmap", "(", "data", ",", "count", ",", "inds", ",", "batch_size", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "\n", "if", "data", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "ret", "=", "torch", ".", "Tensor", "(", "batch_size", ",", "count", ")", ".", "fill_", "(", "fill", ")", ".", "type_as", "(", "data", ")", "\n", "ret", "[", ":", ",", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "ret", "=", "torch", ".", "Tensor", "(", "batch_size", ",", "count", ",", "data", ".", "size", "(", "2", ")", ")", ".", "fill_", "(", "fill", ")", ".", "type_as", "(", "data", ")", "\n", "ret", "[", ":", ",", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.anchor_target_layer._compute_targets_batch": [[263, 267], ["bbox_transform.bbox_transform_batch"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform_batch"], ["", "def", "_compute_targets_batch", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "    ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "return", "bbox_transform_batch", "(", "ex_rois", ",", "gt_rois", "[", ":", ",", ":", ",", ":", "4", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer._ProposalLayer.__init__": [[35, 43], ["torch.Module.__init__", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "proposal_layer._ProposalLayer._anchors.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "generate_anchors.generate_anchors.generate_anchors", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors.generate_anchors"], ["def", "__init__", "(", "self", ",", "feat_stride", ",", "scales", ",", "ratios", ")", ":", "\n", "        ", "super", "(", "_ProposalLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_feat_stride", "=", "feat_stride", "\n", "self", ".", "_anchors", "=", "torch", ".", "from_numpy", "(", "\n", "generate_anchors", "(", "scales", "=", "np", ".", "array", "(", "scales", ")", ",", "ratios", "=", "np", ".", "array", "(", "ratios", ")", ")", "\n", ")", ".", "float", "(", ")", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_anchors", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer._ProposalLayer.forward": [[53, 178], ["bbox_deltas.view.view.size", "numpy.meshgrid", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as().float", "shifts.contiguous().type_as().float.contiguous().type_as().float.size", "proposal_layer._ProposalLayer._anchors.type_as", "anchors.view().expand.view().expand.view().expand", "bbox_deltas.view.view.permute().contiguous", "bbox_deltas.view.view.view", "scores.view.view.permute().contiguous", "scores.view.view.view", "bbox_transform.bbox_transform_inv", "bbox_transform.clip_boxes", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "scores.view.view.new().zero_", "scores.view.view.new().zero_", "range", "scores.view.view.size", "scores.view.view.size", "numpy.arange", "numpy.arange", "numpy.vstack().transpose", "proposal_layer._ProposalLayer._anchors.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.view", "scores_single[].view", "model.roi_layers.nms", "keep_idx_i.long().view.long().view.long().view", "proposals_single.size", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as", "anchors.view().expand.view().expand.view", "bbox_deltas.view.view.permute", "scores.view.view.permute", "scores.view.view.new", "scores.view.view.new", "scores_single[].view.squeeze", "numpy.vstack", "scores_keep.numel", "keep_idx_i.long().view.long().view.long", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.clip_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_wrapper.nms"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "# Algorithm:", "\n", "#", "\n", "# for each (H, W) location i", "\n", "#   generate A anchor boxes centered on cell i", "\n", "#   apply predicted bbox deltas at cell i to each of the A anchors", "\n", "# clip predicted boxes to image", "\n", "# remove predicted boxes with either height or width < threshold", "\n", "# sort all (proposal, score) pairs by score from highest to lowest", "\n", "# take top pre_nms_topN proposals before NMS", "\n", "# apply NMS with threshold 0.7 to remaining proposals", "\n", "# take after_nms_topN proposals after NMS", "\n", "# return the top proposals (-> RoIs top, scores top)", "\n", "\n", "# the first set of _num_anchors channels are bg probs", "\n", "# the second set are the fg probs", "\n", "        ", "scores", "=", "input", "[", "0", "]", "[", ":", ",", "self", ".", "_num_anchors", ":", ",", ":", ",", ":", "]", "\n", "bbox_deltas", "=", "input", "[", "1", "]", "\n", "im_info", "=", "input", "[", "2", "]", "\n", "cfg_key", "=", "input", "[", "3", "]", "\n", "\n", "pre_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "nms_thresh", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_NMS_THRESH", "\n", "min_size", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_MIN_SIZE", "\n", "\n", "batch_size", "=", "bbox_deltas", ".", "size", "(", "0", ")", "\n", "\n", "feat_height", ",", "feat_width", "=", "scores", ".", "size", "(", "2", ")", ",", "scores", ".", "size", "(", "3", ")", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "feat_width", ")", "*", "self", ".", "_feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "feat_height", ")", "*", "self", ".", "_feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "\n", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", "\n", ")", ".", "transpose", "(", ")", "\n", ")", "\n", "shifts", "=", "shifts", ".", "contiguous", "(", ")", ".", "type_as", "(", "scores", ")", ".", "float", "(", ")", "\n", "\n", "A", "=", "self", ".", "_num_anchors", "\n", "K", "=", "shifts", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "_anchors", "=", "self", ".", "_anchors", ".", "type_as", "(", "scores", ")", "\n", "# anchors = self._anchors.view(1, A, 4) + shifts.view(1, K, 4).permute(1, 0, 2).contiguous()", "\n", "anchors", "=", "self", ".", "_anchors", ".", "view", "(", "1", ",", "A", ",", "4", ")", "+", "shifts", ".", "view", "(", "K", ",", "1", ",", "4", ")", "\n", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "K", "*", "A", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "K", "*", "A", ",", "4", ")", "\n", "\n", "# Transpose and reshape predicted bbox transformations to get them", "\n", "# into the same order as the anchors:", "\n", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "view", "(", "batch_size", ",", "-", "1", ",", "4", ")", "\n", "\n", "# Same story for the scores:", "\n", "scores", "=", "scores", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# Convert anchors into proposals via bbox transformations", "\n", "proposals", "=", "bbox_transform_inv", "(", "anchors", ",", "bbox_deltas", ",", "batch_size", ")", "\n", "\n", "# 2. clip predicted boxes to image", "\n", "proposals", "=", "clip_boxes", "(", "proposals", ",", "im_info", ",", "batch_size", ")", "\n", "# proposals = clip_boxes_batch(proposals, im_info, batch_size)", "\n", "\n", "# assign the score to 0 if it's non keep.", "\n", "# keep = self._filter_boxes(proposals, min_size * im_info[:, 2])", "\n", "\n", "# trim keep index to make it euqal over batch", "\n", "# keep_idx = torch.cat(tuple(keep_idx), 0)", "\n", "\n", "# scores_keep = scores.view(-1)[keep_idx].view(batch_size, trim_size)", "\n", "# proposals_keep = proposals.view(-1, 4)[keep_idx, :].contiguous().view(batch_size, trim_size, 4)", "\n", "\n", "# _, order = torch.sort(scores_keep, 1, True)", "\n", "\n", "scores_keep", "=", "scores", "\n", "proposals_keep", "=", "proposals", "\n", "_", ",", "order", "=", "torch", ".", "sort", "(", "scores_keep", ",", "1", ",", "True", ")", "\n", "\n", "output", "=", "scores", ".", "new", "(", "batch_size", ",", "post_nms_topN", ",", "5", ")", ".", "zero_", "(", ")", "\n", "output_da", "=", "scores", ".", "new", "(", "batch_size", ",", "post_nms_topN", ",", "5", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# # 3. remove predicted boxes with either height or width < threshold", "\n", "# # (NOTE: convert min_size to input image scale stored in im_info[2])", "\n", "            ", "proposals_single", "=", "proposals_keep", "[", "i", "]", "\n", "scores_single", "=", "scores_keep", "[", "i", "]", "\n", "\n", "# # 4. sort all (proposal, score) pairs by score from highest to lowest", "\n", "# # 5. take top pre_nms_topN (e.g. 6000)", "\n", "order_single", "=", "order", "[", "i", "]", "\n", "\n", "if", "pre_nms_topN", ">", "0", "and", "pre_nms_topN", "<", "scores_keep", ".", "numel", "(", ")", ":", "\n", "                ", "order_single", "=", "order_single", "[", ":", "pre_nms_topN", "]", "\n", "\n", "", "proposals_single", "=", "proposals_single", "[", "order_single", ",", ":", "]", "\n", "scores_single", "=", "scores_single", "[", "order_single", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# 6. apply nms (e.g. threshold = 0.7)", "\n", "# 7. take after_nms_topN (e.g. 300)", "\n", "# 8. return the top proposals (-> RoIs top)", "\n", "keep_idx_i", "=", "nms", "(", "proposals_single", ",", "scores_single", ".", "squeeze", "(", "1", ")", ",", "nms_thresh", ")", "\n", "keep_idx_i", "=", "keep_idx_i", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# keep_idx_i_da = nms(proposals_single, scores_single.squeeze(1), 0.5)", "\n", "# keep_idx_i_da = keep_idx_i_da.long().view(-1)", "\n", "# if post_nms_topN > 0:", "\n", "#     keep_idx_i_da = keep_idx_i_da[:post_nms_topN]", "\n", "# proposals_single_da = proposals_single[keep_idx_i_da, :]", "\n", "\n", "if", "post_nms_topN", ">", "0", ":", "\n", "                ", "keep_idx_i", "=", "keep_idx_i", "[", ":", "post_nms_topN", "]", "\n", "", "proposals_single", "=", "proposals_single", "[", "keep_idx_i", ",", ":", "]", "\n", "scores_single", "=", "scores_single", "[", "keep_idx_i", ",", ":", "]", "\n", "\n", "# padding 0 at the end.", "\n", "num_proposal", "=", "proposals_single", ".", "size", "(", "0", ")", "\n", "output", "[", "i", ",", ":", ",", "0", "]", "=", "i", "\n", "output", "[", "i", ",", ":", "num_proposal", ",", "1", ":", "]", "=", "proposals_single", "\n", "\n", "# num_proposal_da = proposals_single_da.size(0)", "\n", "# output_da[i, :, 0] = i", "\n", "# output_da[i, :num_proposal_da, 1:] = proposals_single_da", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer._ProposalLayer.backward": [[179, 181], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer._ProposalLayer.reshape": [[182, 184], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer._ProposalLayer._filter_boxes": [[185, 193], ["min_size.view().expand_as", "min_size.view().expand_as", "min_size.view", "min_size.view"], "methods", ["None"], ["", "def", "_filter_boxes", "(", "self", ",", "boxes", ",", "min_size", ")", ":", "\n", "        ", "\"\"\"Remove all boxes with any side smaller than min_size.\"\"\"", "\n", "ws", "=", "boxes", "[", ":", ",", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "hs", "=", "boxes", "[", ":", ",", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "keep", "=", "(", "ws", ">=", "min_size", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "ws", ")", ")", "&", "(", "\n", "hs", ">=", "min_size", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "hs", ")", "\n", ")", "\n", "return", "keep", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform": [[15, 34], ["torch.log", "torch.log", "torch.stack"], "function", ["None"], ["def", "bbox_transform", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "    ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "1", ")", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform_batch": [[36, 77], ["torch.stack", "ex_rois.dim", "torch.log", "torch.log", "ex_rois.dim", "torch.log", "torch.log", "ValueError", "ex_ctr_x.view().expand_as", "ex_ctr_y.view().expand_as", "ex_widths.view().expand_as", "ex_heights.view().expand_as", "ex_ctr_x.view", "ex_ctr_y.view", "ex_widths.view", "ex_heights.view"], "function", ["None"], ["", "def", "bbox_transform_batch", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "\n", "    ", "if", "ex_rois", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_ctr_x", ")", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_ctr_y", ")", ")", "/", "ex_heights", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_widths", ")", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "\n", "gt_heights", "/", "ex_heights", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_heights", ")", "\n", ")", "\n", "\n", "", "elif", "ex_rois", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "ex_widths", "=", "ex_rois", "[", ":", ",", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"ex_roi input dimension is not correct.\"", ")", "\n", "\n", "", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "2", ")", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform_inv": [[79, 106], ["deltas.clone", "ctr_x.unsqueeze", "ctr_y.unsqueeze", "torch.exp", "widths.unsqueeze", "torch.exp", "heights.unsqueeze", "widths.unsqueeze", "heights.unsqueeze"], "function", ["None"], ["", "def", "bbox_transform_inv", "(", "boxes", ",", "deltas", ",", "batch_size", ")", ":", "\n", "    ", "widths", "=", "boxes", "[", ":", ",", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "heights", "=", "boxes", "[", ":", ",", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "ctr_x", "=", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "dx", "=", "deltas", "[", ":", ",", ":", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "deltas", "[", ":", ",", ":", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "deltas", "[", ":", ",", ":", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "deltas", "[", ":", ",", ":", ",", "3", ":", ":", "4", "]", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", ".", "unsqueeze", "(", "2", ")", "+", "ctr_x", ".", "unsqueeze", "(", "2", ")", "\n", "pred_ctr_y", "=", "dy", "*", "heights", ".", "unsqueeze", "(", "2", ")", "+", "ctr_y", ".", "unsqueeze", "(", "2", ")", "\n", "pred_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", ".", "unsqueeze", "(", "2", ")", "\n", "pred_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "pred_boxes", "=", "deltas", ".", "clone", "(", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2", "\n", "pred_boxes", "[", ":", ",", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "\n", "# y2", "\n", "pred_boxes", "[", ":", ",", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.clip_boxes_batch": [[108, 127], ["boxes.size"], "function", ["None"], ["", "def", "clip_boxes_batch", "(", "boxes", ",", "im_shape", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    Clip boxes to image boundaries.\n    \"\"\"", "\n", "num_rois", "=", "boxes", ".", "size", "(", "1", ")", "\n", "\n", "boxes", "[", "boxes", "<", "0", "]", "=", "0", "\n", "# batch_x = (im_shape[:,0]-1).view(batch_size, 1).expand(batch_size, num_rois)", "\n", "# batch_y = (im_shape[:,1]-1).view(batch_size, 1).expand(batch_size, num_rois)", "\n", "\n", "batch_x", "=", "im_shape", "[", ":", ",", "1", "]", "-", "1", "\n", "batch_y", "=", "im_shape", "[", ":", ",", "0", "]", "-", "1", "\n", "\n", "boxes", "[", ":", ",", ":", ",", "0", "]", "[", "boxes", "[", ":", ",", ":", ",", "0", "]", ">", "batch_x", "]", "=", "batch_x", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "[", "boxes", "[", ":", ",", ":", ",", "1", "]", ">", "batch_y", "]", "=", "batch_y", "\n", "boxes", "[", ":", ",", ":", ",", "2", "]", "[", "boxes", "[", ":", ",", ":", ",", "2", "]", ">", "batch_x", "]", "=", "batch_x", "\n", "boxes", "[", ":", ",", ":", ",", "3", "]", "[", "boxes", "[", ":", ",", ":", ",", "3", "]", ">", "batch_y", "]", "=", "batch_y", "\n", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.clip_boxes": [[129, 138], ["range", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_"], "function", ["None"], ["", "def", "clip_boxes", "(", "boxes", ",", "im_shape", ",", "batch_size", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "boxes", "[", "i", ",", ":", ",", "0", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "1", "]", "-", "1", ")", "\n", "boxes", "[", "i", ",", ":", ",", "1", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "0", "]", "-", "1", ")", "\n", "boxes", "[", "i", ",", ":", ",", "2", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "1", "]", "-", "1", ")", "\n", "boxes", "[", "i", ",", ":", ",", "3", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "0", "]", "-", "1", ")", "\n", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_overlaps": [[140, 179], ["anchors.size", "gt_boxes.size", "anchors.view().expand", "gt_boxes.view().expand", "anchors.view", "gt_boxes.view", "torch.min", "torch.max", "torch.min", "torch.max"], "function", ["None"], ["", "def", "bbox_overlaps", "(", "anchors", ",", "gt_boxes", ")", ":", "\n", "    ", "\"\"\"\n    anchors: (N, 4) ndarray of float\n    gt_boxes: (K, 4) ndarray of float\n\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "anchors", ".", "size", "(", "0", ")", "\n", "K", "=", "gt_boxes", ".", "size", "(", "0", ")", "\n", "\n", "gt_boxes_area", "=", "(", "\n", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", ")", ".", "view", "(", "1", ",", "K", ")", "\n", "\n", "anchors_area", "=", "(", "\n", "(", "anchors", "[", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "anchors", "[", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", "1", "]", "+", "1", ")", "\n", ")", ".", "view", "(", "N", ",", "1", ")", "\n", "\n", "boxes", "=", "anchors", ".", "view", "(", "N", ",", "1", ",", "4", ")", ".", "expand", "(", "N", ",", "K", ",", "4", ")", "\n", "query_boxes", "=", "gt_boxes", ".", "view", "(", "1", ",", "K", ",", "4", ")", ".", "expand", "(", "N", ",", "K", ",", "4", ")", "\n", "\n", "iw", "=", "(", "\n", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", "2", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "-", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "+", "1", "\n", ")", "\n", "iw", "[", "iw", "<", "0", "]", "=", "0", "\n", "\n", "ih", "=", "(", "\n", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", "3", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "3", "]", ")", "\n", "-", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "+", "1", "\n", ")", "\n", "ih", "[", "ih", "<", "0", "]", "=", "0", "\n", "\n", "ua", "=", "anchors_area", "+", "gt_boxes_area", "-", "(", "iw", "*", "ih", ")", "\n", "overlaps", "=", "iw", "*", "ih", "/", "ua", "\n", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_overlaps_batch": [[181, 289], ["gt_boxes[].contiguous.size", "anchors[].contiguous.dim", "anchors[].contiguous.size", "gt_boxes[].contiguous.size", "anchors[].contiguous.view().expand().contiguous", "gt_boxes[].contiguous", "anchors[].contiguous.view().expand", "gt_boxes[].contiguous.view().expand", "overlaps.masked_fill_", "overlaps.masked_fill_", "gt_area_zero.view().expand", "anchors_area_zero.view().expand", "anchors[].contiguous.dim", "anchors[].contiguous.size", "gt_boxes[].contiguous.size", "gt_boxes[].contiguous", "anchors[].contiguous.view().expand", "gt_boxes[].contiguous.view().expand", "overlaps.masked_fill_", "overlaps.masked_fill_", "ValueError", "anchors[].contiguous.view().expand", "anchors[].contiguous.view", "gt_boxes[].contiguous.view", "torch.min", "torch.max", "torch.min", "torch.max", "anchors[].contiguous.size", "anchors[].contiguous", "anchors[].contiguous", "gt_area_zero.view().expand", "anchors_area_zero.view().expand", "gt_area_zero.view", "anchors_area_zero.view", "anchors[].contiguous.view", "gt_boxes[].contiguous.view", "torch.min", "torch.max", "torch.min", "torch.max", "anchors[].contiguous.view", "gt_area_zero.view", "anchors_area_zero.view"], "function", ["None"], ["", "def", "bbox_overlaps_batch", "(", "anchors", ",", "gt_boxes", ")", ":", "\n", "    ", "\"\"\"\n    anchors: (N, 4) ndarray of float\n    gt_boxes: (b, K, 5) ndarray of float\n\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "batch_size", "=", "gt_boxes", ".", "size", "(", "0", ")", "\n", "\n", "if", "anchors", ".", "dim", "(", ")", "==", "2", ":", "\n", "\n", "        ", "N", "=", "anchors", ".", "size", "(", "0", ")", "\n", "K", "=", "gt_boxes", ".", "size", "(", "1", ")", "\n", "\n", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "N", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", ":", ",", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "\n", "gt_boxes_x", "=", "gt_boxes", "[", ":", ",", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "gt_boxes_y", "=", "gt_boxes", "[", ":", ",", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "gt_boxes_area", "=", "(", "gt_boxes_x", "*", "gt_boxes_y", ")", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", "\n", "\n", "anchors_boxes_x", "=", "anchors", "[", ":", ",", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "anchors_boxes_y", "=", "anchors", "[", ":", ",", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "anchors_area", "=", "(", "anchors_boxes_x", "*", "anchors_boxes_y", ")", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", "\n", "\n", "gt_area_zero", "=", "(", "gt_boxes_x", "==", "1", ")", "&", "(", "gt_boxes_y", "==", "1", ")", "\n", "anchors_area_zero", "=", "(", "anchors_boxes_x", "==", "1", ")", "&", "(", "anchors_boxes_y", "==", "1", ")", "\n", "\n", "boxes", "=", "anchors", ".", "view", "(", "batch_size", ",", "N", ",", "1", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "query_boxes", "=", "gt_boxes", ".", "view", "(", "batch_size", ",", "1", ",", "K", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "\n", "iw", "=", "(", "\n", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "-", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "+", "1", "\n", ")", "\n", "iw", "[", "iw", "<", "0", "]", "=", "0", "\n", "\n", "ih", "=", "(", "\n", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "\n", "-", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "\n", "+", "1", "\n", ")", "\n", "ih", "[", "ih", "<", "0", "]", "=", "0", "\n", "ua", "=", "anchors_area", "+", "gt_boxes_area", "-", "(", "iw", "*", "ih", ")", "\n", "overlaps", "=", "iw", "*", "ih", "/", "ua", "\n", "\n", "# mask the overlap here.", "\n", "overlaps", ".", "masked_fill_", "(", "\n", "gt_area_zero", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "0", "\n", ")", "\n", "overlaps", ".", "masked_fill_", "(", "\n", "anchors_area_zero", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "-", "1", "\n", ")", "\n", "\n", "", "elif", "anchors", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "N", "=", "anchors", ".", "size", "(", "1", ")", "\n", "K", "=", "gt_boxes", ".", "size", "(", "1", ")", "\n", "\n", "if", "anchors", ".", "size", "(", "2", ")", "==", "4", ":", "\n", "            ", "anchors", "=", "anchors", "[", ":", ",", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "anchors", "=", "anchors", "[", ":", ",", ":", ",", "1", ":", "5", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "gt_boxes", "=", "gt_boxes", "[", ":", ",", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "\n", "gt_boxes_x", "=", "gt_boxes", "[", ":", ",", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "gt_boxes_y", "=", "gt_boxes", "[", ":", ",", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "gt_boxes_area", "=", "(", "gt_boxes_x", "*", "gt_boxes_y", ")", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", "\n", "\n", "anchors_boxes_x", "=", "anchors", "[", ":", ",", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "anchors_boxes_y", "=", "anchors", "[", ":", ",", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "anchors_area", "=", "(", "anchors_boxes_x", "*", "anchors_boxes_y", ")", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", "\n", "\n", "gt_area_zero", "=", "(", "gt_boxes_x", "==", "1", ")", "&", "(", "gt_boxes_y", "==", "1", ")", "\n", "anchors_area_zero", "=", "(", "anchors_boxes_x", "==", "1", ")", "&", "(", "anchors_boxes_y", "==", "1", ")", "\n", "\n", "boxes", "=", "anchors", ".", "view", "(", "batch_size", ",", "N", ",", "1", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "query_boxes", "=", "gt_boxes", ".", "view", "(", "batch_size", ",", "1", ",", "K", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "\n", "iw", "=", "(", "\n", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "-", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "+", "1", "\n", ")", "\n", "iw", "[", "iw", "<", "0", "]", "=", "0", "\n", "\n", "ih", "=", "(", "\n", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "\n", "-", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "\n", "+", "1", "\n", ")", "\n", "ih", "[", "ih", "<", "0", "]", "=", "0", "\n", "ua", "=", "anchors_area", "+", "gt_boxes_area", "-", "(", "iw", "*", "ih", ")", "\n", "\n", "overlaps", "=", "iw", "*", "ih", "/", "ua", "\n", "\n", "# mask the overlap here.", "\n", "overlaps", ".", "masked_fill_", "(", "\n", "gt_area_zero", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "0", "\n", ")", "\n", "overlaps", ".", "masked_fill_", "(", "\n", "anchors_area_zero", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"anchors input dimension is not correct.\"", ")", "\n", "\n", "", "return", "overlaps", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer.__init__": [[28, 34], ["torch.Module.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_ProposalTargetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_classes", "=", "nclasses", "\n", "self", ".", "BBOX_NORMALIZE_MEANS", "=", "torch", ".", "FloatTensor", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_MEANS", ")", "\n", "self", ".", "BBOX_NORMALIZE_STDS", "=", "torch", ".", "FloatTensor", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_STDS", ")", "\n", "self", ".", "BBOX_INSIDE_WEIGHTS", "=", "torch", ".", "FloatTensor", "(", "cfg", ".", "TRAIN", ".", "BBOX_INSIDE_WEIGHTS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer.forward": [[35, 59], ["proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_MEANS.type_as", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_STDS.type_as", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_INSIDE_WEIGHTS.type_as", "gt_boxes.new().zero_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "int", "proposal_target_layer_cascade._ProposalTargetLayer._sample_rois_pytorch", "numpy.round", "numpy.round", "gt_boxes.new", "gt_boxes.size"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer._sample_rois_pytorch"], ["", "def", "forward", "(", "self", ",", "all_rois", ",", "gt_boxes", ",", "num_boxes", ")", ":", "\n", "\n", "        ", "self", ".", "BBOX_NORMALIZE_MEANS", "=", "self", ".", "BBOX_NORMALIZE_MEANS", ".", "type_as", "(", "gt_boxes", ")", "\n", "self", ".", "BBOX_NORMALIZE_STDS", "=", "self", ".", "BBOX_NORMALIZE_STDS", ".", "type_as", "(", "gt_boxes", ")", "\n", "self", ".", "BBOX_INSIDE_WEIGHTS", "=", "self", ".", "BBOX_INSIDE_WEIGHTS", ".", "type_as", "(", "gt_boxes", ")", "\n", "\n", "gt_boxes_append", "=", "gt_boxes", ".", "new", "(", "gt_boxes", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "gt_boxes_append", "[", ":", ",", ":", ",", "1", ":", "5", "]", "=", "gt_boxes", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "\n", "# Include ground-truth boxes in the set of candidate rois", "\n", "all_rois", "=", "torch", ".", "cat", "(", "[", "all_rois", ",", "gt_boxes_append", "]", ",", "1", ")", "\n", "\n", "num_images", "=", "1", "\n", "rois_per_image", "=", "int", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "/", "num_images", ")", "\n", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "cfg", ".", "TRAIN", ".", "FG_FRACTION", "*", "rois_per_image", ")", ")", "\n", "fg_rois_per_image", "=", "1", "if", "fg_rois_per_image", "==", "0", "else", "fg_rois_per_image", "\n", "\n", "labels", ",", "rois", ",", "bbox_targets", ",", "bbox_inside_weights", "=", "self", ".", "_sample_rois_pytorch", "(", "\n", "all_rois", ",", "gt_boxes", ",", "fg_rois_per_image", ",", "rois_per_image", ",", "self", ".", "_num_classes", "\n", ")", "\n", "\n", "bbox_outside_weights", "=", "(", "bbox_inside_weights", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "return", "rois", ",", "labels", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer.backward": [[60, 62], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer.reshape": [[63, 65], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer._get_bbox_regression_labels_pytorch": [[66, 96], ["labels_batch.size", "labels_batch.size", "bbox_target_data.new().zero_", "bbox_target_data.new().zero_", "range", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "range", "bbox_target_data.new", "bbox_target_data.new", "clss[].sum", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "bbox_target_data.new().zero_.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "_get_bbox_regression_labels_pytorch", "(", "\n", "self", ",", "bbox_target_data", ",", "labels_batch", ",", "num_classes", "\n", ")", ":", "\n", "        ", "\"\"\"Bounding-box regression targets (bbox_target_data) are stored in a\n        compact form b x N x (class, tx, ty, tw, th)\n\n        This function expands those targets into the 4-of-4*K representation used\n        by the network (i.e. only one class has non-zero targets).\n\n        Returns:\n            bbox_target (ndarray): b x N x 4K blob of regression targets\n            bbox_inside_weights (ndarray): b x N x 4K blob of loss weights\n        \"\"\"", "\n", "batch_size", "=", "labels_batch", ".", "size", "(", "0", ")", "\n", "rois_per_image", "=", "labels_batch", ".", "size", "(", "1", ")", "\n", "clss", "=", "labels_batch", "\n", "bbox_targets", "=", "bbox_target_data", ".", "new", "(", "batch_size", ",", "rois_per_image", ",", "4", ")", ".", "zero_", "(", ")", "\n", "bbox_inside_weights", "=", "bbox_target_data", ".", "new", "(", "bbox_targets", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "# assert clss[b].sum() > 0", "\n", "            ", "if", "clss", "[", "b", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inds", "=", "torch", ".", "nonzero", "(", "clss", "[", "b", "]", ">", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "inds", ".", "numel", "(", ")", ")", ":", "\n", "                ", "ind", "=", "inds", "[", "i", "]", "\n", "bbox_targets", "[", "b", ",", "ind", ",", ":", "]", "=", "bbox_target_data", "[", "b", ",", "ind", ",", ":", "]", "\n", "bbox_inside_weights", "[", "b", ",", "ind", ",", ":", "]", "=", "self", ".", "BBOX_INSIDE_WEIGHTS", "\n", "\n", "", "", "return", "bbox_targets", ",", "bbox_inside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer._compute_targets_pytorch": [[97, 116], ["ex_rois.size", "ex_rois.size", "bbox_transform.bbox_transform_batch", "ex_rois.size", "gt_rois.size", "ex_rois.size", "gt_rois.size", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_STDS.expand_as", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_MEANS.expand_as"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform_batch"], ["", "def", "_compute_targets_pytorch", "(", "self", ",", "ex_rois", ",", "gt_rois", ")", ":", "\n", "        ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "assert", "ex_rois", ".", "size", "(", "1", ")", "==", "gt_rois", ".", "size", "(", "1", ")", "\n", "assert", "ex_rois", ".", "size", "(", "2", ")", "==", "4", "\n", "assert", "gt_rois", ".", "size", "(", "2", ")", "==", "4", "\n", "\n", "batch_size", "=", "ex_rois", ".", "size", "(", "0", ")", "\n", "rois_per_image", "=", "ex_rois", ".", "size", "(", "1", ")", "\n", "\n", "targets", "=", "bbox_transform_batch", "(", "ex_rois", ",", "gt_rois", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_TARGETS_PRECOMPUTED", ":", "\n", "# Optionally normalize targets by a precomputed mean and stdev", "\n", "            ", "targets", "=", "(", "\n", "targets", "-", "self", ".", "BBOX_NORMALIZE_MEANS", ".", "expand_as", "(", "targets", ")", "\n", ")", "/", "self", ".", "BBOX_NORMALIZE_STDS", ".", "expand_as", "(", "targets", ")", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer._sample_rois_pytorch": [[117, 234], ["bbox_transform.bbox_overlaps_batch", "torch.max", "torch.max", "torch.max", "torch.max", "bbox_transform.bbox_overlaps_batch.size", "bbox_transform.bbox_overlaps_batch.size", "bbox_transform.bbox_overlaps_batch.size", "[].view", "[].view.new().zero_", "all_rois.new().zero_", "all_rois.new().zero_", "range", "proposal_target_layer_cascade._ProposalTargetLayer._compute_targets_pytorch", "proposal_target_layer_cascade._ProposalTargetLayer._get_bbox_regression_labels_pytorch", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "gt_boxes.size", "offset.view().type_as", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels_batch[].copy_", "[].view.new", "all_rois.new", "all_rois.new", "min", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "numpy.floor", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "offset.view", "gt_boxes[].contiguous().view", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.floor", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "numpy.random.rand", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "numpy.floor", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "ValueError", "gt_boxes[].contiguous", "offset.view", "numpy.random.rand", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.rand", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "numpy.random.permutation", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_overlaps_batch", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer._compute_targets_pytorch", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_target_layer_cascade._ProposalTargetLayer._get_bbox_regression_labels_pytorch"], ["", "def", "_sample_rois_pytorch", "(", "\n", "self", ",", "all_rois", ",", "gt_boxes", ",", "fg_rois_per_image", ",", "rois_per_image", ",", "num_classes", "\n", ")", ":", "\n", "        ", "\"\"\"Generate a random sample of RoIs comprising foreground and background\n        examples.\n        \"\"\"", "\n", "# overlaps: (rois x gt_boxes)", "\n", "\n", "overlaps", "=", "bbox_overlaps_batch", "(", "all_rois", ",", "gt_boxes", ")", "\n", "\n", "max_overlaps", ",", "gt_assignment", "=", "torch", ".", "max", "(", "overlaps", ",", "2", ")", "\n", "\n", "batch_size", "=", "overlaps", ".", "size", "(", "0", ")", "\n", "num_proposal", "=", "overlaps", ".", "size", "(", "1", ")", "\n", "num_boxes_per_img", "=", "overlaps", ".", "size", "(", "2", ")", "\n", "\n", "offset", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", "*", "gt_boxes", ".", "size", "(", "1", ")", "\n", "offset", "=", "offset", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "gt_assignment", ")", "+", "gt_assignment", "\n", "\n", "# changed indexing way for pytorch 1.0", "\n", "labels", "=", "(", "\n", "gt_boxes", "[", ":", ",", ":", ",", "4", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "-", "1", ")", "[", "(", "offset", ".", "view", "(", "-", "1", ")", ",", ")", "]", "\n", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", ")", "\n", "\n", "labels_batch", "=", "labels", ".", "new", "(", "batch_size", ",", "rois_per_image", ")", ".", "zero_", "(", ")", "\n", "rois_batch", "=", "all_rois", ".", "new", "(", "batch_size", ",", "rois_per_image", ",", "5", ")", ".", "zero_", "(", ")", "\n", "gt_rois_batch", "=", "all_rois", ".", "new", "(", "batch_size", ",", "rois_per_image", ",", "5", ")", ".", "zero_", "(", ")", "\n", "# Guard against the case when an image has fewer than max_fg_rois_per_image", "\n", "# foreground RoIs", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "fg_inds", "=", "torch", ".", "nonzero", "(", "max_overlaps", "[", "i", "]", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", ".", "view", "(", "-", "1", ")", "\n", "fg_num_rois", "=", "fg_inds", ".", "numel", "(", ")", "\n", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "torch", ".", "nonzero", "(", "\n", "(", "max_overlaps", "[", "i", "]", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "\n", "&", "(", "max_overlaps", "[", "i", "]", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", "\n", ")", ".", "view", "(", "-", "1", ")", "\n", "bg_num_rois", "=", "bg_inds", ".", "numel", "(", ")", "\n", "\n", "if", "fg_num_rois", ">", "0", "and", "bg_num_rois", ">", "0", ":", "\n", "# sampling fg", "\n", "                ", "fg_rois_per_this_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_num_rois", ")", "\n", "\n", "# torch.randperm seems has a bug on multi-gpu setting that cause the segfault.", "\n", "# See https://github.com/pytorch/pytorch/issues/1868 for more details.", "\n", "# use numpy instead.", "\n", "# rand_num = torch.randperm(fg_num_rois).long().cuda()", "\n", "rand_num", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_num_rois", ")", ")", "\n", ".", "type_as", "(", "gt_boxes", ")", "\n", ".", "long", "(", ")", "\n", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_rois_per_this_image", "]", "]", "\n", "\n", "# sampling bg", "\n", "bg_rois_per_this_image", "=", "rois_per_image", "-", "fg_rois_per_this_image", "\n", "\n", "# Seems torch.rand has a bug, it will generate very large number and make an error.", "\n", "# We use numpy rand instead.", "\n", "# rand_num = (torch.rand(bg_rois_per_this_image) * bg_num_rois).long().cuda()", "\n", "rand_num", "=", "np", ".", "floor", "(", "\n", "np", ".", "random", ".", "rand", "(", "bg_rois_per_this_image", ")", "*", "bg_num_rois", "\n", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "bg_inds", "[", "rand_num", "]", "\n", "\n", "", "elif", "fg_num_rois", ">", "0", "and", "bg_num_rois", "==", "0", ":", "\n", "# sampling fg", "\n", "# rand_num = torch.floor(torch.rand(rois_per_image) * fg_num_rois).long().cuda()", "\n", "                ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "rois_per_image", ")", "*", "fg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "]", "\n", "fg_rois_per_this_image", "=", "rois_per_image", "\n", "bg_rois_per_this_image", "=", "0", "\n", "", "elif", "bg_num_rois", ">", "0", "and", "fg_num_rois", "==", "0", ":", "\n", "# sampling bg", "\n", "# rand_num = torch.floor(torch.rand(rois_per_image) * bg_num_rois).long().cuda()", "\n", "                ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "rois_per_image", ")", "*", "bg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "\n", "bg_inds", "=", "bg_inds", "[", "rand_num", "]", "\n", "bg_rois_per_this_image", "=", "rois_per_image", "\n", "fg_rois_per_this_image", "=", "0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"bg_num_rois = 0 and fg_num_rois = 0, this should not happen!\"", "\n", ")", "\n", "\n", "# The indices that we're selecting (both fg and bg)", "\n", "", "keep_inds", "=", "torch", ".", "cat", "(", "[", "fg_inds", ",", "bg_inds", "]", ",", "0", ")", "\n", "\n", "# Select sampled values from various arrays:", "\n", "labels_batch", "[", "i", "]", ".", "copy_", "(", "labels", "[", "i", "]", "[", "keep_inds", "]", ")", "\n", "\n", "# Clamp labels for the background RoIs to 0", "\n", "if", "fg_rois_per_this_image", "<", "rois_per_image", ":", "\n", "                ", "labels_batch", "[", "i", "]", "[", "fg_rois_per_this_image", ":", "]", "=", "0", "\n", "\n", "", "rois_batch", "[", "i", "]", "=", "all_rois", "[", "i", "]", "[", "keep_inds", "]", "\n", "rois_batch", "[", "i", ",", ":", ",", "0", "]", "=", "i", "\n", "\n", "gt_rois_batch", "[", "i", "]", "=", "gt_boxes", "[", "i", "]", "[", "gt_assignment", "[", "i", "]", "[", "keep_inds", "]", "]", "\n", "\n", "", "bbox_target_data", "=", "self", ".", "_compute_targets_pytorch", "(", "\n", "rois_batch", "[", ":", ",", ":", ",", "1", ":", "5", "]", ",", "gt_rois_batch", "[", ":", ",", ":", ",", ":", "4", "]", "\n", ")", "\n", "\n", "bbox_targets", ",", "bbox_inside_weights", "=", "self", ".", "_get_bbox_regression_labels_pytorch", "(", "\n", "bbox_target_data", ",", "labels_batch", ",", "num_classes", "\n", ")", "\n", "\n", "return", "labels_batch", ",", "rois_batch", ",", "bbox_targets", ",", "bbox_inside_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors.generate_anchors": [[46, 61], ["generate_anchors._ratio_enum", "numpy.vstack", "numpy.arange", "numpy.array", "generate_anchors._scale_enum", "xrange"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._ratio_enum", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._scale_enum"], ["", "def", "generate_anchors", "(", "base_size", "=", "16", ",", "ratios", "=", "[", "0.5", ",", "1", ",", "2", "]", ",", "scales", "=", "2", "**", "np", ".", "arange", "(", "3", ",", "6", ")", ")", ":", "\n", "    ", "\"\"\"\n    Generate anchor (reference) windows by enumerating aspect ratios X\n    scales wrt a reference (0, 0, 15, 15) window.\n    \"\"\"", "\n", "\n", "base_anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ")", "-", "1", "\n", "ratio_anchors", "=", "_ratio_enum", "(", "base_anchor", ",", "ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "\n", "[", "\n", "_scale_enum", "(", "ratio_anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "\n", "for", "i", "in", "xrange", "(", "ratio_anchors", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._whctrs": [[63, 73], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "    ", "\"\"\"\n    Return width, height, x center, and y center for an anchor (window).\n    \"\"\"", "\n", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._mkanchors": [[75, 92], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "    ", "\"\"\"\n    Given a vector of widths (ws) and heights (hs) around a center\n    (x_ctr, y_ctr), output a set of anchors (windows).\n    \"\"\"", "\n", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._ratio_enum": [[94, 106], ["generate_anchors._whctrs", "numpy.round", "numpy.round", "generate_anchors._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._whctrs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "    ", "\"\"\"\n    Enumerate a set of anchors for each aspect ratio wrt an anchor.\n    \"\"\"", "\n", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._scale_enum": [[108, 118], ["generate_anchors._whctrs", "generate_anchors._mkanchors"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._whctrs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "    ", "\"\"\"\n    Enumerate a set of anchors for each scale wrt an anchor.\n    \"\"\"", "\n", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.rpn_origin._RPN.__init__": [[18, 53], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "proposal_layer._ProposalLayer", "anchor_target_layer._AnchorTargetLayer", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "din", ")", ":", "\n", "        ", "super", "(", "_RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "din", "=", "din", "# get depth of input feature map, e.g., 512", "\n", "self", ".", "anchor_scales", "=", "cfg", ".", "ANCHOR_SCALES", "\n", "self", ".", "anchor_ratios", "=", "cfg", ".", "ANCHOR_RATIOS", "\n", "self", ".", "feat_stride", "=", "cfg", ".", "FEAT_STRIDE", "[", "0", "]", "\n", "\n", "# define the convrelu layers processing input feature map", "\n", "self", ".", "RPN_Conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "din", ",", "512", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# define bg/fg classifcation score layer", "\n", "self", ".", "nc_score_out", "=", "(", "\n", "len", "(", "self", ".", "anchor_scales", ")", "*", "len", "(", "self", ".", "anchor_ratios", ")", "*", "2", "\n", ")", "# 2(bg/fg) * 9 (anchors)", "\n", "self", ".", "RPN_cls_score", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "nc_score_out", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# define anchor box offset prediction layer", "\n", "self", ".", "nc_bbox_out", "=", "(", "\n", "len", "(", "self", ".", "anchor_scales", ")", "*", "len", "(", "self", ".", "anchor_ratios", ")", "*", "4", "\n", ")", "# 4(coords) * 9 (anchors)", "\n", "self", ".", "RPN_bbox_pred", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "nc_bbox_out", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# define proposal layer", "\n", "self", ".", "RPN_proposal", "=", "_ProposalLayer", "(", "\n", "self", ".", "feat_stride", ",", "self", ".", "anchor_scales", ",", "self", ".", "anchor_ratios", "\n", ")", "\n", "\n", "# define anchor target layer", "\n", "self", ".", "RPN_anchor_target", "=", "_AnchorTargetLayer", "(", "\n", "self", ".", "feat_stride", ",", "self", ".", "anchor_scales", ",", "self", ".", "anchor_ratios", "\n", ")", "\n", "\n", "self", ".", "rpn_loss_cls", "=", "0", "\n", "self", ".", "rpn_loss_box", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.rpn_origin._RPN.reshape": [[54, 64], ["x.view.view.size", "x.view.view.view", "int", "int", "float", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reshape", "(", "x", ",", "d", ")", ":", "\n", "        ", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "input_shape", "[", "0", "]", ",", "\n", "int", "(", "d", ")", ",", "\n", "int", "(", "float", "(", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", ")", "/", "float", "(", "d", ")", ")", ",", "\n", "input_shape", "[", "3", "]", ",", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.rpn_origin._RPN.forward": [[65, 135], ["base_feat.size", "torch.relu", "torch.relu", "torch.relu", "rpn_origin._RPN.RPN_cls_score", "rpn_origin._RPN.reshape", "torch.softmax", "torch.softmax", "torch.softmax", "rpn_origin._RPN.reshape", "rpn_origin._RPN.RPN_bbox_pred", "rpn_origin._RPN.RPN_proposal", "rpn_origin._RPN.RPN_Conv", "rpn_origin._RPN.RPN_anchor_target", "rpn_origin._RPN.permute().contiguous().view", "rpn_data[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.view().ne().nonzero().view", "torch.autograd.Variable.view().ne().nonzero().view", "torch.autograd.Variable.view().ne().nonzero().view", "torch.index_select.view", "torch.index_select.view", "torch.index_select.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "torch.autograd.Variable.data.ne", "torch.autograd.Variable.data.ne", "torch.autograd.Variable.data.ne", "rpn_origin._RPN.permute().contiguous", "torch.autograd.Variable.view().ne().nonzero", "torch.autograd.Variable.view().ne().nonzero", "torch.autograd.Variable.view().ne().nonzero", "rpn_origin._RPN.permute", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", ")", ":", "\n", "\n", "        ", "batch_size", "=", "base_feat", ".", "size", "(", "0", ")", "\n", "\n", "# return feature map after convrelu layer", "\n", "rpn_conv1", "=", "F", ".", "relu", "(", "self", ".", "RPN_Conv", "(", "base_feat", ")", ",", "inplace", "=", "True", ")", "\n", "# get rpn classification score", "\n", "rpn_cls_score", "=", "self", ".", "RPN_cls_score", "(", "rpn_conv1", ")", "\n", "\n", "rpn_cls_score_reshape", "=", "self", ".", "reshape", "(", "rpn_cls_score", ",", "2", ")", "\n", "rpn_cls_prob_reshape", "=", "F", ".", "softmax", "(", "rpn_cls_score_reshape", ",", "1", ")", "\n", "rpn_cls_prob", "=", "self", ".", "reshape", "(", "rpn_cls_prob_reshape", ",", "self", ".", "nc_score_out", ")", "\n", "\n", "# get rpn offsets to the anchor boxes", "\n", "rpn_bbox_pred", "=", "self", ".", "RPN_bbox_pred", "(", "rpn_conv1", ")", "\n", "\n", "# proposal layer", "\n", "cfg_key", "=", "\"TRAIN\"", "if", "self", ".", "training", "else", "\"TEST\"", "\n", "\n", "rois", "=", "self", ".", "RPN_proposal", "(", "\n", "(", "rpn_cls_prob", ".", "data", ",", "rpn_bbox_pred", ".", "data", ",", "im_info", ",", "cfg_key", ")", "\n", ")", "\n", "\n", "self", ".", "rpn_loss_cls", "=", "0", "\n", "self", ".", "rpn_loss_box", "=", "0", "\n", "\n", "# generating training labels and build the rpn loss", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "gt_boxes", "is", "not", "None", "\n", "\n", "rpn_data", "=", "self", ".", "RPN_anchor_target", "(", "\n", "(", "rpn_cls_score", ".", "data", ",", "gt_boxes", ",", "im_info", ",", "num_boxes", ")", "\n", ")", "\n", "\n", "# compute classification loss", "\n", "rpn_cls_score", "=", "(", "\n", "rpn_cls_score_reshape", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", ")", "\n", "rpn_label", "=", "rpn_data", "[", "0", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "rpn_keep", "=", "Variable", "(", "rpn_label", ".", "view", "(", "-", "1", ")", ".", "ne", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "rpn_cls_score", "=", "torch", ".", "index_select", "(", "rpn_cls_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "0", ",", "rpn_keep", ")", "\n", "rpn_label", "=", "torch", ".", "index_select", "(", "rpn_label", ".", "view", "(", "-", "1", ")", ",", "0", ",", "rpn_keep", ".", "data", ")", "\n", "rpn_label", "=", "Variable", "(", "rpn_label", ".", "long", "(", ")", ")", "\n", "self", ".", "rpn_loss_cls", "=", "F", ".", "cross_entropy", "(", "rpn_cls_score", ",", "rpn_label", ")", "\n", "fg_cnt", "=", "torch", ".", "sum", "(", "rpn_label", ".", "data", ".", "ne", "(", "0", ")", ")", "\n", "\n", "(", "\n", "rpn_bbox_targets", ",", "\n", "rpn_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights", ",", "\n", ")", "=", "rpn_data", "[", "1", ":", "]", "\n", "\n", "# compute bbox regression loss", "\n", "rpn_bbox_inside_weights", "=", "Variable", "(", "rpn_bbox_inside_weights", ")", "\n", "rpn_bbox_outside_weights", "=", "Variable", "(", "rpn_bbox_outside_weights", ")", "\n", "rpn_bbox_targets", "=", "Variable", "(", "rpn_bbox_targets", ")", "\n", "\n", "self", ".", "rpn_loss_box", "=", "_smooth_l1_loss", "(", "\n", "rpn_bbox_pred", ",", "\n", "rpn_bbox_targets", ",", "\n", "rpn_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights", ",", "\n", "sigma", "=", "3", ",", "\n", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "\n", ")", "\n", "\n", "", "return", "rois", ",", "self", ".", "rpn_loss_cls", ",", "self", ".", "rpn_loss_box", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.__init__": [[35, 43], ["torch.Module.__init__", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "proposal_layer_origin._ProposalLayer._anchors.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "generate_anchors.generate_anchors.generate_anchors", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.generate_anchors.generate_anchors"], ["def", "__init__", "(", "self", ",", "feat_stride", ",", "scales", ",", "ratios", ")", ":", "\n", "        ", "super", "(", "_ProposalLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_feat_stride", "=", "feat_stride", "\n", "self", ".", "_anchors", "=", "torch", ".", "from_numpy", "(", "\n", "generate_anchors", "(", "scales", "=", "np", ".", "array", "(", "scales", ")", ",", "ratios", "=", "np", ".", "array", "(", "ratios", ")", ")", "\n", ")", ".", "float", "(", ")", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_anchors", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.forward": [[53, 178], ["bbox_deltas.view.view.size", "numpy.meshgrid", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as().float", "shifts.contiguous().type_as().float.contiguous().type_as().float.size", "proposal_layer_origin._ProposalLayer._anchors.type_as", "anchors.view().expand.view().expand.view().expand", "bbox_deltas.view.view.permute().contiguous", "bbox_deltas.view.view.view", "scores.view.view.permute().contiguous", "scores.view.view.view", "bbox_transform.bbox_transform_inv", "bbox_transform.clip_boxes", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "scores.view.view.new().zero_", "scores.view.view.new().zero_", "range", "scores.view.view.size", "scores.view.view.size", "numpy.arange", "numpy.arange", "numpy.vstack().transpose", "proposal_layer_origin._ProposalLayer._anchors.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.view", "scores_single[].view", "model.roi_layers.nms", "keep_idx_i.long().view.long().view.long().view", "proposals_single.size", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as", "anchors.view().expand.view().expand.view", "bbox_deltas.view.view.permute", "scores.view.view.permute", "scores.view.view.new", "scores.view.view.new", "scores_single[].view.squeeze", "numpy.vstack", "scores_keep.numel", "keep_idx_i.long().view.long().view.long", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.clip_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_wrapper.nms"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "# Algorithm:", "\n", "#", "\n", "# for each (H, W) location i", "\n", "#   generate A anchor boxes centered on cell i", "\n", "#   apply predicted bbox deltas at cell i to each of the A anchors", "\n", "# clip predicted boxes to image", "\n", "# remove predicted boxes with either height or width < threshold", "\n", "# sort all (proposal, score) pairs by score from highest to lowest", "\n", "# take top pre_nms_topN proposals before NMS", "\n", "# apply NMS with threshold 0.7 to remaining proposals", "\n", "# take after_nms_topN proposals after NMS", "\n", "# return the top proposals (-> RoIs top, scores top)", "\n", "\n", "# the first set of _num_anchors channels are bg probs", "\n", "# the second set are the fg probs", "\n", "        ", "scores", "=", "input", "[", "0", "]", "[", ":", ",", "self", ".", "_num_anchors", ":", ",", ":", ",", ":", "]", "\n", "bbox_deltas", "=", "input", "[", "1", "]", "\n", "im_info", "=", "input", "[", "2", "]", "\n", "cfg_key", "=", "input", "[", "3", "]", "\n", "\n", "pre_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "nms_thresh", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_NMS_THRESH", "\n", "min_size", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_MIN_SIZE", "\n", "\n", "batch_size", "=", "bbox_deltas", ".", "size", "(", "0", ")", "\n", "\n", "feat_height", ",", "feat_width", "=", "scores", ".", "size", "(", "2", ")", ",", "scores", ".", "size", "(", "3", ")", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "feat_width", ")", "*", "self", ".", "_feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "feat_height", ")", "*", "self", ".", "_feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "\n", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", "\n", ")", ".", "transpose", "(", ")", "\n", ")", "\n", "shifts", "=", "shifts", ".", "contiguous", "(", ")", ".", "type_as", "(", "scores", ")", ".", "float", "(", ")", "\n", "\n", "A", "=", "self", ".", "_num_anchors", "\n", "K", "=", "shifts", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "_anchors", "=", "self", ".", "_anchors", ".", "type_as", "(", "scores", ")", "\n", "# anchors = self._anchors.view(1, A, 4) + shifts.view(1, K, 4).permute(1, 0, 2).contiguous()", "\n", "anchors", "=", "self", ".", "_anchors", ".", "view", "(", "1", ",", "A", ",", "4", ")", "+", "shifts", ".", "view", "(", "K", ",", "1", ",", "4", ")", "\n", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "K", "*", "A", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "K", "*", "A", ",", "4", ")", "\n", "\n", "# Transpose and reshape predicted bbox transformations to get them", "\n", "# into the same order as the anchors:", "\n", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "view", "(", "batch_size", ",", "-", "1", ",", "4", ")", "\n", "\n", "# Same story for the scores:", "\n", "scores", "=", "scores", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# Convert anchors into proposals via bbox transformations", "\n", "proposals", "=", "bbox_transform_inv", "(", "anchors", ",", "bbox_deltas", ",", "batch_size", ")", "\n", "\n", "# 2. clip predicted boxes to image", "\n", "proposals", "=", "clip_boxes", "(", "proposals", ",", "im_info", ",", "batch_size", ")", "\n", "# proposals = clip_boxes_batch(proposals, im_info, batch_size)", "\n", "\n", "# assign the score to 0 if it's non keep.", "\n", "# keep = self._filter_boxes(proposals, min_size * im_info[:, 2])", "\n", "\n", "# trim keep index to make it euqal over batch", "\n", "# keep_idx = torch.cat(tuple(keep_idx), 0)", "\n", "\n", "# scores_keep = scores.view(-1)[keep_idx].view(batch_size, trim_size)", "\n", "# proposals_keep = proposals.view(-1, 4)[keep_idx, :].contiguous().view(batch_size, trim_size, 4)", "\n", "\n", "# _, order = torch.sort(scores_keep, 1, True)", "\n", "\n", "scores_keep", "=", "scores", "\n", "proposals_keep", "=", "proposals", "\n", "_", ",", "order", "=", "torch", ".", "sort", "(", "scores_keep", ",", "1", ",", "True", ")", "\n", "\n", "output", "=", "scores", ".", "new", "(", "batch_size", ",", "post_nms_topN", ",", "5", ")", ".", "zero_", "(", ")", "\n", "output_da", "=", "scores", ".", "new", "(", "batch_size", ",", "post_nms_topN", ",", "5", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# # 3. remove predicted boxes with either height or width < threshold", "\n", "# # (NOTE: convert min_size to input image scale stored in im_info[2])", "\n", "            ", "proposals_single", "=", "proposals_keep", "[", "i", "]", "\n", "scores_single", "=", "scores_keep", "[", "i", "]", "\n", "\n", "# # 4. sort all (proposal, score) pairs by score from highest to lowest", "\n", "# # 5. take top pre_nms_topN (e.g. 6000)", "\n", "order_single", "=", "order", "[", "i", "]", "\n", "\n", "if", "pre_nms_topN", ">", "0", "and", "pre_nms_topN", "<", "scores_keep", ".", "numel", "(", ")", ":", "\n", "                ", "order_single", "=", "order_single", "[", ":", "pre_nms_topN", "]", "\n", "\n", "", "proposals_single", "=", "proposals_single", "[", "order_single", ",", ":", "]", "\n", "scores_single", "=", "scores_single", "[", "order_single", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# 6. apply nms (e.g. threshold = 0.7)", "\n", "# 7. take after_nms_topN (e.g. 300)", "\n", "# 8. return the top proposals (-> RoIs top)", "\n", "keep_idx_i", "=", "nms", "(", "proposals_single", ",", "scores_single", ".", "squeeze", "(", "1", ")", ",", "nms_thresh", ")", "\n", "keep_idx_i", "=", "keep_idx_i", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# keep_idx_i_da = nms(proposals_single, scores_single.squeeze(1), 0.5)", "\n", "# keep_idx_i_da = keep_idx_i_da.long().view(-1)", "\n", "# if post_nms_topN > 0:", "\n", "#     keep_idx_i_da = keep_idx_i_da[:post_nms_topN]", "\n", "# proposals_single_da = proposals_single[keep_idx_i_da, :]", "\n", "\n", "if", "post_nms_topN", ">", "0", ":", "\n", "                ", "keep_idx_i", "=", "keep_idx_i", "[", ":", "post_nms_topN", "]", "\n", "", "proposals_single", "=", "proposals_single", "[", "keep_idx_i", ",", ":", "]", "\n", "scores_single", "=", "scores_single", "[", "keep_idx_i", ",", ":", "]", "\n", "\n", "# padding 0 at the end.", "\n", "num_proposal", "=", "proposals_single", ".", "size", "(", "0", ")", "\n", "output", "[", "i", ",", ":", ",", "0", "]", "=", "i", "\n", "output", "[", "i", ",", ":", "num_proposal", ",", "1", ":", "]", "=", "proposals_single", "\n", "\n", "# num_proposal_da = proposals_single_da.size(0)", "\n", "# output_da[i, :, 0] = i", "\n", "# output_da[i, :num_proposal_da, 1:] = proposals_single_da", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.backward": [[179, 181], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape": [[182, 184], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer._filter_boxes": [[185, 193], ["min_size.view().expand_as", "min_size.view().expand_as", "min_size.view", "min_size.view"], "methods", ["None"], ["", "def", "_filter_boxes", "(", "self", ",", "boxes", ",", "min_size", ")", ":", "\n", "        ", "\"\"\"Remove all boxes with any side smaller than min_size.\"\"\"", "\n", "ws", "=", "boxes", "[", ":", ",", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "hs", "=", "boxes", "[", ":", ",", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "keep", "=", "(", "ws", ">=", "min_size", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "ws", ")", ")", "&", "(", "\n", "hs", ">=", "min_size", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "hs", ")", "\n", ")", "\n", "return", "keep", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_pooling.__init__._import_symbols": [[9, 17], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_pool.RoIPoolFunction.__init__": [[8, 13], ["None"], "methods", ["None"], ["\n", "\n", "class", "_ROIPool", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_pool.RoIPoolFunction.forward": [[14, 49], ["features.size", "rois.size", "features.new().zero_", "features.new().zero_().int", "features.permute", "_ext.roi_pooling.roi_pooling_forward", "_ext.roi_pooling.roi_pooling_forward_cuda", "features.new", "features.new().zero_", "features.new"], "methods", ["None"], ["ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", ",", "argmax", "=", "_C", ".", "roi_pool_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "roi", ",", "argmax", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "argmax", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_pool_backward", "(", "\n", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "argmax", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "roi_pool", "=", "_ROIPool", ".", "apply", "\n", "\n", "\n", "class", "ROIPool", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_pool.RoIPoolFunction.backward": [[50, 68], ["grad_output.new().zero_", "_ext.roi_pooling.roi_pooling_backward_cuda", "grad_output.new"], "methods", ["None"], ["        ", "super", "(", "ROIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_pool", "(", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.gridgen.AffineGridGenFunction.__init__": [[8, 33], ["torch.autograd.Function.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.AffineGridGenFunction.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "lr", "=", "1", ")", ":", "\n", "        ", "super", "(", "AffineGridGenFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "height", ",", "width", "\n", "self", ".", "grid", "=", "np", ".", "zeros", "(", "[", "self", ".", "height", ",", "self", ".", "width", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "repeat", "(", "\n", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "height", ")", ")", ",", "0", ")", ",", "\n", "repeats", "=", "self", ".", "width", ",", "\n", "axis", "=", "0", ",", "\n", ")", ".", "T", ",", "\n", "0", ",", "\n", ")", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "repeat", "(", "\n", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "width", ")", ")", ",", "0", ")", ",", "\n", "repeats", "=", "self", ".", "height", ",", "\n", "axis", "=", "0", ",", "\n", ")", ",", "\n", "0", ",", "\n", ")", "\n", "# self.grid[:,:,0] = np.expand_dims(np.repeat(np.expand_dims(np.arange(-1, 1, 2.0/(self.height - 1)), 0), repeats = self.width, axis = 0).T, 0)", "\n", "# self.grid[:,:,1] = np.expand_dims(np.repeat(np.expand_dims(np.arange(-1, 1, 2.0/(self.width - 1)), 0), repeats = self.height, axis = 0), 0)", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "ones", "(", "[", "self", ".", "height", ",", "width", "]", ")", "\n", "self", ".", "grid", "=", "torch", ".", "from_numpy", "(", "self", ".", "grid", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "# print(self.grid)", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.gridgen.AffineGridGenFunction.forward": [[35, 55], ["input1.new().zero_", "input1.new().zero_", "range", "range", "input1.size", "gridgen.AffineGridGenFunction.grid.astype", "input1.size", "torch.bmm().view", "input1.new", "input1.new", "torch.bmm", "torch.Size", "gridgen.AffineGridGenFunction.grid.size", "torch.Size", "gridgen.AffineGridGenFunction.grid.size", "gridgen.AffineGridGenFunction.batchgrid.view", "torch.transpose", "input1.size", "input1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", "\n", "output", "=", "input1", ".", "new", "(", "torch", ".", "Size", "(", "[", "input1", ".", "size", "(", "0", ")", "]", ")", "+", "self", ".", "grid", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "batchgrid", "=", "input1", ".", "new", "(", "\n", "torch", ".", "Size", "(", "[", "input1", ".", "size", "(", "0", ")", "]", ")", "+", "self", ".", "grid", ".", "size", "(", ")", "\n", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "input1", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "self", ".", "batchgrid", "[", "i", "]", "=", "self", ".", "grid", ".", "astype", "(", "self", ".", "batchgrid", "[", "i", "]", ")", "\n", "\n", "# if input1.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    output = output.cuda()", "\n", "\n", "", "for", "i", "in", "range", "(", "input1", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "output", "=", "torch", ".", "bmm", "(", "\n", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ",", "\n", "torch", ".", "transpose", "(", "input1", ",", "1", ",", "2", ")", ",", "\n", ")", ".", "view", "(", "-", "1", ",", "self", ".", "height", ",", "self", ".", "width", ",", "2", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.gridgen.AffineGridGenFunction.backward": [[56, 70], ["gridgen.AffineGridGenFunction.input1.new().zero_", "torch.baddbmm", "torch.transpose", "gridgen.AffineGridGenFunction.batchgrid.view", "gridgen.AffineGridGenFunction.input1.new", "grad_output.view", "gridgen.AffineGridGenFunction.input1.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\n", "        ", "grad_input1", "=", "self", ".", "input1", ".", "new", "(", "self", ".", "input1", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "# if grad_output.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    grad_input1 = grad_input1.cuda()", "\n", "\n", "grad_input1", "=", "torch", ".", "baddbmm", "(", "\n", "grad_input1", ",", "\n", "torch", ".", "transpose", "(", "grad_output", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "2", ")", ",", "1", ",", "2", ")", ",", "\n", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ",", "\n", ")", "\n", "return", "grad_input1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_crop.RoICropFunction.forward": [[9, 23], ["input1.clone", "input2.clone", "input2.new().zero_", "_ext.roi_crop.BilinearSamplerBHWD_updateOutput_cuda", "input2.new().zero_.get_device", "input1.get_device", "input2.new().zero_.get_device", "input2.get_device", "input2.new", "input2.size", "input1.size", "input2.size", "input2.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", ".", "clone", "(", ")", "\n", "self", ".", "input2", "=", "input2", ".", "clone", "(", ")", "\n", "output", "=", "input2", ".", "new", "(", "\n", "input2", ".", "size", "(", ")", "[", "0", "]", ",", "input1", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "2", "]", "\n", ")", ".", "zero_", "(", ")", "\n", "assert", "(", "\n", "output", ".", "get_device", "(", ")", "==", "input1", ".", "get_device", "(", ")", "\n", ")", ",", "\"output and input1 must on the same device\"", "\n", "assert", "(", "\n", "output", ".", "get_device", "(", ")", "==", "input2", ".", "get_device", "(", ")", "\n", ")", ",", "\"output and input2 must on the same device\"", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateOutput_cuda", "(", "input1", ",", "input2", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_crop.RoICropFunction.backward": [[24, 31], ["_ext.roi_crop.RoICropFunction.input1.new().zero_", "_ext.roi_crop.RoICropFunction.input2.new().zero_", "_ext.roi_crop.BilinearSamplerBHWD_updateGradInput_cuda", "_ext.roi_crop.RoICropFunction.input1.new", "_ext.roi_crop.RoICropFunction.input2.new", "_ext.roi_crop.RoICropFunction.input1.size", "_ext.roi_crop.RoICropFunction.input2.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "grad_input1", "=", "self", ".", "input1", ".", "new", "(", "self", ".", "input1", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_input2", "=", "self", ".", "input2", ".", "new", "(", "self", ".", "input2", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateGradInput_cuda", "(", "\n", "self", ".", "input1", ",", "self", ".", "input2", ",", "grad_input1", ",", "grad_input2", ",", "grad_output", "\n", ")", "\n", "return", "grad_input1", ",", "grad_input2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.crop_resize.RoICropFunction.forward": [[12, 31], ["ffi.new", "torch.zeros", "torch.cuda.current_device", "_ext.roi_crop.BilinearSamplerBHWD_updateOutput", "output.cuda.cuda.cuda", "_ext.roi_crop.BilinearSamplerBHWD_updateOutput_cuda", "input2.size", "input1.size", "input2.size", "input2.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", "\n", "self", ".", "input2", "=", "input2", "\n", "self", ".", "device_c", "=", "ffi", ".", "new", "(", "\"int *\"", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "\n", "input2", ".", "size", "(", ")", "[", "0", "]", ",", "input1", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "2", "]", "\n", ")", "\n", "# print('decice %d' % torch.cuda.current_device())", "\n", "if", "input1", ".", "is_cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "-", "1", "\n", "", "self", ".", "device_c", "[", "0", "]", "=", "self", ".", "device", "\n", "if", "not", "input1", ".", "is_cuda", ":", "\n", "            ", "roi_crop", ".", "BilinearSamplerBHWD_updateOutput", "(", "input1", ",", "input2", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", "self", ".", "device", ")", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateOutput_cuda", "(", "input1", ",", "input2", ",", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.crop_resize.RoICropFunction.backward": [[32, 47], ["torch.zeros", "torch.zeros", "crop_resize.RoICropFunction.input1.size", "crop_resize.RoICropFunction.input2.size", "_ext.roi_crop.BilinearSamplerBHWD_updateGradInput", "grad_input1.cuda.cuda.cuda", "grad_input2.cuda.cuda.cuda", "_ext.roi_crop.BilinearSamplerBHWD_updateGradInput_cuda"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "grad_input1", "=", "torch", ".", "zeros", "(", "self", ".", "input1", ".", "size", "(", ")", ")", "\n", "grad_input2", "=", "torch", ".", "zeros", "(", "self", ".", "input2", ".", "size", "(", ")", ")", "\n", "# print('backward decice %d' % self.device)", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "roi_crop", ".", "BilinearSamplerBHWD_updateGradInput", "(", "\n", "self", ".", "input1", ",", "self", ".", "input2", ",", "grad_input1", ",", "grad_input2", ",", "grad_output", "\n", ")", "\n", "", "else", ":", "\n", "            ", "grad_input1", "=", "grad_input1", ".", "cuda", "(", "self", ".", "device", ")", "\n", "grad_input2", "=", "grad_input2", ".", "cuda", "(", "self", ".", "device", ")", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateGradInput_cuda", "(", "\n", "self", ".", "input1", ",", "self", ".", "input2", ",", "grad_input1", ",", "grad_input2", ",", "grad_output", "\n", ")", "\n", "", "return", "grad_input1", ",", "grad_input2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_align.RoIAlignFunction.__init__": [[9, 15], ["int", "int", "float"], "methods", ["None"], ["\n", "class", "_ROIAlign", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "roi", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_align.RoIAlignFunction.forward": [[16, 47], ["features.size", "features.size", "rois.size", "features.new().zero_", "_ext.roi_align.roi_align_forward_cuda", "_ext.roi_align.roi_align_forward", "features.new"], "methods", ["None"], ["ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "roi_align_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "(", "rois", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_align_backward", "(", "\n", "grad_output", ",", "\n", "rois", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "roi_align", "=", "_ROIAlign", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.functions.roi_align.RoIAlignFunction.backward": [[48, 68], ["_ext.roi_align.RoIAlignFunction.rois.new().zero_", "_ext.roi_align.roi_align_backward_cuda", "_ext.roi_align.RoIAlignFunction.rois.new"], "methods", ["None"], ["\n", "class", "ROIAlign", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "super", "(", "ROIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_align", "(", "\n", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sampling_ratio", "\n", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\", sampling_ratio=\"", "+", "str", "(", "self", ".", "sampling_ratio", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_pool._RoIPooling.__init__": [[7, 13], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["from", "torch", ".", "nn", ".", "modules", ".", "utils", "import", "_pair", "\n", "\n", "\n", "class", "_ROIPool", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_pool._RoIPooling.forward": [[14, 18], ["functions.roi_pool.RoIPoolFunction"], "methods", ["None"], ["ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", ",", "argmax", "=", "_C", ".", "roi_pool_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen._AffineGridGen.__init__": [[13, 19], ["torch.nn.modules.module.Module.__init__", "functions.gridgen.AffineGridGenFunction"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["self", ".", "grid", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "repeat", "(", "\n", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "height", ")", ")", ",", "0", ")", ",", "\n", "repeats", "=", "self", ".", "width", ",", "\n", "axis", "=", "0", ",", "\n", ")", ".", "T", ",", "\n", "0", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen._AffineGridGen.forward": [[20, 23], ["gridgen._AffineGridGen.f"], "methods", ["None"], [")", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "repeat", "(", "\n", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "width", ")", ")", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.CylinderGridGen.__init__": [[37, 43], ["torch.nn.modules.module.Module.__init__", "CylinderGridGenFunction"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["output", "=", "input1", ".", "new", "(", "torch", ".", "Size", "(", "[", "input1", ".", "size", "(", "0", ")", "]", ")", "+", "self", ".", "grid", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "batchgrid", "=", "input1", ".", "new", "(", "\n", "torch", ".", "Size", "(", "[", "input1", ".", "size", "(", "0", ")", "]", ")", "+", "self", ".", "grid", ".", "size", "(", ")", "\n", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "input1", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "self", ".", "batchgrid", "[", "i", "]", "=", "self", ".", "grid", ".", "astype", "(", "self", ".", "batchgrid", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.CylinderGridGen.forward": [[44, 50], ["gridgen.CylinderGridGen.f", "gridgen.CylinderGridGen.f", "torch.mul().view", "torch.mul"], "methods", ["None"], ["# if input1.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    output = output.cuda()", "\n", "\n", "", "for", "i", "in", "range", "(", "input1", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "output", "=", "torch", ".", "bmm", "(", "\n", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.AffineGridGenV2.__init__": [[53, 78], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.AffineGridGenV2.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "", "return", "output", "\n", "\n", "", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\n", "        ", "grad_input1", "=", "self", ".", "input1", ".", "new", "(", "self", ".", "input1", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "# if grad_output.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    grad_input1 = grad_input1.cuda()", "\n", "\n", "grad_input1", "=", "torch", ".", "baddbmm", "(", "\n", "grad_input1", ",", "\n", "torch", ".", "transpose", "(", "grad_output", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "2", ")", ",", "1", ",", "2", ")", ",", "\n", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ",", "\n", ")", "\n", "return", "grad_input1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.AffineGridGenV2.forward": [[79, 95], ["torch.zeros", "range", "torch.autograd.Variable", "torch.bmm().view", "input1.size", "gridgen.AffineGridGenV2.batchgrid.cuda", "torch.Size", "gridgen.AffineGridGenV2.grid.size", "torch.bmm", "gridgen.AffineGridGenV2.batchgrid.view", "torch.transpose", "input1.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.CylinderGridGenV2.__init__": [[98, 121], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.CylinderGridGenV2.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.CylinderGridGenV2.forward": [[122, 149], ["torch.zeros", "range", "torch.autograd.Variable", "input.view().repeat", "torch.cat", "input.size", "torch.atan", "torch.Size", "gridgen.CylinderGridGenV2.grid.size", "input.view", "torch.tan", "input.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.DenseAffineGridGen.__init__": [[152, 177], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.DenseAffineGridGen.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.DenseAffineGridGen.forward": [[178, 192], ["torch.zeros", "range", "torch.autograd.Variable", "torch.mul", "torch.mul", "torch.cat", "input1.size", "torch.Size", "gridgen.DenseAffineGridGen.grid.size", "torch.sum", "torch.sum", "input1.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.DenseAffine3DGridGen.__init__": [[195, 236], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.DenseAffine3DGridGen.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.DenseAffine3DGridGen.forward": [[237, 265], ["torch.zeros", "range", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "input1.size", "torch.mul", "torch.mul", "torch.mul", "torch.sqrt", "torch.atan", "torch.Size", "gridgen.DenseAffine3DGridGen.grid3d.size", "torch.acos", "torch.sum.lt().type", "torch.sum.ge().type", "torch.sum.lt().type", "input1.size", "torch.sum.lt", "torch.sum.ge", "torch.sum.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.DenseAffine3DGridGen_rotate.__init__": [[268, 309], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.DenseAffine3DGridGen_rotate.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.DenseAffine3DGridGen_rotate.forward": [[310, 360], ["torch.zeros", "range", "torch.autograd.Variable", "torch.zeros", "range", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "input2.view().repeat", "torch.cat", "torch.cat", "input1.size", "input1.size", "torch.mul", "torch.mul", "torch.mul", "torch.sqrt", "torch.atan", "torch.atan", "torch.Size", "gridgen.DenseAffine3DGridGen_rotate.grid3d.size", "torch.Size", "gridgen.DenseAffine3DGridGen_rotate.grid.size", "torch.acos", "input2.view", "torch.tan", "torch.sum.lt().type", "torch.sum.ge().type", "torch.sum.lt().type", "input1.size", "input1.size", "torch.sum.lt", "torch.sum.ge", "torch.sum.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.Depth3DGridGen.__init__": [[363, 404], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.Depth3DGridGen.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.Depth3DGridGen.forward": [[405, 459], ["torch.zeros", "range", "torch.autograd.Variable", "torch.zeros", "range", "torch.autograd.Variable", "rotate.view().repeat", "torch.cat", "torch.cat", "depth.size", "depth.size", "trans0.view().repeat", "trans1.view().repeat", "torch.sqrt", "torch.atan", "torch.atan", "torch.Size", "gridgen.Depth3DGridGen.grid3d.size", "torch.Size", "gridgen.Depth3DGridGen.grid.size", "torch.acos", "rotate.view", "torch.tan", "trans0.view", "trans1.view", "x.lt().type", "y.ge().type", "y.lt().type", "depth.size", "depth.size", "x.lt", "y.ge", "y.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.Depth3DGridGen_with_mask.__init__": [[462, 504], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.Depth3DGridGen_with_mask.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.gridgen.Depth3DGridGen_with_mask.forward": [[505, 563], ["torch.zeros", "range", "torch.autograd.Variable", "torch.zeros", "range", "torch.autograd.Variable", "torch.cat", "depth.size", "depth.size", "gridgen.Depth3DGridGen_with_mask.batchgrid.cuda", "gridgen.Depth3DGridGen_with_mask.batchgrid3d.cuda", "trans0.view().repeat", "trans1.view().repeat", "rotate.view().repeat", "torch.sqrt", "torch.Size", "gridgen.Depth3DGridGen_with_mask.grid3d.size", "torch.Size", "gridgen.Depth3DGridGen_with_mask.grid.size", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.acos", "torch.atan", "torch.atan", "trans0.view", "trans1.view", "rotate.view", "depth.size", "depth.size", "x.lt().type", "y.ge().type", "y.lt().type", "x.lt().type", "y.ge().type", "y.lt().type", "x.lt", "y.ge", "y.lt", "x.lt", "y.ge", "y.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_crop._RoICrop.__init__": [[7, 9], ["torch.nn.modules.module.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "class", "RoICropFunction", "(", "Function", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_crop._RoICrop.forward": [[10, 12], ["functions.roi_crop.RoICropFunction"], "methods", ["None"], ["        ", "self", ".", "input1", "=", "input1", ".", "clone", "(", ")", "\n", "self", ".", "input2", "=", "input2", ".", "clone", "(", ")", "\n", "output", "=", "input2", ".", "new", "(", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_align.RoIAlign.__init__": [[8, 14], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "\n", "class", "_ROIAlign", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "roi", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_align.RoIAlign.forward": [[15, 19], ["functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "roi_align_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_align.RoIAlignAvg.__init__": [[22, 28], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "(", "rois", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_align.RoIAlignAvg.forward": [[29, 34], ["torch.nn.functional.avg_pool2d", "functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_align_backward", "(", "\n", "grad_output", ",", "\n", "rois", ",", "\n", "spatial_scale", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_align.RoIAlignMax.__init__": [[37, 43], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.modules.roi_align.RoIAlignMax.forward": [[44, 49], ["torch.nn.functional.max_pool2d", "functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["\n", "\n", "", "", "roi_align", "=", "_ROIAlign", ".", "apply", "\n", "\n", "\n", "class", "ROIAlign", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_gpu.nms_gpu": [[9, 15], ["dets.new().zero_().int", "dets.new().zero_().int", "_ext.nms.nms_cuda", "dets.new().zero_", "dets.new().zero_", "dets.new", "dets.new", "dets.size"], "function", ["None"], ["def", "nms_gpu", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "keep", "=", "dets", ".", "new", "(", "dets", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ".", "int", "(", ")", "\n", "num_out", "=", "dets", ".", "new", "(", "1", ")", ".", "zero_", "(", ")", ".", "int", "(", ")", "\n", "nms", ".", "nms_cuda", "(", "keep", ",", "dets", ",", "num_out", ",", "thresh", ")", "\n", "keep", "=", "keep", "[", ":", "num_out", "[", "0", "]", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_cpu.nms_cpu": [[7, 36], ["dets.numpy.numpy", "torch.IntTensor", "scores.argsort", "order.item", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "nms_cpu", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "dets", "=", "dets", ".", "numpy", "(", ")", "\n", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", ".", "item", "(", "0", ")", "\n", "keep", ".", "append", "(", "i", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "maximum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy2", "=", "np", ".", "maximum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "torch", ".", "IntTensor", "(", "keep", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_wrapper.nms": [[15, 24], ["nms_gpu", "model.nms.nms_cpu.nms_cpu"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_gpu.nms_gpu", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.nms_cpu.nms_cpu"], ["", "def", "nms", "(", "dets", ",", "thresh", ",", "force_cpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Dispatch to either CPU or GPU NMS implementations.\"\"\"", "\n", "if", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "# ---numpy version---", "\n", "# original: return gpu_nms(dets, thresh, device_id=cfg.GPU_ID)", "\n", "# ---pytorch version---", "\n", "\n", "", "return", "nms_gpu", "(", "dets", ",", "thresh", ")", "if", "force_cpu", "==", "False", "else", "nms_cpu", "(", "dets", ",", "thresh", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.nms.__init__._import_symbols": [[9, 17], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_crop.__init__._import_symbols": [[9, 17], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.crop_resize.__init__._import_symbols": [[9, 14], ["dir", "getattr", "torch.utils.ffi._wrap_function", "__all__.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.netD_pixel.__init__": [[32, 41], ["torch.Module.__init__", "vgg16.conv1x1", "vgg16.conv1x1", "vgg16.conv1x1"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "256", ",", "256", ")", "\n", "# self.bn1 = nn.BatchNorm2d(256)", "\n", "self", ".", "conv2", "=", "conv1x1", "(", "256", ",", "128", ")", "\n", "# self.bn2 = nn.BatchNorm2d(128)", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "128", ",", "1", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.netD_pixel.forward": [[42, 54], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg16.netD_pixel.conv1", "vgg16.netD_pixel.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "vgg16.netD_pixel.conv3", "torch.sigmoid.view", "vgg16.netD_pixel.conv3", "torch.sigmoid.size", "torch.sigmoid.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "# feat = x", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", "# F.sigmoid(x)", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.netD.__init__": [[57, 67], ["torch.Module.__init__", "vgg16.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vgg16.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vgg16.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.netD.forward": [[68, 81], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "vgg16.netD.view", "vgg16.netD.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg16.netD.bn1", "vgg16.netD.bn2", "vgg16.netD.bn3", "vgg16.netD.size", "vgg16.netD.size", "vgg16.netD.conv1", "vgg16.netD.conv2", "vgg16.netD.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.netD_dc.__init__": [[84, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.netD_dc.forward": [[92, 97], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "vgg16.netD_dc.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg16.netD_dc.bn1", "vgg16.netD_dc.bn2", "vgg16.netD_dc.fc1", "vgg16.netD_dc.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.vgg16.__init__": [[17, 26], ["model.da_faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.vgg16._init_modules": [[27, 57], ["torchvision.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Linear", "torch.Linear", "torch.Linear", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.vgg16.load_state_dict", "vgg16.vgg16.RCNN_base[].parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "torch.load.items", "torch.load.items", "torch.load.items", "torchvision.vgg16.classifier._modules.values", "torchvision.vgg16.features._modules.values", "torchvision.vgg16.state_dict"], "methods", ["None"], ["in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "class", "netD_pixel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "256", ",", "256", ")", "\n", "# self.bn1 = nn.BatchNorm2d(256)", "\n", "self", ".", "conv2", "=", "conv1x1", "(", "256", ",", "128", ")", "\n", "# self.bn2 = nn.BatchNorm2d(128)", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "128", ",", "1", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "# feat = x", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", "# F.sigmoid(x)", "\n", "\n", "\n", "", "", "", "class", "netD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.vgg16._head_to_tail": [[58, 64], ["pool5.view", "vgg16.vgg16.RCNN_top", "pool5.size"], "methods", ["None"], ["        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.vgg16.conv1x1": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.LabelResizeLayer.ImageLabelResizeLayer.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageLabelResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.LabelResizeLayer.ImageLabelResizeLayer.forward": [[21, 40], ["x.detach().cpu().numpy", "need_backprop.detach().cpu().numpy", "numpy.zeros", "range", "gt_blob.transpose.transpose.transpose", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "y.squeeze().long.squeeze().long.squeeze().long", "numpy.array", "cv2.resize", "x.detach().cpu", "need_backprop.detach().cpu", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "y.squeeze().long.squeeze().long.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x.detach", "need_backprop.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "\n", "        ", "feats", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lbs", "=", "need_backprop", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_blob", "=", "np", ".", "zeros", "(", "\n", "(", "lbs", ".", "shape", "[", "0", "]", ",", "feats", ".", "shape", "[", "2", "]", ",", "feats", ".", "shape", "[", "3", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "for", "i", "in", "range", "(", "lbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "lb", "=", "np", ".", "array", "(", "[", "lbs", "[", "i", "]", "]", ")", "\n", "lbs_resize", "=", "cv2", ".", "resize", "(", "\n", "lb", ",", "(", "feats", ".", "shape", "[", "3", "]", ",", "feats", ".", "shape", "[", "2", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", "\n", ")", "\n", "gt_blob", "[", "i", ",", "0", ":", "lbs_resize", ".", "shape", "[", "0", "]", ",", "0", ":", "lbs_resize", ".", "shape", "[", "1", "]", ",", "0", "]", "=", "lbs_resize", "\n", "\n", "", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "gt_blob", "=", "gt_blob", ".", "transpose", "(", "channel_swap", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "gt_blob", ")", ")", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.LabelResizeLayer.InstanceLabelResizeLayer.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "InstanceLabelResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "minibatch", "=", "256", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.LabelResizeLayer.InstanceLabelResizeLayer.forward": [[47, 57], ["x.data.cpu().numpy", "need_backprop.data.cpu().numpy", "numpy.ones", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.data.cpu", "need_backprop.data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "feats", "=", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lbs", "=", "need_backprop", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "resized_lbs", "=", "np", ".", "ones", "(", "(", "feats", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "lbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "resized_lbs", "[", "i", "*", "self", ".", "minibatch", ":", "(", "i", "+", "1", ")", "*", "self", ".", "minibatch", "]", "=", "lbs", "[", "i", "]", "\n", "\n", "", "y", "=", "torch", ".", "from_numpy", "(", "resized_lbs", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn._fasterRCNN.__init__": [[23, 52], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_layers.ROIPool", "model.roi_layers.ROIAlign", "model.da_faster_rcnn.DA._ImageDA", "model.da_faster_rcnn.DA._InstanceDA", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "def", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ",", "da_use_contex", ",", "in_channel", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "ROIPool", "(", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "ROIAlign", "(", "\n", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ",", "0", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "(", "\n", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", ")", "\n", "\n", "self", ".", "conv_lst", "=", "nn", ".", "Conv2d", "(", "self", ".", "dout_base_model", ",", "self", ".", "n_classes", "-", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "# self.bn1 = nn.BatchNorm2d(self.dout_base_model, momentum=0.01)", "\n", "# self.bn2 = nn.BatchNorm2d(self.n_classes-1, momentum=0.01)", "\n", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "if", "self", ".", "da_use_contex", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn._fasterRCNN.forward": [[53, 285], ["im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze", "faster_rcnn._fasterRCNN.RCNN_rpn.train", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_bbox_pred", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "cls_prob.view.view.view", "torch.gather.squeeze.view", "tgt_im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.RCNN_rpn.eval", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_imageDA", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "consistency_prob.repeat.repeat.repeat", "faster_rcnn._fasterRCNN.consistency_loss", "faster_rcnn._fasterRCNN.RCNN_imageDA", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "tgt_consistency_prob.repeat.repeat.repeat", "faster_rcnn._fasterRCNN.consistency_loss", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "faster_rcnn._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN.RCNN_roi_align", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "model.utils.net_utils._affine_grid_gen", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "faster_rcnn._fasterRCNN.RCNN_roi_crop", "torch.softmax", "torch.softmax", "torch.softmax", "instance_sigmoid.size", "consistency_prob.repeat.repeat.detach", "torch.softmax", "torch.softmax", "torch.softmax", "tgt_instance_sigmoid.size", "tgt_consistency_prob.repeat.repeat.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "faster_rcnn._fasterRCNN.conv_lst().squeeze", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "faster_rcnn._fasterRCNN.RCNN_roi_align", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "faster_rcnn._fasterRCNN.conv_lst", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.avg_pool", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._affine_grid_gen"], ["            ", "if", "self", ".", "lc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "", "self", ".", "RCNN_instanceDA", "=", "_InstanceDA", "(", "in_channel", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "im_data", ",", "\n", "im_info", ",", "\n", "im_cls_lb", ",", "\n", "gt_boxes", ",", "\n", "num_boxes", ",", "\n", "target", "=", "False", ",", "\n", "eta", "=", "1.0", ",", "\n", "weight_value", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "if", "target", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "train", "(", ")", "\n", "\n", "", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "\n", "# feed image data to base model to obtain base feature map", "\n", "base_feat1", "=", "self", ".", "RCNN_base1", "(", "im_data", ")", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "d_pixel", ",", "_", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "# print(d_pixel)", "\n", "# if not target:", "\n", "if", "True", ":", "\n", "                ", "_", ",", "feat_pixel", "=", "self", ".", "netD_pixel", "(", "base_feat1", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "d_pixel", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "", "base_feat", "=", "self", ".", "RCNN_base2", "(", "base_feat1", ")", "\n", "if", "self", ".", "gc", ":", "\n", "            ", "domain_p", ",", "_", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#, diff", "\n", "_", ",", "feat", "=", "self", ".", "netD", "(", "base_feat", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "domain_p", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#,diff", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "\n", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", ")", "\n", "# supervise base feature map with category level label", "\n", "cls_feat", "=", "self", ".", "avg_pool", "(", "base_feat", ")", "\n", "cls_feat", "=", "self", ".", "conv_lst", "(", "cls_feat", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# cls_feat = self.conv_lst(self.bn1(self.avg_pool(base_feat))).squeeze(-1).squeeze(-1)", "\n", "category_loss_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "cls_feat", ",", "im_cls_lb", ")", "\n", "\n", "# if it is training phrase, then use ground trubut bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "\n", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "\"align\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "\"pool\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "# feed pooled features to top model", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "instance_pooled_feat", "=", "pooled_feat", "\n", "# feat_pixel = torch.zeros(feat_pixel.size()).cuda()", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_pixel", "=", "feat_pixel", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat_pixel", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat_pixel", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat", "=", "feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "# compute bbox offset", "\n", "\n", "# compute object classification probability", "\n", "", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n", "# add instance da", "\n", "instance_sigmoid", ",", "same_size_label", "=", "self", ".", "RCNN_instanceDA", "(", "\n", "instance_pooled_feat", ",", "need_backprop", "\n", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "cls_pre_label", "=", "cls_prob", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "cls_feat_sig", "=", "F", ".", "sigmoid", "(", "cls_feat", "[", "0", "]", ")", ".", "detach", "(", ")", "\n", "target_weight", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cls_pre_label", ")", ")", ":", "\n", "                ", "label_i", "=", "cls_pre_label", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "label_i", ">", "0", ":", "\n", "                    ", "diff_value", "=", "torch", ".", "exp", "(", "\n", "weight_value", "\n", "*", "torch", ".", "abs", "(", "cls_feat_sig", "[", "label_i", "-", "1", "]", "-", "cls_prob", "[", "i", "]", "[", "label_i", "]", ")", "\n", ")", ".", "item", "(", ")", "\n", "target_weight", ".", "append", "(", "diff_value", ")", "\n", "", "else", ":", "\n", "                    ", "target_weight", ".", "append", "(", "1.0", ")", "\n", "\n", "", "", "instance_loss", "=", "nn", ".", "BCELoss", "(", "\n", "weight", "=", "torch", ".", "Tensor", "(", "target_weight", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "instance_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "", "DA_ins_loss_cls", "=", "instance_loss", "(", "instance_sigmoid", ",", "same_size_label", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "return", "d_pixel", ",", "domain_p", ",", "DA_ins_loss_cls", "\n", "\n", "# compute bbox offset", "\n", "", "bbox_pred", "=", "self", ".", "RCNN_bbox_pred", "(", "pooled_feat", ")", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "class_agnostic", ":", "\n", "            ", "bbox_pred_view", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "int", "(", "bbox_pred", ".", "size", "(", "1", ")", "/", "4", ")", ",", "4", "\n", ")", "\n", "bbox_pred_select", "=", "torch", ".", "gather", "(", "\n", "bbox_pred_view", ",", "\n", "1", ",", "\n", "rois_label", ".", "view", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "\n", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "4", "\n", ")", ",", "\n", ")", "\n", "bbox_pred", "=", "bbox_pred_select", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "RCNN_loss_cls", "=", "0", "\n", "RCNN_loss_bbox", "=", "0", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# classification loss", "\n", "            ", "RCNN_loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "rois_label", ")", "\n", "\n", "# bounding box regression L1 loss", "\n", "RCNN_loss_bbox", "=", "_smooth_l1_loss", "(", "\n", "bbox_pred", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "\n", ")", "\n", "\n", "", "cls_prob", "=", "cls_prob", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "return", "(", "\n", "rois", ",", "\n", "cls_prob", ",", "\n", "bbox_pred", ",", "\n", "category_loss_cls", ",", "\n", "rpn_loss_cls", ",", "\n", "rpn_loss_bbox", ",", "\n", "RCNN_loss_cls", ",", "\n", "RCNN_loss_bbox", ",", "\n", "rois_label", ",", "\n", "d_pixel", ",", "\n", "domain_p", ",", "\n", "DA_ins_loss_cls", ",", "\n", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            weight initalizer: truncated normal and random normal.\n            \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_Conv", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_bbox_pred", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_bbox_pred", ",", "0", ",", "0.001", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "\n", "", "def", "create_architecture", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_modules", "(", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn._fasterRCNN._init_weights": [[287, 312], ["faster_rcnn._fasterRCNN._init_weights.normal_init"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn._fasterRCNN.create_architecture": [[313, 316], ["faster_rcnn._fasterRCNN._init_modules", "faster_rcnn._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA.GRLayer.forward": [[17, 22], ["input.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "0.1", "\n", "\n", "return", "input", ".", "view_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA.GRLayer.backward": [[23, 27], ["grad_outputs.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "output", "=", "grad_outputs", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA._ImageDA.__init__": [[34, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.da_faster_rcnn.LabelResizeLayer.ImageLabelResizeLayer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "_ImageDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "# feat layer          256*H*W for vgg16", "\n", "self", ".", "Conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "Conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "reLu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "LabelResizeLayer", "=", "ImageLabelResizeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA._ImageDA.forward": [[42, 48], ["DA.grad_reverse", "DA._ImageDA.reLu", "DA._ImageDA.Conv2", "DA._ImageDA.LabelResizeLayer", "DA._ImageDA.Conv1"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ")", "\n", "x", "=", "self", ".", "reLu", "(", "self", ".", "Conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "Conv2", "(", "x", ")", "\n", "label", "=", "self", ".", "LabelResizeLayer", "(", "x", ",", "need_backprop", ")", "\n", "return", "x", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA._InstanceDA.__init__": [[51, 63], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "model.da_faster_rcnn.LabelResizeLayer.InstanceLabelResizeLayer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channle", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_InstanceDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dc_ip1", "=", "nn", ".", "Linear", "(", "in_channle", ",", "1024", ")", "\n", "self", ".", "dc_relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dc_drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "dc_ip2", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "dc_relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dc_drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "clssifer", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ")", "\n", "self", ".", "LabelResizeLayer", "=", "InstanceLabelResizeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA._InstanceDA.forward": [[64, 71], ["DA.grad_reverse", "DA._InstanceDA.dc_drop1", "DA._InstanceDA.dc_drop2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "DA._InstanceDA.LabelResizeLayer", "DA._InstanceDA.dc_relu1", "DA._InstanceDA.dc_relu2", "DA._InstanceDA.clssifer", "DA._InstanceDA.dc_ip1", "DA._InstanceDA.dc_ip2"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ")", "\n", "x", "=", "self", ".", "dc_drop1", "(", "self", ".", "dc_relu1", "(", "self", ".", "dc_ip1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dc_drop2", "(", "self", ".", "dc_relu2", "(", "self", ".", "dc_ip2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "clssifer", "(", "x", ")", ")", "\n", "label", "=", "self", ".", "LabelResizeLayer", "(", "x", ",", "need_backprop", ")", "\n", "return", "x", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.DA.grad_reverse": [[29, 31], ["GRLayer.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GRLayer", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD_pixel.__init__": [[41, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet_multi_label.netD_pixel._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD_pixel._init_weights": [[49, 66], ["resnet_multi_label.netD_pixel._init_weights.normal_init"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n        weight initalizer: truncated normal and random normal.\n        \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "# m.bias.data.zero_()", "\n", "\n", "", "", "normal_init", "(", "self", ".", "conv1", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv2", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv3", ",", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD_pixel.forward": [[67, 77], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_multi_label.netD_pixel.conv1", "resnet_multi_label.netD_pixel.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_multi_label.netD_pixel.conv3", "resnet_multi_label.netD_pixel.conv3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "resnet_multi_label.netD_pixel.size", "resnet_multi_label.netD_pixel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", ",", "feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD.__init__": [[80, 91], ["torch.Module.__init__", "resnet_multi_label.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_multi_label.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_multi_label.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "1024", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD.forward": [[92, 105], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_multi_label.netD.view", "resnet_multi_label.netD.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_multi_label.netD.bn1", "resnet_multi_label.netD.bn2", "resnet_multi_label.netD.bn3", "resnet_multi_label.netD.size", "resnet_multi_label.netD.size", "resnet_multi_label.netD.conv1", "resnet_multi_label.netD.conv2", "resnet_multi_label.netD.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD_dc.__init__": [[108, 115], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.netD_dc.forward": [[116, 121], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "resnet_multi_label.netD_dc.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_multi_label.netD_dc.bn1", "resnet_multi_label.netD_dc.bn2", "resnet_multi_label.netD_dc.fc1", "resnet_multi_label.netD_dc.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.BasicBlock.__init__": [[126, 135], ["torch.Module.__init__", "resnet_multi_label.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_multi_label.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.BasicBlock.forward": [[136, 153], ["resnet_multi_label.BasicBlock.conv1", "resnet_multi_label.BasicBlock.bn1", "resnet_multi_label.BasicBlock.relu", "resnet_multi_label.BasicBlock.conv2", "resnet_multi_label.BasicBlock.bn2", "resnet_multi_label.BasicBlock.relu", "resnet_multi_label.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.Bottleneck.__init__": [[158, 173], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "# change", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.Bottleneck.forward": [[174, 195], ["resnet_multi_label.Bottleneck.conv1", "resnet_multi_label.Bottleneck.bn1", "resnet_multi_label.Bottleneck.relu", "resnet_multi_label.Bottleneck.conv2", "resnet_multi_label.Bottleneck.bn2", "resnet_multi_label.Bottleneck.relu", "resnet_multi_label.Bottleneck.conv3", "resnet_multi_label.Bottleneck.bn3", "resnet_multi_label.Bottleneck.relu", "resnet_multi_label.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.ResNet.__init__": [[198, 223], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_multi_label.ResNet._make_layer", "resnet_multi_label.ResNet._make_layer", "resnet_multi_label.ResNet._make_layer", "resnet_multi_label.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_multi_label.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", "\n", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.ResNet._make_layer": [[224, 245], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.ResNet.forward": [[246, 262], ["resnet_multi_label.ResNet.conv1", "resnet_multi_label.ResNet.bn1", "resnet_multi_label.ResNet.relu", "resnet_multi_label.ResNet.maxpool", "resnet_multi_label.ResNet.layer1", "resnet_multi_label.ResNet.layer2", "resnet_multi_label.ResNet.layer3", "resnet_multi_label.ResNet.layer4", "resnet_multi_label.ResNet.avgpool", "resnet_multi_label.ResNet.view", "resnet_multi_label.ResNet.fc", "resnet_multi_label.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet.__init__": [[320, 340], ["model.da_faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "classes", ",", "\n", "num_layers", "=", "101", ",", "\n", "pretrained", "=", "False", ",", "\n", "pretrained_path", "=", "None", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "lc", "=", "False", ",", "\n", "gc", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "pretrained_path", "\n", "self", ".", "dout_base_model", "=", "1024", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "self", ".", "layers", "=", "num_layers", "\n", "if", "not", "pretrained_path", ":", "\n", "            ", "self", ".", "model_path", "=", "pretrained_path", "\n", "", "_fasterRCNN", ".", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet._init_modules": [[341, 395], ["resnet_multi_label.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_multi_label.netD_pixel", "resnet_multi_label.netD", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_multi_label.resnet.RCNN_base1[].parameters", "resnet_multi_label.resnet.RCNN_base1[].parameters", "resnet_multi_label.resnet.RCNN_base1.apply", "resnet_multi_label.resnet.RCNN_base2.apply", "resnet_multi_label.resnet.RCNN_top.apply", "resnet_multi_label.resnet50", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet50.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet50.state_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet50"], ["", "def", "_init_modules", "(", "self", ")", ":", "\n", "\n", "        ", "resnet", "=", "resnet101", "(", ")", "\n", "if", "self", ".", "layers", "==", "50", ":", "\n", "            ", "resnet", "=", "resnet50", "(", ")", "\n", "", "if", "self", ".", "pretrained", "==", "True", ":", "\n", "            ", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "self", ".", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "resnet", ".", "load_state_dict", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "resnet", ".", "state_dict", "(", ")", "}", "\n", ")", "\n", "# Build resnet.", "\n", "", "self", ".", "RCNN_base1", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "resnet", ".", "layer1", "\n", ")", "\n", "self", ".", "RCNN_base2", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "netD_pixel", "=", "netD_pixel", "(", "context", "=", "self", ".", "lc", ")", "\n", "self", ".", "netD", "=", "netD", "(", "context", "=", "self", ".", "gc", ")", "\n", "\n", "self", ".", "RCNN_top", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layer4", ")", "\n", "feat_d", "=", "2048", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_d", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat_d", "+=", "128", "\n", "", "self", ".", "RCNN_cls_score", "=", "nn", ".", "Linear", "(", "feat_d", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "feat_d", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "feat_d", ",", "4", "*", "self", ".", "n_classes", ")", "\n", "\n", "# Fix blocks", "\n", "", "for", "p", "in", "self", ".", "RCNN_base1", "[", "0", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "RCNN_base1", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# assert (0 <= cfg.RESNET.FIXED_BLOCKS < 4)", "\n", "# if cfg.RESNET.FIXED_BLOCKS >= 3:", "\n", "#   for p in self.RCNN_base1[6].parameters(): p.requires_grad=False", "\n", "# if cfg.RESNET.FIXED_BLOCKS >= 2:", "\n", "#   for p in self.RCNN_base1[5].parameters(): p.requires_grad=False", "\n", "# if cfg.RESNET.FIXED_BLOCKS >= 1:", "\n", "#  for p in self.RCNN_base1[4].parameters(): p.requires_grad=False", "\n", "\n", "", "def", "set_bn_fix", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "self", ".", "RCNN_base1", ".", "apply", "(", "set_bn_fix", ")", "\n", "self", ".", "RCNN_base2", ".", "apply", "(", "set_bn_fix", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_fix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet.train": [[396, 413], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet_multi_label.resnet.RCNN_base1.eval", "resnet_multi_label.resnet.RCNN_base1[].train", "resnet_multi_label.resnet.RCNN_base2.train", "resnet_multi_label.resnet.RCNN_base1.apply", "resnet_multi_label.resnet.RCNN_base2.apply", "resnet_multi_label.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override train so that the training mode is set as we want", "\n", "        ", "nn", ".", "Module", ".", "train", "(", "self", ",", "mode", ")", "\n", "if", "mode", ":", "\n", "# Set fixed blocks to be in eval mode", "\n", "            ", "self", ".", "RCNN_base1", ".", "eval", "(", ")", "\n", "self", ".", "RCNN_base1", "[", "4", "]", ".", "train", "(", ")", "\n", "self", ".", "RCNN_base2", ".", "train", "(", ")", "\n", "\n", "def", "set_bn_eval", "(", "m", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "self", ".", "RCNN_base1", ".", "apply", "(", "set_bn_eval", ")", "\n", "self", ".", "RCNN_base2", ".", "apply", "(", "set_bn_eval", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet._head_to_tail": [[414, 417], ["resnet_multi_label.resnet.RCNN_top().mean().mean", "resnet_multi_label.resnet.RCNN_top().mean", "resnet_multi_label.resnet.RCNN_top"], "methods", ["None"], ["", "", "def", "_head_to_tail", "(", "self", ",", "pool5", ")", ":", "\n", "        ", "fc7", "=", "self", ".", "RCNN_top", "(", "pool5", ")", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "return", "fc7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.conv1x1": [[33, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet18": [[264, 273], ["resnet_multi_label.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet34": [[275, 284], ["resnet_multi_label.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet50": [[286, 295], ["resnet_multi_label.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet101": [[297, 306], ["resnet_multi_label.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_multi_label.resnet152": [[308, 317], ["resnet_multi_label.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD_pixel.__init__": [[40, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.netD_pixel._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD_pixel._init_weights": [[48, 65], ["resnet.netD_pixel._init_weights.normal_init"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n        weight initalizer: truncated normal and random normal.\n        \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "# m.bias.data.zero_()", "\n", "\n", "", "", "normal_init", "(", "self", ".", "conv1", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv2", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv3", ",", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD_pixel.forward": [[66, 76], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.netD_pixel.conv1", "resnet.netD_pixel.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.netD_pixel.conv3", "resnet.netD_pixel.conv3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "resnet.netD_pixel.size", "resnet.netD_pixel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", ",", "feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD.__init__": [[79, 90], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "1024", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD.forward": [[91, 104], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.netD.view", "resnet.netD.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.netD.bn1", "resnet.netD.bn2", "resnet.netD.bn3", "resnet.netD.size", "resnet.netD.size", "resnet.netD.conv1", "resnet.netD.conv2", "resnet.netD.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD_dc.__init__": [[107, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.netD_dc.forward": [[115, 120], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "resnet.netD_dc.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.netD_dc.bn1", "resnet.netD_dc.bn2", "resnet.netD_dc.fc1", "resnet.netD_dc.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "class", "netD_pixel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.BasicBlock.forward": [[45, 62], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["self", ".", "context", "=", "context", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n        weight initalizer: truncated normal and random normal.\n        \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "# m.bias.data.zero_()", "\n", "\n", "", "", "normal_init", "(", "self", ".", "conv1", ",", "0", ",", "0.01", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.Bottleneck.__init__": [[67, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", ",", "feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n", "\n", "", "", "", "class", "netD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "1024", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.Bottleneck.forward": [[83, 104], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.ResNet.__init__": [[107, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.ResNet._make_layer": [[133, 154], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.ResNet.forward": [[155, 171], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "# change", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet.__init__": [[229, 237], ["model.da_faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet._init_modules": [[238, 292], ["resnet.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base.apply", "resnet101.resnet.RCNN_top.apply", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet101.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet101.state_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101"], ["layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet.train": [[293, 309], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet.resnet.RCNN_base.eval", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base.apply", "resnet.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train"], ["", "return", "model", "\n", "\n", "\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet._head_to_tail": [[310, 313], ["resnet.resnet.RCNN_top().mean().mean", "resnet.resnet.RCNN_top().mean", "resnet.resnet.RCNN_top"], "methods", ["None"], ["\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.conv1x1": [[32, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet18": [[173, 182], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet34": [[184, 193], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet50": [[195, 204], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet101": [[206, 215], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet.resnet152": [[217, 226], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn_multi_label._fasterRCNN.__init__": [[23, 47], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_layers.ROIPool", "model.roi_layers.ROIAlign", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ")", ":", "\n", "        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "ROIPool", "(", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "ROIAlign", "(", "\n", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ",", "0", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "(", "\n", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", ")", "\n", "\n", "self", ".", "conv_lst", "=", "nn", ".", "Conv2d", "(", "self", ".", "dout_base_model", ",", "self", ".", "n_classes", "-", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn_multi_label._fasterRCNN.forward": [[48, 170], ["im_data.size", "faster_rcnn_multi_label._fasterRCNN.RCNN_base1", "faster_rcnn_multi_label._fasterRCNN.RCNN_base2", "faster_rcnn_multi_label._fasterRCNN.RCNN_rpn", "faster_rcnn_multi_label._fasterRCNN.conv_lst().squeeze().squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn_multi_label._fasterRCNN._head_to_tail", "faster_rcnn_multi_label._fasterRCNN.RCNN_bbox_pred", "faster_rcnn_multi_label._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "cls_prob.view.view.view", "torch.gather.squeeze.view", "faster_rcnn_multi_label._fasterRCNN.netD_pixel", "faster_rcnn_multi_label._fasterRCNN.netD_pixel", "faster_rcnn_multi_label._fasterRCNN.netD", "faster_rcnn_multi_label._fasterRCNN.netD", "faster_rcnn_multi_label._fasterRCNN.netD", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "faster_rcnn_multi_label._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn_multi_label._fasterRCNN.RCNN_roi_align", "feat_pixel.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feat.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "model.utils.net_utils.grad_reverse", "faster_rcnn_multi_label._fasterRCNN.netD_pixel", "model.utils.net_utils.grad_reverse", "model.utils.net_utils.grad_reverse", "faster_rcnn_multi_label._fasterRCNN.detach", "model.utils.net_utils.grad_reverse", "faster_rcnn_multi_label._fasterRCNN.conv_lst().squeeze", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn_multi_label._fasterRCNN.RCNN_roi_pool", "faster_rcnn_multi_label._fasterRCNN.size", "faster_rcnn_multi_label._fasterRCNN.size", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "faster_rcnn_multi_label._fasterRCNN.detach", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "feat_pixel.view().repeat.view().repeat.view", "feat.view().repeat.view().repeat.view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn_multi_label._fasterRCNN.conv_lst", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn_multi_label._fasterRCNN.avg_pool", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "\n", "self", ",", "im_data", ",", "im_info", ",", "im_cls_lb", ",", "gt_boxes", ",", "num_boxes", ",", "target", "=", "False", ",", "eta", "=", "1.0", "\n", ")", ":", "\n", "        ", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "\n", "# feed image data to base model to obtain base feature map", "\n", "base_feat1", "=", "self", ".", "RCNN_base1", "(", "im_data", ")", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "d_pixel", ",", "_", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "# print(d_pixel)", "\n", "if", "not", "target", ":", "\n", "                ", "_", ",", "feat_pixel", "=", "self", ".", "netD_pixel", "(", "base_feat1", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "d_pixel", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "", "base_feat", "=", "self", ".", "RCNN_base2", "(", "base_feat1", ")", "\n", "if", "self", ".", "gc", ":", "\n", "            ", "domain_p", ",", "_", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "if", "target", ":", "\n", "                ", "return", "d_pixel", ",", "domain_p", "# , diff", "\n", "", "_", ",", "feat", "=", "self", ".", "netD", "(", "base_feat", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "domain_p", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "if", "target", ":", "\n", "                ", "return", "d_pixel", ",", "domain_p", "# ,diff", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "\n", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", ")", "\n", "# supervise base feature map with category level label", "\n", "cls_feat", "=", "self", ".", "conv_lst", "(", "self", ".", "avg_pool", "(", "base_feat", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "category_loss_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "cls_feat", ",", "im_cls_lb", ")", "\n", "\n", "# if it is training phrase, then use ground trubut bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "\n", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "\"align\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "\"pool\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "# feed pooled features to top model", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "# feat_pixel = torch.zeros(feat_pixel.size()).cuda()", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_pixel", "=", "feat_pixel", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat_pixel", ",", "pooled_feat", ")", ",", "1", ")", "\n", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat", "=", "feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "pooled_feat", ")", ",", "1", ")", "\n", "# compute bbox offset", "\n", "\n", "# compute bbox offset", "\n", "", "bbox_pred", "=", "self", ".", "RCNN_bbox_pred", "(", "pooled_feat", ")", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "class_agnostic", ":", "\n", "            ", "bbox_pred_view", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "int", "(", "bbox_pred", ".", "size", "(", "1", ")", "/", "4", ")", ",", "4", "\n", ")", "\n", "bbox_pred_select", "=", "torch", ".", "gather", "(", "\n", "bbox_pred_view", ",", "\n", "1", ",", "\n", "rois_label", ".", "view", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "\n", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "4", "\n", ")", ",", "\n", ")", "\n", "bbox_pred", "=", "bbox_pred_select", ".", "squeeze", "(", "1", ")", "\n", "\n", "# compute object classification probability", "\n", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n", "RCNN_loss_cls", "=", "0", "\n", "RCNN_loss_bbox", "=", "0", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# classification loss", "\n", "            ", "RCNN_loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "rois_label", ")", "\n", "\n", "# bounding box regression L1 loss", "\n", "RCNN_loss_bbox", "=", "_smooth_l1_loss", "(", "\n", "bbox_pred", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "\n", ")", "\n", "\n", "", "cls_prob", "=", "cls_prob", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "return", "(", "\n", "rois", ",", "\n", "cls_feat", ",", "\n", "im_cls_lb", ",", "\n", "cls_prob", ",", "\n", "bbox_pred", ",", "\n", "category_loss_cls", ",", "\n", "rpn_loss_cls", ",", "\n", "rpn_loss_bbox", ",", "\n", "RCNN_loss_cls", ",", "\n", "RCNN_loss_bbox", ",", "\n", "rois_label", ",", "\n", "d_pixel", ",", "\n", "domain_p", ",", "\n", ")", "# ,diff", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn_multi_label._fasterRCNN._init_weights": [[172, 191], ["faster_rcnn_multi_label._fasterRCNN._init_weights.normal_init"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            weight initalizer: truncated normal and random normal.\n            \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_Conv", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_bbox_pred", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_bbox_pred", ",", "0", ",", "0.001", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.faster_rcnn_multi_label._fasterRCNN.create_architecture": [[192, 195], ["faster_rcnn_multi_label._fasterRCNN._init_modules", "faster_rcnn_multi_label._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], ["", "def", "create_architecture", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_modules", "(", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "resnet_da.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_da.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.BasicBlock.forward": [[45, 62], ["resnet_da.BasicBlock.conv1", "resnet_da.BasicBlock.bn1", "resnet_da.BasicBlock.relu", "resnet_da.BasicBlock.conv2", "resnet_da.BasicBlock.bn2", "resnet_da.BasicBlock.relu", "resnet_da.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.Bottleneck.__init__": [[67, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "# change", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.Bottleneck.forward": [[83, 104], ["resnet_da.Bottleneck.conv1", "resnet_da.Bottleneck.bn1", "resnet_da.Bottleneck.relu", "resnet_da.Bottleneck.conv2", "resnet_da.Bottleneck.bn2", "resnet_da.Bottleneck.relu", "resnet_da.Bottleneck.conv3", "resnet_da.Bottleneck.bn3", "resnet_da.Bottleneck.relu", "resnet_da.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.ResNet.__init__": [[107, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_da.ResNet._make_layer", "resnet_da.ResNet._make_layer", "resnet_da.ResNet._make_layer", "resnet_da.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_da.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", "\n", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.ResNet._make_layer": [[133, 154], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.ResNet.forward": [[155, 171], ["resnet_da.ResNet.conv1", "resnet_da.ResNet.bn1", "resnet_da.ResNet.relu", "resnet_da.ResNet.maxpool", "resnet_da.ResNet.layer1", "resnet_da.ResNet.layer2", "resnet_da.ResNet.layer3", "resnet_da.ResNet.layer4", "resnet_da.ResNet.avgpool", "resnet_da.ResNet.view", "resnet_da.ResNet.fc", "resnet_da.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet.__init__": [[229, 237], ["model.da_faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "num_layers", "=", "101", ",", "pretrained", "=", "False", ",", "class_agnostic", "=", "False", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "\"/data/pretrained_model/resnet101_caffe.pth\"", "\n", "# self.model_path = \"/data/ztc/detectionModel/resnet101_caffe.pth\"", "\n", "self", ".", "dout_base_model", "=", "1024", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "\n", "_fasterRCNN", ".", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "2048", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet._init_modules": [[238, 292], ["resnet_da.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_da.resnet.RCNN_base[].parameters", "resnet_da.resnet.RCNN_base[].parameters", "resnet_da.resnet.RCNN_base.apply", "resnet_da.resnet.RCNN_top.apply", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet101.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_da.resnet.RCNN_base[].parameters", "resnet_da.resnet.RCNN_base[].parameters", "resnet_da.resnet.RCNN_base[].parameters", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet101.state_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101"], ["", "def", "_init_modules", "(", "self", ")", ":", "\n", "        ", "resnet", "=", "resnet101", "(", ")", "\n", "\n", "if", "self", ".", "pretrained", "==", "True", ":", "\n", "            ", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "self", ".", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "resnet", ".", "load_state_dict", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "resnet", ".", "state_dict", "(", ")", "}", "\n", ")", "\n", "\n", "# Build resnet.", "\n", "", "self", ".", "RCNN_base", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "\n", "resnet", ".", "bn1", ",", "\n", "resnet", ".", "relu", ",", "\n", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "\n", "resnet", ".", "layer2", ",", "\n", "resnet", ".", "layer3", ",", "\n", ")", "\n", "\n", "self", ".", "RCNN_top", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layer4", ")", "\n", "\n", "self", ".", "RCNN_cls_score", "=", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "2048", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "2048", ",", "4", "*", "self", ".", "n_classes", ")", "\n", "\n", "# Fix blocks", "\n", "", "for", "p", "in", "self", ".", "RCNN_base", "[", "0", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "RCNN_base", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "assert", "0", "<=", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "<", "4", "\n", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">=", "3", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base", "[", "6", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">=", "2", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base", "[", "5", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">=", "1", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base", "[", "4", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "def", "set_bn_fix", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "self", ".", "RCNN_base", ".", "apply", "(", "set_bn_fix", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_fix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet.train": [[293, 309], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet_da.resnet.RCNN_base.eval", "resnet_da.resnet.RCNN_base[].train", "resnet_da.resnet.RCNN_base[].train", "resnet_da.resnet.RCNN_base.apply", "resnet_da.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override train so that the training mode is set as we want", "\n", "        ", "nn", ".", "Module", ".", "train", "(", "self", ",", "mode", ")", "\n", "if", "mode", ":", "\n", "# Set fixed blocks to be in eval mode", "\n", "            ", "self", ".", "RCNN_base", ".", "eval", "(", ")", "\n", "self", ".", "RCNN_base", "[", "5", "]", ".", "train", "(", ")", "\n", "self", ".", "RCNN_base", "[", "6", "]", ".", "train", "(", ")", "\n", "\n", "def", "set_bn_eval", "(", "m", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "self", ".", "RCNN_base", ".", "apply", "(", "set_bn_eval", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet._head_to_tail": [[310, 313], ["resnet_da.resnet.RCNN_top().mean().mean", "resnet_da.resnet.RCNN_top().mean", "resnet_da.resnet.RCNN_top"], "methods", ["None"], ["", "", "def", "_head_to_tail", "(", "self", ",", "pool5", ")", ":", "\n", "        ", "fc7", "=", "self", ".", "RCNN_top", "(", "pool5", ")", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "return", "fc7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet18": [[173, 182], ["resnet_da.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet34": [[184, 193], ["resnet_da.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet50": [[195, 204], ["resnet_da.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet101": [[206, 215], ["resnet_da.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn.resnet_da.resnet152": [[217, 226], ["resnet_da.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.vgg16.vgg16.__init__": [[17, 24], ["model.faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.vgg16.vgg16._init_modules": [[25, 55], ["torchvision.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Linear", "torch.Linear", "torch.Linear", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.vgg16.load_state_dict", "vgg16.vgg16.RCNN_base[].parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "torch.load.items", "torch.load.items", "torch.load.items", "torchvision.vgg16.classifier._modules.values", "torchvision.vgg16.features._modules.values", "torchvision.vgg16.state_dict"], "methods", ["None"], ["    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "class", "netD_pixel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "256", ",", "256", ")", "\n", "# self.bn1 = nn.BatchNorm2d(256)", "\n", "self", ".", "conv2", "=", "conv1x1", "(", "256", ",", "128", ")", "\n", "# self.bn2 = nn.BatchNorm2d(128)", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "128", ",", "1", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "# feat = x", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", "# F.sigmoid(x)", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.vgg16.vgg16._head_to_tail": [[56, 62], ["pool5.view", "vgg16.vgg16.RCNN_top", "pool5.size"], "methods", ["None"], ["", "", "", "class", "netD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.faster_rcnn._fasterRCNN.__init__": [[25, 44], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_layers.ROIPool", "model.roi_layers.ROIAlign"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "ROIPool", "(", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "ROIAlign", "(", "\n", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ",", "0", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "(", "\n", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.faster_rcnn._fasterRCNN.forward": [[46, 138], ["im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_bbox_pred", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "cls_prob.view.view.view", "torch.gather.squeeze.view", "faster_rcnn._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN.RCNN_roi_align", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss"], ["self", ".", "conv_lst", "=", "nn", ".", "Conv2d", "(", "self", ".", "dout_base_model", ",", "self", ".", "n_classes", "-", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "# self.bn1 = nn.BatchNorm2d(self.dout_base_model, momentum=0.01)", "\n", "# self.bn2 = nn.BatchNorm2d(self.n_classes-1, momentum=0.01)", "\n", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "            ", "if", "self", ".", "lc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "", "self", ".", "RCNN_instanceDA", "=", "_InstanceDA", "(", "in_channel", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "im_data", ",", "\n", "im_info", ",", "\n", "im_cls_lb", ",", "\n", "gt_boxes", ",", "\n", "num_boxes", ",", "\n", "target", "=", "False", ",", "\n", "eta", "=", "1.0", ",", "\n", "weight_value", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "if", "target", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "train", "(", ")", "\n", "\n", "", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "\n", "# feed image data to base model to obtain base feature map", "\n", "base_feat1", "=", "self", ".", "RCNN_base1", "(", "im_data", ")", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "d_pixel", ",", "_", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "# print(d_pixel)", "\n", "# if not target:", "\n", "if", "True", ":", "\n", "                ", "_", ",", "feat_pixel", "=", "self", ".", "netD_pixel", "(", "base_feat1", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "d_pixel", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "", "base_feat", "=", "self", ".", "RCNN_base2", "(", "base_feat1", ")", "\n", "if", "self", ".", "gc", ":", "\n", "            ", "domain_p", ",", "_", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#, diff", "\n", "_", ",", "feat", "=", "self", ".", "netD", "(", "base_feat", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "domain_p", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#,diff", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "\n", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", ")", "\n", "# supervise base feature map with category level label", "\n", "cls_feat", "=", "self", ".", "avg_pool", "(", "base_feat", ")", "\n", "cls_feat", "=", "self", ".", "conv_lst", "(", "cls_feat", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# cls_feat = self.conv_lst(self.bn1(self.avg_pool(base_feat))).squeeze(-1).squeeze(-1)", "\n", "category_loss_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "cls_feat", ",", "im_cls_lb", ")", "\n", "\n", "# if it is training phrase, then use ground trubut bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "\n", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "\"align\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "\"pool\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.faster_rcnn._fasterRCNN._init_weights": [[140, 159], ["faster_rcnn._fasterRCNN._init_weights.normal_init"], "methods", ["None"], ["# feed pooled features to top model", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "instance_pooled_feat", "=", "pooled_feat", "\n", "# feat_pixel = torch.zeros(feat_pixel.size()).cuda()", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_pixel", "=", "feat_pixel", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat_pixel", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat_pixel", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat", "=", "feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "# compute bbox offset", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.faster_rcnn._fasterRCNN.create_architecture": [[160, 163], ["faster_rcnn._fasterRCNN._init_modules", "faster_rcnn._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], ["# compute object classification probability", "\n", "", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], ["in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "class", "netD_pixel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.BasicBlock.forward": [[45, 62], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["self", ".", "context", "=", "context", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n        weight initalizer: truncated normal and random normal.\n        \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "# m.bias.data.zero_()", "\n", "\n", "", "", "normal_init", "(", "self", ".", "conv1", ",", "0", ",", "0.01", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.Bottleneck.__init__": [[67, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", ",", "feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n", "\n", "", "", "", "class", "netD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "1024", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.Bottleneck.forward": [[83, 104], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.ResNet.__init__": [[107, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.ResNet._make_layer": [[133, 154], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.ResNet.forward": [[155, 171], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "# change", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet.__init__": [[229, 236], ["model.faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet._init_modules": [[237, 291], ["resnet.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base.apply", "resnet101.resnet.RCNN_top.apply", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet101.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet101.state_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101"], ["", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet.train": [[292, 308], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet.resnet.RCNN_base.eval", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base.apply", "resnet.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train"], ["        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet._head_to_tail": [[309, 312], ["resnet.resnet.RCNN_top().mean().mean", "resnet.resnet.RCNN_top().mean", "resnet.resnet.RCNN_top"], "methods", ["None"], ["\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet18": [[173, 182], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet34": [[184, 193], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet50": [[195, 204], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet101": [[206, 215], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.faster_rcnn.resnet.resnet152": [[217, 226], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_align.__init__._import_symbols": [[9, 17], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_align.faster_rcnn._fasterRCNN.__init__": [[23, 52], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_layers.ROIPool", "model.roi_layers.ROIAlign", "model.da_faster_rcnn_weight.DA._ImageDA", "model.da_faster_rcnn_weight.DA._InstanceDA", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "def", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ",", "da_use_contex", ",", "in_channel", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "ROIPool", "(", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "ROIAlign", "(", "\n", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ",", "0", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "(", "\n", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", ")", "\n", "\n", "self", ".", "conv_lst", "=", "nn", ".", "Conv2d", "(", "self", ".", "dout_base_model", ",", "self", ".", "n_classes", "-", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "# self.bn1 = nn.BatchNorm2d(self.dout_base_model, momentum=0.01)", "\n", "# self.bn2 = nn.BatchNorm2d(self.n_classes-1, momentum=0.01)", "\n", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "if", "self", ".", "da_use_contex", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_align.faster_rcnn._fasterRCNN.forward": [[53, 313], ["im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze", "faster_rcnn._fasterRCNN.RCNN_rpn.train", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_bbox_pred", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "cls_prob.view.view.view", "torch.gather.squeeze.view", "tgt_im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "faster_rcnn._fasterRCNN.RCNN_rpn.eval", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_cls_score().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach.argmax().detach", "faster_rcnn._fasterRCNN.RCNN_imageDA", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "consistency_prob.repeat.repeat.repeat", "faster_rcnn._fasterRCNN.consistency_loss", "faster_rcnn._fasterRCNN.RCNN_imageDA", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "tgt_rois_binary_score.detach.detach.detach", "range", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "tgt_consistency_prob.repeat.repeat.repeat", "faster_rcnn._fasterRCNN.consistency_loss", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "faster_rcnn._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN.RCNN_roi_align", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "model.utils.net_utils._affine_grid_gen", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "faster_rcnn._fasterRCNN.RCNN_roi_crop", "torch.softmax", "torch.softmax", "torch.softmax", "instance_sigmoid.size", "consistency_prob.repeat.repeat.detach", "len", "tgt_pre_label[].item", "torch.softmax", "torch.softmax", "torch.softmax", "tgt_instance_sigmoid.size", "tgt_consistency_prob.repeat.repeat.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "faster_rcnn._fasterRCNN.conv_lst().squeeze", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "faster_rcnn._fasterRCNN.conv_lst().squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "faster_rcnn._fasterRCNN.RCNN_roi_align", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().detach.argmax", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "target_weight.append", "target_weight.append", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "faster_rcnn._fasterRCNN.conv_lst", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.conv_lst", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "faster_rcnn._fasterRCNN.avg_pool", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.avg_pool", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._affine_grid_gen"], ["            ", "if", "self", ".", "lc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "", "self", ".", "RCNN_instanceDA", "=", "_InstanceDA", "(", "in_channel", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "im_data", ",", "\n", "im_info", ",", "\n", "im_cls_lb", ",", "\n", "gt_boxes", ",", "\n", "num_boxes", ",", "\n", "target", "=", "False", ",", "\n", "eta", "=", "1.0", ",", "\n", "weight_value", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "if", "target", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "train", "(", ")", "\n", "\n", "", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "\n", "# feed image data to base model to obtain base feature map", "\n", "base_feat1", "=", "self", ".", "RCNN_base1", "(", "im_data", ")", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "d_pixel", ",", "_", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "# print(d_pixel)", "\n", "# if not target:", "\n", "if", "True", ":", "\n", "                ", "_", ",", "feat_pixel", "=", "self", ".", "netD_pixel", "(", "base_feat1", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "d_pixel", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "", "base_feat", "=", "self", ".", "RCNN_base2", "(", "base_feat1", ")", "\n", "if", "self", ".", "gc", ":", "\n", "            ", "domain_p", ",", "_", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#, diff", "\n", "_", ",", "feat", "=", "self", ".", "netD", "(", "base_feat", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "domain_p", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#,diff", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "\n", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", ")", "\n", "# supervise base feature map with category level label", "\n", "cls_feat", "=", "self", ".", "avg_pool", "(", "base_feat", ")", "\n", "cls_feat", "=", "self", ".", "conv_lst", "(", "cls_feat", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# cls_feat = self.conv_lst(self.bn1(self.avg_pool(base_feat))).squeeze(-1).squeeze(-1)", "\n", "category_loss_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "cls_feat", ",", "im_cls_lb", ")", "\n", "\n", "# if it is training phrase, then use ground trubut bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "\n", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "\"align\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "\"pool\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "# feed pooled features to top model", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "instance_pooled_feat", "=", "pooled_feat", "\n", "# feat_pixel = torch.zeros(feat_pixel.size()).cuda()", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_pixel", "=", "feat_pixel", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat_pixel", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat_pixel", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat", "=", "feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "# compute bbox offset", "\n", "\n", "# compute object classification probability", "\n", "", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n", "# add instance da", "\n", "instance_sigmoid", ",", "same_size_label", "=", "self", ".", "RCNN_instanceDA", "(", "\n", "instance_pooled_feat", ",", "need_backprop", "\n", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "cls_pre_label", "=", "cls_prob", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "cls_feat_sig", "=", "F", ".", "sigmoid", "(", "cls_feat", "[", "0", "]", ")", ".", "detach", "(", ")", "\n", "target_weight", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cls_pre_label", ")", ")", ":", "\n", "                ", "label_i", "=", "cls_pre_label", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "label_i", ">", "0", ":", "\n", "                    ", "diff_value", "=", "torch", ".", "exp", "(", "\n", "weight_value", "\n", "*", "torch", ".", "abs", "(", "cls_feat_sig", "[", "label_i", "-", "1", "]", "-", "cls_prob", "[", "i", "]", "[", "label_i", "]", ")", "\n", ")", ".", "item", "(", ")", "\n", "target_weight", ".", "append", "(", "diff_value", ")", "\n", "", "else", ":", "\n", "                    ", "target_weight", ".", "append", "(", "1.0", ")", "\n", "\n", "", "", "instance_loss", "=", "nn", ".", "BCELoss", "(", "\n", "weight", "=", "torch", ".", "Tensor", "(", "target_weight", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "instance_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "", "DA_ins_loss_cls", "=", "instance_loss", "(", "instance_sigmoid", ",", "same_size_label", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "return", "d_pixel", ",", "domain_p", ",", "DA_ins_loss_cls", "\n", "\n", "# compute bbox offset", "\n", "", "bbox_pred", "=", "self", ".", "RCNN_bbox_pred", "(", "pooled_feat", ")", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "class_agnostic", ":", "\n", "            ", "bbox_pred_view", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "int", "(", "bbox_pred", ".", "size", "(", "1", ")", "/", "4", ")", ",", "4", "\n", ")", "\n", "bbox_pred_select", "=", "torch", ".", "gather", "(", "\n", "bbox_pred_view", ",", "\n", "1", ",", "\n", "rois_label", ".", "view", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "\n", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "4", "\n", ")", ",", "\n", ")", "\n", "bbox_pred", "=", "bbox_pred_select", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "RCNN_loss_cls", "=", "0", "\n", "RCNN_loss_bbox", "=", "0", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# classification loss", "\n", "            ", "RCNN_loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "rois_label", ")", "\n", "\n", "# bounding box regression L1 loss", "\n", "RCNN_loss_bbox", "=", "_smooth_l1_loss", "(", "\n", "bbox_pred", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "\n", ")", "\n", "\n", "", "cls_prob", "=", "cls_prob", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "return", "(", "\n", "rois", ",", "\n", "cls_prob", ",", "\n", "bbox_pred", ",", "\n", "category_loss_cls", ",", "\n", "rpn_loss_cls", ",", "\n", "rpn_loss_bbox", ",", "\n", "RCNN_loss_cls", ",", "\n", "RCNN_loss_bbox", ",", "\n", "rois_label", ",", "\n", "d_pixel", ",", "\n", "domain_p", ",", "\n", "DA_ins_loss_cls", ",", "\n", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            weight initalizer: truncated normal and random normal.\n            \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_Conv", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_bbox_pred", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_bbox_pred", ",", "0", ",", "0.001", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "\n", "", "def", "create_architecture", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_modules", "(", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_align.faster_rcnn._fasterRCNN._init_weights": [[315, 340], ["faster_rcnn._fasterRCNN._init_weights.normal_init"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.roi_align.faster_rcnn._fasterRCNN.create_architecture": [[341, 344], ["faster_rcnn._fasterRCNN._init_modules", "faster_rcnn._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.eval.test_strong_weak.parse_args": [[41, 193], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train a Fast R-CNN network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "dest", "=", "\"dataset\"", ",", "\n", "help", "=", "\"training dataset\"", ",", "\n", "default", "=", "\"cityscape\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_epoch\"", ",", "dest", "=", "\"num_epoch\"", ",", "help", "=", "\"save res\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "dest", "=", "\"output_dir\"", ",", "help", "=", "\"resoutput\"", ",", "default", "=", "\"./\"", ",", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "dest", "=", "\"cfg_file\"", ",", "\n", "help", "=", "\"optional config file\"", ",", "\n", "default", "=", "\"cfgs/vgg16.yml\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--net\"", ",", "\n", "dest", "=", "\"net\"", ",", "\n", "help", "=", "\"vgg16, res50, res101, res152\"", ",", "\n", "default", "=", "\"vgg16\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--set\"", ",", "\n", "dest", "=", "\"set_cfgs\"", ",", "\n", "help", "=", "\"set config keys\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "# parser.add_argument('--load_dir', dest='load_dir',", "\n", "#                     help='directory to load models', default=\"models\",", "\n", "#                     type=str)", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_dir\"", ",", "\n", "dest", "=", "\"model_dir\"", ",", "\n", "help", "=", "\"directory to load models\"", ",", "\n", "default", "=", "\"models.pth\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--part\"", ",", "\n", "dest", "=", "\"part\"", ",", "\n", "help", "=", "\"test_s or test_t or test_all\"", ",", "\n", "default", "=", "\"test_t\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cuda\"", ",", "dest", "=", "\"cuda\"", ",", "help", "=", "\"whether use CUDA\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ls\"", ",", "\n", "dest", "=", "\"large_scale\"", ",", "\n", "help", "=", "\"whether use large imag scale\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mGPUs\"", ",", "dest", "=", "\"mGPUs\"", ",", "help", "=", "\"whether use multiple GPUs\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cag\"", ",", "\n", "dest", "=", "\"class_agnostic\"", ",", "\n", "help", "=", "\"whether perform class_agnostic bbox regression\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--parallel_type\"", ",", "\n", "dest", "=", "\"parallel_type\"", ",", "\n", "help", "=", "\"which part of model to parallel, 0: all, 1: model before roi pooling\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checksession\"", ",", "\n", "dest", "=", "\"checksession\"", ",", "\n", "help", "=", "\"checksession to load model\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkepoch\"", ",", "\n", "dest", "=", "\"checkepoch\"", ",", "\n", "help", "=", "\"checkepoch to load network\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint\"", ",", "\n", "dest", "=", "\"checkpoint\"", ",", "\n", "help", "=", "\"checkpoint to load network\"", ",", "\n", "default", "=", "10021", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_name\"", ",", "\n", "dest", "=", "\"model_name\"", ",", "\n", "help", "=", "\"model file name\"", ",", "\n", "default", "=", "\"res101.bs1.pth\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vis\"", ",", "dest", "=", "\"vis\"", ",", "help", "=", "\"visualization mode\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--USE_cls_cotrain\"", ",", "\n", "dest", "=", "\"USE_cls_cotrain\"", ",", "\n", "help", "=", "\"USE_cls_cotrain\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--USE_box_cotrain\"", ",", "\n", "dest", "=", "\"USE_box_cotrain\"", ",", "\n", "help", "=", "\"USE_box_cotrain\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lc\"", ",", "\n", "dest", "=", "\"lc\"", ",", "\n", "help", "=", "\"whether use context vector for pixel level\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gc\"", ",", "\n", "dest", "=", "\"gc\"", ",", "\n", "help", "=", "\"whether use context vector for global level\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "# resume trained model", "\n", "parser", ".", "add_argument", "(", "\n", "\"--r\"", ",", "dest", "=", "\"resume\"", ",", "help", "=", "\"resume checkpoint or not\"", ",", "default", "=", "False", ",", "type", "=", "bool", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume_name\"", ",", "\n", "dest", "=", "\"resume_name\"", ",", "\n", "help", "=", "\"resume checkpoint path\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.eval._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.eval.test_SW_ICR_CCR.parse_args": [[37, 179], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train a Fast R-CNN network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "dest", "=", "\"dataset\"", ",", "\n", "help", "=", "\"training dataset\"", ",", "\n", "default", "=", "\"cityscape\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_epoch\"", ",", "dest", "=", "\"num_epoch\"", ",", "help", "=", "\"resoutput\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "dest", "=", "\"output_dir\"", ",", "help", "=", "\"resoutput\"", ",", "default", "=", "\"./\"", ",", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "dest", "=", "\"cfg_file\"", ",", "\n", "help", "=", "\"optional config file\"", ",", "\n", "default", "=", "\"cfgs/vgg16.yml\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--net\"", ",", "\n", "dest", "=", "\"net\"", ",", "\n", "help", "=", "\"vgg16, res50, res101, res152\"", ",", "\n", "default", "=", "\"vgg16\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--set\"", ",", "\n", "dest", "=", "\"set_cfgs\"", ",", "\n", "help", "=", "\"set config keys\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "# parser.add_argument('--load_dir', dest='load_dir',", "\n", "#                     help='directory to load models', default=\"models\",", "\n", "#                     type=str)", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_dir\"", ",", "\n", "dest", "=", "\"model_dir\"", ",", "\n", "help", "=", "\"directory to load models\"", ",", "\n", "default", "=", "\"models.pth\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--part\"", ",", "\n", "dest", "=", "\"part\"", ",", "\n", "help", "=", "\"test_s or test_t or test_all\"", ",", "\n", "default", "=", "\"test_t\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cuda\"", ",", "dest", "=", "\"cuda\"", ",", "help", "=", "\"whether use CUDA\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ls\"", ",", "\n", "dest", "=", "\"large_scale\"", ",", "\n", "help", "=", "\"whether use large imag scale\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mGPUs\"", ",", "dest", "=", "\"mGPUs\"", ",", "help", "=", "\"whether use multiple GPUs\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cag\"", ",", "\n", "dest", "=", "\"class_agnostic\"", ",", "\n", "help", "=", "\"whether perform class_agnostic bbox regression\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--parallel_type\"", ",", "\n", "dest", "=", "\"parallel_type\"", ",", "\n", "help", "=", "\"which part of model to parallel, 0: all, 1: model before roi pooling\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checksession\"", ",", "\n", "dest", "=", "\"checksession\"", ",", "\n", "help", "=", "\"checksession to load model\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkepoch\"", ",", "\n", "dest", "=", "\"checkepoch\"", ",", "\n", "help", "=", "\"checkepoch to load network\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint\"", ",", "\n", "dest", "=", "\"checkpoint\"", ",", "\n", "help", "=", "\"checkpoint to load network\"", ",", "\n", "default", "=", "10021", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_name\"", ",", "\n", "dest", "=", "\"model_name\"", ",", "\n", "help", "=", "\"model file name\"", ",", "\n", "default", "=", "\"res101.bs1.pth\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vis\"", ",", "dest", "=", "\"vis\"", ",", "help", "=", "\"visualization mode\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--USE_cls_cotrain\"", ",", "\n", "dest", "=", "\"USE_cls_cotrain\"", ",", "\n", "help", "=", "\"USE_cls_cotrain\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--USE_box_cotrain\"", ",", "\n", "dest", "=", "\"USE_box_cotrain\"", ",", "\n", "help", "=", "\"USE_box_cotrain\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lc\"", ",", "\n", "dest", "=", "\"lc\"", ",", "\n", "help", "=", "\"whether use context vector for pixel level\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gc\"", ",", "\n", "dest", "=", "\"gc\"", ",", "\n", "help", "=", "\"whether use context vector for global level\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.eval.test.parse_args": [[37, 161], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train a Fast R-CNN network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "dest", "=", "\"dataset\"", ",", "\n", "help", "=", "\"training dataset\"", ",", "\n", "default", "=", "\"cityscape\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "dest", "=", "\"cfg_file\"", ",", "\n", "help", "=", "\"optional config file\"", ",", "\n", "default", "=", "\"cfgs/vgg16.yml\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--net\"", ",", "\n", "dest", "=", "\"net\"", ",", "\n", "help", "=", "\"vgg16, res50, res101, res152\"", ",", "\n", "default", "=", "\"vgg16\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--set\"", ",", "\n", "dest", "=", "\"set_cfgs\"", ",", "\n", "help", "=", "\"set config keys\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "# parser.add_argument('--load_dir', dest='load_dir',", "\n", "#                     help='directory to load models', default=\"models\",", "\n", "#                     type=str)", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_dir\"", ",", "\n", "dest", "=", "\"model_dir\"", ",", "\n", "help", "=", "\"directory to load models\"", ",", "\n", "default", "=", "\"models.pth\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--part\"", ",", "\n", "dest", "=", "\"part\"", ",", "\n", "help", "=", "\"test_s or test_t or test_all\"", ",", "\n", "default", "=", "\"test_t\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cuda\"", ",", "dest", "=", "\"cuda\"", ",", "help", "=", "\"whether use CUDA\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ls\"", ",", "\n", "dest", "=", "\"large_scale\"", ",", "\n", "help", "=", "\"whether use large imag scale\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mGPUs\"", ",", "dest", "=", "\"mGPUs\"", ",", "help", "=", "\"whether use multiple GPUs\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cag\"", ",", "\n", "dest", "=", "\"class_agnostic\"", ",", "\n", "help", "=", "\"whether perform class_agnostic bbox regression\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--parallel_type\"", ",", "\n", "dest", "=", "\"parallel_type\"", ",", "\n", "help", "=", "\"which part of model to parallel, 0: all, 1: model before roi pooling\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checksession\"", ",", "\n", "dest", "=", "\"checksession\"", ",", "\n", "help", "=", "\"checksession to load model\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkepoch\"", ",", "\n", "dest", "=", "\"checkepoch\"", ",", "\n", "help", "=", "\"checkepoch to load network\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint\"", ",", "\n", "dest", "=", "\"checkpoint\"", ",", "\n", "help", "=", "\"checkpoint to load network\"", ",", "\n", "default", "=", "10021", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_name\"", ",", "\n", "dest", "=", "\"model_name\"", ",", "\n", "help", "=", "\"model file name\"", ",", "\n", "default", "=", "\"res101.bs1.pth\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vis\"", ",", "dest", "=", "\"vis\"", ",", "help", "=", "\"visualization mode\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--USE_cls_cotrain\"", ",", "\n", "dest", "=", "\"USE_cls_cotrain\"", ",", "\n", "help", "=", "\"USE_cls_cotrain\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--USE_box_cotrain\"", ",", "\n", "dest", "=", "\"USE_box_cotrain\"", ",", "\n", "help", "=", "\"USE_box_cotrain\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.DA_Faster_ICR_CCR._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.DA_Faster_ICR_CCR.da_trainval_net.sampler.__init__": [[188, 199], ["int", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_data", "=", "train_size", "\n", "self", ".", "num_per_batch", "=", "int", "(", "train_size", "/", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "range", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", ".", "view", "(", "1", ",", "batch_size", ")", ".", "long", "(", ")", "\n", "self", ".", "leftover_flag", "=", "False", "\n", "if", "train_size", "%", "batch_size", ":", "\n", "            ", "self", ".", "leftover", "=", "torch", ".", "arange", "(", "\n", "self", ".", "num_per_batch", "*", "batch_size", ",", "train_size", "\n", ")", ".", "long", "(", ")", "\n", "self", ".", "leftover_flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.DA_Faster_ICR_CCR.da_trainval_net.sampler.__iter__": [[200, 212], ["da_trainval_net.sampler.rand_num.view", "iter", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "rand_num.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "rand_num", "=", "torch", ".", "randperm", "(", "self", ".", "num_per_batch", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "self", ".", "batch_size", "\n", "self", ".", "rand_num", "=", "(", "\n", "rand_num", ".", "expand", "(", "self", ".", "num_per_batch", ",", "self", ".", "batch_size", ")", "+", "self", ".", "range", "\n", ")", "\n", "\n", "self", ".", "rand_num_view", "=", "self", ".", "rand_num", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "leftover_flag", ":", "\n", "            ", "self", ".", "rand_num_view", "=", "torch", ".", "cat", "(", "(", "self", ".", "rand_num_view", ",", "self", ".", "leftover", ")", ",", "0", ")", "\n", "\n", "", "return", "iter", "(", "self", ".", "rand_num_view", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.DA_Faster_ICR_CCR.da_trainval_net.sampler.__len__": [[213, 215], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.DA_Faster_ICR_CCR.da_trainval_net.infinite_data_loader": [[39, 43], ["None"], "function", ["None"], ["def", "infinite_data_loader", "(", "data_loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "batch", "in", "data_loader", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.DA_Faster_ICR_CCR.da_trainval_net.parse_args": [[45, 185], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["", "", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train a Fast R-CNN network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "dest", "=", "\"dataset\"", ",", "\n", "help", "=", "\"training dataset\"", ",", "\n", "default", "=", "\"cityscape\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--net\"", ",", "dest", "=", "\"net\"", ",", "help", "=", "\"vgg16, res101\"", ",", "default", "=", "\"vgg16\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained_path\"", ",", "\n", "dest", "=", "\"pretrained_path\"", ",", "\n", "help", "=", "\"vgg16, res101\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint_interval\"", ",", "\n", "dest", "=", "\"checkpoint_interval\"", ",", "\n", "help", "=", "\"number of iterations to save checkpoint\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_dir\"", ",", "\n", "dest", "=", "\"save_dir\"", ",", "\n", "help", "=", "\"directory to save models\"", ",", "\n", "default", "=", "\" \"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nw\"", ",", "\n", "dest", "=", "\"num_workers\"", ",", "\n", "help", "=", "\"number of worker to load data\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cuda\"", ",", "dest", "=", "\"cuda\"", ",", "help", "=", "\"whether use CUDA\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ls\"", ",", "\n", "dest", "=", "\"large_scale\"", ",", "\n", "help", "=", "\"whether use large imag scale\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bs\"", ",", "dest", "=", "\"batch_size\"", ",", "help", "=", "\"batch_size\"", ",", "default", "=", "1", ",", "type", "=", "int", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cag\"", ",", "\n", "dest", "=", "\"class_agnostic\"", ",", "\n", "help", "=", "\"whether perform class_agnostic bbox regression\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "\n", "# config optimization", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_iter\"", ",", "\n", "dest", "=", "\"max_iter\"", ",", "\n", "help", "=", "\"max iteration for train\"", ",", "\n", "default", "=", "10000", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--o\"", ",", "dest", "=", "\"optimizer\"", ",", "help", "=", "\"training optimizer\"", ",", "default", "=", "\"sgd\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "dest", "=", "\"lr\"", ",", "help", "=", "\"starting learning rate\"", ",", "default", "=", "0.001", ",", "type", "=", "float", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_decay_step\"", ",", "\n", "dest", "=", "\"lr_decay_step\"", ",", "\n", "help", "=", "\"step to do learning rate decay, unit is iter\"", ",", "\n", "default", "=", "5", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_decay_gamma\"", ",", "\n", "dest", "=", "\"lr_decay_gamma\"", ",", "\n", "help", "=", "\"learning rate decay ratio\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--instance_weight_value\"", ",", "\n", "dest", "=", "\"instance_weight_value\"", ",", "\n", "help", "=", "\"instance_weight_value\"", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lamda\"", ",", "dest", "=", "\"lamda\"", ",", "help", "=", "\"DA loss param\"", ",", "default", "=", "0.1", ",", "type", "=", "float", "\n", ")", "\n", "\n", "# set training session", "\n", "parser", ".", "add_argument", "(", "\n", "\"--s\"", ",", "dest", "=", "\"session\"", ",", "help", "=", "\"training session\"", ",", "default", "=", "1", ",", "type", "=", "int", "\n", ")", "\n", "\n", "# resume trained model", "\n", "parser", ".", "add_argument", "(", "\n", "\"--r\"", ",", "dest", "=", "\"resume\"", ",", "help", "=", "\"resume checkpoint or not\"", ",", "default", "=", "False", ",", "type", "=", "bool", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_name\"", ",", "\n", "dest", "=", "\"model_name\"", ",", "\n", "help", "=", "\"resume from which model\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "# setting display config", "\n", "parser", ".", "add_argument", "(", "\n", "\"--disp_interval\"", ",", "\n", "dest", "=", "\"disp_interval\"", ",", "\n", "help", "=", "\"number of iterations to display\"", ",", "\n", "default", "=", "100", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_epochs\"", ",", "\n", "dest", "=", "\"max_epochs\"", ",", "\n", "help", "=", "\"max epoch for train\"", ",", "\n", "default", "=", "7", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start_epoch\"", ",", "dest", "=", "\"start_epoch\"", ",", "help", "=", "\"starting epoch\"", ",", "default", "=", "1", ",", "type", "=", "int", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.vgg16.vgg16.__init__": [[17, 26], ["model.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.vgg16.vgg16._init_modules": [[27, 57], ["torchvision.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Linear", "torch.Linear", "torch.Linear", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.vgg16.load_state_dict", "vgg16.vgg16.RCNN_base[].parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "torch.load.items", "torch.load.items", "torch.load.items", "torchvision.vgg16.classifier._modules.values", "torchvision.vgg16.features._modules.values", "torchvision.vgg16.state_dict"], "methods", ["None"], ["in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "\n", "", "class", "netD_pixel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "256", ",", "256", ")", "\n", "# self.bn1 = nn.BatchNorm2d(256)", "\n", "self", ".", "conv2", "=", "conv1x1", "(", "256", ",", "128", ")", "\n", "# self.bn2 = nn.BatchNorm2d(128)", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "128", ",", "1", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "# feat = x", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", ",", "feat", "# torch.cat((feat1,feat2),1)#F", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "1", ")", "# F.sigmoid(x)", "\n", "\n", "\n", "", "", "", "class", "netD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.vgg16.vgg16._head_to_tail": [[58, 64], ["pool5.view", "vgg16.vgg16.RCNN_top", "pool5.size"], "methods", ["None"], ["        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.LabelResizeLayer.ImageLabelResizeLayer.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageLabelResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.LabelResizeLayer.ImageLabelResizeLayer.forward": [[21, 40], ["x.detach().cpu().numpy", "need_backprop.detach().cpu().numpy", "numpy.zeros", "range", "gt_blob.transpose.transpose.transpose", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "y.squeeze().long.squeeze().long.squeeze().long", "numpy.array", "cv2.resize", "x.detach().cpu", "need_backprop.detach().cpu", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "y.squeeze().long.squeeze().long.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x.detach", "need_backprop.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "\n", "        ", "feats", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lbs", "=", "need_backprop", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_blob", "=", "np", ".", "zeros", "(", "\n", "(", "lbs", ".", "shape", "[", "0", "]", ",", "feats", ".", "shape", "[", "2", "]", ",", "feats", ".", "shape", "[", "3", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "for", "i", "in", "range", "(", "lbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "lb", "=", "np", ".", "array", "(", "[", "lbs", "[", "i", "]", "]", ")", "\n", "lbs_resize", "=", "cv2", ".", "resize", "(", "\n", "lb", ",", "(", "feats", ".", "shape", "[", "3", "]", ",", "feats", ".", "shape", "[", "2", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", "\n", ")", "\n", "gt_blob", "[", "i", ",", "0", ":", "lbs_resize", ".", "shape", "[", "0", "]", ",", "0", ":", "lbs_resize", ".", "shape", "[", "1", "]", ",", "0", "]", "=", "lbs_resize", "\n", "\n", "", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "gt_blob", "=", "gt_blob", ".", "transpose", "(", "channel_swap", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "gt_blob", ")", ")", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.LabelResizeLayer.InstanceLabelResizeLayer.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "InstanceLabelResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "minibatch", "=", "256", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.LabelResizeLayer.InstanceLabelResizeLayer.forward": [[47, 57], ["x.data.cpu().numpy", "need_backprop.data.cpu().numpy", "numpy.ones", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.data.cpu", "need_backprop.data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "feats", "=", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lbs", "=", "need_backprop", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "resized_lbs", "=", "np", ".", "ones", "(", "(", "feats", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "lbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "resized_lbs", "[", "i", "*", "self", ".", "minibatch", ":", "(", "i", "+", "1", ")", "*", "self", ".", "minibatch", "]", "=", "lbs", "[", "i", "]", "\n", "\n", "", "y", "=", "torch", ".", "from_numpy", "(", "resized_lbs", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN.__init__": [[23, 52], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_layers.ROIPool", "model.roi_layers.ROIAlign", "model.da_faster_rcnn_instance_weight.DA._ImageDA", "model.da_faster_rcnn_instance_weight.DA._InstanceDA", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["\n", "def", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ",", "lc", ",", "gc", ",", "da_use_contex", ",", "in_channel", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "gc", "=", "gc", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "ROIPool", "(", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "ROIAlign", "(", "\n", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ",", "1.0", "/", "16.0", ",", "0", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "(", "\n", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", ")", "\n", "\n", "self", ".", "conv_lst", "=", "nn", ".", "Conv2d", "(", "self", ".", "dout_base_model", ",", "self", ".", "n_classes", "-", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "# self.bn1 = nn.BatchNorm2d(self.dout_base_model, momentum=0.01)", "\n", "# self.bn2 = nn.BatchNorm2d(self.n_classes-1, momentum=0.01)", "\n", "\n", "self", ".", "da_use_contex", "=", "da_use_contex", "\n", "if", "self", ".", "da_use_contex", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN.forward": [[53, 311], ["im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze", "faster_rcnn._fasterRCNN.RCNN_rpn.train", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_bbox_pred", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "cls_prob.view.view.view", "torch.gather.squeeze.view", "tgt_im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "faster_rcnn._fasterRCNN.RCNN_rpn.eval", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_cls_score().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach.argmax().detach", "faster_rcnn._fasterRCNN.RCNN_imageDA", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "consistency_prob.repeat.repeat.repeat", "faster_rcnn._fasterRCNN.consistency_loss", "faster_rcnn._fasterRCNN.RCNN_imageDA", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "faster_rcnn._fasterRCNN.RCNN_instanceDA", "range", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "tgt_consistency_prob.repeat.repeat.repeat", "faster_rcnn._fasterRCNN.consistency_loss", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "faster_rcnn._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN.RCNN_roi_align", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "model.utils.net_utils._affine_grid_gen", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "faster_rcnn._fasterRCNN.RCNN_roi_crop", "torch.softmax", "torch.softmax", "torch.softmax", "instance_sigmoid.size", "consistency_prob.repeat.repeat.detach", "len", "tgt_pre_label[].item", "torch.softmax", "torch.softmax", "torch.softmax", "tgt_instance_sigmoid.size", "tgt_consistency_prob.repeat.repeat.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "faster_rcnn._fasterRCNN.conv_lst().squeeze", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "faster_rcnn._fasterRCNN.conv_lst().squeeze().squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "faster_rcnn._fasterRCNN.RCNN_roi_align", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().detach.argmax", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "torch.exp().item", "target_weight.append", "target_weight.append", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor().cuda.detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "faster_rcnn._fasterRCNN.conv_lst", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.conv_lst().squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "faster_rcnn._fasterRCNN.avg_pool", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.conv_lst", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "faster_rcnn._fasterRCNN.avg_pool"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._smooth_l1_loss", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.utils.net_utils._affine_grid_gen"], ["            ", "if", "self", ".", "lc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "if", "self", ".", "gc", ":", "\n", "                ", "in_channel", "+=", "128", "\n", "", "", "self", ".", "RCNN_instanceDA", "=", "_InstanceDA", "(", "in_channel", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "im_data", ",", "\n", "im_info", ",", "\n", "im_cls_lb", ",", "\n", "gt_boxes", ",", "\n", "num_boxes", ",", "\n", "target", "=", "False", ",", "\n", "eta", "=", "1.0", ",", "\n", "weight_value", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "if", "target", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "need_backprop", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "RCNN_rpn", ".", "train", "(", ")", "\n", "\n", "", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "\n", "# feed image data to base model to obtain base feature map", "\n", "base_feat1", "=", "self", ".", "RCNN_base1", "(", "im_data", ")", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "d_pixel", ",", "_", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "# print(d_pixel)", "\n", "# if not target:", "\n", "if", "True", ":", "\n", "                ", "_", ",", "feat_pixel", "=", "self", ".", "netD_pixel", "(", "base_feat1", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "d_pixel", "=", "self", ".", "netD_pixel", "(", "grad_reverse", "(", "base_feat1", ",", "lambd", "=", "eta", ")", ")", "\n", "", "base_feat", "=", "self", ".", "RCNN_base2", "(", "base_feat1", ")", "\n", "if", "self", ".", "gc", ":", "\n", "            ", "domain_p", ",", "_", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#, diff", "\n", "_", ",", "feat", "=", "self", ".", "netD", "(", "base_feat", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "domain_p", "=", "self", ".", "netD", "(", "grad_reverse", "(", "base_feat", ",", "lambd", "=", "eta", ")", ")", "\n", "# if target:", "\n", "#     return d_pixel,domain_p#,diff", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "\n", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", "\n", ")", "\n", "# supervise base feature map with category level label", "\n", "cls_feat", "=", "self", ".", "avg_pool", "(", "base_feat", ")", "\n", "cls_feat", "=", "self", ".", "conv_lst", "(", "cls_feat", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# cls_feat = self.conv_lst(self.bn1(self.avg_pool(base_feat))).squeeze(-1).squeeze(-1)", "\n", "category_loss_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "cls_feat", ",", "im_cls_lb", ")", "\n", "\n", "# if it is training phrase, then use ground trubut bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "\n", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "\"align\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "\"pool\"", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "# feed pooled features to top model", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "instance_pooled_feat", "=", "pooled_feat", "\n", "# feat_pixel = torch.zeros(feat_pixel.size()).cuda()", "\n", "if", "self", ".", "lc", ":", "\n", "            ", "feat_pixel", "=", "feat_pixel", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat_pixel", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat_pixel", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "", "", "if", "self", ".", "gc", ":", "\n", "            ", "feat", "=", "feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "pooled_feat", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "pooled_feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "pooled_feat", ")", ",", "1", ")", "\n", "if", "self", ".", "da_use_contex", ":", "\n", "                ", "instance_pooled_feat", "=", "torch", ".", "cat", "(", "\n", "(", "feat", ".", "detach", "(", ")", ",", "instance_pooled_feat", ")", ",", "1", "\n", ")", "\n", "# compute bbox offset", "\n", "\n", "# compute object classification probability", "\n", "", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n", "# add instance da", "\n", "instance_sigmoid", ",", "same_size_label", "=", "self", ".", "RCNN_instanceDA", "(", "\n", "instance_pooled_feat", ",", "need_backprop", "\n", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "cls_pre_label", "=", "cls_prob", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "cls_feat_sig", "=", "F", ".", "sigmoid", "(", "cls_feat", "[", "0", "]", ")", ".", "detach", "(", ")", "\n", "target_weight", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cls_pre_label", ")", ")", ":", "\n", "                ", "label_i", "=", "cls_pre_label", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "label_i", ">", "0", ":", "\n", "                    ", "diff_value", "=", "torch", ".", "exp", "(", "\n", "weight_value", "\n", "*", "torch", ".", "abs", "(", "cls_feat_sig", "[", "label_i", "-", "1", "]", "-", "cls_prob", "[", "i", "]", "[", "label_i", "]", ")", "\n", ")", ".", "item", "(", ")", "\n", "target_weight", ".", "append", "(", "diff_value", ")", "\n", "", "else", ":", "\n", "                    ", "target_weight", ".", "append", "(", "1.0", ")", "\n", "\n", "", "", "instance_loss", "=", "nn", ".", "BCELoss", "(", "\n", "weight", "=", "torch", ".", "Tensor", "(", "target_weight", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "instance_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "", "DA_ins_loss_cls", "=", "instance_loss", "(", "instance_sigmoid", ",", "same_size_label", ")", "\n", "\n", "if", "target", ":", "\n", "            ", "return", "d_pixel", ",", "domain_p", ",", "DA_ins_loss_cls", "\n", "\n", "# compute bbox offset", "\n", "", "bbox_pred", "=", "self", ".", "RCNN_bbox_pred", "(", "pooled_feat", ")", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "class_agnostic", ":", "\n", "            ", "bbox_pred_view", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "int", "(", "bbox_pred", ".", "size", "(", "1", ")", "/", "4", ")", ",", "4", "\n", ")", "\n", "bbox_pred_select", "=", "torch", ".", "gather", "(", "\n", "bbox_pred_view", ",", "\n", "1", ",", "\n", "rois_label", ".", "view", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "\n", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "4", "\n", ")", ",", "\n", ")", "\n", "bbox_pred", "=", "bbox_pred_select", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "RCNN_loss_cls", "=", "0", "\n", "RCNN_loss_bbox", "=", "0", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# classification loss", "\n", "            ", "RCNN_loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "rois_label", ")", "\n", "\n", "# bounding box regression L1 loss", "\n", "RCNN_loss_bbox", "=", "_smooth_l1_loss", "(", "\n", "bbox_pred", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "\n", ")", "\n", "\n", "", "cls_prob", "=", "cls_prob", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "return", "(", "\n", "rois", ",", "\n", "cls_prob", ",", "\n", "bbox_pred", ",", "\n", "category_loss_cls", ",", "\n", "rpn_loss_cls", ",", "\n", "rpn_loss_bbox", ",", "\n", "RCNN_loss_cls", ",", "\n", "RCNN_loss_bbox", ",", "\n", "rois_label", ",", "\n", "d_pixel", ",", "\n", "domain_p", ",", "\n", "DA_ins_loss_cls", ",", "\n", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            weight initalizer: truncated normal and random normal.\n            \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_Conv", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_bbox_pred", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_bbox_pred", ",", "0", ",", "0.001", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "\n", "", "def", "create_architecture", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_modules", "(", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights": [[313, 338], ["faster_rcnn._fasterRCNN._init_weights.normal_init"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN.create_architecture": [[339, 342], ["faster_rcnn._fasterRCNN._init_modules", "faster_rcnn._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN._init_weights"], []], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.GRLayer.forward": [[17, 22], ["input.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "0.1", "\n", "\n", "return", "input", ".", "view_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.GRLayer.backward": [[23, 27], ["grad_outputs.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "output", "=", "grad_outputs", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA._ImageDA.__init__": [[34, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.da_faster_rcnn_instance_weight.LabelResizeLayer.ImageLabelResizeLayer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "_ImageDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "# feat layer          256*H*W for vgg16", "\n", "self", ".", "Conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "Conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "reLu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "LabelResizeLayer", "=", "ImageLabelResizeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA._ImageDA.forward": [[42, 48], ["DA.grad_reverse", "DA._ImageDA.reLu", "DA._ImageDA.Conv2", "DA._ImageDA.LabelResizeLayer", "DA._ImageDA.Conv1"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ")", "\n", "x", "=", "self", ".", "reLu", "(", "self", ".", "Conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "Conv2", "(", "x", ")", "\n", "label", "=", "self", ".", "LabelResizeLayer", "(", "x", ",", "need_backprop", ")", "\n", "return", "x", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA._InstanceDA.__init__": [[51, 63], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "model.da_faster_rcnn_instance_weight.LabelResizeLayer.InstanceLabelResizeLayer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channle", "=", "4096", ")", ":", "\n", "        ", "super", "(", "_InstanceDA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dc_ip1", "=", "nn", ".", "Linear", "(", "in_channle", ",", "1024", ")", "\n", "self", ".", "dc_relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dc_drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "dc_ip2", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "dc_relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dc_drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "clssifer", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ")", "\n", "self", ".", "LabelResizeLayer", "=", "InstanceLabelResizeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA._InstanceDA.forward": [[64, 71], ["DA.grad_reverse", "DA._InstanceDA.dc_drop1", "DA._InstanceDA.dc_drop2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "DA._InstanceDA.LabelResizeLayer", "DA._InstanceDA.dc_relu1", "DA._InstanceDA.dc_relu2", "DA._InstanceDA.clssifer", "DA._InstanceDA.dc_ip1", "DA._InstanceDA.dc_ip2"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "need_backprop", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ")", "\n", "x", "=", "self", ".", "dc_drop1", "(", "self", ".", "dc_relu1", "(", "self", ".", "dc_ip1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dc_drop2", "(", "self", ".", "dc_relu2", "(", "self", ".", "dc_ip2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "sigmoid", "(", "self", ".", "clssifer", "(", "x", ")", ")", "\n", "label", "=", "self", ".", "LabelResizeLayer", "(", "x", ",", "need_backprop", ")", "\n", "return", "x", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.DA.grad_reverse": [[29, 31], ["GRLayer.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GRLayer", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.BasicBlock.__init__": [[36, 45], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3"], [")", "\n", "\n", "\n", "", "class", "netD_pixel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "context", "=", "context", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.BasicBlock.forward": [[46, 63], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["self", ".", "_init_weights", "(", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n        weight initalizer: truncated normal and random normal.\n        \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "\n", "mean", "\n", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "# m.bias.data.zero_()", "\n", "\n", "", "", "normal_init", "(", "self", ".", "conv1", ",", "0", ",", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv2", ",", "0", ",", "0.01", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.Bottleneck.__init__": [[68, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", ",", "feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n", "\n", "", "", "", "class", "netD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "context", "=", "False", ")", ":", "\n", "        ", "super", "(", "netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "1024", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "512", ",", "128", ",", "stride", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.Bottleneck.forward": [[84, 105], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "feat", "=", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "context", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet.__init__": [[108, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer"], ["        ", "super", "(", "netD_dc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "100", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "100", ",", "100", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "100", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet._make_layer": [[134, 155], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.ResNet.forward": [[156, 172], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "# change", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.__init__": [[230, 238], ["model.da_faster_rcnn_instance_weight.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__"], ["kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._init_modules": [[239, 293], ["resnet.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base.apply", "resnet101.resnet.RCNN_top.apply", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet101.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet101.state_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101"], ["self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train": [[294, 310], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet.resnet.RCNN_base.eval", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base.apply", "resnet.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet.train"], ["\n", "\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n    pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet._head_to_tail": [[311, 314], ["resnet.resnet.RCNN_top().mean().mean", "resnet.resnet.RCNN_top().mean", "resnet.resnet.RCNN_top"], "methods", ["None"], ["\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet18": [[174, 183], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet34": [[185, 194], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet50": [[196, 205], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", "\n", ")", "# change", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet101": [[207, 216], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.da_faster_rcnn_instance_weight.resnet.resnet152": [[218, 227], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes": [[11, 17], ["numpy.array", "numpy.round().dot", "numpy.unique", "numpy.sort", "numpy.round"], "function", ["None"], ["def", "unique_boxes", "(", "boxes", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Return indices of unique boxes.\"\"\"", "\n", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "boxes", "*", "scale", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ")", "\n", "return", "np", ".", "sort", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.xywh_to_xyxy": [[19, 22], ["numpy.hstack"], "function", ["None"], ["", "def", "xywh_to_xyxy", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Convert [x y w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.xyxy_to_xywh": [[24, 27], ["numpy.hstack"], "function", ["None"], ["", "def", "xyxy_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x y w h] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes": [[29, 41], ["None"], "function", ["None"], ["", "def", "validate_boxes", "(", "boxes", ",", "width", "=", "0", ",", "height", "=", "0", ")", ":", "\n", "    ", "\"\"\"Check that a set of boxes are valid.\"\"\"", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "assert", "(", "x1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "y1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", ">=", "x1", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", ">=", "y1", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", "<", "width", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", "<", "height", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes": [[43, 48], ["numpy.where"], "function", ["None"], ["", "def", "filter_small_boxes", "(", "boxes", ",", "min_size", ")", ":", "\n", "    ", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "keep", "=", "np", ".", "where", "(", "(", "w", ">=", "min_size", ")", "&", "(", "h", ">", "min_size", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.__init__": [[29, 85], ["datasets.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc_rbg.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "pascal_voc_rbg.pascal_voc._get_default_path", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_default_path"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"voc_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", ")", "\n", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"aeroplane\"", ",", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"boat\"", ",", "\n", "\"bottle\"", ",", "\n", "\"bus\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"chair\"", ",", "\n", "\"cow\"", ",", "\n", "\"diningtable\"", ",", "\n", "\"dog\"", ",", "\n", "\"horse\"", ",", "\n", "\"motorbike\"", ",", "\n", "\"person\"", ",", "\n", "\"pottedplant\"", ",", "\n", "\"sheep\"", ",", "\n", "\"sofa\"", ",", "\n", "\"train\"", ",", "\n", "\"tvmonitor\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.image_path_at": [[87, 92], ["pascal_voc_rbg.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.image_path_from_index": [[93, 102], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._load_image_set_index": [[103, 119], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._get_default_path": [[120, 125], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"VOCdevkit\"", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.gt_roidb": [[126, 148], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc_rbg.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "try", ":", "\n", "                    ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "                    ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "\"bytes\"", ")", "\n", "", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.rpn_roidb": [[149, 158], ["pascal_voc_rbg.pascal_voc.gt_roidb", "pascal_voc_rbg.pascal_voc._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "pascal_voc_rbg.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._load_rpn_roidb": [[159, 166], ["print", "os.path.exists", "pascal_voc_rbg.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._load_pascal_annotation": [[167, 214], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.lower().strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "if", "not", "self", ".", "config", "[", "\"use_diff\"", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "            ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "==", "0", "\n", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._get_comp_id": [[216, 223], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._get_voc_results_file_template": [[224, 231], ["os.path.join", "pascal_voc_rbg.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ",", "filename", "\n", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._write_voc_results_file": [[232, 253], ["enumerate", "print", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._do_python_eval": [[256, 305], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc._do_matlab_eval": [[306, 319], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc_rbg.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.evaluate_detections": [[320, 332], ["pdb.set_trace", "pascal_voc_rbg.pascal_voc._write_voc_results_file", "pascal_voc_rbg.pascal_voc._do_python_eval", "pascal_voc_rbg.pascal_voc._do_matlab_eval", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc_rbg.pascal_voc.competition_mode": [[333, 340], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.__init__": [[28, 69], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "coco.coco._COCO.loadCats", "tuple", "dict", "dict", "coco.coco._load_image_set_index", "coco.coco.set_proposal_method", "coco.coco.competition_mode", "coco.coco._get_ann_file", "coco.coco._COCO.getCatIds", "list", "list", "zip", "zip", "list", "coco.coco._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"coco_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "\"use_salt\"", ":", "True", ",", "\"cleanup\"", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"coco\"", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "\"__background__\"", "]", "+", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "\n", "list", "(", "zip", "(", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ",", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "\"gt\"", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "\"minival2014\"", ":", "\"val2014\"", ",", "# 5k val2014 subset", "\n", "\"valminusminival2014\"", ":", "\"val2014\"", ",", "# val2014 \\setminus minival2014", "\n", "\"test-dev2015\"", ":", "\"test2015\"", ",", "\n", "\"valminuscapval2014\"", ":", "\"val2014\"", ",", "\n", "\"capval2014\"", ":", "\"val2014\"", ",", "\n", "\"captest2014\"", ":", "\"val2014\"", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "\n", "self", ".", "_view_map", "[", "coco_name", "]", "if", "coco_name", "in", "self", ".", "_view_map", "else", "coco_name", "\n", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"minival\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._get_ann_file": [[70, 76], ["os.join", "os.join", "coco.coco._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "\"instances\"", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", "else", "\"image_info\"", "\n", "return", "osp", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\n", "\"annotations\"", ",", "\n", "prefix", "+", "\"_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\".json\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._load_image_set_index": [[78, 84], ["coco.coco._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._get_widths": [[196, 198], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "r", "[", "\"width\"", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.image_path_at": [[90, 95], ["coco.coco.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.image_id_at": [[96, 101], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.image_path_from_index": [[102, 113], ["os.join", "os.join", "os.exists", "os.exists", "str().zfill", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".jpg\"", "\n", "# image_path = osp.join(self._data_path, \"images\", self._data_name, file_name)", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.gt_roidb": [[114, 132], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "coco.coco._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._load_coco_annotation": [[133, 194], ["coco.coco._COCO.getAnnIds", "coco.coco._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "coco.coco._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "\"width\"", "]", "\n", "height", "=", "im_ann", "[", "\"height\"", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "\"area\"", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "\"clean_bbox\"", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "\"clean_bbox\"", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "\"area\"", "]", "\n", "if", "obj", "[", "\"iscrowd\"", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.append_flipped_images": [[199, 221], ["coco.coco._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "coco.coco.roidb.append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"width\"", ":", "widths", "[", "i", "]", ",", "\n", "\"height\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "\"seg_areas\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._get_box_file": [[222, 227], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "        ", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".mat\"", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._print_detection_eval_metrics": [[228, 266], ["coco.coco._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "\n", "&", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\n", "(", "\"~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] \"", "\"~~~~\"", ")", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", "\n", ")", "\n", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "\n", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "\"~~~~ Summary metrics ~~~~\"", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._do_detection_eval": [[267, 279], ["coco.coco._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "coco.coco._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "        ", "ann_type", "=", "\"bbox\"", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "ann_type", "==", "\"segm\"", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "\"detection_results.pkl\"", ")", "\n", "with", "open", "(", "eval_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"Wrote COCO eval results to: {}\"", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._coco_results_one_category": [[280, 303], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "            ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "index", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"bbox\"", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco._write_coco_results_file": [[304, 325], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "coco.coco._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "        ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\n", "\"Collecting {} results ({:d}/{:d})\"", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "self", ".", "num_classes", "-", "1", "\n", ")", "\n", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "\n", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "coco_cat_id", ")", "\n", ")", "\n", "", "print", "(", "\"Writing results json to {}\"", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.evaluate_detections": [[326, 340], ["os.join", "os.join", "coco.coco._write_coco_results_file", "coco.coco._image_set.find", "coco.coco._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "res_file", "=", "osp", ".", "join", "(", "\n", "output_dir", ",", "(", "\"detections_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\"_results\"", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", ":", "\n", "            ", "res_file", "+=", "\"_{}\"", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "\".json\"", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", ":", "\n", "            ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.coco.coco.competition_mode": [[341, 348], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.parse_rec": [[15, 35], ["xml.parse", "ET.parse.findall", "int", "int", "obj.find", "objects.append", "obj.find", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_rec", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Parse a PASCAL VOC xml file \"\"\"", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "\"object\"", ")", ":", "\n", "        ", "obj_struct", "=", "{", "}", "\n", "obj_struct", "[", "\"name\"", "]", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", "\n", "obj_struct", "[", "\"pose\"", "]", "=", "obj", ".", "find", "(", "\"pose\"", ")", ".", "text", "\n", "obj_struct", "[", "\"truncated\"", "]", "=", "int", "(", "obj", ".", "find", "(", "\"truncated\"", ")", ".", "text", ")", "\n", "obj_struct", "[", "\"difficult\"", "]", "=", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "obj_struct", "[", "\"bbox\"", "]", "=", "[", "\n", "int", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", ",", "\n", "]", "\n", "objects", ".", "append", "(", "obj_struct", ")", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_ap": [[37, 69], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n  Compute VOC AP given precision and recall.\n  If use_07_metric is true, uses the\n  VOC 07 11 point method (default:False).\n  \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.0", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.0", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "rec", ",", "[", "1.0", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "prec", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval": [[71, 214], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "print", "numpy.array", "numpy.array().astype", "open", "f.readlines", "x.strip().split", "numpy.argsort", "numpy.sort", "range", "float", "numpy.maximum", "voc_eval.parse_rec", "open", "pickle.dump", "open", "len", "sum", "float", "BB[].astype", "R[].astype", "annopath.format", "print", "pickle.load", "numpy.array", "x.strip", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.finfo", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_ap", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.parse_rec"], ["", "def", "voc_eval", "(", "\n", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap = voc_eval(detpath,\n                              annopath,\n                              imagesetfile,\n                              classname,\n                              [ovthresh],\n                              [use_07_metric])\n\n  Top level function that does the PASCAL VOC evaluation.\n\n  detpath: Path to detections\n      detpath.format(classname) should produce the detection results file.\n  annopath: Path to annotations\n      annopath.format(imagename) should be the xml annotations file.\n  imagesetfile: Text file containing the list of images, one image per line.\n  classname: Category name (duh)\n  cachedir: Directory for caching the annotations\n  [ovthresh]: Overlap threshold (default = 0.5)\n  [use_07_metric]: Whether to use VOC07's 11 point AP computation\n      (default False)\n  \"\"\"", "\n", "# assumes detections are in detpath.format(classname)", "\n", "# assumes annotations are in annopath.format(imagename)", "\n", "# assumes imagesetfile is a text file with each line an image name", "\n", "# cachedir caches the annotations in a pickle file", "\n", "\n", "# first load gt", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "\"%s_annots.pkl\"", "%", "imagesetfile", ")", "\n", "# read list of images", "\n", "with", "open", "(", "imagesetfile", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annotations", "\n", "        ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "            ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "\"Reading annotation for {:d}/{:d}\"", ".", "format", "(", "i", "+", "1", ",", "len", "(", "imagenames", ")", ")", ")", "\n", "# save", "\n", "", "", "print", "(", "\"Saving cached annotations to {:s}\"", ".", "format", "(", "cachefile", ")", ")", "\n", "with", "open", "(", "cachefile", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "        ", "with", "open", "(", "cachefile", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"bytes\"", ")", "\n", "\n", "# extract gt objects for this class", "\n", "", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "        ", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "\"name\"", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "\"bbox\"", "]", "for", "x", "in", "R", "]", ")", "\n", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "\"difficult\"", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "\"bbox\"", ":", "bbox", ",", "\"difficult\"", ":", "difficult", ",", "\"det\"", ":", "det", "}", "\n", "\n", "# read dets", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "if", "BB", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# sort by confidence", "\n", "        ", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "            ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "\"bbox\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "                ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.0", ",", "0.0", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.0", ",", "0.0", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "\n", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.0", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.0", ")", "\n", "+", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "-", "inters", "\n", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "                ", "if", "not", "R", "[", "\"difficult\"", "]", "[", "jmax", "]", ":", "\n", "                    ", "if", "not", "R", "[", "\"det\"", "]", "[", "jmax", "]", ":", "\n", "                        ", "tp", "[", "d", "]", "=", "1.0", "\n", "R", "[", "\"det\"", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "d", "]", "=", "1.0", "\n", "", "", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.__init__": [[32, 131], ["datasets.imdb.imdb.__init__", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "os.path.join", "os.path.join", "vg.vg._load_image_set_index", "os.path.join", "vg.vg._classes.append", "os.path.join", "vg.vg._attributes.append", "os.path.join", "vg.vg._relations.append", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.dump", "n.lower().strip", "n.lower().strip", "n.lower().strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "object.split", "att.split", "rel.split", "n.lower", "n.lower", "n.lower"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "version", ",", "image_set", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"vg_\"", "+", "version", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_version", "=", "version", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"genome\"", ")", "\n", "self", ".", "_img_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"vg\"", ")", "\n", "# VG specific config options", "\n", "self", ".", "config", "=", "{", "\"cleanup\"", ":", "False", "}", "\n", "\n", "# Load classes", "\n", "self", ".", "_classes", "=", "[", "\"__background__\"", "]", "\n", "self", ".", "_class_to_ind", "=", "{", "}", "\n", "self", ".", "_class_to_ind", "[", "self", ".", "_classes", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "\"objects_vocab.txt\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "object", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "object", ".", "split", "(", "\",\"", ")", "]", "\n", "self", ".", "_classes", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "                    ", "self", ".", "_class_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "# Load attributes", "\n", "", "", "self", ".", "_attributes", "=", "[", "\"__no_attribute__\"", "]", "\n", "self", ".", "_attribute_to_ind", "=", "{", "}", "\n", "self", ".", "_attribute_to_ind", "[", "self", ".", "_attributes", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "\"attributes_vocab.txt\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "att", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "att", ".", "split", "(", "\",\"", ")", "]", "\n", "self", ".", "_attributes", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "                    ", "self", ".", "_attribute_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "# Load relations", "\n", "", "", "self", ".", "_relations", "=", "[", "\"__no_relation__\"", "]", "\n", "self", ".", "_relation_to_ind", "=", "{", "}", "\n", "self", ".", "_relation_to_ind", "[", "self", ".", "_relations", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "\"relations_vocab.txt\"", ")", "\n", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "rel", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "rel", ".", "split", "(", "\",\"", ")", "]", "\n", "self", ".", "_relations", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "                    ", "self", ".", "_relation_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "", "", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "load_index_from_file", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", "\n", ")", ":", "\n", "            ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_image_index", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "load_index_from_file", "=", "True", "\n", "\n", "", "load_id_from_file", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", "\n", ")", ":", "\n", "            ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_id_to_dir", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "load_id_from_file", "=", "True", "\n", "\n", "", "if", "not", "load_index_from_file", "or", "not", "load_id_from_file", ":", "\n", "            ", "self", ".", "_image_index", ",", "self", ".", "_id_to_dir", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "_image_index", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", "\n", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "_id_to_dir", ",", "fp", ")", "\n", "\n", "", "", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.image_path_at": [[132, 137], ["vg.vg.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.image_id_at": [[138, 143], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "# return self._image_index[i]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.image_path_from_index": [[145, 153], ["os.path.join", "os.path.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "folder", "=", "self", ".", "_id_to_dir", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_img_path", ",", "folder", ",", "str", "(", "index", ")", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._image_split_path": [[154, 165], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_image_split_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_image_set", "==", "\"minitrain\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"train.txt\"", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"smalltrain\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"train.txt\"", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"minival\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"val.txt\"", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"smallval\"", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"val.txt\"", ")", "\n", "", "else", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_image_set", "+", "\".txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._load_image_set_index": [[166, 204], ["vg.vg._image_split_path", "os.path.exists", "open", "f.readlines", "line.split", "int", "vg.vg._annotation_path", "os.path.exists", "xml.parse", "xml.parse.findall", "[].split", "obj.find().text.lower().strip", "image_index.append", "obj.find().text.lower", "im_file.split", "ann_file.split", "obj.find"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._image_split_path", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._annotation_path"], ["", "", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "training_split_file", "=", "self", ".", "_image_split_path", "(", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "training_split_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "training_split_file", "\n", ")", "\n", "with", "open", "(", "training_split_file", ")", "as", "f", ":", "\n", "            ", "metadata", "=", "f", ".", "readlines", "(", ")", "\n", "if", "self", ".", "_image_set", "==", "\"minitrain\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "1000", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"smalltrain\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "20000", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"minival\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "100", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"smallval\"", ":", "\n", "                ", "metadata", "=", "metadata", "[", ":", "2000", "]", "\n", "\n", "", "", "image_index", "=", "[", "]", "\n", "id_to_dir", "=", "{", "}", "\n", "for", "line", "in", "metadata", ":", "\n", "            ", "im_file", ",", "ann_file", "=", "line", ".", "split", "(", ")", "\n", "image_id", "=", "int", "(", "ann_file", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "filename", "=", "self", ".", "_annotation_path", "(", "image_id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "# Some images have no bboxes after object filtering, so there", "\n", "# is no xml annotation for these.", "\n", "                ", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "\"object\"", ")", ":", "\n", "                    ", "obj_name", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "_class_to_ind", ":", "\n", "# We have to actually load and check these to make sure they have", "\n", "# at least one object actually in vocab", "\n", "                        ", "image_index", ".", "append", "(", "image_id", ")", "\n", "id_to_dir", "[", "image_id", "]", "=", "im_file", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "break", "\n", "", "", "", "", "return", "image_index", ",", "id_to_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.gt_roidb": [[205, 225], ["os.path.join", "os.path.exists", "gzip.open", "pickle.dump", "gzip.open.close", "print", "gzip.open", "pickle.load", "gzip.open.close", "print", "vg.vg._load_vg_annotation"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._load_vg_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "fid", "=", "gzip", ".", "open", "(", "cache_file", ",", "\"rb\"", ")", "\n", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "fid", ".", "close", "(", ")", "\n", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_vg_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "fid", "=", "gzip", ".", "open", "(", "cache_file", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "fid", ".", "close", "(", ")", "\n", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_size": [[226, 228], ["PIL.Image.open", "vg.vg.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "_get_size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_from_index", "(", "index", ")", ")", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._annotation_path": [[229, 231], ["os.path.join", "str"], "methods", ["None"], ["", "def", "_annotation_path", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"xml\"", ",", "str", "(", "index", ")", "+", "\".xml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._load_vg_annotation": [[232, 320], ["vg.vg._get_size", "vg.vg._annotation_path", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "xml.parse.findall", "len", "set", "numpy.array", "obj.find().text.lower().strip", "list", "obj.find", "max", "max", "min", "min", "obj.findall", "rel.find", "pred.lower().strip.lower().strip.lower().strip", "obj.find().text.lower", "float", "float", "float", "float", "print", "att.text.lower().strip.text.lower().strip.text.lower().strip", "pred.lower().strip.lower().strip.lower", "triple.append", "triple.append", "triple.append", "numpy.array.add", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find", "att.text.lower().strip.text.lower().strip.text.lower", "tuple", "obj.find", "rel.find", "rel.find"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_size", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._annotation_path"], ["", "def", "_load_vg_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "width", ",", "height", "=", "self", ".", "_get_size", "(", "index", ")", "\n", "filename", "=", "self", ".", "_annotation_path", "(", "index", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Max of 16 attributes are observed in the data", "\n", "gt_attributes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "16", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "obj_dict", "=", "{", "}", "\n", "ix", "=", "0", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "obj_name", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "_class_to_ind", ":", "\n", "                ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "x1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", ")", "\n", "x2", "=", "min", "(", "width", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", ")", "\n", "y2", "=", "min", "(", "height", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", ")", "\n", "# If bboxes are not positive, just give whole image coords (there are a few examples)", "\n", "if", "x2", "<", "x1", "or", "y2", "<", "y1", ":", "\n", "                    ", "print", "(", "\"Failed bbox in %s, object %s\"", "%", "(", "filename", ",", "obj_name", ")", ")", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "width", "-", "1", "\n", "y2", "=", "width", "-", "1", "\n", "", "cls", "=", "self", ".", "_class_to_ind", "[", "obj_name", "]", "\n", "obj_dict", "[", "obj", ".", "find", "(", "\"object_id\"", ")", ".", "text", "]", "=", "ix", "\n", "atts", "=", "obj", ".", "findall", "(", "\"attribute\"", ")", "\n", "n", "=", "0", "\n", "for", "att", "in", "atts", ":", "\n", "                    ", "att", "=", "att", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "att", "in", "self", ".", "_attribute_to_ind", ":", "\n", "                        ", "gt_attributes", "[", "ix", ",", "n", "]", "=", "self", ".", "_attribute_to_ind", "[", "att", "]", "\n", "n", "+=", "1", "\n", "", "if", "n", ">=", "16", ":", "\n", "                        ", "break", "\n", "", "", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "ix", "+=", "1", "\n", "# clip gt_classes and gt_relations", "\n", "", "", "gt_classes", "=", "gt_classes", "[", ":", "ix", "]", "\n", "gt_attributes", "=", "gt_attributes", "[", ":", "ix", ",", ":", "]", "\n", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "gt_attributes", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "gt_attributes", ")", "\n", "\n", "rels", "=", "tree", ".", "findall", "(", "\"relation\"", ")", "\n", "num_rels", "=", "len", "(", "rels", ")", "\n", "gt_relations", "=", "set", "(", ")", "# Avoid duplicates", "\n", "for", "rel", "in", "rels", ":", "\n", "            ", "pred", "=", "rel", ".", "find", "(", "\"predicate\"", ")", ".", "text", "\n", "if", "pred", ":", "# One is empty", "\n", "                ", "pred", "=", "pred", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "pred", "in", "self", ".", "_relation_to_ind", ":", "\n", "                    ", "try", ":", "\n", "                        ", "triple", "=", "[", "]", "\n", "triple", ".", "append", "(", "obj_dict", "[", "rel", ".", "find", "(", "\"subject_id\"", ")", ".", "text", "]", ")", "\n", "triple", ".", "append", "(", "self", ".", "_relation_to_ind", "[", "pred", "]", ")", "\n", "triple", ".", "append", "(", "obj_dict", "[", "rel", ".", "find", "(", "\"object_id\"", ")", ".", "text", "]", ")", "\n", "gt_relations", ".", "add", "(", "tuple", "(", "triple", ")", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "# Object not in dictionary", "\n", "", "", "", "", "gt_relations", "=", "np", ".", "array", "(", "list", "(", "gt_relations", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_attributes\"", ":", "gt_attributes", ",", "\n", "\"gt_relations\"", ":", "gt_relations", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.evaluate_detections": [[322, 331], ["vg.vg._write_voc_results_file", "vg.vg._do_python_eval", "vg.vg._get_vg_results_file_template().format", "os.remove", "vg.vg._get_vg_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "self", ".", "classes", ",", "all_boxes", ",", "output_dir", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg.evaluate_attributes": [[332, 341], ["vg.vg._write_voc_results_file", "vg.vg._do_python_eval", "vg.vg._get_vg_results_file_template().format", "os.remove", "vg.vg._get_vg_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "", "", "def", "evaluate_attributes", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "self", ".", "attributes", ",", "all_boxes", ",", "output_dir", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ",", "eval_attributes", "=", "True", ")", "\n", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_attributes", ":", "\n", "                ", "if", "cls", "==", "\"__no_attribute__\"", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template": [[342, 346], ["os.path.join"], "methods", ["None"], ["", "", "", "def", "_get_vg_results_file_template", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "filename", "=", "\"detections_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._write_voc_results_file": [[347, 368], ["enumerate", "print", "vg.vg._get_vg_results_file_template().format", "open", "enumerate", "vg.vg._get_vg_results_file_template", "xrange", "f.write", "str"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "classes", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'Writing \"{}\" vg results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "str", "(", "index", ")", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._do_python_eval": [[371, 451], ["print", "vg.vg.gt_roidb", "enumerate", "numpy.array", "numpy.mean", "os.path.join", "numpy.array", "numpy.array.sum", "print", "print", "print", "print", "print", "zip", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "vg.vg._get_vg_results_file_template().format", "vg_eval.vg_eval.vg_eval", "print", "open", "enumerate", "print", "numpy.nan_to_num", "float", "numpy.nan_to_num.write", "numpy.mean", "numpy.average", "numpy.mean", "vg.vg._get_vg_results_file_template", "open", "pickle.dump", "os.path.join", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg_eval.vg_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg.vg._get_vg_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", ",", "pickle", "=", "True", ",", "eval_attributes", "=", "False", ")", ":", "\n", "# We re-use parts of the pascal voc python code for visual genome", "\n", "        ", "aps", "=", "[", "]", "\n", "nposs", "=", "[", "]", "\n", "thresh", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "# Load ground truth", "\n", "", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "if", "eval_attributes", ":", "\n", "            ", "classes", "=", "self", ".", "_attributes", "\n", "", "else", ":", "\n", "            ", "classes", "=", "self", ".", "_classes", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", "or", "cls", "==", "\"__no_attribute__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", ",", "scores", ",", "npos", "=", "vg_eval", "(", "\n", "filename", ",", "\n", "gt_roidb", ",", "\n", "self", ".", "image_index", ",", "\n", "i", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", "eval_attributes", "=", "eval_attributes", ",", "\n", ")", "\n", "\n", "# Determine per class detection thresholds that maximise f score", "\n", "if", "npos", ">", "1", ":", "\n", "                ", "f", "=", "np", ".", "nan_to_num", "(", "(", "prec", "*", "rec", ")", "/", "(", "prec", "+", "rec", ")", ")", "\n", "thresh", "+=", "[", "scores", "[", "np", ".", "argmax", "(", "f", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "thresh", "+=", "[", "0", "]", "\n", "", "aps", "+=", "[", "ap", "]", "\n", "nposs", "+=", "[", "float", "(", "npos", ")", "]", "\n", "print", "(", "\"AP for {} = {:.4f} (npos={:,})\"", ".", "format", "(", "cls", ",", "ap", ",", "npos", ")", ")", "\n", "if", "pickle", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "\n", "{", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"prec\"", ":", "prec", ",", "\n", "\"ap\"", ":", "ap", ",", "\n", "\"scores\"", ":", "scores", ",", "\n", "\"npos\"", ":", "npos", ",", "\n", "}", ",", "\n", "f", ",", "\n", ")", "\n", "\n", "# Set thresh to mean for classes with poor results", "\n", "", "", "", "thresh", "=", "np", ".", "array", "(", "thresh", ")", "\n", "avg_thresh", "=", "np", ".", "mean", "(", "thresh", "[", "thresh", "!=", "0", "]", ")", "\n", "thresh", "[", "thresh", "==", "0", "]", "=", "avg_thresh", "\n", "if", "eval_attributes", ":", "\n", "            ", "filename", "=", "\"attribute_thresholds_\"", "+", "self", ".", "_image_set", "+", "\".txt\"", "\n", "", "else", ":", "\n", "            ", "filename", "=", "\"object_thresholds_\"", "+", "self", ".", "_image_set", "+", "\".txt\"", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "with", "open", "(", "path", ",", "\"wt\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", "[", "1", ":", "]", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"{:s} {:.3f}\\n\"", ".", "format", "(", "cls", ",", "thresh", "[", "i", "]", ")", ")", "\n", "\n", "", "", "weights", "=", "np", ".", "array", "(", "nposs", ")", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "\n", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"Weighted Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "average", "(", "aps", ",", "weights", "=", "weights", ")", ")", ")", "\n", "print", "(", "\"Mean Detection Threshold = {:.3f}\"", ".", "format", "(", "avg_thresh", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", ",", "npos", "in", "zip", "(", "aps", ",", "nposs", ")", ":", "\n", "            ", "print", "(", "\"{:.3f}\\t{:.3f}\"", ".", "format", "(", "ap", ",", "npos", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** PASCAL VOC Python eval code.\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.vg_eval.vg_eval": [[14, 132], ["zip", "numpy.array", "numpy.array", "numpy.argsort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "numpy.zeros().astype", "open", "f.readlines", "len", "x.strip().split", "numpy.sort", "BB[].astype", "R[].astype", "float", "numpy.maximum", "sum", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.zeros", "str", "x.strip", "float", "numpy.finfo", "numpy.where", "numpy.where", "numpy.any", "item[].toarray"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_ap"], ["def", "vg_eval", "(", "\n", "detpath", ",", "\n", "gt_roidb", ",", "\n", "image_index", ",", "\n", "classindex", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", "eval_attributes", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap, sorted_scores, npos = voc_eval(\n                                detpath, \n                                gt_roidb,\n                                image_index,\n                                classindex,\n                                [ovthresh],\n                                [use_07_metric])\n\n    Top level function that does the Visual Genome evaluation.\n\n    detpath: Path to detections\n    gt_roidb: List of ground truth structs.\n    image_index: List of image ids.\n    classindex: Category index\n    [ovthresh]: Overlap threshold (default = 0.5)\n    [use_07_metric]: Whether to use VOC07's 11 point AP computation\n        (default False)\n    \"\"\"", "\n", "# extract gt objects for this class", "\n", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "item", ",", "imagename", "in", "zip", "(", "gt_roidb", ",", "image_index", ")", ":", "\n", "        ", "if", "eval_attributes", ":", "\n", "            ", "bbox", "=", "item", "[", "\"boxes\"", "]", "[", "\n", "np", ".", "where", "(", "np", ".", "any", "(", "item", "[", "\"gt_attributes\"", "]", ".", "toarray", "(", ")", "==", "classindex", ",", "axis", "=", "1", ")", ")", "[", "\n", "0", "\n", "]", ",", "\n", ":", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "item", "[", "\"boxes\"", "]", "[", "np", ".", "where", "(", "item", "[", "\"gt_classes\"", "]", "==", "classindex", ")", "[", "0", "]", ",", ":", "]", "\n", "", "difficult", "=", "np", ".", "zeros", "(", "(", "bbox", ".", "shape", "[", "0", "]", ",", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "bbox", ".", "shape", "[", "0", "]", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "str", "(", "imagename", ")", "]", "=", "{", "\"bbox\"", ":", "bbox", ",", "\"difficult\"", ":", "difficult", ",", "\"det\"", ":", "det", "}", "\n", "", "if", "npos", "==", "0", ":", "\n", "# No ground truth examples", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "npos", "\n", "\n", "# read dets", "\n", "", "with", "open", "(", "detpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "lines", ")", "==", "0", ":", "\n", "# No detection examples", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "npos", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "-", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "\"bbox\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.0", ",", "0.0", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.0", ",", "0.0", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "\n", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.0", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.0", ")", "\n", "+", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "-", "inters", "\n", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "\"difficult\"", "]", "[", "jmax", "]", ":", "\n", "                ", "if", "not", "R", "[", "\"det\"", "]", "[", "jmax", "]", ":", "\n", "                    ", "tp", "[", "d", "]", "=", "1.0", "\n", "R", "[", "\"det\"", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1.0", "\n", "", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", ",", "sorted_scores", ",", "npos", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.__init__": [[24, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "classes", "=", "None", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_num_classes", "=", "0", "\n", "if", "not", "classes", ":", "\n", "            ", "self", ".", "_classes", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_classes", "=", "classes", "\n", "", "self", ".", "_image_index", "=", "[", "]", "\n", "self", ".", "_obj_proposer", "=", "\"gt\"", "\n", "self", ".", "_roidb", "=", "None", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "default_roidb", "\n", "# Use this dict for storing dataset specific config options", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.name": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.num_classes": [[42, 45], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.classes": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.image_index": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.roidb_handler": [[58, 61], ["None"], "methods", ["None"], ["", "@", "roidb_handler", ".", "setter", "\n", "def", "roidb_handler", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_roidb_handler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method": [[62, 65], ["eval"], "methods", ["None"], ["", "def", "set_proposal_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "method", "=", "eval", "(", "\"self.\"", "+", "method", "+", "\"_roidb\"", ")", "\n", "self", ".", "roidb_handler", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.roidb": [[66, 77], ["imdb.imdb.roidb_handler"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.roidb_handler"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "# A roidb is a list of dictionaries, each with the following keys:", "\n", "#   boxes", "\n", "#   gt_overlaps", "\n", "#   gt_classes", "\n", "#   flipped", "\n", "        ", "if", "self", ".", "_roidb", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_roidb", "\n", "", "self", ".", "_roidb", "=", "self", ".", "roidb_handler", "(", ")", "\n", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.cache_path": [[78, 84], ["os.abspath", "os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "        ", "cache_path", "=", "osp", ".", "abspath", "(", "\n", "osp", ".", "join", "(", "\"/data/experiments/domain-adaptation\"", ",", "\"cache\"", ")", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_path", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.num_images": [[85, 88], ["len"], "methods", ["None"], ["", "return", "cache_path", "\n", "\n", "", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.image_path_at": [[89, 91], ["None"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n", "", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.image_id_at": [[92, 94], ["None"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.default_roidb": [[95, 97], ["None"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "default_roidb", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.evaluate_detections": [[98, 108], ["None"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n    all_boxes is a list of length number-of-classes.\n    Each list element is a list of length number-of-images.\n    Each of those list elements is either an empty list []\n    or a numpy array of detection.\n\n    all_boxes[class][image] = [] or np.array of shape #dets x 5\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb._get_widths": [[109, 113], ["range", "PIL.Image.open", "imdb.imdb.image_path_at"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.append_flipped_images": [[115, 138], ["imdb.imdb._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "range", "imdb.imdb.roidb.append", "len"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["]", "\n", "\n", "", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "##modified", "\n", "for", "b", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "                ", "if", "boxes", "[", "b", "]", "[", "2", "]", "<", "boxes", "[", "b", "]", "[", "0", "]", ":", "\n", "                    ", "boxes", "[", "b", "]", "[", "0", "]", "=", "0", "\n", "\n", "", "", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list": [[229, 261], ["range", "len", "numpy.zeros", "scipy.sparse.csr_matrix", "roidb.append", "bbox_overlaps", "bbox_overlaps.argmax", "bbox_overlaps.max", "boxes.astype", "gt_boxes.astype", "numpy.where", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.bbox_transform.bbox_overlaps"], ["#           'gt_overlaps': gt_overlaps}", "\n", "\n", "", "def", "create_roidb_from_box_list", "(", "self", ",", "box_list", ",", "gt_roidb", ")", ":", "\n", "        ", "assert", "(", "\n", "len", "(", "box_list", ")", "==", "self", ".", "num_images", "\n", ")", ",", "\"Number of boxes must match number of ground-truth images\"", "\n", "roidb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "            ", "boxes", "=", "box_list", "[", "i", "]", "\n", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "gt_roidb", "is", "not", "None", "and", "gt_roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "size", ">", "0", ":", "\n", "                ", "gt_boxes", "=", "gt_roidb", "[", "i", "]", "[", "\"boxes\"", "]", "\n", "gt_classes", "=", "gt_roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", "\n", "gt_overlaps", "=", "bbox_overlaps", "(", "\n", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", "\n", ")", "\n", "argmaxes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "maxes", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "I", "=", "np", ".", "where", "(", "maxes", ">", "0", ")", "[", "0", "]", "\n", "overlaps", "[", "I", ",", "gt_classes", "[", "argmaxes", "[", "I", "]", "]", "]", "=", "maxes", "[", "I", "]", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "roidb", ".", "append", "(", "\n", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs": [[262, 273], ["range", "len", "len", "len", "numpy.vstack", "numpy.hstack", "scipy.sparse.vstack", "numpy.hstack"], "methods", ["None"], ["", "return", "roidb", "\n", "\n", "", "@", "staticmethod", "\n", "def", "merge_roidbs", "(", "a", ",", "b", ")", ":", "\n", "        ", "assert", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "a", "[", "i", "]", "[", "\"boxes\"", "]", "=", "np", ".", "vstack", "(", "(", "a", "[", "i", "]", "[", "\"boxes\"", "]", ",", "b", "[", "i", "]", "[", "\"boxes\"", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "\"gt_classes\"", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "b", "[", "i", "]", "[", "\"gt_classes\"", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "\"gt_overlaps\"", "]", "=", "scipy", ".", "sparse", ".", "vstack", "(", "\n", "[", "a", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "b", "[", "i", "]", "[", "\"gt_overlaps\"", "]", "]", "\n", ")", "\n", "a", "[", "i", "]", "[", "\"seg_areas\"", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "b", "[", "i", "]", "[", "\"seg_areas\"", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.competition_mode": [[274, 276], ["None"], "methods", ["None"], ["", "return", "a", "\n", "\n", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet.__init__": [[29, 85], ["datasets.imdb.imdb.__init__", "datasets.imdb.imdb.__init__", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "xrange", "xrange", "dict", "dict", "dict", "dict", "range", "imagenet.imagenet._load_image_set_index", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "zip", "zip", "zip", "zip", "xrange", "xrange", "xrange", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "devkit_path", ",", "data_path", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "image_set", ")", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "self", ".", "_data_path", "=", "data_path", "\n", "synsets_image", "=", "sio", ".", "loadmat", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"data\"", ",", "\"meta_det.mat\"", ")", "\n", ")", "\n", "synsets_video", "=", "sio", ".", "loadmat", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"data\"", ",", "\"meta_vid.mat\"", ")", "\n", ")", "\n", "self", ".", "_classes_image", "=", "(", "\"__background__\"", ",", ")", "\n", "self", ".", "_wnid_image", "=", "(", "0", ",", ")", "\n", "\n", "self", ".", "_classes", "=", "(", "\"__background__\"", ",", ")", "\n", "self", ".", "_wnid", "=", "(", "0", ",", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "200", ")", ":", "\n", "            ", "self", ".", "_classes_image", "=", "self", ".", "_classes_image", "+", "(", "\n", "synsets_image", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "_wnid_image", "=", "self", ".", "_wnid_image", "+", "(", "\n", "synsets_image", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "30", ")", ":", "\n", "            ", "self", ".", "_classes", "=", "self", ".", "_classes", "+", "(", "synsets_video", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ",", ")", "\n", "self", ".", "_wnid", "=", "self", ".", "_wnid", "+", "(", "synsets_video", "[", "\"synsets\"", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", ",", ")", "\n", "\n", "", "self", ".", "_wnid_to_ind_image", "=", "dict", "(", "zip", "(", "self", ".", "_wnid_image", ",", "xrange", "(", "201", ")", ")", ")", "\n", "self", ".", "_class_to_ind_image", "=", "dict", "(", "zip", "(", "self", ".", "_classes_image", ",", "xrange", "(", "201", ")", ")", ")", "\n", "\n", "self", ".", "_wnid_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "_wnid", ",", "xrange", "(", "31", ")", ")", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "_classes", ",", "xrange", "(", "31", ")", ")", ")", "\n", "\n", "# check for valid intersection between video and image classes", "\n", "self", ".", "_valid_image_flag", "=", "[", "0", "]", "*", "201", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "201", ")", ":", "\n", "            ", "if", "self", ".", "_wnid_image", "[", "i", "]", "in", "self", ".", "_wnid_to_ind", ":", "\n", "                ", "self", ".", "_valid_image_flag", "[", "i", "]", "=", "1", "\n", "\n", "", "", "self", ".", "_image_ext", "=", "[", "\".JPEG\"", "]", "\n", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "\n", "# Specific config options", "\n", "self", ".", "config", "=", "{", "\"cleanup\"", ":", "True", ",", "\"use_salt\"", ":", "True", ",", "\"top_k\"", ":", "2000", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"Devkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet.image_path_at": [[87, 92], ["imagenet.imagenet.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet.image_path_from_index": [[93, 102], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"Data\"", ",", "self", ".", "_image_set", ",", "index", "+", "self", ".", "_image_ext", "[", "0", "]", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet._load_image_set_index": [[103, 178], ["os.path.join", "os.path.exists", "range", "range", "os.path.join", "open", "open.close", "os.path.join", "open", "open.read().split", "open.close", "print", "os.path.join", "len", "numpy.random.permutation", "open.write", "open", "open", "image_index.append", "os.path.join", "len", "numpy.random.permutation", "x.strip", "open.read", "image_index.append", "x.strip", "line.split.split.split", "os.popen().read().split", "open", "image_index.append", "open.readlines", "str", "open.readlines", "tmp_list.append", "x.strip", "os.popen().read", "str", "open.readlines", "os.popen"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._data_path + /ImageSets/val.txt", "\n", "\n", "if", "self", ".", "_image_set", "==", "\"train\"", ":", "\n", "            ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"trainr.txt\"", ")", "\n", "image_index", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ":", "\n", "                ", "f", "=", "open", "(", "image_set_file", ",", "\"r\"", ")", "\n", "data", "=", "f", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "for", "lines", "in", "data", ":", "\n", "                    ", "if", "lines", "!=", "\"\"", ":", "\n", "                        ", "image_index", ".", "append", "(", "lines", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "image_index", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "200", ")", ":", "\n", "                ", "print", "(", "i", ")", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"DET\"", ",", "\"train_\"", "+", "str", "(", "i", ")", "+", "\".txt\"", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                    ", "tmp_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "vtmp_index", "=", "[", "]", "\n", "for", "line", "in", "tmp_index", ":", "\n", "                        ", "line", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "image_list", "=", "(", "\n", "os", ".", "popen", "(", "\n", "\"ls \"", "\n", "+", "self", ".", "_data_path", "\n", "+", "\"/Data/DET/train/\"", "\n", "+", "line", "[", "0", "]", "\n", "+", "\"/*.JPEG\"", "\n", ")", "\n", ".", "read", "(", ")", "\n", ".", "split", "(", ")", "\n", ")", "\n", "tmp_list", "=", "[", "]", "\n", "for", "imgs", "in", "image_list", ":", "\n", "                            ", "tmp_list", ".", "append", "(", "imgs", "[", ":", "-", "5", "]", ")", "\n", "", "vtmp_index", "=", "vtmp_index", "+", "tmp_list", "\n", "\n", "", "", "num_lines", "=", "len", "(", "vtmp_index", ")", "\n", "ids", "=", "np", ".", "random", ".", "permutation", "(", "num_lines", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "2000", ":", "\n", "                    ", "image_index", ".", "append", "(", "vtmp_index", "[", "ids", "[", "count", "%", "num_lines", "]", "]", ")", "\n", "count", "=", "count", "+", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "201", ")", ":", "\n", "                ", "if", "self", ".", "_valid_image_flag", "[", "i", "]", "==", "1", ":", "\n", "                    ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"train_pos_\"", "+", "str", "(", "i", ")", "+", "\".txt\"", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                        ", "tmp_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "num_lines", "=", "len", "(", "tmp_index", ")", "\n", "ids", "=", "np", ".", "random", ".", "permutation", "(", "num_lines", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "2000", ":", "\n", "                        ", "image_index", ".", "append", "(", "tmp_index", "[", "ids", "[", "count", "%", "num_lines", "]", "]", ")", "\n", "count", "=", "count", "+", "1", "\n", "", "", "", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"trainr.txt\"", ")", "\n", "f", "=", "open", "(", "image_set_file", ",", "\"w\"", ")", "\n", "for", "lines", "in", "image_index", ":", "\n", "                ", "f", ".", "write", "(", "lines", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"val.txt\"", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet.gt_roidb": [[179, 197], ["os.path.join", "os.path.exists", "print", "print", "imagenet.imagenet._load_imagenet_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet._load_imagenet_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_imagenet_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imagenet.imagenet._load_imagenet_annotation": [[198, 238], ["os.path.join", "xml.parseString.getElementsByTagName", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "open", "xml.parseString", "float", "float", "float", "float", "f.read", "imagenet.imagenet._load_imagenet_annotation.get_data_from_tag"], "methods", ["None"], ["", "def", "_load_imagenet_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from txt files of imagenet.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "self", ".", "_image_set", ",", "index", "+", "\".xml\"", "\n", ")", "\n", "\n", "# print 'Loading: {}'.format(filename)", "\n", "def", "get_data_from_tag", "(", "node", ",", "tag", ")", ":", "\n", "            ", "return", "node", ".", "getElementsByTagName", "(", "tag", ")", "[", "0", "]", ".", "childNodes", "[", "0", "]", ".", "data", "\n", "\n", "", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "data", "=", "minidom", ".", "parseString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "objs", "=", "data", ".", "getElementsByTagName", "(", "\"object\"", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "x1", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"xmin\"", ")", ")", "\n", "y1", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"ymin\"", ")", ")", "\n", "x2", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"xmax\"", ")", ")", "\n", "y2", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "\"ymax\"", ")", ")", "\n", "cls", "=", "self", ".", "_wnid_to_ind", "[", "str", "(", "get_data_from_tag", "(", "obj", ",", "\"name\"", ")", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.__init__": [[28, 74], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "cityscapes_car.cityscapes_car._COCO.loadCats", "tuple", "dict", "dict", "cityscapes_car.cityscapes_car._load_image_set_index", "print", "cityscapes_car.cityscapes_car.set_proposal_method", "cityscapes_car.cityscapes_car.competition_mode", "cityscapes_car.cityscapes_car._get_ann_file", "cityscapes_car.cityscapes_car._COCO.getCatIds", "list", "list", "len", "zip", "zip", "list", "cityscapes_car.cityscapes_car._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"cityscapes_car\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "\"use_salt\"", ":", "True", ",", "\"cleanup\"", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"cityscapes_car\"", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "\"__background__\"", "]", "+", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "\n", "list", "(", "zip", "(", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ",", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "print", "(", "len", "(", "self", ".", "_image_index", ")", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "\"gt\"", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "\"minival2014\"", ":", "\"val2014\"", ",", "# 5k val2014 subset", "\n", "\"valminusminival2014\"", ":", "\"val2014\"", ",", "# val2014 \\setminus minival2014", "\n", "\"test-dev2015\"", ":", "\"test2015\"", ",", "\n", "\"valminuscapval2014\"", ":", "\"val2014\"", ",", "\n", "\"capval2014\"", ":", "\"val2014\"", ",", "\n", "\"captest2014\"", ":", "\"val2014\"", ",", "\n", "\"sim10k_car_train2019\"", ":", "\"train2019\"", ",", "# image_set=sim10k_car_train, year=2019", "\n", "\"sim10k_car_val2019\"", ":", "\"train2019\"", ",", "\n", "\"cityscapes_car_train_2019\"", ":", "\"train2019\"", ",", "\n", "\"cityscapes_car_val_2019\"", ":", "\"val2019\"", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "\n", "self", ".", "_view_map", "[", "coco_name", "]", "if", "coco_name", "in", "self", ".", "_view_map", "else", "coco_name", "\n", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"minival\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._get_ann_file": [[75, 81], ["os.join", "os.join", "cityscapes_car.cityscapes_car._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "\"instances\"", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", "else", "\"image_info\"", "\n", "return", "osp", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\n", "\"annotations\"", ",", "\n", "prefix", "+", "\"_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\".json\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._load_image_set_index": [[83, 89], ["cityscapes_car.cityscapes_car._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._get_widths": [[201, 203], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "r", "[", "\"width\"", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.image_path_at": [[95, 100], ["cityscapes_car.cityscapes_car.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.image_id_at": [[101, 106], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.image_path_from_index": [[107, 118], ["os.join", "os.join", "os.exists", "os.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "\"target_\"", "+", "str", "(", "index", ")", "+", "\".jpg\"", "\n", "# image_path = osp.join(self._data_path, \"images\", self._data_name, file_name)", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.gt_roidb": [[119, 137], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "cityscapes_car.cityscapes_car._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._load_coco_annotation": [[138, 199], ["cityscapes_car.cityscapes_car._COCO.getAnnIds", "cityscapes_car.cityscapes_car._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "cityscapes_car.cityscapes_car._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "\"width\"", "]", "\n", "height", "=", "im_ann", "[", "\"height\"", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "\"area\"", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "\"clean_bbox\"", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "\"clean_bbox\"", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "\"area\"", "]", "\n", "if", "obj", "[", "\"iscrowd\"", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.append_flipped_images": [[204, 226], ["cityscapes_car.cityscapes_car._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "cityscapes_car.cityscapes_car.roidb.append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"width\"", ":", "widths", "[", "i", "]", ",", "\n", "\"height\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "\"seg_areas\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._get_box_file": [[227, 232], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "        ", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".mat\"", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._print_detection_eval_metrics": [[233, 271], ["cityscapes_car.cityscapes_car._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "\n", "&", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\n", "(", "\"~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] \"", "\"~~~~\"", ")", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", "\n", ")", "\n", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "\n", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "\"~~~~ Summary metrics ~~~~\"", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._do_detection_eval": [[272, 284], ["cityscapes_car.cityscapes_car._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "cityscapes_car.cityscapes_car._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "        ", "ann_type", "=", "\"bbox\"", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "ann_type", "==", "\"segm\"", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "\"detection_results.pkl\"", ")", "\n", "with", "open", "(", "eval_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"Wrote COCO eval results to: {}\"", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._coco_results_one_category": [[285, 308], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "            ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "index", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"bbox\"", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car._write_coco_results_file": [[309, 330], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "cityscapes_car.cityscapes_car._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "        ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\n", "\"Collecting {} results ({:d}/{:d})\"", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "self", ".", "num_classes", "-", "1", "\n", ")", "\n", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "\n", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "coco_cat_id", ")", "\n", ")", "\n", "", "print", "(", "\"Writing results json to {}\"", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.evaluate_detections": [[331, 345], ["os.join", "os.join", "cityscapes_car.cityscapes_car._write_coco_results_file", "cityscapes_car.cityscapes_car._image_set.find", "cityscapes_car.cityscapes_car._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "res_file", "=", "osp", ".", "join", "(", "\n", "output_dir", ",", "(", "\"detections_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\"_results\"", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", ":", "\n", "            ", "res_file", "+=", "\"_{}\"", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "\".json\"", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", ":", "\n", "            ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscapes_car.cityscapes_car.competition_mode": [[346, 353], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict": [[34, 86], ["isinstance", "print", "Image.open", "np.array", "np.unique", "os.path.abspath", "print", "Instance", "Instance", "Instance.toDict", "instances[].append", "print", "sys.stdout.flush", "len", "cv2.findContours", "mask.copy", "c.reshape().tolist", "c.reshape"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.rpn.proposal_layer_origin._ProposalLayer.reshape"], ["def", "instances2dict", "(", "imageFileList", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "imgCount", "=", "0", "\n", "instanceDict", "=", "{", "}", "\n", "\n", "if", "not", "isinstance", "(", "imageFileList", ",", "list", ")", ":", "\n", "        ", "imageFileList", "=", "[", "imageFileList", "]", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Processing {} images...\"", ".", "format", "(", "len", "(", "imageFileList", ")", ")", ")", "\n", "\n", "", "for", "imageFileName", "in", "imageFileList", ":", "\n", "# Load image", "\n", "        ", "img", "=", "Image", ".", "open", "(", "imageFileName", ")", "\n", "\n", "# Image as numpy array", "\n", "imgNp", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "# Initialize label categories", "\n", "instances", "=", "{", "}", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "instances", "[", "label", ".", "name", "]", "=", "[", "]", "\n", "\n", "# Loop through all instance ids in instance image", "\n", "", "for", "instanceId", "in", "np", ".", "unique", "(", "imgNp", ")", ":", "\n", "            ", "instanceObj", "=", "Instance", "(", "imgNp", ",", "instanceId", ")", "\n", "if", "instanceId", "<", "1000", ":", "\n", "                ", "continue", "\n", "", "instanceObj", "=", "Instance", "(", "imgNp", ",", "instanceId", ")", "\n", "instanceObj_dict", "=", "instanceObj", ".", "toDict", "(", ")", "\n", "\n", "if", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "hasInstances", ":", "\n", "                ", "mask", "=", "(", "imgNp", "==", "instanceId", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "_", ",", "contour", ",", "_", "=", "cv2", ".", "findContours", "(", "\n", "mask", ".", "copy", "(", ")", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_NONE", "\n", ")", "\n", "\n", "polygons", "=", "[", "c", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "for", "c", "in", "contour", "]", "\n", "instanceObj_dict", "[", "\"contours\"", "]", "=", "polygons", "\n", "", "instances", "[", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "name", "]", ".", "append", "(", "instanceObj_dict", ")", "\n", "\n", "", "imgKey", "=", "os", ".", "path", ".", "abspath", "(", "imageFileName", ")", "\n", "instanceDict", "[", "imgKey", "]", "=", "instances", "\n", "imgCount", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rImages Processed: {}\"", ".", "format", "(", "imgCount", ")", ",", "end", "=", "\" \"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "\n", "", "return", "instanceDict", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.main": [[88, 95], ["convert_cityscapes_to_caronly_coco.instances2dict", "len", "fileList.append"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "fileList", "=", "[", "]", "\n", "if", "len", "(", "argv", ")", ">", "2", ":", "\n", "        ", "for", "arg", "in", "argv", ":", "\n", "            ", "if", "\"png\"", "in", "arg", ":", "\n", "                ", "fileList", ".", "append", "(", "arg", ")", "\n", "", "", "", "instances2dict", "(", "fileList", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.parse_args": [[97, 113], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Convert dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"cityscapes_car_only\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--datadir\"", ",", "\n", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.getLabelID": [[116, 121], ["int"], "function", ["None"], ["", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "    ", "if", "instID", "<", "1000", ":", "\n", "        ", "return", "instID", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.convert_cityscapes_car_only": [[123, 230], ["zip", "print", "os.path.join", "os.walk", "print", "print", "print", "print", "open", "outfile.write", "filename.endswith", "len", "len", "len", "os.path.join", "json.dumps", "json.load", "images.append", "os.path.join", "print", "open", "convert_cityscapes_to_caronly_coco.instances2dict", "data_set.split", "len", "os.path.join", "annotations.append", "data_set.split", "print", "len", "min", "print", "boxes.xyxy_to_xywh().tolist", "len", "len", "len", "len", "boxes.xyxy_to_xywh", "segms.polys_to_boxes", "data_set.split", "data_set.split"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.boxes.xyxy_to_xywh", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.segms.polys_to_boxes"], ["", "", "def", "convert_cityscapes_car_only", "(", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert from cityscapes format to COCO instance seg format - polygons\"\"\"", "\n", "sets", "=", "[", "\n", "\"gtFine_val\"", ",", "\n", "\"gtFine_train\"", ",", "\n", "# 'gtFine_test',", "\n", "# 'gtCoarse_train',", "\n", "# 'gtCoarse_val',", "\n", "# 'gtCoarse_train_extra'", "\n", "]", "\n", "ann_dirs", "=", "[", "\n", "\"gtFine_trainvaltest/gtFine/val\"", ",", "\n", "\"gtFine_trainvaltest/gtFine/train\"", ",", "\n", "# 'gtFine_trainvaltest/gtFine/test',", "\n", "# 'gtCoarse/train',", "\n", "# 'gtCoarse/train_extra',", "\n", "# 'gtCoarse/val'", "\n", "]", "\n", "json_name", "=", "\"caronly_filtered_%s.json\"", "\n", "ends_in", "=", "\"%s_polygons.json\"", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "cat_id", "=", "1", "\n", "category_dict", "=", "{", "}", "\n", "\n", "category_instancesonly", "=", "[", "\n", "\"car\"", ",", "\n", "]", "\n", "\n", "for", "data_set", ",", "ann_dir", "in", "zip", "(", "sets", ",", "ann_dirs", ")", ":", "\n", "        ", "print", "(", "\"Starting %s\"", "%", "data_set", ")", "\n", "ann_dict", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "ann_dir", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ann_dir", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "len", "(", "images", ")", "%", "50", "==", "0", ":", "\n", "                        ", "print", "(", "\n", "\"Processed %s images, %s annotations\"", "\n", "%", "(", "len", "(", "images", ")", ",", "len", "(", "annotations", ")", ")", "\n", ")", "\n", "", "json_ann", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", ")", "\n", "image", "=", "{", "}", "\n", "image", "[", "\"id\"", "]", "=", "img_id", "\n", "img_id", "+=", "1", "\n", "\n", "image", "[", "\"width\"", "]", "=", "json_ann", "[", "\"imgWidth\"", "]", "\n", "image", "[", "\"height\"", "]", "=", "json_ann", "[", "\"imgHeight\"", "]", "\n", "image", "[", "\"file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"leftImg8bit.png\"", "\n", ")", "\n", "image", "[", "\"seg_file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"%s_instanceIds.png\"", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "image", "[", "\"seg_file_name\"", "]", ")", "\n", "objects", "=", "instances2dict", "(", "[", "fullname", "]", ",", "verbose", "=", "False", ")", "[", "fullname", "]", "\n", "\n", "for", "object_cls", "in", "objects", ":", "\n", "                        ", "if", "object_cls", "not", "in", "category_instancesonly", ":", "\n", "                            ", "continue", "# skip non-instance categories", "\n", "\n", "", "for", "obj", "in", "objects", "[", "object_cls", "]", ":", "\n", "                            ", "if", "obj", "[", "\"contours\"", "]", "==", "[", "]", ":", "\n", "                                ", "print", "(", "\"Warning: empty contours.\"", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "len_p", "=", "[", "len", "(", "p", ")", "for", "p", "in", "obj", "[", "\"contours\"", "]", "]", "\n", "if", "min", "(", "len_p", ")", "<=", "4", ":", "\n", "                                ", "print", "(", "\"Warning: invalid contours.\"", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "ann", "=", "{", "}", "\n", "ann", "[", "\"id\"", "]", "=", "ann_id", "\n", "ann_id", "+=", "1", "\n", "ann", "[", "\"image_id\"", "]", "=", "image", "[", "\"id\"", "]", "\n", "ann", "[", "\"segmentation\"", "]", "=", "obj", "[", "\"contours\"", "]", "\n", "\n", "if", "object_cls", "not", "in", "category_dict", ":", "\n", "                                ", "category_dict", "[", "object_cls", "]", "=", "cat_id", "\n", "cat_id", "+=", "1", "\n", "", "ann", "[", "\"category_id\"", "]", "=", "category_dict", "[", "object_cls", "]", "\n", "ann", "[", "\"iscrowd\"", "]", "=", "0", "\n", "ann", "[", "\"area\"", "]", "=", "obj", "[", "\"pixelCount\"", "]", "\n", "ann", "[", "\"bbox\"", "]", "=", "bboxs_util", ".", "xyxy_to_xywh", "(", "\n", "segms_util", ".", "polys_to_boxes", "(", "[", "ann", "[", "\"segmentation\"", "]", "]", ")", "\n", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "", "", "", "ann_dict", "[", "\"images\"", "]", "=", "images", "\n", "categories", "=", "[", "\n", "{", "\"id\"", ":", "category_dict", "[", "name", "]", ",", "\"name\"", ":", "name", "}", "for", "name", "in", "category_dict", "\n", "]", "\n", "ann_dict", "[", "\"categories\"", "]", "=", "categories", "\n", "ann_dict", "[", "\"annotations\"", "]", "=", "annotations", "\n", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "categories", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "annotations", ")", ")", "\n", "print", "(", "categories", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.parse_args": [[21, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Convert dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"sim10k\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--datadir\"", ",", "\n", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addCatItem": [[39, 49], ["dict", "coco[].append"], "function", ["None"], ["", "def", "addCatItem", "(", "name", ")", ":", "\n", "    ", "global", "category_item_id", "\n", "category_item", "=", "dict", "(", ")", "\n", "category_item", "[", "\"supercategory\"", "]", "=", "\"none\"", "\n", "category_item_id", "+=", "1", "\n", "category_item", "[", "\"id\"", "]", "=", "category_item_id", "\n", "category_item", "[", "\"name\"", "]", "=", "name", "\n", "coco", "[", "\"categories\"", "]", ".", "append", "(", "category_item", ")", "\n", "category_set", "[", "name", "]", "=", "category_item_id", "\n", "return", "category_item_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addImgItem": [[51, 68], ["dict", "coco[].append", "image_set.add", "Exception", "Exception", "Exception"], "function", ["None"], ["", "def", "addImgItem", "(", "file_name", ",", "size", ")", ":", "\n", "    ", "global", "image_id", "\n", "if", "file_name", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find filename tag in xml file.\"", ")", "\n", "", "if", "size", "[", "\"width\"", "]", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find width tag in xml file.\"", ")", "\n", "", "if", "size", "[", "\"height\"", "]", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find height tag in xml file.\"", ")", "\n", "", "image_id", "+=", "1", "\n", "image_item", "=", "dict", "(", ")", "\n", "image_item", "[", "\"id\"", "]", "=", "image_id", "\n", "image_item", "[", "\"file_name\"", "]", "=", "file_name", "\n", "image_item", "[", "\"width\"", "]", "=", "size", "[", "\"width\"", "]", "\n", "image_item", "[", "\"height\"", "]", "=", "size", "[", "\"height\"", "]", "\n", "coco", "[", "\"images\"", "]", ".", "append", "(", "image_item", ")", "\n", "image_set", ".", "add", "(", "file_name", ")", "\n", "return", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addAnnoItem": [[70, 100], ["dict", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "annotation_item[].append", "coco[].append"], "function", ["None"], ["", "def", "addAnnoItem", "(", "object_name", ",", "image_id", ",", "category_id", ",", "bbox", ")", ":", "\n", "    ", "global", "annotation_id", "\n", "annotation_item", "=", "dict", "(", ")", "\n", "annotation_item", "[", "\"segmentation\"", "]", "=", "[", "]", "\n", "seg", "=", "[", "]", "\n", "# bbox[] is x,y,w,h", "\n", "# left_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "# left_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "\n", "annotation_item", "[", "\"segmentation\"", "]", ".", "append", "(", "seg", ")", "\n", "\n", "annotation_item", "[", "\"area\"", "]", "=", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", "\n", "annotation_item", "[", "\"iscrowd\"", "]", "=", "0", "\n", "annotation_item", "[", "\"ignore\"", "]", "=", "0", "\n", "annotation_item", "[", "\"image_id\"", "]", "=", "image_id", "\n", "annotation_item", "[", "\"bbox\"", "]", "=", "bbox", "\n", "annotation_item", "[", "\"category_id\"", "]", "=", "category_id", "\n", "annotation_id", "+=", "1", "\n", "annotation_item", "[", "\"id\"", "]", "=", "annotation_id", "\n", "coco", "[", "\"annotations\"", "]", ".", "append", "(", "annotation_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.parseXmlFiles": [[102, 212], ["sorted", "print", "print", "print", "print", "os.listdir", "dict", "dict", "os.path.join", "print", "xml.parse", "ET.parse.getroot", "f.endswith", "Exception", "len", "len", "len", "Exception", "bbox.append", "bbox.append", "bbox.append", "bbox.append", "print", "convert_sim10k_to_coco.addAnnoItem", "convert_sim10k_to_coco.addImgItem", "print", "Exception", "f.split", "int", "int", "Exception", "Exception", "Exception", "Exception", "Exception"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addAnnoItem", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_sim10k_to_coco.addImgItem"], ["", "def", "parseXmlFiles", "(", "xml_path", ")", ":", "\n", "\n", "    ", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "xml_path", ")", ")", ":", "\n", "        ", "if", "not", "f", ".", "endswith", "(", "\".xml\"", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "bndbox", "=", "dict", "(", ")", "\n", "size", "=", "dict", "(", ")", "\n", "current_image_id", "=", "None", "\n", "current_category_id", "=", "None", "\n", "file_name", "=", "None", "\n", "size", "[", "\"width\"", "]", "=", "None", "\n", "size", "[", "\"height\"", "]", "=", "None", "\n", "size", "[", "\"depth\"", "]", "=", "None", "\n", "\n", "xml_file", "=", "os", ".", "path", ".", "join", "(", "xml_path", ",", "f", ")", "\n", "print", "(", "xml_file", ")", "\n", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_file", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "if", "root", ".", "tag", "!=", "\"annotation\"", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"pascal voc xml root element should be annotation, rather than {}\"", ".", "format", "(", "\n", "root", ".", "tag", "\n", ")", "\n", ")", "\n", "\n", "# elem is <folder>, <filename>, <size>, <object>", "\n", "", "for", "elem", "in", "root", ":", "\n", "            ", "current_parent", "=", "elem", ".", "tag", "\n", "current_sub", "=", "None", "\n", "object_name", "=", "None", "\n", "\n", "if", "elem", ".", "tag", "==", "\"folder\"", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "elem", ".", "tag", "==", "\"filename\"", ":", "\n", "                ", "file_name", "=", "elem", ".", "text", "\n", "file_name", "=", "f", ".", "split", "(", "\".xml\"", ")", "[", "0", "]", "+", "\".jpg\"", "\n", "if", "file_name", "in", "category_set", ":", "\n", "                    ", "raise", "Exception", "(", "\"file_name duplicated\"", ")", "\n", "\n", "# subelem is <width>, <height>, <depth>, <name>, <bndbox>", "\n", "", "", "for", "subelem", "in", "elem", ":", "\n", "                ", "bndbox", "[", "\"xmin\"", "]", "=", "None", "\n", "bndbox", "[", "\"xmax\"", "]", "=", "None", "\n", "bndbox", "[", "\"ymin\"", "]", "=", "None", "\n", "bndbox", "[", "\"ymax\"", "]", "=", "None", "\n", "\n", "current_sub", "=", "subelem", ".", "tag", "\n", "if", "current_parent", "==", "\"object\"", "and", "subelem", ".", "tag", "==", "\"name\"", ":", "\n", "                    ", "object_name", "=", "subelem", ".", "text", "\n", "if", "object_name", "not", "in", "category_set", ":", "\n", "                        ", "break", "\n", "# current_category_id = addCatItem(object_name)", "\n", "", "else", ":", "\n", "                        ", "current_category_id", "=", "category_set", "[", "object_name", "]", "\n", "\n", "", "", "elif", "current_parent", "==", "\"size\"", ":", "\n", "                    ", "if", "size", "[", "subelem", ".", "tag", "]", "is", "not", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at size tag.\"", ")", "\n", "", "size", "[", "subelem", ".", "tag", "]", "=", "int", "(", "subelem", ".", "text", ")", "\n", "\n", "# option is <xmin>, <ymin>, <xmax>, <ymax>, when subelem is <bndbox>", "\n", "", "for", "option", "in", "subelem", ":", "\n", "                    ", "if", "current_sub", "==", "\"bndbox\"", ":", "\n", "                        ", "if", "bndbox", "[", "option", ".", "tag", "]", "is", "not", "None", ":", "\n", "                            ", "raise", "Exception", "(", "\"xml structure corrupted at bndbox tag.\"", ")", "\n", "", "bndbox", "[", "option", ".", "tag", "]", "=", "int", "(", "option", ".", "text", ")", "\n", "\n", "# only after parse the <object> tag", "\n", "", "", "if", "bndbox", "[", "\"xmin\"", "]", "is", "not", "None", ":", "\n", "                    ", "if", "object_name", "is", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at bndbox tag\"", ")", "\n", "", "if", "current_image_id", "is", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at bndbox tag\"", ")", "\n", "", "if", "current_category_id", "is", "None", ":", "\n", "                        ", "raise", "Exception", "(", "\"xml structure broken at bndbox tag\"", ")", "\n", "", "bbox", "=", "[", "]", "\n", "# x", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"xmin\"", "]", ")", "\n", "# y", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"ymin\"", "]", ")", "\n", "# w", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"xmax\"", "]", "-", "bndbox", "[", "\"xmin\"", "]", ")", "\n", "# h", "\n", "bbox", ".", "append", "(", "bndbox", "[", "\"ymax\"", "]", "-", "bndbox", "[", "\"ymin\"", "]", ")", "\n", "print", "(", "\n", "\"add annotation with {},{},{},{}\"", ".", "format", "(", "\n", "object_name", ",", "current_image_id", ",", "current_category_id", ",", "bbox", "\n", ")", "\n", ")", "\n", "addAnnoItem", "(", "\n", "object_name", ",", "current_image_id", ",", "current_category_id", ",", "bbox", "\n", ")", "\n", "# add img item only after parse <size> tag", "\n", "", "", "if", "(", "\n", "current_image_id", "is", "None", "\n", "and", "file_name", "is", "not", "None", "\n", "and", "size", "[", "\"width\"", "]", "is", "not", "None", "\n", ")", ":", "\n", "                ", "if", "file_name", "not", "in", "image_set", ":", "\n", "                    ", "current_image_id", "=", "addImgItem", "(", "file_name", ",", "size", ")", "\n", "print", "(", "\"add image with {} and {}\"", ".", "format", "(", "file_name", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"duplicated image: {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "", "", "", "", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "coco", "[", "\"categories\"", "]", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "coco", "[", "\"images\"", "]", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "coco", "[", "\"annotations\"", "]", ")", ")", "\n", "print", "(", "category_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args": [[30, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Convert dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "help", "=", "\"cityscapes_unlabeled_car_only\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outdir\"", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--datadir\"", ",", "\n", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.getLabelID": [[51, 56], ["int"], "function", ["None"], ["", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "    ", "if", "instID", "<", "1000", ":", "\n", "        ", "return", "instID", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_unlabeled_caronly_coco.convert_cityscapes_car_only": [[58, 171], ["zip", "print", "os.path.join", "os.walk", "print", "print", "print", "print", "open", "outfile.write", "filename.endswith", "len", "len", "len", "os.path.join", "json.dumps", "json.load", "images.append", "os.path.join", "bbox.append", "bbox.append", "bbox.append", "bbox.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "annotations.append", "print", "open", "cityscapesscripts.instances2dict", "int", "int", "data_set.split", "len", "os.path.join", "data_set.split", "len", "len", "len", "len", "data_set.split", "data_set.split"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.convert_cityscapes_to_caronly_coco.instances2dict"], ["", "", "def", "convert_cityscapes_car_only", "(", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert from cityscapes format to COCO instance seg format - polygons\"\"\"", "\n", "sets", "=", "[", "\n", "\"gtFine_val\"", ",", "\n", "\"gtFine_train\"", ",", "\n", "# 'gtFine_test',", "\n", "# 'gtCoarse_train',", "\n", "# 'gtCoarse_val',", "\n", "# 'gtCoarse_train_extra'", "\n", "]", "\n", "ann_dirs", "=", "[", "\n", "\"gtFine_trainvaltest/gtFine/val\"", ",", "\n", "\"gtFine_trainvaltest/gtFine/train\"", ",", "\n", "# 'gtFine_trainvaltest/gtFine/test',", "\n", "# 'gtCoarse/train',", "\n", "# 'gtCoarse/train_extra',", "\n", "# 'gtCoarse/val'", "\n", "]", "\n", "json_name", "=", "\"caronly_filtered_unlabeled_%s.json\"", "\n", "ends_in", "=", "\"%s_polygons.json\"", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "cat_id", "=", "1", "\n", "category_dict", "=", "{", "}", "\n", "\n", "category_instancesonly", "=", "[", "\n", "\"car\"", ",", "\n", "]", "\n", "category_dict", "[", "\"car\"", "]", "=", "cat_id", "\n", "\n", "for", "data_set", ",", "ann_dir", "in", "zip", "(", "sets", ",", "ann_dirs", ")", ":", "\n", "        ", "print", "(", "\"Starting %s\"", "%", "data_set", ")", "\n", "ann_dict", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "ann_dir", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ann_dir", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "len", "(", "images", ")", "%", "50", "==", "0", ":", "\n", "                        ", "print", "(", "\n", "\"Processed %s images, %s annotations\"", "\n", "%", "(", "len", "(", "images", ")", ",", "len", "(", "annotations", ")", ")", "\n", ")", "\n", "", "json_ann", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", ")", "\n", "image", "=", "{", "}", "\n", "image", "[", "\"id\"", "]", "=", "img_id", "\n", "img_id", "+=", "1", "\n", "\n", "image", "[", "\"width\"", "]", "=", "json_ann", "[", "\"imgWidth\"", "]", "\n", "image", "[", "\"height\"", "]", "=", "json_ann", "[", "\"imgHeight\"", "]", "\n", "image", "[", "\"file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"leftImg8bit.png\"", "\n", ")", "\n", "image", "[", "\"seg_file_name\"", "]", "=", "(", "\n", "filename", "[", ":", "-", "len", "(", "ends_in", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "]", "\n", "+", "\"%s_instanceIds.png\"", "%", "data_set", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "image", "[", "\"seg_file_name\"", "]", ")", "\n", "objects", "=", "cs", ".", "instances2dict", "(", "[", "fullname", "]", ",", "verbose", "=", "False", ")", "[", "fullname", "]", "\n", "\n", "bbox", "=", "[", "]", "\n", "# x", "\n", "bbox", ".", "append", "(", "0", ")", "\n", "# y", "\n", "bbox", ".", "append", "(", "0", ")", "\n", "# w", "\n", "bbox", ".", "append", "(", "int", "(", "json_ann", "[", "\"imgWidth\"", "]", ")", ")", "\n", "# h", "\n", "bbox", ".", "append", "(", "int", "(", "json_ann", "[", "\"imgHeight\"", "]", ")", ")", "\n", "\n", "seg", "=", "[", "]", "\n", "# bbox[] is x,y,w,h", "\n", "# left_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "# left_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_bottom", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "# right_top", "\n", "seg", ".", "append", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "seg", ".", "append", "(", "bbox", "[", "1", "]", ")", "\n", "\n", "ann", "=", "{", "}", "\n", "ann", "[", "\"id\"", "]", "=", "ann_id", "\n", "ann_id", "+=", "1", "\n", "ann", "[", "\"image_id\"", "]", "=", "image", "[", "\"id\"", "]", "\n", "ann", "[", "\"segmentation\"", "]", "=", "[", "seg", "]", "\n", "ann", "[", "\"category_id\"", "]", "=", "1", "\n", "ann", "[", "\"iscrowd\"", "]", "=", "0", "\n", "ann", "[", "\"area\"", "]", "=", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", "\n", "ann", "[", "\"bbox\"", "]", "=", "bbox", "\n", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "", "ann_dict", "[", "\"images\"", "]", "=", "images", "\n", "categories", "=", "[", "\n", "{", "\"id\"", ":", "category_dict", "[", "name", "]", ",", "\"name\"", ":", "name", "}", "for", "name", "in", "category_dict", "\n", "]", "\n", "ann_dict", "[", "\"categories\"", "]", "=", "categories", "\n", "ann_dict", "[", "\"annotations\"", "]", "=", "annotations", "\n", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "categories", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "annotations", ")", ")", "\n", "print", "(", "categories", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.factory.get_imdb": [[101, 106], ["KeyError"], "function", ["None"], ["", "", "for", "version", "in", "[", "\n", "\"150-50-20\"", ",", "\n", "\"150-50-50\"", ",", "\n", "\"500-150-80\"", ",", "\n", "\"750-250-150\"", ",", "\n", "\"1750-700-450\"", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.factory.list_imdbs": [[108, 111], ["list", "__sets.keys"], "function", ["None"], ["]", ":", "\n", "    ", "for", "split", "in", "[", "\n", "\"minitrain\"", ",", "\n", "\"smalltrain\"", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.__init__": [[28, 73], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "sim10k_coco.sim10k._COCO.loadCats", "tuple", "dict", "dict", "sim10k_coco.sim10k._load_image_set_index", "sim10k_coco.sim10k.set_proposal_method", "sim10k_coco.sim10k.competition_mode", "sim10k_coco.sim10k._get_ann_file", "sim10k_coco.sim10k._COCO.getCatIds", "list", "list", "zip", "zip", "list", "sim10k_coco.sim10k._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"sim10k_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "\"use_salt\"", ":", "True", ",", "\"cleanup\"", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"sim10k\"", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "\"__background__\"", "]", "+", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "\n", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", "\n", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "\n", "list", "(", "zip", "(", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "cats", "]", ",", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", "\n", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "\"gt\"", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "\"minival2014\"", ":", "\"val2014\"", ",", "# 5k val2014 subset", "\n", "\"valminusminival2014\"", ":", "\"val2014\"", ",", "# val2014 \\setminus minival2014", "\n", "\"test-dev2015\"", ":", "\"test2015\"", ",", "\n", "\"valminuscapval2014\"", ":", "\"val2014\"", ",", "\n", "\"capval2014\"", ":", "\"val2014\"", ",", "\n", "\"captest2014\"", ":", "\"val2014\"", ",", "\n", "\"sim10k_car_train2019\"", ":", "\"train2019\"", ",", "# image_set=sim10k_car_train, year=2019", "\n", "\"sim10k_car_val2019\"", ":", "\"val2019\"", ",", "\n", "\"cityscapes_car_train_2019\"", ":", "\"train2019\"", ",", "\n", "\"cityscapes_car_val_2019\"", ":", "\"val2019\"", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "\n", "self", ".", "_view_map", "[", "coco_name", "]", "if", "coco_name", "in", "self", ".", "_view_map", "else", "coco_name", "\n", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"minival\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_ann_file": [[74, 80], ["os.join", "os.join", "sim10k_coco.sim10k._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "\"instances\"", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", "else", "\"image_info\"", "\n", "return", "osp", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\n", "\"annotations\"", ",", "\n", "prefix", "+", "\"_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\".json\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_image_set_index": [[82, 88], ["sim10k_coco.sim10k._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths": [[203, 205], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "        ", "return", "[", "r", "[", "\"width\"", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.image_path_at": [[94, 99], ["sim10k_coco.sim10k.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.image_id_at": [[100, 105], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.image_path_from_index": [[106, 120], ["os.join", "os.join", "os.exists", "os.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "# file_name = glob.globs(self._data_path)index + \".jpg\"", "\n", "# image_path = osp.join(self._data_path, \"images\", self._data_name, file_name)", "\n", "# image_path = osp.join(self._data_path, self._data_name, file_name)", "\n", "# image_path = glob.glob(osp.join(self._data_path, self._data_name+'/*.jpg'))[index-1]", "\n", "file_name", "=", "\"source_\"", "+", "str", "(", "index", ")", "+", "\".jpg\"", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.gt_roidb": [[121, 139], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "sim10k_coco.sim10k._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._load_coco_annotation": [[140, 201], ["sim10k_coco.sim10k._COCO.getAnnIds", "sim10k_coco.sim10k._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "sim10k_coco.sim10k._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "\"width\"", "]", "\n", "height", "=", "im_ann", "[", "\"height\"", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "\"bbox\"", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "\"area\"", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "\"clean_bbox\"", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "\"clean_bbox\"", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "\"area\"", "]", "\n", "if", "obj", "[", "\"iscrowd\"", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.append_flipped_images": [[206, 228], ["sim10k_coco.sim10k._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "sim10k_coco.sim10k.roidb.append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "\"boxes\"", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "\n", "\"width\"", ":", "widths", "[", "i", "]", ",", "\n", "\"height\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_classes\"", "]", ",", "\n", "\"gt_overlaps\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"gt_overlaps\"", "]", ",", "\n", "\"flipped\"", ":", "True", ",", "\n", "\"seg_areas\"", ":", "self", ".", "roidb", "[", "i", "]", "[", "\"seg_areas\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._get_box_file": [[229, 234], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "        ", "file_name", "=", "\"COCO_\"", "+", "self", ".", "_data_name", "+", "\"_\"", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "\".mat\"", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics": [[235, 273], ["sim10k_coco.sim10k._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "\n", "&", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\n", "(", "\"~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] \"", "\"~~~~\"", ")", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", "\n", ")", "\n", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "\n", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "\"{:.1f}\"", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "\"~~~~ Summary metrics ~~~~\"", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval": [[274, 286], ["sim10k_coco.sim10k._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "sim10k_coco.sim10k._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "        ", "ann_type", "=", "\"bbox\"", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "ann_type", "==", "\"segm\"", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "\"detection_results.pkl\"", ")", "\n", "with", "open", "(", "eval_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"Wrote COCO eval results to: {}\"", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category": [[287, 310], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "            ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "index", ",", "\n", "\"category_id\"", ":", "cat_id", ",", "\n", "\"bbox\"", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file": [[311, 332], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "sim10k_coco.sim10k._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "        ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\n", "\"Collecting {} results ({:d}/{:d})\"", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "self", ".", "num_classes", "-", "1", "\n", ")", "\n", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "\n", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "coco_cat_id", ")", "\n", ")", "\n", "", "print", "(", "\"Writing results json to {}\"", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.evaluate_detections": [[333, 347], ["os.join", "os.join", "sim10k_coco.sim10k._write_coco_results_file", "sim10k_coco.sim10k._image_set.find", "sim10k_coco.sim10k._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._write_coco_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "res_file", "=", "osp", ".", "join", "(", "\n", "output_dir", ",", "(", "\"detections_\"", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "\"_results\"", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", ":", "\n", "            ", "res_file", "+=", "\"_{}\"", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "\".json\"", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "\"test\"", ")", "==", "-", "1", ":", "\n", "            ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.sim10k_coco.sim10k.competition_mode": [[348, 355], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "True", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.segms.polys_to_boxes": [[36, 48], ["numpy.zeros", "range", "len", "min", "max", "min", "max", "len", "min", "max", "min", "max"], "function", ["None"], ["def", "polys_to_boxes", "(", "polys", ")", ":", "\n", "    ", "\"\"\"Convert a list of polygons into an array of tight bounding boxes.\"\"\"", "\n", "boxes_from_polys", "=", "np", ".", "zeros", "(", "(", "len", "(", "polys", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "polys", ")", ")", ":", "\n", "        ", "poly", "=", "polys", "[", "i", "]", "\n", "x0", "=", "min", "(", "min", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "x1", "=", "max", "(", "max", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y0", "=", "min", "(", "min", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y1", "=", "max", "(", "max", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "boxes_from_polys", "[", "i", ",", ":", "]", "=", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", "\n", "\n", "", "return", "boxes_from_polys", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.__init__": [[39, 94], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "pascal_voc.pascal_voc._get_default_path", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_default_path"], ["", "class", "pascal_voc", "(", "imdb", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"voc_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "cfg_d", ".", "PASCAL", "\n", ")", "# self._get_default_path() if devkit_path is None \\", "\n", "# else devkit_path", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"aeroplane\"", ",", "\n", "\"bicycle\"", ",", "\n", "\"bird\"", ",", "\n", "\"boat\"", ",", "\n", "\"bottle\"", ",", "\n", "\"bus\"", ",", "\n", "\"car\"", ",", "\n", "\"cat\"", ",", "\n", "\"chair\"", ",", "\n", "\"cow\"", ",", "\n", "\"diningtable\"", ",", "\n", "\"dog\"", ",", "\n", "\"horse\"", ",", "\n", "\"motorbike\"", ",", "\n", "\"person\"", ",", "\n", "\"pottedplant\"", ",", "\n", "\"sheep\"", ",", "\n", "\"sofa\"", ",", "\n", "\"train\"", ",", "\n", "\"tvmonitor\"", ",", "\n", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.image_path_at": [[96, 101], ["pascal_voc.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["\n", "", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.image_id_at": [[102, 107], ["None"], "methods", ["None"], ["\n", "", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.image_path_from_index": [[108, 117], ["os.path.join", "os.path.exists"], "methods", ["None"], ["\n", "", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._load_image_set_index": [[118, 133], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["\n", "", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._get_default_path": [[134, 139], ["os.path.join"], "methods", ["None"], ["\n", "", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"VOCdevkit\"", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.gt_roidb": [[140, 159], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["\n", "", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "print", "(", "cache_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.selective_search_roidb": [[160, 188], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["return", "gt_roidb", "\n", "\n", "", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.rpn_roidb": [[189, 198], ["pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["\n", "", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._load_rpn_roidb": [[199, 206], ["print", "os.path.exists", "pascal_voc.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["\n", "", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._load_selective_search_roidb": [[207, 226], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "pascal_voc.pascal_voc.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["\n", "", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._load_pascal_annotation": [[227, 280], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["\n", "", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "img_size", "=", "tree", ".", "find", "(", "\"size\"", ")", "# [0]", "\n", "# print(img_size)", "\n", "# print((int(tree.find('width').text)))", "\n", "seg_map", "=", "np", ".", "zeros", "(", "\n", "(", "int", "(", "img_size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", ",", "int", "(", "img_size", ".", "find", "(", "\"height\"", ")", ".", "text", ")", ")", "\n", ")", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "# seg_map[x1:x2,y1:y2] = cls", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._get_comp_id": [[282, 289], ["None"], "methods", ["None"], ["\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n", "\"gt_overlaps\"", ":", "overlaps", ",", "\n", "\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "\"seg_map\"", ":", "seg_map", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._get_voc_results_file_template": [[290, 298], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["\n", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n", "else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._write_voc_results_file": [[299, 320], ["enumerate", "print", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc.pascal_voc._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n", "", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._do_python_eval": [[323, 372], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "                ", "result_f", ".", "write", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"eval_result.txt\"", ")", ",", "\"a\"", ")", "as", "result_f", ":", "\n", "            ", "result_f", ".", "write", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc._do_matlab_eval": [[373, 386], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n", "", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.evaluate_detections": [[387, 398], ["pascal_voc.pascal_voc._write_voc_results_file", "pascal_voc.pascal_voc._do_python_eval", "pascal_voc.pascal_voc._do_matlab_eval", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n", ")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.pascal_voc.pascal_voc.competition_mode": [[399, 406], ["None"], "methods", ["None"], ["\n", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.boxes.xywh_to_xyxy": [[48, 62], ["isinstance", "isinstance", "len", "numpy.maximum", "numpy.maximum", "numpy.hstack", "TypeError", "numpy.maximum"], "function", ["None"], ["def", "xywh_to_xyxy", "(", "xywh", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "if", "isinstance", "(", "xywh", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Single box given as a list of coordinates", "\n", "        ", "assert", "len", "(", "xywh", ")", "==", "4", "\n", "x1", ",", "y1", "=", "xywh", "[", "0", "]", ",", "xywh", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.0", ",", "xywh", "[", "2", "]", "-", "1.0", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.0", ",", "xywh", "[", "3", "]", "-", "1.0", ")", "\n", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "", "elif", "isinstance", "(", "xywh", ",", "np", ".", "ndarray", ")", ":", "\n", "# Multiple boxes given as a 2D ndarray", "\n", "        ", "return", "np", ".", "hstack", "(", "(", "xywh", "[", ":", ",", "0", ":", "2", "]", ",", "xywh", "[", ":", ",", "0", ":", "2", "]", "+", "np", ".", "maximum", "(", "0", ",", "xywh", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Argument xywh must be a list, tuple, or numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.boxes.xyxy_to_xywh": [[64, 78], ["isinstance", "isinstance", "len", "numpy.hstack", "TypeError"], "function", ["None"], ["", "", "def", "xyxy_to_xywh", "(", "xyxy", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x1 y1 w h] format.\"\"\"", "\n", "if", "isinstance", "(", "xyxy", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Single box given as a list of coordinates", "\n", "        ", "assert", "len", "(", "xyxy", ")", "==", "4", "\n", "x1", ",", "y1", "=", "xyxy", "[", "0", "]", ",", "xyxy", "[", "1", "]", "\n", "w", "=", "xyxy", "[", "2", "]", "-", "x1", "+", "1", "\n", "h", "=", "xyxy", "[", "3", "]", "-", "y1", "+", "1", "\n", "return", "(", "x1", ",", "y1", ",", "w", ",", "h", ")", "\n", "", "elif", "isinstance", "(", "xyxy", ",", "np", ".", "ndarray", ")", ":", "\n", "# Multiple boxes given as a 2D ndarray", "\n", "        ", "return", "np", ".", "hstack", "(", "(", "xyxy", "[", ":", ",", "0", ":", "2", "]", ",", "xyxy", "[", ":", ",", "2", ":", "4", "]", "-", "xyxy", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Argument xyxy must be a list, tuple, or numpy array.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__": [[39, 88], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "cityscape.cityscape._load_image_set_index", "str", "os.path.exists", "os.path.exists", "cityscape.cityscape._get_default_path", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_default_path"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "\"cityscape_\"", "+", "year", "+", "\"_\"", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "\n", "self", ".", "_devkit_path", "=", "(", "\n", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", ")", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ")", "\n", "\n", "self", ".", "_classes", "=", "(", "\n", "\"__background__\"", ",", "# always index 0", "\n", "\"person\"", ",", "\n", "\"rider\"", ",", "\n", "\"car\"", ",", "\n", "\"truck\"", ",", "\n", "\"bus\"", ",", "\n", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\n", "\"bicycle\"", ",", "\n", ")", "\n", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "\".jpg\"", "\n", "self", ".", "_image_index", "=", "(", "\n", "self", ".", "_load_image_set_index", "(", ")", "\n", ")", "# train image name without .jpg", "\n", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "\"comp4\"", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "\n", "\"cleanup\"", ":", "True", ",", "\n", "\"use_salt\"", ":", "True", ",", "\n", "\"use_diff\"", ":", "False", ",", "\n", "\"matlab_eval\"", ":", "False", ",", "\n", "\"rpn_file\"", ":", "None", ",", "\n", "\"min_size\"", ":", "2", ",", "\n", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "_devkit_path", "\n", ")", ",", "\"VOCdevkit path does not exist: {}\"", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "self", ".", "_data_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_at": [[90, 95], ["cityscape.cityscape.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_id_at": [[96, 101], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.image_path_from_index": [[102, 112], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"JPEGImages\"", ",", "index", "+", "self", ".", "_image_ext", "\n", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_image_set_index": [[113, 134], ["os.path.join", "os.path.exists", "open", "f.readlines", "len", "image_index.append", "x.strip"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_data_path", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "self", ".", "_image_set", "+", "\".txt\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "\"Path does not exist: {}\"", ".", "format", "(", "\n", "image_set_file", "\n", ")", "\n", "\n", "image_index", "=", "[", "]", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "print", "(", "\"image_set_file:\"", ",", "image_set_file", ")", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "for", "x", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "x", ")", ">", "1", ":", "\n", "                    ", "image_index", ".", "append", "(", "x", ".", "strip", "(", ")", ")", "\n", "# image_index = [x.strip() for x in f.readlines()]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_default_path": [[135, 140], ["os.path.join"], "methods", ["None"], ["\n", "", "", "", "return", "image_index", "\n", "\n", "", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb": [[141, 161], ["os.path.join", "os.path.exists", "print", "print", "cityscape.cityscape._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation"], ["\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"cityscape\"", ")", "\n", "\n", "", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_gt_roidb.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} gt roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "for", "index", "in", "self", ".", "image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.selective_search_roidb": [[162, 190], ["os.path.join", "os.path.exists", "print", "print", "cityscape.cityscape.gt_roidb", "cityscape.cityscape._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "cityscape.cityscape._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb"], ["", "print", "(", "\"wrote gt roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n", "", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "cache_path", ",", "self", ".", "name", "+", "\"_selective_search_roidb.pkl\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "fidf", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "\"{} ss roidb loaded from {}\"", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.rpn_roidb": [[191, 200], ["cityscape.cityscape.gt_roidb", "cityscape.cityscape._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "cityscape.cityscape._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.gt_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb"], ["", "print", "(", "\"wrote ss roidb to {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n", "", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "\"test\"", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_rpn_roidb": [[201, 208], ["print", "os.path.exists", "cityscape.cityscape.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list"], ["            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n", "", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "\"rpn_file\"", "]", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"rpn data not found at: {}\"", ".", "format", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_selective_search_roidb": [[209, 228], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "cityscape.cityscape.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.ds_utils.filter_small_boxes"], ["with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n", "", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\"selective_search_data\"", ",", "self", ".", "name", "+", "\".mat\"", ")", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "filename", "\n", ")", ",", "\"Selective search data not found at: {}\"", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "\"boxes\"", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "\"min_size\"", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._load_pascal_annotation": [[229, 287], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "print", "print", "input", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n", "", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"Annotations\"", ",", "index", "+", "\".xml\"", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "\"object\"", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "\"difficult\"", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "if", "boxes", "[", "ix", ",", "0", "]", ">", "2048", "or", "boxes", "[", "ix", ",", "1", "]", ">", "1024", ":", "\n", "                ", "print", "(", "boxes", "[", "ix", ",", ":", "]", ")", "\n", "print", "(", "filename", ")", "\n", "p", "=", "input", "(", ")", "\n", "\n", "", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"gt_classes\"", ":", "gt_classes", ",", "\n", "\"gt_ishard\"", ":", "ishards", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id": [[289, 296], ["None"], "methods", ["None"], ["\"flipped\"", ":", "False", ",", "\n", "\"seg_areas\"", ":", "seg_areas", ",", "\n", "}", "\n", "\n", "", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "\n", "self", ".", "_comp_id", "+", "\"_\"", "+", "self", ".", "_salt", "\n", "if", "self", ".", "config", "[", "\"use_salt\"", "]", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template": [[297, 305], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "cityscape.cityscape._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["else", "self", ".", "_comp_id", "\n", ")", "\n", "return", "comp_id", "\n", "\n", "", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "\"_det_\"", "+", "self", ".", "_image_set", "+", "\"_{:s}.txt\"", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"results\"", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Main\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file": [[306, 327], ["enumerate", "print", "cityscape.cityscape._get_voc_results_file_template().format", "open", "enumerate", "cityscape.cityscape._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n", "", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"Writing {} VOC results file\"", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "\"wt\"", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\"", ".", "format", "(", "\n", "index", ",", "\n", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval": [[330, 379], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "cityscape.cityscape._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "cityscape.cityscape._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.voc_eval.voc_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], ["dets", "[", "k", ",", "3", "]", "+", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\"VOC\"", "+", "self", ".", "_year", ",", "\"Annotations\"", ",", "\"{:s}.xml\"", "\n", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "\"VOC\"", "+", "self", ".", "_year", ",", "\n", "\"ImageSets\"", ",", "\n", "\"Main\"", ",", "\n", "self", ".", "_image_set", "+", "\".txt\"", ",", "\n", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "\"annotations_cache\"", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "\"VOC07 metric? \"", "+", "(", "\"Yes\"", "if", "use_07_metric", "else", "\"No\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "\"__background__\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "cls", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "\n", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "\"AP for {} = {:.4f}\"", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "\"_pr.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\"rec\"", ":", "rec", ",", "\"prec\"", ":", "prec", ",", "\"ap\"", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "\"Mean AP = {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"Results:\"", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "\"{:.3f}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "\"{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "\"~~~~~~~~\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Results computed with the **unofficial** Python eval code.\"", ")", "\n", "print", "(", "\"Results should be very close to the official MATLAB eval code.\"", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval": [[380, 393], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "cityscape.cityscape._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_comp_id"], ["print", "(", "\"Recompute with `./tools/reval.py --matlab ...` for your paper.\"", ")", "\n", "print", "(", "\"-- Thanks, The Management\"", ")", "\n", "print", "(", "\"--------------------------------------------------------------\"", ")", "\n", "\n", "", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "\"output\"", ")", ":", "\n", "        ", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "print", "(", "\"Computing results with the official MATLAB eval code.\"", ")", "\n", "print", "(", "\"-----------------------------------------------------\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"lib\"", ",", "\"datasets\"", ",", "\"VOCdevkit-matlab-wrapper\"", ")", "\n", "cmd", "=", "\"cd {} && \"", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "\"{:s} -nodisplay -nodesktop \"", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "\"voc_eval('{:s}','{:s}','{:s}','{:s}'); quit;\\\"\"", ".", "format", "(", "\n", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "self", ".", "_image_set", ",", "output_dir", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.evaluate_detections": [[394, 405], ["cityscape.cityscape._write_voc_results_file", "cityscape.cityscape._do_python_eval", "cityscape.cityscape._do_matlab_eval", "cityscape.cityscape._get_voc_results_file_template().format", "os.remove", "cityscape.cityscape._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._write_voc_results_file", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_python_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._do_matlab_eval", "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape._get_voc_results_file_template"], [")", "\n", "print", "(", "\"Running:\\n{}\"", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "\"matlab_eval\"", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "\"cleanup\"", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "\"__background__\"", ":", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_CR-DA-DET.datasets_origin.cityscape.cityscape.competition_mode": [[406, 413], ["None"], "methods", ["None"], ["                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n", "", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "\"use_salt\"", "]", "=", "False", "\n", "self", ".", "config", "[", "\"cleanup\"", "]", "=", "False", "\n"]]}