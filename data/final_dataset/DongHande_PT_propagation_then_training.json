{"home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.Linear.__init__": [[10, 21], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.Linear.reset_parameters", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.Linear.register_parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.Linear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.Linear.reset_parameters": [[22, 27], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "models.Linear.bias.data.uniform_", "math.sqrt", "math.sqrt", "models.Linear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.Linear.forward": [[28, 35], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "F", ".", "dropout", "(", "input", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.MLP.__init__": [[37, 41], ["torch.Module.__init__", "models.Linear", "models.Linear"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Linear1", "=", "Linear", "(", "nfeat", ",", "nhid", ",", "dropout", ",", "bias", "=", "True", ")", "\n", "self", ".", "Linear2", "=", "Linear", "(", "nhid", ",", "nclass", ",", "dropout", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.MLP.forward": [[42, 45], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.MLP.Linear1", "models.MLP.Linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "relu", "(", "self", ".", "Linear1", "(", "x", ")", ")", "\n", "return", "torch", ".", "log_softmax", "(", "self", ".", "Linear2", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.GCN.__init__": [[47, 51], ["torch.Module.__init__", "models.Linear", "models.Linear"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Linear1", "=", "Linear", "(", "nfeat", ",", "nhid", ",", "dropout", ",", "bias", "=", "True", ")", "\n", "self", ".", "Linear2", "=", "Linear", "(", "nhid", ",", "nclass", ",", "dropout", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.GCN.forward": [[52, 56], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.GCN.Linear2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.GCN.Linear1", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "torch", ".", "relu", "(", "self", ".", "Linear1", "(", "torch", ".", "matmul", "(", "adj", ",", "x", ")", ")", ")", "\n", "h", "=", "self", ".", "Linear2", "(", "torch", ".", "matmul", "(", "adj", ",", "x", ")", ")", "\n", "return", "torch", ".", "log_softmax", "(", "h", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.SGCN.__init__": [[59, 63], ["torch.Module.__init__", "models.Linear"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Linear", "=", "Linear", "(", "nfeat", ",", "nclass", ",", "dropout", ",", "bias", "=", "False", ")", "\n", "self", ".", "x", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.SGCN.forward": [[64, 68], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "models.SGCN.Linear", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "if", "self", ".", "x", "==", "None", ":", "\n", "            ", "self", ".", "x", "=", "torch", ".", "matmul", "(", "adj", ",", "torch", ".", "matmul", "(", "adj", ",", "x", ")", ")", "\n", "", "return", "torch", ".", "log_softmax", "(", "self", ".", "Linear", "(", "self", ".", "x", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.APPNP.__init__": [[70, 76], ["torch.Module.__init__", "models.Linear", "models.Linear"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ",", "K", ",", "alpha", ")", ":", "\n", "        ", "super", "(", "APPNP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Linear1", "=", "Linear", "(", "nfeat", ",", "nhid", ",", "dropout", ",", "bias", "=", "False", ")", "\n", "self", ".", "Linear2", "=", "Linear", "(", "nhid", ",", "nclass", ",", "dropout", ",", "bias", "=", "False", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "K", "=", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.APPNP.forward": [[77, 84], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.APPNP.Linear2", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.APPNP.Linear1", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "torch", ".", "relu", "(", "self", ".", "Linear1", "(", "x", ")", ")", "\n", "h0", "=", "self", ".", "Linear2", "(", "x", ")", "\n", "h", "=", "h0", "\n", "for", "_", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "            ", "h", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "torch", ".", "matmul", "(", "adj", ",", "h", ")", "+", "self", ".", "alpha", "*", "h0", "\n", "", "return", "torch", ".", "log_softmax", "(", "h", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.__init__": [[86, 96], ["torch.Module.__init__", "models.Linear", "models.Linear"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ",", "epsilon", ",", "mode", ",", "K", ",", "alpha", ")", ":", "\n", "# mode: 0-PTS, 1-PTS, 2-PTA", "\n", "        ", "super", "(", "PT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Linear1", "=", "Linear", "(", "nfeat", ",", "nhid", ",", "dropout", ",", "bias", "=", "True", ")", "\n", "self", ".", "Linear2", "=", "Linear", "(", "nhid", ",", "nclass", ",", "dropout", ",", "bias", "=", "True", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "number_class", "=", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.forward": [[97, 100], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.PT.Linear2", "models.PT.Linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "relu", "(", "self", ".", "Linear1", "(", "x", ")", ")", "\n", "return", "self", ".", "Linear2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.loss_function": [[101, 114], ["torch.detach", "torch.detach", "torch.detach", "torch.detach", "torch.detach", "torch.detach", "torch.detach", "torch.detach", "torch.detach", "numpy.log", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "loss_function", "(", "self", ",", "y_hat", ",", "y_soft", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "y_hat_con", "=", "torch", ".", "detach", "(", "torch", ".", "softmax", "(", "y_hat", ",", "dim", "=", "-", "1", ")", ")", "\n", "exp", "=", "np", ".", "log", "(", "epoch", "/", "self", ".", "epsilon", "+", "1", ")", "\n", "if", "self", ".", "mode", "==", "2", ":", "\n", "                ", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "torch", ".", "log_softmax", "(", "y_hat", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "mul", "(", "y_soft", ",", "y_hat_con", "**", "exp", ")", ")", ")", "/", "self", ".", "number_class", "# PTA", "\n", "", "elif", "self", ".", "mode", "==", "1", ":", "\n", "                ", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "torch", ".", "log_softmax", "(", "y_hat", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "mul", "(", "y_soft", ",", "y_hat_con", ")", ")", ")", "/", "self", ".", "number_class", "# PTD", "\n", "", "else", ":", "\n", "                ", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "torch", ".", "log_softmax", "(", "y_hat", ",", "dim", "=", "-", "1", ")", ",", "y_soft", ")", ")", "/", "self", ".", "number_class", "# PTS", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "torch", ".", "log_softmax", "(", "y_hat", ",", "dim", "=", "-", "1", ")", ",", "y_soft", ")", ")", "/", "self", ".", "number_class", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.inference": [[115, 121], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "h", ",", "adj", ")", ":", "\n", "        ", "y0", "=", "torch", ".", "softmax", "(", "h", ",", "dim", "=", "-", "1", ")", "\n", "y", "=", "y0", "\n", "for", "_", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "            ", "y", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "torch", ".", "matmul", "(", "adj", ",", "y", ")", "+", "self", ".", "alpha", "*", "y0", "\n", "", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_PT.train": [[48, 76], ["model.train", "optimizer.zero_grad", "model", "loss_train.backward", "optimizer.step", "utils.accuracy", "model.eval", "model", "utils.accuracy", "print", "model.inference", "model.loss_function", "model.inference", "loss_val.item", "utils.accuracy.item", "model.loss_function", "loss_train.item", "utils.accuracy.item", "loss_val.item", "utils.accuracy.item", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.train", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.inference", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.loss_function", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.inference", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.loss_function"], ["def", "train", "(", "epoch", ")", ":", "\n", "# train model", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ")", "\n", "loss_train", "=", "args", ".", "loss_decay", "*", "model", ".", "loss_function", "(", "y_hat", "=", "output", ",", "y_soft", "=", "y_soft_train", ",", "epoch", "=", "epoch", ")", "+", "args", ".", "weight_decay", "*", "torch", ".", "sum", "(", "model", ".", "Linear1", ".", "weight", "**", "2", ")", "/", "2", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "not", "args", ".", "fast_mode", ":", "\n", "        ", "output", "=", "model", ".", "inference", "(", "output", ",", "adj", ")", "\n", "", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "# Evaluate validation set performance separately,", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ")", "\n", "loss_val", "=", "args", ".", "loss_decay", "*", "model", ".", "loss_function", "(", "y_hat", "=", "output", ",", "y_soft", "=", "y_soft_val", ")", "\n", "if", "not", "args", ".", "fast_mode", ":", "\n", "        ", "output", "=", "model", ".", "inference", "(", "output", ",", "adj", ")", "\n", "", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "print", "(", "'epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "loss_val", ".", "item", "(", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_PT.test": [[77, 88], ["model.eval", "model", "model.inference", "utils.accuracy", "print", "model.loss_function", "loss_test.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.inference", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.models.PT.loss_function"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ")", "\n", "loss_test", "=", "args", ".", "loss_decay", "*", "model", ".", "loss_function", "(", "y_hat", "=", "output", ",", "y_soft", "=", "y_soft_test", ")", "\n", "\n", "output", "=", "model", ".", "inference", "(", "output", ",", "adj", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.early_stop.EarlyStopping.__init__": [[22, 45], ["copy.copy", "early_stop.EarlyStopping.stop_vars.append", "early_stop.EarlyStopping.comp_ops.append", "early_stop.EarlyStopping.best_vals.append", "early_stop.EarlyStopping.stop_vars.append", "early_stop.EarlyStopping.comp_ops.append", "early_stop.EarlyStopping.best_vals.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ":", "Module", ",", "stop_varnames", ":", "List", "[", "StopVariable", "]", ",", "\n", "patience", ":", "int", "=", "10", ",", "max_epochs", ":", "int", "=", "200", ",", "remember", ":", "Best", "=", "Best", ".", "ALL", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "comp_ops", "=", "[", "]", "\n", "self", ".", "stop_vars", "=", "[", "]", "\n", "self", ".", "best_vals", "=", "[", "]", "\n", "for", "stop_varname", "in", "stop_varnames", ":", "\n", "            ", "if", "stop_varname", "is", "StopVariable", ".", "LOSS", ":", "\n", "                ", "self", ".", "stop_vars", ".", "append", "(", "'loss'", ")", "\n", "self", ".", "comp_ops", ".", "append", "(", "operator", ".", "le", ")", "\n", "self", ".", "best_vals", ".", "append", "(", "np", ".", "inf", ")", "\n", "", "elif", "stop_varname", "is", "StopVariable", ".", "ACCURACY", ":", "\n", "                ", "self", ".", "stop_vars", ".", "append", "(", "'acc'", ")", "\n", "self", ".", "comp_ops", ".", "append", "(", "operator", ".", "ge", ")", "\n", "self", ".", "best_vals", ".", "append", "(", "-", "np", ".", "inf", ")", "\n", "", "", "self", ".", "remember", "=", "remember", "\n", "self", ".", "remembered_vals", "=", "copy", ".", "copy", "(", "self", ".", "best_vals", ")", "\n", "self", ".", "max_patience", "=", "patience", "\n", "self", ".", "patience", "=", "self", ".", "max_patience", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "best_epoch", "=", "None", "\n", "self", ".", "best_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.early_stop.EarlyStopping.check": [[46, 81], ["any", "numpy.choose", "enumerate", "all", "enumerate", "copy.copy", "enumerate", "value.cpu", "early_stop.EarlyStopping.model.state_dict().items", "copy.copy", "early_stop.EarlyStopping.model.state_dict", "value.cpu", "early_stop.EarlyStopping.model.state_dict().items", "early_stop.EarlyStopping.model.state_dict"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "values", ":", "List", "[", "np", ".", "floating", "]", ",", "epoch", ":", "int", ")", "->", "bool", ":", "\n", "        ", "checks", "=", "[", "self", ".", "comp_ops", "[", "i", "]", "(", "val", ",", "self", ".", "best_vals", "[", "i", "]", ")", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "values", ")", "]", "\n", "if", "any", "(", "checks", ")", ":", "\n", "            ", "self", ".", "best_vals", "=", "np", ".", "choose", "(", "checks", ",", "[", "self", ".", "best_vals", ",", "values", "]", ")", "\n", "self", ".", "patience", "=", "self", ".", "max_patience", "\n", "\n", "comp_remembered", "=", "[", "\n", "self", ".", "comp_ops", "[", "i", "]", "(", "val", ",", "self", ".", "remembered_vals", "[", "i", "]", ")", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "values", ")", "]", "\n", "if", "self", ".", "remember", "is", "Best", ".", "ALL", ":", "\n", "                ", "if", "all", "(", "comp_remembered", ")", ":", "\n", "                    ", "self", ".", "best_epoch", "=", "epoch", "\n", "self", ".", "remembered_vals", "=", "copy", ".", "copy", "(", "values", ")", "\n", "self", ".", "best_state", "=", "{", "\n", "key", ":", "value", ".", "cpu", "(", ")", "for", "key", ",", "value", "\n", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "", "", "elif", "self", ".", "remember", "is", "Best", ".", "RANKED", ":", "\n", "                ", "for", "i", ",", "comp", "in", "enumerate", "(", "comp_remembered", ")", ":", "\n", "                    ", "if", "comp", ":", "\n", "                        ", "if", "not", "(", "self", ".", "remembered_vals", "[", "i", "]", "==", "values", "[", "i", "]", ")", ":", "\n", "                            ", "self", ".", "best_epoch", "=", "epoch", "\n", "self", ".", "remembered_vals", "=", "copy", ".", "copy", "(", "values", ")", "\n", "self", ".", "best_state", "=", "{", "\n", "key", ":", "value", ".", "cpu", "(", ")", "for", "key", ",", "value", "\n", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "# print('**********')", "\n", "break", "\n", "# else:", "\n", "#     print('$$$$$$$$$$')", "\n", "", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "", "", "else", ":", "\n", "            ", "self", ".", "patience", "-=", "1", "\n", "", "return", "self", ".", "patience", "==", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.early_stop.Stop_args": [[18, 20], ["dict"], "function", ["None"], ["", "def", "Stop_args", "(", "patience", "=", "100", ",", "max_epochs", "=", "2000", ")", ":", "\n", "    ", "return", "dict", "(", "stop_varnames", "=", "[", "StopVariable", ".", "ACCURACY", ",", "StopVariable", ".", "LOSS", "]", ",", "patience", "=", "patience", ",", "max_epochs", "=", "max_epochs", ",", "remember", "=", "Best", ".", "RANKED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.arguments.parse_args": [[4, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.arguments.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cora_ml'", ",", "\n", "help", "=", "'Choose from {cora_ml, citeseer, pubmed, ms_academic}'", ")", "\n", "parser", ".", "add_argument", "(", "'--K'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'the depth of appnp and ptt when training'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'the alpha of appnp and ptt when training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'Dropout rate (1 - keep probability).'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "\n", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Number of hidden units.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'Set weight decay.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_decay'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'Set loss_decay.'", ")", "\n", "parser", ".", "add_argument", "(", "'--fast_mode'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether propogate when validation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'For PT: 0-static(PTS); 1-dynamic(PTD); 2-adaptive(PTA).'", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'Set importance change of f(x).'", ")", "\n", "parser", ".", "add_argument", "(", "'--str_noise_rate'", ",", "type", "=", "float", ",", "default", "=", "2.0", ",", "\n", "help", "=", "'change the structure noise rate. Set it as 2.0 to keep the original noise rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lbl_noise_num'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'change the lbl noise num. Set it as 0 to keep the original noise rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Patience'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2144199737", ",", "help", "=", "'Random seed for split data.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ini_seed'", ",", "type", "=", "int", ",", "default", "=", "2144199730", ",", "help", "=", "'Random seed to initialize parameters.'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_GCN.train": [[38, 62], ["model.train", "optimizer.zero_grad", "model", "loss_train.backward", "optimizer.step", "utils.accuracy", "model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "torch.nll_loss", "F.nll_loss.item", "utils.accuracy.item", "loss_train.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.train", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "+", "args", ".", "weight_decay", "*", "torch", ".", "sum", "(", "model", ".", "Linear1", ".", "weight", "**", "2", ")", "/", "2", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "# Evaluate validation set performance separately,", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "\n", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "loss_val", ".", "item", "(", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_GCN.test": [[63, 71], ["model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "F.nll_loss.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_MLP.train": [[38, 62], ["model.train", "optimizer.zero_grad", "model", "loss_train.backward", "optimizer.step", "utils.accuracy", "model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "torch.nll_loss", "F.nll_loss.item", "utils.accuracy.item", "loss_train.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.train", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "+", "args", ".", "weight_decay", "*", "torch", ".", "sum", "(", "model", ".", "Linear1", ".", "weight", "**", "2", ")", "/", "2", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "# Evaluate validation set performance separately,", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ")", "\n", "\n", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "loss_val", ".", "item", "(", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_MLP.test": [[63, 71], ["model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "F.nll_loss.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_APPNP.train": [[40, 64], ["model.train", "optimizer.zero_grad", "model", "loss_train.backward", "optimizer.step", "utils.accuracy", "model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "torch.nll_loss", "F.nll_loss.item", "utils.accuracy.item", "loss_train.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.train", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "+", "args", ".", "weight_decay", "*", "torch", ".", "sum", "(", "model", ".", "Linear1", ".", "weight", "**", "2", ")", "/", "2", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "# Evaluate validation set performance separately,", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "\n", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "loss_val", ".", "item", "(", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_APPNP.test": [[65, 73], ["model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "F.nll_loss.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.train": [[37, 61], ["model.train", "optimizer.zero_grad", "model", "loss_train.backward", "optimizer.step", "utils.accuracy", "model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "torch.nll_loss", "F.nll_loss.item", "utils.accuracy.item", "loss_train.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.train", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "+", "args", ".", "weight_decay", "*", "torch", ".", "sum", "(", "model", ".", "Linear", ".", "weight", "**", "2", ")", "/", "2", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "# Evaluate validation set performance separately,", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "\n", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "loss_val", ".", "item", "(", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.train_SGC.test": [[62, 70], ["model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "F.nll_loss.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.known_unknown_split": [[9, 15], ["numpy.random.RandomState", "np.random.RandomState.choice", "utils.exclude_idx"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.exclude_idx"], ["def", "known_unknown_split", "(", "\n", "idx", ":", "np", ".", "ndarray", ",", "nknown", ":", "int", "=", "1500", ",", "seed", ":", "int", "=", "4143496719", ")", ":", "\n", "    ", "rnd_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "known_idx", "=", "rnd_state", ".", "choice", "(", "idx", ",", "nknown", ",", "replace", "=", "False", ")", "\n", "unknown_idx", "=", "exclude_idx", "(", "idx", ",", "[", "known_idx", "]", ")", "\n", "return", "known_idx", ",", "unknown_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.exclude_idx": [[16, 19], ["numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "exclude_idx", "(", "idx", ":", "np", ".", "ndarray", ",", "idx_exclude_list", ")", ":", "\n", "    ", "idx_exclude", "=", "np", ".", "concatenate", "(", "idx_exclude_list", ")", "\n", "return", "np", ".", "array", "(", "[", "i", "for", "i", "in", "idx", "if", "i", "not", "in", "idx_exclude", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.train_stopping_split": [[20, 33], ["numpy.random.RandomState", "range", "numpy.concatenate", "np.random.RandomState.choice", "train_idx_split.append", "utils.exclude_idx", "max", "np.random.RandomState.choice"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.exclude_idx"], ["", "def", "train_stopping_split", "(", "\n", "idx", ":", "np", ".", "ndarray", ",", "labels", ":", "np", ".", "ndarray", ",", "ntrain_per_class", ":", "int", "=", "20", ",", "\n", "nstopping", ":", "int", "=", "500", ",", "seed", ":", "int", "=", "2413340114", ")", ":", "\n", "    ", "rnd_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "train_idx_split", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max", "(", "labels", ")", "+", "1", ")", ":", "\n", "        ", "train_idx_split", ".", "append", "(", "rnd_state", ".", "choice", "(", "\n", "idx", "[", "labels", "==", "i", "]", ",", "ntrain_per_class", ",", "replace", "=", "False", ")", ")", "\n", "", "train_idx", "=", "np", ".", "concatenate", "(", "train_idx_split", ")", "\n", "stopping_idx", "=", "rnd_state", ".", "choice", "(", "\n", "exclude_idx", "(", "idx", ",", "[", "train_idx", "]", ")", ",", "\n", "nstopping", ",", "replace", "=", "False", ")", "\n", "return", "train_idx", ",", "stopping_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.gen_splits": [[34, 49], ["numpy.arange", "utils.known_unknown_split", "numpy.unique", "copy.copy", "utils.train_stopping_split", "len", "utils.exclude_idx"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.known_unknown_split", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.train_stopping_split", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.exclude_idx"], ["", "def", "gen_splits", "(", "labels", ":", "np", ".", "ndarray", ",", "idx_split_args", ",", "\n", "test", ":", "bool", "=", "False", ")", ":", "\n", "    ", "all_idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "known_idx", ",", "unknown_idx", "=", "known_unknown_split", "(", "\n", "all_idx", ",", "idx_split_args", "[", "'nknown'", "]", ")", "\n", "_", ",", "cnts", "=", "np", ".", "unique", "(", "labels", "[", "known_idx", "]", ",", "return_counts", "=", "True", ")", "\n", "stopping_split_args", "=", "copy", ".", "copy", "(", "idx_split_args", ")", "\n", "del", "stopping_split_args", "[", "'nknown'", "]", "\n", "train_idx", ",", "stopping_idx", "=", "train_stopping_split", "(", "\n", "known_idx", ",", "labels", "[", "known_idx", "]", ",", "**", "stopping_split_args", ")", "\n", "if", "test", ":", "\n", "        ", "val_idx", "=", "unknown_idx", "\n", "", "else", ":", "\n", "        ", "val_idx", "=", "exclude_idx", "(", "known_idx", ",", "[", "train_idx", ",", "stopping_idx", "]", ")", "\n", "", "return", "train_idx", ",", "stopping_idx", ",", "val_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.load_data": [[50, 78], ["data.load_dataset", "io.load_dataset.standardize", "utils.normalize_features", "torch.FloatTensor", "torch.FloatTensor", "utils.str_noise", "utils.normalize_adj", "utils.sparse_mx_to_torch_sparse_tensor", "utils.gen_splits", "utils.add_label_noise", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.array", "scipy.eye", "torch.FloatTensor.todense"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.io.load_dataset", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.standardize", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.normalize_features", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.str_noise", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.normalize_adj", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.gen_splits", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.add_label_noise"], ["", "def", "load_data", "(", "graph_name", "=", "'cora_ml'", ",", "lbl_noise", "=", "0", ",", "str_noise_rate", "=", "0.1", ",", "seed", "=", "2144199730", ")", ":", "\n", "    ", "dataset", "=", "io", ".", "load_dataset", "(", "graph_name", ")", "\n", "dataset", ".", "standardize", "(", "select_lcc", "=", "True", ")", "\n", "features", "=", "dataset", ".", "attr_matrix", "\n", "features", "=", "normalize_features", "(", "features", ")", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "# features = sparse_mx_to_torch_sparse_tensor(features)", "\n", "labels", "=", "dataset", ".", "labels", "\n", "adj", "=", "dataset", ".", "adj_matrix", "\n", "adj", "=", "str_noise", "(", "adj", ",", "labels", ",", "str_noise_rate", ",", "seed", ")", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "adj", "=", "normalize_adj", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "if", "graph_name", "==", "'ms_academic'", ":", "\n", "        ", "idx_split_args", "=", "{", "'ntrain_per_class'", ":", "20", ",", "'nstopping'", ":", "500", ",", "'nknown'", ":", "5000", ",", "'seed'", ":", "seed", "}", "\n", "", "else", ":", "\n", "        ", "idx_split_args", "=", "{", "'ntrain_per_class'", ":", "20", ",", "'nstopping'", ":", "500", ",", "'nknown'", ":", "1500", ",", "'seed'", ":", "seed", "}", "\n", "", "idx_train", ",", "idx_val", ",", "idx_test", "=", "gen_splits", "(", "labels", ",", "idx_split_args", ",", "test", "=", "True", ")", "\n", "\n", "labels", "=", "add_label_noise", "(", "idx_train", ",", "labels", ",", "lbl_noise", ",", "seed", ")", "\n", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.normalize_features": [[79, 87], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize_features", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.normalize_adj": [[88, 96], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().dot", "r_mat_inv.dot().dot.sum", "numpy.power", "numpy.isinf", "sp.diags.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-column-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", ".", "dot", "(", "r_mat_inv", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.accuracy": [[97, 102], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.sparse_mx_to_torch_sparse_tensor": [[103, 111], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.Size", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.label_propagation": [[112, 124], ["torch.zeros", "torch.zeros", "range", "torch.matmul", "torch.matmul", "torch.one_hot", "torch.tensor", "torch.tensor", "labels.max().item", "labels[].cpu().numpy().astype", "labels.max().item", "labels.max", "labels[].cpu().numpy", "labels.max", "labels[].cpu"], "function", ["None"], ["", "def", "label_propagation", "(", "adj", ",", "labels", ",", "idx", ",", "K", ",", "alpha", ")", ":", "\n", "    ", "y0", "=", "torch", ".", "zeros", "(", "size", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", ")", "\n", "for", "i", "in", "idx", ":", "\n", "        ", "y0", "[", "i", "]", "[", "labels", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "", "y", "=", "y0", "\n", "for", "_", "in", "range", "(", "K", ")", ":", "\n", "        ", "y", "=", "torch", ".", "matmul", "(", "adj", ",", "y", ")", "\n", "for", "i", "in", "idx", ":", "\n", "            ", "y", "[", "i", "]", "=", "F", ".", "one_hot", "(", "torch", ".", "tensor", "(", "labels", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", ",", "labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "", "y", "=", "(", "1", "-", "alpha", ")", "*", "y", "+", "alpha", "*", "y0", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.add_label_noise": [[125, 135], ["random.seed", "range", "max", "random.sample", "random.sample", "range", "range", "max"], "function", ["None"], ["", "def", "add_label_noise", "(", "idx_train", ",", "labels", ",", "noise_num", ",", "seed", ")", ":", "\n", "    ", "if", "noise_num", "==", "None", ":", "\n", "        ", "return", "labels", "\n", "", "random", ".", "seed", "(", "seed", ")", "\n", "for", "c", "in", "range", "(", "max", "(", "labels", ")", "+", "1", ")", ":", "\n", "        ", "sele_idx", "=", "[", "i", "+", "c", "*", "20", "for", "i", "in", "random", ".", "sample", "(", "range", "(", "20", ")", ",", "noise_num", ")", "]", "\n", "for", "i", "in", "sele_idx", ":", "\n", "            ", "re_lb", "=", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "range", "(", "max", "(", "labels", ")", "+", "1", ")", "if", "i", "!=", "c", "]", ",", "1", ")", "\n", "labels", "[", "idx_train", "[", "i", "]", "]", "=", "re_lb", "[", "0", "]", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.str_noise": [[136, 212], ["numpy.arange", "adj.tocoo().astype.tocoo().astype", "numpy.arange", "numpy.random.RandomState", "random.seed", "len", "numpy.arange", "len", "len", "len", "int", "np.random.RandomState.choice", "int", "np.random.RandomState.choice", "adj.tocoo().astype.tocoo", "len", "len", "random.random", "np.random.RandomState.choice", "range", "np.random.RandomState.choice", "range", "len", "random.random", "np.random.RandomState.choice", "range", "np.random.RandomState.choice", "range", "len", "len", "len", "len"], "function", ["None"], ["", "def", "str_noise", "(", "adj", ",", "labels", ",", "noise_rate", ",", "seed", "=", "0", ")", ":", "\n", "    ", "if", "noise_rate", ">", "1.0", ":", "\n", "        ", "return", "adj", "\n", "", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "adj", "=", "adj", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "row", "=", "adj", ".", "row", "\n", "col", "=", "adj", ".", "col", "\n", "\n", "upper_edge", "=", "np", ".", "arange", "(", "len", "(", "row", ")", ")", "[", "row", "<", "col", "]", "\n", "idx_upper_edge", "=", "np", ".", "arange", "(", "len", "(", "upper_edge", ")", ")", "\n", "good_edge_idx", "=", "idx_upper_edge", "[", "labels", "[", "row", "[", "upper_edge", "]", "]", "==", "labels", "[", "col", "[", "upper_edge", "]", "]", "]", "\n", "bad_edge_idx", "=", "idx_upper_edge", "[", "labels", "[", "row", "[", "upper_edge", "]", "]", "!=", "labels", "[", "col", "[", "upper_edge", "]", "]", "]", "\n", "\n", "origin_noise_rate", "=", "len", "(", "bad_edge_idx", ")", "/", "len", "(", "idx_upper_edge", ")", "\n", "\n", "rnd_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "if", "origin_noise_rate", ">", "noise_rate", ":", "\n", "        ", "sub_num", "=", "int", "(", "len", "(", "upper_edge", ")", "*", "(", "origin_noise_rate", "-", "noise_rate", ")", ")", "\n", "inv_idx", "=", "rnd_state", ".", "choice", "(", "bad_edge_idx", ",", "sub_num", ",", "replace", "=", "False", ")", "\n", "for", "i", "in", "inv_idx", ":", "\n", "            ", "row_i", "=", "row", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "\n", "col_i", "=", "col", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "lbl", "=", "labels", "[", "row_i", "]", "\n", "col_new", "=", "rnd_state", ".", "choice", "(", "idx", "[", "labels", "==", "lbl", "]", ",", "2", ",", "replace", "=", "False", ")", "\n", "if", "col_new", "[", "0", "]", "!=", "row_i", ":", "\n", "                    ", "col_new", "=", "col_new", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "col_new", "=", "col_new", "[", "1", "]", "\n", "", "col", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "=", "col_new", "\n", "for", "j", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "                    ", "if", "row", "[", "j", "]", "==", "col_i", "and", "col", "[", "j", "]", "==", "row_i", ":", "\n", "                        ", "row", "[", "j", "]", "=", "col_new", "\n", "break", "\n", "", "", "", "else", ":", "\n", "                ", "lbl", "=", "labels", "[", "col_i", "]", "\n", "row_new", "=", "rnd_state", ".", "choice", "(", "idx", "[", "labels", "==", "lbl", "]", ",", "2", ",", "replace", "=", "False", ")", "\n", "if", "row_new", "[", "0", "]", "!=", "col_i", ":", "\n", "                    ", "row_new", "=", "row_new", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "row_new", "=", "row_new", "[", "1", "]", "\n", "", "row", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "=", "row_new", "\n", "for", "j", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "                    ", "if", "row", "[", "j", "]", "==", "col_i", "and", "col", "[", "j", "]", "==", "row_i", ":", "\n", "                        ", "col", "[", "j", "]", "=", "row_new", "\n", "break", "\n", "", "", "", "", "", "else", ":", "\n", "        ", "add_num", "=", "int", "(", "len", "(", "upper_edge", ")", "*", "(", "noise_rate", "-", "origin_noise_rate", ")", ")", "\n", "inv_idx", "=", "rnd_state", ".", "choice", "(", "good_edge_idx", ",", "add_num", ",", "replace", "=", "False", ")", "\n", "for", "i", "in", "inv_idx", ":", "\n", "            ", "row_i", "=", "row", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "\n", "col_i", "=", "col", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "lbl", "=", "labels", "[", "row_i", "]", "\n", "col_new", "=", "rnd_state", ".", "choice", "(", "idx", "[", "labels", "!=", "lbl", "]", ",", "1", ",", "replace", "=", "False", ")", "\n", "col_new", "=", "col_new", "[", "0", "]", "\n", "col", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "=", "col_new", "\n", "for", "j", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "                    ", "if", "row", "[", "j", "]", "==", "col_i", "and", "col", "[", "j", "]", "==", "row_i", ":", "\n", "                        ", "row", "[", "j", "]", "=", "col_new", "\n", "break", "\n", "", "", "", "else", ":", "\n", "                ", "lbl", "=", "labels", "[", "col_i", "]", "\n", "row_new", "=", "rnd_state", ".", "choice", "(", "idx", "[", "labels", "!=", "lbl", "]", ",", "1", ",", "replace", "=", "False", ")", "\n", "row_new", "=", "row_new", "[", "0", "]", "\n", "row", "[", "[", "upper_edge", "[", "i", "]", "]", "]", "=", "row_new", "\n", "for", "j", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "                    ", "if", "row", "[", "j", "]", "==", "col_i", "and", "col", "[", "j", "]", "==", "row_i", ":", "\n", "                        ", "col", "[", "j", "]", "=", "row_new", "\n", "break", "\n", "\n", "", "", "", "", "", "adj", ".", "row", "=", "row", "\n", "adj", ".", "col", "=", "col", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.None.utils.get_noise_rate": [[213, 224], ["adj._indices().numpy", "numpy.transpose", "adj._indices", "labels[].item", "labels[].item"], "function", ["None"], ["", "def", "get_noise_rate", "(", "adj", ",", "labels", ")", ":", "\n", "    ", "indices", "=", "adj", ".", "_indices", "(", ")", ".", "numpy", "(", ")", "\n", "upper", "=", "indices", "[", "0", ",", ":", "]", ">", "indices", "[", "1", ",", ":", "]", "\n", "upper_indices", "=", "indices", "[", ":", ",", "upper", "]", "\n", "\n", "bad_num", "=", "0", "\n", "for", "(", "i", ",", "j", ")", "in", "np", ".", "transpose", "(", "upper_indices", ")", ":", "\n", "        ", "if", "labels", "[", "i", "]", ".", "item", "(", ")", "!=", "labels", "[", "j", "]", ".", "item", "(", ")", ":", "\n", "            ", "bad_num", "+=", "1", "\n", "\n", "", "", "return", "bad_num", "/", "upper_indices", ".", "shape", "[", "1", "]", "", "", ""]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.io.load_from_npz": [[12, 30], ["numpy.load", "dict", "sparsegraph.SparseGraph.from_flat_dict"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.from_flat_dict"], ["def", "load_from_npz", "(", "file_name", ":", "str", ")", "->", "SparseGraph", ":", "\n", "    ", "\"\"\"Load a SparseGraph from a Numpy binary file.\n\n    Parameters\n    ----------\n    file_name\n        Name of the file to load.\n\n    Returns\n    -------\n    SparseGraph\n        Graph in sparse matrix format.\n\n    \"\"\"", "\n", "with", "np", ".", "load", "(", "file_name", ",", "allow_pickle", "=", "True", ")", "as", "loader", ":", "\n", "        ", "loader", "=", "dict", "(", "loader", ")", "\n", "dataset", "=", "SparseGraph", ".", "from_flat_dict", "(", "loader", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.io.load_dataset": [[32, 59], ["isinstance", "path_to_file.exists", "pathlib.Path", "name.endswith", "io.load_from_npz", "ValueError"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.io.load_from_npz"], ["", "def", "load_dataset", "(", "name", ":", "str", ",", "\n", "directory", ":", "Union", "[", "Path", ",", "str", "]", "=", "data_dir", "\n", ")", "->", "SparseGraph", ":", "\n", "    ", "\"\"\"Load a dataset.\n\n    Parameters\n    ----------\n    name\n        Name of the dataset to load.\n    directory\n        Path to the directory where the datasets are stored.\n\n    Returns\n    -------\n    SparseGraph\n        The requested dataset in sparse format.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "directory", ",", "str", ")", ":", "\n", "        ", "directory", "=", "Path", "(", "directory", ")", "\n", "", "if", "not", "name", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "name", "+=", "'.npz'", "\n", "", "path_to_file", "=", "directory", "/", "name", "\n", "if", "path_to_file", ".", "exists", "(", ")", ":", "\n", "        ", "return", "load_from_npz", "(", "path_to_file", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"{} doesn't exist.\"", ".", "format", "(", "path_to_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.io.networkx_to_sparsegraph": [[61, 174], ["nx.adjacency_matrix", "set", "nx.convert_node_labels_to_integers.nodes().data", "nx.convert_node_labels_to_integers.nodes.data", "sparsegraph.SparseGraph", "isinstance", "numpy.array", "nx.convert_node_labels_to_integers", "set.update", "set.remove", "len", "all", "node_attrs.items", "np.zeros.tocsr", "nx.convert_node_labels_to_integers.nodes", "node_data.keys", "ValueError", "numpy.array", "scipy.lil_matrix", "numpy.zeros", "numpy.array", "range", "isinstance", "list", "numpy.unique", "numpy.empty", "enumerate", "nx.convert_node_labels_to_integers.number_of_nodes", "enumerate", "nx.convert_node_labels_to_integers.number_of_nodes", "len", "nx.convert_node_labels_to_integers.number_of_nodes", "len", "isinstance", "nx.convert_node_labels_to_integers.number_of_nodes", "ValueError", "ValueError", "enumerate"], "function", ["None"], ["", "", "def", "networkx_to_sparsegraph", "(", "\n", "nx_graph", ":", "Union", "[", "'nx.Graph'", ",", "'nx.DiGraph'", "]", ",", "\n", "label_name", ":", "str", "=", "None", ",", "\n", "sparse_node_attrs", ":", "bool", "=", "True", ",", "\n", "sparse_edge_attrs", ":", "bool", "=", "True", "\n", ")", "->", "'SparseGraph'", ":", "\n", "    ", "\"\"\"Convert NetworkX graph to SparseGraph.\n\n    Node attributes need to be numeric.\n    Missing entries are interpreted as 0.\n    Labels can be any object. If non-numeric they are interpreted as\n    categorical and enumerated.\n\n    This ignores all edge attributes except the edge weights.\n\n    Parameters\n    ----------\n    nx_graph\n        Graph to convert.\n\n    Returns\n    -------\n    SparseGraph\n        Converted graph.\n\n    \"\"\"", "\n", "import", "networkx", "as", "nx", "\n", "\n", "# Extract node names", "\n", "int_names", "=", "True", "\n", "for", "node", "in", "nx_graph", ".", "nodes", ":", "\n", "        ", "int_names", "&=", "isinstance", "(", "node", ",", "int", ")", "\n", "", "if", "int_names", ":", "\n", "        ", "node_names", "=", "None", "\n", "", "else", ":", "\n", "        ", "node_names", "=", "np", ".", "array", "(", "nx_graph", ".", "nodes", ")", "\n", "nx_graph", "=", "nx", ".", "convert_node_labels_to_integers", "(", "nx_graph", ")", "\n", "\n", "# Extract adjacency matrix", "\n", "", "adj_matrix", "=", "nx", ".", "adjacency_matrix", "(", "nx_graph", ")", "\n", "\n", "# Collect all node attribute names", "\n", "attrs", "=", "set", "(", ")", "\n", "for", "_", ",", "node_data", "in", "nx_graph", ".", "nodes", "(", ")", ".", "data", "(", ")", ":", "\n", "        ", "attrs", ".", "update", "(", "node_data", ".", "keys", "(", ")", ")", "\n", "\n", "# Initialize labels and remove them from the attribute names", "\n", "", "if", "label_name", "is", "None", ":", "\n", "        ", "labels", "=", "None", "\n", "", "else", ":", "\n", "        ", "if", "label_name", "not", "in", "attrs", ":", "\n", "            ", "raise", "ValueError", "(", "\"No attribute with label name '{}' found.\"", ".", "format", "(", "label_name", ")", ")", "\n", "", "attrs", ".", "remove", "(", "label_name", ")", "\n", "labels", "=", "[", "0", "for", "_", "in", "range", "(", "nx_graph", ".", "number_of_nodes", "(", ")", ")", "]", "\n", "\n", "", "if", "len", "(", "attrs", ")", ">", "0", ":", "\n", "# Save attribute names if not integer", "\n", "        ", "all_integer", "=", "all", "(", "(", "isinstance", "(", "attr", ",", "int", ")", "for", "attr", "in", "attrs", ")", ")", "\n", "if", "all_integer", ":", "\n", "            ", "attr_names", "=", "None", "\n", "attr_mapping", "=", "None", "\n", "", "else", ":", "\n", "            ", "attr_names", "=", "np", ".", "array", "(", "list", "(", "attrs", ")", ")", "\n", "attr_mapping", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "attr_names", ")", "}", "\n", "\n", "# Initialize attribute matrix", "\n", "", "if", "sparse_node_attrs", ":", "\n", "            ", "attr_matrix", "=", "sp", ".", "lil_matrix", "(", "(", "nx_graph", ".", "number_of_nodes", "(", ")", ",", "len", "(", "attr_names", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "attr_matrix", "=", "np", ".", "zeros", "(", "(", "nx_graph", ".", "number_of_nodes", "(", ")", ",", "len", "(", "attr_names", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "        ", "attr_matrix", "=", "None", "\n", "attr_names", "=", "None", "\n", "\n", "# Fill label and attribute matrices", "\n", "", "for", "inode", ",", "node_attrs", "in", "nx_graph", ".", "nodes", ".", "data", "(", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "node_attrs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "label_name", ":", "\n", "                ", "labels", "[", "inode", "]", "=", "val", "\n", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "val", ",", "Number", ")", ":", "\n", "                    ", "if", "node_names", "is", "None", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Node {} has attribute '{}' with value '{}', which is not a number.\"", "\n", ".", "format", "(", "inode", ",", "key", ",", "val", ")", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Node '{}' has attribute '{}' with value '{}', which is not a number.\"", "\n", ".", "format", "(", "node_names", "[", "inode", "]", ",", "key", ",", "val", ")", ")", "\n", "", "", "if", "attr_mapping", "is", "None", ":", "\n", "                    ", "attr_matrix", "[", "inode", ",", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "                    ", "attr_matrix", "[", "inode", ",", "attr_mapping", "[", "key", "]", "]", "=", "val", "\n", "", "", "", "", "if", "attr_matrix", "is", "not", "None", "and", "sparse_node_attrs", ":", "\n", "        ", "attr_matrix", "=", "attr_matrix", ".", "tocsr", "(", ")", "\n", "\n", "# Convert labels to integers", "\n", "", "if", "labels", "is", "None", ":", "\n", "        ", "class_names", "=", "None", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "labels", "=", "np", ".", "array", "(", "labels", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "class_names", "=", "None", "\n", "", "except", "ValueError", ":", "\n", "            ", "class_names", "=", "np", ".", "unique", "(", "labels", ")", "\n", "class_mapping", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "class_names", ")", "}", "\n", "labels_int", "=", "np", ".", "empty", "(", "nx_graph", ".", "number_of_nodes", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "inode", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "labels_int", "[", "inode", "]", "=", "class_mapping", "[", "label", "]", "\n", "", "labels", "=", "labels_int", "\n", "\n", "", "", "return", "SparseGraph", "(", "\n", "adj_matrix", "=", "adj_matrix", ",", "attr_matrix", "=", "attr_matrix", ",", "labels", "=", "labels", ",", "\n", "node_names", "=", "node_names", ",", "attr_names", "=", "attr_names", ",", "class_names", "=", "class_names", ",", "\n", "metadata", "=", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__init__": [[36, 85], ["scipy.isspmatrix", "adj_matrix.tocsr().astype.tocsr().astype.tocsr().astype", "ValueError", "ValueError", "scipy.isspmatrix", "attr_matrix.astype.astype.tocsr().astype", "isinstance", "ValueError", "ValueError", "len", "ValueError", "len", "ValueError", "adj_matrix.tocsr().astype.tocsr().astype.tocsr", "type", "attr_matrix.astype.astype.astype", "ValueError", "attr_matrix.astype.astype.tocsr", "type"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "adj_matrix", ":", "sp", ".", "spmatrix", ",", "\n", "attr_matrix", ":", "Union", "[", "np", ".", "ndarray", ",", "sp", ".", "spmatrix", "]", "=", "None", ",", "\n", "labels", ":", "Union", "[", "np", ".", "ndarray", ",", "sp", ".", "spmatrix", "]", "=", "None", ",", "\n", "node_names", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "attr_names", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "class_names", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "metadata", ":", "Any", "=", "None", ")", ":", "\n", "# Make sure that the dimensions of matrices / arrays all agree", "\n", "        ", "if", "sp", ".", "isspmatrix", "(", "adj_matrix", ")", ":", "\n", "            ", "adj_matrix", "=", "adj_matrix", ".", "tocsr", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Adjacency matrix must be in sparse format (got {0} instead).\"", "\n", ".", "format", "(", "type", "(", "adj_matrix", ")", ")", ")", "\n", "\n", "", "if", "adj_matrix", ".", "shape", "[", "0", "]", "!=", "adj_matrix", ".", "shape", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Dimensions of the adjacency matrix don't agree.\"", ")", "\n", "\n", "", "if", "attr_matrix", "is", "not", "None", ":", "\n", "            ", "if", "sp", ".", "isspmatrix", "(", "attr_matrix", ")", ":", "\n", "                ", "attr_matrix", "=", "attr_matrix", ".", "tocsr", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "isinstance", "(", "attr_matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "attr_matrix", "=", "attr_matrix", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Attribute matrix must be a sp.spmatrix or a np.ndarray (got {0} instead).\"", "\n", ".", "format", "(", "type", "(", "attr_matrix", ")", ")", ")", "\n", "\n", "", "if", "attr_matrix", ".", "shape", "[", "0", "]", "!=", "adj_matrix", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Dimensions of the adjacency and attribute matrices don't agree.\"", ")", "\n", "\n", "", "", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "labels", ".", "shape", "[", "0", "]", "!=", "adj_matrix", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Dimensions of the adjacency matrix and the label vector don't agree.\"", ")", "\n", "\n", "", "", "if", "node_names", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "node_names", ")", "!=", "adj_matrix", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Dimensions of the adjacency matrix and the node names don't agree.\"", ")", "\n", "\n", "", "", "if", "attr_names", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "attr_names", ")", "!=", "attr_matrix", ".", "shape", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Dimensions of the attribute matrix and the attribute names don't agree.\"", ")", "\n", "\n", "", "", "self", ".", "adj_matrix", "=", "adj_matrix", "\n", "self", ".", "attr_matrix", "=", "attr_matrix", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "node_names", "=", "node_names", "\n", "self", ".", "attr_names", "=", "attr_names", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "metadata", "=", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.num_nodes": [[86, 90], ["None"], "methods", ["None"], ["", "def", "num_nodes", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Get the number of nodes in the graph.\n        \"\"\"", "\n", "return", "self", ".", "adj_matrix", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.num_edges": [[91, 98], ["None"], "methods", ["None"], ["", "def", "num_edges", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Get the number of edges in the graph.\n\n        For undirected graphs, (i, j) and (j, i) are counted as _two_ edges.\n\n        \"\"\"", "\n", "return", "self", ".", "adj_matrix", ".", "nnz", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.get_neighbors": [[99, 109], ["None"], "methods", ["None"], ["", "def", "get_neighbors", "(", "self", ",", "idx", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the indices of neighbors of a given node.\n\n        Parameters\n        ----------\n        idx\n            Index of the node whose neighbors are of interest.\n\n        \"\"\"", "\n", "return", "self", ".", "adj_matrix", "[", "idx", "]", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.get_edgeid_to_idx_array": [[110, 121], ["numpy.transpose", "sparsegraph.SparseGraph.adj_matrix.nonzero"], "methods", ["None"], ["", "def", "get_edgeid_to_idx_array", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Return a Numpy Array that maps edgeids to the indices in the adjacency matrix.\n\n        Returns\n        -------\n        np.ndarray\n            The i'th entry contains the x- and y-coordinates of edge i in the adjacency matrix.\n            Shape [num_edges, 2]\n\n        \"\"\"", "\n", "return", "np", ".", "transpose", "(", "self", ".", "adj_matrix", ".", "nonzero", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_directed": [[122, 126], ["None"], "methods", ["None"], ["", "def", "is_directed", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Check if the graph is directed (adjacency matrix is not symmetric).\n        \"\"\"", "\n", "return", "(", "self", ".", "adj_matrix", "!=", "self", ".", "adj_matrix", ".", "T", ")", ".", "sum", "(", ")", "!=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.to_undirected": [[127, 149], ["numpy.ravel_multi_index", "numpy.ravel_multi_index", "numpy.unravel_index", "sparsegraph.SparseGraph.get_edgeid_to_idx_array", "ValueError", "len", "numpy.isin", "len", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.get_edgeid_to_idx_array"], ["", "def", "to_undirected", "(", "self", ")", "->", "'SparseGraph'", ":", "\n", "        ", "\"\"\"Convert to an undirected graph (make adjacency matrix symmetric).\n        \"\"\"", "\n", "idx", "=", "self", ".", "get_edgeid_to_idx_array", "(", ")", ".", "T", "\n", "ridx", "=", "np", ".", "ravel_multi_index", "(", "idx", ",", "self", ".", "adj_matrix", ".", "shape", ")", "\n", "ridx_rev", "=", "np", ".", "ravel_multi_index", "(", "idx", "[", ":", ":", "-", "1", "]", ",", "self", ".", "adj_matrix", ".", "shape", ")", "\n", "\n", "# Get duplicate edges (self-loops and opposing edges)", "\n", "dup_ridx", "=", "ridx", "[", "np", ".", "isin", "(", "ridx", ",", "ridx_rev", ")", "]", "\n", "dup_idx", "=", "np", ".", "unravel_index", "(", "dup_ridx", ",", "self", ".", "adj_matrix", ".", "shape", ")", "\n", "\n", "# Check if the adjacency matrix weights are symmetric (if nonzero)", "\n", "if", "len", "(", "dup_ridx", ")", ">", "0", "and", "not", "np", ".", "allclose", "(", "self", ".", "adj_matrix", "[", "dup_idx", "]", ",", "self", ".", "adj_matrix", "[", "dup_idx", "[", ":", ":", "-", "1", "]", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Adjacency matrix weights of opposing edges differ.\"", ")", "\n", "\n", "# Create symmetric matrix", "\n", "", "new_adj_matrix", "=", "self", ".", "adj_matrix", "+", "self", ".", "adj_matrix", ".", "T", "\n", "if", "len", "(", "dup_ridx", ")", ">", "0", ":", "\n", "            ", "new_adj_matrix", "[", "dup_idx", "]", "=", "(", "new_adj_matrix", "[", "dup_idx", "]", "-", "self", ".", "adj_matrix", "[", "dup_idx", "]", ")", ".", "A1", "\n", "\n", "", "self", ".", "adj_matrix", "=", "new_adj_matrix", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_weighted": [[150, 154], ["numpy.any", "numpy.unique", "sparsegraph.SparseGraph.adj_matrix.nonzero"], "methods", ["None"], ["", "def", "is_weighted", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Check if the graph is weighted (edge weights other than 1).\n        \"\"\"", "\n", "return", "np", ".", "any", "(", "np", ".", "unique", "(", "self", ".", "adj_matrix", "[", "self", ".", "adj_matrix", ".", "nonzero", "(", ")", "]", ".", "A1", ")", "!=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.to_unweighted": [[155, 160], ["numpy.ones_like"], "methods", ["None"], ["", "def", "to_unweighted", "(", "self", ")", "->", "'SparseGraph'", ":", "\n", "        ", "\"\"\"Convert to an unweighted graph (set all edge weights to 1).\n        \"\"\"", "\n", "self", ".", "adj_matrix", ".", "data", "=", "np", ".", "ones_like", "(", "self", ".", "adj_matrix", ".", "data", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_connected": [[161, 165], ["scipy.csgraph.connected_components"], "methods", ["None"], ["", "def", "is_connected", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Check if the graph is connected.\n        \"\"\"", "\n", "return", "sp", ".", "csgraph", ".", "connected_components", "(", "self", ".", "adj_matrix", ",", "return_labels", "=", "False", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.has_self_loops": [[166, 170], ["numpy.allclose", "sparsegraph.SparseGraph.adj_matrix.diagonal"], "methods", ["None"], ["", "def", "has_self_loops", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Check if the graph has self-loops.\n        \"\"\"", "\n", "return", "not", "np", ".", "allclose", "(", "self", ".", "adj_matrix", ".", "diagonal", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.__repr__": [[171, 189], ["getattr", "sparsegraph.SparseGraph.is_directed", "sparsegraph.SparseGraph.is_weighted", "sparsegraph.SparseGraph.is_connected", "sparsegraph.SparseGraph.has_self_loops", "sparsegraph.SparseGraph.num_edges", "props.append", "props.append", "str"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_directed", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_weighted", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_connected", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.has_self_loops", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.num_edges"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "props", "=", "[", "]", "\n", "for", "prop_name", "in", "sparse_graph_properties", ":", "\n", "            ", "prop", "=", "getattr", "(", "self", ",", "prop_name", ")", "\n", "if", "prop", "is", "not", "None", ":", "\n", "                ", "if", "prop_name", "==", "'metadata'", ":", "\n", "                    ", "props", ".", "append", "(", "prop_name", ")", "\n", "", "else", ":", "\n", "                    ", "shape_string", "=", "'x'", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "prop", ".", "shape", "]", ")", "\n", "props", ".", "append", "(", "\"{} ({})\"", ".", "format", "(", "prop_name", ",", "shape_string", ")", ")", "\n", "", "", "", "dir_string", "=", "'Directed'", "if", "self", ".", "is_directed", "(", ")", "else", "'Undirected'", "\n", "weight_string", "=", "'weighted'", "if", "self", ".", "is_weighted", "(", ")", "else", "'unweighted'", "\n", "conn_string", "=", "'connected'", "if", "self", ".", "is_connected", "(", ")", "else", "'disconnected'", "\n", "loop_string", "=", "'has self-loops'", "if", "self", ".", "has_self_loops", "(", ")", "else", "'no self-loops'", "\n", "return", "(", "\"<{}, {} and {} SparseGraph with {} edges ({}). Data: {}>\"", "\n", ".", "format", "(", "dir_string", ",", "weight_string", ",", "conn_string", ",", "\n", "self", ".", "num_edges", "(", ")", ",", "loop_string", ",", "\n", "', '", ".", "join", "(", "props", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.standardize": [[191, 223], ["largest_connected_components.is_weighted", "largest_connected_components.to_unweighted", "largest_connected_components.is_directed", "largest_connected_components.to_undirected", "largest_connected_components.has_self_loops", "sparsegraph.SparseGraph.", "sparsegraph.largest_connected_components", "largest_connected_components.is_connected"], "methods", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_weighted", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.to_unweighted", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_directed", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.to_undirected", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.has_self_loops", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.largest_connected_components", "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.is_connected"], ["", "def", "standardize", "(", "\n", "self", ",", "make_unweighted", ":", "bool", "=", "True", ",", "\n", "make_undirected", ":", "bool", "=", "True", ",", "\n", "no_self_loops", ":", "bool", "=", "True", ",", "\n", "select_lcc", ":", "bool", "=", "True", "\n", ")", "->", "'SparseGraph'", ":", "\n", "        ", "\"\"\"Perform common preprocessing steps: remove self-loops, make unweighted/undirected, select LCC.\n\n        All changes are done inplace.\n\n        Parameters\n        ----------\n        make_unweighted\n            Whether to set all edge weights to 1.\n        make_undirected\n            Whether to make the adjacency matrix symmetric. Can only be used if make_unweighted is True.\n        no_self_loops\n            Whether to remove self loops.\n        select_lcc\n            Whether to select the largest connected component of the graph.\n\n        \"\"\"", "\n", "G", "=", "self", "\n", "if", "make_unweighted", "and", "G", ".", "is_weighted", "(", ")", ":", "\n", "            ", "G", "=", "G", ".", "to_unweighted", "(", ")", "\n", "", "if", "make_undirected", "and", "G", ".", "is_directed", "(", ")", ":", "\n", "            ", "G", "=", "G", ".", "to_undirected", "(", ")", "\n", "", "if", "no_self_loops", "and", "G", ".", "has_self_loops", "(", ")", ":", "\n", "            ", "G", "=", "remove_self_loops", "(", "G", ")", "\n", "", "if", "select_lcc", "and", "not", "G", ".", "is_connected", "(", ")", ":", "\n", "            ", "G", "=", "largest_connected_components", "(", "G", ",", "1", ")", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.unpack": [[224, 230], ["None"], "methods", ["None"], ["", "def", "unpack", "(", "self", ")", "->", "Tuple", "[", "sp", ".", "csr_matrix", ",", "\n", "Union", "[", "np", ".", "ndarray", ",", "sp", ".", "csr_matrix", "]", ",", "\n", "Union", "[", "np", ".", "ndarray", ",", "sp", ".", "csr_matrix", "]", "]", ":", "\n", "        ", "\"\"\"Return the (A, X, E, z) quadruplet.\n        \"\"\"", "\n", "return", "self", ".", "adj_matrix", ",", "self", ".", "attr_matrix", ",", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.to_flat_dict": [[231, 245], ["getattr", "scipy.isspmatrix"], "methods", ["None"], ["", "def", "to_flat_dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"Return flat dictionary containing all SparseGraph properties.\n        \"\"\"", "\n", "data_dict", "=", "{", "}", "\n", "for", "key", "in", "sparse_graph_properties", ":", "\n", "            ", "val", "=", "getattr", "(", "self", ",", "key", ")", "\n", "if", "sp", ".", "isspmatrix", "(", "val", ")", ":", "\n", "                ", "data_dict", "[", "'{}.data'", ".", "format", "(", "key", ")", "]", "=", "val", ".", "data", "\n", "data_dict", "[", "'{}.indices'", ".", "format", "(", "key", ")", "]", "=", "val", ".", "indices", "\n", "data_dict", "[", "'{}.indptr'", ".", "format", "(", "key", ")", "]", "=", "val", ".", "indptr", "\n", "data_dict", "[", "'{}.shape'", ".", "format", "(", "key", ")", "]", "=", "val", ".", "shape", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "key", "]", "=", "val", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.from_flat_dict": [[246, 298], ["data_dict.keys", "data_dict.items", "sparsegraph.SparseGraph", "len", "ValueError", "key.endswith", "key.endswith", "key.endswith", "scipy.csr_matrix", "del_entries.extend", "init_dict.keys", "warnings.warn", "warnings.warn"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_flat_dict", "(", "data_dict", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "'SparseGraph'", ":", "\n", "        ", "\"\"\"Initialize SparseGraph from a flat dictionary.\n        \"\"\"", "\n", "init_dict", "=", "{", "}", "\n", "del_entries", "=", "[", "]", "\n", "\n", "# Construct sparse matrices", "\n", "for", "key", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", ".", "endswith", "(", "'_data'", ")", "or", "key", ".", "endswith", "(", "'.data'", ")", ":", "\n", "                ", "if", "key", ".", "endswith", "(", "'_data'", ")", ":", "\n", "                    ", "sep", "=", "'_'", "\n", "warnings", ".", "warn", "(", "\n", "\"The separator used for sparse matrices during export (for .npz files) \"", "\n", "\"is now '.' instead of '_'. Please update (re-save) your stored graphs.\"", ",", "\n", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "sep", "=", "'.'", "\n", "", "matrix_name", "=", "key", "[", ":", "-", "5", "]", "\n", "mat_data", "=", "key", "\n", "mat_indices", "=", "'{}{}indices'", ".", "format", "(", "matrix_name", ",", "sep", ")", "\n", "mat_indptr", "=", "'{}{}indptr'", ".", "format", "(", "matrix_name", ",", "sep", ")", "\n", "mat_shape", "=", "'{}{}shape'", ".", "format", "(", "matrix_name", ",", "sep", ")", "\n", "if", "matrix_name", "==", "'adj'", "or", "matrix_name", "==", "'attr'", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"Matrices are exported (for .npz files) with full names now. \"", "\n", "\"Please update (re-save) your stored graphs.\"", ",", "\n", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "matrix_name", "+=", "'_matrix'", "\n", "", "init_dict", "[", "matrix_name", "]", "=", "sp", ".", "csr_matrix", "(", "\n", "(", "data_dict", "[", "mat_data", "]", ",", "\n", "data_dict", "[", "mat_indices", "]", ",", "\n", "data_dict", "[", "mat_indptr", "]", ")", ",", "\n", "shape", "=", "data_dict", "[", "mat_shape", "]", ")", "\n", "del_entries", ".", "extend", "(", "[", "mat_data", ",", "mat_indices", ",", "mat_indptr", ",", "mat_shape", "]", ")", "\n", "\n", "# Delete sparse matrix entries", "\n", "", "", "for", "del_entry", "in", "del_entries", ":", "\n", "            ", "del", "data_dict", "[", "del_entry", "]", "\n", "\n", "# Load everything else", "\n", "", "for", "key", ",", "val", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "(", "val", "is", "not", "None", ")", "and", "(", "None", "not", "in", "val", ")", ")", ":", "\n", "                ", "init_dict", "[", "key", "]", "=", "val", "\n", "\n", "# Check if the dictionary contains only entries in sparse_graph_properties", "\n", "", "", "unknown_keys", "=", "[", "key", "for", "key", "in", "init_dict", ".", "keys", "(", ")", "if", "key", "not", "in", "sparse_graph_properties", "]", "\n", "if", "len", "(", "unknown_keys", ")", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input dictionary contains keys that are not SparseGraph properties ({}).\"", "\n", ".", "format", "(", "unknown_keys", ")", ")", "\n", "\n", "", "return", "SparseGraph", "(", "**", "init_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.create_subgraph": [[300, 353], ["ValueError", "ValueError", "ValueError", "sorted", "RuntimeError", "range", "sparse_graph.num_nodes"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.SparseGraph.num_nodes"], ["", "", "def", "create_subgraph", "(", "\n", "sparse_graph", ":", "SparseGraph", ",", "\n", "_sentinel", ":", "None", "=", "None", ",", "\n", "nodes_to_remove", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "nodes_to_keep", ":", "np", ".", "ndarray", "=", "None", "\n", ")", "->", "SparseGraph", ":", "\n", "    ", "\"\"\"Create a graph with the specified subset of nodes.\n\n    Exactly one of (nodes_to_remove, nodes_to_keep) should be provided, while the other stays None.\n    Note that to avoid confusion, it is required to pass node indices as named arguments to this function.\n\n    The subgraph partially points to the old graph's data.\n\n    Parameters\n    ----------\n    sparse_graph\n        Input graph.\n    _sentinel\n        Internal, to prevent passing positional arguments. Do not use.\n    nodes_to_remove\n        Indices of nodes that have to removed.\n    nodes_to_keep\n        Indices of nodes that have to be kept.\n\n    Returns\n    -------\n    SparseGraph\n        Graph with specified nodes removed.\n\n    \"\"\"", "\n", "# Check that arguments are passed correctly", "\n", "if", "_sentinel", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only call `create_subgraph` with named arguments',\"", "\n", "\" (nodes_to_remove=...) or (nodes_to_keep=...).\"", ")", "\n", "", "if", "nodes_to_remove", "is", "None", "and", "nodes_to_keep", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Either nodes_to_remove or nodes_to_keep must be provided.\"", ")", "\n", "", "elif", "nodes_to_remove", "is", "not", "None", "and", "nodes_to_keep", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only one of nodes_to_remove or nodes_to_keep must be provided.\"", ")", "\n", "", "elif", "nodes_to_remove", "is", "not", "None", ":", "\n", "        ", "nodes_to_keep", "=", "[", "i", "for", "i", "in", "range", "(", "sparse_graph", ".", "num_nodes", "(", ")", ")", "if", "i", "not", "in", "nodes_to_remove", "]", "\n", "", "elif", "nodes_to_keep", "is", "not", "None", ":", "\n", "        ", "nodes_to_keep", "=", "sorted", "(", "nodes_to_keep", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"This should never happen.\"", ")", "\n", "\n", "", "sparse_graph", ".", "adj_matrix", "=", "sparse_graph", ".", "adj_matrix", "[", "nodes_to_keep", "]", "[", ":", ",", "nodes_to_keep", "]", "\n", "if", "sparse_graph", ".", "attr_matrix", "is", "not", "None", ":", "\n", "        ", "sparse_graph", ".", "attr_matrix", "=", "sparse_graph", ".", "attr_matrix", "[", "nodes_to_keep", "]", "\n", "", "if", "sparse_graph", ".", "labels", "is", "not", "None", ":", "\n", "        ", "sparse_graph", ".", "labels", "=", "sparse_graph", ".", "labels", "[", "nodes_to_keep", "]", "\n", "", "if", "sparse_graph", ".", "node_names", "is", "not", "None", ":", "\n", "        ", "sparse_graph", ".", "node_names", "=", "sparse_graph", ".", "node_names", "[", "nodes_to_keep", "]", "\n", "", "return", "sparse_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.largest_connected_components": [[355, 380], ["scipy.csgraph.connected_components", "numpy.bincount", "sparsegraph.create_subgraph", "numpy.argsort", "enumerate"], "function", ["home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.create_subgraph"], ["", "def", "largest_connected_components", "(", "sparse_graph", ":", "SparseGraph", ",", "n_components", ":", "int", "=", "1", ")", "->", "SparseGraph", ":", "\n", "    ", "\"\"\"Select the largest connected components in the graph.\n\n    Changes are returned in a partially new SparseGraph.\n\n    Parameters\n    ----------\n    sparse_graph\n        Input graph.\n    n_components\n        Number of largest connected components to keep.\n\n    Returns\n    -------\n    SparseGraph\n        Subgraph of the input graph where only the nodes in largest n_components are kept.\n\n    \"\"\"", "\n", "_", ",", "component_indices", "=", "sp", ".", "csgraph", ".", "connected_components", "(", "sparse_graph", ".", "adj_matrix", ")", "\n", "component_sizes", "=", "np", ".", "bincount", "(", "component_indices", ")", "\n", "components_to_keep", "=", "np", ".", "argsort", "(", "component_sizes", ")", "[", ":", ":", "-", "1", "]", "[", ":", "n_components", "]", "# reverse order to sort descending", "\n", "nodes_to_keep", "=", "[", "\n", "idx", "for", "(", "idx", ",", "component", ")", "in", "enumerate", "(", "component_indices", ")", "if", "component", "in", "components_to_keep", "\n", "]", "\n", "return", "create_subgraph", "(", "sparse_graph", ",", "nodes_to_keep", "=", "nodes_to_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DongHande_PT_propagation_then_training.data.sparsegraph.remove_self_loops": [[382, 396], ["sparse_graph.adj_matrix.tolil", "sparse_graph.adj_matrix.setdiag", "sparse_graph.adj_matrix.tocsr", "warnings.warn", "numpy.isclose", "sparse_graph.adj_matrix.diagonal"], "function", ["None"], ["", "def", "remove_self_loops", "(", "sparse_graph", ":", "SparseGraph", ")", "->", "SparseGraph", ":", "\n", "    ", "\"\"\"Remove self loops (diagonal entries in the adjacency matrix).\n\n    Changes are returned in a partially new SparseGraph.\n\n    \"\"\"", "\n", "num_self_loops", "=", "(", "~", "np", ".", "isclose", "(", "sparse_graph", ".", "adj_matrix", ".", "diagonal", "(", ")", ",", "0", ")", ")", ".", "sum", "(", ")", "\n", "if", "num_self_loops", ">", "0", ":", "\n", "        ", "sparse_graph", ".", "adj_matrix", "=", "sparse_graph", ".", "adj_matrix", ".", "tolil", "(", ")", "\n", "sparse_graph", ".", "adj_matrix", ".", "setdiag", "(", "0", ")", "\n", "sparse_graph", ".", "adj_matrix", "=", "sparse_graph", ".", "adj_matrix", ".", "tocsr", "(", ")", "\n", "warnings", ".", "warn", "(", "\"{0} self loops removed\"", ".", "format", "(", "num_self_loops", ")", ")", "\n", "\n", "", "return", "sparse_graph", "\n", "", ""]]}