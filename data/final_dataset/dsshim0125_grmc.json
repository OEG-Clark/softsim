{"home.repos.pwc.inspect_result.dsshim0125_grmc.None.evaluate_pytorch.extract_zip": [[27, 30], ["zipfile.ZipFile", "zipfile.ZipFile.read", "zipfile.ZipFile.namelist"], "function", ["None"], ["def", "extract_zip", "(", "input_zip", ")", ":", "\n", "    ", "input_zip", "=", "ZipFile", "(", "input_zip", ")", "\n", "return", "{", "name", ":", "input_zip", ".", "read", "(", "name", ")", "for", "name", "in", "input_zip", ".", "namelist", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.main": [[67, 100], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "encoder_pretrain.main_worker"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.main_worker": [[102, 196], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss().cuda", "torchvision.Compose", "data.MoCoData", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "model.densedepth.MoCo", "model.fcrn.MoCo", "torch.nn.DataParallel().cuda.encoder_q.parameters", "torch.nn.DataParallel().cuda.header_q.parameters", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "encoder_pretrain.adjust_learning_rate", "encoder_pretrain.adjust_learning_rate", "encoder_pretrain.train", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "int", "torch.CrossEntropyLoss", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.nn.DataParallel().cuda.module.encoder_q.state_dict", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.adjust_learning_rate", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.adjust_learning_rate", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.train"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "\n", "", "if", "args", ".", "encoder_type", "==", "'densenet'", ":", "\n", "        ", "model", "=", "MoCo_densenet", "(", ")", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "MoCo_resnet", "(", "layers", "=", "args", ".", "layers", ")", "\n", "\n", "\n", "", "optimizer1", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "encoder_q", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "header_q", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'using CPU, this will be slow'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "(", "480", ",", "640", ")", ",", "scale", "=", "(", "0.5", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "480", ",", "640", ")", ")", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "MoCoData", "(", "transform", "=", "transform", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer1", ",", "epoch", ",", "args", ")", "\n", "adjust_learning_rate", "(", "optimizer2", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer1", ",", "optimizer2", ",", "epoch", ",", "args", ")", "\n", "\n", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "encoder_q", ".", "state_dict", "(", ")", ",", "'checkpoints/%s_%d.pth'", "%", "args", ".", "encoder_type", ",", "args", ".", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.train": [[202, 236], ["model.train", "enumerate", "print", "tqdm.tqdm", "model", "criterion", "optimizer1.zero_grad", "optimizer2.zero_grad", "criterion.backward", "optimizer1.step", "optimizer2.step", "criterion.item", "images.cuda.cuda", "edge.cuda.cuda", "len"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.train"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer1", ",", "optimizer2", ",", "epoch", ",", "args", ")", ":", "\n", "\n", "# switch to train mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "\n", "for", "i", ",", "(", "images", ",", "edge", ")", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "# measure data loading time", "\n", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "edge", "=", "edge", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "#if torch.cuda.is_available():", "\n", "#    target = edge.cuda(args.gpu, non_blocking=True)", "\n", "\n", "# compute output", "\n", "", "logit", ",", "target", "=", "model", "(", "images", ",", "edge", ")", "\n", "\n", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "optimizer2", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer1", ".", "step", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'Epoch:%03d Loss:%.3f'", "%", "(", "epoch", "+", "1", ",", "total_loss", "/", "len", "(", "train_loader", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.adjust_learning_rate": [[238, 243], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.train.main": [[13, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "model.fcrn.ResNet.cuda", "torch.DataParallel", "print", "torch.optim.Adam", "torch.optim.Adam", "data.getTrainingTestingData", "torch.L1Loss", "loss.MaskedL1Loss", "range", "model.densedepth.Model", "model.fcrn.ResNet", "model.fcrn.ResNet.parameters", "model.fcrn.ResNet.train", "enumerate", "torch.save", "torch.save", "print", "tqdm.tqdm", "torch.optim.Adam.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.DepthNorm", "model.fcrn.ResNet.", "masked_criterion.backward", "torch.optim.Adam.step", "model.fcrn.ResNet.module.state_dict", "sample_batched[].cuda", "sample_batched[].cuda", "nn.L1Loss.", "torch.clamp", "torch.clamp", "loss.MaskedL1Loss.", "loss.ssim"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getTrainingTestingData", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.encoder_pretrain.train", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.DepthNorm", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.ssim"], ["def", "main", "(", ")", ":", "\n", "# Arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Finetuning for depth estimation'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "default", "=", "'densedepth'", ",", "help", "=", "'type of the depth estimation network'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "default", "=", "161", ",", "type", "=", "int", ",", "help", "=", "'number of layers of encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'batch size'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Create model", "\n", "\n", "if", "args", ".", "model_type", "==", "'densedepth'", ":", "\n", "        ", "model", "=", "Model", "(", "layers", "=", "args", ".", "layers", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "ResNet", "(", "layers", "=", "args", ".", "layers", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "print", "(", "'Model created.'", ")", "\n", "\n", "# Training parameters", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ")", "\n", "\n", "batch_size", "=", "args", ".", "bs", "\n", "\n", "# Load data", "\n", "train_loader", ",", "test_loader", "=", "getTrainingTestingData", "(", "batch_size", "=", "batch_size", ")", "\n", "\n", "\n", "# Loss", "\n", "l1_criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "masked_criterion", "=", "MaskedL1Loss", "(", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "\n", "for", "i", ",", "sample_batched", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Prepare sample and target", "\n", "image", "=", "torch", ".", "autograd", ".", "Variable", "(", "sample_batched", "[", "'image'", "]", ".", "cuda", "(", ")", ")", "\n", "depth", "=", "torch", ".", "autograd", ".", "Variable", "(", "sample_batched", "[", "'depth'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "# Normalize depth", "\n", "depth_n", "=", "DepthNorm", "(", "depth", ")", "\n", "\n", "# Predict", "\n", "output", "=", "model", "(", "image", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'densedepth'", ":", "\n", "\n", "                ", "l_depth", "=", "l1_criterion", "(", "output", ",", "depth_n", ")", "\n", "l_ssim", "=", "torch", ".", "clamp", "(", "(", "1", "-", "ssim", "(", "output", ",", "depth_n", ",", "val_range", "=", "1000.0", "/", "10.0", ")", ")", "*", "0.5", ",", "0", ",", "1", ")", "\n", "\n", "loss", "=", "(", "1.0", "*", "l_ssim", ")", "+", "(", "0.1", "*", "l_depth", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "loss", "=", "masked_criterion", "(", "output", ",", "depth_n", ")", "\n", "\n", "# Update step", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s_%d.pth'", "%", "(", "args", ".", "model_type", ",", "args", ".", "layers", ")", ")", "\n", "print", "(", "'Epoch:%d Model Saved!'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.RandomHorizontalFlip.__call__": [[22, 37], ["data._is_pil_image", "TypeError", "data._is_pil_image", "TypeError", "random.random", "image.transpose.transpose.transpose", "depth.transpose.transpose.transpose", "type", "type"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_pil_image", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_pil_image"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "depth", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'depth'", "]", "\n", "\n", "if", "not", "_is_pil_image", "(", "image", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "image", ")", ")", ")", "\n", "", "if", "not", "_is_pil_image", "(", "depth", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "depth", ")", ")", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "depth", "=", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "{", "'image'", ":", "image", ",", "'depth'", ":", "depth", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.RandomChannelSwap.__init__": [[39, 43], ["list", "permutations", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "probability", ")", ":", "\n", "        ", "from", "itertools", "import", "permutations", "\n", "self", ".", "probability", "=", "probability", "\n", "self", ".", "indices", "=", "list", "(", "permutations", "(", "range", "(", "3", ")", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.RandomChannelSwap.__call__": [[44, 52], ["data._is_pil_image", "TypeError", "data._is_pil_image", "TypeError", "random.random", "numpy.asarray", "PIL.Image.fromarray", "type", "type", "list", "random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_pil_image", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_pil_image"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "depth", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'depth'", "]", "\n", "if", "not", "_is_pil_image", "(", "image", ")", ":", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "image", ")", ")", ")", "\n", "if", "not", "_is_pil_image", "(", "depth", ")", ":", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "depth", ")", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "probability", ":", "\n", "            ", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "image", "[", "...", ",", "list", "(", "self", ".", "indices", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "indices", ")", "-", "1", ")", "]", ")", "]", ")", "\n", "", "return", "{", "'image'", ":", "image", ",", "'depth'", ":", "depth", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.depthDatasetMemory.__init__": [[91, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "nyu2_train", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "nyu_dataset", "=", "data", ",", "nyu2_train", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.depthDatasetMemory.__getitem__": [[95, 102], ["PIL.Image.open", "PIL.Image.open", "scipy.io.BytesIO", "scipy.io.BytesIO", "data.depthDatasetMemory.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "nyu_dataset", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "BytesIO", "(", "self", ".", "data", "[", "sample", "[", "0", "]", "]", ")", ")", "\n", "depth", "=", "Image", ".", "open", "(", "BytesIO", "(", "self", ".", "data", "[", "sample", "[", "1", "]", "]", ")", ")", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'depth'", ":", "depth", "}", "\n", "if", "self", ".", "transform", ":", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.depthDatasetMemory.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "nyu_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.ToTensor.__init__": [[107, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "is_test", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_test", "=", "is_test", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.ToTensor.__call__": [[110, 126], ["data.ToTensor.to_tensor", "torch.clamp.resize", "torch.clamp", "data.ToTensor.to_tensor().float", "data.ToTensor.to_tensor().float", "data.ToTensor.to_tensor", "data.ToTensor.to_tensor"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.ToTensor.to_tensor", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.ToTensor.to_tensor", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.ToTensor.to_tensor"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "depth", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'depth'", "]", "\n", "\n", "image", "=", "self", ".", "to_tensor", "(", "image", ")", "\n", "\n", "depth", "=", "depth", ".", "resize", "(", "(", "320", ",", "240", ")", ")", "\n", "\n", "if", "self", ".", "is_test", ":", "\n", "            ", "depth", "=", "self", ".", "to_tensor", "(", "depth", ")", ".", "float", "(", ")", "/", "1000", "\n", "", "else", ":", "\n", "            ", "depth", "=", "self", ".", "to_tensor", "(", "depth", ")", ".", "float", "(", ")", "*", "1000", "\n", "\n", "# put in expected range", "\n", "", "depth", "=", "torch", ".", "clamp", "(", "depth", ",", "10", ",", "1000", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'depth'", ":", "depth", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.ToTensor.to_tensor": [[127, 159], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "TypeError", "torch.from_numpy", "torch.ByteTensor.float().div", "torch.from_numpy", "torch.ByteTensor.float().div", "data._is_pil_image", "data._is_numpy_image", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "type", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_pil_image", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_numpy_image"], ["", "def", "to_tensor", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "not", "(", "_is_pil_image", "(", "pic", ")", "or", "_is_numpy_image", "(", "pic", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'pic should be PIL Image or ndarray. Got {}'", ".", "format", "(", "type", "(", "pic", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "\n", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.MoCoData.__init__": [[185, 196], ["pandas.DataFrame", "pandas.read_csv", "pandas.DataFrame", "pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ",", "type", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'/media/dsshim/nyu_v2/'", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "if", "type", "==", "'train'", ":", "\n", "            ", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "pd", ".", "read_csv", "(", "self", ".", "root_dir", "+", "'data/nyu2_train.csv'", ",", "header", "=", "None", ")", ")", "\n", "\n", "", "elif", "type", "==", "'test'", ":", "\n", "            ", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "pd", ".", "read_csv", "(", "self", ".", "root_dir", "+", "'data/nyu2_test.csv'", ",", "header", "=", "None", ")", ")", "\n", "\n", "", "self", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.MoCoData.__len__": [[197, 200], ["int", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "int", "(", "len", "(", "self", ".", "df", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.MoCoData.__getitem__": [[201, 249], ["torch.is_tensor", "os.path.join", "PIL.Image.open", "data.MoCoData.convert", "numpy.array", "numpy.array", "cv2.filter2D", "cv2.filter2D", "numpy.array", "cv2.Canny", "numpy.sqrt().astype", "PIL.Image.fromarray", "edge.expand_as.expand_as.expand_as", "idx.tolist.tolist.tolist", "data.MoCoData.transform", "numpy.array().reshape", "numpy.array().reshape", "numpy.max", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "numpy.sqrt", "numpy.array", "numpy.array", "numpy.max"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\n", "self", ".", "df", ".", "iloc", "[", "idx", ",", "0", "]", ")", "\n", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_name", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "img_gray", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img_gray", "=", "np", ".", "array", "(", "img_gray", ")", "\n", "\n", "kernels", "=", "[", "np", ".", "array", "(", "[", "-", "1", ",", "-", "2", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "1", "]", ")", ".", "reshape", "(", "3", ",", "3", ")", ",", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "-", "2", ",", "0", ",", "2", ",", "-", "1", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "3", ",", "3", ")", "]", "\n", "\n", "img_v", "=", "cv2", ".", "filter2D", "(", "img_gray", ",", "-", "1", ",", "kernels", "[", "0", "]", ")", "\n", "img_h", "=", "cv2", ".", "filter2D", "(", "img_gray", ",", "-", "1", ",", "kernels", "[", "1", "]", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "edge_mask", "=", "cv2", ".", "Canny", "(", "img", ",", "50", ",", "200", ")", "\n", "\n", "magnitude", "=", "np", ".", "sqrt", "(", "img_v", "**", "2", "+", "img_h", "**", "2", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "edge", "=", "magnitude", "*", "edge_mask", "\n", "\n", "if", "np", ".", "max", "(", "edge", ")", "==", "0", ":", "\n", "\n", "            ", "img", "*=", "0", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "edge", "=", "edge", "/", "np", ".", "max", "(", "edge", ")", "*", "255", "\n", "\n", "\n", "", "edge", "=", "Image", ".", "fromarray", "(", "edge", ")", "\n", "\n", "img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "\n", "edge", "=", "transforms", ".", "ToTensor", "(", ")", "(", "edge", ")", "\n", "\n", "edge", "=", "edge", ".", "expand_as", "(", "img", ")", "\n", "\n", "return", "img", ",", "edge", "", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_pil_image": [[15, 17], ["isinstance"], "function", ["None"], ["def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data._is_numpy_image": [[18, 20], ["isinstance"], "function", ["None"], ["", "def", "_is_numpy_image", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "and", "(", "img", ".", "ndim", "in", "{", "2", ",", "3", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.loadZipToMem": [[53, 72], ["print", "ZipFile", "list", "int", "list", "shuffle", "print", "ZipFile.read", "ZipFile.namelist", "row.split", "len", "row.split", "len", "data[].decode().split", "data[].decode().split", "len", "len", "data[].decode", "data[].decode"], "function", ["None"], ["", "", "def", "loadZipToMem", "(", "zip_file", ")", ":", "\n", "# Load zip file into memory", "\n", "    ", "print", "(", "'Loading dataset zip file...'", ",", "end", "=", "''", ")", "\n", "from", "zipfile", "import", "ZipFile", "\n", "input_zip", "=", "ZipFile", "(", "zip_file", ")", "\n", "data", "=", "{", "name", ":", "input_zip", ".", "read", "(", "name", ")", "for", "name", "in", "input_zip", ".", "namelist", "(", ")", "}", "\n", "nyu2_train", "=", "list", "(", "(", "row", ".", "split", "(", "','", ")", "for", "row", "in", "(", "data", "[", "'data/nyu2_train.csv'", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "if", "len", "(", "row", ")", ">", "0", ")", ")", "\n", "val_index", "=", "int", "(", "len", "(", "nyu2_train", ")", "*", "0.8", ")", "\n", "nyu2_test", "=", "list", "(", "(", "row", ".", "split", "(", "','", ")", "for", "row", "in", "(", "data", "[", "'data/nyu2_test.csv'", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "if", "len", "(", "row", ")", ">", "0", ")", ")", "\n", "nyu2_val", "=", "nyu2_train", "[", "val_index", ":", "]", "\n", "nyu2_train", "=", "nyu2_train", "[", ":", "val_index", "]", "\n", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "nyu2_train", "=", "shuffle", "(", "nyu2_train", ",", "random_state", "=", "0", ")", "\n", "\n", "#if True: nyu2_train = nyu2_train[:40]", "\n", "\n", "print", "(", "'Loaded ({0}).'", ".", "format", "(", "len", "(", "nyu2_train", ")", ")", ")", "\n", "return", "data", ",", "nyu2_train", ",", "nyu2_val", ",", "nyu2_test", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.loadZipToMem_test": [[74, 89], ["print", "ZipFile", "list", "shuffle", "print", "ZipFile.read", "ZipFile.namelist", "row.split", "len", "data[].decode().split", "len", "data[].decode"], "function", ["None"], ["", "def", "loadZipToMem_test", "(", "zip_file", ")", ":", "\n", "# Load zip file into memory", "\n", "    ", "print", "(", "'Loading dataset zip file...'", ",", "end", "=", "''", ")", "\n", "from", "zipfile", "import", "ZipFile", "\n", "input_zip", "=", "ZipFile", "(", "zip_file", ")", "\n", "data", "=", "{", "name", ":", "input_zip", ".", "read", "(", "name", ")", "for", "name", "in", "input_zip", ".", "namelist", "(", ")", "}", "\n", "nyu2_test", "=", "list", "(", "(", "row", ".", "split", "(", "','", ")", "for", "row", "in", "(", "data", "[", "'data/nyu2_test.csv'", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "if", "len", "(", "row", ")", ">", "0", ")", ")", "\n", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "nyu2_test", "=", "shuffle", "(", "nyu2_test", ",", "random_state", "=", "0", ")", "\n", "\n", "#if True: nyu2_test = nyu2_test[:40]", "\n", "\n", "print", "(", "'Loaded ({0}).'", ".", "format", "(", "len", "(", "nyu2_test", ")", ")", ")", "\n", "return", "data", ",", "nyu2_test", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getNoTransform": [[160, 163], ["torchvision.transforms.Compose", "data.ToTensor"], "function", ["None"], ["", "", "", "def", "getNoTransform", "(", "is_test", "=", "False", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "ToTensor", "(", "is_test", "=", "is_test", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getDefaultTrainTransform": [[165, 170], ["torchvision.transforms.Compose", "data.RandomHorizontalFlip", "data.RandomChannelSwap", "data.ToTensor"], "function", ["None"], ["", "def", "getDefaultTrainTransform", "(", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "RandomChannelSwap", "(", "0.5", ")", ",", "\n", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getTrainingTestingData": [[172, 181], ["data.loadZipToMem", "data.depthDatasetMemory", "data.depthDatasetMemory", "data.depthDatasetMemory", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.getDefaultTrainTransform", "data.getNoTransform", "data.getNoTransform"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.loadZipToMem", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getDefaultTrainTransform", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getNoTransform", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.data.getNoTransform"], ["", "def", "getTrainingTestingData", "(", "batch_size", ")", ":", "\n", "#data, nyu2_train = loadZipToMem('nyu_data.zip')", "\n", "    ", "data", ",", "nyu2_train", ",", "nyu2_val", ",", "nyu2_test", "=", "loadZipToMem", "(", "'/media/dsshim/nyu_v2/nyu_data.zip'", ")", "\n", "\n", "transformed_training", "=", "depthDatasetMemory", "(", "data", ",", "nyu2_train", ",", "transform", "=", "getDefaultTrainTransform", "(", ")", ")", "\n", "transformed_val", "=", "depthDatasetMemory", "(", "data", ",", "nyu2_val", ",", "transform", "=", "getNoTransform", "(", ")", ")", "\n", "transformed_testing", "=", "depthDatasetMemory", "(", "data", ",", "nyu2_test", ",", "transform", "=", "getNoTransform", "(", ")", ")", "\n", "\n", "return", "DataLoader", "(", "transformed_training", ",", "batch_size", ",", "shuffle", "=", "True", ")", ",", "DataLoader", "(", "transformed_testing", ",", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.MaskedMSELoss.__init__": [[58, 60], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaskedMSELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.MaskedMSELoss.forward": [[61, 68], ["pred.dim", "target.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "assert", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", ",", "\"inconsistent dimensions\"", "\n", "valid_mask", "=", "(", "target", ">", "0", ")", ".", "detach", "(", ")", "\n", "diff", "=", "target", "-", "pred", "\n", "diff", "=", "diff", "[", "valid_mask", "]", "\n", "self", ".", "loss", "=", "(", "diff", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.MaskedL1Loss.__init__": [[71, 73], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaskedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.MaskedL1Loss.forward": [[74, 81], ["diff.abs().mean", "pred.dim", "target.dim", "diff.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "assert", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", ",", "\"inconsistent dimensions\"", "\n", "valid_mask", "=", "(", "target", ">", "0", ")", ".", "detach", "(", ")", "\n", "diff", "=", "target", "-", "pred", "\n", "diff", "=", "diff", "[", "valid_mask", "]", "\n", "self", ".", "loss", "=", "diff", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.berHuLoss.__init__": [[84, 86], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "berHuLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.berHuLoss.forward": [[87, 106], ["torch.max", "torch.max", "torch.max", "torch.max", "diff.abs.abs.abs", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "pred.dim", "target.dim", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "assert", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", ",", "\"inconsistent dimensions\"", "\n", "\n", "huber_c", "=", "torch", ".", "max", "(", "pred", "-", "target", ")", "\n", "huber_c", "=", "0.2", "*", "huber_c", "\n", "\n", "valid_mask", "=", "(", "target", ">", "0", ")", ".", "detach", "(", ")", "\n", "diff", "=", "target", "-", "pred", "\n", "diff", "=", "diff", "[", "valid_mask", "]", "\n", "diff", "=", "diff", ".", "abs", "(", ")", "\n", "\n", "huber_mask", "=", "(", "diff", ">", "huber_c", ")", ".", "detach", "(", ")", "\n", "\n", "diff2", "=", "diff", "[", "huber_mask", "]", "\n", "diff2", "=", "diff2", "**", "2", "\n", "\n", "self", ".", "loss", "=", "torch", ".", "cat", "(", "(", "diff", ",", "diff2", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "loss.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", "=", "1", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.ssim": [[17, 55], ["img1.size", "torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.mean", "torch.mean", "min", "create_window().to", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "loss.create_window", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.loss.create_window"], ["", "def", "ssim", "(", "img1", ",", "img2", ",", "val_range", ",", "window_size", "=", "11", ",", "window", "=", "None", ",", "size_average", "=", "True", ",", "full", "=", "False", ")", ":", "\n", "    ", "L", "=", "val_range", "\n", "\n", "padd", "=", "0", "\n", "(", "_", ",", "channel", ",", "height", ",", "width", ")", "=", "img1", ".", "size", "(", ")", "\n", "if", "window", "is", "None", ":", "\n", "        ", "real_size", "=", "min", "(", "window_size", ",", "height", ",", "width", ")", "\n", "window", "=", "create_window", "(", "real_size", ",", "channel", "=", "channel", ")", ".", "to", "(", "img1", ".", "device", ")", "\n", "\n", "", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "(", "0.01", "*", "L", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "L", ")", "**", "2", "\n", "\n", "v1", "=", "2.0", "*", "sigma12", "+", "C2", "\n", "v2", "=", "sigma1_sq", "+", "sigma2_sq", "+", "C2", "\n", "cs", "=", "torch", ".", "mean", "(", "v1", "/", "v2", ")", "# contrast sensitivity", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "v1", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "v2", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "", "if", "full", ":", "\n", "        ", "return", "ret", ",", "cs", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.DepthNorm": [[9, 11], ["None"], "function", ["None"], ["def", "DepthNorm", "(", "depth", ",", "maxDepth", "=", "1000.0", ")", ":", "\n", "    ", "return", "maxDepth", "/", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.predict": [[14, 27], ["numpy.transpose", "torch.tensor().cuda", "model", "np.transpose.cpu().detach().numpy", "numpy.transpose", "len", "numpy.stack", "len", "images.reshape.reshape", "numpy.clip", "torch.tensor", "np.transpose.cpu().detach", "utils.DepthNorm", "np.transpose.cpu"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.DepthNorm"], ["", "def", "predict", "(", "model", ",", "images", ",", "minDepth", "=", "10", ",", "maxDepth", "=", "1000", ",", "batch_size", "=", "2", ")", ":", "\n", "# Support multiple RGBs, one RGB image, even grayscale", "\n", "    ", "if", "len", "(", "images", ".", "shape", ")", "<", "3", ":", "images", "=", "np", ".", "stack", "(", "(", "images", ",", "images", ",", "images", ")", ",", "axis", "=", "2", ")", "\n", "if", "len", "(", "images", ".", "shape", ")", "<", "4", ":", "images", "=", "images", ".", "reshape", "(", "(", "1", ",", "images", ".", "shape", "[", "0", "]", ",", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", ")", ")", "\n", "# Compute predictions", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "images", "=", "torch", ".", "tensor", "(", "images", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "#print(images.size())", "\n", "predictions", "=", "model", "(", "images", ")", "\n", "predictions", "=", "predictions", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "predictions", "=", "np", ".", "transpose", "(", "predictions", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "# Put in expected range", "\n", "return", "np", ".", "clip", "(", "DepthNorm", "(", "predictions", ",", "maxDepth", "=", "1000", ")", ",", "minDepth", ",", "maxDepth", ")", "/", "maxDepth", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.scale_up": [[29, 39], ["range", "numpy.stack", "len", "scaled.append", "resize"], "function", ["None"], ["", "def", "scale_up", "(", "scale", ",", "images", ")", ":", "\n", "    ", "from", "skimage", ".", "transform", "import", "resize", "\n", "scaled", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "img", "=", "images", "[", "i", "]", "\n", "output_shape", "=", "(", "scale", "*", "img", ".", "shape", "[", "0", "]", ",", "scale", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "scaled", ".", "append", "(", "resize", "(", "img", ",", "output_shape", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ",", "mode", "=", "'reflect'", ",", "anti_aliasing", "=", "True", ")", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.load_images": [[41, 52], ["print", "numpy.clip", "cv2.resize", "loaded_images.append", "len", "numpy.stack", "numpy.array", "numpy.asarray", "PIL.Image.open"], "function", ["None"], ["", "def", "load_images", "(", "image_files", ")", ":", "\n", "    ", "loaded_images", "=", "[", "]", "\n", "for", "file", "in", "image_files", ":", "\n", "        ", "x", "=", "np", ".", "clip", "(", "np", ".", "asarray", "(", "Image", ".", "open", "(", "file", ")", ",", "dtype", "=", "float", ")", "/", "255", ",", "0", ",", "1", ")", "\n", "x", "=", "cv2", ".", "resize", "(", "x", ",", "(", "480", ",", "640", ")", ")", "\n", "loaded_images", ".", "append", "(", "x", ")", "\n", "", "print", "(", "loaded_images", "[", "0", "]", ".", "shape", ")", "\n", "if", "len", "(", "loaded_images", ")", ">", "1", ":", "\n", "        ", "return", "np", ".", "stack", "(", "loaded_images", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "loaded_images", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.to_multichannel": [[54, 58], ["numpy.stack"], "function", ["None"], ["", "", "def", "to_multichannel", "(", "i", ")", ":", "\n", "    ", "if", "i", ".", "shape", "[", "2", "]", "==", "3", ":", "return", "i", "\n", "i", "=", "i", "[", ":", ",", ":", ",", "0", "]", "\n", "return", "np", ".", "stack", "(", "(", "i", ",", "i", ",", "i", ")", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.load_test_data": [[61, 72], ["print", "extract_zip", "numpy.load", "numpy.load", "numpy.load", "print", "BytesIO", "BytesIO", "BytesIO"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.evaluate_pytorch.extract_zip"], ["", "def", "load_test_data", "(", "test_data_zip_file", "=", "'nyu_test.zip'", ")", ":", "\n", "    ", "print", "(", "'Loading test data...'", ",", "end", "=", "''", ")", "\n", "import", "numpy", "as", "np", "\n", "from", "data", "import", "extract_zip", "\n", "data", "=", "extract_zip", "(", "test_data_zip_file", ")", "\n", "from", "io", "import", "BytesIO", "\n", "rgb", "=", "np", ".", "load", "(", "BytesIO", "(", "data", "[", "'eigen_test_rgb.npy'", "]", ")", ")", "\n", "depth", "=", "np", ".", "load", "(", "BytesIO", "(", "data", "[", "'eigen_test_depth.npy'", "]", ")", ")", "\n", "crop", "=", "np", ".", "load", "(", "BytesIO", "(", "data", "[", "'eigen_test_crop.npy'", "]", ")", ")", "\n", "print", "(", "'Test data loaded.\\n'", ")", "\n", "return", "{", "'rgb'", ":", "rgb", ",", "'depth'", ":", "depth", ",", "'crop'", ":", "crop", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.evaluate": [[74, 128], ["numpy.zeros", "tqdm.tqdm", "np.zeros.mean", "numpy.maximum", "numpy.mean", "numpy.sqrt", "numpy.abs().mean", "range", "range", "print", "print", "np.sqrt.mean", "len", "utils.scale_up", "utils.scale_up", "len", "utils.evaluate.compute_errors"], "function", ["home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.scale_up", "home.repos.pwc.inspect_result.dsshim0125_grmc.None.utils.scale_up"], ["", "def", "evaluate", "(", "model", ",", "rgb", ",", "depth", ",", "crop", ",", "batch_size", "=", "6", ",", "verbose", "=", "True", ")", ":", "\n", "# Error computaiton based on https://github.com/tinghuiz/SfMLearner", "\n", "\n", "    ", "def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "        ", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "log_10", "=", "(", "np", ".", "abs", "(", "np", ".", "log10", "(", "gt", ")", "-", "np", ".", "log10", "(", "pred", ")", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "a1", ",", "a2", ",", "a3", ",", "abs_rel", ",", "rmse", ",", "log_10", "\n", "\n", "", "depth_scores", "=", "np", ".", "zeros", "(", "(", "6", ",", "len", "(", "rgb", ")", ")", ")", "# six metrics", "\n", "\n", "bs", "=", "batch_size", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "rgb", ")", "//", "bs", ")", ")", ":", "\n", "        ", "x", "=", "rgb", "[", "(", "i", ")", "*", "bs", ":", "(", "i", "+", "1", ")", "*", "bs", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "# Compute results", "\n", "true_y", "=", "depth", "[", "(", "i", ")", "*", "bs", ":", "(", "i", "+", "1", ")", "*", "bs", ",", ":", ",", ":", "]", "\n", "pred_y", "=", "scale_up", "(", "2", ",", "predict", "(", "model", ",", "x", "/", "255", ",", "minDepth", "=", "10", ",", "maxDepth", "=", "1000", ",", "batch_size", "=", "bs", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "*", "10.0", "\n", "\n", "# Test time augmentation: mirror image estimate", "\n", "pred_y_flip", "=", "scale_up", "(", "2", ",", "\n", "predict", "(", "model", ",", "x", "[", "...", ",", ":", ":", "-", "1", ",", ":", "]", "/", "255", ",", "minDepth", "=", "10", ",", "maxDepth", "=", "1000", ",", "batch_size", "=", "bs", ")", "[", ":", ",", ":", ",", ":", ",", "\n", "0", "]", ")", "*", "10.0", "\n", "\n", "# Crop based on Eigen et al. crop", "\n", "true_y", "=", "true_y", "[", ":", ",", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", "+", "1", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "+", "1", "]", "\n", "pred_y", "=", "pred_y", "[", ":", ",", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", "+", "1", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "+", "1", "]", "\n", "pred_y_flip", "=", "pred_y_flip", "[", ":", ",", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", "+", "1", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "+", "1", "]", "\n", "\n", "# Compute errors per image in batch", "\n", "for", "j", "in", "range", "(", "len", "(", "true_y", ")", ")", ":", "\n", "            ", "errors", "=", "compute_errors", "(", "true_y", "[", "j", "]", ",", "(", "0.5", "*", "pred_y", "[", "j", "]", ")", "+", "(", "0.5", "*", "np", ".", "fliplr", "(", "pred_y_flip", "[", "j", "]", ")", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "errors", ")", ")", ":", "\n", "                ", "depth_scores", "[", "k", "]", "[", "(", "i", "*", "bs", ")", "+", "j", "]", "=", "errors", "[", "k", "]", "\n", "\n", "", "", "", "e", "=", "depth_scores", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"{:>10}, {:>10}, {:>10}, {:>10}, {:>10}, {:>10}\"", ".", "format", "(", "'a1'", ",", "'a2'", ",", "'a3'", ",", "'rel'", ",", "'rms'", ",", "'log_10'", ")", ")", "\n", "print", "(", "\"{:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}\"", ".", "format", "(", "e", "[", "0", "]", ",", "e", "[", "1", "]", ",", "e", "[", "2", "]", ",", "e", "[", "3", "]", ",", "e", "[", "4", "]", ",", "e", "[", "5", "]", ")", ")", "\n", "\n", "", "return", "e", "", "", ""]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.UpSample.__init__": [[7, 13], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "skip_input", ",", "output_features", ")", ":", "\n", "        ", "super", "(", "UpSample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convA", "=", "nn", ".", "Conv2d", "(", "skip_input", ",", "output_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "leakyreluA", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "convB", "=", "nn", ".", "Conv2d", "(", "output_features", ",", "output_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "leakyreluB", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.UpSample.forward": [[14, 17], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "densedepth.UpSample.leakyreluB", "densedepth.UpSample.convB", "densedepth.UpSample.leakyreluA", "concat_with.size", "concat_with.size", "densedepth.UpSample.convA", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "concat_with", ")", ":", "\n", "        ", "up_x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "[", "concat_with", ".", "size", "(", "2", ")", ",", "concat_with", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "self", ".", "leakyreluB", "(", "self", ".", "convB", "(", "self", ".", "leakyreluA", "(", "self", ".", "convA", "(", "torch", ".", "cat", "(", "[", "up_x", ",", "concat_with", "]", ",", "dim", "=", "1", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Decoder.__init__": [[19, 31], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densedepth.UpSample", "densedepth.UpSample", "densedepth.UpSample", "densedepth.UpSample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", "=", "2208", ",", "decoder_width", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "int", "(", "num_features", "*", "decoder_width", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "up1", "=", "UpSample", "(", "skip_input", "=", "features", "//", "1", "+", "384", ",", "output_features", "=", "features", "//", "2", ")", "\n", "self", ".", "up2", "=", "UpSample", "(", "skip_input", "=", "features", "//", "2", "+", "192", ",", "output_features", "=", "features", "//", "4", ")", "\n", "self", ".", "up3", "=", "UpSample", "(", "skip_input", "=", "features", "//", "4", "+", "96", ",", "output_features", "=", "features", "//", "8", ")", "\n", "self", ".", "up4", "=", "UpSample", "(", "skip_input", "=", "features", "//", "8", "+", "96", ",", "output_features", "=", "features", "//", "16", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "features", "//", "16", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Decoder.forward": [[32, 40], ["densedepth.Decoder.conv2", "densedepth.Decoder.up1", "densedepth.Decoder.up2", "densedepth.Decoder.up3", "densedepth.Decoder.up4", "densedepth.Decoder.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "x_block0", ",", "x_block1", ",", "x_block2", ",", "x_block3", ",", "x_block4", "=", "features", "[", "3", "]", ",", "features", "[", "4", "]", ",", "features", "[", "6", "]", ",", "features", "[", "8", "]", ",", "features", "[", "11", "]", "\n", "x_d0", "=", "self", ".", "conv2", "(", "x_block4", ")", "\n", "x_d1", "=", "self", ".", "up1", "(", "x_d0", ",", "x_block3", ")", "\n", "x_d2", "=", "self", ".", "up2", "(", "x_d1", ",", "x_block2", ")", "\n", "x_d3", "=", "self", ".", "up3", "(", "x_d2", ",", "x_block1", ")", "\n", "x_d4", "=", "self", ".", "up4", "(", "x_d3", ",", "x_block0", ")", "\n", "return", "self", ".", "conv3", "(", "x_d4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Encoder.__init__": [[42, 46], ["torch.Module.__init__", "torchvision.models.densenet161"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "False", ",", "unlabeled", "=", "False", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "original_model", "=", "torchvision", ".", "models", ".", "densenet161", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Encoder.forward": [[47, 56], ["densedepth.Encoder.original_model.features._modules.items", "features.append", "v"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "[", "x", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "original_model", ".", "features", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "features", ".", "append", "(", "v", "(", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "unlabeled", ":", "\n", "            ", "return", "features", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Model.__init__": [[58, 63], ["torch.Module.__init__", "densedepth.Encoder", "densedepth.Model.encoder.load_state_dict", "densedepth.Decoder", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "False", ",", "layers", "=", "161", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'checkpoints/densenet_%d.pth'", "%", "layers", ")", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Model.forward": [[65, 67], ["densedepth.Model.decoder", "densedepth.Model.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "self", ".", "encoder", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Header.__init__": [[70, 78], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "Header", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2208", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.Header.forward": [[80, 85], ["densedepth.Header.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\n", "        ", "h", "=", "self", ".", "net", "(", "z", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.WrappedModel.__init__": [[88, 92], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "super", "(", "WrappedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "module", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.WrappedModel.forward": [[93, 96], ["densedepth.WrappedModel.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.MoCo.__init__": [[104, 135], ["torch.Module.__init__", "int", "densedepth.Encoder", "densedepth.Encoder", "densedepth.Header", "densedepth.Header", "zip", "zip", "densedepth.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "densedepth.MoCo.register_buffer", "densedepth.MoCo.encoder_q.parameters", "densedepth.MoCo.encoder_k.parameters", "param_k.data.copy_", "densedepth.MoCo.header_q.parameters", "densedepth.MoCo.header_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["def", "__init__", "(", "self", ",", "dim", "=", "256", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "layers", "=", "161", ")", ":", "\n", "\n", "        ", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "int", "(", "K", "*", "(", "64", "/", "256", ")", ")", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "Encoder", "(", ")", "\n", "self", ".", "encoder_k", "=", "Encoder", "(", ")", "\n", "\n", "self", ".", "header_q", "=", "Header", "(", ")", "\n", "self", ".", "header_k", "=", "Header", "(", ")", "\n", "\n", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "header_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.MoCo._momentum_update_key_encoder": [[136, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "densedepth.MoCo.encoder_q.parameters", "densedepth.MoCo.encoder_k.parameters", "densedepth.MoCo.header_q.parameters", "densedepth.MoCo.header_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "header_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.MoCo._dequeue_and_enqueue": [[147, 162], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "#keys = concat_all_gather(keys)", "\n", "\n", "        ", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.densedepth.MoCo.forward": [[163, 222], ["torch.functional.normalize.squeeze", "densedepth.MoCo.header_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "densedepth.MoCo.queue.clone().detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels.cuda.cuda.cuda", "densedepth.MoCo._dequeue_and_enqueue", "densedepth.MoCo.encoder_q", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "densedepth.MoCo._momentum_update_key_encoder", "torch.functional.normalize.squeeze", "densedepth.MoCo.header_k", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "densedepth.MoCo.encoder_k", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "densedepth.MoCo.queue.clone", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo._momentum_update_key_encoder"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "[", "-", "1", "]", "\n", "#print(len(q), q[0].shape)", "\n", "#q = q[-1]", "\n", "\n", "q", "=", "nn", ".", "AvgPool2d", "(", "15", ",", "20", ")", "(", "q", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "q", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "q", "=", "self", ".", "header_q", "(", "q", ")", "# queries: NxC", "\n", "#print(q.shape)", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "#im_k, idx_unshuffle = self._batch_shuffle_ddp(im_k)", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "[", "-", "1", "]", "\n", "k", "=", "nn", ".", "AvgPool2d", "(", "15", ",", "20", ")", "(", "k", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "k", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "k", "=", "self", ".", "header_k", "(", "k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "#k = self._batch_unshuffle_ddp(k, idx_unshuffle)", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "clones", "=", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "#clones = clones.half()", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "clones", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "labels", "=", "labels", ".", "cuda", "(", "None", ",", "non_blocking", "=", "True", ")", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.Unpool.__init__": [[28, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Unpool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.Unpool.forward": [[34, 40], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "weights.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "weights", "=", "torch", ".", "zeros", "(", "self", ".", "num_channels", ",", "1", ",", "self", ".", "stride", ",", "self", ".", "stride", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "weights", "=", "weights", ".", "cuda", "(", ")", "\n", "", "weights", "[", ":", ",", ":", ",", "0", ",", "0", "]", "=", "1", "\n", "return", "F", ".", "conv_transpose2d", "(", "x", ",", "weights", ",", "stride", "=", "self", ".", "stride", ",", "groups", "=", "self", ".", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.Decoder.__init__": [[47, 54], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "None", "\n", "self", ".", "layer2", "=", "None", "\n", "self", ".", "layer3", "=", "None", "\n", "self", ".", "layer4", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.Decoder.forward": [[55, 61], ["fcrn.Decoder.layer1", "fcrn.Decoder.layer2", "fcrn.Decoder.layer3", "fcrn.Decoder.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.DeConv.__init__": [[64, 86], ["fcrn.Decoder.__init__", "fcrn.DeConv.__init__.convt"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "kernel_size", ")", ":", "\n", "        ", "assert", "kernel_size", ">=", "2", ",", "\"kernel_size out of range: {}\"", ".", "format", "(", "kernel_size", ")", "\n", "super", "(", "DeConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "convt", "(", "in_channels", ")", ":", "\n", "            ", "stride", "=", "2", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "output_padding", "=", "kernel_size", "%", "2", "\n", "assert", "-", "2", "-", "2", "*", "padding", "+", "kernel_size", "+", "output_padding", "==", "0", ",", "\"deconv parameters incorrect\"", "\n", "\n", "module_name", "=", "\"deconv{}\"", ".", "format", "(", "kernel_size", ")", "\n", "return", "nn", ".", "Sequential", "(", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "module_name", ",", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "output_padding", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'batchnorm'", ",", "nn", ".", "BatchNorm2d", "(", "in_channels", "//", "2", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "", "self", ".", "layer1", "=", "convt", "(", "in_channels", ")", "\n", "self", ".", "layer2", "=", "convt", "(", "in_channels", "//", "2", ")", "\n", "self", ".", "layer3", "=", "convt", "(", "in_channels", "//", "(", "2", "**", "2", ")", ")", "\n", "self", ".", "layer4", "=", "convt", "(", "in_channels", "//", "(", "2", "**", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpConv.upconv_module": [[90, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "fcrn.Unpool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["    ", "def", "upconv_module", "(", "self", ",", "in_channels", ")", ":", "\n", "# UpConv module: unpool -> 5*5 conv -> batchnorm -> ReLU", "\n", "        ", "upconv", "=", "nn", ".", "Sequential", "(", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "'unpool'", ",", "Unpool", "(", "in_channels", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'batchnorm'", ",", "nn", ".", "BatchNorm2d", "(", "in_channels", "//", "2", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "]", ")", ")", "\n", "return", "upconv", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpConv.__init__": [[100, 106], ["fcrn.Decoder.__init__", "fcrn.UpConv.upconv_module", "fcrn.UpConv.upconv_module", "fcrn.UpConv.upconv_module", "fcrn.UpConv.upconv_module"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpConv.upconv_module", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpConv.upconv_module", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpConv.upconv_module", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpConv.upconv_module"], ["", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "UpConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "upconv_module", "(", "in_channels", ")", "\n", "self", ".", "layer2", "=", "self", ".", "upconv_module", "(", "in_channels", "//", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "upconv_module", "(", "in_channels", "//", "4", ")", "\n", "self", ".", "layer4", "=", "self", ".", "upconv_module", "(", "in_channels", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.FasterUpConv.__init__": [[153, 160], ["fcrn.Decoder.__init__", "fcrn.FasterUpConv.faster_upconv_module", "fcrn.FasterUpConv.faster_upconv_module", "fcrn.FasterUpConv.faster_upconv_module", "fcrn.FasterUpConv.faster_upconv_module"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["", "", "def", "__init__", "(", "self", ",", "in_channel", ")", ":", "\n", "        ", "super", "(", "FasterUpConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "faster_upconv_module", "(", "in_channel", ")", "\n", "self", ".", "layer2", "=", "self", ".", "faster_upconv_module", "(", "in_channel", "//", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "faster_upconv_module", "(", "in_channel", "//", "4", ")", "\n", "self", ".", "layer4", "=", "self", ".", "faster_upconv_module", "(", "in_channel", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.UpProj.__init__": [[195, 201], ["fcrn.Decoder.__init__", "fcrn.UpProj.UpProjModule", "fcrn.UpProj.UpProjModule", "fcrn.UpProj.UpProjModule", "fcrn.UpProj.UpProjModule"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["", "", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "UpProj", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "UpProjModule", "(", "in_channels", ")", "\n", "self", ".", "layer2", "=", "self", ".", "UpProjModule", "(", "in_channels", "//", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "UpProjModule", "(", "in_channels", "//", "4", ")", "\n", "self", ".", "layer4", "=", "self", ".", "UpProjModule", "(", "in_channels", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.FasterUpProj.__init__": [[268, 275], ["fcrn.Decoder.__init__", "fcrn.FasterUpProj.FasterUpProjModule", "fcrn.FasterUpProj.FasterUpProjModule", "fcrn.FasterUpProj.FasterUpProjModule", "fcrn.FasterUpProj.FasterUpProjModule"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["", "", "def", "__init__", "(", "self", ",", "in_channel", ")", ":", "\n", "        ", "super", "(", "FasterUpProj", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "FasterUpProjModule", "(", "in_channel", ")", "\n", "self", ".", "layer2", "=", "self", ".", "FasterUpProjModule", "(", "in_channel", "//", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "FasterUpProjModule", "(", "in_channel", "//", "4", ")", "\n", "self", ".", "layer4", "=", "self", ".", "FasterUpProjModule", "(", "in_channel", "//", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.ResNet.__init__": [[294, 352], ["torch.Module.__init__", "fcrn.Identity", "fcrn.ResNet.pretrained_model.load_state_dict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "fcrn.choose_decoder", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "fcrn.ResNet.conv2.apply", "fcrn.ResNet.bn2.apply", "fcrn.ResNet.upSample.apply", "fcrn.ResNet.conv3.apply", "RuntimeError", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "fcrn.weights_init", "fcrn.weights_init"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.choose_decoder", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.weights_init", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "layers", "=", "50", ",", "decoder", "=", "'upproj'", ",", "output_size", "=", "(", "240", ",", "320", ")", ",", "in_channels", "=", "3", ")", ":", "\n", "\n", "        ", "if", "layers", "not", "in", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", "]", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Only 18, 34, 50, 101, and 152 layer model are defined for ResNet. Got {}'", ".", "format", "(", "layers", ")", ")", "\n", "\n", "\n", "", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "pretrained_model", "=", "torchvision", ".", "models", ".", "__dict__", "[", "'resnet{}'", ".", "format", "(", "layers", ")", "]", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "pretrained_model", ".", "fc", "=", "Identity", "(", ")", "\n", "self", ".", "pretrained_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'checkpoints/resnet_%d.pth'", "%", "layers", ")", ")", "\n", "\n", "if", "in_channels", "==", "3", ":", "\n", "            ", "self", ".", "conv1", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'conv1'", "]", "\n", "self", ".", "bn1", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'bn1'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "weights_init", "(", "self", ".", "conv1", ")", "\n", "weights_init", "(", "self", ".", "bn1", ")", "\n", "\n", "", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "relu", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'relu'", "]", "\n", "self", ".", "maxpool", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'maxpool'", "]", "\n", "self", ".", "layer1", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'layer1'", "]", "\n", "self", ".", "layer2", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'layer2'", "]", "\n", "self", ".", "layer3", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'layer3'", "]", "\n", "self", ".", "layer4", "=", "self", ".", "pretrained_model", ".", "_modules", "[", "'layer4'", "]", "\n", "\n", "# clear memory", "\n", "del", "self", ".", "pretrained_model", "\n", "\n", "# define number of intermediate channels", "\n", "if", "layers", "<=", "34", ":", "\n", "            ", "num_channels", "=", "512", "\n", "", "elif", "layers", ">=", "50", ":", "\n", "            ", "num_channels", "=", "2048", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "num_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_channels", "//", "2", ")", "\n", "\n", "self", ".", "upSample", "=", "choose_decoder", "(", "decoder", ",", "num_channels", "//", "2", ")", "\n", "\n", "# setting bias=true doesn't improve accuracy", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "num_channels", "//", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bilinear", "=", "nn", ".", "Upsample", "(", "size", "=", "self", ".", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# weight init", "\n", "self", ".", "conv2", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "bn2", ".", "apply", "(", "weights_init", ")", "\n", "\n", "self", ".", "upSample", ".", "apply", "(", "weights_init", ")", "\n", "\n", "self", ".", "conv3", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.ResNet.forward": [[353, 374], ["fcrn.ResNet.conv1", "fcrn.ResNet.bn1", "fcrn.ResNet.relu", "fcrn.ResNet.maxpool", "fcrn.ResNet.layer1", "fcrn.ResNet.layer2", "fcrn.ResNet.layer3", "fcrn.ResNet.layer4", "fcrn.ResNet.conv2", "fcrn.ResNet.bn2", "fcrn.ResNet.upSample", "fcrn.ResNet.conv3", "fcrn.ResNet.bilinear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# resnet", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x4", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "# \u4e0a\u91c7\u6837", "\n", "x", "=", "self", ".", "upSample", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bilinear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.ResNet.get_1x_lr_params": [[375, 384], ["range", "len", "b[].parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net layer whose learning rate is 1x lr.\n        \"\"\"", "\n", "b", "=", "[", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ",", "self", ".", "maxpool", ",", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "k", "in", "b", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "k", ".", "requires_grad", ":", "\n", "                    ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.ResNet.get_10x_lr_params": [[385, 394], ["range", "len", "b[].parameters"], "methods", ["None"], ["", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net layer whose learning rate is 20x lr.\n        \"\"\"", "\n", "b", "=", "[", "self", ".", "conv2", ",", "self", ".", "bn2", ",", "self", ".", "upSample", ",", "self", ".", "conv3", ",", "self", ".", "bilinear", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "k", "in", "b", "[", "j", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "k", ".", "requires_grad", ":", "\n", "                    ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.Identity.__init__": [[397, 399], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.Identity.forward": [[400, 402], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__": [[409, 457], ["torch.Module.__init__", "int", "print", "fcrn.Identity", "fcrn.Identity", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "zip", "zip", "fcrn.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "fcrn.MoCo.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fcrn.MoCo.encoder_q.parameters", "fcrn.MoCo.encoder_k.parameters", "param_k.data.copy_", "fcrn.MoCo.header_q.parameters", "fcrn.MoCo.header_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.__init__"], ["def", "__init__", "(", "self", ",", "dim", "=", "256", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "layers", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "layers", "\n", "\n", "\n", "self", ".", "K", "=", "int", "(", "K", "/", "256", "*", "32", ")", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "\n", "self", ".", "encoder_q", "=", "torchvision", ".", "models", ".", "__dict__", "[", "'resnet{}'", ".", "format", "(", "layers", ")", "]", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "encoder_k", "=", "torchvision", ".", "models", ".", "__dict__", "[", "'resnet{}'", ".", "format", "(", "layers", ")", "]", "(", "pretrained", "=", "False", ")", "\n", "\n", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "print", "(", "dim_mlp", ")", "\n", "\n", "\n", "self", ".", "encoder_q", ".", "fc", "=", "Identity", "(", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "Identity", "(", ")", "\n", "\n", "\n", "self", ".", "header_q", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "header_k", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "header_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo._momentum_update_key_encoder": [[458, 468], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "fcrn.MoCo.encoder_q.parameters", "fcrn.MoCo.encoder_k.parameters", "fcrn.MoCo.header_q.parameters", "fcrn.MoCo.header_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "header_q", ".", "parameters", "(", ")", ",", "self", ".", "header_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo._dequeue_and_enqueue": [[469, 484], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "#keys = concat_all_gather(keys)", "\n", "\n", "        ", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo.forward": [[485, 540], ["fcrn.MoCo.encoder_q", "fcrn.MoCo.header_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "fcrn.MoCo.queue.clone().detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels.cuda.cuda.cuda", "fcrn.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fcrn.MoCo._momentum_update_key_encoder", "fcrn.MoCo.encoder_k", "fcrn.MoCo.header_k", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "fcrn.MoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.MoCo._momentum_update_key_encoder"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "\n", "#print(len(q), q[0].shape)", "\n", "#q = q[-1]", "\n", "\n", "#print(q.shape)", "\n", "q", "=", "self", ".", "header_q", "(", "q", ")", "# queries: NxC", "\n", "#print(q.shape)", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "#im_k, idx_unshuffle = self._batch_shuffle_ddp(im_k)", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "\n", "k", "=", "self", ".", "header_k", "(", "k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "#k = self._batch_unshuffle_ddp(k, idx_unshuffle)", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "clones", "=", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "#clones = clones.half()", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "clones", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "labels", "=", "labels", ".", "cuda", "(", "None", ",", "non_blocking", "=", "True", ")", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.weights_init": [[9, 24], ["isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "# Initialize filters with Gaussian random weights", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dsshim0125_grmc.model.fcrn.choose_decoder": [[277, 290], ["int", "fcrn.DeConv", "len", "fcrn.UpProj", "fcrn.UpConv", "fcrn.FasterUpProj"], "function", ["None"], ["", "", "def", "choose_decoder", "(", "decoder", ",", "in_channels", ")", ":", "\n", "    ", "if", "decoder", "[", ":", "6", "]", "==", "'deconv'", ":", "\n", "        ", "assert", "len", "(", "decoder", ")", "==", "7", "\n", "kernel_size", "=", "int", "(", "decoder", "[", "6", "]", ")", "\n", "return", "DeConv", "(", "in_channels", ",", "kernel_size", ")", "\n", "", "elif", "decoder", "==", "\"upproj\"", ":", "\n", "        ", "return", "UpProj", "(", "in_channels", ")", "\n", "", "elif", "decoder", "==", "\"upconv\"", ":", "\n", "        ", "return", "UpConv", "(", "in_channels", ")", "\n", "", "elif", "decoder", "==", "\"fasterupproj\"", ":", "\n", "        ", "return", "FasterUpProj", "(", "in_channels", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"invalid option for decoder: {}\"", ".", "format", "(", "decoder", ")", "\n", "\n"]]}