{"home.repos.pwc.inspect_result.nlpub_projlearn.None.predict.grouper": [[22, 25], ["itertools.zip_longest", "iter"], "function", ["None"], ["def", "grouper", "(", "n", ",", "iterable", ",", "fillvalue", "=", "None", ")", ":", "\n", "    ", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "zip_longest", "(", "fillvalue", "=", "fillvalue", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.evaluate.extract": [[55, 69], ["numpy.array", "Y_all_hat.append", "sum", "len", "cluster_indices.values"], "function", ["None"], ["def", "extract", "(", "clusters", ",", "Y_hat_clusters", ")", ":", "\n", "    ", "cluster_indices", "=", "{", "cluster", ":", "0", "for", "cluster", "in", "Y_hat_clusters", "}", "\n", "\n", "Y_all_hat", "=", "[", "]", "\n", "\n", "for", "cluster", "in", "clusters", ":", "\n", "        ", "Y_hat", "=", "Y_hat_clusters", "[", "cluster", "]", "[", "cluster_indices", "[", "cluster", "]", "]", "\n", "cluster_indices", "[", "cluster", "]", "+=", "1", "\n", "\n", "Y_all_hat", ".", "append", "(", "Y_hat", ")", "\n", "\n", "", "assert", "sum", "(", "cluster_indices", ".", "values", "(", ")", ")", "==", "len", "(", "clusters", ")", "\n", "\n", "return", "np", ".", "array", "(", "Y_all_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.evaluate.compute_ats": [[71, 73], ["sum", "len", "range", "measures[].values", "len"], "function", ["None"], ["", "def", "compute_ats", "(", "measures", ")", ":", "\n", "    ", "return", "[", "sum", "(", "measures", "[", "j", "]", ".", "values", "(", ")", ")", "/", "len", "(", "subsumptions_test", ")", "for", "j", "in", "range", "(", "len", "(", "measures", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.evaluate.compute_auc": [[75, 77], ["sum", "range", "len"], "function", ["None"], ["", "def", "compute_auc", "(", "ats", ")", ":", "\n", "    ", "return", "sum", "(", "[", "ats", "[", "j", "]", "+", "ats", "[", "j", "+", "1", "]", "for", "j", "in", "range", "(", "0", ",", "len", "(", "ats", ")", "-", "1", ")", "]", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.train.train": [[31, 98], ["tensorflow.train.AdamOptimizer().minimize", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "max", "print", "range", "sum", "print", "callback", "sess.run", "tensorflow.train.AdamOptimizer", "data.train_shuffle", "range", "datetime.timedelta", "datetime.datetime.now", "sess.run", "datetime.datetime.now", "train_times.append", "train_losses.append", "test_losses.append", "print", "min", "sess.run", "sess.run", "str"], "function", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.train_shuffle"], ["def", "train", "(", "config", ",", "model", ",", "data", ",", "callback", "=", "lambda", ":", "None", ")", ":", "\n", "    ", "train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "epsilon", "=", "1.", ")", ".", "minimize", "(", "model", ".", "loss", ")", "\n", "\n", "train_losses", ",", "test_losses", "=", "[", "]", ",", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "feed_dict_train", "=", "{", "\n", "model", ".", "X", ":", "data", ".", "X_train", ",", "\n", "model", ".", "Y", ":", "data", ".", "Y_train", ",", "\n", "model", ".", "Z", ":", "data", ".", "Z_train", "\n", "}", "\n", "\n", "feed_dict_test", "=", "{", "\n", "model", ".", "X", ":", "data", ".", "X_test", ",", "\n", "model", ".", "Y", ":", "data", ".", "Y_test", ",", "\n", "model", ".", "Z", ":", "data", ".", "Z_test", "\n", "}", "\n", "\n", "steps", "=", "max", "(", "data", ".", "Y_train", ".", "shape", "[", "0", "]", "//", "FLAGS", ".", "batch_size", ",", "1", ")", "\n", "\n", "print", "(", "'Cluster %d: %d train items and %d test items available; using %d steps of %d items.'", "%", "(", "\n", "data", ".", "cluster", "+", "1", ",", "\n", "data", ".", "X_train", ".", "shape", "[", "0", "]", ",", "\n", "data", ".", "X_test", ".", "shape", "[", "0", "]", ",", "\n", "steps", ",", "\n", "min", "(", "FLAGS", ".", "batch_size", ",", "data", ".", "X_train", ".", "shape", "[", "0", "]", ")", ")", ",", "\n", "flush", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "FLAGS", ".", "num_epochs", ")", ":", "\n", "            ", "X", ",", "Y", ",", "Z", "=", "data", ".", "train_shuffle", "(", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "head", "=", "step", "*", "FLAGS", ".", "batch_size", "\n", "tail", "=", "(", "step", "+", "1", ")", "*", "FLAGS", ".", "batch_size", "\n", "\n", "feed_dict", "=", "{", "\n", "model", ".", "X", ":", "X", "[", "head", ":", "tail", ",", ":", "]", ",", "\n", "model", ".", "Y", ":", "Y", "[", "head", ":", "tail", ",", ":", "]", ",", "\n", "model", ".", "Z", ":", "Z", "[", "head", ":", "tail", ",", ":", "]", "\n", "}", "\n", "\n", "t_this", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "sess", ".", "run", "(", "train_op", ",", "feed_dict", "=", "feed_dict", ")", "\n", "t_last", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "train_times", ".", "append", "(", "t_last", "-", "t_this", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", "or", "(", "epoch", "==", "0", ")", ":", "\n", "                ", "train_losses", ".", "append", "(", "sess", ".", "run", "(", "model", ".", "loss", ",", "feed_dict", "=", "feed_dict_train", ")", ")", "\n", "test_losses", ".", "append", "(", "sess", ".", "run", "(", "model", ".", "loss", ",", "feed_dict", "=", "feed_dict_test", ")", ")", "\n", "\n", "print", "(", "'Cluster %d: epoch = %05d, train loss = %f, test loss = %f.'", "%", "(", "\n", "data", ".", "cluster", "+", "1", ",", "\n", "epoch", "+", "1", ",", "\n", "train_losses", "[", "-", "1", "]", "/", "data", ".", "X_train", ".", "shape", "[", "0", "]", ",", "\n", "test_losses", "[", "-", "1", "]", "/", "data", ".", "X_test", ".", "shape", "[", "0", "]", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "t_delta", "=", "sum", "(", "train_times", ",", "datetime", ".", "timedelta", "(", ")", ")", "\n", "print", "(", "'Cluster %d done in %s.'", "%", "(", "data", ".", "cluster", "+", "1", ",", "str", "(", "t_delta", ")", ")", ",", "flush", "=", "True", ")", "\n", "callback", "(", "sess", ")", "\n", "\n", "return", "sess", ".", "run", "(", "model", ".", "Y_hat", ",", "feed_dict", "=", "feed_dict_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.train.main": [[100, 156], ["random.seed", "tensorflow.set_random_seed", "tensorflow.ConfigProto", "pickle.load", "pickle.load.predict", "pickle.load.predict", "print", "glob.glob", "os.path.isfile", "range", "numpy.savez_compressed", "print", "numpy.load", "numpy.load", "open", "print", "os.remove", "print", "os.remove", "Data", "tensorflow.train.Saver", "train.train", "print", "str", "tf.train.Saver.save"], "function", ["home.repos.pwc.inspect_result.nlpub_projlearn.None.train.train"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "    ", "random", ".", "seed", "(", "FLAGS", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "FLAGS", ".", "seed", ")", "\n", "\n", "if", "not", "FLAGS", ".", "gpu", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "''", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "\n", "with", "np", ".", "load", "(", "FLAGS", ".", "train", ")", "as", "npz", ":", "\n", "        ", "X_index_train", "=", "npz", "[", "'X_index'", "]", "\n", "Y_all_train", "=", "npz", "[", "'Y_all'", "]", "\n", "Z_all_train", "=", "npz", "[", "'Z_all'", "]", "\n", "\n", "", "with", "np", ".", "load", "(", "FLAGS", ".", "test", ")", "as", "npz", ":", "\n", "        ", "X_index_test", "=", "npz", "[", "'X_index'", "]", "\n", "Y_all_test", "=", "npz", "[", "'Y_all'", "]", "\n", "Z_all_test", "=", "npz", "[", "'Z_all'", "]", "\n", "\n", "", "X_all_train", "=", "Z_all_train", "[", "X_index_train", "[", ":", ",", "0", "]", ",", ":", "]", "\n", "X_all_test", "=", "Z_all_test", "[", "X_index_test", "[", ":", ",", "0", "]", ",", ":", "]", "\n", "\n", "kmeans", "=", "pickle", ".", "load", "(", "open", "(", "'kmeans.pickle'", ",", "'rb'", ")", ")", "\n", "\n", "clusters_train", "=", "kmeans", ".", "predict", "(", "Y_all_train", "-", "X_all_train", ")", "\n", "clusters_test", "=", "kmeans", ".", "predict", "(", "Y_all_test", "-", "X_all_test", ")", "\n", "\n", "model", "=", "MODELS", "[", "FLAGS", ".", "model", "]", "(", "x_size", "=", "Z_all_train", ".", "shape", "[", "1", "]", ",", "y_size", "=", "Y_all_train", ".", "shape", "[", "1", "]", ",", "w_stddev", "=", "FLAGS", ".", "stddev", ",", "\n", "lambda_", "=", "FLAGS", ".", "lambdac", ")", "\n", "print", "(", "model", ",", "flush", "=", "True", ")", "\n", "\n", "for", "path", "in", "glob", ".", "glob", "(", "'%s.k*.trained*'", "%", "FLAGS", ".", "model", ")", ":", "\n", "        ", "print", "(", "'Removing a stale file: \"%s\".'", "%", "path", ",", "flush", "=", "True", ")", "\n", "os", ".", "remove", "(", "path", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "'%s.test.npz'", "%", "FLAGS", ".", "model", ")", ":", "\n", "        ", "print", "(", "'Removing a stale file: \"%s\".'", "%", "(", "'%s.test.npz'", "%", "FLAGS", ".", "model", ")", ",", "flush", "=", "True", ")", "\n", "os", ".", "remove", "(", "'%s.test.npz'", "%", "FLAGS", ".", "model", ")", "\n", "\n", "", "Y_hat_test", "=", "{", "}", "\n", "\n", "for", "cluster", "in", "range", "(", "kmeans", ".", "n_clusters", ")", ":", "\n", "        ", "data", "=", "Data", "(", "\n", "cluster", ",", "clusters_train", ",", "clusters_test", ",", "\n", "X_index_train", ",", "Y_all_train", ",", "Z_all_train", ",", "\n", "X_index_test", ",", "Y_all_test", ",", "Z_all_test", "\n", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver_path", "=", "'%s.k%d.trained'", "%", "(", "FLAGS", ".", "model", ",", "cluster", "+", "1", ")", "\n", "Y_hat_test", "[", "str", "(", "cluster", ")", "]", "=", "train", "(", "config", ",", "model", ",", "data", ",", "callback", "=", "lambda", "sess", ":", "saver", ".", "save", "(", "sess", ",", "saver_path", ")", ")", "\n", "print", "(", "'Writing the output model to \"%s\".'", "%", "saver_path", ",", "flush", "=", "True", ")", "\n", "\n", "", "test_path", "=", "'%s.test.npz'", "%", "FLAGS", ".", "model", "\n", "np", ".", "savez_compressed", "(", "test_path", ",", "**", "Y_hat_test", ")", "\n", "print", "(", "'Writing the test data to \"%s\".'", "%", "test_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.identity.compute_ats": [[26, 28], ["sum", "len", "range", "measures[].values", "len"], "function", ["None"], ["", "", "def", "compute_ats", "(", "measures", ")", ":", "\n", "    ", "return", "[", "sum", "(", "measures", "[", "j", "]", ".", "values", "(", ")", ")", "/", "len", "(", "subsumptions_test", ")", "for", "j", "in", "range", "(", "len", "(", "measures", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.identity.compute_auc": [[30, 32], ["sum", "range", "len"], "function", ["None"], ["", "def", "compute_auc", "(", "ats", ")", ":", "\n", "    ", "return", "sum", "(", "[", "ats", "[", "j", "]", "+", "ats", "[", "j", "+", "1", "]", "for", "j", "in", "range", "(", "0", ",", "len", "(", "ats", ")", "-", "1", ")", "]", ")", "/", "2", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.prepare.read_subsumptions": [[33, 43], ["codecs.open", "csv.reader", "subsumptions.append"], "function", ["None"], ["def", "read_subsumptions", "(", "filename", ")", ":", "\n", "    ", "subsumptions", "=", "[", "]", "\n", "\n", "with", "codecs", ".", "open", "(", "filename", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "'\\t'", ",", "quoting", "=", "csv", ".", "QUOTE_NONE", ")", "\n", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "subsumptions", ".", "append", "(", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "subsumptions", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.prepare.read_synonyms": [[45, 56], ["collections.defaultdict", "codecs.open", "csv.reader", "list", "row[].split", "synonyms[].append"], "function", ["None"], ["", "def", "read_synonyms", "(", "filename", ")", ":", "\n", "    ", "synonyms", "=", "defaultdict", "(", "lambda", ":", "list", "(", ")", ")", "\n", "\n", "with", "codecs", ".", "open", "(", "filename", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "'\\t'", ",", "quoting", "=", "csv", ".", "QUOTE_NONE", ")", "\n", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "for", "word", "in", "row", "[", "1", "]", ".", "split", "(", "','", ")", ":", "\n", "                ", "synonyms", "[", "row", "[", "0", "]", "]", ".", "append", "(", "word", ")", "\n", "\n", "", "", "", "return", "synonyms", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.prepare.compute_XZ": [[64, 77], ["len", "X_index.append", "numpy.array", "numpy.array", "Z_all.append", "len"], "function", ["None"], ["def", "compute_XZ", "(", "subsumptions", ")", ":", "\n", "    ", "X_index", ",", "Z_all", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "hyponym", ",", "hypernym", "in", "subsumptions", ":", "\n", "        ", "offset", "=", "len", "(", "Z_all", ")", "\n", "word_synonyms", "=", "[", "hyponym", "]", "+", "synonyms", "[", "hyponym", "]", "\n", "\n", "X_index", ".", "append", "(", "[", "offset", ",", "len", "(", "word_synonyms", ")", "]", ")", "\n", "\n", "for", "synonym", "in", "word_synonyms", ":", "\n", "            ", "Z_all", ".", "append", "(", "w2v", "[", "synonym", "]", ")", "\n", "\n", "", "", "return", "(", "np", ".", "array", "(", "X_index", ",", "dtype", "=", "'int32'", ")", ",", "np", ".", "array", "(", "Z_all", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.cluster.evaluate": [[50, 55], ["sklearn.metrics.silhouette_score", "print"], "function", ["None"], ["", "def", "evaluate", "(", "k", ")", ":", "\n", "    ", "km", "=", "kmeans", "[", "k", "]", "\n", "score", "=", "silhouette_score", "(", "train_offsets", ",", "km", ".", "labels_", ",", "metric", "=", "'euclidean'", ",", "random_state", "=", "RANDOM_SEED", ")", "\n", "print", "(", "'Silhouette score for k=%d is %f.'", "%", "(", "k", ",", "score", ")", ")", "\n", "return", "(", "k", ",", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.None.dictionary.write_subsumptions": [[87, 92], ["open", "csv.writer", "csv.writer.writerow"], "function", ["None"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_hypernym.RegularizedHypernym.__init__": [[14, 25], ["baseline.Baseline.__init__", "tensorflow.matmul", "tensorflow.sub", "tensorflow.nn.l2_loss", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "lambda_", "=", "kwargs", "[", "'lambda_'", "]", "\n", "\n", "self", ".", "ZY_hat", "=", "tf", ".", "matmul", "(", "self", ".", "Z", ",", "self", ".", "W", ")", "\n", "\n", "self", ".", "ZY_error", "=", "tf", ".", "sub", "(", "self", ".", "ZY_hat", ",", "self", ".", "Y", ")", "\n", "self", ".", "ZY_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "ZY_error", ")", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "add", "(", "self", ".", "Y_loss", ",", "self", ".", "lambda_", "*", "self", ".", "ZY_loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_hyponym.RegularizedHyponym.__init__": [[15, 26], ["baseline.Baseline.__init__", "tensorflow.matmul", "regularized_hyponym.RegularizedHyponym.dot", "tensorflow.add", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__", "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.dot"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "lambda_", "=", "kwargs", "[", "'lambda_'", "]", "\n", "\n", "self", ".", "YY_hat", "=", "tf", ".", "matmul", "(", "self", ".", "Y_hat", ",", "self", ".", "W", ")", "\n", "\n", "self", ".", "YY_similarity", "=", "self", ".", "dot", "(", "self", ".", "YY_hat", ",", "self", ".", "X", ")", "\n", "self", ".", "YY_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "YY_similarity", ")", "*", "2", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "add", "(", "self", ".", "Y_loss", ",", "self", ".", "lambda_", "*", "self", ".", "YY_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_hyponym.RegularizedHyponym.__str__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<%s lambda=%f>'", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "lambda_", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_synonym_phi.RegularizedSynonymPhi.__init__": [[14, 21], ["regularized_hyponym_phi.RegularizedHyponymPhi.__init__", "regularized_synonym_phi.RegularizedSynonymPhi.dot", "tensorflow.add", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__", "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.dot"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "YY_similarity", "=", "self", ".", "dot", "(", "self", ".", "Y_hat", ",", "self", ".", "Z", ")", "\n", "self", ".", "YY_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "YY_similarity", ")", "*", "2", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "add", "(", "self", ".", "Y_loss", ",", "self", ".", "lambda_", "*", "self", ".", "YY_loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_synonym.RegularizedSynonym.__init__": [[15, 22], ["regularized_hyponym.RegularizedHyponym.__init__", "regularized_synonym.RegularizedSynonym.dot", "tensorflow.add", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__", "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.dot"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "YY_similarity", "=", "self", ".", "dot", "(", "self", ".", "YY_hat", ",", "self", ".", "Z", ")", "\n", "self", ".", "YY_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "YY_similarity", ")", "*", "2", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "add", "(", "self", ".", "Y_loss", ",", "self", ".", "lambda_", "*", "self", ".", "YY_loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.__init__": [[7, 22], ["data.Data.fetch", "data.Data.fetch", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.fetch", "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.fetch"], ["    ", "def", "__init__", "(", "self", ",", "cluster", ",", "clusters_train", ",", "clusters_test", ",", "\n", "X_index_train", ",", "Y_all_train", ",", "Z_all_train", ",", "\n", "X_index_test", ",", "Y_all_test", ",", "Z_all_test", ")", ":", "\n", "        ", "self", ".", "cluster", "=", "cluster", "\n", "\n", "self", ".", "subsumptions_train", "=", "[", "i", "for", "i", ",", "c", "in", "enumerate", "(", "clusters_train", ")", "if", "c", "==", "self", ".", "cluster", "]", "\n", "self", ".", "subsumptions_test", "=", "[", "i", "for", "i", ",", "c", "in", "enumerate", "(", "clusters_test", ")", "if", "c", "==", "self", ".", "cluster", "]", "\n", "\n", "self", ".", "X_index_train", ",", "self", ".", "Y_all_train", ",", "self", ".", "Z_all_train", "=", "X_index_train", ",", "Y_all_train", ",", "Z_all_train", "\n", "self", ".", "X_index_test", ",", "self", ".", "Y_all_test", ",", "self", ".", "Z_all_test", "=", "X_index_test", ",", "Y_all_test", ",", "Z_all_test", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "Y_train", ",", "self", ".", "Z_train", "=", "self", ".", "fetch", "(", "self", ".", "subsumptions_train", ",", "self", ".", "X_index_train", ",", "\n", "self", ".", "Y_all_train", ",", "self", ".", "Z_all_train", ")", "\n", "self", ".", "X_test", ",", "self", ".", "Y_test", ",", "self", ".", "Z_test", "=", "self", ".", "fetch", "(", "self", ".", "subsumptions_test", ",", "self", ".", "X_index_test", ",", "self", ".", "Y_all_test", ",", "\n", "self", ".", "Z_all_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.train_shuffle": [[23, 27], ["random.shuffle", "data.Data.fetch"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.fetch"], ["", "def", "train_shuffle", "(", "self", ")", ":", "\n", "        ", "subsumptions", "=", "self", ".", "subsumptions_train", "[", ":", "]", "\n", "random", ".", "shuffle", "(", "subsumptions", ")", "\n", "return", "self", ".", "fetch", "(", "subsumptions", ",", "self", ".", "X_index_train", ",", "self", ".", "Y_all_train", ",", "self", ".", "Z_all_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.fetch": [[28, 34], ["data.Data.sample_Z"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.sample_Z"], ["", "def", "fetch", "(", "self", ",", "subsumptions", ",", "X_index", ",", "Y_all", ",", "Z_all", ")", ":", "\n", "        ", "X", "=", "Z_all", "[", "X_index", "[", "subsumptions", ",", "0", "]", "]", "\n", "Y", "=", "Y_all", "[", "subsumptions", "]", "\n", "Z", "=", "self", ".", "sample_Z", "(", "subsumptions", ",", "X_index", ",", "Z_all", ")", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "Y", ".", "shape", "[", "0", "]", "==", "Z", ".", "shape", "[", "0", "]", "\n", "return", "(", "X", ",", "Y", ",", "Z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.data.Data.sample_Z": [[35, 39], ["random.choice", "len", "len", "range"], "methods", ["None"], ["", "def", "sample_Z", "(", "self", ",", "subsumptions", ",", "X_index", ",", "Z_all", ")", ":", "\n", "        ", "indices", "=", "[", "random", ".", "choice", "(", "range", "(", "X_index", "[", "i", "]", "[", "0", "]", ",", "X_index", "[", "i", "]", "[", "0", "]", "+", "X_index", "[", "i", "]", "[", "1", "]", ")", ")", "for", "i", "in", "subsumptions", "]", "\n", "assert", "len", "(", "indices", ")", "==", "len", "(", "subsumptions", ")", "\n", "return", "Z_all", "[", "indices", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.mlp.MLP.__init__": [[11, 45], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "mlp.MLP.layers.append", "tensorflow.sub", "tensorflow.nn.l2_loss", "mlp.MLP.layers.append", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "lambda_", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "x_size", "=", "x_size", "\n", "self", ".", "y_size", "=", "y_size", "\n", "\n", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "x_size", "]", ",", "name", "=", "'X'", ")", "\n", "self", ".", "Y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "y_size", "]", ",", "name", "=", "'Y'", ")", "\n", "self", ".", "Z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "x_size", "]", ",", "name", "=", "'Z'", ")", "\n", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "\n", "self", ".", "layers", "=", "[", "self", ".", "X", "]", "\n", "\n", "for", "i", "in", "(", "5", ",", "100", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "self", ".", "layers", "[", "-", "1", "]", ",", "num_outputs", "=", "i", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_initializer", "=", "lambda", "shape", ",", "dtype", ":", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", ".1", ",", "dtype", "=", "dtype", ")", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "lambda_", ")", ",", "\n", "biases_initializer", "=", "lambda", "shape", ",", "dtype", ":", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", ".1", ",", "dtype", "=", "dtype", ")", ",", "\n", "biases_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "lambda_", ")", ")", ")", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "self", ".", "layers", "[", "-", "1", "]", ",", "num_outputs", "=", "y_size", ",", "\n", "weights_initializer", "=", "lambda", "shape", ",", "dtype", ":", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", ".1", ",", "dtype", "=", "dtype", ")", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "lambda_", ")", ",", "\n", "biases_initializer", "=", "lambda", "shape", ",", "dtype", ":", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", ".1", ",", "dtype", "=", "dtype", ")", ",", "\n", "biases_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "lambda_", ")", ")", ")", "\n", "\n", "self", ".", "Y_hat", "=", "self", ".", "layers", "[", "-", "1", "]", "\n", "\n", "self", ".", "Y_error", "=", "tf", ".", "sub", "(", "self", ".", "Y_hat", ",", "self", ".", "Y", ")", "\n", "self", ".", "Y_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "Y_error", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "Y_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.mlp.MLP.__str__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<%s lambda=%f layers=%d>'", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "lambda_", ",", "len", "(", "self", ".", "layers", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_hyponym_phi.RegularizedHyponymPhi.__init__": [[14, 23], ["baseline.Baseline.__init__", "regularized_hyponym_phi.RegularizedHyponymPhi.dot", "tensorflow.add", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__", "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.dot"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "lambda_", "=", "kwargs", "[", "'lambda_'", "]", "\n", "\n", "self", ".", "YY_similarity", "=", "self", ".", "dot", "(", "self", ".", "Y_hat", ",", "self", ".", "X", ")", "\n", "self", ".", "YY_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "YY_similarity", ")", "*", "2", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "add", "(", "self", ".", "Y_loss", ",", "self", ".", "lambda_", "*", "self", ".", "YY_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.regularized_hyponym_phi.RegularizedHyponymPhi.__str__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<%s lambda=%f>'", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "lambda_", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.__init__": [[12, 29], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.sub", "baseline.Baseline.l2_norm", "tensorflow.nn.l2_loss", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.l2_norm"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "x_size", "=", "x_size", "\n", "self", ".", "y_size", "=", "y_size", "\n", "self", ".", "w_stddev", "=", "w_stddev", "\n", "\n", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "x_size", "]", ",", "name", "=", "'X'", ")", "\n", "self", ".", "Y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "y_size", "]", ",", "name", "=", "'Y'", ")", "\n", "self", ".", "Z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "x_size", "]", ",", "name", "=", "'Z'", ")", "\n", "self", ".", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "(", "self", ".", "x_size", ",", "self", ".", "y_size", ")", ",", "stddev", "=", "self", ".", "w_stddev", ")", ",", "name", "=", "'W'", ")", "\n", "\n", "self", ".", "Y_hat", "=", "tf", ".", "matmul", "(", "self", ".", "X", ",", "self", ".", "W", ")", "\n", "self", ".", "Y_error", "=", "tf", ".", "sub", "(", "self", ".", "Y_hat", ",", "self", ".", "Y", ")", "\n", "self", ".", "Y_norm", "=", "self", ".", "l2_norm", "(", "self", ".", "Y_error", ")", "\n", "\n", "self", ".", "Y_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "Y_norm", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "Y_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.__str__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<%s>'", "%", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.l2_norm": [[33, 37], ["tensorflow.name_scope", "tensorflow.sqrt", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "l2_norm", "(", "self", ",", "t", ",", "name", "=", "'l2_norm_op'", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "l2_norm_op", "=", "tf", ".", "sqrt", "(", "tf", ".", "nn", ".", "l2_loss", "(", "t", ")", "*", "2", ",", "name", "=", "scope", ")", "\n", "return", "l2_norm_op", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.dot": [[38, 42], ["tensorflow.name_scope", "tensorflow.diag_part", "tensorflow.matmul"], "methods", ["None"], ["", "", "def", "dot", "(", "self", ",", "X", ",", "Y", ",", "name", "=", "'dot_op'", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "dot_op", "=", "tf", ".", "diag_part", "(", "tf", ".", "matmul", "(", "X", ",", "Y", ",", "transpose_b", "=", "True", ")", ")", "\n", "return", "dot_op", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.init_summary": [[43, 48], ["tensorflow.summary.histogram", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all"], "methods", ["None"], ["", "", "def", "init_summary", "(", "self", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'W'", ",", "self", ".", "W", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'Y_LOSS'", ",", "self", ".", "Y_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'LOSS'", ",", "self", ".", "loss", ")", "\n", "self", ".", "summary", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__": [[13, 19], ["baseline.Baseline.__init__", "tensorflow.sqrt", "tensorflow.trace", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.frobenius_loss.FrobeniusLoss.__init__"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_size", ",", "y_size", ",", "w_stddev", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "F_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "trace", "(", "tf", ".", "matmul", "(", "self", ".", "Y_error", ",", "tf", ".", "transpose", "(", "self", ".", "Y_error", ")", ")", ")", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "F_norm", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.nn_vec.nn_vec_basic": [[9, 32], ["numpy.dot", "argmaxk.argmaxk_rows", "[].repeat", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.nlpub_projlearn.projlearn.baseline.Baseline.dot", "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.argmaxk.argmaxk_rows"], ["def", "nn_vec_basic", "(", "arr1", ",", "arr2", ",", "topn", ",", "sort", "=", "True", ",", "return_sims", "=", "False", ",", "nthreads", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    For each row in arr1 (m1 x d) find topn most similar rows from arr2 (m2 x d). Similarity is defined as dot product.\n    Please note, that in the case of normalized rows in arr1 and arr2 dot product will be equal to cosine and will be\n    monotonically decreasing function of Eualidean distance.\n    :param arr1: array of vectors to find nearest neighbours for\n    :param arr2: array of vectors to search for nearest neighbours in\n    :param topn: number of nearest neighbours\n    :param sort: indices in i-th row of returned array should sort corresponding rows of arr2 in descending order of\n    similarity to i-th row of arr2\n    :param return_sims: return similarities along with indices of nearest neighbours\n    :param nthreads:\n    :return: array (m1 x topn) where i-th row contains indices of rows in arr2 most similar to i-th row of m1, and, if\n    return_sims=True, an array (m1 x topn) of corresponding similarities.\n    \"\"\"", "\n", "sims", "=", "np", ".", "dot", "(", "arr1", ",", "arr2", ".", "T", ")", "\n", "best_inds", "=", "argmaxk_rows", "(", "sims", ",", "topn", ",", "sort", "=", "sort", ",", "nthreads", "=", "nthreads", ")", "\n", "if", "not", "return_sims", ":", "\n", "        ", "return", "best_inds", "\n", "\n", "# generate row indices corresponding to best_inds (just current row id in each row) (m x k)", "\n", "", "rows", "=", "np", ".", "arange", "(", "best_inds", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "intp", ")", "[", ":", ",", "np", ".", "newaxis", "]", ".", "repeat", "(", "best_inds", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "return", "best_inds", ",", "sims", "[", "rows", ",", "best_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.nn_vec.nn_vec": [[34, 67], ["nn_vec.nn_vec_basic", "int", "int", "range", "nn_vec.nn_vec_basic", "psutil.virtual_memory", "numpy.ceil", "numpy.ceil", "print", "print", "nn_vec.nn_vec_basic", "print", "numpy.vstack", "numpy.vstack", "min"], "function", ["home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.nn_vec.nn_vec_basic", "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.nn_vec.nn_vec_basic", "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.nn_vec.nn_vec_basic"], ["", "def", "nn_vec", "(", "m1", ",", "m2", ",", "topn", ",", "sort", "=", "True", ",", "return_sims", "=", "False", ",", "nthreads", "=", "8", ",", "USE_MEM_PERCENT", "=", "0.3", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "ndists", "=", "m1", ".", "shape", "[", "0", "]", "*", "m2", ".", "shape", "[", "0", "]", "# number of distances", "\n", "\n", "if", "m1", ".", "shape", "[", "0", "]", "<", "2", "or", "ndists", "<", "10", "**", "7", ":", "# cannot or need not split m1 into batches", "\n", "        ", "return", "nn_vec_basic", "(", "m1", ",", "m2", ",", "topn", "=", "topn", ",", "sort", "=", "sort", ",", "return_sims", "=", "return_sims", ",", "nthreads", "=", "nthreads", ")", "\n", "\n", "# estimate memory required to store results:", "\n", "# best_inds: m1.shape[0] * topn * tmp1.itemsize, dists: m1.shape[0] * topn * tmp2.itemsize", "\n", "", "tmp_inds", ",", "tmp_dists", "=", "nn_vec_basic", "(", "m1", "[", ":", "2", ",", ":", "]", ",", "m2", "[", ":", "2", ",", ":", "]", ",", "topn", "=", "2", ",", "sort", "=", "False", ",", "return_sims", "=", "True", ",", "nthreads", "=", "1", ")", "\n", "res_mem", "=", "m1", ".", "shape", "[", "0", "]", "*", "topn", "*", "(", "tmp_inds", ".", "itemsize", "+", "(", "tmp_dists", ".", "itemsize", "if", "return_sims", "else", "0", ")", ")", "\n", "\n", "amem", "=", "psutil", ".", "virtual_memory", "(", ")", ".", "available", "\n", "use_mem", "=", "(", "amem", "-", "res_mem", ")", "*", "USE_MEM_PERCENT", "\n", "dists_mem", "=", "ndists", "*", "tmp_dists", ".", "itemsize", "# memory required for the whole distances matrix", "\n", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "dists_mem", "/", "use_mem", ")", ")", "\n", "batch_size", "=", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "m1", ".", "shape", "[", "0", "]", "/", "num_batches", ")", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "'Full distances matrix will occupy %.2fG; we would like to occupy %.2fG from %.2fG of available memory...'", "%", "(", "1.", "*", "dists_mem", "/", "2", "**", "30", ",", "1.", "*", "use_mem", "/", "2", "**", "30", ",", "1.", "*", "amem", "/", "2", "**", "30", ")", ")", "\n", "print", "(", "'... processing in %d batches of %d rows'", "%", "(", "num_batches", ",", "batch_size", ")", ")", "\n", "\n", "", "res_inds", ",", "res_dists", "=", "None", ",", "None", "\n", "for", "st", "in", "range", "(", "0", ",", "m1", ".", "shape", "[", "0", "]", ",", "batch_size", ")", ":", "\n", "        ", "en", "=", "st", "+", "batch_size", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Processing rows %d-%d from %d'", "%", "(", "st", ",", "min", "(", "en", "-", "1", ",", "m1", ".", "shape", "[", "0", "]", ")", ",", "m1", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "res", "=", "nn_vec_basic", "(", "m1", "[", "st", ":", "en", ",", ":", "]", ",", "m2", ",", "topn", "=", "topn", ",", "sort", "=", "sort", ",", "return_sims", "=", "return_sims", ",", "nthreads", "=", "nthreads", ")", "\n", "res0", "=", "res", "[", "0", "]", "if", "return_sims", "else", "res", "\n", "res_inds", "=", "np", ".", "vstack", "(", "[", "res_inds", ",", "res0", "]", ")", "if", "res_inds", "is", "not", "None", "else", "res0", "\n", "if", "return_sims", ":", "\n", "            ", "res_dists", "=", "np", ".", "vstack", "(", "[", "res_dists", ",", "res", "[", "1", "]", "]", ")", "if", "res_dists", "is", "not", "None", "else", "res", "[", "1", "]", "\n", "", "", "return", "(", "res_inds", ",", "res_dists", ")", "if", "return_sims", "else", "res_inds", "\n", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.argmaxk.argmaxk_rows_basic": [[10, 18], ["numpy.argsort", "numpy.argpartition"], "function", ["None"], ["def", "argmaxk_rows_basic", "(", "arr", ",", "k", "=", "10", ",", "sort", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Reference non-optimized implementation.\n    \"\"\"", "\n", "if", "sort", ":", "\n", "        ", "return", "np", ".", "argsort", "(", "arr", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "-", "k", "-", "1", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "argpartition", "(", "arr", ",", "kth", "=", "-", "k", ",", "axis", "=", "1", ")", "[", ":", ",", "-", "k", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.argmaxk.argmaxk_rows_opt1": [[20, 37], ["[].repeat", "numpy.argpartition", "numpy.argsort", "numpy.arange"], "function", ["None"], ["", "", "def", "argmaxk_rows_opt1", "(", "arr", ",", "k", "=", "10", ",", "sort", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Optimized implementation. When sort=False it is equal to argmaxk_rows_basic. When sort=True and k << arr.shape[1],\n    it is should be faster, because we argsort only subarray of k max elements from each row of arr (arr.shape[0] x k) instead of\n    the whole array arr (arr.shape[0] x arr.shape[1]).\n    \"\"\"", "\n", "best_inds", "=", "np", ".", "argpartition", "(", "arr", ",", "kth", "=", "-", "k", ",", "axis", "=", "1", ")", "[", ":", ",", "-", "k", ":", "]", "# column indices of k max elements in each row (m x k)", "\n", "if", "not", "sort", ":", "\n", "        ", "return", "best_inds", "\n", "# generate row indices corresponding to best_ids (just current row id in each row) (m x k)", "\n", "", "rows", "=", "np", ".", "arange", "(", "best_inds", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "intp", ")", "[", ":", ",", "np", ".", "newaxis", "]", ".", "repeat", "(", "best_inds", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "best_elems", "=", "arr", "[", "rows", ",", "best_inds", "]", "# select k max elements from each row using advanced indexing (m x k)", "\n", "# indices which sort each row of best_elems in descending order (m x k)", "\n", "best_elems_inds", "=", "np", ".", "argsort", "(", "best_elems", ",", "axis", "=", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# reorder best_indices so that arr[i, sorted_best_inds[i,:]] will be sorted in descending order", "\n", "sorted_best_inds", "=", "best_inds", "[", "rows", ",", "best_elems_inds", "]", "\n", "return", "sorted_best_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.argmaxk.argmaxk_rows": [[39, 69], ["ValueError", "fimpl", "int", "parallel.parallel_map", "numpy.vstack", "math.ceil", "fimpl", "range", "IMPLS.keys"], "function", ["home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.parallel.parallel_map"], ["", "def", "argmaxk_rows", "(", "arr", ",", "k", "=", "10", ",", "sort", "=", "False", ",", "impl", "=", "'opt1'", ",", "nthreads", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    Returns column indices of k max elements in each row of input ndarray.\n    :param arr: input ndarray (m x n)\n    :param k: number of maximum values to find in each row of input matrix\n    :param sort: for each row of input matrix returned column indices should sort k max elements of this row in\n    descending order (particularly, res[:,0] equals to argmax(arr, axis=1) )\n    :param impl: single thread implementation to use (look at implementations docs)\n    :param nthreads: split input array into this many parts and process in parallel; takes advantage of the fact that\n    numpy.argpartition is not parallelized\n    :return: output ndarray (m x k) of column indices of k max elements in each row of input matrix\n    \"\"\"", "\n", "IMPLS", "=", "{", "'basic'", ":", "argmaxk_rows_basic", ",", "'opt1'", ":", "argmaxk_rows_opt1", "}", "\n", "if", "impl", "not", "in", "IMPLS", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown value of parameter: impl=%s; possible values: %r'", "%", "(", "impl", ",", "IMPLS", ".", "keys", "(", ")", ")", ")", "\n", "", "fimpl", "=", "IMPLS", "[", "impl", "]", "\n", "\n", "if", "nthreads", "==", "1", ":", "\n", "        ", "res", "=", "fimpl", "(", "arr", ",", "k", ",", "sort", ")", "\n", "", "else", ":", "\n", "        ", "m", "=", "arr", ".", "shape", "[", "0", "]", "\n", "batchsize", "=", "int", "(", "ceil", "(", "1.", "*", "m", "/", "nthreads", ")", ")", "\n", "\n", "def", "ppp", "(", "i", ")", ":", "\n", "            ", "return", "fimpl", "(", "arr", "[", "i", ":", "i", "+", "batchsize", ",", ":", "]", ",", "k", ",", "sort", ")", "\n", "\n", "", "lres", "=", "parallel_map", "(", "ppp", ",", "range", "(", "0", ",", "m", ",", "batchsize", ")", ",", "threads", "=", "nthreads", ")", "\n", "res", "=", "np", ".", "vstack", "(", "lres", ")", "\n", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.parallel.foreach": [[8, 68], ["threading.Lock", "zip().__iter__", "l.__iter__", "threading.Thread", "t.start", "t.join", "a().with_traceback", "sorted", "threading.Lock.acquire", "range", "d.items", "f", "f", "zip", "a", "itertools.count", "l.__iter__", "l.__iter__.__next__", "threading.Lock.release", "f", "f", "sys.exc_info", "threading.Lock.acquire", "exceptions.append", "threading.Lock.release"], "function", ["None"], ["def", "foreach", "(", "f", ",", "l", ",", "threads", "=", "3", ",", "return_", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Apply f to each element of l, in parallel. Return list [f(v) for v in l], the order of results f(v) is the same as\n    the order of inputs v in l.\n    \"\"\"", "\n", "\n", "if", "threads", ">", "1", ":", "\n", "        ", "iteratorlock", "=", "threading", ".", "Lock", "(", ")", "\n", "exceptions", "=", "[", "]", "\n", "if", "return_", ":", "\n", "            ", "n", "=", "0", "\n", "d", "=", "{", "}", "\n", "i", "=", "zip", "(", "count", "(", ")", ",", "l", ".", "__iter__", "(", ")", ")", ".", "__iter__", "(", ")", "\n", "", "else", ":", "\n", "            ", "i", "=", "l", ".", "__iter__", "(", ")", "\n", "\n", "", "def", "runall", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "iteratorlock", ".", "acquire", "(", ")", "\n", "try", ":", "\n", "                    ", "try", ":", "\n", "                        ", "if", "exceptions", ":", "\n", "                            ", "return", "\n", "", "v", "=", "i", ".", "__next__", "(", ")", "\n", "", "finally", ":", "\n", "                        ", "iteratorlock", ".", "release", "(", ")", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "return", "\n", "", "try", ":", "\n", "                    ", "if", "return_", ":", "\n", "                        ", "n", ",", "x", "=", "v", "\n", "d", "[", "n", "]", "=", "f", "(", "x", ")", "\n", "", "else", ":", "\n", "                        ", "f", "(", "v", ")", "\n", "", "", "except", ":", "\n", "                    ", "e", "=", "sys", ".", "exc_info", "(", ")", "\n", "iteratorlock", ".", "acquire", "(", ")", "\n", "try", ":", "\n", "                        ", "exceptions", ".", "append", "(", "e", ")", "\n", "", "finally", ":", "\n", "                        ", "iteratorlock", ".", "release", "(", ")", "\n", "\n", "", "", "", "", "threadlist", "=", "[", "threading", ".", "Thread", "(", "target", "=", "runall", ")", "for", "j", "in", "range", "(", "threads", ")", "]", "\n", "for", "t", "in", "threadlist", ":", "\n", "            ", "t", ".", "start", "(", ")", "\n", "", "for", "t", "in", "threadlist", ":", "\n", "            ", "t", ".", "join", "(", ")", "\n", "", "if", "exceptions", ":", "\n", "            ", "a", ",", "b", ",", "c", "=", "exceptions", "[", "0", "]", "\n", "raise", "a", "(", "b", ")", ".", "with_traceback", "(", "c", ")", "\n", "", "if", "return_", ":", "\n", "            ", "r", "=", "sorted", "(", "d", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", "# the results should be in the same order as inputs in l", "\n", "return", "[", "v", "for", "(", "n", ",", "v", ")", "in", "r", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "return_", ":", "\n", "            ", "return", "[", "f", "(", "v", ")", "for", "v", "in", "l", "]", "\n", "", "else", ":", "\n", "            ", "for", "v", "in", "l", ":", "\n", "                ", "f", "(", "v", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.parallel.parallel_map": [[70, 72], ["parallel.foreach"], "function", ["home.repos.pwc.inspect_result.nlpub_projlearn.batch_sim.parallel.foreach"], ["", "", "", "def", "parallel_map", "(", "f", ",", "l", ",", "threads", "=", "3", ")", ":", "\n", "    ", "return", "foreach", "(", "f", ",", "l", ",", "threads", "=", "threads", ",", "return_", "=", "True", ")", "\n", "", ""]]}