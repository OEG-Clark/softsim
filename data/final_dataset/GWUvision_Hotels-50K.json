{"home.repos.pwc.inspect_result.GWUvision_Hotels-50K.None.download_train.url_to_image": [[11, 16], ["opener.open", "numpy.asarray", "cv2.imdecode", "bytearray", "opener.open.read"], "function", ["None"], ["def", "url_to_image", "(", "url", ")", ":", "\n", "    ", "resp", "=", "opener", ".", "open", "(", "url", ")", "\n", "image", "=", "np", ".", "asarray", "(", "bytearray", "(", "resp", ".", "read", "(", ")", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "image", "=", "cv2", ".", "imdecode", "(", "image", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.None.download_train.download_and_resize": [[18, 43], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.isfile", "download_train.url_to_image", "cv2.imwrite", "print", "print", "print", "round", "cv2.resize", "round", "cv2.resize", "str", "im[].split"], "function", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.None.download_train.url_to_image"], ["", "def", "download_and_resize", "(", "imList", ")", ":", "\n", "    ", "for", "im", "in", "imList", ":", "\n", "        ", "try", ":", "\n", "            ", "saveDir", "=", "os", ".", "path", ".", "join", "(", "'./images/train/'", ",", "im", "[", "0", "]", ",", "im", "[", "1", "]", ",", "im", "[", "2", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saveDir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "saveDir", ")", "\n", "\n", "", "savePath", "=", "os", ".", "path", ".", "join", "(", "saveDir", ",", "str", "(", "im", "[", "3", "]", ")", "+", "'.'", "+", "im", "[", "4", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "savePath", ")", ":", "\n", "                ", "img", "=", "url_to_image", "(", "im", "[", "4", "]", ")", "\n", "if", "img", ".", "shape", "[", "1", "]", ">", "img", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "width", "=", "640", "\n", "height", "=", "round", "(", "(", "640", "*", "img", ".", "shape", "[", "0", "]", ")", "/", "img", ".", "shape", "[", "1", "]", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "width", ",", "height", ")", ")", "\n", "", "else", ":", "\n", "                    ", "height", "=", "640", "\n", "width", "=", "round", "(", "(", "640", "*", "img", ".", "shape", "[", "1", "]", ")", "/", "img", ".", "shape", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "width", ",", "height", ")", ")", "\n", "", "cv2", ".", "imwrite", "(", "savePath", ",", "img", ")", "\n", "print", "(", "'Good: '", "+", "savePath", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Already saved: '", "+", "savePath", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'Bad: '", "+", "savePath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.None.download_train.main": [[44, 73], ["open", "csv.reader", "next", "open", "csv.reader", "next", "multiprocessing.Pool", "multiprocessing.cpu_count", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "images.append", "multiprocessing.Pool.apply_async"], "function", ["None"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "hotel_f", "=", "open", "(", "'./input/dataset/hotel_info.csv'", ",", "'r'", ")", "\n", "hotel_reader", "=", "csv", ".", "reader", "(", "hotel_f", ")", "\n", "hotel_headers", "=", "next", "(", "hotel_reader", ",", "None", ")", "\n", "hotel_to_chain", "=", "{", "}", "\n", "for", "row", "in", "hotel_reader", ":", "\n", "        ", "hotel_to_chain", "[", "row", "[", "0", "]", "]", "=", "row", "[", "2", "]", "\n", "\n", "", "train_f", "=", "open", "(", "'./input/dataset/train_set.csv'", ",", "'r'", ")", "\n", "train_reader", "=", "csv", ".", "reader", "(", "train_f", ")", "\n", "train_headers", "=", "next", "(", "train_reader", ",", "None", ")", "\n", "\n", "images", "=", "[", "]", "\n", "for", "im", "in", "train_reader", ":", "\n", "        ", "im_id", "=", "im", "[", "0", "]", "\n", "im_url", "=", "im", "[", "2", "]", "\n", "im_source", "=", "im", "[", "3", "]", "\n", "hotel", "=", "im", "[", "1", "]", "\n", "chain", "=", "hotel_to_chain", "[", "hotel", "]", "\n", "images", ".", "append", "(", "(", "chain", ",", "hotel", ",", "im_source", ",", "im_id", ",", "im_url", ")", ")", "\n", "\n", "", "pool", "=", "multiprocessing", ".", "Pool", "(", ")", "\n", "NUM_THREADS", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "\n", "imDict", "=", "{", "}", "\n", "for", "cpu", "in", "range", "(", "NUM_THREADS", ")", ":", "\n", "        ", "pool", ".", "apply_async", "(", "download_and_resize", ",", "[", "images", "[", "cpu", ":", ":", "NUM_THREADS", "]", "]", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.log_loss.main": [[13, 50], ["os.path.dirname", "utils.id_to_class_parser", "utils.id_to_class_parser", "numpy.unique", "numpy.array", "print", "print", "os.path.join", "os.path.join", "utils.id_to_class_parser.values", "open", "csv.reader", "int", "numpy.zeros", "numpy.array", "numpy.array", "sklearn.metrics.log_loss", "numpy.vstack", "numpy.mean", "print", "print", "print", "float", "numpy.where", "numpy.arange", "str", "numpy.where", "str", "str", "int"], "function", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser"], ["def", "main", "(", "csv_file", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "test_id_to_class", "=", "id_to_class_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/test_set.csv'", ")", ")", "\n", "train_id_to_class", "=", "id_to_class_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/train_set.csv'", ")", ")", "\n", "hotel_class_ids", "=", "np", ".", "unique", "(", "train_id_to_class", ".", "values", "(", ")", ")", "\n", "\n", "losses", "=", "np", ".", "array", "(", "(", "0", ")", ")", "\n", "with", "open", "(", "csv_file", ")", "as", "cf", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "cf", ",", "delimiter", "=", "','", ")", "\n", "lnNum", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "if", "lnNum", "%", "1000", "==", "0", "and", "lnNum", "!=", "0", ":", "\n", "                ", "print", "(", "'Computed log loss for rows '", "+", "str", "(", "lnNum", "-", "1000", ")", "+", "' through '", "+", "str", "(", "lnNum", ")", ")", "\n", "", "if", "lnNum", "==", "0", ":", "\n", "                ", "print", "(", "'Starting to compute log loss. This may take a while!'", ")", "\n", "", "query_image_id", "=", "int", "(", "row", "[", "0", "]", ")", "\n", "result_probs", "=", "np", ".", "zeros", "(", "(", "hotel_class_ids", ".", "shape", "[", "0", "]", ")", ")", "\n", "try", ":", "\n", "                ", "query_class", "=", "test_id_to_class", "[", "query_image_id", "]", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"Query image ID (\"", "+", "row", "[", "0", "]", "+", "\") in row \"", "+", "str", "(", "lnNum", ")", "+", "\" is unknown.\"", ")", "\n", "break", "\n", "\n", "# check which classes are in the result file, look up what the class index is for that class", "\n", "", "result_class_inds", "=", "np", ".", "array", "(", "[", "np", ".", "where", "(", "hotel_class_ids", "==", "int", "(", "r", ")", ")", "[", "0", "]", "[", "0", "]", "for", "r", "in", "row", "[", "1", ":", ":", "2", "]", "]", ")", "\n", "# set the values in result_probs for each class in the result file", "\n", "result_probs", "[", "result_class_inds", "]", "=", "np", ".", "array", "(", "[", "float", "(", "r", ")", "for", "r", "in", "row", "[", "2", ":", ":", "2", "]", "]", ")", "\n", "# get the index for the correct hotel", "\n", "query_class_ind", "=", "np", ".", "where", "(", "hotel_class_ids", "==", "query_class", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# compute the log loss", "\n", "ll", "=", "log_loss", "(", "[", "query_class_ind", "]", ",", "[", "result_probs", "]", ",", "labels", "=", "np", ".", "arange", "(", "hotel_class_ids", ".", "shape", "[", "0", "]", ")", ")", "\n", "losses", "=", "np", ".", "vstack", "(", "(", "losses", ",", "ll", ")", ")", "\n", "lnNum", "+=", "1", "\n", "\n", "", "", "print", "(", "'Log loss for '", "+", "csv_file", ")", "\n", "print", "(", "'%0.2f'", "%", "(", "np", ".", "mean", "(", "losses", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.retrieval.main": [[11, 88], ["os.path.dirname", "utils.id_to_class_parser", "utils.id_to_class_parser", "utils.class_to_chain_parser", "len", "numpy.zeros", "range", "numpy.mean", "numpy.zeros", "range", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "open", "csv.reader", "result_dict.keys", "int", "range", "result_dict.keys", "numpy.where", "len", "result_dict.keys", "known_chain_inds.append", "numpy.where", "len", "len", "print", "numpy.zeros", "numpy.zeros", "len", "numpy.array", "print", "str", "print", "int", "str", "str"], "function", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.class_to_chain_parser"], ["def", "main", "(", "csv_file", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "test_id_to_class", "=", "id_to_class_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/test_set.csv'", ")", ")", "\n", "train_id_to_class", "=", "id_to_class_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/train_set.csv'", ")", ")", "\n", "classes_to_chain", "=", "class_to_chain_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/hotel_info.csv'", ")", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "# Check to make sure there are no invalid image IDs in the results file.", "\n", "# Assuming everything is valid, create a dict with image IDs in the class,", "\n", "# and query class and result class values.", "\n", "with", "open", "(", "csv_file", ")", "as", "cf", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "cf", ",", "delimiter", "=", "','", ")", "\n", "lnNum", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "query_image_id", "=", "int", "(", "row", "[", "0", "]", ")", "\n", "if", "len", "(", "row", ")", "!=", "101", ":", "\n", "                ", "print", "(", "\"Expected each row to contain a query image ID and 100 result image IDs. Failed at line: \"", "+", "str", "(", "lnNum", ")", ")", "\n", "break", "\n", "", "try", ":", "\n", "                ", "query_class", "=", "test_id_to_class", "[", "query_image_id", "]", "\n", "result_dict", "[", "query_image_id", "]", "=", "{", "}", "\n", "result_dict", "[", "query_image_id", "]", "[", "'query_class'", "]", "=", "query_class", "\n", "result_dict", "[", "query_image_id", "]", "[", "'query_chain'", "]", "=", "classes_to_chain", "[", "query_class", "]", "\n", "result_dict", "[", "query_image_id", "]", "[", "'result_classes'", "]", "=", "np", ".", "zeros", "(", "100", ",", "dtype", "=", "'int'", ")", "\n", "result_dict", "[", "query_image_id", "]", "[", "'result_chains'", "]", "=", "np", ".", "zeros", "(", "100", ",", "dtype", "=", "'int'", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"Query image ID (\"", "+", "row", "[", "0", "]", "+", "\") in row \"", "+", "str", "(", "lnNum", ")", "+", "\" is unknown.\"", ")", "\n", "break", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "row", "[", "1", ":", "]", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "result_class", "=", "train_id_to_class", "[", "int", "(", "row", "[", "1", "+", "idx", "]", ")", "]", "\n", "result_dict", "[", "query_image_id", "]", "[", "'result_classes'", "]", "[", "idx", "]", "=", "result_class", "\n", "result_dict", "[", "query_image_id", "]", "[", "'result_chains'", "]", "[", "idx", "]", "=", "classes_to_chain", "[", "result_class", "]", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"Result  image ID (\"", "+", "row", "[", "1", "+", "idx", "]", "+", "\") in row \"", "+", "str", "(", "lnNum", ")", "+", "\" is unknown.\"", ")", "\n", "break", "\n", "", "", "lnNum", "+=", "1", "\n", "\n", "", "", "num_queries", "=", "len", "(", "result_dict", ".", "keys", "(", ")", ")", "\n", "top_k_instance", "=", "np", ".", "zeros", "(", "(", "num_queries", ",", "100", ")", ",", "dtype", "=", "'int'", ")", "\n", "for", "idx", "in", "range", "(", "num_queries", ")", ":", "\n", "        ", "query_image_id", "=", "result_dict", ".", "keys", "(", ")", "[", "idx", "]", "\n", "query_class", "=", "result_dict", "[", "query_image_id", "]", "[", "'query_class'", "]", "\n", "result_classes", "=", "result_dict", "[", "query_image_id", "]", "[", "'result_classes'", "]", "\n", "correct_results", "=", "np", ".", "where", "(", "result_classes", "==", "query_class", ")", "[", "0", "]", "\n", "if", "len", "(", "correct_results", ")", ">", "0", ":", "\n", "            ", "top_hit", "=", "correct_results", "[", "0", "]", "\n", "top_k_instance", "[", "idx", ",", "top_hit", ":", "]", "=", "1", "\n", "\n", "", "", "average_instance_retrieval_accuracy", "=", "np", ".", "mean", "(", "top_k_instance", ",", "axis", "=", "0", ")", "\n", "\n", "top_k_chain", "=", "np", ".", "zeros", "(", "(", "num_queries", ",", "100", ")", ",", "dtype", "=", "'int'", ")", "\n", "known_chain_inds", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "num_queries", ")", ":", "\n", "        ", "query_image_id", "=", "result_dict", ".", "keys", "(", ")", "[", "idx", "]", "\n", "query_chain", "=", "result_dict", "[", "query_image_id", "]", "[", "'query_chain'", "]", "\n", "if", "query_chain", ">", "-", "1", ":", "\n", "            ", "known_chain_inds", ".", "append", "(", "idx", ")", "\n", "", "result_chains", "=", "result_dict", "[", "query_image_id", "]", "[", "'result_chains'", "]", "\n", "correct_results", "=", "np", ".", "where", "(", "result_chains", "==", "query_chain", ")", "[", "0", "]", "\n", "if", "len", "(", "correct_results", ")", ">", "0", ":", "\n", "            ", "top_hit", "=", "correct_results", "[", "0", "]", "\n", "top_k_chain", "[", "idx", ",", "top_hit", ":", "]", "=", "1", "\n", "\n", "", "", "only_queries_with_chains", "=", "top_k_chain", "[", "np", ".", "array", "(", "known_chain_inds", ")", ",", ":", "]", "\n", "average_chain_retrieval_accuracy", "=", "np", ".", "mean", "(", "only_queries_with_chains", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "'Hotel instance retrieval accuracy for '", "+", "csv_file", ")", "\n", "print", "(", "'Top-1: %0.2f'", "%", "(", "average_instance_retrieval_accuracy", "[", "0", "]", "*", "100", ")", ")", "\n", "print", "(", "'Top-10: %0.2f'", "%", "(", "average_instance_retrieval_accuracy", "[", "9", "]", "*", "100", ")", ")", "\n", "print", "(", "'Top-100: %0.2f'", "%", "(", "average_instance_retrieval_accuracy", "[", "99", "]", "*", "100", ")", ")", "\n", "\n", "print", "(", "'---'", ")", "\n", "print", "(", "'Hotel chain retrieval accuracy for '", "+", "csv_file", ")", "\n", "print", "(", "'Top-1: %0.2f'", "%", "(", "average_chain_retrieval_accuracy", "[", "0", "]", "*", "100", ")", ")", "\n", "print", "(", "'Top-3: %0.2f'", "%", "(", "average_chain_retrieval_accuracy", "[", "2", "]", "*", "100", ")", ")", "\n", "print", "(", "'Top-5: %0.2f'", "%", "(", "average_chain_retrieval_accuracy", "[", "4", "]", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser": [[3, 15], ["open", "csv.reader", "int", "int"], "function", ["None"], ["def", "id_to_class_parser", "(", "dataset_file", ")", ":", "\n", "    ", "id_to_class", "=", "{", "}", "\n", "with", "open", "(", "dataset_file", ")", "as", "f", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "lnNum", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "if", "lnNum", "==", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "id_to_class", "[", "int", "(", "row", "[", "0", "]", ")", "]", "=", "int", "(", "row", "[", "1", "]", ")", "\n", "", "lnNum", "+=", "1", "\n", "", "", "return", "id_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.class_to_chain_parser": [[16, 28], ["open", "csv.reader", "int", "int"], "function", ["None"], ["", "def", "class_to_chain_parser", "(", "hotel_info_file", ")", ":", "\n", "    ", "class_to_chain", "=", "{", "}", "\n", "with", "open", "(", "hotel_info_file", ")", "as", "f", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "lnNum", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "if", "lnNum", "==", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "class_to_chain", "[", "int", "(", "row", "[", "0", "]", ")", "]", "=", "int", "(", "row", "[", "2", "]", ")", "\n", "", "lnNum", "+=", "1", "\n", "", "", "return", "class_to_chain", "\n", "", ""]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.convert_knn_to_probabilities.main": [[7, 40], ["utils.id_to_class_parser", "utils.id_to_class_parser", "numpy.unique", "os.path.join", "os.path.join", "utils.id_to_class_parser.values", "open", "open", "csv.reader", "int", "numpy.zeros", "range", "out_f.writelines", "len", "print", "len", "numpy.where", "str", "print", "zip", "int", "numpy.where", "str"], "function", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.evaluate.utils.id_to_class_parser"], ["def", "main", "(", "input_file", ",", "output_file", ")", ":", "\n", "    ", "test_id_to_class", "=", "id_to_class_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/test_set.csv'", ")", ")", "\n", "train_id_to_class", "=", "id_to_class_parser", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/dataset/train_set.csv'", ")", ")", "\n", "\n", "hotel_class_ids", "=", "np", ".", "unique", "(", "train_id_to_class", ".", "values", "(", ")", ")", "\n", "\n", "with", "open", "(", "input_file", ")", "as", "in_f", ":", "\n", "        ", "with", "open", "(", "output_file", ",", "'wb'", ")", "as", "out_f", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "in_f", ",", "delimiter", "=", "','", ")", "\n", "lnNum", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                ", "query_image_id", "=", "int", "(", "row", "[", "0", "]", ")", "\n", "class_probabilities", "=", "np", ".", "zeros", "(", "hotel_class_ids", ".", "shape", "[", "0", "]", ")", "\n", "if", "len", "(", "row", ")", "!=", "101", ":", "\n", "                    ", "print", "(", "\"Expected each row to contain a query image ID and 100 result image IDs. Failed at line: \"", "+", "str", "(", "lnNum", ")", ")", "\n", "break", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "row", "[", "1", ":", "]", ")", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "result_class", "=", "train_id_to_class", "[", "int", "(", "row", "[", "1", "+", "idx", "]", ")", "]", "\n", "result_class_ind", "=", "np", ".", "where", "(", "hotel_class_ids", "==", "result_class", ")", "[", "0", "]", "[", "0", "]", "\n", "class_probabilities", "[", "result_class_ind", "]", "+=", "1.", "\n", "", "except", ":", "\n", "                        ", "print", "(", "\"Result  image ID (\"", "+", "row", "[", "1", "+", "idx", "]", "+", "\") in row \"", "+", "str", "(", "lnNum", ")", "+", "\" is unknown.\"", ")", "\n", "break", "\n", "\n", "", "", "non_zero_inds", "=", "np", ".", "where", "(", "class_probabilities", ">", "0", ")", "[", "0", "]", "\n", "class_probabilities", "=", "class_probabilities", "/", "non_zero_inds", ".", "shape", "[", "0", "]", "\n", "prob_str", "=", "row", "[", "0", "]", "+", "','", "\n", "prob_str", "+=", "','", ".", "join", "(", "[", "'%i,%0.3f'", "%", "(", "c", ",", "p", ")", "for", "c", ",", "p", "in", "zip", "(", "hotel_class_ids", "[", "result_class_ind", "]", ",", "class_probabilities", "[", "result_class_ind", "]", ")", "]", ")", "\n", "prob_str", "+=", "'\\n'", "\n", "\n", "out_f", ".", "writelines", "(", "prob_str", ")", "\n", "lnNum", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.load_h5": [[6, 10], ["h5py.File"], "function", ["None"], ["def", "load_h5", "(", "data_description", ",", "path", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "hf", ":", "\n", "        ", "data", "=", "hf", "[", "data_description", "]", "[", ":", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.main": [[11, 42], ["os.path.dirname", "os.path.join", "feats_to_csv.load_h5", "feats_to_csv.load_h5", "feats_to_csv.load_h5", "faiss.StandardGpuResources", "faiss.GpuIndexFlatConfig", "faiss.GpuIndexFlatIP", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "faiss.GpuIndexFlatIP.add", "os.path.exists", "os.makedirs", "numpy.expand_dims", "open", "os.path.join", "feats_to_csv.load_h5", "feats_to_csv.load_h5", "zip", "os.path.join", "os.path.join", "os.path.join", "faiss.GpuIndexFlatIP.search", "csv_file.writelines", "numpy.expand_dims().astype", "numpy.expand_dims", "str", "str"], "function", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.load_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.load_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.load_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.load_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.feats_to_csv.load_h5"], ["", "def", "main", "(", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'features'", ")", "\n", "\n", "train_ims", "=", "load_h5", "(", "'train_ims'", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'trainIms.h5'", ")", ")", "\n", "train_classes", "=", "load_h5", "(", "'train_classes'", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'trainClasses.h5'", ")", ")", "\n", "train_feats", "=", "load_h5", "(", "'train_feats'", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'trainFeats.h5'", ")", ")", "\n", "\n", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "flat_config", "=", "faiss", ".", "GpuIndexFlatConfig", "(", ")", "\n", "flat_config", ".", "device", "=", "3", "# specify which GPU to use", "\n", "\n", "gpu_index", "=", "faiss", ".", "GpuIndexFlatIP", "(", "res", ",", "train_feats", ".", "shape", "[", "1", "]", ",", "flat_config", ")", "\n", "for", "feat", "in", "train_feats", ":", "\n", "        ", "gpu_index", ".", "add", "(", "np", ".", "expand_dims", "(", "feat", ",", "0", ")", ")", "\n", "\n", "", "csv_dir", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'csv_output'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "csv_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "csv_dir", ")", "\n", "\n", "", "occlusion_levels", "=", "[", "'unoccluded'", ",", "'low_occlusions'", ",", "'medium_occlusions'", ",", "'high_occlusions'", "]", "\n", "for", "occlusion", "in", "occlusion_levels", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "csv_dir", ",", "occlusion", "+", "'.csv'", ")", ",", "'wb'", ")", "as", "csv_file", ":", "\n", "            ", "test_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "occlusion", ")", "\n", "test_ims", "=", "load_h5", "(", "'test_ims'", ",", "os", ".", "path", ".", "join", "(", "test_output_dir", ",", "'testIms.h5'", ")", ")", "\n", "test_feats", "=", "load_h5", "(", "'test_feats'", ",", "os", ".", "path", ".", "join", "(", "test_output_dir", ",", "'testFeats.h5'", ")", ")", "\n", "for", "imId", ",", "ft", "in", "zip", "(", "test_ims", ",", "test_feats", ")", ":", "\n", "                ", "result_dists", ",", "result_inds", "=", "gpu_index", ".", "search", "(", "np", ".", "expand_dims", "(", "ft", ",", "0", ")", ".", "astype", "(", "'float32'", ")", ",", "100", ")", "\n", "result_im_inds", "=", "train_ims", "[", "result_inds", "[", "0", "]", "]", "\n", "csv_line", "=", "str", "(", "imId", ")", "+", "','", "+", "','", ".", "join", "(", "[", "str", "(", "r", ")", "for", "r", "in", "result_im_inds", "]", ")", "+", "'\\n'", "\n", "csv_file", ".", "writelines", "(", "csv_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5": [[11, 15], ["h5py.File", "h5py.File.create_dataset", "h5py.File.close"], "function", ["None"], ["def", "save_h5", "(", "data_description", ",", "data", ",", "data_type", ",", "path", ")", ":", "\n", "    ", "h5_feats", "=", "h5py", ".", "File", "(", "path", ",", "'w'", ")", "\n", "h5_feats", ".", "create_dataset", "(", "data_description", ",", "data", "=", "data", ",", "dtype", "=", "data_type", ")", "\n", "h5_feats", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.main": [[16, 97], ["os.path.dirname", "os.path.join", "glob.glob", "os.path.join", "tensorflow.placeholder", "print", "tensorflow.squeeze", "tensorflow.ConfigProto", "str", "tensorflow.Session", "tensorflow.train.Saver", "tf.train.Saver.restore", "classfile.NonTripletSet", "classfile.NonTripletSet.classes.keys", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "range", "extract_features.save_h5", "extract_features.save_h5", "extract_features.save_h5", "os.path.join", "tensorflow.arg_scope", "tensorflow.contrib.slim.nets.resnet_v2.resnet_v2_50", "tensorflow.nn.l2_normalize", "os.path.join", "glob.glob", "classfile.NonTripletSet", "classfile.NonTripletSet.classes.keys", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "range", "classfile.NonTripletSet.getBatchFromImageList", "tf.Session.run", "print", "os.path.join", "os.path.join", "os.path.join", "tensorflow.contrib.slim.nets.resnet_v2.resnet_arg_scope", "os.path.exists", "os.makedirs", "os.path.join", "classfile.NonTripletSet.getBatchFromImageList", "tf.Session.run", "print", "extract_features.save_h5", "extract_features.save_h5", "extract_features.save_h5", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "os.path.join", "os.path.join", "os.path.join", "int", "int", "[].split", "[].split", "im.split", "im.split"], "function", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getBatchFromImageList", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getBatchFromImageList", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5", "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.extract_features.save_h5"], ["", "def", "main", "(", "pretrained_model", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'features'", ")", "\n", "train_images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'images/train/*/*/*/*.jpg'", ")", ")", "\n", "\n", "img_size", "=", "[", "256", ",", "256", "]", "\n", "crop_size", "=", "[", "224", ",", "224", "]", "\n", "batch_size", "=", "120", "\n", "output_size", "=", "256", "\n", "mean_file", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'input/meanIm.npy'", ")", "\n", "image_batch", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "crop_size", "[", "0", "]", ",", "crop_size", "[", "0", "]", ",", "3", "]", ")", "\n", "\n", "print", "(", "\"Preparing network...\"", ")", "\n", "with", "slim", ".", "arg_scope", "(", "resnet_v2", ".", "resnet_arg_scope", "(", ")", ")", ":", "\n", "        ", "_", ",", "layers", "=", "resnet_v2", ".", "resnet_v2_50", "(", "image_batch", ",", "num_classes", "=", "output_size", ",", "is_training", "=", "False", ")", "\n", "\n", "", "featLayer", "=", "'resnet_v2_50/logits'", "\n", "feat", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "layers", "[", "featLayer", "]", ",", "3", ")", ")", "\n", "c", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "c", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "3", ")", "# specify which gpu you want to run on", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "c", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "pretrained_model", ")", "\n", "\n", "# For each occlusion level, extract and save out the test data.", "\n", "occlusion_levels", "=", "[", "'unoccluded'", ",", "'low_occlusions'", ",", "'medium_occlusions'", ",", "'high_occlusions'", "]", "\n", "for", "occlusion", "in", "occlusion_levels", ":", "\n", "        ", "test_output_dir", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'features/'", ",", "occlusion", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_output_dir", ")", "\n", "\n", "", "test_images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "'..'", ",", "'images/test'", ",", "occlusion", ",", "'*/*/*/*.jpg'", ")", ")", "\n", "test_data", "=", "NonTripletSet", "(", "test_images", ",", "mean_file", ",", "img_size", ",", "crop_size", ",", "isTraining", "=", "False", ")", "\n", "test_paths", "=", "[", "]", "\n", "test_ims", "=", "[", "]", "\n", "test_classes", "=", "[", "]", "\n", "for", "cls", "in", "test_data", ".", "classes", ".", "keys", "(", ")", ":", "\n", "            ", "for", "im", "in", "test_data", ".", "classes", "[", "cls", "]", "[", "'images'", "]", ":", "\n", "                ", "test_paths", ".", "append", "(", "im", ")", "\n", "test_ims", ".", "append", "(", "int", "(", "im", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "# convert image path to image id", "\n", "test_classes", ".", "append", "(", "cls", ")", "\n", "\n", "", "", "test_paths", "=", "np", ".", "array", "(", "test_paths", ")", "\n", "test_ims", "=", "np", ".", "array", "(", "test_ims", ")", "\n", "test_classes", "=", "np", ".", "array", "(", "test_classes", ")", "\n", "test_feats", "=", "np", ".", "zeros", "(", "(", "test_ims", ".", "shape", "[", "0", "]", ",", "output_size", ")", ")", "\n", "for", "ix", "in", "range", "(", "0", ",", "test_ims", ".", "shape", "[", "0", "]", ",", "batch_size", ")", ":", "\n", "            ", "image_list", "=", "test_paths", "[", "ix", ":", "ix", "+", "batch_size", "]", "\n", "batch", "=", "test_data", ".", "getBatchFromImageList", "(", "image_list", ")", "\n", "ff", "=", "sess", ".", "run", "(", "feat", ",", "{", "image_batch", ":", "batch", "}", ")", "\n", "test_feats", "[", "ix", ":", "ix", "+", "ff", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "ff", "\n", "print", "(", "'Test features: '", ",", "ix", "+", "ff", ".", "shape", "[", "0", "]", ",", "' out of '", ",", "test_feats", ".", "shape", "[", "0", "]", ")", "\n", "save_h5", "(", "'test_ims'", ",", "test_ims", ",", "'i8'", ",", "os", ".", "path", ".", "join", "(", "test_output_dir", ",", "'testIms.h5'", ")", ")", "\n", "save_h5", "(", "'test_classes'", ",", "test_classes", ",", "'i8'", ",", "os", ".", "path", ".", "join", "(", "test_output_dir", ",", "'testClasses.h5'", ")", ")", "\n", "save_h5", "(", "'test_feats'", ",", "test_feats", ",", "'f'", ",", "os", ".", "path", ".", "join", "(", "test_output_dir", ",", "'testFeats.h5'", ")", ")", "\n", "\n", "", "", "train_data", "=", "NonTripletSet", "(", "train_images", ",", "mean_file", ",", "img_size", ",", "crop_size", ",", "isTraining", "=", "False", ")", "\n", "train_paths", "=", "[", "]", "\n", "train_ims", "=", "[", "]", "\n", "train_classes", "=", "[", "]", "\n", "for", "cls", "in", "train_data", ".", "classes", ".", "keys", "(", ")", ":", "\n", "        ", "for", "im", "in", "train_data", ".", "classes", "[", "cls", "]", "[", "'images'", "]", ":", "\n", "            ", "train_paths", ".", "append", "(", "im", ")", "\n", "train_ims", ".", "append", "(", "int", "(", "im", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "# convert image path to image id", "\n", "train_classes", ".", "append", "(", "cls", ")", "\n", "\n", "", "", "train_paths", "=", "np", ".", "array", "(", "train_paths", ")", "\n", "train_ims", "=", "np", ".", "array", "(", "train_ims", ")", "\n", "train_classes", "=", "np", ".", "array", "(", "train_classes", ")", "\n", "train_feats", "=", "np", ".", "zeros", "(", "(", "train_ims", ".", "shape", "[", "0", "]", ",", "output_size", ")", ")", "\n", "for", "ix", "in", "range", "(", "0", ",", "train_ims", ".", "shape", "[", "0", "]", ",", "batch_size", ")", ":", "\n", "        ", "image_list", "=", "train_paths", "[", "ix", ":", "ix", "+", "batch_size", "]", "\n", "batch", "=", "train_data", ".", "getBatchFromImageList", "(", "image_list", ")", "\n", "ff", "=", "sess", ".", "run", "(", "feat", ",", "{", "image_batch", ":", "batch", "}", ")", "\n", "train_feats", "[", "ix", ":", "ix", "+", "ff", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "ff", "\n", "print", "(", "'Train features: '", ",", "ix", "+", "ff", ".", "shape", "[", "0", "]", ",", "' out of '", ",", "train_feats", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "save_h5", "(", "'train_ims'", ",", "train_ims", ",", "'i8'", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'trainIms.h5'", ")", ")", "\n", "save_h5", "(", "'train_classes'", ",", "train_classes", ",", "'i8'", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'trainClasses.h5'", ")", ")", "\n", "save_h5", "(", "'train_feats'", ",", "train_feats", ",", "'f'", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'trainFeats.h5'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.__init__": [[13, 54], ["numpy.load", "cv2.resize", "classfile.BatchAllSet.classes.keys", "glob.glob", "numpy.moveaxis", "len", "numpy.asarray", "im.split", "int", "int", "int", "[].append", "[].append", "os.path.join", "numpy.dstack", "len", "classfile.BatchAllSet.classes.pop", "split_im[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "mean_file", ",", "image_size", ",", "crop_size", ",", "batchSize", "=", "100", ",", "num_pos", "=", "10", ",", "isTraining", "=", "True", ",", "isOverfitting", "=", "False", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "isTraining", "=", "isTraining", "\n", "self", ".", "isOverfitting", "=", "isOverfitting", "\n", "\n", "self", ".", "meanFile", "=", "mean_file", "\n", "meanIm", "=", "np", ".", "load", "(", "self", ".", "meanFile", ")", "\n", "\n", "if", "meanIm", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "meanIm", "=", "np", ".", "moveaxis", "(", "meanIm", ",", "0", ",", "-", "1", ")", "\n", "\n", "", "self", ".", "meanImage", "=", "cv2", ".", "resize", "(", "meanIm", ",", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "\n", "#img = img - self.meanImage", "\n", "if", "len", "(", "self", ".", "meanImage", ".", "shape", ")", "<", "3", ":", "\n", "            ", "self", ".", "meanImage", "=", "np", ".", "asarray", "(", "np", ".", "dstack", "(", "(", "self", ".", "meanImage", ",", "self", ".", "meanImage", ",", "self", ".", "meanImage", ")", ")", ")", "\n", "\n", "", "self", ".", "numPos", "=", "num_pos", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "\n", "self", ".", "classes", "=", "{", "}", "\n", "\n", "for", "im", "in", "image_list", ":", "\n", "            ", "split_im", "=", "im", ".", "split", "(", "'/'", ")", "\n", "image_id", "=", "int", "(", "split_im", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "source", "=", "split_im", "[", "-", "2", "]", "\n", "cls", "=", "int", "(", "split_im", "[", "-", "3", "]", ")", "\n", "chain", "=", "int", "(", "split_im", "[", "-", "4", "]", ")", "\n", "if", "not", "cls", "in", "self", ".", "classes", ":", "\n", "                ", "self", ".", "classes", "[", "cls", "]", "=", "{", "}", "\n", "self", ".", "classes", "[", "cls", "]", "[", "'images'", "]", "=", "[", "]", "\n", "self", ".", "classes", "[", "cls", "]", "[", "'sources'", "]", "=", "[", "]", "\n", "", "self", ".", "classes", "[", "cls", "]", "[", "'images'", "]", ".", "append", "(", "im", ")", "\n", "self", ".", "classes", "[", "cls", "]", "[", "'sources'", "]", ".", "append", "(", "source", ")", "\n", "\n", "", "for", "cls", "in", "self", ".", "classes", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "classes", "[", "cls", "]", "[", "'images'", "]", ")", "<", "self", ".", "numPos", ":", "\n", "                ", "self", ".", "classes", ".", "pop", "(", "cls", ")", "\n", "\n", "", "", "self", ".", "people_crop_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "peopleDir", ",", "'*.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getBatch": [[56, 97], ["numpy.random.choice", "numpy.zeros", "classfile.BatchAllSet.getProcessedImages", "classfile.BatchAllSet.classes.keys", "int", "numpy.array", "random.shuffle", "random.shuffle", "numpy.arange", "numpy.arange", "numpy.where", "numpy.where", "ims.append", "ims.append", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getProcessedImages"], ["", "def", "getBatch", "(", "self", ")", ":", "\n", "        ", "numClasses", "=", "self", ".", "batchSize", "/", "self", ".", "numPos", "\n", "classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ".", "keys", "(", ")", ",", "numClasses", ",", "replace", "=", "False", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "self", ".", "batchSize", "]", ",", "dtype", "=", "'int'", ")", "\n", "ims", "=", "[", "]", "\n", "\n", "ctr", "=", "0", "\n", "for", "cls", "in", "classes", ":", "\n", "            ", "cls", "=", "int", "(", "cls", ")", "\n", "clsPaths", "=", "self", ".", "classes", "[", "cls", "]", "[", "'ims'", "]", "\n", "clsSources", "=", "np", ".", "array", "(", "self", ".", "classes", "[", "cls", "]", "[", "'sources'", "]", ")", "\n", "traffickcamInds", "=", "np", ".", "where", "(", "clsSources", "==", "'traffickcam'", ")", "[", "0", "]", "\n", "exInds", "=", "np", ".", "where", "(", "clsSources", "==", "'travel_website'", ")", "[", "0", "]", "\n", "if", "len", "(", "traffickcamInds", ")", ">=", "self", ".", "numPos", "/", "2", "and", "len", "(", "exInds", ")", ">=", "self", ".", "numPos", "/", "2", ":", "\n", "                ", "numtraffickcam", "=", "self", ".", "numPos", "/", "2", "\n", "numEx", "=", "self", ".", "numPos", "-", "numtraffickcam", "\n", "", "elif", "len", "(", "traffickcamInds", ")", ">=", "self", ".", "numPos", "/", "2", "and", "len", "(", "exInds", ")", "<", "self", ".", "numPos", "/", "2", ":", "\n", "                ", "numEx", "=", "len", "(", "exInds", ")", "\n", "numtraffickcam", "=", "self", ".", "numPos", "-", "numEx", "\n", "", "else", ":", "\n", "                ", "numtraffickcam", "=", "len", "(", "traffickcamInds", ")", "\n", "numEx", "=", "self", ".", "numPos", "-", "numtraffickcam", "\n", "\n", "", "random", ".", "shuffle", "(", "traffickcamInds", ")", "\n", "random", ".", "shuffle", "(", "exInds", ")", "\n", "\n", "for", "j1", "in", "np", ".", "arange", "(", "numtraffickcam", ")", ":", "\n", "                ", "imPath", "=", "self", ".", "classes", "[", "cls", "]", "[", "'ims'", "]", "[", "traffickcamInds", "[", "j1", "]", "]", "\n", "labels", "[", "ctr", "]", "=", "cls", "\n", "ims", ".", "append", "(", "imPath", ")", "\n", "ctr", "+=", "1", "\n", "\n", "", "for", "j2", "in", "np", ".", "arange", "(", "numEx", ")", ":", "\n", "                ", "imPath", "=", "self", ".", "classes", "[", "cls", "]", "[", "'ims'", "]", "[", "exInds", "[", "j2", "]", "]", "\n", "labels", "[", "ctr", "]", "=", "cls", "\n", "ims", ".", "append", "(", "imPath", ")", "\n", "ctr", "+=", "1", "\n", "\n", "", "", "batch", "=", "self", ".", "getProcessedImages", "(", "ims", ")", "\n", "\n", "return", "batch", ",", "labels", ",", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getBatchFromImageList": [[98, 104], ["numpy.zeros", "range", "len", "classfile.BatchAllSet.getProcessedImage", "len"], "methods", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getProcessedImage"], ["", "def", "getBatchFromImageList", "(", "self", ",", "image_list", ")", ":", "\n", "        ", "batch", "=", "np", ".", "zeros", "(", "[", "len", "(", "image_list", ")", ",", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ",", "3", "]", ")", "\n", "for", "ix", "in", "range", "(", "0", ",", "len", "(", "image_list", ")", ")", ":", "\n", "            ", "img", "=", "self", ".", "getProcessedImage", "(", "image_list", "[", "ix", "]", ")", "\n", "batch", "[", "ix", ",", ":", ",", ":", ",", ":", "]", "=", "img", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getProcessedImage": [[105, 129], ["cv2.imread", "cv2.resize", "cv2.flip", "numpy.random.randint", "numpy.random.randint", "int", "int", "random.random", "round", "round"], "methods", ["None"], ["", "def", "getProcessedImage", "(", "self", ",", "image_file", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "image_file", ")", "\n", "if", "img", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "isTraining", "and", "not", "self", ".", "isOverfitting", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "\n", "# if self.isTraining:", "\n", "#     img = doctor_im(img)", "\n", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", ")", ")", "\n", "\n", "if", "self", ".", "isTraining", "and", "not", "self", ".", "isOverfitting", ":", "\n", "            ", "top", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "image_size", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "image_size", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "top", "=", "int", "(", "round", "(", "(", "self", ".", "image_size", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "/", "2", ")", ")", "\n", "left", "=", "int", "(", "round", "(", "(", "self", ".", "image_size", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "\n", "", "img", "=", "img", "[", "top", ":", "(", "top", "+", "self", ".", "crop_size", "[", "0", "]", ")", ",", "left", ":", "(", "left", "+", "self", ".", "crop_size", "[", "1", "]", ")", ",", ":", "]", "\n", "img", "=", "img", "-", "self", ".", "meanImage", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getProcessedImages": [[130, 146], ["len", "numpy.array", "numpy.array", "numpy.array", "numpy.random.randint", "numpy.random.randint", "int", "int", "cv2.resize", "random.random", "round", "round", "cv2.imread", "range", "cv2.flip", "random.random"], "methods", ["None"], ["", "def", "getProcessedImages", "(", "self", ",", "ims", ")", ":", "\n", "        ", "numIms", "=", "len", "(", "ims", ")", "\n", "imgs", "=", "np", ".", "array", "(", "[", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "image_file", ")", ",", "(", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", ")", ")", "for", "image_file", "in", "ims", "]", ")", "\n", "\n", "if", "self", ".", "isTraining", "and", "not", "self", ".", "isOverfitting", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "imgs", "=", "np", ".", "array", "(", "[", "cv2", ".", "flip", "(", "img", ",", "1", ")", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "img", "for", "img", "in", "imgs", "]", ")", "\n", "\n", "", "if", "self", ".", "isTraining", "and", "not", "self", ".", "isOverfitting", ":", "\n", "            ", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "image_size", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ",", "numIms", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "image_size", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ",", "numIms", ")", "\n", "", "else", ":", "\n", "            ", "top", "=", "int", "(", "round", "(", "(", "self", ".", "image_size", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "/", "2", ")", ")", "\n", "left", "=", "int", "(", "round", "(", "(", "self", ".", "image_size", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "\n", "", "imgs", "=", "np", ".", "array", "(", "[", "imgs", "[", "ix", ",", "top", "[", "ix", "]", ":", "(", "top", "[", "ix", "]", "+", "self", ".", "crop_size", "[", "0", "]", ")", ",", "left", "[", "ix", "]", ":", "(", "left", "[", "ix", "]", "+", "self", ".", "crop_size", "[", "1", "]", ")", ",", ":", "]", "-", "self", ".", "meanImage", "for", "ix", "in", "range", "(", "numIms", ")", "]", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getPeopleMasks": [[147, 157], ["random.sample", "numpy.zeros", "range", "numpy.expand_dims", "numpy.arange", "classfile.BatchAllSet.getImageAsMask", "len"], "methods", ["home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getImageAsMask"], ["", "def", "getPeopleMasks", "(", "self", ")", ":", "\n", "        ", "which_inds", "=", "random", ".", "sample", "(", "np", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "people_crop_files", ")", ")", ",", "self", ".", "batchSize", ")", "\n", "\n", "people_crops", "=", "np", ".", "zeros", "(", "[", "self", ".", "batchSize", ",", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", "]", ")", "\n", "for", "ix", "in", "range", "(", "0", ",", "self", ".", "batchSize", ")", ":", "\n", "            ", "people_crops", "[", "ix", ",", ":", ",", ":", "]", "=", "self", ".", "getImageAsMask", "(", "self", ".", "people_crop_files", "[", "which_inds", "[", "ix", "]", "]", ")", "\n", "\n", "", "people_crops", "=", "np", ".", "expand_dims", "(", "people_crops", ",", "axis", "=", "3", ")", "\n", "\n", "return", "people_crops", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.BatchAllSet.getImageAsMask": [[158, 178], ["cv2.imread", "cv2.resize", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "float", "numpy.ones", "int", "int"], "methods", ["None"], ["", "def", "getImageAsMask", "(", "self", ",", "image_file", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "image_file", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "if", "img", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# how much of the image should the mask take up", "\n", "", "scale", "=", "np", ".", "random", ".", "randint", "(", "30", ",", "70", ")", "/", "float", "(", "100", ")", "\n", "resized_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "scale", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "scale", ")", ")", ")", "\n", "\n", "# where should we put the mask?", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "crop_size", "[", "0", "]", "-", "resized_img", ".", "shape", "[", "0", "]", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "crop_size", "[", "1", "]", "-", "resized_img", ".", "shape", "[", "1", "]", ")", "\n", "\n", "new_img", "=", "np", ".", "ones", "(", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "*", "255.0", "\n", "new_img", "[", "top", ":", "top", "+", "resized_img", ".", "shape", "[", "0", "]", ",", "left", ":", "left", "+", "resized_img", ".", "shape", "[", "1", "]", "]", "=", "resized_img", "\n", "\n", "new_img", "[", "new_img", "<", "255", "]", "=", "0", "\n", "new_img", "[", "new_img", ">", "1", "]", "=", "1", "\n", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.GWUvision_Hotels-50K.baseline_implementation.classfile.NonTripletSet.__init__": [[180, 216], ["numpy.load", "cv2.resize", "glob.glob", "numpy.moveaxis", "len", "numpy.asarray", "im.split", "int", "int", "int", "[].append", "[].append", "os.path.join", "numpy.dstack", "split_im[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "mean_file", ",", "image_size", ",", "crop_size", ",", "batchSize", "=", "100", ",", "num_pos", "=", "10", ",", "isTraining", "=", "True", ",", "isOverfitting", "=", "False", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "isTraining", "=", "isTraining", "\n", "self", ".", "isOverfitting", "=", "isOverfitting", "\n", "\n", "self", ".", "meanFile", "=", "mean_file", "\n", "meanIm", "=", "np", ".", "load", "(", "self", ".", "meanFile", ")", "\n", "\n", "if", "meanIm", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "meanIm", "=", "np", ".", "moveaxis", "(", "meanIm", ",", "0", ",", "-", "1", ")", "\n", "\n", "", "self", ".", "meanImage", "=", "cv2", ".", "resize", "(", "meanIm", ",", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "\n", "#img = img - self.meanImage", "\n", "if", "len", "(", "self", ".", "meanImage", ".", "shape", ")", "<", "3", ":", "\n", "            ", "self", ".", "meanImage", "=", "np", ".", "asarray", "(", "np", ".", "dstack", "(", "(", "self", ".", "meanImage", ",", "self", ".", "meanImage", ",", "self", ".", "meanImage", ")", ")", ")", "\n", "\n", "", "self", ".", "numPos", "=", "num_pos", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "\n", "self", ".", "classes", "=", "{", "}", "\n", "for", "im", "in", "image_list", ":", "\n", "            ", "split_im", "=", "im", ".", "split", "(", "'/'", ")", "\n", "image_id", "=", "int", "(", "split_im", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "source", "=", "split_im", "[", "-", "2", "]", "\n", "cls", "=", "int", "(", "split_im", "[", "-", "3", "]", ")", "\n", "chain", "=", "int", "(", "split_im", "[", "-", "4", "]", ")", "\n", "if", "not", "cls", "in", "self", ".", "classes", ":", "\n", "                ", "self", ".", "classes", "[", "cls", "]", "=", "{", "}", "\n", "self", ".", "classes", "[", "cls", "]", "[", "'images'", "]", "=", "[", "]", "\n", "self", ".", "classes", "[", "cls", "]", "[", "'sources'", "]", "=", "[", "]", "\n", "", "self", ".", "classes", "[", "cls", "]", "[", "'images'", "]", ".", "append", "(", "im", ")", "\n", "self", ".", "classes", "[", "cls", "]", "[", "'sources'", "]", ".", "append", "(", "source", ")", "\n", "\n", "", "self", ".", "people_crop_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "peopleDir", ",", "'*.png'", ")", ")", "\n", "", "", ""]]}