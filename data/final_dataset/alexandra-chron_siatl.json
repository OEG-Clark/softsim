{"home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.config.get_parser": [[6, 17], ["ArgumentParser", "ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "\"\"\"Get parser object.\"\"\"", "\n", "from", "argparse", "import", "ArgumentParser", ",", "ArgumentDefaultsHelpFormatter", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\"-cfg\"", ",", "\"--config\"", ",", "\n", "dest", "=", "\"cfg\"", ",", "\n", "help", "=", "\"experiment definition file\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "required", "=", "True", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.config.make_paths": [[19, 30], ["cfg.keys", "key.endswith", "os.path.join", "os.path.abspath", "type", "config.make_paths"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.config.make_paths"], ["", "def", "make_paths", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"\n    Make all values for keys ending with `_path` absolute to dir_.\n    \"\"\"", "\n", "for", "key", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", ".", "endswith", "(", "\"_path\"", ")", ":", "\n", "            ", "cfg", "[", "key", "]", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "cfg", "[", "key", "]", ")", "\n", "cfg", "[", "key", "]", "=", "os", ".", "path", ".", "abspath", "(", "cfg", "[", "key", "]", ")", "\n", "", "if", "type", "(", "cfg", "[", "key", "]", ")", "is", "dict", ":", "\n", "            ", "cfg", "[", "key", "]", "=", "make_paths", "(", "cfg", "[", "key", "]", ")", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.config.load_config": [[32, 38], ["config.make_paths", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.config.make_paths"], ["", "def", "load_config", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "cfg", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "", "cfg", "=", "make_paths", "(", "cfg", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.opts.train_options": [[14, 43], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.config.load_config", "vars", "print", "argparse.ArgumentParser", "os.path.join", "torch.device", "os.path.join", "print", "torch.cuda.is_available", "getattr"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.config.load_config"], ["def", "train_options", "(", "def_config", ",", "parser", "=", "None", ")", ":", "\n", "    ", "if", "parser", "is", "None", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "'--config'", ",", "default", "=", "def_config", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "default", "=", "\"checkpoint\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "\"auto\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cores'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--source'", ",", "nargs", "=", "'*'", ",", "\n", "default", "=", "[", "\"models\"", ",", "\"modules\"", ",", "\"utils\"", "]", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "load_config", "(", "os", ".", "path", ".", "join", "(", "MODEL_CNF_DIR", ",", "args", ".", "config", ")", ")", "\n", "\n", "if", "args", ".", "device", "==", "\"auto\"", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "\"cpu\"", ")", "\n", "\n", "", "if", "args", ".", "source", "is", "None", ":", "\n", "        ", "args", ".", "source", "=", "[", "]", "\n", "\n", "", "args", ".", "source", "=", "[", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "dir", ")", "for", "dir", "in", "args", ".", "source", "]", "\n", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "print", "(", "\"{}:{}\"", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "\n", "return", "args", ",", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.erase_line": [[6, 8], ["sys.stdout.write"], "function", ["None"], ["def", "erase_line", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "write", "(", "\"\\033[K\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.asMinutes": [[10, 14], ["math.floor"], "function", ["None"], ["", "def", "asMinutes", "(", "s", ")", ":", "\n", "    ", "m", "=", "math", ".", "floor", "(", "s", "/", "60", ")", "\n", "s", "-=", "m", "*", "60", "\n", "return", "'%dm %ds'", "%", "(", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.timeSince": [[16, 22], ["time.time", "logging.asMinutes", "logging.asMinutes"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.asMinutes", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.asMinutes"], ["", "def", "timeSince", "(", "since", ",", "percent", ")", ":", "\n", "    ", "now", "=", "time", ".", "time", "(", ")", "\n", "s", "=", "now", "-", "since", "\n", "es", "=", "s", "/", "percent", "\n", "rs", "=", "es", "-", "s", "\n", "return", "asMinutes", "(", "s", ")", ",", "asMinutes", "(", "rs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.progress_bar": [[24, 28], ["int", "round"], "function", ["None"], ["", "def", "progress_bar", "(", "percentage", ",", "bar_len", "=", "20", ")", ":", "\n", "    ", "filled_len", "=", "int", "(", "round", "(", "bar_len", "*", "percentage", ")", ")", "\n", "bar", "=", "'='", "*", "filled_len", "+", "'-'", "*", "(", "bar_len", "-", "filled_len", ")", "\n", "return", "\"[{}]\"", ".", "format", "(", "bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.epoch_progress": [[30, 52], ["math.ceil", "logging.timeSince", "sys.stdout.write", "sys.stdout.flush", "float", "logging.progress_bar"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.timeSince", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.progress_bar"], ["", "def", "epoch_progress", "(", "epoch", ",", "batch", ",", "batch_size", ",", "dataset_size", ",", "start", ")", ":", "\n", "    ", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "dataset_size", ")", "/", "batch_size", ")", "\n", "percentage", "=", "batch", "/", "n_batches", "\n", "\n", "# stats = 'Epoch:{}, Batch:{}/{} ({0:.2f}%)'.format(epoch, batch, n_batches,", "\n", "#                                                   percentage)", "\n", "stats", "=", "f'Epoch:{epoch}, Batch:{batch}/{n_batches} '", "f'({100* percentage:.0f}%)'", "\n", "# stats = f'Epoch:{epoch}, Batch:{batch} ({100* percentage:.0f}%)'", "\n", "\n", "elapsed", ",", "eta", "=", "timeSince", "(", "start", ",", "batch", "/", "n_batches", ")", "\n", "time_info", "=", "'Time: {} (-{})'", ".", "format", "(", "elapsed", ",", "eta", ")", "\n", "\n", "# clean every line and then add the text output", "\n", "# log_output = stats + \" \" + progress_bar + \", \" + time_info", "\n", "\n", "# log_output = \" \".join([stats, time_info])", "\n", "log_output", "=", "\" \"", ".", "join", "(", "[", "stats", ",", "progress_bar", "(", "percentage", ")", ",", "time_info", "]", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r \\r\\033[K\"", "+", "log_output", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "log_output", "\n", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.clean_text": [[11, 33], ["text.replace.rstrip", "text.replace.replace", "html.unescape", "text.replace.replace", "text.replace.replace", "text.replace.split"], "function", ["None"], ["def", "clean_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Remove extra quotes from text files and html entities\n    Args:\n        text (str): a string of text\n\n    Returns: (str): the \"cleaned\" text\n\n    \"\"\"", "\n", "text", "=", "text", ".", "rstrip", "(", ")", "\n", "\n", "if", "'\"\"'", "in", "text", ":", "\n", "        ", "if", "text", "[", "0", "]", "==", "text", "[", "-", "1", "]", "==", "'\"'", ":", "\n", "            ", "text", "=", "text", "[", "1", ":", "-", "1", "]", "\n", "", "text", "=", "text", ".", "replace", "(", "'\\\\\"\"'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\"\"'", ",", "'\"'", ")", "\n", "\n", "", "text", "=", "text", ".", "replace", "(", "'\\\\\"\"'", ",", "'\"'", ")", "\n", "\n", "text", "=", "html", ".", "unescape", "(", "text", ")", "\n", "text", "=", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.parse_file": [[35, 51], ["open().readlines", "enumerate", "line.rstrip().split", "data_parsing.clean_text", "open", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.clean_text"], ["", "def", "parse_file", "(", "file", ")", ":", "\n", "    ", "\"\"\"\n    Read a file and return a dictionary of the data, in the format:\n    tweet_id:{sentiment, text}\n    \"\"\"", "\n", "\n", "data", "=", "{", "}", "\n", "lines", "=", "open", "(", "file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", ".", "readlines", "(", ")", "\n", "for", "line_id", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "columns", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "tweet_id", "=", "columns", "[", "0", "]", "\n", "sentiment", "=", "columns", "[", "1", "]", "\n", "text", "=", "columns", "[", "2", ":", "]", "\n", "text", "=", "clean_text", "(", "\" \"", ".", "join", "(", "text", ")", ")", "\n", "data", "[", "tweet_id", "]", "=", "(", "sentiment", ",", "text", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_data_from_dir": [[53, 65], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob.extend", "list", "glob.glob", "data_parsing.parse_file", "data.update", "data.values"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.parse_file", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update"], ["", "def", "load_data_from_dir", "(", "path", ")", ":", "\n", "    ", "FILE_PATH", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "files_path", "=", "os", ".", "path", ".", "join", "(", "FILE_PATH", ",", "path", ")", "\n", "\n", "files", "=", "glob", ".", "glob", "(", "files_path", "+", "\"/**/*.tsv\"", ",", "recursive", "=", "True", ")", "\n", "files", ".", "extend", "(", "glob", ".", "glob", "(", "files_path", "+", "\"/**/*.txt\"", ",", "recursive", "=", "True", ")", ")", "\n", "\n", "data", "=", "{", "}", "# use dict, in order to avoid having duplicate tweets (same id)", "\n", "for", "file", "in", "files", ":", "\n", "        ", "file_data", "=", "parse_file", "(", "file", ")", "\n", "data", ".", "update", "(", "file_data", ")", "\n", "", "return", "list", "(", "data", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_scv2_dataset": [[67, 92], ["os.path.join", "open", "pickle.load", "open", "pickle.load"], "function", ["None"], ["", "def", "load_scv2_dataset", "(", "test", "=", "False", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'SCv2-GEN'", ",", "'raw.pickle'", ")", "\n", "if", "test", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "test", "=", "[", "(", "data", "[", "'texts'", "]", "[", "x", "]", ",", "data", "[", "'info'", "]", "[", "x", "]", "[", "\"label\"", "]", ")", "for", "x", "in", "\n", "data", "[", "'test_ind'", "]", "]", "\n", "X_test", "=", "[", "x", "[", "0", "]", "for", "x", "in", "test", "]", "\n", "y_test", "=", "[", "x", "[", "1", "]", "for", "x", "in", "test", "]", "\n", "dataset", "=", "[", "X_test", ",", "y_test", "]", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "train", "=", "[", "(", "data", "[", "'texts'", "]", "[", "x", "]", ",", "data", "[", "'info'", "]", "[", "x", "]", "[", "\"label\"", "]", ")", "for", "x", "in", "\n", "data", "[", "'train_ind'", "]", "]", "\n", "val", "=", "[", "(", "data", "[", "'texts'", "]", "[", "x", "]", ",", "data", "[", "'info'", "]", "[", "x", "]", "[", "\"label\"", "]", ")", "for", "x", "in", "\n", "data", "[", "'val_ind'", "]", "]", "\n", "\n", "X_train", "=", "[", "x", "[", "0", "]", "for", "x", "in", "train", "]", "\n", "X_val", "=", "[", "x", "[", "0", "]", "for", "x", "in", "val", "]", "\n", "\n", "y_train", "=", "[", "x", "[", "1", "]", "for", "x", "in", "train", "]", "\n", "y_val", "=", "[", "x", "[", "1", "]", "for", "x", "in", "val", "]", "\n", "dataset", "=", "[", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", "]", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_sent17_dataset": [[94, 104], ["data_parsing.load_data_from_dir", "sklearn.model_selection.train_test_split", "os.path.join"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_data_from_dir"], ["", "def", "load_sent17_dataset", "(", ")", ":", "\n", "    ", "train", "=", "load_data_from_dir", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\n", "'sentiment2017/train'", ")", ")", "\n", "X", "=", "[", "obs", "[", "1", "]", "for", "obs", "in", "train", "]", "\n", "y", "=", "[", "obs", "[", "0", "]", "for", "obs", "in", "train", "]", "\n", "X_train", ",", "X_val", ",", "y_train", ",", "y_val", "=", "train_test_split", "(", "X", ",", "y", ",", "\n", "test_size", "=", "0.1", ",", "\n", "stratify", "=", "y", ")", "\n", "dataset", "=", "[", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", "]", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_dataset": [[106, 112], ["data_parsing.load_scv2_dataset", "data_parsing.load_sent17_dataset"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_scv2_dataset", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.load_sent17_dataset"], ["", "def", "load_dataset", "(", "config", ",", "test", "=", "False", ")", ":", "\n", "    ", "if", "config", "[", "\"data\"", "]", "[", "\"dataset\"", "]", "==", "\"scv2\"", ":", "\n", "        ", "dataset", "=", "load_scv2_dataset", "(", "test", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "load_sent17_dataset", "(", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.get_texts": [[114, 122], ["enumerate", "glob.glob", "texts.append", "labels.append", "open().read", "open"], "function", ["None"], ["", "def", "get_texts", "(", "path", ",", "classes", ")", ":", "\n", "    ", "texts", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "path", "+", "\"/\"", "+", "label", "+", "\"/\"", "+", "\"*.txt\"", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "texts", ".", "append", "(", "open", "(", "file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", ".", "read", "(", ")", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "return", "texts", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.data_parsing.parse_affect": [[124, 140], ["open", "int", "l.strip().split", "fd.readlines", "l.strip"], "function", ["None"], ["", "def", "parse_affect", "(", "data_file", ")", ":", "\n", "    ", "\"\"\"\n\n    Returns:\n        X: a list of tweets\n        y: a list of lists corresponding to the emotion labels of the tweets\n\n    \"\"\"", "\n", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "fd", ":", "\n", "        ", "data", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "fd", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "", "X", "=", "[", "d", "[", "1", "]", "for", "d", "in", "data", "]", "\n", "# dict.values() does not guarantee the order of the elements", "\n", "# so we should avoid using a dict for the labels", "\n", "y", "=", "[", "[", "int", "(", "l", ")", "for", "l", "in", "d", "[", "2", ":", "]", "]", "for", "d", "in", "data", "]", "\n", "\n", "return", "X", ",", "y", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.nlp.twitter_preprocessor": [[8, 26], ["ekphrasis.classes.preprocessor.TextPreProcessor", "ekphrasis.classes.tokenizer.SocialTokenizer"], "function", ["None"], ["def", "twitter_preprocessor", "(", ")", ":", "\n", "    ", "preprocessor", "=", "TextPreProcessor", "(", "\n", "normalize", "=", "[", "'url'", ",", "'email'", ",", "'percent'", ",", "'money'", ",", "'phone'", ",", "'user'", ",", "\n", "'time'", ",", "\n", "'date'", ",", "'number'", "]", ",", "\n", "annotate", "=", "{", "\"hashtag\"", ",", "\"elongated\"", ",", "\"allcaps\"", ",", "\"repeated\"", ",", "'emphasis'", ",", "\n", "'censored'", "}", ",", "\n", "all_caps_tag", "=", "\"wrap\"", ",", "\n", "fix_text", "=", "True", ",", "\n", "segmenter", "=", "\"twitter_2018\"", ",", "\n", "corrector", "=", "\"twitter_2018\"", ",", "\n", "unpack_hashtags", "=", "True", ",", "\n", "unpack_contractions", "=", "True", ",", "\n", "spell_correct_elong", "=", "False", ",", "\n", "tokenizer", "=", "SocialTokenizer", "(", "lowercase", "=", "True", ")", ".", "tokenize", ",", "\n", "dicts", "=", "[", "emoticons", "]", "\n", ")", ".", "pre_process_doc", "\n", "return", "preprocessor", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.nlp.twitter_preprocess": [[28, 39], ["nlp.twitter_preprocessor", "twitter_preprocessor.", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.nlp.twitter_preprocessor"], ["", "def", "twitter_preprocess", "(", ")", ":", "\n", "    ", "preprocessor", "=", "twitter_preprocessor", "(", ")", "\n", "\n", "def", "preprocess", "(", "name", ",", "dataset", ")", ":", "\n", "        ", "desc", "=", "\"PreProcessing dataset {}...\"", ".", "format", "(", "name", ")", "\n", "\n", "data", "=", "[", "preprocessor", "(", "x", ")", "\n", "for", "x", "in", "tqdm", "(", "dataset", ",", "desc", "=", "desc", ")", "]", "\n", "return", "data", "\n", "\n", "", "return", "preprocess", "\n", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.anneal": [[4, 6], ["numpy.geomspace().tolist", "numpy.geomspace"], "function", ["None"], ["def", "anneal", "(", "param", ")", ":", "\n", "    ", "return", "numpy", ".", "geomspace", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "num", "=", "5", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.dict_pattern_rename": [[8, 17], ["list", "from_dict.keys", "from_dict.pop", "list", "filter", "len", "k.replace", "patterns.keys"], "function", ["None"], ["", "def", "dict_pattern_rename", "(", "from_dict", ",", "patterns", ")", ":", "\n", "    ", "for", "k", "in", "list", "(", "from_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "v", "=", "from_dict", ".", "pop", "(", "k", ")", "\n", "p", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "k", ",", "patterns", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "p", ")", ">", "0", ":", "\n", "            ", "new_key", "=", "k", ".", "replace", "(", "p", "[", "0", "]", ",", "patterns", "[", "p", "[", "0", "]", "]", ")", "\n", "from_dict", "[", "new_key", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "from_dict", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.load_state_dict_subset": [[19, 30], ["model.state_dict", "model.state_dict.update", "model.load_state_dict", "pretrained_dict.items"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update"], ["", "", "", "def", "load_state_dict_subset", "(", "model", ",", "pretrained_dict", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.early_stopping.EarlyStopping.__init__": [[2, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "patience", ")", ":", "\n", "        ", "\"\"\"\n        :param mode: min or max\n        :param patience: nof epochs to wait before stopping\n        \"\"\"", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "current_patience", "=", "patience", "\n", "if", "self", ".", "mode", "==", "\"max\"", ":", "\n", "            ", "self", ".", "best_metric", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "best_metric", "=", "10000.0", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.early_stopping.EarlyStopping.stop": [[15, 45], ["print", "print", "print", "print"], "methods", ["None"], ["", "", "def", "stop", "(", "self", ",", "current_metric", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"max\"", ":", "\n", "            ", "if", "current_metric", ">", "self", ".", "best_metric", ":", "\n", "                ", "self", ".", "best_metric", "=", "current_metric", "\n", "self", ".", "current_patience", "=", "self", ".", "patience", "\n", "", "else", ":", "\n", "                ", "self", ".", "current_patience", "-=", "1", "\n", "\n", "", "print", "(", "\"patience left:{}, best({})\"", ".", "format", "(", "self", ".", "current_patience", ",", "self", ".", "best_metric", ")", ")", "\n", "print", "(", ")", "\n", "\n", "if", "self", ".", "current_patience", "==", "0", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "# mode = \"min\"", "\n", "            ", "if", "current_metric", "<", "self", ".", "best_metric", ":", "\n", "                ", "self", ".", "best_metric", "=", "current_metric", "\n", "self", ".", "current_patience", "=", "self", ".", "patience", "\n", "", "else", ":", "\n", "                ", "self", ".", "current_patience", "-=", "1", "\n", "\n", "", "print", "(", "\"patience left:{}, best({})\"", ".", "format", "(", "self", ".", "current_patience", ",", "self", ".", "best_metric", ")", ")", "\n", "print", "(", ")", "\n", "\n", "if", "self", ".", "current_patience", "==", "0", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.save_checkpoint": [[10, 50], ["datetime.datetime.now().strftime", "os.path.join", "torch.save", "isinstance", "os.path.join", "print", "datetime.datetime.now", "isinstance", "ValueError"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "name", ",", "path", "=", "None", ",", "timestamp", "=", "False", ",", "tag", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Save a trained model, along with its optimizer, in order to be able to\n    resume training\n    Args:\n        path (str): the directory, in which to save the checkpoints\n        timestamp (bool): whether to keep only one model (latest), or keep every\n            checkpoint\n\n    Returns:\n\n    \"\"\"", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%y-%m-%d_%H:%M:%S\"", ")", "\n", "\n", "if", "tag", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "tag", ",", "str", ")", ":", "\n", "            ", "name", "+=", "\"_{}\"", ".", "format", "(", "tag", ")", "\n", "", "elif", "isinstance", "(", "tag", ",", "list", ")", ":", "\n", "            ", "for", "t", "in", "tag", ":", "\n", "                ", "name", "+=", "\"_{}\"", ".", "format", "(", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid tag type!\"", ")", "\n", "\n", "", "", "if", "timestamp", ":", "\n", "        ", "name", "+=", "\"_{}\"", ".", "format", "(", "now", ")", "\n", "\n", "", "name", "+=", "\".pt\"", "\n", "\n", "if", "path", "is", "None", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "\"checkpoints\"", ")", "\n", "\n", "", "file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"saving checkpoint:{} ...\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "file", ")", "\n", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.load_checkpoint": [[52, 76], ["os.path.join", "print", "print", "os.path.join", "open", "torch.load"], "function", ["None"], ["", "def", "load_checkpoint", "(", "name", ",", "path", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load a trained model, along with its optimizer\n    Args:\n        name (str): the name of the model\n        path (str): the directory, in which the model is saved\n\n    Returns:\n        model, optimizer\n\n    \"\"\"", "\n", "if", "path", "is", "None", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "\"checkpoints\"", ")", "\n", "\n", "", "model_fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}.pt\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "print", "(", "\"Loading checkpoint `{}` ...\"", ".", "format", "(", "model_fname", ")", ",", "end", "=", "\" \"", ")", "\n", "\n", "with", "open", "(", "model_fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "print", "(", "\"done!\"", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc": [[78, 80], ["sklearn.metrics.accuracy_score"], "function", ["None"], ["", "def", "acc", "(", "y", ",", "y_hat", ")", ":", "\n", "    ", "return", "accuracy_score", "(", "y", ",", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro": [[82, 84], ["sklearn.metrics.f1_score"], "function", ["None"], ["", "def", "f1_macro", "(", "y", ",", "y_hat", ")", ":", "\n", "    ", "return", "f1_score", "(", "y", ",", "y_hat", ",", "average", "=", "'macro'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMCollate.__init__": [[72, 76], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sort", "=", "False", ",", "batch_first", "=", "True", ",", "has_attributes", "=", "False", ")", ":", "\n", "        ", "self", ".", "sort", "=", "sort", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "has_attributes", "=", "has_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMCollate.pad_collate": [[77, 90], ["torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "pad_collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "inputs", "=", "pad_sequence", "(", "[", "torch", ".", "LongTensor", "(", "x", "[", "0", "]", ")", "for", "x", "in", "batch", "]", ",", "\n", "self", ".", "batch_first", ")", "\n", "targets", "=", "pad_sequence", "(", "[", "torch", ".", "LongTensor", "(", "x", "[", "1", "]", ")", "for", "x", "in", "batch", "]", ",", "\n", "self", ".", "batch_first", ")", "\n", "\n", "if", "self", ".", "has_attributes", ":", "\n", "            ", "attributes", "=", "torch", ".", "FloatTensor", "(", "[", "x", "[", "2", "]", "for", "x", "in", "batch", "]", ")", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "3", "]", "for", "x", "in", "batch", "]", ")", "\n", "return", "inputs", ",", "targets", ",", "attributes", ",", "lengths", "\n", "", "else", ":", "\n", "            ", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "2", "]", "for", "x", "in", "batch", "]", ")", "\n", "return", "inputs", ",", "targets", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMCollate.__call__": [[91, 93], ["datasets.LMCollate.pad_collate"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfCollate.pad_collate"], ["", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "pad_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfCollate.__init__": [[101, 104], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sort", "=", "False", ",", "batch_first", "=", "True", ")", ":", "\n", "        ", "self", ".", "sort", "=", "sort", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfCollate.pad_collate": [[105, 114], ["sorted", "torch.nn.utils.rnn.pad_sequence", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "pad_collate", "(", "self", ",", "batch", ")", ":", "\n", "# inputs = pad_sequence([torch.FloatTensor(x[0]) for x in batch],", "\n", "#                       self.batch_first)", "\n", "        ", "batch", "=", "sorted", "(", "batch", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "inputs", "=", "pad_sequence", "(", "[", "torch", ".", "LongTensor", "(", "x", "[", "0", "]", ")", "for", "x", "in", "batch", "]", ",", "\n", "self", ".", "batch_first", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "1", "]", "for", "x", "in", "batch", "]", ")", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "2", "]", "for", "x", "in", "batch", "]", ")", "\n", "return", "inputs", ",", "labels", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfCollate.__call__": [[115, 117], ["datasets.ClfCollate.pad_collate"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfCollate.pad_collate"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "pad_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__init__": [[125, 137], ["collections.Counter", "dict", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pad", "=", "\"<pad>\"", ",", "sos", "=", "\"<sos>\"", ",", "eos", "=", "\"<eos>\"", ",", "unk", "=", "\"<unk>\"", ")", ":", "\n", "        ", "self", ".", "PAD", "=", "pad", "\n", "self", ".", "SOS", "=", "sos", "\n", "self", ".", "EOS", "=", "eos", "\n", "self", ".", "UNK", "=", "unk", "\n", "\n", "self", ".", "vocab", "=", "Counter", "(", ")", "\n", "\n", "self", ".", "tok2id", "=", "dict", "(", ")", "\n", "self", ".", "id2tok", "=", "dict", "(", ")", "\n", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.read_tokens": [[138, 140], ["datasets.Vocab.vocab.update"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update"], ["", "def", "read_tokens", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "vocab", ".", "update", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.trim": [[141, 145], ["dict", "dict", "datasets.Vocab.build"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.build"], ["", "def", "trim", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "tok2id", "=", "dict", "(", ")", "\n", "self", ".", "id2tok", "=", "dict", "(", ")", "\n", "self", ".", "build", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token": [[146, 150], ["len"], "methods", ["None"], ["", "def", "__add_token", "(", "self", ",", "token", ")", ":", "\n", "        ", "index", "=", "len", "(", "self", ".", "tok2id", ")", "\n", "self", ".", "tok2id", "[", "token", "]", "=", "index", "\n", "self", ".", "id2tok", "[", "index", "]", "=", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.from_file": [[151, 161], ["datasets.Vocab.__add_token", "datasets.Vocab.__add_token", "datasets.Vocab.__add_token", "datasets.Vocab.__add_token", "open().readlines", "datasets.Vocab.__add_token", "line.split", "open"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token"], ["", "def", "from_file", "(", "self", ",", "file", ",", "skip", "=", "0", ")", ":", "\n", "        ", "self", ".", "__add_token", "(", "self", ".", "PAD", ")", "\n", "self", ".", "__add_token", "(", "self", ".", "SOS", ")", "\n", "self", ".", "__add_token", "(", "self", ".", "EOS", ")", "\n", "self", ".", "__add_token", "(", "self", ".", "UNK", ")", "\n", "\n", "lines", "=", "open", "(", "file", "+", "\".vocab\"", ")", ".", "readlines", "(", ")", "[", "skip", ":", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "token", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "self", ".", "__add_token", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.to_file": [[162, 164], ["None"], "methods", ["None"], ["", "", "def", "to_file", "(", "self", ",", "file", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.build": [[165, 175], ["datasets.Vocab.__add_token", "datasets.Vocab.__add_token", "datasets.Vocab.__add_token", "datasets.Vocab.__add_token", "datasets.Vocab.vocab.most_common", "len", "datasets.Vocab.__add_token"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__add_token"], ["", "def", "build", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "self", ".", "__add_token", "(", "self", ".", "PAD", ")", "\n", "self", ".", "__add_token", "(", "self", ".", "SOS", ")", "\n", "self", ".", "__add_token", "(", "self", ".", "EOS", ")", "\n", "self", ".", "__add_token", "(", "self", ".", "UNK", ")", "\n", "\n", "for", "w", ",", "k", "in", "self", ".", "vocab", ".", "most_common", "(", "size", ")", ":", "\n", "            ", "self", ".", "__add_token", "(", "w", ")", "\n", "\n", "", "self", ".", "size", "=", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.__len__": [[176, 178], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tok2id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.SortedSampler.__init__": [[186, 189], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lengths", ",", "descending", "=", "False", ")", ":", "\n", "        ", "self", ".", "lengths", "=", "lengths", "\n", "self", ".", "desc", "=", "descending", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.SortedSampler.__iter__": [[190, 196], ["iter", "iter", "numpy.flip", "numpy.array().argsort", "numpy.array().argsort", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "desc", ":", "\n", "            ", "return", "iter", "(", "numpy", ".", "flip", "(", "numpy", ".", "array", "(", "self", ".", "lengths", ")", ".", "argsort", "(", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "iter", "(", "numpy", ".", "array", "(", "self", ".", "lengths", ")", ".", "argsort", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.SortedSampler.__len__": [[197, 199], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.BucketBatchSampler.__init__": [[202, 207], ["numpy.array().argsort", "math.ceil", "numpy.array_split", "numpy.array", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lengths", ",", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "True", ")", ":", "\n", "        ", "sorted_indices", "=", "numpy", ".", "array", "(", "lengths", ")", ".", "argsort", "(", ")", "\n", "num_sections", "=", "math", ".", "ceil", "(", "len", "(", "lengths", ")", "/", "batch_size", ")", "\n", "self", ".", "batches", "=", "numpy", ".", "array_split", "(", "sorted_indices", ",", "num_sections", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.BucketBatchSampler.__iter__": [[208, 214], ["iter", "iter", "torch.randperm", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "return", "iter", "(", "self", ".", "batches", "[", "i", "]", "\n", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "batches", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "iter", "(", "self", ".", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.BucketBatchSampler.__len__": [[215, 217], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMDataset.__init__": [[220, 260], ["datasets.read_corpus", "max", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.read_corpus"], ["    ", "def", "__init__", "(", "self", ",", "input", ",", "\n", "attributes", "=", "None", ",", "\n", "seq_len", "=", "0", ",", "\n", "preprocess", "=", "None", ",", "\n", "vocab", "=", "None", ",", "vocab_size", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Dataset for single corpus. Used for tasks like language modeling.\n\n        Args:\n            preprocess (callable): preprocessing callable, which takes as input\n                a string and returns a list of tokens\n            input (str, list): the path to the data file, or a list of samples.\n            attributes (numpy.ndarray): list of attributes\n                shape: samples x n_attributes\n            seq_len (int): sequence length\n            vocab (Vocab): a vocab instance. If None, then build a new one\n                from the Datasets data.\n            vocab_size(int): if given, then trim the vocab to the given number.\n            verbose(bool): print useful statistics about the dataset.\n        \"\"\"", "\n", "\n", "self", ".", "input", "=", "input", "\n", "self", ".", "attributes", "=", "attributes", "\n", "\n", "if", "preprocess", "is", "not", "None", ":", "\n", "            ", "self", ".", "preprocess", "=", "preprocess", "\n", "\n", "# tokenize the dataset", "\n", "", "self", ".", "vocab", ",", "self", ".", "data", "=", "read_corpus", "(", "\n", "input", ",", "self", ".", "preprocess", ",", "vocab", ",", "vocab_size", ")", "\n", "\n", "if", "seq_len", "==", "0", ":", "\n", "            ", "self", ".", "seq_len", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "data", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "seq_len", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "self", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMDataset.__str__": [[261, 276], ["isinstance", "props.append", "props.append", "props.append", "props.append", "tabulate.tabulate.tabulate", "props.append", "props.append", "len", "len", "len", "os.path.basename", "len"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "\n", "        ", "props", "=", "[", "]", "\n", "if", "isinstance", "(", "self", ".", "input", ",", "str", ")", ":", "\n", "            ", "props", ".", "append", "(", "(", "\"source\"", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "input", ")", ")", ")", "\n", "\n", "", "props", ".", "append", "(", "(", "\"size\"", ",", "len", "(", "self", ")", ")", ")", "\n", "props", ".", "append", "(", "(", "\"vocab size\"", ",", "len", "(", "self", ".", "vocab", ")", ")", ")", "\n", "props", ".", "append", "(", "(", "\"unique tokens\"", ",", "len", "(", "self", ".", "vocab", ".", "vocab", ")", ")", ")", "\n", "props", ".", "append", "(", "(", "\"max seq length\"", ",", "self", ".", "seq_len", ")", ")", "\n", "\n", "if", "self", ".", "attributes", "is", "not", "None", ":", "\n", "            ", "props", ".", "append", "(", "(", "\"attributes\"", ",", "len", "(", "self", ".", "attributes", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "tabulate", "(", "[", "[", "x", "[", "1", "]", "for", "x", "in", "props", "]", "]", ",", "headers", "=", "[", "x", "[", "0", "]", "for", "x", "in", "props", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMDataset.truncate": [[277, 279], ["None"], "methods", ["None"], ["", "def", "truncate", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "data", "=", "self", ".", "data", "[", ":", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMDataset.preprocess": [[280, 285], ["text.lower.lower.split", "text.lower.lower.lower"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "preprocess", "(", "text", ",", "lower", "=", "True", ")", ":", "\n", "        ", "if", "lower", ":", "\n", "            ", "text", "=", "text", ".", "lower", "(", ")", "\n", "", "return", "text", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMDataset.__len__": [[286, 288], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.LMDataset.__getitem__": [[289, 302], ["len", "datasets.vectorize", "datasets.vectorize", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.vectorize", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.vectorize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "data", "[", "index", "]", "[", ":", "self", ".", "seq_len", "]", "\n", "targets", "=", "inputs", "[", "1", ":", "]", "[", ":", "self", ".", "seq_len", "]", "\n", "\n", "length", "=", "len", "(", "inputs", ")", "\n", "inputs_vec", "=", "vectorize", "(", "inputs", ",", "self", ".", "vocab", ")", "\n", "targets_vec", "=", "vectorize", "(", "targets", ",", "self", ".", "vocab", ")", "\n", "\n", "if", "self", ".", "attributes", "is", "not", "None", ":", "\n", "            ", "attributes", "=", "numpy", ".", "array", "(", "self", ".", "attributes", "[", "index", "]", ")", "\n", "return", "inputs_vec", ",", "targets_vec", ",", "attributes", ",", "length", "\n", "", "else", ":", "\n", "            ", "return", "inputs_vec", ",", "targets_vec", ",", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfDataset.__init__": [[305, 344], ["datasets.read_corpus", "sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit_transform", "max", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.read_corpus"], ["    ", "def", "__init__", "(", "self", ",", "input", ",", "\n", "labels", "=", "None", ",", "\n", "seq_len", "=", "0", ",", "\n", "preprocess", "=", "None", ",", "\n", "vocab", "=", "None", ",", "vocab_size", "=", "None", ",", "\n", "verbose", "=", "True", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            preprocess (callable): preprocessing callable, which takes as input\n                a string and returns a list of tokens\n            input (str, list): the path to the data file, or a list of samples.\n            labels (numpy.ndarray): list of labels\n            seq_len (int): sequence length\n            vocab (Vocab): a vocab instance. If None, then build a new one\n                from the Datasets data.\n            vocab_size(int): if given, then trim the vocab to the given number.\n            verbose(bool): print useful statistics about the dataset.\n        \"\"\"", "\n", "self", ".", "input", "=", "input", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "vocab", "=", "vocab", "\n", "if", "preprocess", "is", "not", "None", ":", "\n", "            ", "self", ".", "preprocess", "=", "preprocess", "\n", "\n", "", "self", ".", "vocab", ",", "self", ".", "data", "=", "read_corpus", "(", "input", ",", "self", ".", "preprocess", ",", "vocab", ",", "\n", "vocab_size", ")", "\n", "\n", "if", "seq_len", "==", "0", ":", "\n", "            ", "self", ".", "seq_len", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "data", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_len", "=", "seq_len", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "self", ")", "\n", "print", "(", ")", "\n", "\n", "", "label_encoder", "=", "LabelEncoder", "(", ")", "\n", "self", ".", "labels", "=", "label_encoder", ".", "fit_transform", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfDataset.__str__": [[345, 354], ["isinstance", "props.append", "props.append", "props.append", "props.append", "tabulate.tabulate.tabulate", "props.append", "len", "len", "len", "os.path.basename"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "props", "=", "[", "]", "\n", "if", "isinstance", "(", "self", ".", "input", ",", "str", ")", ":", "\n", "            ", "props", ".", "append", "(", "(", "\"source\"", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "input", ")", ")", ")", "\n", "", "props", ".", "append", "(", "(", "\"size\"", ",", "len", "(", "self", ")", ")", ")", "\n", "props", ".", "append", "(", "(", "\"vocab size\"", ",", "len", "(", "self", ".", "vocab", ")", ")", ")", "\n", "props", ".", "append", "(", "(", "\"unique tokens\"", ",", "len", "(", "self", ".", "vocab", ".", "vocab", ")", ")", ")", "\n", "props", ".", "append", "(", "(", "\"max seq length\"", ",", "self", ".", "seq_len", ")", ")", "\n", "return", "tabulate", "(", "[", "[", "x", "[", "1", "]", "for", "x", "in", "props", "]", "]", ",", "headers", "=", "[", "x", "[", "0", "]", "for", "x", "in", "props", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfDataset.truncate": [[355, 357], ["None"], "methods", ["None"], ["", "def", "truncate", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "data", "=", "self", ".", "data", "[", ":", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfDataset.preprocess": [[358, 363], ["text.lower.lower.split", "text.lower.lower.lower"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "preprocess", "(", "text", ",", "lower", "=", "True", ")", ":", "\n", "        ", "if", "lower", ":", "\n", "            ", "text", "=", "text", ".", "lower", "(", ")", "\n", "", "return", "text", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfDataset.__len__": [[364, 366], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.ClfDataset.__getitem__": [[367, 375], ["len", "datasets.vectorize"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.vectorize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "input", "=", "self", ".", "data", "[", "index", "]", "[", ":", "self", ".", "seq_len", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "length", "=", "len", "(", "input", ")", "\n", "inputs_vec", "=", "vectorize", "(", "input", ",", "self", ".", "vocab", ")", "\n", "\n", "return", "inputs_vec", ",", "label", ",", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.vectorize": [[15, 30], ["ids.append", "ids.append"], "function", ["None"], ["def", "vectorize", "(", "tokens", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Covert array of tokens, to array of ids\n    Args:\n        tokens (list): list of tokens\n        vocab (Vocab):\n    Returns:  list of ids\n    \"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "if", "token", "in", "vocab", ".", "tok2id", ":", "\n", "            ", "ids", ".", "append", "(", "vocab", ".", "tok2id", "[", "token", "]", ")", "\n", "", "else", ":", "\n", "            ", "ids", ".", "append", "(", "vocab", ".", "tok2id", "[", "vocab", ".", "UNK", "]", ")", "\n", "", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.iterate_data": [[32, 43], ["isinstance", "os.path.exists", "isinstance", "open", "len", "line.strip"], "function", ["None"], ["", "def", "iterate_data", "(", "data", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "str", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "data", ")", "\n", "with", "open", "(", "data", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "len", "(", "line", ".", "strip", "(", ")", ")", ">", "1", ":", "\n", "                    ", "yield", "line", "\n", "\n", "", "", "", "", "elif", "isinstance", "(", "data", ",", "collections", ".", "Iterable", ")", ":", "\n", "        ", "for", "x", "in", "data", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.read_corpus": [[45, 64], ["datasets.iterate_data", "datasets.Vocab", "tokenize", "datasets.Vocab.read_tokens", "datasets.Vocab.build", "len", "_data.append"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.iterate_data", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.read_tokens", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.datasets.Vocab.build"], ["", "", "", "def", "read_corpus", "(", "file", ",", "tokenize", ",", "vocab", "=", "None", ",", "vocab_size", "=", "None", ")", ":", "\n", "    ", "if", "vocab", "is", "not", "None", ":", "\n", "        ", "_vocab", "=", "vocab", "\n", "", "else", ":", "\n", "        ", "_vocab", "=", "Vocab", "(", ")", "\n", "\n", "", "_data", "=", "[", "]", "\n", "for", "line", "in", "iterate_data", "(", "file", ")", ":", "\n", "        ", "tokens", "=", "tokenize", "(", "line", ")", "\n", "_vocab", ".", "read_tokens", "(", "tokens", ")", "\n", "if", "len", "(", "tokens", ")", "<=", "1", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "_data", ".", "append", "(", "tokens", ")", "\n", "\n", "", "", "if", "vocab", "is", "None", ":", "\n", "        ", "_vocab", ".", "build", "(", "vocab_size", ")", "\n", "\n", "", "return", "_vocab", ",", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.last_by_index": [[12, 18], ["outputs.gather().squeeze", "outputs.gather", "outputs.size", "outputs.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "last_by_index", "(", "outputs", ",", "lengths", ")", ":", "\n", "# Index of the last output for each sequence.", "\n", "        ", "idx", "=", "(", "lengths", "-", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "outputs", ".", "size", "(", "0", ")", ",", "\n", "outputs", ".", "size", "(", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "outputs", ".", "gather", "(", "1", ",", "idx", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.last_timestep": [[19, 28], ["modules.RecurrentHelper.split_directions", "modules.RecurrentHelper.last_by_index", "torch.cat", "modules.RecurrentHelper.last_by_index"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.split_directions", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.last_by_index", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.last_by_index"], ["", "def", "last_timestep", "(", "self", ",", "outputs", ",", "lengths", ",", "bi", "=", "False", ")", ":", "\n", "        ", "if", "bi", ":", "\n", "            ", "forward", ",", "backward", "=", "self", ".", "split_directions", "(", "outputs", ")", "\n", "last_forward", "=", "self", ".", "last_by_index", "(", "forward", ",", "lengths", ")", "\n", "last_backward", "=", "backward", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "last_forward", ",", "last_backward", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "last_by_index", "(", "outputs", ",", "lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.split_directions": [[29, 35], ["int", "outputs.size"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "split_directions", "(", "outputs", ")", ":", "\n", "        ", "direction_size", "=", "int", "(", "outputs", ".", "size", "(", "-", "1", ")", "/", "2", ")", "\n", "forward", "=", "outputs", "[", ":", ",", ":", ",", ":", "direction_size", "]", "\n", "backward", "=", "outputs", "[", ":", ",", ":", ",", "direction_size", ":", "]", "\n", "return", "forward", ",", "backward", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.pad_outputs": [[36, 45], ["torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.functional.pad", "torch.nn.functional.pad.size"], "methods", ["None"], ["", "def", "pad_outputs", "(", "self", ",", "out_packed", ",", "max_length", ")", ":", "\n", "\n", "        ", "out_unpacked", ",", "_lengths", "=", "pad_packed_sequence", "(", "out_packed", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "# pad to initial max length", "\n", "pad_length", "=", "max_length", "-", "out_unpacked", ".", "size", "(", "1", ")", "\n", "out_unpacked", "=", "F", ".", "pad", "(", "out_unpacked", ",", "(", "0", ",", "0", ",", "0", ",", "pad_length", ")", ")", "\n", "return", "out_unpacked", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.hidden2vocab": [[46, 62], ["output.contiguous().view", "projection", "projection.view", "output.size", "output.size", "output.size", "projection.size", "output.contiguous", "output.size", "output.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hidden2vocab", "(", "output", ",", "projection", ")", ":", "\n", "# output_unpacked.size() = batch_size, max_length, hidden_units", "\n", "# flat_outputs = (batch_size*max_length, hidden_units),", "\n", "# which means that it is a sequence of *all* the outputs (flattened)", "\n", "        ", "flat_output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "output", ".", "size", "(", "0", ")", "*", "output", ".", "size", "(", "1", ")", ",", "\n", "output", ".", "size", "(", "2", ")", ")", "\n", "\n", "# the sequence of all the output projections", "\n", "decoded_flat", "=", "projection", "(", "flat_output", ")", "\n", "\n", "# reshaped the flat sequence of decoded words,", "\n", "# in the original (reshaped) form (3D tensor)", "\n", "decoded", "=", "decoded_flat", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ",", "\n", "decoded_flat", ".", "size", "(", "1", ")", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.sort_by": [[63, 111], ["lengths.size", "lengths.sort", "sorted_idx.sort", "torch.linspace().long", "reverse_idx.cuda.cuda.cuda", "torch.linspace", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sort_by", "(", "lengths", ")", ":", "\n", "        ", "\"\"\"\n        Sort batch data and labels by length.\n        Useful for variable length inputs, for utilizing PackedSequences\n        Args:\n            lengths (nn.Tensor): tensor containing the lengths for the data\n\n        Returns:\n            - sorted lengths Tensor\n            - sort (callable) which will sort a given iterable\n                according to lengths\n            - unsort (callable) which will revert a given iterable to its\n                original order\n\n        \"\"\"", "\n", "batch_size", "=", "lengths", ".", "size", "(", "0", ")", "\n", "\n", "sorted_lengths", ",", "sorted_idx", "=", "lengths", ".", "sort", "(", ")", "\n", "_", ",", "original_idx", "=", "sorted_idx", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "reverse_idx", "=", "torch", ".", "linspace", "(", "batch_size", "-", "1", ",", "0", ",", "batch_size", ")", ".", "long", "(", ")", "\n", "\n", "if", "lengths", ".", "data", ".", "is_cuda", ":", "\n", "            ", "reverse_idx", "=", "reverse_idx", ".", "cuda", "(", ")", "\n", "\n", "", "sorted_lengths", "=", "sorted_lengths", "[", "reverse_idx", "]", "\n", "\n", "def", "sort", "(", "iterable", ")", ":", "\n", "\n", "            ", "if", "iterable", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "if", "len", "(", "iterable", ".", "shape", ")", ">", "1", ":", "\n", "                ", "return", "iterable", "[", "sorted_idx", "]", "[", "reverse_idx", "]", "\n", "", "else", ":", "\n", "                ", "return", "iterable", "\n", "\n", "", "", "def", "unsort", "(", "iterable", ")", ":", "\n", "\n", "            ", "if", "iterable", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "if", "len", "(", "iterable", ".", "shape", ")", ">", "1", ":", "\n", "                ", "return", "iterable", "[", "reverse_idx", "]", "[", "original_idx", "]", "[", "reverse_idx", "]", "\n", "", "else", ":", "\n", "                ", "return", "iterable", "\n", "\n", "", "", "return", "sorted_lengths", ",", "sort", ",", "unsort", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RNNModule.__init__": [[136, 173], ["super().__init__", "torch.nn.LSTM"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "\n", "rnn_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "bidirectional", "=", "False", ",", "\n", "dropout", "=", "0.", ",", "\n", "pack", "=", "True", ",", "last", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        A simple RNN Encoder, which produces a fixed vector representation\n        for a variable length sequence of feature vectors, using the output\n        at the last timestep of the RNN.\n        Args:\n            input_size (int): the size of the input features\n            rnn_size (int):\n            num_layers (int):\n            bidirectional (bool):\n            dropout (float):\n        \"\"\"", "\n", "super", "(", "RNNModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pack", "=", "pack", "\n", "self", ".", "last", "=", "last", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "rnn_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "# the dropout \"layer\" for the output of the RNN", "\n", "\n", "# define output feature size", "\n", "self", ".", "feature_size", "=", "rnn_size", "\n", "\n", "# double if bidirectional", "\n", "if", "bidirectional", ":", "\n", "            ", "self", ".", "feature_size", "*=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RNNModule.reorder_hidden": [[174, 181], ["isinstance"], "methods", ["None"], ["", "", "def", "reorder_hidden", "(", "self", ",", "hidden", ",", "order", ")", ":", "\n", "        ", "if", "isinstance", "(", "hidden", ",", "tuple", ")", ":", "\n", "            ", "hidden", "=", "hidden", "[", "0", "]", "[", ":", ",", "order", ",", ":", "]", ",", "hidden", "[", "1", "]", "[", ":", ",", "order", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "hidden", "=", "hidden", "[", ":", ",", "order", ",", ":", "]", "\n", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RNNModule.forward": [[182, 225], ["x.size", "lengths.sort", "sorted_i.sort", "torch.nn.utils.rnn.pack_padded_sequence", "modules.RNNModule.rnn.flatten_parameters", "modules.RNNModule.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "modules.RNNModule.reorder_hidden", "modules.RNNModule.rnn.flatten_parameters", "modules.RNNModule.rnn", "modules.RNNModule.reorder_hidden", "modules.RNNModule.last_timestep"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RNNModule.reorder_hidden", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RNNModule.reorder_hidden", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.last_timestep"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", "=", "None", ",", "lengths", "=", "None", ")", ":", "\n", "\n", "        ", "batch", ",", "max_length", ",", "feat_size", "=", "x", ".", "size", "(", ")", "\n", "\n", "if", "lengths", "is", "not", "None", "and", "self", ".", "pack", ":", "\n", "\n", "###############################################", "\n", "# sorting", "\n", "###############################################", "\n", "            ", "lenghts_sorted", ",", "sorted_i", "=", "lengths", ".", "sort", "(", "descending", "=", "True", ")", "\n", "_", ",", "reverse_i", "=", "sorted_i", ".", "sort", "(", ")", "\n", "\n", "x", "=", "x", "[", "sorted_i", "]", "\n", "\n", "if", "hidden", "is", "not", "None", ":", "\n", "                ", "hidden", "=", "self", ".", "reorder_hidden", "(", "hidden", ",", "sorted_i", ")", "\n", "\n", "###############################################", "\n", "# forward", "\n", "###############################################", "\n", "", "packed", "=", "pack_padded_sequence", "(", "x", ",", "lenghts_sorted", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "out_packed", ",", "hidden", "=", "self", ".", "rnn", "(", "packed", ",", "hidden", ")", "\n", "\n", "out_unpacked", ",", "_lengths", "=", "pad_packed_sequence", "(", "out_packed", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "###############################################", "\n", "# un-sorting", "\n", "###############################################", "\n", "outputs", "=", "out_unpacked", "[", "reverse_i", "]", "\n", "hidden", "=", "self", ".", "reorder_hidden", "(", "hidden", ",", "reverse_i", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "outputs", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "hidden", ")", "\n", "\n", "", "if", "self", ".", "last", ":", "\n", "            ", "return", "outputs", ",", "hidden", ",", "self", ".", "last_timestep", "(", "outputs", ",", "lengths", ",", "\n", "self", ".", "rnn", ".", "bidirectional", ")", "\n", "\n", "", "return", "outputs", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.LangModel.__init__": [[228, 263], ["super().__init__", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "modules.layers.Embed", "modules.RNNModule", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ntokens", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LangModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "############################################", "\n", "# Params", "\n", "############################################", "\n", "self", ".", "ntokens", "=", "ntokens", "\n", "self", ".", "emb_size", "=", "kwargs", ".", "get", "(", "\"emb_size\"", ",", "100", ")", "\n", "self", ".", "embed_noise", "=", "kwargs", ".", "get", "(", "\"embed_noise\"", ",", ".0", ")", "\n", "self", ".", "embed_dropout", "=", "kwargs", ".", "get", "(", "\"embed_dropout\"", ",", ".0", ")", "\n", "self", ".", "rnn_size", "=", "kwargs", ".", "get", "(", "\"rnn_size\"", ",", "100", ")", "\n", "self", ".", "rnn_layers", "=", "kwargs", ".", "get", "(", "\"rnn_layers\"", ",", "1", ")", "\n", "self", ".", "rnn_dropout", "=", "kwargs", ".", "get", "(", "\"rnn_dropout\"", ",", ".0", ")", "\n", "self", ".", "decode", "=", "kwargs", ".", "get", "(", "\"decode\"", ",", "False", ")", "\n", "self", ".", "tie_weights", "=", "kwargs", ".", "get", "(", "\"tie_weights\"", ",", "False", ")", "\n", "self", ".", "pack", "=", "kwargs", ".", "get", "(", "\"pack\"", ",", "True", ")", "\n", "\n", "############################################", "\n", "# Layers", "\n", "############################################", "\n", "self", ".", "embed", "=", "Embed", "(", "ntokens", ",", "self", ".", "emb_size", ",", "\n", "noise", "=", "self", ".", "embed_noise", ",", "\n", "dropout", "=", "self", ".", "embed_dropout", ")", "\n", "\n", "self", ".", "encoder", "=", "RNNModule", "(", "input_size", "=", "self", ".", "emb_size", ",", "\n", "rnn_size", "=", "self", ".", "rnn_size", ",", "\n", "num_layers", "=", "self", ".", "rnn_layers", ",", "\n", "bidirectional", "=", "False", ",", "\n", "pack", "=", "self", ".", "pack", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_size", ",", "ntokens", ")", "\n", "if", "self", ".", "tie_weights", ":", "\n", "            ", "self", ".", "decoder", ".", "weight", "=", "self", ".", "embed", ".", "embedding", ".", "weight", "\n", "if", "self", ".", "rnn_size", "!=", "self", ".", "emb_size", ":", "\n", "                ", "self", ".", "down", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_size", ",", "self", ".", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.LangModel.init_hidden": [[264, 272], ["next", "modules.LangModel.parameters", "next.new_zeros", "next.new_zeros", "next.new_zeros"], "methods", ["None"], ["", "", "", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "encoder", ".", "rnn", ".", "mode", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "weight", ".", "new_zeros", "(", "self", ".", "rnn_layers", ",", "bsz", ",", "self", ".", "rnn_size", ")", ",", "\n", "weight", ".", "new_zeros", "(", "self", ".", "rnn_layers", ",", "bsz", ",", "self", ".", "rnn_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "weight", ".", "new_zeros", "(", "self", ".", "rnn_layers", ",", "bsz", ",", "self", ".", "rnn_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.LangModel.forward": [[273, 283], ["modules.LangModel.embed", "modules.LangModel.encoder", "modules.LangModel.hidden2vocab", "modules.LangModel.down"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.hidden2vocab"], ["", "", "def", "forward", "(", "self", ",", "src", ",", "hidden", "=", "None", ",", "lengths", "=", "None", ")", ":", "\n", "        ", "embeds", "=", "self", ".", "embed", "(", "src", ")", "\n", "\n", "outputs", ",", "hidden", "=", "self", ".", "encoder", "(", "embeds", ",", "hidden", ",", "lengths", ")", "\n", "\n", "if", "self", ".", "tie_weights", "and", "self", ".", "rnn_size", "!=", "self", ".", "emb_size", ":", "\n", "            ", "outputs", "=", "self", ".", "down", "(", "outputs", ")", "\n", "\n", "", "logits", "=", "self", ".", "hidden2vocab", "(", "outputs", ",", "self", ".", "decoder", ")", "\n", "return", "logits", ",", "outputs", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.Classifier.__init__": [[286, 360], ["super().__init__", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "modules.locked_dropout.LockedDropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "kwargs.get", "kwargs.get", "modules.layers.Embed", "modules.RNNModule", "modules.RNNModule", "torch.nn.Linear", "torch.nn.Linear", "modules.layers.SelfAttention", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ntokens", ",", "nclasses", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "############################################", "\n", "# Params", "\n", "############################################", "\n", "self", ".", "ntokens", "=", "ntokens", "\n", "self", ".", "emb_size", "=", "kwargs", ".", "get", "(", "\"emb_size\"", ",", "100", ")", "\n", "self", ".", "embed_noise", "=", "kwargs", ".", "get", "(", "\"embed_noise\"", ",", ".0", ")", "\n", "self", ".", "embed_dropout", "=", "kwargs", ".", "get", "(", "\"embed_dropout\"", ",", ".0", ")", "\n", "self", ".", "bottom_rnn_size", "=", "kwargs", ".", "get", "(", "\"bottom_rnn_size\"", ",", "100", ")", "\n", "self", ".", "bottom_rnn_layers", "=", "kwargs", ".", "get", "(", "\"bottom_rnn_layers\"", ",", "1", ")", "\n", "self", ".", "bottom_rnn_dropout", "=", "kwargs", ".", "get", "(", "\"bottom_rnn_dropout\"", ",", ".0", ")", "\n", "self", ".", "top_rnn_size", "=", "kwargs", ".", "get", "(", "\"top_rnn_size\"", ",", "100", ")", "\n", "self", ".", "top_rnn_layers", "=", "kwargs", ".", "get", "(", "\"top_rnn_layers\"", ",", "1", ")", "\n", "self", ".", "top_rnn_dropout", "=", "kwargs", ".", "get", "(", "\"top_rnn_dropout\"", ",", ".0", ")", "\n", "self", ".", "tie_weights", "=", "kwargs", ".", "get", "(", "\"tie_weights\"", ",", "False", ")", "\n", "self", ".", "pack", "=", "kwargs", ".", "get", "(", "\"pack\"", ",", "True", ")", "\n", "self", ".", "attention_dropout", "=", "kwargs", ".", "get", "(", "\"attention_dropout\"", ",", ".0", ")", "\n", "self", ".", "attention_layers", "=", "kwargs", ".", "get", "(", "\"attention_layers\"", ",", "1", ")", "\n", "self", ".", "dropout", "=", "kwargs", ".", "get", "(", "\"dropout\"", ",", "0.1", ")", "\n", "self", ".", "dropouti", "=", "kwargs", ".", "get", "(", "\"dropouti\"", ",", "0.1", ")", "\n", "self", ".", "dropouth", "=", "kwargs", ".", "get", "(", "\"dropouth\"", ",", "0.1", ")", "\n", "self", ".", "dropoute", "=", "kwargs", ".", "get", "(", "\"dropoute\"", ",", "0.1", ")", "\n", "self", ".", "wdrop", "=", "kwargs", ".", "get", "(", "\"wdrop\"", ",", "0.0", ")", "\n", "self", ".", "att", "=", "kwargs", ".", "get", "(", "\"has_att\"", ",", "False", ")", "\n", "self", ".", "lockdrop", "=", "LockedDropout", "(", ")", "\n", "self", ".", "idrop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropouti", ")", "\n", "self", ".", "hdrop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropouth", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "self", ".", "top_bidir", "=", "kwargs", ".", "get", "(", "\"top_rnn_bidir\"", ",", "False", ")", "\n", "self", ".", "new_lm", "=", "kwargs", ".", "get", "(", "\"new_lm\"", ",", "False", ")", "\n", "############################################", "\n", "# Layers", "\n", "############################################", "\n", "self", ".", "embed", "=", "Embed", "(", "ntokens", ",", "self", ".", "emb_size", ",", "\n", "noise", "=", "self", ".", "embed_noise", ",", "dropout", "=", "self", ".", "embed_dropout", ")", "\n", "if", "self", ".", "att", ":", "\n", "            ", "last", "=", "False", "\n", "", "else", ":", "\n", "            ", "last", "=", "True", "\n", "\n", "", "self", ".", "bottom_rnn", "=", "RNNModule", "(", "input_size", "=", "self", ".", "emb_size", ",", "\n", "rnn_size", "=", "self", ".", "bottom_rnn_size", ",", "\n", "num_layers", "=", "self", ".", "bottom_rnn_layers", ",", "\n", "bidirectional", "=", "False", ",", "\n", "dropout", "=", "self", ".", "bottom_rnn_dropout", ",", "\n", "pack", "=", "self", ".", "pack", ")", "\n", "if", "self", ".", "tie_weights", ":", "\n", "            ", "input_top_size", "=", "self", ".", "emb_size", "\n", "", "else", ":", "\n", "            ", "input_top_size", "=", "self", ".", "bottom_rnn_size", "\n", "\n", "", "self", ".", "top_rnn", "=", "RNNModule", "(", "input_size", "=", "input_top_size", ",", "\n", "rnn_size", "=", "self", ".", "top_rnn_size", ",", "\n", "num_layers", "=", "self", ".", "top_rnn_layers", ",", "\n", "bidirectional", "=", "self", ".", "top_bidir", ",", "\n", "dropout", "=", "self", ".", "top_rnn_dropout", ",", "\n", "pack", "=", "self", ".", "pack", ",", "\n", "last", "=", "last", ")", "\n", "if", "self", ".", "att", ":", "\n", "            ", "self", ".", "attention", "=", "SelfAttention", "(", "attention_size", "=", "\n", "self", ".", "top_rnn", ".", "feature_size", ",", "\n", "dropout", "=", "self", ".", "attention_dropout", ",", "\n", "layers", "=", "self", ".", "attention_layers", ")", "\n", "\n", "", "self", ".", "vocab", "=", "nn", ".", "Linear", "(", "self", ".", "bottom_rnn_size", ",", "ntokens", ")", "\n", "self", ".", "classes", "=", "nn", ".", "Linear", "(", "self", ".", "top_rnn", ".", "feature_size", ",", "nclasses", ")", "\n", "\n", "if", "self", ".", "tie_weights", ":", "\n", "            ", "self", ".", "vocab", ".", "weight", "=", "self", ".", "embed", ".", "embedding", ".", "weight", "\n", "if", "self", ".", "bottom_rnn_size", "!=", "self", ".", "emb_size", ":", "\n", "                ", "self", ".", "down", "=", "nn", ".", "Linear", "(", "self", ".", "bottom_rnn_size", ",", "\n", "self", ".", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.Classifier.forward": [[361, 390], ["modules.embed_regularize.embedded_dropout", "modules.Classifier.lockdrop", "modules.Classifier.bottom_rnn", "modules.Classifier.lockdrop", "modules.Classifier.hidden2vocab", "modules.Classifier.down", "modules.Classifier.top_rnn", "modules.Classifier.attention", "modules.Classifier.classes", "modules.Classifier.top_rnn", "modules.Classifier.classes"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.embed_regularize.embedded_dropout", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.RecurrentHelper.hidden2vocab"], ["", "", "", "def", "forward", "(", "self", ",", "src", ",", "lengths", "=", "None", ")", ":", "\n", "\n", "# step 1: embed the sentences", "\n", "        ", "embeds", "=", "embedded_dropout", "(", "self", ".", "embed", ".", "embedding", ",", "src", ",", "\n", "dropout", "=", "self", ".", "dropoute", "if", "self", ".", "training", "else", "0", ")", "\n", "\n", "embeds", "=", "self", ".", "lockdrop", "(", "embeds", ",", "self", ".", "dropouti", ")", "\n", "\n", "# step 2: encode the sentences", "\n", "bottom_outs", ",", "_", "=", "self", ".", "bottom_rnn", "(", "embeds", ",", "lengths", "=", "lengths", ")", "\n", "\n", "if", "self", ".", "tie_weights", "and", "self", ".", "bottom_rnn_size", "!=", "self", ".", "emb_size", ":", "\n", "            ", "bottom_outs", "=", "self", ".", "down", "(", "bottom_outs", ")", "\n", "\n", "", "bottom_outs", "=", "self", ".", "lockdrop", "(", "bottom_outs", ",", "self", ".", "dropout", ")", "\n", "\n", "if", "self", ".", "att", ":", "\n", "            ", "outputs", ",", "hidden", "=", "self", ".", "top_rnn", "(", "bottom_outs", ",", "lengths", "=", "lengths", ")", "\n", "representations", ",", "attentions", "=", "self", ".", "attention", "(", "outputs", ",", "lengths", ")", "\n", "cls_logits", "=", "self", ".", "classes", "(", "representations", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "hidden", ",", "last_hidden", "=", "self", ".", "top_rnn", "(", "bottom_outs", ",", "\n", "lengths", "=", "lengths", ")", "\n", "cls_logits", "=", "self", ".", "classes", "(", "last_hidden", ")", "\n", "attentions", "=", "[", "]", "\n", "# step 3: output layers", "\n", "", "lm_logits", "=", "self", ".", "hidden2vocab", "(", "bottom_outs", ",", "self", ".", "vocab", ")", "\n", "\n", "return", "lm_logits", ",", "cls_logits", ",", "attentions", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.NaiveClassifier.__init__": [[393, 437], ["super().__init__", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "modules.layers.Embed", "modules.RNNModule", "torch.nn.Linear", "modules.layers.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ntokens", ",", "nclasses", ",", "attention", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NaiveClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "############################################", "\n", "# Params", "\n", "############################################", "\n", "self", ".", "ntokens", "=", "ntokens", "\n", "self", ".", "emb_size", "=", "kwargs", ".", "get", "(", "\"emb_size\"", ",", "100", ")", "\n", "self", ".", "embed_noise", "=", "kwargs", ".", "get", "(", "\"embed_noise\"", ",", ".0", ")", "\n", "self", ".", "embed_dropout", "=", "kwargs", ".", "get", "(", "\"embed_dropout\"", ",", ".0", ")", "\n", "self", ".", "bottom_rnn_size", "=", "kwargs", ".", "get", "(", "\"bottom_rnn_size\"", ",", "100", ")", "\n", "self", ".", "attention_dropout", "=", "kwargs", ".", "get", "(", "\"attention_dropout\"", ",", ".0", ")", "\n", "self", ".", "bottom_rnn_layers", "=", "kwargs", ".", "get", "(", "\"bottom_rnn_layers\"", ",", "1", ")", "\n", "self", ".", "bottom_rnn_dropout", "=", "kwargs", ".", "get", "(", "\"bottom_rnn_dropout\"", ",", ".0", ")", "\n", "self", ".", "tie_weights", "=", "kwargs", ".", "get", "(", "\"tie_weights\"", ",", "False", ")", "\n", "self", ".", "pack", "=", "kwargs", ".", "get", "(", "\"pack\"", ",", "True", ")", "\n", "self", ".", "att", "=", "attention", "\n", "self", ".", "attention_layers", "=", "kwargs", ".", "get", "(", "\"attention_layers\"", ",", "1", ")", "\n", "\n", "############################################", "\n", "# Layers", "\n", "############################################", "\n", "self", ".", "embed", "=", "Embed", "(", "ntokens", ",", "self", ".", "emb_size", ",", "\n", "noise", "=", "self", ".", "embed_noise", ",", "dropout", "=", "\n", "self", ".", "embed_dropout", ")", "\n", "if", "self", ".", "att", ":", "\n", "            ", "last", "=", "False", "\n", "", "else", ":", "\n", "            ", "last", "=", "True", "\n", "\n", "", "self", ".", "bottom_rnn", "=", "RNNModule", "(", "input_size", "=", "self", ".", "emb_size", ",", "\n", "rnn_size", "=", "self", ".", "bottom_rnn_size", ",", "\n", "num_layers", "=", "self", ".", "bottom_rnn_layers", ",", "\n", "bidirectional", "=", "False", ",", "\n", "dropout", "=", "self", ".", "bottom_rnn_dropout", ",", "\n", "pack", "=", "self", ".", "pack", ",", "\n", "last", "=", "last", ")", "\n", "if", "self", ".", "att", ":", "\n", "            ", "self", ".", "attention", "=", "SelfAttention", "(", "attention_size", "=", "\n", "self", ".", "bottom_rnn_size", ",", "\n", "dropout", "=", "\n", "self", ".", "attention_dropout", ")", "\n", "\n", "", "self", ".", "classes", "=", "nn", ".", "Linear", "(", "self", ".", "bottom_rnn_size", ",", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.NaiveClassifier.forward": [[438, 453], ["modules.NaiveClassifier.embed", "modules.NaiveClassifier.bottom_rnn", "modules.NaiveClassifier.attention", "modules.NaiveClassifier.classes", "modules.NaiveClassifier.bottom_rnn", "modules.NaiveClassifier.classes"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "lengths", "=", "None", ")", ":", "\n", "\n", "# step 1: embed the sentences", "\n", "        ", "embeds", "=", "self", ".", "embed", "(", "src", ")", "\n", "\n", "# step 2: encode the sentences", "\n", "if", "self", ".", "att", ":", "\n", "            ", "outputs", ",", "hidden", "=", "self", ".", "bottom_rnn", "(", "embeds", ",", "lengths", "=", "lengths", ")", "\n", "representations", ",", "attentions", "=", "self", ".", "attention", "(", "outputs", ",", "lengths", ")", "\n", "cls_logits", "=", "self", ".", "classes", "(", "representations", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "hidden", ",", "last_hidden", "=", "self", ".", "bottom_rnn", "(", "embeds", ",", "lengths", "=", "lengths", ")", "\n", "cls_logits", "=", "self", ".", "classes", "(", "last_hidden", ")", "\n", "\n", "", "return", "cls_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.transfer_weights": [[113, 122], ["target.named_parameters", "source.named_parameters", "dict", "dict_target_params[].data.copy_"], "function", ["None"], ["", "", "def", "transfer_weights", "(", "target", ",", "source", ")", ":", "\n", "    ", "target_params", "=", "target", ".", "named_parameters", "(", ")", "\n", "source_params", "=", "source", ".", "named_parameters", "(", ")", "\n", "\n", "dict_target_params", "=", "dict", "(", "target_params", ")", "\n", "\n", "for", "name", ",", "param", "in", "source_params", ":", "\n", "        ", "if", "name", "in", "dict_target_params", ":", "\n", "            ", "dict_target_params", "[", "name", "]", ".", "data", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.modules.tie_weights": [[124, 133], ["target.named_parameters", "source.named_parameters", "dict", "setattr", "getattr"], "function", ["None"], ["", "", "", "def", "tie_weights", "(", "target", ",", "source", ")", ":", "\n", "    ", "target_params", "=", "target", ".", "named_parameters", "(", ")", "\n", "source_params", "=", "source", ".", "named_parameters", "(", ")", "\n", "\n", "dict_target_params", "=", "dict", "(", "target_params", ")", "\n", "\n", "for", "name", ",", "param", "in", "source_params", ":", "\n", "        ", "if", "name", "in", "dict_target_params", ":", "\n", "            ", "setattr", "(", "target", ",", "name", ",", "getattr", "(", "source", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.embed_regularize.embedded_dropout": [[4, 24], ["torch.nn.functional.embedding", "embed.weight.data.new().resize_().bernoulli_().expand_as", "scale.expand_as", "embed.weight.data.new().resize_().bernoulli_", "embed.weight.data.new().resize_", "embed.weight.data.new", "embed.weight.size"], "function", ["None"], ["def", "embedded_dropout", "(", "embed", ",", "words", ",", "dropout", "=", "0.1", ",", "scale", "=", "None", ")", ":", "\n", "    ", "if", "dropout", ":", "\n", "        ", "mask", "=", "embed", ".", "weight", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "\n", "embed", ".", "weight", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "bernoulli_", "(", "\n", "1", "-", "dropout", ")", ".", "expand_as", "(", "embed", ".", "weight", ")", "/", "(", "1", "-", "dropout", ")", "\n", "masked_embed_weight", "=", "mask", "*", "embed", ".", "weight", "\n", "", "else", ":", "\n", "        ", "masked_embed_weight", "=", "embed", ".", "weight", "\n", "", "if", "scale", ":", "\n", "        ", "masked_embed_weight", "=", "scale", ".", "expand_as", "(", "\n", "masked_embed_weight", ")", "*", "masked_embed_weight", "\n", "\n", "", "padding_idx", "=", "embed", ".", "padding_idx", "\n", "if", "padding_idx", "is", "None", ":", "\n", "        ", "padding_idx", "=", "-", "1", "\n", "\n", "", "X", "=", "torch", ".", "nn", ".", "functional", ".", "embedding", "(", "words", ",", "masked_embed_weight", ",", "\n", "padding_idx", ",", "embed", ".", "max_norm", ",", "embed", ".", "norm_type", ",", "\n", "embed", ".", "scale_grad_by_freq", ",", "embed", ".", "sparse", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.__init__": [[21, 64], ["isinstance", "isinstance", "isinstance", "len", "len", "len", "len", "callable"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "train_loader", ",", "valid_loader", ",", "\n", "criterion", ",", "\n", "optimizers", ",", "config", ",", "device", ",", "\n", "valid_loader_train_set", "=", "None", ",", "\n", "batch_end_callbacks", "=", "None", ",", "\n", "unfreeze_embed", "=", "None", ",", "\n", "unfreeze_rnn", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "valid_loader", "=", "valid_loader", "\n", "self", ".", "valid_loader_train_set", "=", "valid_loader_train_set", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "optimizers", "=", "optimizers", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "unfreeze_embed", "=", "unfreeze_embed", "\n", "self", ".", "unfreeze_rnn", "=", "unfreeze_rnn", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "log_interval", "=", "self", ".", "config", "[", "\"log_interval\"", "]", "\n", "self", ".", "batch_size", "=", "self", ".", "config", "[", "\"batch_size\"", "]", "\n", "self", ".", "checkpoint_interval", "=", "self", ".", "config", "[", "\"checkpoint_interval\"", "]", "\n", "self", ".", "clip", "=", "self", ".", "config", "[", "\"model\"", "]", "[", "\"clip\"", "]", "\n", "\n", "if", "batch_end_callbacks", "is", "None", ":", "\n", "            ", "self", ".", "batch_end_callbacks", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_end_callbacks", "=", "[", "c", "for", "c", "in", "batch_end_callbacks", "\n", "if", "callable", "(", "c", ")", "]", "\n", "", "if", "not", "isinstance", "(", "self", ".", "optimizers", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "optimizers", "=", "[", "self", ".", "optimizers", "]", "\n", "", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "progress_log", "=", "None", "\n", "if", "self", ".", "train_loader", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "self", ".", "train_set_size", "=", "len", "(", "self", ".", "train_loader", "[", "0", "]", ".", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_set_size", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "val_set_size", "=", "len", "(", "self", ".", "valid_loader", "[", "0", "]", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "val_set_size", "=", "len", "(", "self", ".", "valid_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._roll_seq": [[65, 72], ["torch.cat", "x.size", "x.narrow", "torch.zeros_like"], "methods", ["None"], ["", "", "def", "_roll_seq", "(", "self", ",", "x", ",", "dim", "=", "1", ",", "shift", "=", "1", ")", ":", "\n", "        ", "length", "=", "x", ".", "size", "(", "dim", ")", "-", "shift", "\n", "\n", "seq", "=", "torch", ".", "cat", "(", "[", "x", ".", "narrow", "(", "dim", ",", "shift", ",", "length", ")", ",", "\n", "torch", ".", "zeros_like", "(", "x", "[", ":", ",", ":", "1", "]", ")", "]", ",", "dim", ")", "\n", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._anneal": [[73, 76], ["numpy.linspace", "numpy.exp().tolist", "numpy.exp"], "methods", ["None"], ["", "def", "_anneal", "(", "self", ",", "param", ")", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "num", "=", "15", ")", "\n", "return", "np", ".", "exp", "(", "x", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._seq_loss": [[77, 81], ["trainer.Trainer.criterion", "logits.contiguous().view", "labels.contiguous().view", "logits.size", "logits.contiguous", "labels.contiguous"], "methods", ["None"], ["", "def", "_seq_loss", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "loss", "=", "self", ".", "criterion", "(", "logits", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.process_batch": [[82, 84], ["None"], "methods", ["None"], ["", "def", "process_batch", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses": [[85, 103], ["isinstance", "sum", "batch_losses.item", "x.item"], "methods", ["None"], ["", "def", "aggregate_losses", "(", "self", ",", "batch_losses", ",", "weights", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This function computes a weighted sum of the models losses\n        Args:\n            batch_losses(torch.Tensor, tuple):\n\n        Returns:\n            loss_sum (int): the aggregation of the constituent losses\n            loss_list (list, int): the constituent losses\n\n        \"\"\"", "\n", "if", "isinstance", "(", "batch_losses", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "loss_sum", "=", "sum", "(", "batch_losses", ")", "\n", "loss_list", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "batch_losses", "]", "\n", "", "else", ":", "\n", "            ", "loss_sum", "=", "batch_losses", "\n", "loss_list", "=", "batch_losses", ".", "item", "(", ")", "\n", "", "return", "loss_sum", ",", "loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.train_epoch": [[104, 171], ["trainer.Trainer.model.train", "time.time", "isinstance", "enumerate", "numpy.array().mean", "zip", "isinstance", "trainer.Trainer.process_batch", "trainer.Trainer.aggregate_losses", "losses.append", "loss_sum.backward", "optimizer.zero_grad", "list", "list", "optimizer.step", "utils.logging.epoch_progress", "callable", "numpy.array", "map", "map", "torch.nn.utils.clip_grad_norm_", "c", "list", "x.to", "map", "y.to"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.epoch_progress"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Train the network for one epoch and return the average loss.\n        * This will be a pessimistic approximation of the true loss\n        of the network, as the loss of the first batches will be higher\n        than the true.\n\n        Returns:\n            loss (float, list(float)): list of mean losses\n\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "self", ".", "epoch", "+=", "1", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "iterator", "=", "zip", "(", "*", "self", ".", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "iterator", "=", "self", ".", "train_loader", "\n", "\n", "", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "iterator", ",", "1", ")", ":", "\n", "\n", "            ", "self", ".", "step", "+=", "1", "\n", "\n", "# zero gradients", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "\n", "list", "(", "map", "(", "lambda", "y", ":", "y", ".", "to", "(", "self", ".", "device", ")", ",", "x", ")", ")", ",", "\n", "batch", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", ")", "\n", "\n", "", "batch_losses", "=", "self", ".", "process_batch", "(", "*", "batch", ")", "\n", "\n", "# aggregate the losses into a single loss value", "\n", "loss_sum", ",", "loss_list", "=", "self", ".", "aggregate_losses", "(", "batch_losses", ")", "\n", "losses", ".", "append", "(", "loss_list", ")", "\n", "\n", "# back-propagate", "\n", "loss_sum", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "clip", "is", "not", "None", ":", "\n", "# clip_grad_norm_(self.model.parameters(), self.clip)", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "optimizer", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "\n", "# update weights", "\n", "", "", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "step", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "progress_log", "=", "epoch_progress", "(", "self", ".", "epoch", ",", "i_batch", ",", "\n", "self", ".", "batch_size", ",", "\n", "self", ".", "train_set_size", ",", "\n", "epoch_start", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "batch_end_callbacks", ":", "\n", "                ", "if", "callable", "(", "c", ")", ":", "\n", "                    ", "c", "(", "i_batch", ",", "loss_list", ")", "\n", "\n", "", "", "", "return", "np", ".", "array", "(", "losses", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.eval_epoch": [[172, 206], ["trainer.Trainer.model.eval", "isinstance", "numpy.array().mean", "zip", "torch.no_grad", "enumerate", "isinstance", "trainer.Trainer.process_batch", "trainer.Trainer.aggregate_losses", "losses.append", "numpy.array", "list", "list", "map", "map", "list", "x.to", "map", "y.to"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses"], ["", "def", "eval_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the network for one epoch and return the average loss.\n\n        Returns:\n            loss (float, list(float)): list of mean losses\n\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "iterator", "=", "zip", "(", "*", "self", ".", "valid_loader", ")", "\n", "", "else", ":", "\n", "            ", "iterator", "=", "self", ".", "valid_loader", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "iterator", ",", "1", ")", ":", "\n", "\n", "# move all tensors in batch to the selected device", "\n", "                ", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "\n", "list", "(", "map", "(", "lambda", "y", ":", "y", ".", "to", "(", "self", ".", "device", ")", ",", "x", ")", ")", ",", "\n", "batch", ")", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", ")", "\n", "\n", "", "batch_losses", "=", "self", ".", "process_batch", "(", "*", "batch", ")", "\n", "\n", "# aggregate the losses into a single loss value", "\n", "loss", ",", "_losses", "=", "self", ".", "aggregate_losses", "(", "batch_losses", ")", "\n", "losses", ".", "append", "(", "_losses", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "losses", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.get_state": [[207, 221], ["trainer.Trainer.model.state_dict", "x.state_dict"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "_vocab", "=", "self", ".", "train_loader", ".", "dataset", ".", "vocab", "\n", "\n", "state", "=", "{", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "\"epoch\"", ":", "self", ".", "epoch", ",", "\n", "\"step\"", ":", "self", ".", "step", ",", "\n", "\"model\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"model_class\"", ":", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "\n", "\"optimizers\"", ":", "[", "x", ".", "state_dict", "(", ")", "for", "x", "in", "self", ".", "optimizers", "]", ",", "\n", "\"vocab\"", ":", "_vocab", ",", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.checkpoint": [[222, 230], ["utils.training.save_checkpoint", "trainer.Trainer.get_state"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.save_checkpoint", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.get_state"], ["", "def", "checkpoint", "(", "self", ",", "name", "=", "None", ",", "timestamp", "=", "False", ",", "tags", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "self", ".", "config", "[", "\"name\"", "]", "\n", "\n", "", "return", "save_checkpoint", "(", "self", ".", "get_state", "(", ")", ",", "\n", "name", "=", "name", ",", "tag", "=", "tags", ",", "timestamp", "=", "timestamp", ",", "\n", "verbose", "=", "verbose", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.GaussianNoise.__init__": [[9, 19], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stddev", ",", "mean", "=", ".0", ")", ":", "\n", "        ", "\"\"\"\n        Additive Gaussian Noise layer\n        Args:\n            stddev (float): the standard deviation of the distribution\n            mean (float): the mean of the distribution\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stddev", "=", "stddev", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.GaussianNoise.forward": [[20, 26], ["torch.autograd.Variable", "x.data.new().normal_", "x.data.new", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "noise", "=", "Variable", "(", "x", ".", "data", ".", "new", "(", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", "self", ".", "mean", ",", "\n", "self", ".", "stddev", ")", ")", "\n", "return", "x", "+", "noise", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.GaussianNoise.__repr__": [[27, 31], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{} (mean={}, stddev={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "str", "(", "self", ".", "mean", ")", ",", "\n", "str", "(", "self", ".", "stddev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.Embed.__init__": [[34, 69], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Dropout", "layers.GaussianNoise", "print", "layers.Embed.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.Embed.init_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_embeddings", ",", "\n", "embedding_dim", ",", "\n", "embeddings", "=", "None", ",", "\n", "noise", "=", ".0", ",", "\n", "dropout", "=", ".0", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Define the layer of the model and perform the initializations\n        of the layers (wherever it is necessary)\n        Args:\n            embeddings (numpy.ndarray): the 2D ndarray with the word vectors\n            noise (float):\n            dropout (float):\n            trainable (bool):\n        \"\"\"", "\n", "super", "(", "Embed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# define the embedding layer, with the corresponding dimensions", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "scale_grad_by_freq", "=", "False", ",", "\n", "sparse", "=", "False", ")", "\n", "\n", "# initialize the weights of the Embedding layer,", "\n", "# with the given pre-trained word vectors", "\n", "if", "embeddings", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Initializing Embedding layer with pre-trained weights!\"", ")", "\n", "self", ".", "init_embeddings", "(", "embeddings", ",", "trainable", ")", "\n", "\n", "# the dropout \"layer\" for the word embeddings", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# the gaussian noise \"layer\" for the word embeddings", "\n", "self", ".", "noise", "=", "GaussianNoise", "(", "noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.Embed.init_embeddings": [[70, 73], ["torch.nn.Parameter", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_embeddings", "(", "self", ",", "weights", ",", "trainable", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "weights", ")", ",", "\n", "requires_grad", "=", "trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.Embed.forward": [[74, 93], ["layers.Embed.embedding", "layers.Embed.noise", "layers.Embed.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        This is the heart of the model. This function, defines how the data\n        passes through the network.\n        Args:\n            x (): the input data (the sentences)\n\n        Returns: the logits for each class\n\n        \"\"\"", "\n", "embeddings", "=", "self", ".", "embedding", "(", "x", ")", "\n", "\n", "if", "self", ".", "noise", ".", "stddev", ">", "0", ":", "\n", "            ", "embeddings", "=", "self", ".", "noise", "(", "embeddings", ")", "\n", "\n", "", "if", "self", ".", "dropout", ".", "p", ">", "0", ":", "\n", "            ", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.SelfAttention.__init__": [[96, 124], ["torch.nn.Module.__init__", "range", "modules.append", "modules.append", "modules.append", "torch.nn.Sequential", "torch.nn.Softmax", "torch.nn.ReLU", "torch.nn.Tanh", "modules.append", "modules.append", "modules.append", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention_size", ",", "\n", "batch_first", "=", "True", ",", "\n", "layers", "=", "1", ",", "\n", "dropout", "=", ".0", ",", "\n", "non_linearity", "=", "\"tanh\"", ")", ":", "\n", "        ", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "\n", "if", "non_linearity", "==", "\"relu\"", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "layers", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "attention_size", ",", "attention_size", ")", ")", "\n", "modules", ".", "append", "(", "activation", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "# last attention layer must output 1", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "attention_size", ",", "1", ")", ")", "\n", "modules", ".", "append", "(", "activation", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "self", ".", "attention", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.layers.SelfAttention.forward": [[125, 135], ["layers.SelfAttention.attention().squeeze", "modules.helpers.sequence_mask", "modules.helpers.masked_normalization", "layers.SelfAttention.size", "layers.SelfAttention.attention", "modules.helpers.masked_normalization.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.helpers.sequence_mask", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.helpers.masked_normalization"], ["", "def", "forward", "(", "self", ",", "sequence", ",", "lengths", ")", ":", "\n", "\n", "        ", "energies", "=", "self", ".", "attention", "(", "sequence", ")", ".", "squeeze", "(", ")", "\n", "\n", "# construct a mask, based on sentence lengths", "\n", "mask", "=", "sequence_mask", "(", "lengths", ",", "energies", ".", "size", "(", "1", ")", ")", "\n", "scores", "=", "masked_normalization", "(", "energies", ",", "mask", ")", "\n", "contexts", "=", "(", "sequence", "*", "scores", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "return", "contexts", ",", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.helpers.sequence_mask": [[5, 15], ["lengths.numel", "torch.arange().type_as().unsqueeze().expand().lt", "lengths.max", "lengths.unsqueeze", "torch.arange().type_as().unsqueeze().expand", "torch.arange().type_as().unsqueeze", "torch.arange().type_as", "torch.arange"], "function", ["None"], ["def", "sequence_mask", "(", "lengths", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Creates a boolean mask from sequence lengths.\n    \"\"\"", "\n", "batch_size", "=", "lengths", ".", "numel", "(", ")", "\n", "max_len", "=", "max_len", "or", "lengths", ".", "max", "(", ")", "\n", "return", "(", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "device", "=", "lengths", ".", "device", ")", "\n", ".", "type_as", "(", "lengths", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", ".", "lt", "(", "lengths", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.helpers.masked_normalization": [[17, 27], ["torch.nn.functional.softmax", "masked_scores.div", "mask.float", "masked_scores.sum"], "function", ["None"], ["", "def", "masked_normalization", "(", "logits", ",", "mask", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# apply the mask - zero out masked timesteps", "\n", "masked_scores", "=", "scores", "*", "mask", ".", "float", "(", ")", "\n", "\n", "# re-normalize the masked scores", "\n", "normed_scores", "=", "masked_scores", ".", "div", "(", "masked_scores", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "return", "normed_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.helpers.masked_normalization_inf": [[29, 35], ["logits.masked_fill_", "torch.nn.functional.softmax", "float"], "function", ["None"], ["", "def", "masked_normalization_inf", "(", "logits", ",", "mask", ")", ":", "\n", "    ", "logits", ".", "masked_fill_", "(", "1", "-", "mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.locked_dropout.LockedDropout.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.locked_dropout.LockedDropout.forward": [[9, 16], ["x.data.new().bernoulli_", "mask.expand_as.expand_as.expand_as", "torch.autograd.Variable", "x.data.new", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dropout", "=", "0.5", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "dropout", ":", "\n", "            ", "return", "x", "\n", "", "m", "=", "x", ".", "data", ".", "new", "(", "1", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", ".", "bernoulli_", "(", "1", "-", "dropout", ")", "\n", "mask", "=", "Variable", "(", "m", ",", "requires_grad", "=", "False", ")", "/", "(", "1", "-", "dropout", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "x", ")", "\n", "return", "mask", "*", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_lm_trainer.LMTrainer.__init__": [[12, 14], ["modules.trainer.Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_lm_trainer.LMTrainer.process_batch": [[15, 21], ["sent_lm_trainer.LMTrainer.model", "sent_lm_trainer.LMTrainer._seq_loss", "sent_lm_trainer.LMTrainer._roll_seq"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._seq_loss", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._roll_seq"], ["", "def", "process_batch", "(", "self", ",", "inputs", ",", "labels", ",", "lengths", ")", ":", "\n", "        ", "logits", ",", "outputs", ",", "hidden", "=", "self", ".", "model", "(", "inputs", ",", "None", ",", "lengths", ")", "\n", "\n", "loss", "=", "self", ".", "_seq_loss", "(", "logits", ",", "self", ".", "_roll_seq", "(", "inputs", ")", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_lm.batch_callback": [[77, 89], ["exp.update_metric", "exp.update_metric", "exp.log_metrics", "exp.update_value", "print", "print", "math.exp", "len", "exp.log_metrics.split"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.log_metrics", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_value"], ["def", "batch_callback", "(", "batch", ",", "losses", ")", ":", "\n", "    ", "if", "trainer", ".", "step", "%", "config", "[", "\"log_interval\"", "]", "==", "0", ":", "\n", "        ", "exp", ".", "update_metric", "(", "\"loss\"", ",", "losses", ")", "\n", "exp", ".", "update_metric", "(", "\"ppl\"", ",", "math", ".", "exp", "(", "losses", ")", ")", "\n", "\n", "losses_log", "=", "exp", ".", "log_metrics", "(", "[", "\"loss\"", ",", "\"ppl\"", "]", ")", "\n", "exp", ".", "update_value", "(", "\"progress\"", ",", "trainer", ".", "progress_log", "+", "\"\\n\"", "+", "\n", "losses_log", ")", "\n", "\n", "# clean lines and move cursor back up N lines", "\n", "print", "(", "\"\\n\\033[K\"", "+", "losses_log", ")", "\n", "print", "(", "\"\\033[F\"", "*", "(", "len", "(", "losses_log", ".", "split", "(", "\"\\n\"", ")", ")", "+", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf.sent_clf": [[27, 191], ["print", "utils.datasets.ClfDataset", "print", "utils.datasets.ClfDataset", "utils.datasets.BucketBatchSampler", "utils.datasets.SortedSampler", "utils.datasets.SortedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "modules.modules.Classifier", "modules.modules.Classifier.to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "filter", "filter", "torch.optim.ASGD", "torch.optim.ASGD", "torch.optim.Adam", "models.sent_clf_trainer.SentClfTrainer", "Experiment", "Experiment.add_metric", "Experiment.add_metric", "Experiment.add_metric", "Experiment.add_metric", "Experiment.add_value", "Experiment.add_value", "print", "utils.early_stopping.EarlyStopping", "range", "utils.training.load_checkpoint", "config[].update", "utils.transfer.dict_pattern_rename", "config[].update", "utils.nlp.twitter_preprocessor", "len", "len", "len", "modules.modules.Classifier.embed.parameters", "itertools.chain", "filter", "filter", "print", "utils.transfer.dict_pattern_rename", "utils.transfer.load_state_dict_subset", "models.sent_clf_trainer.SentClfTrainer.train_epoch", "models.sent_clf_trainer.SentClfTrainer.eval_epoch", "models.sent_clf_trainer.SentClfTrainer.eval_epoch", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "print", "Experiment.log_metrics", "print", "Experiment.update_value", "utils.early_stopping.EarlyStopping.stop", "print", "utils.datasets.ClfCollate", "utils.datasets.ClfCollate", "utils.datasets.ClfCollate", "set", "modules.modules.Classifier.bottom_rnn.parameters", "modules.modules.Classifier.vocab.parameters", "itertools.chain", "itertools.chain", "utils.training.f1_macro", "utils.training.f1_macro", "utils.training.acc", "utils.training.acc", "utils.training.acc", "utils.training.f1_macro", "models.sent_clf_trainer.SentClfTrainer.checkpoint", "print", "modules.modules.Classifier.top_rnn.parameters", "modules.modules.Classifier.attention.parameters", "modules.modules.Classifier.classes.parameters", "modules.modules.Classifier.top_rnn.parameters", "modules.modules.Classifier.classes.parameters"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.load_checkpoint", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.dict_pattern_rename", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.nlp.twitter_preprocessor", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.dict_pattern_rename", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.load_state_dict_subset", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.train_epoch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.log_metrics", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.early_stopping.EarlyStopping.stop", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.checkpoint"], ["def", "sent_clf", "(", "dataset", ",", "config", ",", "opts", ",", "transfer", "=", "False", ")", ":", "\n", "    ", "from", "logger", ".", "experiment", "import", "Experiment", "\n", "\n", "opts", ".", "name", "=", "config", "[", "\"name\"", "]", "\n", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", "=", "dataset", "\n", "vocab", "=", "None", "\n", "if", "transfer", ":", "\n", "        ", "opts", ".", "transfer", "=", "config", "[", "\"pretrained_lm\"", "]", "\n", "checkpoint", "=", "load_checkpoint", "(", "opts", ".", "transfer", ")", "\n", "config", "[", "\"vocab\"", "]", ".", "update", "(", "checkpoint", "[", "\"config\"", "]", "[", "\"vocab\"", "]", ")", "\n", "dict_pattern_rename", "(", "checkpoint", "[", "\"config\"", "]", "[", "\"model\"", "]", ",", "\n", "{", "\"rnn_\"", ":", "\"bottom_rnn_\"", "}", ")", "\n", "config", "[", "\"model\"", "]", ".", "update", "(", "checkpoint", "[", "\"config\"", "]", "[", "\"model\"", "]", ")", "\n", "vocab", "=", "checkpoint", "[", "\"vocab\"", "]", "\n", "\n", "####################################################################", "\n", "# Load Preprocessed Datasets", "\n", "####################################################################", "\n", "", "if", "config", "[", "\"preprocessor\"", "]", "==", "\"twitter\"", ":", "\n", "        ", "preprocessor", "=", "twitter_preprocessor", "(", ")", "\n", "", "else", ":", "preprocessor", "=", "None", "\n", "\n", "print", "(", "\"Building training dataset...\"", ")", "\n", "train_set", "=", "ClfDataset", "(", "X_train", ",", "y_train", ",", "\n", "vocab", "=", "vocab", ",", "preprocess", "=", "preprocessor", ",", "\n", "vocab_size", "=", "config", "[", "\"vocab\"", "]", "[", "\"size\"", "]", ",", "\n", "seq_len", "=", "config", "[", "\"data\"", "]", "[", "\"seq_len\"", "]", ")", "\n", "\n", "print", "(", "\"Building validation dataset...\"", ")", "\n", "val_set", "=", "ClfDataset", "(", "X_val", ",", "y_val", ",", "\n", "seq_len", "=", "train_set", ".", "seq_len", ",", "preprocess", "=", "preprocessor", ",", "\n", "vocab", "=", "train_set", ".", "vocab", ")", "\n", "\n", "src_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "train_set", ".", "data", "]", "\n", "val_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "val_set", ".", "data", "]", "\n", "\n", "# select sampler & dataloader", "\n", "train_sampler", "=", "BucketBatchSampler", "(", "src_lengths", ",", "config", "[", "\"batch_size\"", "]", ",", "True", ")", "\n", "val_sampler", "=", "SortedSampler", "(", "val_lengths", ")", "\n", "val_sampler_train", "=", "SortedSampler", "(", "src_lengths", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "opts", ".", "cores", ",", "collate_fn", "=", "ClfCollate", "(", ")", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "opts", ".", "cores", ",", "collate_fn", "=", "ClfCollate", "(", ")", ")", "\n", "val_loader_train_dataset", "=", "DataLoader", "(", "train_set", ",", "\n", "sampler", "=", "val_sampler_train", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "opts", ".", "cores", ",", "\n", "collate_fn", "=", "ClfCollate", "(", ")", ")", "\n", "####################################################################", "\n", "# Model", "\n", "####################################################################", "\n", "ntokens", "=", "len", "(", "train_set", ".", "vocab", ")", "\n", "model", "=", "Classifier", "(", "ntokens", ",", "len", "(", "set", "(", "train_set", ".", "labels", ")", ")", ",", "**", "config", "[", "\"model\"", "]", ")", "\n", "model", ".", "to", "(", "opts", ".", "device", ")", "\n", "\n", "clf_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "lm_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "0", ")", "\n", "\n", "embed_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "model", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "bottom_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "chain", "(", "model", ".", "bottom_rnn", ".", "parameters", "(", ")", ",", "\n", "model", ".", "vocab", ".", "parameters", "(", ")", ")", ")", "\n", "if", "config", "[", "\"model\"", "]", "[", "\"has_att\"", "]", ":", "\n", "        ", "top_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "chain", "(", "model", ".", "top_rnn", ".", "parameters", "(", ")", ",", "\n", "model", ".", "attention", ".", "parameters", "(", ")", ",", "\n", "model", ".", "classes", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "top_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "chain", "(", "model", ".", "top_rnn", ".", "parameters", "(", ")", ",", "\n", "model", ".", "classes", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "", "embed_optimizer", "=", "optim", ".", "ASGD", "(", "embed_parameters", ",", "lr", "=", "0.0001", ")", "\n", "rnn_optimizer", "=", "optim", ".", "ASGD", "(", "bottom_parameters", ")", "\n", "top_optimizer", "=", "Adam", "(", "top_parameters", ",", "lr", "=", "config", "[", "\"top_lr\"", "]", ")", "\n", "####################################################################", "\n", "# Training Pipeline", "\n", "####################################################################", "\n", "\n", "# Trainer: responsible for managing the training process", "\n", "trainer", "=", "SentClfTrainer", "(", "model", ",", "train_loader", ",", "val_loader", ",", "\n", "(", "lm_criterion", ",", "clf_criterion", ")", ",", "\n", "[", "embed_optimizer", ",", "\n", "rnn_optimizer", ",", "\n", "top_optimizer", "]", ",", "\n", "config", ",", "opts", ".", "device", ",", "\n", "valid_loader_train_set", "=", "val_loader_train_dataset", ",", "\n", "unfreeze_embed", "=", "config", "[", "\"unfreeze_embed\"", "]", ",", "\n", "unfreeze_rnn", "=", "config", "[", "\"unfreeze_rnn\"", "]", ")", "\n", "\n", "####################################################################", "\n", "# Experiment: logging and visualizing the training process", "\n", "####################################################################", "\n", "\n", "exp", "=", "Experiment", "(", "opts", ".", "name", ",", "config", ",", "src_dirs", "=", "opts", ".", "source", ",", "\n", "output_dir", "=", "EXP_DIR", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_loss_lm\"", ",", "\"line\"", ",", "\"epoch loss lm\"", ",", "\n", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_loss_cls\"", ",", "\"line\"", ",", "\"epoch loss class\"", ",", "\n", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_f1\"", ",", "\"line\"", ",", "\"epoch f1\"", ",", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_acc\"", ",", "\"line\"", ",", "\"epoch accuracy\"", ",", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "\n", "exp", ".", "add_value", "(", "\"epoch\"", ",", "title", "=", "\"epoch summary\"", ")", "\n", "exp", ".", "add_value", "(", "\"progress\"", ",", "title", "=", "\"training progress\"", ")", "\n", "\n", "####################################################################", "\n", "# Resume Training from a previous checkpoint", "\n", "####################################################################", "\n", "if", "transfer", ":", "\n", "        ", "print", "(", "\"Transferring Encoder weights ...\"", ")", "\n", "dict_pattern_rename", "(", "checkpoint", "[", "\"model\"", "]", ",", "\n", "{", "\"encoder\"", ":", "\"bottom_rnn\"", ",", "\"decoder\"", ":", "\"vocab\"", "}", ")", "\n", "load_state_dict_subset", "(", "model", ",", "checkpoint", "[", "\"model\"", "]", ")", "\n", "", "print", "(", "model", ")", "\n", "\n", "####################################################################", "\n", "# Training Loop", "\n", "####################################################################", "\n", "best_loss", "=", "None", "\n", "early_stopping", "=", "EarlyStopping", "(", "\"min\"", ",", "config", "[", "\"patience\"", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "0", ",", "config", "[", "\"epochs\"", "]", ")", ":", "\n", "\n", "        ", "train_loss", "=", "trainer", ".", "train_epoch", "(", ")", "\n", "val_loss", ",", "y", ",", "y_pred", "=", "trainer", ".", "eval_epoch", "(", "val_set", "=", "True", ")", "\n", "_", ",", "y_train", ",", "y_pred_train", "=", "trainer", ".", "eval_epoch", "(", "train_set", "=", "True", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_loss_lm\"", ",", "train_loss", "[", "0", "]", ",", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_loss_lm\"", ",", "val_loss", "[", "0", "]", ",", "\"VAL\"", ")", "\n", "\n", "exp", ".", "update_metric", "(", "\"ep_loss_cls\"", ",", "train_loss", "[", "1", "]", ",", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_loss_cls\"", ",", "val_loss", "[", "1", "]", ",", "\"VAL\"", ")", "\n", "\n", "exp", ".", "update_metric", "(", "\"ep_f1\"", ",", "f1_macro", "(", "y_train", ",", "y_pred_train", ")", ",", "\n", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_f1\"", ",", "f1_macro", "(", "y", ",", "y_pred", ")", ",", "\"VAL\"", ")", "\n", "\n", "exp", ".", "update_metric", "(", "\"ep_acc\"", ",", "acc", "(", "y_train", ",", "y_pred_train", ")", ",", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_acc\"", ",", "acc", "(", "y", ",", "y_pred", ")", ",", "\"VAL\"", ")", "\n", "\n", "print", "(", ")", "\n", "epoch_log", "=", "exp", ".", "log_metrics", "(", "[", "\"ep_loss_lm\"", ",", "\"ep_loss_cls\"", ",", "\n", "\"ep_f1\"", ",", "\"ep_acc\"", "]", ")", "\n", "print", "(", "epoch_log", ")", "\n", "exp", ".", "update_value", "(", "\"epoch\"", ",", "epoch_log", ")", "\n", "\n", "# Save the model if the val loss is the best we've seen so far.", "\n", "if", "not", "best_loss", "or", "val_loss", "[", "1", "]", "<", "best_loss", ":", "\n", "            ", "best_loss", "=", "val_loss", "[", "1", "]", "\n", "trainer", ".", "best_acc", "=", "acc", "(", "y", ",", "y_pred", ")", "\n", "trainer", ".", "best_f1", "=", "f1_macro", "(", "y", ",", "y_pred", ")", "\n", "trainer", ".", "checkpoint", "(", "name", "=", "opts", ".", "name", ",", "timestamp", "=", "True", ")", "\n", "\n", "", "if", "early_stopping", ".", "stop", "(", "val_loss", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "\"Early Stopping (according to classification loss)....\"", ")", "\n", "break", "\n", "\n", "", "print", "(", "\"\\n\"", "*", "2", ")", "\n", "\n", "", "return", "best_loss", ",", "trainer", ".", "best_acc", ",", "trainer", ".", "best_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_trainer.SentClfTrainer.__init__": [[14, 21], ["modules.trainer.Trainer.__init__", "sent_clf_trainer.SentClfTrainer._anneal"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._anneal"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "best_f1", "=", "None", "\n", "self", ".", "best_acc", "=", "None", "\n", "self", ".", "lm_coef", "=", "self", ".", "config", "[", "\"exp_decay\"", "]", "\n", "self", ".", "lm_coef", "=", "self", ".", "_anneal", "(", "self", ".", "lm_coef", ")", "\n", "self", ".", "coef_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_trainer.SentClfTrainer.process_batch": [[22, 36], ["sent_clf_trainer.SentClfTrainer.model", "lm_logits.contiguous().view", "sent_clf_trainer.SentClfTrainer._roll_seq().contiguous().view", "lm_logits.size", "lm_logits.contiguous", "sent_clf_trainer.SentClfTrainer._roll_seq().contiguous", "sent_clf_trainer.SentClfTrainer._roll_seq"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer._roll_seq"], ["", "def", "process_batch", "(", "self", ",", "inputs", ",", "labels", ",", "lengths", ")", ":", "\n", "        ", "lm_logits", ",", "cls_logits", ",", "attentions", "=", "self", ".", "model", "(", "inputs", ",", "lengths", ")", "\n", "\n", "lm_loss", "=", "self", ".", "criterion", "[", "0", "]", "(", "\n", "lm_logits", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "lm_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "self", ".", "_roll_seq", "(", "inputs", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "try", ":", "\n", "            ", "lm_coef", "=", "self", ".", "lm_coef", "[", "self", ".", "coef_step", "]", "\n", "", "except", ":", "\n", "            ", "lm_coef", "=", "self", ".", "lm_coef", "[", "-", "1", "]", "\n", "", "cls_loss", "=", "self", ".", "criterion", "[", "1", "]", "(", "cls_logits", ",", "labels", ")", "\n", "\n", "losses", "=", "[", "lm_coef", "*", "lm_loss", ",", "cls_loss", "]", "\n", "return", "losses", ",", "labels", ",", "cls_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_trainer.SentClfTrainer.train_epoch": [[37, 124], ["sent_clf_trainer.SentClfTrainer.model.train", "time.time", "isinstance", "enumerate", "numpy.array().mean", "zip", "isinstance", "sent_clf_trainer.SentClfTrainer.process_batch", "sent_clf_trainer.SentClfTrainer.aggregate_losses", "losses.append", "loss_sum.backward", "sent_clf_trainer.SentClfTrainer.optimizers[].zero_grad", "list", "list", "sent_clf_trainer.SentClfTrainer.optimizers[].step", "utils.logging.epoch_progress", "callable", "numpy.array", "sent_clf_trainer.SentClfTrainer.optimizers[].zero_grad", "sent_clf_trainer.SentClfTrainer.optimizers[].zero_grad", "map", "map", "torch.nn.utils.clip_grad_norm_", "sent_clf_trainer.SentClfTrainer.optimizers[].step", "sent_clf_trainer.SentClfTrainer.optimizers[].step", "c", "optimizer.zero_grad", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "list", "x.to", "torch.nn.utils.clip_grad_norm_", "map", "y.to"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.epoch_progress"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Train the network for one epoch and return the average loss.\n        * This will be a pessimistic approximation of the true loss\n        of the network, as the loss of the first batches will be higher\n        than the true.\n\n        Returns:\n            loss (float, list(float)): list of mean losses\n\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "losses", "=", "[", "]", "\n", "self", ".", "epoch", "+=", "1", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "iterator", "=", "zip", "(", "*", "self", ".", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "iterator", "=", "self", ".", "train_loader", "\n", "\n", "", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "iterator", ",", "1", ")", ":", "\n", "\n", "            ", "self", ".", "step", "+=", "1", "\n", "# zero gradients", "\n", "if", "self", ".", "epoch", "<", "self", ".", "unfreeze_rnn", ":", "\n", "                ", "self", ".", "optimizers", "[", "2", "]", ".", "zero_grad", "(", ")", "\n", "", "elif", "self", ".", "epoch", "<", "self", ".", "unfreeze_embed", ":", "\n", "                ", "self", ".", "optimizers", "[", "2", "]", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizers", "[", "1", "]", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "\n", "list", "(", "map", "(", "lambda", "y", ":", "y", ".", "to", "(", "self", ".", "device", ")", ",", "x", ")", ")", ",", "\n", "batch", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", ")", "\n", "\n", "", "batch_losses", ",", "_", ",", "_", "=", "self", ".", "process_batch", "(", "*", "batch", ")", "\n", "\n", "# aggregate the losses into a single loss value", "\n", "loss_sum", ",", "loss_list", "=", "self", ".", "aggregate_losses", "(", "batch_losses", ")", "\n", "losses", ".", "append", "(", "loss_list", ")", "\n", "\n", "# back-propagate", "\n", "loss_sum", ".", "backward", "(", ")", "\n", "if", "self", ".", "clip", "is", "not", "None", ":", "\n", "\n", "                ", "if", "self", ".", "epoch", "<", "self", ".", "unfreeze_rnn", ":", "\n", "                    ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "self", ".", "optimizers", "[", "2", "]", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "", "elif", "self", ".", "epoch", "<", "self", ".", "unfreeze_embed", ":", "\n", "                    ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "self", ".", "optimizers", "[", "2", "]", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "self", ".", "optimizers", "[", "1", "]", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "", "else", ":", "\n", "                    ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                        ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "optimizer", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "\n", "# update weights", "\n", "", "", "", "if", "self", ".", "epoch", "<", "self", ".", "unfreeze_rnn", ":", "\n", "                ", "self", ".", "optimizers", "[", "2", "]", ".", "step", "(", ")", "\n", "", "elif", "self", ".", "epoch", "<", "self", ".", "unfreeze_embed", ":", "\n", "                ", "self", ".", "optimizers", "[", "2", "]", ".", "step", "(", ")", "\n", "self", ".", "optimizers", "[", "1", "]", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "if", "self", ".", "step", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "progress_log", "=", "epoch_progress", "(", "self", ".", "epoch", ",", "i_batch", ",", "\n", "self", ".", "batch_size", ",", "\n", "self", ".", "train_set_size", ",", "\n", "epoch_start", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "batch_end_callbacks", ":", "\n", "                ", "if", "callable", "(", "c", ")", ":", "\n", "                    ", "c", "(", "i_batch", ",", "loss_list", ")", "\n", "\n", "", "", "", "self", ".", "coef_step", "+=", "1", "\n", "\n", "return", "numpy", ".", "array", "(", "losses", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_trainer.SentClfTrainer.eval_epoch": [[125, 172], ["sent_clf_trainer.SentClfTrainer.model.eval", "torch.cat", "numpy.argmax", "numpy.array", "isinstance", "torch.no_grad", "enumerate", "torch.cat", "numpy.array().mean", "zip", "isinstance", "isinstance", "sent_clf_trainer.SentClfTrainer.process_batch", "labels.append", "torch.cat.append", "sent_clf_trainer.SentClfTrainer.aggregate_losses", "losses.append", "zip", "list", "list", "numpy.array", "map", "map", "list", "x.to", "map", "y.to"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses"], ["", "def", "eval_epoch", "(", "self", ",", "train_set", "=", "False", ",", "val_set", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the network for one epoch and return the average loss.\n\n        Returns:\n            loss (float, list(float)): list of mean losses\n\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "if", "val_set", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "iterator", "=", "zip", "(", "*", "self", ".", "valid_loader", ")", "\n", "", "else", ":", "\n", "                ", "iterator", "=", "self", ".", "valid_loader", "\n", "", "", "elif", "train_set", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "valid_loader_train_set", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "iterator", "=", "zip", "(", "*", "self", ".", "valid_loader_train_set", ")", "\n", "", "else", ":", "\n", "                ", "iterator", "=", "self", ".", "valid_loader_train_set", "\n", "\n", "", "", "labels", "=", "[", "]", "\n", "posteriors", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "iterator", ",", "1", ")", ":", "\n", "\n", "# move all tensors in batch to the selected device", "\n", "                ", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "\n", "list", "(", "map", "(", "lambda", "y", ":", "y", ".", "to", "(", "self", ".", "device", ")", ",", "x", ")", ")", ",", "\n", "batch", ")", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", ")", "\n", "\n", "", "batch_losses", ",", "label", ",", "cls_logits", "=", "self", ".", "process_batch", "(", "*", "batch", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "posteriors", ".", "append", "(", "cls_logits", ")", "\n", "\n", "# aggregate the losses into a single loss value", "\n", "loss", ",", "_losses", "=", "self", ".", "aggregate_losses", "(", "batch_losses", ")", "\n", "losses", ".", "append", "(", "_losses", ")", "\n", "", "", "posteriors", "=", "torch", ".", "cat", "(", "posteriors", ",", "dim", "=", "0", ")", "\n", "predicted", "=", "numpy", ".", "argmax", "(", "posteriors", ",", "1", ")", "\n", "labels_array", "=", "numpy", ".", "array", "(", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", ")", "\n", "return", "numpy", ".", "array", "(", "losses", ")", ".", "mean", "(", "axis", "=", "0", ")", ",", "labels_array", ",", "predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_trainer.SentClfTrainer.get_state": [[173, 189], ["sent_clf_trainer.SentClfTrainer.model.state_dict", "x.state_dict"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "_vocab", "=", "self", ".", "train_loader", ".", "dataset", ".", "vocab", "\n", "\n", "state", "=", "{", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "\"epoch\"", ":", "self", ".", "epoch", ",", "\n", "\"step\"", ":", "self", ".", "step", ",", "\n", "\"model\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"model_class\"", ":", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "\n", "\"optimizers\"", ":", "[", "x", ".", "state_dict", "(", ")", "for", "x", "in", "self", ".", "optimizers", "]", ",", "\n", "\"vocab\"", ":", "_vocab", ",", "\n", "\"f1:\"", ":", "self", ".", "best_f1", ",", "\n", "\"acc\"", ":", "self", ".", "best_acc", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_trainer.SentClfTrainer.checkpoint": [[190, 198], ["utils.training.save_checkpoint", "sent_clf_trainer.SentClfTrainer.get_state"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.save_checkpoint", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.get_state"], ["", "def", "checkpoint", "(", "self", ",", "name", "=", "None", ",", "timestamp", "=", "False", ",", "tags", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "self", ".", "config", "[", "\"name\"", "]", "\n", "\n", "", "return", "save_checkpoint", "(", "self", ".", "get_state", "(", ")", ",", "\n", "name", "=", "name", ",", "tag", "=", "tags", ",", "timestamp", "=", "timestamp", ",", "\n", "verbose", "=", "verbose", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.__init__": [[14, 18], ["modules.trainer.Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "best_f1", "=", "None", "\n", "self", ".", "best_acc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch": [[19, 26], ["sent_clf_no_aux_trainer.SentClfNoAuxTrainer.model", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.criterion"], "methods", ["None"], ["", "def", "process_batch", "(", "self", ",", "inputs", ",", "labels", ",", "lengths", ")", ":", "\n", "\n", "        ", "cls_logits", "=", "self", ".", "model", "(", "inputs", ",", "lengths", ")", "\n", "\n", "cls_loss", "=", "self", ".", "criterion", "(", "cls_logits", ",", "labels", ")", "\n", "\n", "return", "[", "cls_loss", "]", ",", "labels", ",", "cls_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.train_epoch": [[27, 137], ["sent_clf_no_aux_trainer.SentClfNoAuxTrainer.model.train", "time.time", "isinstance", "enumerate", "numpy.array().mean", "zip", "isinstance", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.aggregate_losses", "losses.append", "loss_sum.backward", "list", "list", "utils.logging.epoch_progress", "callable", "numpy.array", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.optimizers[].zero_grad", "optimizer.zero_grad", "map", "map", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.optimizers[].step", "optimizer.step", "c", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.optimizers[].zero_grad", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.optimizers[].zero_grad", "torch.nn.utils.clip_grad_norm_", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.optimizers[].step", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.optimizers[].step", "torch.nn.utils.clip_grad_norm_", "optimizer.zero_grad", "list", "x.to", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "map", "torch.nn.utils.clip_grad_norm_", "y.to"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.logging.epoch_progress"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Train the network for one epoch and return the average loss.\n        * This will be a pessimistic approximation of the true loss\n        of the network, as the loss of the first batches will be higher\n        than the true.\n\n        Returns:\n            loss (float, list(float)): list of mean losses\n\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "self", ".", "epoch", "+=", "1", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "iterator", "=", "zip", "(", "*", "self", ".", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "iterator", "=", "self", ".", "train_loader", "\n", "\n", "", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "iterator", ",", "1", ")", ":", "\n", "\n", "            ", "self", ".", "step", "+=", "1", "\n", "\n", "if", "self", ".", "config", "[", "\"gu\"", "]", ":", "\n", "                ", "if", "self", ".", "epoch", "<", "self", ".", "unfreeze_rnn", ":", "\n", "                    ", "self", ".", "optimizers", "[", "2", "]", ".", "zero_grad", "(", ")", "\n", "", "elif", "self", ".", "epoch", "<", "self", ".", "unfreeze_embed", ":", "\n", "                    ", "self", ".", "optimizers", "[", "2", "]", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizers", "[", "1", "]", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                    ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", "", "else", ":", "\n", "# zero gradients", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "train_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "\n", "list", "(", "map", "(", "lambda", "y", ":", "y", ".", "to", "(", "self", ".", "device", ")", ",", "x", ")", ")", ",", "\n", "batch", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", ")", "\n", "\n", "", "batch_loss", ",", "_", ",", "_", "=", "self", ".", "process_batch", "(", "*", "batch", ")", "\n", "\n", "# aggregate the losses into a single loss value", "\n", "loss_sum", ",", "loss_list", "=", "self", ".", "aggregate_losses", "(", "batch_loss", ")", "\n", "losses", ".", "append", "(", "loss_list", ")", "\n", "\n", "# back-propagate", "\n", "loss_sum", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "config", "[", "\"gu\"", "]", ":", "\n", "# we have more than 1 optimizers (3 to be exact)", "\n", "                ", "if", "self", ".", "clip", "is", "not", "None", ":", "\n", "\n", "                    ", "if", "self", ".", "epoch", "<", "self", ".", "unfreeze_rnn", ":", "\n", "                        ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "\n", "self", ".", "optimizers", "[", "2", "]", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "\n", "self", ".", "clip", ")", "\n", "", "elif", "self", ".", "epoch", "<", "self", ".", "unfreeze_embed", ":", "\n", "                        ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "\n", "self", ".", "optimizers", "[", "2", "]", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "\n", "self", ".", "clip", ")", "\n", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "\n", "self", ".", "optimizers", "[", "1", "]", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "\n", "self", ".", "clip", ")", "\n", "", "else", ":", "\n", "                        ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                            ", "clip_grad_norm_", "(", "\n", "(", "p", "for", "group", "in", "optimizer", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "# update weights", "\n", "", "", "", "if", "self", ".", "epoch", "<", "self", ".", "unfreeze_rnn", ":", "\n", "                    ", "self", ".", "optimizers", "[", "2", "]", ".", "step", "(", ")", "\n", "", "elif", "self", ".", "epoch", "<", "self", ".", "unfreeze_embed", ":", "\n", "                    ", "self", ".", "optimizers", "[", "2", "]", ".", "step", "(", ")", "\n", "self", ".", "optimizers", "[", "1", "]", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "clip", "is", "not", "None", ":", "\n", "                    ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                        ", "clip_grad_norm_", "(", "(", "p", "for", "group", "in", "optimizer", ".", "param_groups", "\n", "for", "p", "in", "group", "[", "'params'", "]", ")", ",", "self", ".", "clip", ")", "\n", "\n", "# update weights", "\n", "", "", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "if", "self", ".", "step", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "progress_log", "=", "epoch_progress", "(", "self", ".", "epoch", ",", "i_batch", ",", "\n", "self", ".", "batch_size", ",", "\n", "self", ".", "train_set_size", ",", "\n", "epoch_start", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "batch_end_callbacks", ":", "\n", "                ", "if", "callable", "(", "c", ")", ":", "\n", "                    ", "c", "(", "i_batch", ",", "batch_loss", ")", "\n", "\n", "", "", "", "return", "numpy", ".", "array", "(", "losses", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch": [[138, 187], ["sent_clf_no_aux_trainer.SentClfNoAuxTrainer.model.eval", "torch.cat", "numpy.argmax", "numpy.array", "isinstance", "torch.no_grad", "enumerate", "torch.cat.cpu", "torch.cat().cpu", "numpy.array().mean", "zip", "isinstance", "isinstance", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "labels.append", "torch.cat.append", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.aggregate_losses", "losses.append", "zip", "list", "list", "torch.cat", "numpy.array", "map", "map", "list", "x.to", "map", "y.to"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.process_batch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.modules.trainer.Trainer.aggregate_losses"], ["", "def", "eval_epoch", "(", "self", ",", "train_set", "=", "False", ",", "val_set", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the network for one epoch and return the average loss.\n\n        Returns:\n            loss (float, list(float)): list of mean losses\n\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "val_set", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "iterator", "=", "zip", "(", "*", "self", ".", "valid_loader", ")", "\n", "", "else", ":", "\n", "                ", "iterator", "=", "self", ".", "valid_loader", "\n", "", "", "elif", "train_set", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "valid_loader_train_set", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "iterator", "=", "zip", "(", "*", "self", ".", "valid_loader_train_set", ")", "\n", "", "else", ":", "\n", "                ", "iterator", "=", "self", ".", "valid_loader_train_set", "\n", "\n", "", "", "labels", "=", "[", "]", "\n", "posteriors", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "iterator", ",", "1", ")", ":", "\n", "\n", "# move all tensors in batch to the selected device", "\n", "                ", "if", "isinstance", "(", "self", ".", "valid_loader", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "\n", "list", "(", "map", "(", "lambda", "y", ":", "y", ".", "to", "(", "self", ".", "device", ")", ",", "x", ")", ")", ",", "\n", "batch", ")", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", ")", "\n", "\n", "", "batch_losses", ",", "label", ",", "cls_logits", "=", "self", ".", "process_batch", "(", "*", "batch", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "posteriors", ".", "append", "(", "cls_logits", ")", "\n", "\n", "# aggregate the losses into a single loss value", "\n", "loss", ",", "_losses", "=", "self", ".", "aggregate_losses", "(", "batch_losses", ")", "\n", "losses", ".", "append", "(", "_losses", ")", "\n", "\n", "", "", "posteriors", "=", "torch", ".", "cat", "(", "posteriors", ",", "dim", "=", "0", ")", "\n", "predicted", "=", "numpy", ".", "argmax", "(", "posteriors", ".", "cpu", "(", ")", ",", "1", ")", "\n", "# predicted = predicted.numpy()", "\n", "labels_array", "=", "numpy", ".", "array", "(", "(", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "numpy", ".", "array", "(", "losses", ")", ".", "mean", "(", "axis", "=", "0", ")", ",", "labels_array", ",", "predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.get_state": [[188, 204], ["sent_clf_no_aux_trainer.SentClfNoAuxTrainer.model.state_dict", "x.state_dict"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "_vocab", "=", "self", ".", "train_loader", ".", "dataset", ".", "vocab", "\n", "\n", "state", "=", "{", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "\"epoch\"", ":", "self", ".", "epoch", ",", "\n", "\"step\"", ":", "self", ".", "step", ",", "\n", "\"model\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"model_class\"", ":", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "\n", "\"optimizers\"", ":", "[", "x", ".", "state_dict", "(", ")", "for", "x", "in", "self", ".", "optimizers", "]", ",", "\n", "\"vocab\"", ":", "_vocab", ",", "\n", "\"f1:\"", ":", "self", ".", "best_f1", ",", "\n", "\"acc\"", ":", "self", ".", "best_acc", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.checkpoint": [[205, 213], ["utils.training.save_checkpoint", "sent_clf_no_aux_trainer.SentClfNoAuxTrainer.get_state"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.save_checkpoint", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.get_state"], ["", "def", "checkpoint", "(", "self", ",", "name", "=", "None", ",", "timestamp", "=", "False", ",", "tags", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "self", ".", "config", "[", "\"name\"", "]", "\n", "\n", "", "return", "save_checkpoint", "(", "self", ".", "get_state", "(", ")", ",", "\n", "name", "=", "name", ",", "tag", "=", "tags", ",", "timestamp", "=", "timestamp", ",", "\n", "verbose", "=", "verbose", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux.sent_clf_no_aux": [[27, 190], ["print", "utils.datasets.ClfDataset", "print", "utils.datasets.ClfDataset", "utils.datasets.BucketBatchSampler", "utils.datasets.SortedSampler", "utils.datasets.SortedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "modules.modules.NaiveClassifier", "modules.modules.NaiveClassifier.to", "torch.nn.CrossEntropyLoss", "Experiment", "Experiment.add_metric", "Experiment.add_metric", "Experiment.add_metric", "Experiment.add_value", "Experiment.add_value", "print", "utils.early_stopping.EarlyStopping", "range", "utils.training.load_checkpoint", "config[].update", "utils.transfer.dict_pattern_rename", "config[].update", "utils.nlp.twitter_preprocessor", "len", "len", "len", "filter", "filter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer", "filter", "torch.optim.Adam", "models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer", "print", "utils.transfer.dict_pattern_rename", "utils.transfer.load_state_dict_subset", "models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.train_epoch", "models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch", "models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "Experiment.update_metric", "print", "Experiment.log_metrics", "print", "Experiment.update_value", "utils.early_stopping.EarlyStopping.stop", "print", "utils.datasets.ClfCollate", "utils.datasets.ClfCollate", "utils.datasets.ClfCollate", "set", "modules.modules.NaiveClassifier.embed.parameters", "itertools.chain", "filter", "filter", "modules.modules.NaiveClassifier.parameters", "trainer.train_epoch.item", "val_loss.item", "utils.training.f1_macro", "utils.training.f1_macro", "utils.training.acc", "utils.training.acc", "utils.training.acc", "utils.training.f1_macro", "models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.checkpoint", "print", "modules.modules.NaiveClassifier.bottom_rnn.parameters", "itertools.chain", "modules.modules.NaiveClassifier.classes.parameters", "modules.modules.NaiveClassifier.attention.parameters", "modules.modules.NaiveClassifier.classes.parameters"], "function", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.load_checkpoint", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.dict_pattern_rename", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.nlp.twitter_preprocessor", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.dict_pattern_rename", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.transfer.load_state_dict_subset", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.train_epoch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.eval_epoch", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.log_metrics", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.early_stopping.EarlyStopping.stop", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.acc", "home.repos.pwc.inspect_result.alexandra-chron_siatl.utils.training.f1_macro", "home.repos.pwc.inspect_result.alexandra-chron_siatl.models.sent_clf_no_aux_trainer.SentClfNoAuxTrainer.checkpoint"], ["def", "sent_clf_no_aux", "(", "dataset", ",", "config", ",", "opts", ",", "transfer", "=", "False", ")", ":", "\n", "    ", "from", "logger", ".", "experiment", "import", "Experiment", "\n", "\n", "opts", ".", "name", "=", "config", "[", "\"name\"", "]", "\n", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", "=", "dataset", "\n", "vocab", "=", "None", "\n", "if", "transfer", ":", "\n", "        ", "opts", ".", "transfer", "=", "config", "[", "\"pretrained_lm\"", "]", "\n", "checkpoint", "=", "load_checkpoint", "(", "opts", ".", "transfer", ")", "\n", "config", "[", "\"vocab\"", "]", ".", "update", "(", "checkpoint", "[", "\"config\"", "]", "[", "\"vocab\"", "]", ")", "\n", "dict_pattern_rename", "(", "checkpoint", "[", "\"config\"", "]", "[", "\"model\"", "]", ",", "\n", "{", "\"rnn_\"", ":", "\"bottom_rnn_\"", "}", ")", "\n", "config", "[", "\"model\"", "]", ".", "update", "(", "checkpoint", "[", "\"config\"", "]", "[", "\"model\"", "]", ")", "\n", "vocab", "=", "checkpoint", "[", "\"vocab\"", "]", "\n", "\n", "####################################################################", "\n", "# Data Loading and Preprocessing", "\n", "####################################################################", "\n", "", "if", "config", "[", "\"preprocessor\"", "]", "==", "\"twitter\"", ":", "\n", "        ", "preprocessor", "=", "twitter_preprocessor", "(", ")", "\n", "", "else", ":", "preprocessor", "=", "None", "\n", "\n", "print", "(", "\"Building training dataset...\"", ")", "\n", "train_set", "=", "ClfDataset", "(", "X_train", ",", "y_train", ",", "\n", "vocab", "=", "vocab", ",", "preprocess", "=", "preprocessor", ",", "\n", "vocab_size", "=", "config", "[", "\"vocab\"", "]", "[", "\"size\"", "]", ",", "\n", "seq_len", "=", "config", "[", "\"data\"", "]", "[", "\"seq_len\"", "]", ")", "\n", "\n", "print", "(", "\"Building validation dataset...\"", ")", "\n", "val_set", "=", "ClfDataset", "(", "X_val", ",", "y_val", ",", "\n", "seq_len", "=", "train_set", ".", "seq_len", ",", "preprocess", "=", "preprocessor", ",", "\n", "vocab", "=", "train_set", ".", "vocab", ")", "\n", "\n", "src_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "train_set", ".", "data", "]", "\n", "val_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "val_set", ".", "data", "]", "\n", "\n", "# select sampler & dataloader", "\n", "train_sampler", "=", "BucketBatchSampler", "(", "src_lengths", ",", "config", "[", "\"batch_size\"", "]", ",", "True", ")", "\n", "val_sampler", "=", "SortedSampler", "(", "val_lengths", ")", "\n", "val_sampler_train", "=", "SortedSampler", "(", "src_lengths", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "opts", ".", "cores", ",", "collate_fn", "=", "ClfCollate", "(", ")", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "opts", ".", "cores", ",", "collate_fn", "=", "ClfCollate", "(", ")", ")", "\n", "val_loader_train_dataset", "=", "DataLoader", "(", "train_set", ",", "\n", "sampler", "=", "val_sampler_train", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "opts", ".", "cores", ",", "\n", "collate_fn", "=", "ClfCollate", "(", ")", ")", "\n", "####################################################################", "\n", "# Model", "\n", "####################################################################", "\n", "ntokens", "=", "len", "(", "train_set", ".", "vocab", ")", "\n", "model", "=", "NaiveClassifier", "(", "ntokens", ",", "len", "(", "set", "(", "train_set", ".", "labels", ")", ")", ",", "\n", "attention", "=", "config", "[", "\"model\"", "]", "[", "\"has_att\"", "]", ",", "\n", "**", "config", "[", "\"model\"", "]", ")", "\n", "model", ".", "to", "(", "opts", ".", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "config", "[", "\"gu\"", "]", ":", "\n", "\n", "        ", "embed_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "model", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "bottom_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "chain", "(", "model", ".", "bottom_rnn", ".", "parameters", "(", ")", ")", ")", "\n", "if", "config", "[", "\"model\"", "]", "[", "\"has_att\"", "]", ":", "\n", "            ", "top_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "chain", "(", "model", ".", "attention", ".", "parameters", "(", ")", ",", "\n", "model", ".", "classes", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "top_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "model", ".", "classes", ".", "parameters", "(", ")", ")", "\n", "\n", "", "embed_optimizer", "=", "Adam", "(", "embed_parameters", ")", "\n", "rnn_optimizer", "=", "Adam", "(", "bottom_parameters", ")", "\n", "top_optimizer", "=", "Adam", "(", "top_parameters", ")", "\n", "\n", "# Trainer: responsible for managing the training process", "\n", "trainer", "=", "SentClfNoAuxTrainer", "(", "model", ",", "train_loader", ",", "val_loader", ",", "\n", "criterion", ",", "\n", "[", "embed_optimizer", ",", "\n", "rnn_optimizer", ",", "\n", "top_optimizer", "]", ",", "\n", "config", ",", "opts", ".", "device", ",", "\n", "valid_loader_train_set", "=", "val_loader_train_dataset", ",", "\n", "unfreeze_embed", "=", "config", "[", "\"unfreeze_embed\"", "]", ",", "\n", "unfreeze_rnn", "=", "config", "[", "\"unfreeze_rnn\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "config", "[", "\"top_lr\"", "]", ")", "\n", "# Trainer: responsible for managing the training process", "\n", "trainer", "=", "SentClfNoAuxTrainer", "(", "model", ",", "train_loader", ",", "val_loader", ",", "\n", "criterion", ",", "[", "optimizer", "]", ",", "config", ",", "\n", "opts", ".", "device", ",", "valid_loader_train_set", "=", "\n", "val_loader_train_dataset", ")", "\n", "\n", "####################################################################", "\n", "# Experiment: logging and visualizing the training process", "\n", "####################################################################", "\n", "", "exp", "=", "Experiment", "(", "opts", ".", "name", ",", "config", ",", "src_dirs", "=", "opts", ".", "source", ",", "output_dir", "=", "EXP_DIR", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_loss\"", ",", "\"line\"", ",", "\"epoch loss class\"", ",", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_f1\"", ",", "\"line\"", ",", "\"epoch f1\"", ",", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "exp", ".", "add_metric", "(", "\"ep_acc\"", ",", "\"line\"", ",", "\"epoch accuracy\"", ",", "[", "\"TRAIN\"", ",", "\"VAL\"", "]", ")", "\n", "\n", "exp", ".", "add_value", "(", "\"epoch\"", ",", "title", "=", "\"epoch summary\"", ")", "\n", "exp", ".", "add_value", "(", "\"progress\"", ",", "title", "=", "\"training progress\"", ")", "\n", "\n", "####################################################################", "\n", "# Resume Training from a previous checkpoint", "\n", "####################################################################", "\n", "if", "transfer", ":", "\n", "        ", "print", "(", "\"Transferring Encoder weights ...\"", ")", "\n", "dict_pattern_rename", "(", "checkpoint", "[", "\"model\"", "]", ",", "\n", "{", "\"encoder\"", ":", "\"bottom_rnn\"", "}", ")", "\n", "load_state_dict_subset", "(", "model", ",", "checkpoint", "[", "\"model\"", "]", ")", "\n", "\n", "", "print", "(", "model", ")", "\n", "\n", "####################################################################", "\n", "# Training Loop", "\n", "####################################################################", "\n", "best_loss", "=", "None", "\n", "early_stopping", "=", "EarlyStopping", "(", "\"min\"", ",", "config", "[", "\"patience\"", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "config", "[", "\"epochs\"", "]", "+", "1", ")", ":", "\n", "        ", "train_loss", "=", "trainer", ".", "train_epoch", "(", ")", "\n", "val_loss", ",", "y", ",", "y_pred", "=", "trainer", ".", "eval_epoch", "(", "val_set", "=", "True", ")", "\n", "_", ",", "y_train", ",", "y_pred_train", "=", "trainer", ".", "eval_epoch", "(", "train_set", "=", "True", ")", "\n", "# Calculate accuracy and f1-macro on the evaluation set", "\n", "exp", ".", "update_metric", "(", "\"ep_loss\"", ",", "train_loss", ".", "item", "(", ")", ",", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_loss\"", ",", "val_loss", ".", "item", "(", ")", ",", "\"VAL\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_f1\"", ",", "f1_macro", "(", "y_train", ",", "y_pred_train", ")", ",", "\n", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_f1\"", ",", "f1_macro", "(", "y", ",", "y_pred", ")", ",", "\"VAL\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_acc\"", ",", "acc", "(", "y_train", ",", "y_pred_train", ")", ",", "\"TRAIN\"", ")", "\n", "exp", ".", "update_metric", "(", "\"ep_acc\"", ",", "acc", "(", "y", ",", "y_pred", ")", ",", "\"VAL\"", ")", "\n", "\n", "print", "(", ")", "\n", "epoch_log", "=", "exp", ".", "log_metrics", "(", "[", "\"ep_loss\"", ",", "\"ep_f1\"", ",", "\"ep_acc\"", "]", ")", "\n", "print", "(", "epoch_log", ")", "\n", "exp", ".", "update_value", "(", "\"epoch\"", ",", "epoch_log", ")", "\n", "\n", "###############################################################", "\n", "# Unfreezing the model after X epochs", "\n", "###############################################################", "\n", "# Save the model if the val loss is the best we've seen so far.", "\n", "if", "not", "best_loss", "or", "val_loss", "<", "best_loss", ":", "\n", "            ", "best_loss", "=", "val_loss", "\n", "trainer", ".", "best_acc", "=", "acc", "(", "y", ",", "y_pred", ")", "\n", "trainer", ".", "best_f1", "=", "f1_macro", "(", "y", ",", "y_pred", ")", "\n", "trainer", ".", "checkpoint", "(", "name", "=", "opts", ".", "name", ")", "\n", "\n", "", "if", "early_stopping", ".", "stop", "(", "val_loss", ")", ":", "\n", "            ", "print", "(", "\"Early Stopping (according to cls loss)....\"", ")", "\n", "break", "\n", "\n", "", "print", "(", "\"\\n\"", "*", "2", ")", "\n", "\n", "", "return", "best_loss", ",", "trainer", ".", "best_acc", ",", "trainer", ".", "best_f1", "\n", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.__init__": [[9, 22], ["visdom.Visdom", "plotting.Visualizer._viz.close"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "\"main\"", ",", "\n", "server", "=", "\"http://localhost\"", ",", "\n", "port", "=", "8097", ",", "\n", "base_url", "=", "\"/\"", ",", "\n", "http_proxy_host", "=", "None", ",", "\n", "http_proxy_port", "=", "None", ")", ":", "\n", "        ", "self", ".", "_viz", "=", "Visdom", "(", "env", "=", "env", ",", "\n", "server", "=", "server", ",", "\n", "port", "=", "port", ",", "\n", "http_proxy_host", "=", "http_proxy_host", ",", "\n", "http_proxy_port", "=", "http_proxy_port", ",", "\n", "use_incoming_socket", "=", "False", ")", "\n", "self", ".", "_viz", ".", "close", "(", "env", "=", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_line": [[23, 35], ["plotting.Visualizer._viz.line", "dict", "dict", "numpy.column_stack", "numpy.column_stack"], "methods", ["None"], ["", "def", "plot_line", "(", "self", ",", "values", ",", "steps", ",", "name", ",", "legend", "=", "None", ")", ":", "\n", "        ", "if", "legend", "is", "None", ":", "\n", "            ", "opts", "=", "dict", "(", "title", "=", "name", ")", "\n", "", "else", ":", "\n", "            ", "opts", "=", "dict", "(", "title", "=", "name", ",", "legend", "=", "legend", ")", "\n", "\n", "", "self", ".", "_viz", ".", "line", "(", "\n", "X", "=", "numpy", ".", "column_stack", "(", "steps", ")", ",", "\n", "Y", "=", "numpy", ".", "column_stack", "(", "values", ")", ",", "\n", "win", "=", "name", ",", "\n", "update", "=", "'append'", ",", "\n", "opts", "=", "opts", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_text": [[37, 47], ["max", "plotting.Visualizer._viz.text", "max", "len", "text.split", "dict", "len", "text.split", "min", "min"], "methods", ["None"], ["", "def", "plot_text", "(", "self", ",", "text", ",", "title", ",", "pre", "=", "True", ")", ":", "\n", "        ", "_width", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "text", ".", "split", "(", "\"\\n\"", ")", "]", ")", "*", "10", "\n", "_heigth", "=", "len", "(", "text", ".", "split", "(", "\"\\n\"", ")", ")", "*", "20", "\n", "_heigth", "=", "max", "(", "_heigth", ",", "120", ")", "\n", "if", "pre", ":", "\n", "            ", "text", "=", "\"<pre>{}</pre>\"", ".", "format", "(", "text", ")", "\n", "\n", "", "self", ".", "_viz", ".", "text", "(", "text", ",", "win", "=", "title", ",", "opts", "=", "dict", "(", "title", "=", "title", ",", "\n", "width", "=", "min", "(", "_width", ",", "400", ")", ",", "\n", "height", "=", "min", "(", "_heigth", ",", "400", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_bar": [[48, 51], ["plotting.Visualizer._viz.bar", "dict"], "methods", ["None"], ["", "def", "plot_bar", "(", "self", ",", "data", ",", "labels", ",", "title", ")", ":", "\n", "        ", "self", ".", "_viz", ".", "bar", "(", "win", "=", "title", ",", "X", "=", "data", ",", "\n", "opts", "=", "dict", "(", "legend", "=", "labels", ",", "stacked", "=", "False", ",", "title", "=", "title", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_scatter": [[52, 63], ["numpy.concatenate", "numpy.concatenate", "plotting.Visualizer._viz.scatter", "numpy.full", "dict", "len", "enumerate"], "methods", ["None"], ["", "def", "plot_scatter", "(", "self", ",", "data", ",", "labels", ",", "title", ")", ":", "\n", "        ", "X", "=", "numpy", ".", "concatenate", "(", "data", ",", "axis", "=", "0", ")", "\n", "Y", "=", "numpy", ".", "concatenate", "(", "[", "numpy", ".", "full", "(", "len", "(", "d", ")", ",", "i", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ",", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "_viz", ".", "scatter", "(", "win", "=", "title", ",", "X", "=", "X", ",", "Y", "=", "Y", ",", "\n", "opts", "=", "dict", "(", "legend", "=", "labels", ",", "title", "=", "title", ",", "\n", "markersize", "=", "5", ",", "\n", "webgl", "=", "True", ",", "\n", "width", "=", "400", ",", "\n", "height", "=", "400", ",", "\n", "markeropacity", "=", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_heatmap": [[64, 81], ["plotting.Visualizer._viz.heatmap", "dict"], "methods", ["None"], ["", "def", "plot_heatmap", "(", "self", ",", "data", ",", "labels", ",", "title", ")", ":", "\n", "        ", "self", ".", "_viz", ".", "heatmap", "(", "win", "=", "title", ",", "\n", "X", "=", "data", ",", "\n", "opts", "=", "dict", "(", "\n", "title", "=", "title", ",", "\n", "columnnames", "=", "labels", "[", "1", "]", ",", "\n", "rownames", "=", "labels", "[", "0", "]", ",", "\n", "width", "=", "700", ",", "\n", "height", "=", "700", ",", "\n", "layoutopts", "=", "{", "'plotly'", ":", "{", "\n", "'xaxis'", ":", "{", "\n", "'side'", ":", "'top'", ",", "\n", "'tickangle'", ":", "-", "60", ",", "\n", "# 'autorange': \"reversed\"", "\n", "}", ",", "\n", "'yaxis'", ":", "{", "\n", "'autorange'", ":", "\"reversed\"", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.__init__": [[21, 88], ["collections.defaultdict", "collections.defaultdict", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "time.time", "logger.helpers.files_to_dict", "logger.plotting.Visualizer", "experiment.Experiment.add_value", "experiment.Experiment.update_value", "logger.helpers.dict_to_html"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.helpers.files_to_dict", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.helpers.dict_to_html"], ["def", "__init__", "(", "self", ",", "name", ",", "config", ",", "desc", "=", "None", ",", "\n", "output_dir", "=", "None", ",", "\n", "src_dirs", "=", "None", ",", "\n", "use_db", "=", "False", ",", "\n", "db_host", "=", "\"localhost\"", ",", "\n", "db_port", "=", "27017", ",", "\n", "db_name", "=", "\"experiments\"", ")", ":", "\n", "        ", "\"\"\"\n        Metrics = history of values\n        Values = state of values\n        Args:\n            name:\n            config:\n            desc:\n            output_dir:\n            src_dirs:\n            use_db:\n            db_host:\n            db_port:\n            db_name:\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "desc", "=", "desc", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "metrics", "=", "defaultdict", "(", "Metric", ")", "\n", "self", ".", "values", "=", "defaultdict", "(", "Value", ")", "\n", "\n", "self", ".", "use_db", "=", "use_db", "\n", "self", ".", "db_host", "=", "db_host", "\n", "self", ".", "db_port", "=", "db_port", "\n", "self", ".", "db_name", "=", "db_name", "\n", "\n", "# the src files (dirs) to backup", "\n", "if", "src_dirs", "is", "not", "None", ":", "\n", "            ", "self", ".", "src", "=", "files_to_dict", "(", "src_dirs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "src", "=", "None", "\n", "\n", "# the currently running script", "\n", "", "self", ".", "src_main", "=", "sys", ".", "argv", "[", "0", "]", "\n", "\n", "self", ".", "timestamp_start", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "timestamp_update", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "last_update", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "output_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "output_dir", "=", "output_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_dir", "=", "\"\"", "\n", "\n", "", "server", "=", "VIS", "[", "\"server\"", "]", "\n", "port", "=", "VIS", "[", "\"port\"", "]", "\n", "base_url", "=", "VIS", "[", "\"base_url\"", "]", "\n", "http_proxy_host", "=", "VIS", "[", "\"http_proxy_host\"", "]", "\n", "http_proxy_port", "=", "VIS", "[", "\"http_proxy_port\"", "]", "\n", "self", ".", "enabled", "=", "VIS", "[", "\"enabled\"", "]", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "viz", "=", "Visualizer", "(", "env", "=", "name", ",", "\n", "server", "=", "server", ",", "\n", "port", "=", "port", ",", "\n", "base_url", "=", "base_url", ",", "\n", "http_proxy_host", "=", "http_proxy_host", ",", "\n", "http_proxy_port", "=", "http_proxy_port", ")", "\n", "\n", "self", ".", "add_value", "(", "\"config\"", ",", "\"text\"", ")", "\n", "self", ".", "update_value", "(", "\"config\"", ",", "dict_to_html", "(", "self", ".", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_metric": [[92, 106], ["experiment.Metric"], "methods", ["None"], ["", "", "def", "add_metric", "(", "self", ",", "key", ",", "vis_type", ",", "title", "=", "None", ",", "tags", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a new metric to the experiment.\n        Metrics hold a history of all the inserted values.\n        The last value(s) will be used for presentation (plotting and console)\n        Args:\n            key (str): the name of the value. This will be used for getting\n                a handle of the metric\n            vis_type (str): the visualization type\n            tags (list): list of tags e.g. [\"train_set\", \"val_set\"]\n            title (str): used for presentation purposes (figure, console...)\n        Returns:\n        \"\"\"", "\n", "self", ".", "metrics", "[", "key", "]", "=", "Metric", "(", "key", ",", "vis_type", ",", "tags", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_metric": [[107, 115], ["None"], "methods", ["None"], ["", "def", "get_metric", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        Returns a handle to the metric with the given key\n        Args:\n            key:\n        Returns:\n        \"\"\"", "\n", "return", "self", ".", "metrics", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_metric": [[116, 136], ["experiment.Experiment.get_metric().add", "experiment.Experiment.get_metric", "experiment.Experiment.__plot_metric", "print"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Metric.add", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.__plot_metric"], ["", "def", "update_metric", "(", "self", ",", "key", ",", "value", ",", "tag", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add new value to the given metric\n        Args:\n            key:\n            value:\n            tag:\n        Returns:\n        \"\"\"", "\n", "self", ".", "get_metric", "(", "key", ")", ".", "add", "(", "value", ",", "tag", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "self", ".", "enabled", ":", "\n", "                ", "self", ".", "__plot_metric", "(", "key", ")", "\n", "\n", "", "", "except", "IndexError", "as", "e", ":", "\n", "            ", "pass", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f\"An error occurred while trying to plot metric:{key}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.__plot_metric": [[137, 157], ["experiment.Experiment.get_metric", "experiment.Experiment.viz.plot_line", "len", "experiment.Experiment.viz.plot_line", "len"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_metric", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_line", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_line"], ["", "", "def", "__plot_metric", "(", "self", ",", "key", ")", ":", "\n", "\n", "        ", "metric", "=", "self", ".", "get_metric", "(", "key", ")", "\n", "\n", "if", "metric", ".", "vis_type", "==", "\"line\"", ":", "\n", "\n", "            ", "if", "metric", ".", "tags", "is", "not", "None", ":", "\n", "                ", "x", "=", "[", "[", "len", "(", "metric", ".", "values", "[", "tag", "]", ")", "]", "for", "tag", "in", "metric", ".", "tags", "]", "\n", "y", "=", "[", "[", "metric", ".", "values", "[", "tag", "]", "[", "-", "1", "]", "]", "for", "tag", "in", "metric", ".", "tags", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "[", "len", "(", "metric", ".", "values", ")", "]", "\n", "y", "=", "[", "metric", ".", "values", "[", "-", "1", "]", "]", "\n", "", "self", ".", "viz", ".", "plot_line", "(", "y", ",", "x", ",", "metric", ".", "title", ",", "metric", ".", "tags", ")", "\n", "\n", "", "elif", "metric", ".", "vis_type", "==", "\"scatter\"", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "metric", ".", "vis_type", "==", "\"bar\"", ":", "\n", "            ", "self", ".", "viz", ".", "plot_line", "(", "y", ",", "x", ",", "metric", ".", "title", ",", "metric", ".", "tags", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.add_value": [[161, 163], ["experiment.Value"], "methods", ["None"], ["", "", "def", "add_value", "(", "self", ",", "key", ",", "vis_type", "=", "\"text\"", ",", "title", "=", "None", ",", "tags", "=", "None", ",", "init", "=", "None", ")", ":", "\n", "        ", "self", ".", "values", "[", "key", "]", "=", "Value", "(", "key", ",", "vis_type", ",", "tags", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_value": [[164, 166], ["None"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "values", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.update_value": [[167, 187], ["experiment.Experiment.get_value().update", "experiment.Experiment.get_value", "experiment.Experiment.__plot_value", "print"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.__plot_value"], ["", "def", "update_value", "(", "self", ",", "key", ",", "value", ",", "tag", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Update the state of the given value\n        Args:\n            key:\n            value:\n            tag:\n        Returns:\n        \"\"\"", "\n", "self", ".", "get_value", "(", "key", ")", ".", "update", "(", "value", ",", "tag", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "self", ".", "enabled", ":", "\n", "                ", "self", ".", "__plot_value", "(", "key", ")", "\n", "\n", "", "", "except", "IndexError", "as", "e", ":", "\n", "            ", "pass", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f\"An error occurred while trying to plot value:{key}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.__plot_value": [[188, 216], ["experiment.Experiment.get_value", "experiment.Experiment.viz.plot_text", "experiment.Experiment.viz.plot_scatter", "experiment.Experiment.viz.plot_heatmap", "experiment.Experiment.viz.plot_bar"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_value", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_text", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_scatter", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_heatmap", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.plotting.Visualizer.plot_bar"], ["", "", "def", "__plot_value", "(", "self", ",", "key", ")", ":", "\n", "        ", "value", "=", "self", ".", "get_value", "(", "key", ")", "\n", "\n", "if", "value", ".", "vis_type", "==", "\"text\"", ":", "\n", "            ", "self", ".", "viz", ".", "plot_text", "(", "value", ".", "value", ",", "value", ".", "title", ")", "\n", "", "elif", "value", ".", "vis_type", "==", "\"scatter\"", ":", "\n", "            ", "if", "value", ".", "tags", "is", "not", "None", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "data", "=", "value", ".", "value", "\n", "\n", "", "self", ".", "viz", ".", "plot_scatter", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "value", ".", "title", ")", "\n", "", "elif", "value", ".", "vis_type", "==", "\"heatmap\"", ":", "\n", "            ", "if", "value", ".", "tags", "is", "not", "None", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "data", "=", "value", ".", "value", "\n", "\n", "", "self", ".", "viz", ".", "plot_heatmap", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "value", ".", "title", ")", "\n", "", "elif", "value", ".", "vis_type", "==", "\"bar\"", ":", "\n", "            ", "if", "value", ".", "tags", "is", "not", "None", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "data", "=", "value", ".", "value", "\n", "\n", "", "self", ".", "viz", ".", "plot_bar", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "value", ".", "title", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment._state_dict": [[220, 225], ["experiment.Experiment.__dict__.items"], "methods", ["None"], ["", "", "def", "_state_dict", "(", "self", ")", ":", "\n", "        ", "omit", "=", "[", "\"db\"", ",", "\"db_client\"", ",", "\"db_collection\"", "]", "\n", "state", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "k", "not", "in", "omit", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment._serialize": [[226, 231], ["json.dumps", "experiment.Experiment._state_dict", "getattr", "str"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment._state_dict"], ["", "def", "_serialize", "(", "self", ")", ":", "\n", "\n", "        ", "data", "=", "json", ".", "dumps", "(", "self", ".", "_state_dict", "(", ")", ",", "\n", "default", "=", "lambda", "o", ":", "getattr", "(", "o", ",", "'__dict__'", ",", "str", "(", "o", ")", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.to_json": [[232, 238], ["datetime.datetime.datetime.now", "os.path.join", "open", "f.write", "experiment.Experiment.get_timestamp", "experiment.Experiment._serialize"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_timestamp", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment._serialize"], ["", "def", "to_json", "(", "self", ")", ":", "\n", "        ", "self", ".", "timestamp_update", "=", "datetime", ".", "now", "(", ")", "\n", "name", "=", "self", ".", "name", "+", "\"_{}.json\"", ".", "format", "(", "self", ".", "get_timestamp", "(", ")", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "name", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "_serialize", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_timestamp": [[239, 241], ["experiment.Experiment.timestamp_start.strftime"], "methods", ["None"], ["", "", "def", "get_timestamp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "timestamp_start", ".", "strftime", "(", "\"%y-%m-%d_%H:%M:%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.to_pickle": [[242, 248], ["datetime.datetime.datetime.now", "os.path.join", "open", "pickle.dump", "experiment.Experiment.get_timestamp", "experiment.Experiment._state_dict"], "methods", ["home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.get_timestamp", "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment._state_dict"], ["", "def", "to_pickle", "(", "self", ")", ":", "\n", "        ", "self", ".", "timestamp_update", "=", "datetime", ".", "now", "(", ")", "\n", "name", "=", "self", ".", "name", "+", "\"_{}.pickle\"", ".", "format", "(", "self", ".", "get_timestamp", "(", ")", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "name", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "_state_dict", "(", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Experiment.log_metrics": [[249, 264], ["tabulate.tabulate.tabulate", "metric.title.upper", "metric.title.upper"], "methods", ["None"], ["", "", "def", "log_metrics", "(", "self", ",", "keys", ")", ":", "\n", "\n", "        ", "_metrics", "=", "[", "self", ".", "metrics", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "_tags", "=", "_metrics", "[", "0", "]", ".", "tags", "\n", "if", "_tags", "is", "not", "None", ":", "\n", "            ", "values", "=", "[", "[", "tag", "]", "+", "[", "metric", ".", "values", "[", "tag", "]", "[", "-", "1", "]", "for", "metric", "in", "_metrics", "]", "\n", "for", "tag", "in", "_tags", "]", "\n", "headers", "=", "[", "\"TAG\"", "]", "+", "[", "metric", ".", "title", ".", "upper", "(", ")", "for", "metric", "in", "_metrics", "]", "\n", "", "else", ":", "\n", "            ", "values", "=", "[", "[", "metric", ".", "values", "[", "-", "1", "]", "for", "metric", "in", "_metrics", "]", "]", "\n", "headers", "=", "[", "metric", ".", "title", ".", "upper", "(", ")", "for", "metric", "in", "_metrics", "]", "\n", "\n", "", "log_output", "=", "tabulate", "(", "values", ",", "headers", ",", "floatfmt", "=", "\".2f\"", ")", "\n", "\n", "return", "log_output", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Metric.__init__": [[274, 296], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key", ",", "vis_type", ",", "tags", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            key (str): the name of the metric\n            vis_type (str): the visualization type\n            tags (list): list of tags\n            title (str): used for presentation purposes (figure, console...)\n        \"\"\"", "\n", "self", ".", "key", "=", "key", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "vis_type", "=", "vis_type", "\n", "self", ".", "tags", "=", "tags", "\n", "\n", "assert", "vis_type", "in", "[", "\"line\"", "]", "\n", "\n", "if", "tags", "is", "not", "None", ":", "\n", "            ", "self", ".", "values", "=", "{", "tag", ":", "[", "]", "for", "tag", "in", "tags", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "values", "=", "[", "]", "\n", "\n", "", "if", "title", "is", "None", ":", "\n", "            ", "self", ".", "title", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Metric.add": [[297, 309], ["experiment.Metric.values[].append", "experiment.Metric.values.append"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "value", ",", "tag", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a value to the list of values of this metric\n        Args:\n            value (int, float):\n            tag (str):\n        Returns:\n        \"\"\"", "\n", "if", "self", ".", "tags", "is", "not", "None", ":", "\n", "            ", "self", ".", "values", "[", "tag", "]", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "values", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.__init__": [[315, 337], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key", ",", "vis_type", ",", "tags", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            key (str): the name of the value\n            vis_type (str): the visualization type\n            tags (list): list of tags\n            title (str): used for presentation purposes (figure, console...)\n        \"\"\"", "\n", "self", ".", "key", "=", "key", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "vis_type", "=", "vis_type", "\n", "self", ".", "tags", "=", "tags", "\n", "\n", "assert", "vis_type", "in", "[", "\"text\"", ",", "\"scatter\"", ",", "\"bar\"", ",", "\"heatmap\"", "]", "\n", "\n", "if", "tags", "is", "not", "None", ":", "\n", "            ", "self", ".", "value", "=", "{", "tag", ":", "[", "]", "for", "tag", "in", "tags", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "value", "=", "[", "]", "\n", "\n", "", "if", "title", "is", "None", ":", "\n", "            ", "self", ".", "title", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.experiment.Value.update": [[338, 350], ["None"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "value", ",", "tag", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Update the value\n        Args:\n            value (int, float):\n            tag (str):\n        Returns:\n        \"\"\"", "\n", "if", "self", ".", "tags", "is", "not", "None", ":", "\n", "            ", "self", ".", "value", "[", "tag", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", ".", "value", "=", "value", "", "", "", "", ""]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.helpers.files_to_dict": [[9, 21], ["collections.defaultdict", "glob2.glob", "os.path.join", "os.path.basename", "pathlib.Path().read_text", "os.path.split", "filename.replace.replace", "pathlib.Path"], "function", ["None"], ["batch_size", "=", "lengths", ".", "numel", "(", ")", "\n", "max_len", "=", "max_len", "or", "lengths", ".", "max", "(", ")", "\n", "return", "(", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "device", "=", "lengths", ".", "device", ")", "\n", ".", "type_as", "(", "lengths", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", ".", "lt", "(", "lengths", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "\n", "\n", "", "def", "masked_normalization", "(", "logits", ",", "mask", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# apply the mask - zero out masked timesteps", "\n", "masked_scores", "=", "scores", "*", "mask", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.alexandra-chron_siatl.logger.helpers.dict_to_html": [[23, 32], ["json.dumps", "msg.replace.replace", "msg.replace.replace", "line[].rstrip", "msg.replace.split", "len", "line.strip"], "function", ["None"], ["# re-normalize the masked scores", "\n", "normed_scores", "=", "masked_scores", ".", "div", "(", "masked_scores", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "return", "normed_scores", "\n", "\n", "\n", "", "def", "masked_normalization_inf", "(", "logits", ",", "mask", ")", ":", "\n", "    ", "logits", ".", "masked_fill_", "(", "1", "-", "mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n"]]}