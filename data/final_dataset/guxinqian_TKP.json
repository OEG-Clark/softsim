{"home.repos.pwc.inspect_result.guxinqian_TKP.None.main_ilids.main": [[71, 221], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "print", "print", "utils.init_dataset", "transforms.Compose", "transforms.TemporalRandomCrop", "transforms.Compose", "torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.init_model", "models.init_model", "models.init_model", "print", "print", "torch.CrossEntropyLoss", "utils.losses.FeatureBasedTKP", "utils.losses.SimilarityBasedTKP", "utils.losses.HeterogeneousTripletLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "time.time", "print", "range", "print", "round", "str", "str", "print", "utils.utils.Logger", "utils.utils.Logger", "print", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "utils.video_loader.VideoDataset", "utils.video_loader.ImageDataset", "utils.video_loader.VideoDataset", "print", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.load_state_dict", "print", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.load_state_dict", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "print", "lr_scheduler.MultiStepLR.step", "time.time", "main_ilids.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "round", "datetime.timedelta", "datetime.timedelta", "os.join", "os.join", "transforms.Scale", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Scale", "transforms.ToTensor", "transforms.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "utils.samplers.RandomIdentitySampler", "torch.no_grad", "torch.no_grad", "main_ilids.test", "print", "time.time", "sum", "sum", "nn.DataParallel().cuda.parameters", "nn.DataParallel().cuda.parameters", "nn.DataParallel().cuda.parameters", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "time.time", "torch.no_grad", "torch.no_grad", "main_ilids.test", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "nn.DataParallel().cuda.module.state_dict", "nn.DataParallel().cuda.module.state_dict", "nn.DataParallel().cuda.module.state_dict", "utils.utils.save_checkpoint", "os.join", "p.numel", "p.numel", "nn.DataParallel().cuda.parameters", "nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.init_dataset", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.test", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.test", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_devices", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_train.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_test.txt'", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "print", "(", "\"Currently using GPU {}\"", ".", "format", "(", "args", ".", "gpu_devices", ")", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently using CPU (GPU is highly recommended)\"", ")", "\n", "\n", "", "print", "(", "\"Initializing dataset {}\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "dataset", "=", "data_manager", ".", "init_dataset", "(", "name", "=", "args", ".", "dataset", ",", "root", "=", "args", ".", "root", ",", "split_id", "=", "args", ".", "split_idx", ")", "\n", "\n", "# Data augmentation", "\n", "spatial_transform_train", "=", "ST", ".", "Compose", "(", "[", "\n", "ST", ".", "Scale", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "ST", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "ST", ".", "ToTensor", "(", ")", ",", "\n", "ST", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "temporal_transform_train", "=", "TT", ".", "TemporalRandomCrop", "(", "size", "=", "args", ".", "seq_len", ",", "stride", "=", "args", ".", "sample_stride", ")", "\n", "\n", "spatial_transform_test", "=", "ST", ".", "Compose", "(", "[", "\n", "ST", ".", "Scale", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "ST", ".", "ToTensor", "(", ")", ",", "\n", "ST", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "temporal_transform_test", "=", "None", "\n", "\n", "transform_test_img", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "pin_memory", "=", "True", "if", "use_gpu", "else", "False", "\n", "\n", "trainloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "train", ",", "spatial_transform", "=", "spatial_transform_train", ",", "temporal_transform", "=", "temporal_transform_train", ")", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset", ".", "train", ",", "num_instances", "=", "args", ".", "num_instances", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "queryloader", "=", "DataLoader", "(", "\n", "ImageDataset", "(", "dataset", ".", "query", ",", "transform", "=", "transform_test_img", ")", ",", "\n", "batch_size", "=", "args", ".", "img_test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "galleryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "gallery", ",", "spatial_transform", "=", "spatial_transform_test", ",", "temporal_transform", "=", "temporal_transform_test", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "print", "(", "\"Initializing model: {} and {}\"", ".", "format", "(", "args", ".", "vid_arch", ",", "args", ".", "img_arch", ")", ")", "\n", "vid_model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "vid_arch", ")", "\n", "img_model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "img_arch", ")", "\n", "classifier", "=", "models", ".", "init_model", "(", "name", "=", "'classifier'", ",", "num_classes", "=", "dataset", ".", "num_train_pids", ")", "\n", "print", "(", "\"Video model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "vid_model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "print", "(", "\"Image model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "img_model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion_tkp_f", "=", "FeatureBasedTKP", "(", "bp_to_vid", "=", "args", ".", "bp_to_vid", ")", "\n", "criterion_tkp_d", "=", "SimilarityBasedTKP", "(", "distance", "=", "'euclidean'", ",", "bp_to_vid", "=", "args", ".", "bp_to_vid", ")", "\n", "criterion_i2v", "=", "HeterogeneousTripletLoss", "(", "margin", "=", "0.3", ",", "distance", "=", "'euclidean'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "vid_model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "img_model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", "\n", "]", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "stepsize", ",", "gamma", "=", "args", ".", "gamma", ")", "\n", "start_epoch", "=", "args", ".", "start_epoch", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ")", "\n", "vid_model", ".", "load_state_dict", "(", "checkpoint", "[", "'vid_model_state_dict'", "]", ")", "\n", "img_model", ".", "load_state_dict", "(", "checkpoint", "[", "'img_model_state_dict'", "]", ")", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "vid_model", ".", "load_state_dict", "(", "checkpoint", "[", "'vid_model_state_dict'", "]", ")", "\n", "img_model", ".", "load_state_dict", "(", "checkpoint", "[", "'img_model_state_dict'", "]", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier_state_dict'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "", "if", "use_gpu", ":", "\n", "        ", "vid_model", "=", "nn", ".", "DataParallel", "(", "vid_model", ")", ".", "cuda", "(", ")", "\n", "img_model", "=", "nn", ".", "DataParallel", "(", "img_model", ")", ".", "cuda", "(", ")", "\n", "classifier", "=", "nn", ".", "DataParallel", "(", "classifier", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "\"Evaluate only\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "use_gpu", ")", "\n", "", "return", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_time", "=", "0", "\n", "best_rank1", "=", "-", "np", ".", "inf", "\n", "best_epoch", "=", "0", "\n", "print", "(", "\"==> Start training\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epoch", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "start_train_time", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "epoch", ",", "vid_model", ",", "img_model", ",", "classifier", ",", "criterion", ",", "criterion_tkp_f", ",", "criterion_tkp_d", ",", "criterion_i2v", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "train_time", "+=", "round", "(", "time", ".", "time", "(", ")", "-", "start_train_time", ")", "\n", "\n", "\n", "if", "(", "epoch", "+", "1", ")", ">=", "args", ".", "start_eval", "and", "args", ".", "eval_step", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "args", ".", "max_epoch", ":", "\n", "            ", "print", "(", "\"==> Test\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "rank1", "=", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "use_gpu", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "is_best", "=", "rank1", ">", "best_rank1", "\n", "if", "is_best", ":", "\n", "                ", "best_rank1", "=", "rank1", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "\n", "vid_model_state_dict", "=", "vid_model", ".", "module", ".", "state_dict", "(", ")", "\n", "img_model_state_dict", "=", "img_model", ".", "module", ".", "state_dict", "(", ")", "\n", "classifier_state_dict", "=", "classifier", ".", "module", ".", "state_dict", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'vid_model_state_dict'", ":", "vid_model_state_dict", ",", "\n", "'img_model_state_dict'", ":", "img_model_state_dict", ",", "\n", "'classifier_state_dict'", ":", "classifier_state_dict", ",", "\n", "'rank1'", ":", "rank1", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "False", ",", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'best_model.pth.tar'", ")", ")", "\n", "\n", "", "", "", "print", "(", "\"==> Best Rank-1 {:.1%}, achieved at epoch {}\"", ".", "format", "(", "best_rank1", ",", "best_epoch", ")", ")", "\n", "\n", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "train_time", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "train_time", ")", ")", "\n", "print", "(", "\"Finished. Total elapsed time (h:m:s): {}. Training time (h:m:s): {}.\"", ".", "format", "(", "elapsed", ",", "train_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.main_ilids.train": [[222, 319], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "vid_model.train", "img_model.train", "classifier.train", "time.time", "enumerate", "print", "vids.size", "pids.unsqueeze().repeat().view", "utils.utils.AverageMeter.update", "optimizer.zero_grad", "vid_model", "classifier", "vids.permute().contiguous().view", "img_model", "classifier", "criterion", "criterion", "criterion_tkp_f", "criterion_tkp_d", "criterion_i2v", "criterion_i2v", "criterion_i2v", "criterion_i2v", "loss.backward", "optimizer.step", "torch.max", "torch.max", "utils.utils.AverageMeter.update", "torch.max", "torch.max", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "time.time", "criterion.item", "criterion.item", "criterion_tkp_f.item", "criterion_tkp_d.item", "criterion_i2v.item", "criterion_i2v.item", "criterion_i2v.item", "criterion_i2v.item", "pids.unsqueeze().repeat", "vids.cuda", "pids.cuda", "pids.unsqueeze().repeat().view.cuda", "time.time", "vids.permute().contiguous", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "time.time", "pids.unsqueeze", "vids.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ",", "vid_model", ",", "img_model", ",", "classifier", ",", "criterion", ",", "criterion_tkp_f", ",", "criterion_tkp_d", ",", "criterion_i2v", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", ":", "\n", "    ", "batch_vid_loss", "=", "AverageMeter", "(", ")", "\n", "batch_img_loss", "=", "AverageMeter", "(", ")", "\n", "batch_TKP_F_loss", "=", "AverageMeter", "(", ")", "\n", "batch_TKP_D_loss", "=", "AverageMeter", "(", ")", "\n", "batch_i2v_loss", "=", "AverageMeter", "(", ")", "\n", "batch_v2i_loss", "=", "AverageMeter", "(", ")", "\n", "batch_i2i_loss", "=", "AverageMeter", "(", ")", "\n", "batch_v2v_loss", "=", "AverageMeter", "(", ")", "\n", "batch_vid_corrects", "=", "AverageMeter", "(", ")", "\n", "batch_img_corrects", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "vid_model", ".", "train", "(", ")", "\n", "img_model", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "if", "(", "pids", "-", "pids", "[", "0", "]", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "vids", ".", "size", "(", ")", "\n", "img_pids", "=", "pids", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "t", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "            ", "vids", ",", "pids", ",", "img_pids", "=", "vids", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", ",", "img_pids", ".", "cuda", "(", ")", "\n", "\n", "# measure data loading time", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward", "\n", "vid_features", ",", "frame_features", "=", "vid_model", "(", "vids", ")", "\n", "vid_outputs", "=", "classifier", "(", "vid_features", ")", "\n", "\n", "imgs", "=", "vids", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "t", ",", "c", ",", "h", ",", "w", ")", "\n", "img_features", "=", "img_model", "(", "imgs", ")", "\n", "img_outputs", "=", "classifier", "(", "img_features", ")", "\n", "\n", "# compute loss", "\n", "vid_loss", "=", "criterion", "(", "vid_outputs", ",", "pids", ")", "\n", "img_loss", "=", "criterion", "(", "img_outputs", ",", "img_pids", ")", "\n", "TKP_F_loss", "=", "criterion_tkp_f", "(", "img_features", ",", "frame_features", ")", "\n", "TKP_D_loss", "=", "criterion_tkp_d", "(", "img_features", ",", "frame_features", ")", "\n", "i2v_loss", "=", "criterion_i2v", "(", "img_features", ",", "vid_features", ",", "img_pids", ",", "pids", ")", "\n", "v2i_loss", "=", "criterion_i2v", "(", "vid_features", ",", "img_features", ",", "pids", ",", "img_pids", ")", "\n", "i2i_loss", "=", "criterion_i2v", "(", "img_features", ",", "img_features", ",", "img_pids", ",", "img_pids", ")", "\n", "v2v_loss", "=", "criterion_i2v", "(", "vid_features", ",", "vid_features", ",", "pids", ",", "pids", ")", "\n", "loss", "=", "vid_loss", "+", "img_loss", "+", "i2v_loss", "+", "i2i_loss", "+", "v2v_loss", "+", "v2i_loss", "+", "TKP_F_loss", "+", "TKP_D_loss", "\n", "\n", "# backward + optimize", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# statistics", "\n", "_", ",", "vid_preds", "=", "torch", ".", "max", "(", "vid_outputs", ".", "data", ",", "1", ")", "\n", "batch_vid_corrects", ".", "update", "(", "torch", ".", "sum", "(", "vid_preds", "==", "pids", ".", "data", ")", ".", "float", "(", ")", "/", "b", ",", "b", ")", "\n", "\n", "_", ",", "img_preds", "=", "torch", ".", "max", "(", "img_outputs", ".", "data", ",", "1", ")", "\n", "batch_img_corrects", ".", "update", "(", "torch", ".", "sum", "(", "img_preds", "==", "img_pids", ".", "data", ")", ".", "float", "(", ")", "/", "(", "b", "*", "t", ")", ",", "b", "*", "t", ")", "\n", "\n", "batch_vid_loss", ".", "update", "(", "vid_loss", ".", "item", "(", ")", ",", "b", ")", "\n", "batch_img_loss", ".", "update", "(", "img_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_TKP_F_loss", ".", "update", "(", "TKP_F_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_TKP_D_loss", ".", "update", "(", "TKP_D_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_i2v_loss", ".", "update", "(", "i2v_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_i2i_loss", ".", "update", "(", "i2i_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_v2v_loss", ".", "update", "(", "v2v_loss", ".", "item", "(", ")", ",", "b", ")", "\n", "batch_v2i_loss", ".", "update", "(", "v2i_loss", ".", "item", "(", ")", ",", "b", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "print", "(", "'Epoch{0} '", "\n", "'Time:{batch_time.sum:.1f}s '", "\n", "'Data:{data_time.sum:.1f}s '", "\n", "'vXent:{vid_xent.avg:.4f} '", "\n", "'iXent:{img_xent.avg:.4f} '", "\n", "'TKP_F:{TKP_F.avg:.4f} '", "\n", "'TKP_D:{TKP_D.avg:.4f} '", "\n", "'i2v:{i2v.avg:.4f} '", "\n", "'v2i:{v2i.avg:.4f} '", "\n", "'i2i:{i2i.avg:.4f} '", "\n", "'v2v:{v2v.avg:.4f} '", "\n", "'vAcc:{vid_acc.avg:.2%} '", "\n", "'iAcc:{img_acc.avg:.2%} '", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "\n", "vid_xent", "=", "batch_vid_loss", ",", "\n", "img_xent", "=", "batch_img_loss", ",", "\n", "TKP_F", "=", "batch_TKP_F_loss", ",", "TKP_D", "=", "batch_TKP_D_loss", ",", "\n", "i2v", "=", "batch_i2v_loss", ",", "v2i", "=", "batch_v2i_loss", ",", "i2i", "=", "batch_i2i_loss", ",", "v2v", "=", "batch_v2v_loss", ",", "\n", "vid_acc", "=", "batch_vid_corrects", ",", "img_acc", "=", "batch_img_corrects", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.main_ilids.extract_vid_feature": [[321, 337], ["vids.size", "torch.FloatTensor", "torch.FloatTensor", "range", "torch.cat.mean", "math.ceil", "model", "output.data.cpu.data.cpu", "torch.cat", "torch.cat", "clip.cuda.cuda"], "function", ["None"], ["", "def", "extract_vid_feature", "(", "model", ",", "vids", ",", "use_gpu", ")", ":", "\n", "    ", "n", ",", "c", ",", "f", ",", "h", ",", "w", "=", "vids", ".", "size", "(", ")", "\n", "assert", "(", "n", "==", "1", ")", "\n", "\n", "feat", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "ceil", "(", "f", "/", "args", ".", "test_frames", ")", ")", ":", "\n", "        ", "clip", "=", "vids", "[", ":", ",", ":", ",", "i", "*", "args", ".", "test_frames", ":", "(", "i", "+", "1", ")", "*", "args", ".", "test_frames", ",", ":", ",", ":", "]", "\n", "if", "use_gpu", ":", "\n", "            ", "clip", "=", "clip", ".", "cuda", "(", ")", "\n", "", "output", "=", "model", "(", "clip", ")", "\n", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "output", ")", ",", "1", ")", "\n", "\n", "", "feat", "=", "feat", ".", "mean", "(", "1", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.main_ilids.test": [[338, 387], ["time.time", "vid_model.eval", "img_model.eval", "print", "enumerate", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "enumerate", "torch.stack", "torch.stack", "numpy.asarray", "numpy.asarray", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "qf.div.div", "gf.div.div", "range", "distmat.numpy.numpy", "print", "utils.eval_metrics.evaluate", "print", "img_model().data.cpu", "qf.div.append", "np.asarray.extend", "np.asarray.extend", "gf.div.append", "np.asarray.extend", "np.asarray.extend", "time.time", "qf.div.size", "gf.div.size", "torch.norm.expand_as", "torch.norm.expand_as", "imgs.cuda.cuda", "extract_vid_feature().squeeze", "torch.mm", "torch.mm", "gf.div.t", "img_model", "main_ilids.extract_vid_feature"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.extract_vid_feature"], ["", "def", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "use_gpu", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "vid_model", ".", "eval", "(", ")", "\n", "img_model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"Extract features\"", ")", "\n", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feat", "=", "img_model", "(", "imgs", ")", ".", "data", ".", "cpu", "(", ")", "\n", "qf", ".", "append", "(", "feat", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "print", "(", "\"Extracted features for query set, obtained {} matrix\"", ".", "format", "(", "qf", ".", "shape", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "        ", "gf", ".", "append", "(", "extract_vid_feature", "(", "vid_model", ",", "vids", ",", "use_gpu", ")", ".", "squeeze", "(", ")", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "stack", "(", "gf", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "print", "(", "\"Extracted features for gallery set, obtained {} matrix\"", ".", "format", "(", "gf", ".", "shape", ")", ")", "\n", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Extracting features complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n", "print", "(", "\"Computing distance matrix\"", ")", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "\n", "q_norm", "=", "torch", ".", "norm", "(", "qf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "g_norm", "=", "torch", ".", "norm", "(", "gf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "qf", "=", "qf", ".", "div", "(", "q_norm", ".", "expand_as", "(", "qf", ")", ")", "\n", "gf", "=", "gf", ".", "div", "(", "g_norm", ".", "expand_as", "(", "gf", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "qf", "[", "i", ":", "i", "+", "1", "]", ",", "gf", ".", "t", "(", ")", ")", "\n", "", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "'image to video'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} top20:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "cmc", "[", "19", "]", ",", "mAP", ")", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.main": [[69, 233], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "print", "print", "utils.init_dataset", "transforms.Compose", "transforms.TemporalRandomCrop", "transforms.Compose", "transforms.TemporalBeginCrop", "torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.init_model", "models.init_model", "models.init_model", "print", "print", "torch.CrossEntropyLoss", "utils.losses.FeatureBasedTKP", "utils.losses.SimilarityBasedTKP", "utils.losses.HeterogeneousTripletLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "time.time", "print", "range", "print", "round", "str", "str", "print", "utils.utils.Logger", "utils.utils.Logger", "print", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.video_loader.VideoDataset", "utils.video_loader.VideoDataset", "utils.video_loader.ImageDataset", "utils.video_loader.ImageDataset", "print", "torch.load", "torch.load", "vid_model.cuda.load_state_dict", "img_model.cuda.load_state_dict", "classifier.cuda.load_state_dict", "vid_model.cuda.cuda", "img_model.cuda.cuda", "classifier.cuda.cuda", "print", "lr_scheduler.MultiStepLR.step", "time.time", "train.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "round", "datetime.timedelta", "datetime.timedelta", "os.join", "os.join", "transforms.Scale", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Scale", "transforms.ToTensor", "transforms.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "utils.video_loader.VideoDataset", "utils.video_loader.VideoDataset", "torch.no_grad", "torch.no_grad", "train.test", "print", "vid_model.cuda.state_dict", "img_model.cuda.state_dict", "classifier.cuda.state_dict", "utils.utils.save_checkpoint", "time.time", "utils.samplers.RandomIdentitySampler", "utils.samplers.RandomIdentitySampler", "sum", "sum", "vid_model.cuda.parameters", "img_model.cuda.parameters", "classifier.cuda.parameters", "time.time", "torch.no_grad", "torch.no_grad", "train.test", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "os.join", "p.numel", "p.numel", "vid_model.cuda.parameters", "img_model.cuda.parameters", "str"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.init_dataset", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.test", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.test"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_devices", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_train.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_test.txt'", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "print", "(", "\"Currently using GPU {}\"", ".", "format", "(", "args", ".", "gpu_devices", ")", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently using CPU (GPU is highly recommended)\"", ")", "\n", "\n", "", "print", "(", "\"Initializing dataset {}\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "dataset", "=", "data_manager", ".", "init_dataset", "(", "name", "=", "args", ".", "dataset", ",", "root", "=", "args", ".", "root", ")", "\n", "\n", "# Data augmentation", "\n", "spatial_transform_train", "=", "ST", ".", "Compose", "(", "[", "\n", "ST", ".", "Scale", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "ST", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "ST", ".", "ToTensor", "(", ")", ",", "\n", "ST", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "temporal_transform_train", "=", "TT", ".", "TemporalRandomCrop", "(", "size", "=", "args", ".", "seq_len", ",", "stride", "=", "args", ".", "sample_stride", ")", "\n", "\n", "spatial_transform_test", "=", "ST", ".", "Compose", "(", "[", "\n", "ST", ".", "Scale", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "ST", ".", "ToTensor", "(", ")", ",", "\n", "ST", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "temporal_transform_test", "=", "TT", ".", "TemporalBeginCrop", "(", ")", "\n", "\n", "transform_test_img", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "pin_memory", "=", "True", "if", "use_gpu", "else", "False", "\n", "\n", "if", "args", ".", "dataset", "==", "'dukevid'", ":", "\n", "        ", "trainloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "train_dense", ",", "spatial_transform", "=", "spatial_transform_train", ",", "temporal_transform", "=", "temporal_transform_train", ")", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset", ".", "train_dense", ",", "num_instances", "=", "args", ".", "num_instances", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "trainloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "train", ",", "spatial_transform", "=", "spatial_transform_train", ",", "temporal_transform", "=", "temporal_transform_train", ")", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset", ".", "train", ",", "num_instances", "=", "args", ".", "num_instances", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "", "queryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "query", ",", "spatial_transform", "=", "spatial_transform_test", ",", "temporal_transform", "=", "temporal_transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "galleryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "gallery", ",", "spatial_transform", "=", "spatial_transform_test", ",", "temporal_transform", "=", "temporal_transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "queryimgloader", "=", "DataLoader", "(", "\n", "ImageDataset", "(", "dataset", ".", "query_img", ",", "transform", "=", "transform_test_img", ")", ",", "\n", "batch_size", "=", "args", ".", "img_test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "galleryimgloader", "=", "DataLoader", "(", "\n", "ImageDataset", "(", "dataset", ".", "gallery_img", ",", "transform", "=", "transform_test_img", ")", ",", "\n", "batch_size", "=", "args", ".", "img_test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "print", "(", "\"Initializing model: {} and {}\"", ".", "format", "(", "args", ".", "vid_arch", ",", "args", ".", "img_arch", ")", ")", "\n", "vid_model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "vid_arch", ")", "\n", "img_model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "img_arch", ")", "\n", "classifier", "=", "models", ".", "init_model", "(", "name", "=", "'classifier'", ",", "num_classes", "=", "dataset", ".", "num_train_pids", ")", "\n", "print", "(", "\"Video model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "vid_model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "print", "(", "\"Image model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "img_model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion_tkp_f", "=", "FeatureBasedTKP", "(", "bp_to_vid", "=", "args", ".", "bp_to_vid", ")", "\n", "criterion_tkp_d", "=", "SimilarityBasedTKP", "(", "distance", "=", "'euclidean'", ",", "bp_to_vid", "=", "args", ".", "bp_to_vid", ")", "\n", "criterion_i2v", "=", "HeterogeneousTripletLoss", "(", "margin", "=", "0.3", ",", "distance", "=", "'euclidean'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "vid_model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "img_model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", "\n", "]", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "stepsize", ",", "gamma", "=", "args", ".", "gamma", ")", "\n", "start_epoch", "=", "args", ".", "start_epoch", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "vid_model", ".", "load_state_dict", "(", "checkpoint", "[", "'vid_model_state_dict'", "]", ")", "\n", "img_model", ".", "load_state_dict", "(", "checkpoint", "[", "'img_model_state_dict'", "]", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier_state_dict'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "", "if", "use_gpu", ":", "\n", "        ", "vid_model", "=", "vid_model", ".", "cuda", "(", ")", "\n", "img_model", "=", "img_model", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "\"Evaluate only\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "queryimgloader", ",", "galleryimgloader", ",", "use_gpu", ")", "\n", "", "return", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_time", "=", "0", "\n", "best_rank1", "=", "-", "np", ".", "inf", "\n", "best_epoch", "=", "0", "\n", "print", "(", "\"==> Start training\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epoch", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "start_train_time", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "epoch", ",", "vid_model", ",", "img_model", ",", "classifier", ",", "criterion", ",", "criterion_tkp_f", ",", "criterion_tkp_d", ",", "criterion_i2v", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "train_time", "+=", "round", "(", "time", ".", "time", "(", ")", "-", "start_train_time", ")", "\n", "\n", "\n", "if", "(", "epoch", "+", "1", ")", ">=", "args", ".", "start_eval", "and", "args", ".", "eval_step", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "args", ".", "max_epoch", ":", "\n", "            ", "print", "(", "\"==> Test\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "rank1", "=", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "queryimgloader", ",", "galleryimgloader", ",", "use_gpu", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "is_best", "=", "rank1", ">", "best_rank1", "\n", "if", "is_best", ":", "\n", "                ", "best_rank1", "=", "rank1", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "\n", "", "vid_model_state_dict", "=", "vid_model", ".", "state_dict", "(", ")", "\n", "img_model_state_dict", "=", "img_model", ".", "state_dict", "(", ")", "\n", "classifier_state_dict", "=", "classifier", ".", "state_dict", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'vid_model_state_dict'", ":", "vid_model_state_dict", ",", "\n", "'img_model_state_dict'", ":", "img_model_state_dict", ",", "\n", "'classifier_state_dict'", ":", "classifier_state_dict", ",", "\n", "'rank1'", ":", "rank1", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "is_best", ",", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_ep'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth.tar'", ")", ")", "\n", "\n", "", "", "print", "(", "\"==> Best Rank-1 {:.1%}, achieved at epoch {}\"", ".", "format", "(", "best_rank1", ",", "best_epoch", ")", ")", "\n", "\n", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "train_time", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "train_time", ")", ")", "\n", "print", "(", "\"Finished. Total elapsed time (h:m:s): {}. Training time (h:m:s): {}.\"", ".", "format", "(", "elapsed", ",", "train_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train": [[234, 331], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "vid_model.train", "img_model.train", "classifier.train", "time.time", "enumerate", "print", "vids.size", "pids.unsqueeze().repeat().view", "utils.utils.AverageMeter.update", "optimizer.zero_grad", "vid_model", "classifier", "vids.permute().contiguous().view", "img_model", "classifier", "criterion", "criterion", "criterion_tkp_f", "criterion_tkp_d", "criterion_i2v", "criterion_i2v", "criterion_i2v", "criterion_i2v", "loss.backward", "optimizer.step", "torch.max", "torch.max", "utils.utils.AverageMeter.update", "torch.max", "torch.max", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "time.time", "criterion.item", "criterion.item", "criterion_tkp_f.item", "criterion_tkp_d.item", "criterion_i2v.item", "criterion_i2v.item", "criterion_i2v.item", "criterion_i2v.item", "pids.unsqueeze().repeat", "vids.cuda", "pids.cuda", "pids.unsqueeze().repeat().view.cuda", "time.time", "vids.permute().contiguous", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "time.time", "pids.unsqueeze", "vids.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.train", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ",", "vid_model", ",", "img_model", ",", "classifier", ",", "criterion", ",", "criterion_tkp_f", ",", "criterion_tkp_d", ",", "criterion_i2v", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", ":", "\n", "    ", "batch_vid_loss", "=", "AverageMeter", "(", ")", "\n", "batch_img_loss", "=", "AverageMeter", "(", ")", "\n", "batch_TKP_F_loss", "=", "AverageMeter", "(", ")", "\n", "batch_TKP_D_loss", "=", "AverageMeter", "(", ")", "\n", "batch_i2v_loss", "=", "AverageMeter", "(", ")", "\n", "batch_v2i_loss", "=", "AverageMeter", "(", ")", "\n", "batch_i2i_loss", "=", "AverageMeter", "(", ")", "\n", "batch_v2v_loss", "=", "AverageMeter", "(", ")", "\n", "batch_vid_corrects", "=", "AverageMeter", "(", ")", "\n", "batch_img_corrects", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "vid_model", ".", "train", "(", ")", "\n", "img_model", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "if", "(", "pids", "-", "pids", "[", "0", "]", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "vids", ".", "size", "(", ")", "\n", "img_pids", "=", "pids", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "t", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "            ", "vids", ",", "pids", ",", "img_pids", "=", "vids", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", ",", "img_pids", ".", "cuda", "(", ")", "\n", "\n", "# measure data loading time", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward", "\n", "vid_features", ",", "frame_features", "=", "vid_model", "(", "vids", ")", "\n", "vid_outputs", "=", "classifier", "(", "vid_features", ")", "\n", "\n", "imgs", "=", "vids", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "t", ",", "c", ",", "h", ",", "w", ")", "\n", "img_features", "=", "img_model", "(", "imgs", ")", "\n", "img_outputs", "=", "classifier", "(", "img_features", ")", "\n", "\n", "# compute loss", "\n", "vid_loss", "=", "criterion", "(", "vid_outputs", ",", "pids", ")", "\n", "img_loss", "=", "criterion", "(", "img_outputs", ",", "img_pids", ")", "\n", "TKP_F_loss", "=", "criterion_tkp_f", "(", "img_features", ",", "frame_features", ")", "\n", "TKP_D_loss", "=", "criterion_tkp_d", "(", "img_features", ",", "frame_features", ")", "\n", "i2v_loss", "=", "criterion_i2v", "(", "img_features", ",", "vid_features", ",", "img_pids", ",", "pids", ")", "\n", "v2i_loss", "=", "criterion_i2v", "(", "vid_features", ",", "img_features", ",", "pids", ",", "img_pids", ")", "\n", "i2i_loss", "=", "criterion_i2v", "(", "img_features", ",", "img_features", ",", "img_pids", ",", "img_pids", ")", "\n", "v2v_loss", "=", "criterion_i2v", "(", "vid_features", ",", "vid_features", ",", "pids", ",", "pids", ")", "\n", "loss", "=", "vid_loss", "+", "img_loss", "+", "i2v_loss", "+", "i2i_loss", "+", "v2v_loss", "+", "v2i_loss", "+", "TKP_F_loss", "+", "TKP_D_loss", "\n", "\n", "# backward + optimize", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# statistics", "\n", "_", ",", "vid_preds", "=", "torch", ".", "max", "(", "vid_outputs", ".", "data", ",", "1", ")", "\n", "batch_vid_corrects", ".", "update", "(", "torch", ".", "sum", "(", "vid_preds", "==", "pids", ".", "data", ")", ".", "float", "(", ")", "/", "b", ",", "b", ")", "\n", "\n", "_", ",", "img_preds", "=", "torch", ".", "max", "(", "img_outputs", ".", "data", ",", "1", ")", "\n", "batch_img_corrects", ".", "update", "(", "torch", ".", "sum", "(", "img_preds", "==", "img_pids", ".", "data", ")", ".", "float", "(", ")", "/", "(", "b", "*", "t", ")", ",", "b", "*", "t", ")", "\n", "\n", "batch_vid_loss", ".", "update", "(", "vid_loss", ".", "item", "(", ")", ",", "b", ")", "\n", "batch_img_loss", ".", "update", "(", "img_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_TKP_F_loss", ".", "update", "(", "TKP_F_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_TKP_D_loss", ".", "update", "(", "TKP_D_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_i2v_loss", ".", "update", "(", "i2v_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_i2i_loss", ".", "update", "(", "i2i_loss", ".", "item", "(", ")", ",", "b", "*", "t", ")", "\n", "batch_v2v_loss", ".", "update", "(", "v2v_loss", ".", "item", "(", ")", ",", "b", ")", "\n", "batch_v2i_loss", ".", "update", "(", "v2i_loss", ".", "item", "(", ")", ",", "b", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "print", "(", "'Epoch{0} '", "\n", "'Time:{batch_time.sum:.1f}s '", "\n", "'Data:{data_time.sum:.1f}s '", "\n", "'vXent:{vid_xent.avg:.4f} '", "\n", "'iXent:{img_xent.avg:.4f} '", "\n", "'TKP_F:{TKP_F.avg:.4f} '", "\n", "'TKP_D:{TKP_D.avg:.4f} '", "\n", "'i2v:{i2v.avg:.4f} '", "\n", "'v2i:{v2i.avg:.4f} '", "\n", "'i2i:{i2i.avg:.4f} '", "\n", "'v2v:{v2v.avg:.4f} '", "\n", "'vAcc:{vid_acc.avg:.2%} '", "\n", "'iAcc:{img_acc.avg:.2%} '", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "\n", "vid_xent", "=", "batch_vid_loss", ",", "\n", "img_xent", "=", "batch_img_loss", ",", "\n", "TKP_F", "=", "batch_TKP_F_loss", ",", "TKP_D", "=", "batch_TKP_D_loss", ",", "\n", "i2v", "=", "batch_i2v_loss", ",", "v2i", "=", "batch_v2i_loss", ",", "i2i", "=", "batch_i2i_loss", ",", "v2v", "=", "batch_v2v_loss", ",", "\n", "vid_acc", "=", "batch_vid_corrects", ",", "img_acc", "=", "batch_img_corrects", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.train.test": [[333, 461], ["time.time", "vid_model.eval", "img_model.eval", "print", "enumerate", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "enumerate", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "print", "enumerate", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "enumerate", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "img_qf.div.div", "torch.cat.div", "vid_qf.div.div", "torch.cat.div", "range", "img_distmat.numpy.numpy", "vid_distmat.numpy.numpy", "i2v_distmat.numpy.numpy", "v2i_distmat.numpy.numpy", "print", "utils.eval_metrics.evaluate", "print", "print", "utils.eval_metrics.evaluate", "print", "print", "utils.eval_metrics.evaluate", "print", "print", "utils.eval_metrics.evaluate", "print", "vid_model", "img_model().data.cpu.mean", "img_model().data.cpu.data.cpu", "vid_qf.div.append", "np.asarray.extend", "np.asarray.extend", "vid_model", "img_model().data.cpu.mean", "img_model().data.cpu.data.cpu", "torch.cat.append", "np.append.extend", "np.append.extend", "torch.cat", "torch.cat", "numpy.append", "numpy.append", "img_model().data.cpu", "img_qf.div.append", "np.asarray.extend", "np.asarray.extend", "img_model().data.cpu", "torch.cat.append", "np.append.extend", "np.append.extend", "torch.cat", "torch.cat", "numpy.append", "numpy.append", "time.time", "vid_qf.div.size", "torch.cat.size", "torch.norm.expand_as", "torch.norm.expand_as", "torch.norm.expand_as", "torch.norm.expand_as", "vids.cuda.cuda", "vids.cuda.cuda", "imgs.cuda.cuda", "imgs.cuda.cuda", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "img_model", "img_model"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate"], ["", "def", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "queryimgloader", ",", "galleryimgloader", ",", "use_gpu", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "vid_model", ".", "eval", "(", ")", "\n", "img_model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"Extract video features\"", ")", "\n", "vid_qf", ",", "vid_q_pids", ",", "vid_q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "# if (batch_idx+1)%1000==0 or (batch_idx+1)%len(queryloader)==0:", "\n", "#     print(\"{}/{}\".format(batch_idx+1, len(queryloader)))", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "vids", "=", "vids", ".", "cuda", "(", ")", "\n", "", "feat", "=", "vid_model", "(", "vids", ")", "\n", "feat", "=", "feat", ".", "mean", "(", "1", ")", "\n", "feat", "=", "feat", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "vid_qf", ".", "append", "(", "feat", ")", "\n", "vid_q_pids", ".", "extend", "(", "pids", ")", "\n", "vid_q_camids", ".", "extend", "(", "camids", ")", "\n", "", "vid_qf", "=", "torch", ".", "cat", "(", "vid_qf", ",", "0", ")", "\n", "vid_q_pids", "=", "np", ".", "asarray", "(", "vid_q_pids", ")", "\n", "vid_q_camids", "=", "np", ".", "asarray", "(", "vid_q_camids", ")", "\n", "print", "(", "\"Extracted features for query set, obtained {} matrix\"", ".", "format", "(", "vid_qf", ".", "shape", ")", ")", "\n", "\n", "vid_gf", ",", "vid_g_pids", ",", "vid_g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "# if (batch_idx + 1) % 1000==0 or (batch_idx+1)%len(galleryloader)==0:", "\n", "#     print(\"{}/{}\".format(batch_idx+1, len(galleryloader)))", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "vids", "=", "vids", ".", "cuda", "(", ")", "\n", "", "feat", "=", "vid_model", "(", "vids", ")", "\n", "feat", "=", "feat", ".", "mean", "(", "1", ")", "\n", "feat", "=", "feat", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "vid_gf", ".", "append", "(", "feat", ")", "\n", "vid_g_pids", ".", "extend", "(", "pids", ")", "\n", "vid_g_camids", ".", "extend", "(", "camids", ")", "\n", "", "vid_gf", "=", "torch", ".", "cat", "(", "vid_gf", ",", "0", ")", "\n", "vid_g_pids", "=", "np", ".", "asarray", "(", "vid_g_pids", ")", "\n", "vid_g_camids", "=", "np", ".", "asarray", "(", "vid_g_camids", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mars'", ":", "\n", "# gallery set must contain query set, otherwise 140 query imgs will not have ground truth.", "\n", "        ", "vid_gf", "=", "torch", ".", "cat", "(", "(", "vid_qf", ",", "vid_gf", ")", ",", "0", ")", "\n", "vid_g_pids", "=", "np", ".", "append", "(", "vid_q_pids", ",", "vid_g_pids", ")", "\n", "vid_g_camids", "=", "np", ".", "append", "(", "vid_q_camids", ",", "vid_g_camids", ")", "\n", "", "print", "(", "\"Extracted features for gallery set, obtained {} matrix\"", ".", "format", "(", "vid_gf", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"Extract image features\"", ")", "\n", "img_qf", ",", "img_q_pids", ",", "img_q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryimgloader", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feat", "=", "img_model", "(", "imgs", ")", ".", "data", ".", "cpu", "(", ")", "\n", "img_qf", ".", "append", "(", "feat", ")", "\n", "img_q_pids", ".", "extend", "(", "pids", ")", "\n", "img_q_camids", ".", "extend", "(", "camids", ")", "\n", "", "img_qf", "=", "torch", ".", "cat", "(", "img_qf", ",", "0", ")", "\n", "img_q_pids", "=", "np", ".", "asarray", "(", "img_q_pids", ")", "\n", "img_q_camids", "=", "np", ".", "asarray", "(", "img_q_camids", ")", "\n", "print", "(", "\"Extracted features for query set, obtained {} matrix\"", ".", "format", "(", "img_qf", ".", "shape", ")", ")", "\n", "\n", "img_gf", ",", "img_g_pids", ",", "img_g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryimgloader", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feat", "=", "img_model", "(", "imgs", ")", ".", "data", ".", "cpu", "(", ")", "\n", "img_gf", ".", "append", "(", "feat", ")", "\n", "img_g_pids", ".", "extend", "(", "pids", ")", "\n", "img_g_camids", ".", "extend", "(", "camids", ")", "\n", "", "img_gf", "=", "torch", ".", "cat", "(", "img_gf", ",", "0", ")", "\n", "img_g_pids", "=", "np", ".", "asarray", "(", "img_g_pids", ")", "\n", "img_g_camids", "=", "np", ".", "asarray", "(", "img_g_camids", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mars'", ":", "\n", "# gallery set must contain query set, otherwise 140 query imgs will not have ground truth.", "\n", "        ", "img_gf", "=", "torch", ".", "cat", "(", "(", "img_qf", ",", "img_gf", ")", ",", "0", ")", "\n", "img_g_pids", "=", "np", ".", "append", "(", "img_q_pids", ",", "img_g_pids", ")", "\n", "img_g_camids", "=", "np", ".", "append", "(", "img_q_camids", ",", "img_g_camids", ")", "\n", "", "print", "(", "\"Extracted features for gallery set, obtained {} matrix\"", ".", "format", "(", "img_gf", ".", "shape", ")", ")", "\n", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Extracting features complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n", "print", "(", "\"Computing distance matrix\"", ")", "\n", "m", ",", "n", "=", "vid_qf", ".", "size", "(", "0", ")", ",", "vid_gf", ".", "size", "(", "0", ")", "\n", "img_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "vid_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "i2v_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "v2i_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "\n", "img_q_norm", "=", "torch", ".", "norm", "(", "img_qf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "img_g_norm", "=", "torch", ".", "norm", "(", "img_gf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "vid_q_norm", "=", "torch", ".", "norm", "(", "vid_qf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "vid_g_norm", "=", "torch", ".", "norm", "(", "vid_gf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "img_qf", "=", "img_qf", ".", "div", "(", "img_q_norm", ".", "expand_as", "(", "img_qf", ")", ")", "\n", "img_gf", "=", "img_gf", ".", "div", "(", "img_g_norm", ".", "expand_as", "(", "img_gf", ")", ")", "\n", "vid_qf", "=", "vid_qf", ".", "div", "(", "vid_q_norm", ".", "expand_as", "(", "vid_qf", ")", ")", "\n", "vid_gf", "=", "vid_gf", ".", "div", "(", "vid_g_norm", ".", "expand_as", "(", "vid_gf", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "img_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "img_qf", "[", "i", ":", "i", "+", "1", "]", ",", "img_gf", ".", "t", "(", ")", ")", "\n", "vid_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "vid_qf", "[", "i", ":", "i", "+", "1", "]", ",", "vid_gf", ".", "t", "(", ")", ")", "\n", "i2v_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "img_qf", "[", "i", ":", "i", "+", "1", "]", ",", "vid_gf", ".", "t", "(", ")", ")", "\n", "v2i_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "vid_qf", "[", "i", ":", "i", "+", "1", "]", ",", "img_gf", ".", "t", "(", ")", ")", "\n", "\n", "", "img_distmat", "=", "img_distmat", ".", "numpy", "(", ")", "\n", "vid_distmat", "=", "vid_distmat", ".", "numpy", "(", ")", "\n", "i2v_distmat", "=", "i2v_distmat", ".", "numpy", "(", ")", "\n", "v2i_distmat", "=", "v2i_distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "'image to image'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "img_distmat", ",", "img_q_pids", ",", "img_g_pids", ",", "img_q_camids", ",", "img_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "print", "(", "'video to video'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "vid_distmat", ",", "vid_q_pids", ",", "vid_g_pids", ",", "vid_q_camids", ",", "vid_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "print", "(", "'video to image'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "v2i_distmat", ",", "vid_q_pids", ",", "img_g_pids", ",", "vid_q_camids", ",", "img_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "print", "(", "'image to video'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "i2v_distmat", ",", "img_q_pids", ",", "vid_g_pids", ",", "img_q_camids", ",", "vid_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.main": [[52, 122], ["print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.utils.Logger", "print", "print", "utils.init_dataset", "transforms.Compose", "torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.init_model", "models.init_model", "print", "print", "print", "torch.load", "torch.load", "torch.load", "vid_model.cuda.load_state_dict", "img_model.cuda.load_state_dict", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.join", "utils.video_loader.VideoDataset", "utils.video_loader.VideoDataset", "utils.video_loader.ImageDataset", "utils.video_loader.ImageDataset", "vid_model.cuda.cuda", "img_model.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test.test", "transforms.Scale", "transforms.ToTensor", "transforms.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "sum", "sum", "p.numel", "p.numel", "vid_model.cuda.parameters", "img_model.cuda.parameters"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.init_dataset", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.test"], ["def", "main", "(", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_devices", "\n", "print", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_test.txt'", ")", ")", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "print", "(", "\"Initializing dataset {}\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "dataset", "=", "data_manager", ".", "init_dataset", "(", "name", "=", "args", ".", "dataset", ",", "root", "=", "args", ".", "root", ")", "\n", "\n", "# Data augmentation", "\n", "spatial_transform_test", "=", "ST", ".", "Compose", "(", "[", "\n", "ST", ".", "Scale", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "ST", ".", "ToTensor", "(", ")", ",", "\n", "ST", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "temporal_transform_test", "=", "None", "\n", "\n", "transform_test_img", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "pin_memory", "=", "True", "if", "use_gpu", "else", "False", "\n", "\n", "queryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "query", ",", "spatial_transform", "=", "spatial_transform_test", ",", "temporal_transform", "=", "temporal_transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "galleryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "gallery", ",", "spatial_transform", "=", "spatial_transform_test", ",", "temporal_transform", "=", "temporal_transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "queryimgloader", "=", "DataLoader", "(", "\n", "ImageDataset", "(", "dataset", ".", "query_img", ",", "transform", "=", "transform_test_img", ")", ",", "\n", "batch_size", "=", "args", ".", "img_test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "galleryimgloader", "=", "DataLoader", "(", "\n", "ImageDataset", "(", "dataset", ".", "gallery_img", ",", "transform", "=", "transform_test_img", ")", ",", "\n", "batch_size", "=", "args", ".", "img_test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "print", "(", "\"Initializing model: {} and {}\"", ".", "format", "(", "args", ".", "vid_arch", ",", "args", ".", "img_arch", ")", ")", "\n", "vid_model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "vid_arch", ")", "\n", "img_model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "img_arch", ")", "\n", "print", "(", "\"Video model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "vid_model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "print", "(", "\"Image model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "img_model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "\n", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "vid_model", ".", "load_state_dict", "(", "checkpoint", "[", "'vid_model_state_dict'", "]", ")", "\n", "img_model", ".", "load_state_dict", "(", "checkpoint", "[", "'img_model_state_dict'", "]", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "vid_model", "=", "vid_model", ".", "cuda", "(", ")", "\n", "img_model", "=", "img_model", ".", "cuda", "(", ")", "\n", "\n", "", "print", "(", "\"Evaluate\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "queryimgloader", ",", "galleryimgloader", ",", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.extract_vid_feature": [[123, 139], ["vids.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "torch.cat.mean", "math.ceil", "model", "output.data.cpu.data.cpu", "torch.cat", "torch.cat", "torch.cat", "clip.cuda.cuda"], "function", ["None"], ["", "", "def", "extract_vid_feature", "(", "model", ",", "vids", ",", "use_gpu", ")", ":", "\n", "    ", "n", ",", "c", ",", "f", ",", "h", ",", "w", "=", "vids", ".", "size", "(", ")", "\n", "assert", "(", "n", "==", "1", ")", "\n", "\n", "feat", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "ceil", "(", "f", "/", "args", ".", "test_frames", ")", ")", ":", "\n", "        ", "clip", "=", "vids", "[", ":", ",", ":", ",", "i", "*", "args", ".", "test_frames", ":", "(", "i", "+", "1", ")", "*", "args", ".", "test_frames", ",", ":", ",", ":", "]", "\n", "if", "use_gpu", ":", "\n", "            ", "clip", "=", "clip", ".", "cuda", "(", ")", "\n", "", "output", "=", "model", "(", "clip", ")", "\n", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat", ",", "output", ")", ",", "1", ")", "\n", "\n", "", "feat", "=", "feat", ".", "mean", "(", "1", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.test": [[141, 258], ["time.time", "vid_model.eval", "img_model.eval", "print", "enumerate", "torch.stack", "torch.stack", "torch.stack", "numpy.asarray", "numpy.asarray", "print", "enumerate", "torch.stack", "torch.stack", "torch.stack", "numpy.asarray", "numpy.asarray", "print", "print", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "img_qf.div.div", "torch.cat.div", "vid_qf.div.div", "torch.cat.div", "range", "img_distmat.numpy.numpy", "vid_distmat.numpy.numpy", "i2v_distmat.numpy.numpy", "v2i_distmat.numpy.numpy", "print", "utils.eval_metrics.evaluate", "print", "print", "utils.eval_metrics.evaluate", "print", "print", "utils.eval_metrics.evaluate", "print", "print", "utils.eval_metrics.evaluate", "print", "vid_qf.div.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.append", "np.append.extend", "np.append.extend", "torch.cat", "torch.cat", "torch.cat", "numpy.append", "numpy.append", "img_model().data.cpu", "img_qf.div.append", "np.asarray.extend", "np.asarray.extend", "img_model().data.cpu", "torch.cat.append", "np.append.extend", "np.append.extend", "torch.cat", "torch.cat", "torch.cat", "numpy.append", "numpy.append", "time.time", "vid_qf.div.size", "torch.cat.size", "torch.norm.expand_as", "torch.norm.expand_as", "torch.norm.expand_as", "torch.norm.expand_as", "print", "extract_vid_feature().squeeze", "print", "extract_vid_feature().squeeze", "imgs.cuda.cuda", "imgs.cuda.cuda", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "len", "len", "test.extract_vid_feature", "len", "len", "test.extract_vid_feature", "img_model", "img_model"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.extract_vid_feature", "home.repos.pwc.inspect_result.guxinqian_TKP.None.test.extract_vid_feature"], ["", "def", "test", "(", "vid_model", ",", "img_model", ",", "queryloader", ",", "galleryloader", ",", "queryimgloader", ",", "galleryimgloader", ",", "use_gpu", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "vid_model", ".", "eval", "(", ")", "\n", "img_model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"Extract video features\"", ")", "\n", "vid_qf", ",", "vid_q_pids", ",", "vid_q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "        ", "if", "(", "batch_idx", "+", "1", ")", "%", "1000", "==", "0", "or", "(", "batch_idx", "+", "1", ")", "%", "len", "(", "queryloader", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"{}/{}\"", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "queryloader", ")", ")", ")", "\n", "\n", "", "vid_qf", ".", "append", "(", "extract_vid_feature", "(", "vid_model", ",", "vids", ",", "use_gpu", ")", ".", "squeeze", "(", ")", ")", "\n", "vid_q_pids", ".", "extend", "(", "pids", ")", "\n", "vid_q_camids", ".", "extend", "(", "camids", ")", "\n", "", "vid_qf", "=", "torch", ".", "stack", "(", "vid_qf", ")", "\n", "vid_q_pids", "=", "np", ".", "asarray", "(", "vid_q_pids", ")", "\n", "vid_q_camids", "=", "np", ".", "asarray", "(", "vid_q_camids", ")", "\n", "print", "(", "\"Extracted features for query set, obtained {} matrix\"", ".", "format", "(", "vid_qf", ".", "shape", ")", ")", "\n", "\n", "vid_gf", ",", "vid_g_pids", ",", "vid_g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "vids", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "        ", "if", "(", "batch_idx", "+", "1", ")", "%", "1000", "==", "0", "or", "(", "batch_idx", "+", "1", ")", "%", "len", "(", "galleryloader", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"{}/{}\"", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "galleryloader", ")", ")", ")", "\n", "\n", "", "vid_gf", ".", "append", "(", "extract_vid_feature", "(", "vid_model", ",", "vids", ",", "use_gpu", ")", ".", "squeeze", "(", ")", ")", "\n", "vid_g_pids", ".", "extend", "(", "pids", ")", "\n", "vid_g_camids", ".", "extend", "(", "camids", ")", "\n", "", "vid_gf", "=", "torch", ".", "stack", "(", "vid_gf", ")", "\n", "vid_g_pids", "=", "np", ".", "asarray", "(", "vid_g_pids", ")", "\n", "vid_g_camids", "=", "np", ".", "asarray", "(", "vid_g_camids", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mars'", ":", "\n", "# gallery set must contain query set, otherwise 140 query imgs will not have ground truth.", "\n", "        ", "vid_gf", "=", "torch", ".", "cat", "(", "(", "vid_qf", ",", "vid_gf", ")", ",", "0", ")", "\n", "vid_g_pids", "=", "np", ".", "append", "(", "vid_q_pids", ",", "vid_g_pids", ")", "\n", "vid_g_camids", "=", "np", ".", "append", "(", "vid_q_camids", ",", "vid_g_camids", ")", "\n", "", "print", "(", "\"Extracted features for gallery set, obtained {} matrix\"", ".", "format", "(", "vid_gf", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"Extract image features\"", ")", "\n", "img_qf", ",", "img_q_pids", ",", "img_q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryimgloader", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feat", "=", "img_model", "(", "imgs", ")", ".", "data", ".", "cpu", "(", ")", "\n", "img_qf", ".", "append", "(", "feat", ")", "\n", "img_q_pids", ".", "extend", "(", "pids", ")", "\n", "img_q_camids", ".", "extend", "(", "camids", ")", "\n", "", "img_qf", "=", "torch", ".", "cat", "(", "img_qf", ",", "0", ")", "\n", "img_q_pids", "=", "np", ".", "asarray", "(", "img_q_pids", ")", "\n", "img_q_camids", "=", "np", ".", "asarray", "(", "img_q_camids", ")", "\n", "print", "(", "\"Extracted features for query set, obtained {} matrix\"", ".", "format", "(", "img_qf", ".", "shape", ")", ")", "\n", "\n", "img_gf", ",", "img_g_pids", ",", "img_g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryimgloader", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feat", "=", "img_model", "(", "imgs", ")", ".", "data", ".", "cpu", "(", ")", "\n", "img_gf", ".", "append", "(", "feat", ")", "\n", "img_g_pids", ".", "extend", "(", "pids", ")", "\n", "img_g_camids", ".", "extend", "(", "camids", ")", "\n", "", "img_gf", "=", "torch", ".", "cat", "(", "img_gf", ",", "0", ")", "\n", "img_g_pids", "=", "np", ".", "asarray", "(", "img_g_pids", ")", "\n", "img_g_camids", "=", "np", ".", "asarray", "(", "img_g_camids", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mars'", ":", "\n", "# gallery set must contain query set, otherwise 140 query imgs will not have ground truth.", "\n", "        ", "img_gf", "=", "torch", ".", "cat", "(", "(", "img_qf", ",", "img_gf", ")", ",", "0", ")", "\n", "img_g_pids", "=", "np", ".", "append", "(", "img_q_pids", ",", "img_g_pids", ")", "\n", "img_g_camids", "=", "np", ".", "append", "(", "img_q_camids", ",", "img_g_camids", ")", "\n", "", "print", "(", "\"Extracted features for gallery set, obtained {} matrix\"", ".", "format", "(", "img_gf", ".", "shape", ")", ")", "\n", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Extracting features complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "print", "(", "\"Computing distance matrix\"", ")", "\n", "m", ",", "n", "=", "vid_qf", ".", "size", "(", "0", ")", ",", "vid_gf", ".", "size", "(", "0", ")", "\n", "img_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "vid_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "i2v_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "v2i_distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "\n", "img_q_norm", "=", "torch", ".", "norm", "(", "img_qf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "img_g_norm", "=", "torch", ".", "norm", "(", "img_gf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "vid_q_norm", "=", "torch", ".", "norm", "(", "vid_qf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "vid_g_norm", "=", "torch", ".", "norm", "(", "vid_gf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "img_qf", "=", "img_qf", ".", "div", "(", "img_q_norm", ".", "expand_as", "(", "img_qf", ")", ")", "\n", "img_gf", "=", "img_gf", ".", "div", "(", "img_g_norm", ".", "expand_as", "(", "img_gf", ")", ")", "\n", "vid_qf", "=", "vid_qf", ".", "div", "(", "vid_q_norm", ".", "expand_as", "(", "vid_qf", ")", ")", "\n", "vid_gf", "=", "vid_gf", ".", "div", "(", "vid_g_norm", ".", "expand_as", "(", "vid_gf", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "img_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "img_qf", "[", "i", ":", "i", "+", "1", "]", ",", "img_gf", ".", "t", "(", ")", ")", "\n", "vid_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "vid_qf", "[", "i", ":", "i", "+", "1", "]", ",", "vid_gf", ".", "t", "(", ")", ")", "\n", "i2v_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "img_qf", "[", "i", ":", "i", "+", "1", "]", ",", "vid_gf", ".", "t", "(", ")", ")", "\n", "v2i_distmat", "[", "i", "]", "=", "-", "torch", ".", "mm", "(", "vid_qf", "[", "i", ":", "i", "+", "1", "]", ",", "img_gf", ".", "t", "(", ")", ")", "\n", "\n", "", "img_distmat", "=", "img_distmat", ".", "numpy", "(", ")", "\n", "vid_distmat", "=", "vid_distmat", ".", "numpy", "(", ")", "\n", "i2v_distmat", "=", "i2v_distmat", ".", "numpy", "(", ")", "\n", "v2i_distmat", "=", "v2i_distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "'image to image'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "img_distmat", ",", "img_q_pids", ",", "img_g_pids", ",", "img_q_camids", ",", "img_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "print", "(", "'video to video'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "vid_distmat", ",", "vid_q_pids", ",", "vid_g_pids", ",", "vid_q_camids", ",", "vid_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "print", "(", "'video to image'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "v2i_distmat", ",", "vid_q_pids", ",", "img_g_pids", ",", "vid_q_camids", ",", "img_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "print", "(", "'image to video'", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "i2v_distmat", ",", "img_q_pids", ",", "vid_g_pids", ",", "img_q_camids", ",", "vid_g_camids", ")", "\n", "print", "(", "'top1:{:.2%} top5:{:.2%} top10:{:.2%} mAP:{:.2%}'", ".", "format", "(", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", ",", "mAP", ")", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars.__init__": [[38, 110], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "data_manager.Mars._check_before_run", "data_manager.Mars._get_names", "data_manager.Mars._get_names", "[].squeeze", "data_manager.Mars._process_data", "data_manager.Mars._process_data", "data_manager.Mars._process_data", "data_manager.Mars._extract_1stfeame", "data_manager.Mars._extract_1stfeame", "data_manager.Mars._extract_1stfeame", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "range", "scipy.io.loadmat"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._check_before_run", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._get_names", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._get_names", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._process_data", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._process_data", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._process_data", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._extract_1stfeame", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._extract_1stfeame", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._extract_1stfeame"], ["def", "__init__", "(", "self", ",", "root", "=", "'/data/datasets/'", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "join", "(", "root", ",", "'MARS'", ")", "\n", "self", ".", "train_name_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'info/train_name.txt'", ")", "\n", "self", ".", "test_name_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'info/test_name.txt'", ")", "\n", "self", ".", "track_train_info_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'info/tracks_train_info.mat'", ")", "\n", "self", ".", "track_test_info_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'info/tracks_test_info.mat'", ")", "\n", "self", ".", "query_IDX_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'info/query_IDX.mat'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "# prepare meta data", "\n", "train_names", "=", "self", ".", "_get_names", "(", "self", ".", "train_name_path", ")", "\n", "test_names", "=", "self", ".", "_get_names", "(", "self", ".", "test_name_path", ")", "\n", "track_train", "=", "loadmat", "(", "self", ".", "track_train_info_path", ")", "[", "'track_train_info'", "]", "# numpy.ndarray (8298, 4)", "\n", "track_test", "=", "loadmat", "(", "self", ".", "track_test_info_path", ")", "[", "'track_test_info'", "]", "# numpy.ndarray (12180, 4)", "\n", "query_IDX", "=", "loadmat", "(", "self", ".", "query_IDX_path", ")", "[", "'query_IDX'", "]", ".", "squeeze", "(", ")", "# numpy.ndarray (1980,)", "\n", "query_IDX", "-=", "1", "# index from 0", "\n", "track_query", "=", "track_test", "[", "query_IDX", ",", ":", "]", "\n", "gallery_IDX", "=", "[", "i", "for", "i", "in", "range", "(", "track_test", ".", "shape", "[", "0", "]", ")", "if", "i", "not", "in", "query_IDX", "]", "\n", "track_gallery", "=", "track_test", "[", "gallery_IDX", ",", ":", "]", "\n", "# track_gallery = track_test", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_train_imgs", "=", "self", ".", "_process_data", "(", "train_names", ",", "track_train", ",", "home_dir", "=", "'bbox_train'", ",", "relabel", "=", "True", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_query_imgs", "=", "self", ".", "_process_data", "(", "test_names", ",", "track_query", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_gallery_imgs", "=", "self", ".", "_process_data", "(", "test_names", ",", "track_gallery", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "train_img", ",", "_", ",", "_", "=", "self", ".", "_extract_1stfeame", "(", "train_names", ",", "track_train", ",", "home_dir", "=", "'bbox_train'", ",", "relabel", "=", "True", ")", "\n", "\n", "query_img", ",", "_", ",", "_", "=", "self", ".", "_extract_1stfeame", "(", "test_names", ",", "track_query", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ")", "\n", "\n", "gallery_img", ",", "_", ",", "_", "=", "self", ".", "_extract_1stfeame", "(", "test_names", ",", "track_gallery", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_train_imgs", "+", "num_gallery_imgs", "+", "num_query_imgs", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_gallery_tracklets", "+", "num_query_tracklets", "\n", "\n", "print", "(", "\"=> MARS loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "train_img", "=", "train_img", "\n", "self", ".", "query_img", "=", "query_img", "\n", "self", ".", "gallery_img", "=", "gallery_img", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._check_before_run": [[111, 125], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_train_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_train_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_test_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_test_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_IDX_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_IDX_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._get_names": [[126, 133], ["open", "line.rstrip", "names.append"], "methods", ["None"], ["", "", "def", "_get_names", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "new_line", "=", "line", ".", "rstrip", "(", ")", "\n", "names", ".", "append", "(", "new_line", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._process_data": [[134, 171], ["list", "len", "range", "len", "set", "meta_data[].tolist", "len", "len", "os.join", "os.join", "len", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "enumerate", "set", "set", "len"], "methods", ["None"], ["", "def", "_process_data", "(", "self", ",", "names", ",", "meta_data", ",", "home_dir", "=", "None", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "assert", "home_dir", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", "\n", "num_tracklets", "=", "meta_data", ".", "shape", "[", "0", "]", "\n", "pid_list", "=", "list", "(", "set", "(", "meta_data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", ")", ")", "\n", "num_pids", "=", "len", "(", "pid_list", ")", "\n", "\n", "if", "relabel", ":", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "\n", "for", "tracklet_idx", "in", "range", "(", "num_tracklets", ")", ":", "\n", "            ", "data", "=", "meta_data", "[", "tracklet_idx", ",", "...", "]", "\n", "start_index", ",", "end_index", ",", "pid", ",", "camid", "=", "data", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "img_names", "=", "names", "[", "start_index", "-", "1", ":", "end_index", "]", "\n", "\n", "# make sure image names correspond to the same person", "\n", "pnames", "=", "[", "img_name", "[", ":", "4", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "pnames", ")", ")", "==", "1", ",", "\"Error: a single tracklet contains different person images\"", "\n", "\n", "# make sure all images are captured under the same camera", "\n", "camnames", "=", "[", "img_name", "[", "5", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "camnames", ")", ")", "==", "1", ",", "\"Error: images are captured under different cameras!\"", "\n", "\n", "# append image names with directory information", "\n", "img_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "root", ",", "home_dir", ",", "img_name", "[", ":", "4", "]", ",", "img_name", ")", "for", "img_name", "in", "img_names", "]", "\n", "if", "len", "(", "img_paths", ")", ">=", "min_seq_len", ":", "\n", "                ", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_paths", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.Mars._extract_1stfeame": [[172, 198], ["list", "len", "range", "len", "set", "os.join", "os.join", "imgs.append", "meta_data[].tolist", "enumerate"], "methods", ["None"], ["", "def", "_extract_1stfeame", "(", "self", ",", "names", ",", "meta_data", ",", "home_dir", "=", "None", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "assert", "home_dir", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", "\n", "num_tracklets", "=", "meta_data", ".", "shape", "[", "0", "]", "\n", "pid_list", "=", "list", "(", "set", "(", "meta_data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", ")", ")", "\n", "num_pids", "=", "len", "(", "pid_list", ")", "\n", "\n", "if", "relabel", ":", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "\n", "imgs", "=", "[", "]", "\n", "\n", "for", "tracklet_idx", "in", "range", "(", "num_tracklets", ")", ":", "\n", "            ", "data", "=", "meta_data", "[", "tracklet_idx", ",", "...", "]", "\n", "start_index", ",", "end_index", ",", "pid", ",", "camid", "=", "data", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "img_name", "=", "names", "[", "start_index", "-", "1", "]", "\n", "\n", "# append image names with directory information", "\n", "img_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "home_dir", ",", "img_name", "[", ":", "4", "]", ",", "img_name", ")", "\n", "\n", "imgs", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "num_imgs", "=", "len", "(", "imgs", ")", "\n", "\n", "return", "imgs", ",", "num_imgs", ",", "num_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v.__init__": [[215, 270], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "data_manager.iLIDSVID_i2v._check_before_run", "data_manager.iLIDSVID_i2v._prepare_split", "utils.utils.read_json", "print", "data_manager.iLIDSVID_i2v._process_train_data", "data_manager.iLIDSVID_i2v._process_test_data", "data_manager.iLIDSVID_i2v._process_test_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._check_before_run", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._prepare_split", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.read_json", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._process_train_data", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._process_test_data", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._process_test_data"], ["def", "__init__", "(", "self", ",", "root", "=", "'/data/datasets/'", ",", "split_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "join", "(", "root", ",", "'iLIDS-VID'", ")", "\n", "self", ".", "dataset_url", "=", "'http://www.eecs.qmul.ac.uk/~xiatian/iLIDS-VID/iLIDS-VID.tar'", "\n", "self", ".", "data_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'i-LIDS-VID'", ")", "\n", "self", ".", "split_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'train-test people splits'", ")", "\n", "self", ".", "split_mat_path", "=", "osp", ".", "join", "(", "self", ".", "split_dir", ",", "'train_test_splits_ilidsvid.mat'", ")", "\n", "self", ".", "split_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", "\n", "self", ".", "cam_1_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'i-LIDS-VID/sequences/cam1'", ")", "\n", "self", ".", "cam_2_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'i-LIDS-VID/sequences/cam2'", ")", "\n", "# self._download_data()", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "self", ".", "_prepare_split", "(", ")", "\n", "splits", "=", "read_json", "(", "self", ".", "split_path", ")", "\n", "if", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"split_id exceeds range, received {}, but expected between 0 and {}\"", ".", "format", "(", "split_id", ",", "len", "(", "splits", ")", "-", "1", ")", ")", "\n", "", "split", "=", "splits", "[", "split_id", "]", "\n", "train_dirs", ",", "test_dirs", "=", "split", "[", "'train'", "]", ",", "split", "[", "'test'", "]", "\n", "print", "(", "\"# train identites: {}, # test identites {}\"", ".", "format", "(", "len", "(", "train_dirs", ")", ",", "len", "(", "test_dirs", ")", ")", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_train_data", "(", "train_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_test_data", "(", "test_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_test_data", "(", "test_dirs", ",", "cam1", "=", "False", ",", "cam2", "=", "True", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> iLIDS-VID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._check_before_run": [[288, 296], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "data_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._prepare_split": [[297, 337], ["print", "os.exists", "os.exists", "print", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "range", "print", "print", "utils.utils.write_json", "scipy.io.loadmat", "set", "set", "sorted", "sorted", "splits.append", "list", "list", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.write_json"], ["", "", "def", "_prepare_split", "(", "self", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_path", ")", ":", "\n", "            ", "print", "(", "\"Creating splits\"", ")", "\n", "mat_split_data", "=", "loadmat", "(", "self", ".", "split_mat_path", ")", "[", "'ls_set'", "]", "\n", "\n", "num_splits", "=", "mat_split_data", ".", "shape", "[", "0", "]", "\n", "num_total_ids", "=", "mat_split_data", ".", "shape", "[", "1", "]", "\n", "assert", "num_splits", "==", "10", "\n", "assert", "num_total_ids", "==", "300", "\n", "num_ids_each", "=", "num_total_ids", "/", "2", "\n", "\n", "# pids in mat_split_data are indices, so we need to transform them", "\n", "# to real pids", "\n", "person_cam1_dirs", "=", "os", ".", "listdir", "(", "self", ".", "cam_1_path", ")", "\n", "person_cam2_dirs", "=", "os", ".", "listdir", "(", "self", ".", "cam_2_path", ")", "\n", "\n", "# make sure persons in one camera view can be found in the other camera view", "\n", "assert", "set", "(", "person_cam1_dirs", ")", "==", "set", "(", "person_cam2_dirs", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "for", "i_split", "in", "range", "(", "num_splits", ")", ":", "\n", "# first 50% for testing and the remaining for training, following Wang et al. ECCV'14.", "\n", "                ", "train_idxs", "=", "sorted", "(", "list", "(", "mat_split_data", "[", "i_split", ",", "num_ids_each", ":", "]", ")", ")", "\n", "test_idxs", "=", "sorted", "(", "list", "(", "mat_split_data", "[", "i_split", ",", ":", "num_ids_each", "]", ")", ")", "\n", "\n", "train_idxs", "=", "[", "int", "(", "i", ")", "-", "1", "for", "i", "in", "train_idxs", "]", "\n", "test_idxs", "=", "[", "int", "(", "i", ")", "-", "1", "for", "i", "in", "test_idxs", "]", "\n", "\n", "# transform pids to person dir names", "\n", "train_dirs", "=", "[", "person_cam1_dirs", "[", "i", "]", "for", "i", "in", "train_idxs", "]", "\n", "test_dirs", "=", "[", "person_cam1_dirs", "[", "i", "]", "for", "i", "in", "test_idxs", "]", "\n", "\n", "split", "=", "{", "'train'", ":", "train_dirs", ",", "'test'", ":", "test_dirs", "}", "\n", "splits", ".", "append", "(", "split", ")", "\n", "\n", "", "print", "(", "\"Totally {} splits are created, following Wang et al. ECCV'14\"", ".", "format", "(", "len", "(", "splits", ")", ")", ")", "\n", "print", "(", "\"Split file is saved to {}\"", ".", "format", "(", "self", ".", "split_path", ")", ")", "\n", "write_json", "(", "splits", ",", "self", ".", "split_path", ")", "\n", "\n", "", "print", "(", "\"Splits created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._process_train_data": [[338, 377], ["len", "len", "enumerate", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "glob.glob", "tuple", "num_imgs_per_tracklet.append", "os.join", "os.join", "len", "len", "os.join", "os.join", "len", "len", "tracklets.append", "range", "len", "tracklets.append", "tracklets.append"], "methods", ["None"], ["", "def", "_process_train_data", "(", "self", ",", "dirnames", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ",", "sampling_step", "=", "4", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dirnames", ")", "}", "\n", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "if", "cam1", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_1_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", "[", "0", ":", "1", "]", ",", "pid", ",", "0", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "if", "cam2", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_2_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "# tracklets.append((img_names, pid, 1))", "\n", "# dense sampling", "\n", "num_sampling", "=", "len", "(", "img_names", ")", "//", "sampling_step", "\n", "if", "num_sampling", "==", "0", ":", "\n", "                    ", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "idx", "in", "range", "(", "num_sampling", ")", ":", "\n", "                        ", "if", "idx", "==", "num_sampling", "-", "1", ":", "\n", "                            ", "tracklets", ".", "append", "(", "(", "img_names", "[", "idx", "*", "sampling_step", ":", "]", ",", "pid", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                            ", "tracklets", ".", "append", "(", "(", "img_names", "[", "idx", "*", "sampling_step", ":", "(", "idx", "+", "2", ")", "*", "sampling_step", "]", ",", "pid", ",", "1", ")", ")", "\n", "\n", "", "", "", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "num_pids", "=", "len", "(", "dirnames", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.iLIDSVID_i2v._process_test_data": [[378, 406], ["len", "len", "enumerate", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "len", "len", "os.join", "os.join", "len", "len"], "methods", ["None"], ["", "def", "_process_test_data", "(", "self", ",", "dirnames", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dirnames", ")", "}", "\n", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "if", "cam1", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_1_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", "[", "0", "]", ",", "pid", ",", "0", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "if", "cam2", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_2_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "1", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "num_pids", "=", "len", "(", "dirnames", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID.__init__": [[421, 489], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "data_manager.DukeMTMCVidReID._check_before_run", "print", "data_manager.DukeMTMCVidReID._process_dir", "data_manager.DukeMTMCVidReID._process_dir_dense", "data_manager.DukeMTMCVidReID._process_dir", "data_manager.DukeMTMCVidReID._process_dir", "print", "data_manager.DukeMTMCVidReID._extract_1stframe", "data_manager.DukeMTMCVidReID._extract_1stframe", "data_manager.DukeMTMCVidReID._extract_1stframe", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._check_before_run", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._process_dir_dense", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._extract_1stframe", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._extract_1stframe", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._extract_1stframe"], ["def", "__init__", "(", "self", ",", "root", "=", "'/data/datasets/'", ",", "min_seq_len", "=", "0", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "'DukeMTMC-VideoReID'", ")", "\n", "self", ".", "dataset_url", "=", "'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-VideoReID.zip'", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'gallery'", ")", "\n", "self", ".", "split_train_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_train.json'", ")", "\n", "self", ".", "split_train_dense_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_train_dense.json'", ")", "\n", "self", ".", "split_query_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_query.json'", ")", "\n", "self", ".", "split_gallery_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_gallery.json'", ")", "\n", "self", ".", "split_train_1stframe_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_train_1stframe.json'", ")", "\n", "self", ".", "split_query_1stframe_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_query_1stframe.json'", ")", "\n", "self", ".", "split_gallery_1stframe_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_gallery_1stframe.json'", ")", "\n", "\n", "self", ".", "min_seq_len", "=", "min_seq_len", "\n", "# self._download_data()", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "print", "(", "\"Note: if root path is changed, the previously generated json files need to be re-generated (so delete them first)\"", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "split_train_json_path", ",", "relabel", "=", "True", ")", "\n", "train_dense", ",", "num_train_tracklets_dense", ",", "num_train_pids_dense", ",", "num_imgs_train_dense", "=", "self", ".", "_process_dir_dense", "(", "self", ".", "train_dir", ",", "self", ".", "split_train_dense_json_path", ",", "relabel", "=", "True", ",", "sampling_step", "=", "32", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "self", ".", "split_query_json_path", ",", "relabel", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "self", ".", "split_gallery_json_path", ",", "relabel", "=", "False", ")", "\n", "\n", "print", "(", "\"the number of tracklets under dense sampling for train set: {}\"", ".", "format", "(", "num_train_tracklets_dense", ")", ")", "\n", "\n", "train_img", "=", "self", ".", "_extract_1stframe", "(", "self", ".", "train_dir", ",", "self", ".", "split_train_1stframe_json_path", ",", "relabel", "=", "True", ")", "\n", "query_img", "=", "self", ".", "_extract_1stframe", "(", "self", ".", "query_dir", ",", "self", ".", "split_query_1stframe_json_path", ",", "relabel", "=", "False", ")", "\n", "gallery_img", "=", "self", ".", "_extract_1stframe", "(", "self", ".", "gallery_dir", ",", "self", ".", "split_gallery_1stframe_json_path", ",", "relabel", "=", "False", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> DukeMTMC-VideoReID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "train_dense", "=", "train_dense", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "train_img", "=", "train_img", "\n", "self", ".", "query_img", "=", "query_img", "\n", "self", ".", "gallery_img", "=", "gallery_img", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._check_before_run": [[507, 517], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._process_dir": [[518, 580], ["os.exists", "os.exists", "print", "glob.glob", "print", "set", "len", "len", "print", "utils.utils.write_json", "print", "utils.utils.read_json", "os.join", "os.join", "int", "set.add", "int", "glob.glob", "len", "os.basename", "os.basename", "enumerate", "os.basename", "os.basename", "os.join", "os.join", "glob.glob", "len", "num_imgs_per_tracklet.append", "range", "os.basename", "os.basename", "tuple", "tracklets.append", "os.join", "os.join", "glob.glob", "tuple.append", "os.basename.find", "str().zfill", "os.join", "os.join", "len", "print", "int", "int", "str"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.write_json", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.read_json"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "json_path", ",", "relabel", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", "\n", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "pdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*'", ")", ")", "# avoid .DS_Store", "\n", "print", "(", "\"Processing {} with {} person identities\"", ".", "format", "(", "dir_path", ",", "len", "(", "pdirs", ")", ")", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "tdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pdir", ",", "'*'", ")", ")", "\n", "for", "tdir", "in", "tdirs", ":", "\n", "                ", "raw_img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*.jpg'", ")", ")", "\n", "num_imgs", "=", "len", "(", "raw_img_paths", ")", "\n", "\n", "if", "num_imgs", "<", "self", ".", "min_seq_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "num_imgs_per_tracklet", ".", "append", "(", "num_imgs", ")", "\n", "img_paths", "=", "[", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", ":", "\n", "# some tracklet starts from 0002 instead of 0001", "\n", "                    ", "img_idx_name", "=", "'F'", "+", "str", "(", "img_idx", "+", "1", ")", ".", "zfill", "(", "4", ")", "\n", "res", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*'", "+", "img_idx_name", "+", "'*.jpg'", ")", ")", "\n", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "                        ", "print", "(", "\"Warn: index name {} in {} is missing, jump to next\"", ".", "format", "(", "img_idx_name", ",", "tdir", ")", ")", "\n", "continue", "\n", "", "img_paths", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "", "img_name", "=", "osp", ".", "basename", "(", "img_paths", "[", "0", "]", ")", "\n", "if", "img_name", ".", "find", "(", "'_'", ")", "==", "-", "1", ":", "\n", "# old naming format: 0001C6F0099X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "5", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "# new naming format: 0001_C6_F0099_X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "6", "]", ")", "-", "1", "\n", "", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "", "num_pids", "=", "len", "(", "pid_container", ")", "\n", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._process_dir_dense": [[581, 653], ["os.exists", "os.exists", "print", "glob.glob", "print", "set", "len", "len", "print", "utils.utils.write_json", "print", "utils.utils.read_json", "os.join", "os.join", "int", "set.add", "int", "glob.glob", "len", "os.basename", "os.basename", "enumerate", "os.basename", "os.basename", "os.join", "os.join", "glob.glob", "len", "num_imgs_per_tracklet.append", "range", "os.basename", "os.basename", "tuple", "os.join", "os.join", "glob.glob", "tuple.append", "os.basename.find", "len", "tracklets.append", "range", "str().zfill", "os.join", "os.join", "len", "print", "int", "int", "tracklets.append", "tracklets.append", "str"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.write_json", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.read_json"], ["", "def", "_process_dir_dense", "(", "self", ",", "dir_path", ",", "json_path", ",", "relabel", ",", "sampling_step", "=", "32", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", "\n", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "pdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*'", ")", ")", "# avoid .DS_Store", "\n", "print", "(", "\"Processing {} with {} person identities\"", ".", "format", "(", "dir_path", ",", "len", "(", "pdirs", ")", ")", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "tdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pdir", ",", "'*'", ")", ")", "\n", "for", "tdir", "in", "tdirs", ":", "\n", "                ", "raw_img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*.jpg'", ")", ")", "\n", "num_imgs", "=", "len", "(", "raw_img_paths", ")", "\n", "\n", "if", "num_imgs", "<", "self", ".", "min_seq_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "num_imgs_per_tracklet", ".", "append", "(", "num_imgs", ")", "\n", "img_paths", "=", "[", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", ":", "\n", "# some tracklet starts from 0002 instead of 0001", "\n", "                    ", "img_idx_name", "=", "'F'", "+", "str", "(", "img_idx", "+", "1", ")", ".", "zfill", "(", "4", ")", "\n", "res", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*'", "+", "img_idx_name", "+", "'*.jpg'", ")", ")", "\n", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "                        ", "print", "(", "\"Warn: index name {} in {} is missing, jump to next\"", ".", "format", "(", "img_idx_name", ",", "tdir", ")", ")", "\n", "continue", "\n", "", "img_paths", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "", "img_name", "=", "osp", ".", "basename", "(", "img_paths", "[", "0", "]", ")", "\n", "if", "img_name", ".", "find", "(", "'_'", ")", "==", "-", "1", ":", "\n", "# old naming format: 0001C6F0099X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "5", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "# new naming format: 0001_C6_F0099_X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "6", "]", ")", "-", "1", "\n", "", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "\n", "# dense sampling", "\n", "num_sampling", "=", "len", "(", "img_paths", ")", "//", "sampling_step", "\n", "if", "num_sampling", "==", "0", ":", "\n", "                    ", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "idx", "in", "range", "(", "num_sampling", ")", ":", "\n", "                        ", "if", "idx", "==", "num_sampling", "-", "1", ":", "\n", "                            ", "tracklets", ".", "append", "(", "(", "img_paths", "[", "idx", "*", "sampling_step", ":", "]", ",", "pid", ",", "camid", ")", ")", "\n", "", "else", ":", "\n", "                            ", "tracklets", ".", "append", "(", "(", "img_paths", "[", "idx", "*", "sampling_step", ":", "(", "idx", "+", "1", ")", "*", "sampling_step", "]", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "", "", "", "", "num_pids", "=", "len", "(", "pid_container", ")", "\n", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.DukeMTMCVidReID._extract_1stframe": [[654, 708], ["os.exists", "os.exists", "print", "glob.glob", "print", "set", "print", "utils.utils.write_json", "print", "utils.utils.read_json", "os.join", "os.join", "int", "set.add", "int", "glob.glob", "len", "os.basename", "os.basename", "enumerate", "os.basename", "os.basename", "os.join", "os.join", "glob.glob", "len", "range", "os.basename", "os.basename", "tuple", "tracklets.append", "os.join", "os.join", "glob.glob", "tuple.append", "os.basename.find", "str().zfill", "os.join", "os.join", "len", "print", "int", "int", "str"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.write_json", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.read_json"], ["", "def", "_extract_1stframe", "(", "self", ",", "dir_path", ",", "json_path", ",", "relabel", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", "\n", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "pdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*'", ")", ")", "# avoid .DS_Store", "\n", "print", "(", "\"Processing {} with {} person identities\"", ".", "format", "(", "dir_path", ",", "len", "(", "pdirs", ")", ")", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "tracklets", "=", "[", "]", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "tdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pdir", ",", "'*'", ")", ")", "\n", "for", "tdir", "in", "tdirs", ":", "\n", "                ", "raw_img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*.jpg'", ")", ")", "\n", "num_imgs", "=", "len", "(", "raw_img_paths", ")", "\n", "\n", "if", "num_imgs", "<", "self", ".", "min_seq_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "img_paths", "=", "[", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", ":", "\n", "# some tracklet starts from 0002 instead of 0001", "\n", "                    ", "img_idx_name", "=", "'F'", "+", "str", "(", "img_idx", "+", "1", ")", ".", "zfill", "(", "4", ")", "\n", "res", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*'", "+", "img_idx_name", "+", "'*.jpg'", ")", ")", "\n", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "                        ", "print", "(", "\"Warn: index name {} in {} is missing, jump to next\"", ".", "format", "(", "img_idx_name", ",", "tdir", ")", ")", "\n", "continue", "\n", "", "img_paths", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "", "img_name", "=", "osp", ".", "basename", "(", "img_paths", "[", "0", "]", ")", "\n", "if", "img_name", ".", "find", "(", "'_'", ")", "==", "-", "1", ":", "\n", "# old naming format: 0001C6F0099X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "5", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "# new naming format: 0001_C6_F0099_X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "6", "]", ")", "-", "1", "\n", "", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", "[", "0", "]", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.get_names": [[718, 720], ["__factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__factory", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.data_manager.init_dataset": [[721, 725], ["__factory.keys", "KeyError"], "function", ["None"], ["", "def", "init_dataset", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown dataset: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__factory", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.samplers.RandomIdentitySampler.__init__": [[22, 39], ["collections.defaultdict", "enumerate", "list", "len", "samplers.RandomIdentitySampler.index_dic[].append", "samplers.RandomIdentitySampler.index_dic.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n", "# compute number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.samplers.RandomIdentitySampler.__iter__": [[40, 62], ["random.shuffle", "iter", "copy.deepcopy", "random.shuffle", "ret.extend", "len", "numpy.random.choice", "batch_idxs.append", "len", "list_container.append"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "list_container", "=", "[", "]", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "list_container", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "list_container", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "batch_idxs", "in", "list_container", ":", "\n", "            ", "ret", ".", "extend", "(", "batch_idxs", ")", "\n", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.samplers.RandomIdentitySampler.__len__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "", "", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.compute_ap_cmc": [[6, 32], ["numpy.zeros", "numpy.in1d", "len", "numpy.in1d", "numpy.argwhere", "rows_good.flatten.flatten", "range", "len"], "function", ["None"], ["def", "compute_ap_cmc", "(", "index", ",", "good_index", ",", "junk_index", ")", ":", "\n", "    ", "ap", "=", "0", "\n", "cmc", "=", "np", ".", "zeros", "(", "len", "(", "index", ")", ")", "\n", "\n", "# remove junk_index", "\n", "mask", "=", "np", ".", "in1d", "(", "index", ",", "junk_index", ",", "invert", "=", "True", ")", "\n", "index", "=", "index", "[", "mask", "]", "\n", "\n", "# find good_index index", "\n", "ngood", "=", "len", "(", "good_index", ")", "\n", "mask", "=", "np", ".", "in1d", "(", "index", ",", "good_index", ")", "\n", "rows_good", "=", "np", ".", "argwhere", "(", "mask", "==", "True", ")", "\n", "rows_good", "=", "rows_good", ".", "flatten", "(", ")", "\n", "\n", "cmc", "[", "rows_good", "[", "0", "]", ":", "]", "=", "1.0", "\n", "for", "i", "in", "range", "(", "ngood", ")", ":", "\n", "        ", "d_recall", "=", "1.0", "/", "ngood", "\n", "precision", "=", "(", "i", "+", "1", ")", "*", "1.0", "/", "(", "rows_good", "[", "i", "]", "+", "1", ")", "\n", "if", "rows_good", "[", "i", "]", "!=", "0", ":", "\n", "            ", "old_precision", "=", "i", "*", "1.0", "/", "rows_good", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "old_precision", "=", "1.0", "\n", "", "ap", "=", "ap", "+", "d_recall", "*", "(", "old_precision", "+", "precision", ")", "/", "2", "\n", "# ap = ap + d_recall*precision", "\n", "\n", "", "return", "ap", ",", "cmc", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.evaluate": [[34, 69], ["numpy.argsort", "numpy.zeros", "range", "len", "numpy.argwhere", "numpy.argwhere", "numpy.setdiff1d", "numpy.intersect1d", "eval_metrics.compute_ap_cmc", "print"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.eval_metrics.compute_ap_cmc"], ["", "def", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "index", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "# from small to large", "\n", "\n", "num_no_gt", "=", "0", "# num of query imgs without groundtruth", "\n", "num_r1", "=", "0", "\n", "CMC", "=", "np", ".", "zeros", "(", "len", "(", "g_pids", ")", ")", "\n", "AP", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "num_q", ")", ":", "\n", "# groundtruth index", "\n", "        ", "query_index", "=", "np", ".", "argwhere", "(", "g_pids", "==", "q_pids", "[", "i", "]", ")", "\n", "camera_index", "=", "np", ".", "argwhere", "(", "g_camids", "==", "q_camids", "[", "i", "]", ")", "\n", "good_index", "=", "np", ".", "setdiff1d", "(", "query_index", ",", "camera_index", ",", "assume_unique", "=", "True", ")", "\n", "if", "good_index", ".", "size", "==", "0", ":", "\n", "            ", "num_no_gt", "+=", "1", "\n", "continue", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "", "junk_index", "=", "np", ".", "intersect1d", "(", "query_index", ",", "camera_index", ")", "\n", "\n", "ap_tmp", ",", "CMC_tmp", "=", "compute_ap_cmc", "(", "index", "[", "i", "]", ",", "good_index", ",", "junk_index", ")", "\n", "if", "CMC_tmp", "[", "0", "]", "==", "1", ":", "\n", "            ", "num_r1", "+=", "1", "\n", "", "CMC", "=", "CMC", "+", "CMC_tmp", "\n", "AP", "+=", "ap_tmp", "\n", "\n", "", "if", "num_no_gt", ">", "0", ":", "\n", "        ", "print", "(", "\"{} query imgs do not have groundtruth.\"", ".", "format", "(", "num_no_gt", ")", ")", "\n", "\n", "# print(\"R1:{}\".format(num_r1))", "\n", "\n", "", "CMC", "=", "CMC", "/", "(", "num_q", "-", "num_no_gt", ")", "\n", "mAP", "=", "AP", "/", "(", "num_q", "-", "num_no_gt", ")", "\n", "\n", "return", "CMC", ",", "mAP", "\n", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.VideoDataset.__init__": [[66, 75], ["get_loader"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.VideoDataset.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.VideoDataset.__getitem__": [[79, 102], ["video_loader.VideoDataset.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "video_loader.VideoDataset.temporal_transform", "video_loader.VideoDataset.spatial_transform.randomize_parameters", "video_loader.VideoDataset.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Random2DTranslation.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (clip, pid, camid) where pid is identity of the clip.\n        \"\"\"", "\n", "img_paths", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "img_paths", "=", "self", ".", "temporal_transform", "(", "img_paths", ")", "\n", "\n", "", "clip", "=", "self", ".", "loader", "(", "img_paths", ")", "\n", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "\n", "# trans T x C x H x W to C x T x H x W", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "return", "clip", ",", "pid", ",", "camid", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.ImageDataset.__init__": [[116, 119], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.ImageDataset.__len__": [[120, 122], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.ImageDataset.__getitem__": [[123, 139], ["video_loader.image_loader", "video_loader.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (img, pid, camid) where pid is identity of the clip.\n        \"\"\"", "\n", "img_path", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "\n", "img", "=", "image_loader", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "pid", ",", "camid", "", "", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.pil_loader": [[10, 15], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.accimage_loader": [[16, 23], ["accimage.Image", "video_loader.pil_loader"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.get_default_image_loader": [[24, 30], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.image_loader": [[31, 37], ["get_image_backend", "video_loader.accimage_loader", "video_loader.pil_loader"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.accimage_loader", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.pil_loader"], ["", "", "def", "image_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.video_loader": [[38, 47], ["os.path.exists", "video.append", "video_loader.image_loader"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.image_loader"], ["", "", "def", "video_loader", "(", "img_paths", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "image_path", "in", "img_paths", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.get_default_video_loader": [[48, 51], ["video_loader.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.video_loader.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.__init__": [[24, 26], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.reset": [[27, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.AverageMeter.update": [[33, 38], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.__init__": [[50, 56], ["utils.mkdir_if_missing", "open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.__del__": [[57, 59], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.__enter__": [[60, 62], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.__exit__": [[63, 65], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.write": [[66, 70], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.write", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.flush": [[71, 76], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.flush", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.close": [[77, 81], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.close", "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.mkdir_if_missing": [[11, 18], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.save_checkpoint": [[39, 44], ["utils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'best_model.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.read_json": [[82, 86], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.write_json": [[87, 91], ["utils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.guxinqian_TKP.utils.utils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.losses.HeterogeneousTripletLoss.__init__": [[22, 30], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss", "KeyError"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ",", "distance", "=", "'euclidean'", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "HeterogeneousTripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "distance", "not", "in", "[", "'euclidean'", ",", "'consine'", "]", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported distance: {}\"", ".", "format", "(", "distance", ")", ")", "\n", "", "self", ".", "distance", "=", "distance", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.losses.HeterogeneousTripletLoss.forward": [[31, 70], ["inputs1.size", "inputs2.size", "targets1.cuda.cuda.expand().t().eq", "range", "torch.cat", "torch.cat", "torch.ones_like", "losses.HeterogeneousTripletLoss.ranking_loss", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets1.cuda.cuda.cuda", "targets2.cuda.cuda.cuda", "targets2.cuda.cuda.expand", "torch.cat.append", "torch.cat.append", "torch.pow().sum().expand.t", "inputs2.t", "torch.norm", "torch.norm", "inputs1.div", "inputs2.div", "targets1.cuda.cuda.expand().t", "[].max().unsqueeze", "[].min().unsqueeze", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "torch.norm.expand_as", "torch.norm.expand_as", "torch.mm", "inputs2.div.t", "targets1.cuda.cuda.expand", "[].max", "[].min", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ",", "targets1", ",", "targets2", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: feature matrix with shape (batch_size, feat_dim)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "m", "=", "inputs1", ".", "size", "(", "0", ")", "\n", "n", "=", "inputs2", ".", "size", "(", "0", ")", "\n", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "if", "self", ".", "distance", "==", "'euclidean'", ":", "\n", "            ", "dist1", "=", "torch", ".", "pow", "(", "inputs1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "pow", "(", "inputs2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", "\n", "dist", "=", "dist1", "+", "dist2", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs1", ",", "inputs2", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "", "elif", "self", ".", "distance", "==", "'consine'", ":", "\n", "            ", "fnorm1", "=", "torch", ".", "norm", "(", "inputs1", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "fnorm2", "=", "torch", ".", "norm", "(", "inputs2", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "l2norm1", "=", "inputs1", ".", "div", "(", "fnorm1", ".", "expand_as", "(", "inputs1", ")", ")", "\n", "l2norm2", "=", "inputs2", ".", "div", "(", "fnorm2", ".", "expand_as", "(", "inputs2", ")", ")", "\n", "dist", "=", "-", "torch", ".", "mm", "(", "l2norm1", ",", "l2norm2", ".", "t", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "use_gpu", ":", "\n", "            ", "targets1", "=", "targets1", ".", "cuda", "(", ")", "\n", "targets2", "=", "targets2", ".", "cuda", "(", ")", "\n", "# For each anchor, find the hardest positive and negative", "\n", "", "mask", "=", "targets1", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", ".", "eq", "(", "targets2", ".", "expand", "(", "m", ",", "n", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.losses.FeatureBasedTKP.__init__": [[73, 76], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bp_to_vid", "=", "False", ")", ":", "\n", "        ", "super", "(", "FeatureBasedTKP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bp_to_vid", "=", "bp_to_vid", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.losses.FeatureBasedTKP.forward": [[77, 89], ["images.size", "torch.pow().sum", "torch.pow().sum.mean", "images.size", "videos.detach.detach.size", "videos.detach.detach.detach", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "videos", ")", ":", "\n", "        ", "n", ",", "c", "=", "images", ".", "size", "(", ")", "\n", "assert", "(", "images", ".", "size", "(", ")", "==", "videos", ".", "size", "(", ")", ")", "\n", "\n", "# Do not BP to videos features", "\n", "if", "not", "self", ".", "bp_to_vid", ":", "\n", "            ", "videos", "=", "videos", ".", "detach", "(", ")", "\n", "\n", "", "dist", "=", "torch", ".", "pow", "(", "images", "-", "videos", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "loss", "=", "dist", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.losses.SimilarityBasedTKP.__init__": [[92, 96], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "distance", "=", "'euclidean'", ",", "bp_to_vid", "=", "False", ")", ":", "\n", "        ", "super", "(", "SimilarityBasedTKP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "distance", "=", "distance", "\n", "self", ".", "bp_to_vid", "=", "bp_to_vid", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.utils.losses.SimilarityBasedTKP.forward": [[97, 125], ["images.div.div.size", "torch.pow().mean", "images.div.div.size", "videos.div.div.size", "videos.div.div.detach", "torch.pow().sum().expand", "torch.mm.addmm_", "torch.mm.clamp().sqrt", "torch.pow().sum().expand", "torch.mm.addmm_", "torch.mm.clamp().sqrt", "torch.mm.t", "images.div.div.t", "torch.mm.t", "videos.div.div.t", "torch.norm", "torch.norm", "images.div.div.div", "videos.div.div.div", "torch.mm", "torch.mm", "torch.pow", "torch.pow().sum", "torch.mm.clamp", "torch.pow().sum", "torch.mm.clamp", "torch.norm.expand_as", "torch.norm.expand_as", "images.div.div.t", "videos.div.div.t", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "videos", ")", ":", "\n", "        ", "n", ",", "c", "=", "images", ".", "size", "(", ")", "\n", "assert", "(", "images", ".", "size", "(", ")", "==", "videos", ".", "size", "(", ")", ")", "\n", "\n", "# Do not BP to videos features", "\n", "if", "not", "self", ".", "bp_to_vid", ":", "\n", "            ", "videos", "=", "videos", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "distance", "==", "'euclidean'", ":", "\n", "            ", "img_distmat", "=", "torch", ".", "pow", "(", "images", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "img_distmat", "=", "img_distmat", "+", "img_distmat", ".", "t", "(", ")", "\n", "img_distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "images", ",", "images", ".", "t", "(", ")", ")", "\n", "img_distmat", "=", "img_distmat", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "vid_distmat", "=", "torch", ".", "pow", "(", "videos", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "vid_distmat", "=", "vid_distmat", "+", "vid_distmat", ".", "t", "(", ")", "\n", "vid_distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "videos", ",", "videos", ".", "t", "(", ")", ")", "\n", "vid_distmat", "=", "vid_distmat", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "", "elif", "self", ".", "distance", "==", "'consine'", ":", "\n", "            ", "img_norm", "=", "torch", ".", "norm", "(", "images", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "vid_norm", "=", "torch", ".", "norm", "(", "videos", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "images", "=", "images", ".", "div", "(", "img_norm", ".", "expand_as", "(", "images", ")", ")", "\n", "videos", "=", "videos", ".", "div", "(", "vid_norm", ".", "expand_as", "(", "videos", ")", ")", "\n", "img_distmat", "=", "torch", ".", "mm", "(", "images", ",", "images", ".", "t", "(", ")", ")", "\n", "vid_distmat", "=", "torch", ".", "mm", "(", "videos", ",", "videos", ".", "t", "(", ")", ")", "\n", "\n", "", "loss", "=", "torch", ".", "pow", "(", "img_distmat", "-", "vid_distmat", ",", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.Bottleneck3d.__init__": [[42, 57], ["torch.Module.__init__", "models.inflate.inflate_conv", "models.inflate.inflate_batch_norm", "models.inflate.inflate_conv", "models.inflate.inflate_batch_norm", "models.inflate.inflate_conv", "models.inflate.inflate_batch_norm", "torch.ReLU", "torch.ReLU", "ResNet.Bottleneck3d._inflate_downsample"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_conv", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_conv", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_conv", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.Bottleneck3d._inflate_downsample"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck2d", ")", ":", "\n", "        ", "super", "(", "Bottleneck3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "inflate", ".", "inflate_conv", "(", "bottleneck2d", ".", "conv1", ",", "time_dim", "=", "1", ")", "\n", "self", ".", "bn1", "=", "inflate", ".", "inflate_batch_norm", "(", "bottleneck2d", ".", "bn1", ")", "\n", "self", ".", "conv2", "=", "inflate", ".", "inflate_conv", "(", "bottleneck2d", ".", "conv2", ",", "time_dim", "=", "1", ")", "\n", "self", ".", "bn2", "=", "inflate", ".", "inflate_batch_norm", "(", "bottleneck2d", ".", "bn2", ")", "\n", "self", ".", "conv3", "=", "inflate", ".", "inflate_conv", "(", "bottleneck2d", ".", "conv3", ",", "time_dim", "=", "1", ")", "\n", "self", ".", "bn3", "=", "inflate", ".", "inflate_batch_norm", "(", "bottleneck2d", ".", "bn3", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "bottleneck2d", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "self", ".", "_inflate_downsample", "(", "bottleneck2d", ".", "downsample", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.Bottleneck3d._inflate_downsample": [[58, 64], ["torch.Sequential", "torch.Sequential", "models.inflate.inflate_conv", "models.inflate.inflate_batch_norm"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_conv", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_batch_norm"], ["", "", "def", "_inflate_downsample", "(", "self", ",", "downsample2d", ",", "time_stride", "=", "1", ")", ":", "\n", "        ", "downsample3d", "=", "nn", ".", "Sequential", "(", "\n", "inflate", ".", "inflate_conv", "(", "downsample2d", "[", "0", "]", ",", "time_dim", "=", "1", ",", "\n", "time_stride", "=", "time_stride", ")", ",", "\n", "inflate", ".", "inflate_batch_norm", "(", "downsample2d", "[", "1", "]", ")", ")", "\n", "return", "downsample3d", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.Bottleneck3d.forward": [[65, 85], ["ResNet.Bottleneck3d.conv1", "ResNet.Bottleneck3d.bn1", "ResNet.Bottleneck3d.relu", "ResNet.Bottleneck3d.conv2", "ResNet.Bottleneck3d.bn2", "ResNet.Bottleneck3d.relu", "ResNet.Bottleneck3d.conv3", "ResNet.Bottleneck3d.bn3", "ResNet.Bottleneck3d.relu", "ResNet.Bottleneck3d.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50.__init__": [[89, 105], ["torch.Module.__init__", "torchvision.models.resnet50", "models.inflate.inflate_conv", "models.inflate.inflate_batch_norm", "torch.ReLU", "torch.ReLU", "models.inflate.inflate_pool", "ResNet.VidNonLocalResNet50._inflate_reslayer", "ResNet.VidNonLocalResNet50._inflate_reslayer", "ResNet.VidNonLocalResNet50._inflate_reslayer", "ResNet.VidNonLocalResNet50._inflate_reslayer"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_conv", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_batch_norm", "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_pool", "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50._inflate_reslayer", "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50._inflate_reslayer", "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50._inflate_reslayer", "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50._inflate_reslayer"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VidNonLocalResNet50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resnet2d", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "resnet2d", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet2d", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "conv1", "=", "inflate", ".", "inflate_conv", "(", "resnet2d", ".", "conv1", ",", "time_dim", "=", "1", ")", "\n", "self", ".", "bn1", "=", "inflate", ".", "inflate_batch_norm", "(", "resnet2d", ".", "bn1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "inflate", ".", "inflate_pool", "(", "resnet2d", ".", "maxpool", ",", "time_dim", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_inflate_reslayer", "(", "resnet2d", ".", "layer1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_inflate_reslayer", "(", "resnet2d", ".", "layer2", ",", "nonlocal_idx", "=", "[", "1", ",", "3", "]", ",", "nonlocal_channels", "=", "512", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_inflate_reslayer", "(", "resnet2d", ".", "layer3", ",", "nonlocal_idx", "=", "[", "1", ",", "3", ",", "5", "]", ",", "nonlocal_channels", "=", "1024", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_inflate_reslayer", "(", "resnet2d", ".", "layer4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50._inflate_reslayer": [[106, 117], ["enumerate", "torch.Sequential", "torch.Sequential", "ResNet.Bottleneck3d", "reslayers3d.append", "models.non_local.NONLocalBlock3D", "reslayers3d.append"], "methods", ["None"], ["", "def", "_inflate_reslayer", "(", "self", ",", "reslayer2d", ",", "nonlocal_idx", "=", "[", "]", ",", "nonlocal_channels", "=", "0", ")", ":", "\n", "        ", "reslayers3d", "=", "[", "]", "\n", "for", "i", ",", "layer2d", "in", "enumerate", "(", "reslayer2d", ")", ":", "\n", "            ", "layer3d", "=", "Bottleneck3d", "(", "layer2d", ")", "\n", "reslayers3d", ".", "append", "(", "layer3d", ")", "\n", "\n", "if", "i", "in", "nonlocal_idx", ":", "\n", "                ", "non_local_block", "=", "non_local", ".", "NONLocalBlock3D", "(", "nonlocal_channels", ",", "sub_sample", "=", "True", ")", "\n", "reslayers3d", ".", "append", "(", "non_local_block", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "reslayers3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.VidNonLocalResNet50.forward": [[118, 142], ["ResNet.VidNonLocalResNet50.conv1", "ResNet.VidNonLocalResNet50.bn1", "ResNet.VidNonLocalResNet50.relu", "ResNet.VidNonLocalResNet50.maxpool", "ResNet.VidNonLocalResNet50.layer1", "ResNet.VidNonLocalResNet50.layer2", "ResNet.VidNonLocalResNet50.layer3", "ResNet.VidNonLocalResNet50.layer4", "x.view.view.size", "x.view.view.permute().contiguous", "x.view.view.view", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "f.mean.mean.view", "f.mean.mean.view", "f.mean.mean.mean", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", "*", "t", ",", "c", ",", "h", ",", "w", ")", "\n", "f", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "f", "=", "f", ".", "view", "(", "b", ",", "t", ",", "-", "1", ")", "\n", "frame_feature", "=", "f", ".", "view", "(", "b", "*", "t", ",", "-", "1", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "f", "\n", "\n", "", "f", "=", "f", ".", "mean", "(", "1", ")", "\n", "\n", "return", "f", ",", "frame_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.ImgResNet50.__init__": [[145, 152], ["torch.Module.__init__", "torchvision.models.resnet50", "torch.Sequential", "torch.Sequential", "list", "torchvision.models.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImgResNet50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.ImgResNet50.forward": [[154, 160], ["ResNet.ImgResNet50.base", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "f.view.view.view", "f.view.view.size", "ResNet.ImgResNet50.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "f", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "f", "=", "f", ".", "view", "(", "f", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.Classifier.__init__": [[163, 169], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "ResNet.Classifier.classifier.apply"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "625", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# classifier using Random initialization", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.Classifier.forward": [[170, 174], ["ResNet.Classifier.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f", ")", ":", "\n", "        ", "y", "=", "self", ".", "classifier", "(", "f", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.weights_init_kaiming": [[18, 31], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# init.kaiming_normal(m.weight.data, a=0, mode='fan_in')", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.ResNet.weights_init_classifier": [[33, 38], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "std", "=", "0.001", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.non_local._NonLocalBlockND.__init__": [[10, 77], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "non_local._NonLocalBlockND.modules", "torch.nn.Sequential", "conv_nd", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "conv_nd", "bn", "m.weight.data.normal_", "isinstance", "max_pool", "max_pool", "max_pool", "max_pool", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool", "=", "nn", ".", "MaxPool3d", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool", "=", "nn", ".", "MaxPool2d", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool", "=", "nn", ".", "MaxPool1d", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "theta", "=", "conv_nd", "(", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "sub_sample", ":", "\n", "            ", "if", "dimension", "==", "3", ":", "\n", "                ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool", "(", "(", "1", ",", "2", ",", "2", ")", ")", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool", "(", "(", "1", ",", "2", ",", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool", "(", "kernel_size", "=", "2", ")", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool", "(", "kernel_size", "=", "2", ")", ")", "\n", "\n", "", "", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "self", ".", "inter_channels", ",", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "self", ".", "inter_channels", ",", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "# init", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "conv_nd", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "bn", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "if", "bn_layer", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ".", "data", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ".", "data", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.non_local._NonLocalBlockND.forward": [[79, 103], ["x.size", "non_local._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local._NonLocalBlockND.theta().view", "theta_x.permute.permute.permute", "non_local._NonLocalBlockND.phi().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "non_local._NonLocalBlockND.permute().contiguous", "non_local._NonLocalBlockND.view", "non_local._NonLocalBlockND.W", "non_local._NonLocalBlockND.g", "non_local._NonLocalBlockND.theta", "non_local._NonLocalBlockND.phi", "non_local._NonLocalBlockND.permute", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :return:\n        '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.non_local.NONLocalBlock1D.__init__": [[106, 111], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.non_local.NONLocalBlock2D.__init__": [[114, 119], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.non_local.NONLocalBlock3D.__init__": [[122, 127], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_conv": [[6, 40], ["torch.Conv3d", "torch.Parameter", "torch.zeros", "torch.zeros", "weight_2d.unsqueeze().repeat.unsqueeze().repeat", "weight_2d.unsqueeze().repeat", "weight_2d.unsqueeze().repeat.unsqueeze", "weight_2d.unsqueeze"], "function", ["None"], ["def", "inflate_conv", "(", "conv2d", ",", "\n", "time_dim", "=", "3", ",", "\n", "time_padding", "=", "0", ",", "\n", "time_stride", "=", "1", ",", "\n", "time_dilation", "=", "1", ",", "\n", "center", "=", "False", ")", ":", "\n", "# To preserve activations, padding should be by continuity and not zero", "\n", "# or no padding in time dimension", "\n", "    ", "kernel_dim", "=", "(", "time_dim", ",", "conv2d", ".", "kernel_size", "[", "0", "]", ",", "conv2d", ".", "kernel_size", "[", "1", "]", ")", "\n", "padding", "=", "(", "time_padding", ",", "conv2d", ".", "padding", "[", "0", "]", ",", "conv2d", ".", "padding", "[", "1", "]", ")", "\n", "stride", "=", "(", "time_stride", ",", "conv2d", ".", "stride", "[", "0", "]", ",", "conv2d", ".", "stride", "[", "0", "]", ")", "\n", "dilation", "=", "(", "time_dilation", ",", "conv2d", ".", "dilation", "[", "0", "]", ",", "conv2d", ".", "dilation", "[", "1", "]", ")", "\n", "conv3d", "=", "nn", ".", "Conv3d", "(", "\n", "conv2d", ".", "in_channels", ",", "\n", "conv2d", ".", "out_channels", ",", "\n", "kernel_dim", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "stride", ")", "\n", "# Repeat filter time_dim times along time dimension", "\n", "weight_2d", "=", "conv2d", ".", "weight", ".", "data", "\n", "if", "center", ":", "\n", "        ", "weight_3d", "=", "torch", ".", "zeros", "(", "*", "weight_2d", ".", "shape", ")", "\n", "weight_3d", "=", "weight_3d", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "time_dim", ",", "1", ",", "1", ")", "\n", "middle_idx", "=", "time_dim", "//", "2", "\n", "weight_3d", "[", ":", ",", ":", ",", "middle_idx", ",", ":", ",", ":", "]", "=", "weight_2d", "\n", "", "else", ":", "\n", "        ", "weight_3d", "=", "weight_2d", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "time_dim", ",", "1", ",", "1", ")", "\n", "weight_3d", "=", "weight_3d", "/", "time_dim", "\n", "\n", "# Assign new params", "\n", "", "conv3d", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight_3d", ")", "\n", "conv3d", ".", "bias", "=", "conv2d", ".", "bias", "\n", "return", "conv3d", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_linear": [[42, 55], ["torch.Linear", "linear2d.weight.data.repeat", "torch.Parameter"], "function", ["None"], ["", "def", "inflate_linear", "(", "linear2d", ",", "time_dim", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        time_dim: final time dimension of the features\n    \"\"\"", "\n", "linear3d", "=", "nn", ".", "Linear", "(", "linear2d", ".", "in_features", "*", "time_dim", ",", "\n", "linear2d", ".", "out_features", ")", "\n", "weight3d", "=", "linear2d", ".", "weight", ".", "data", ".", "repeat", "(", "1", ",", "time_dim", ")", "\n", "weight3d", "=", "weight3d", "/", "time_dim", "\n", "\n", "linear3d", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight3d", ")", "\n", "linear3d", ".", "bias", "=", "linear2d", ".", "bias", "\n", "return", "linear3d", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_batch_norm": [[57, 66], ["torch.BatchNorm3d"], "function", ["None"], ["", "def", "inflate_batch_norm", "(", "batch2d", ")", ":", "\n", "# In pytorch 0.2.0 the 2d and 3d versions of batch norm", "\n", "# work identically except for the check that verifies the", "\n", "# input dimensions", "\n", "\n", "    ", "batch3d", "=", "nn", ".", "BatchNorm3d", "(", "batch2d", ".", "num_features", ")", "\n", "# retrieve 3d _check_input_dim function", "\n", "batch2d", ".", "_check_input_dim", "=", "batch3d", ".", "_check_input_dim", "\n", "return", "batch2d", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.inflate.inflate_pool": [[68, 92], ["isinstance", "torch.MaxPool3d", "isinstance", "torch.AvgPool3d", "ValueError", "type"], "function", ["None"], ["", "def", "inflate_pool", "(", "pool2d", ",", "\n", "time_dim", "=", "1", ",", "\n", "time_padding", "=", "0", ",", "\n", "time_stride", "=", "None", ",", "\n", "time_dilation", "=", "1", ")", ":", "\n", "    ", "kernel_dim", "=", "(", "time_dim", ",", "pool2d", ".", "kernel_size", ",", "pool2d", ".", "kernel_size", ")", "\n", "padding", "=", "(", "time_padding", ",", "pool2d", ".", "padding", ",", "pool2d", ".", "padding", ")", "\n", "if", "time_stride", "is", "None", ":", "\n", "        ", "time_stride", "=", "time_dim", "\n", "", "stride", "=", "(", "time_stride", ",", "pool2d", ".", "stride", ",", "pool2d", ".", "stride", ")", "\n", "if", "isinstance", "(", "pool2d", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "        ", "dilation", "=", "(", "time_dilation", ",", "pool2d", ".", "dilation", ",", "pool2d", ".", "dilation", ")", "\n", "pool3d", "=", "nn", ".", "MaxPool3d", "(", "\n", "kernel_dim", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "pool2d", ".", "ceil_mode", ")", "\n", "", "elif", "isinstance", "(", "pool2d", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "        ", "pool3d", "=", "nn", ".", "AvgPool3d", "(", "kernel_dim", ",", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'{} is not among known pooling classes'", ".", "format", "(", "type", "(", "pool2d", ")", ")", ")", "\n", "", "return", "pool3d", "\n", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.get_names": [[11, 13], ["__factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__factory", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.models.__init__.init_model": [[14, 18], ["__factory.keys", "KeyError"], "function", ["None"], ["", "def", "init_model", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown model: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__factory", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Compose.__init__": [[27, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Compose.__call__": [[30, 34], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Compose.randomize_parameters": [[35, 38], ["t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Random2DTranslation.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "randomize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.ToTensor.__init__": [[46, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "norm_value", "=", "norm_value", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.ToTensor.__call__": [[49, 90], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL.Image or numpy.ndarray): Image to be converted to tensor.\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.ToTensor.randomize_parameters": [[91, 93], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Normalize.__init__": [[106, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Normalize.__call__": [[110, 121], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Normalize.randomize_parameters": [[122, 124], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Scale.__init__": [[138, 144], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "\n", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "\n", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Scale.__call__": [[145, 166], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", "[", ":", ":", "-", "1", "]", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Scale.randomize_parameters": [[167, 169], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.RandomCrop.__init__": [[179, 184], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.RandomCrop.__call__": [[185, 198], ["int", "int", "img.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "x1", "=", "int", "(", "round", "(", "self", ".", "tl_x", "*", "(", "w", "-", "tw", ")", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "self", ".", "tl_y", "*", "(", "h", "-", "th", ")", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.RandomCrop.randomize_parameters": [[199, 202], ["random.random", "random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.CenterCrop.__init__": [[212, 217], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.CenterCrop.__call__": [[218, 230], ["int", "int", "img.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.CenterCrop.randomize_parameters": [[231, 233], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.CornerCrop.__init__": [[237, 245], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_position", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "crop_position", "is", "None", ":", "\n", "            ", "self", ".", "randomize", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "randomize", "=", "False", "\n", "", "self", ".", "crop_position", "=", "crop_position", "\n", "self", ".", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.CornerCrop.__call__": [[246, 280], ["img.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "th", ",", "tw", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "x1", "=", "int", "(", "round", "(", "(", "image_width", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "image_height", "-", "th", ")", "/", "2.", ")", ")", "\n", "x2", "=", "x1", "+", "tw", "\n", "y2", "=", "y1", "+", "th", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.CornerCrop.randomize_parameters": [[281, 286], ["random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "randomize", ":", "\n", "            ", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.RandomHorizontalFlip.__call__": [[291, 301], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.RandomHorizontalFlip.randomize_parameters": [[302, 304], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.MultiScaleCornerCrop.__init__": [[317, 327], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scales", ",", "\n", "size", ",", "\n", "interpolation", "=", "Image", ".", "BILINEAR", ",", "\n", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "self", ".", "crop_positions", "=", "crop_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.MultiScaleCornerCrop.__call__": [[328, 367], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "center_x", "=", "image_width", "//", "2", "\n", "center_y", "=", "image_height", "//", "2", "\n", "box_half", "=", "crop_size", "//", "2", "\n", "x1", "=", "center_x", "-", "box_half", "\n", "y1", "=", "center_y", "-", "box_half", "\n", "x2", "=", "center_x", "+", "box_half", "\n", "y2", "=", "center_y", "+", "box_half", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.MultiScaleCornerCrop.randomize_parameters": [[368, 373], ["random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.MultiScaleRandomCrop.__init__": [[377, 381], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.MultiScaleRandomCrop.__call__": [[382, 397], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", "\n", "y1", "=", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.MultiScaleRandomCrop.randomize_parameters": [[398, 402], ["random.random", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Random2DTranslation.__init__": [[413, 422], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "p", "=", "0.5", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n", "", "self", ".", "height", ",", "self", ".", "width", "=", "self", ".", "size", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Random2DTranslation.__call__": [[423, 441], ["img.resize", "int", "int", "img.resize.crop", "img.resize", "int", "int", "round", "round", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "if", "not", "self", ".", "cropping", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "", "new_width", ",", "new_height", "=", "int", "(", "round", "(", "self", ".", "width", "*", "1.125", ")", ")", ",", "int", "(", "round", "(", "self", ".", "height", "*", "1.125", ")", ")", "\n", "resized_img", "=", "img", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ",", "self", ".", "interpolation", ")", "\n", "x_maxrange", "=", "new_width", "-", "self", ".", "width", "\n", "y_maxrange", "=", "new_height", "-", "self", ".", "height", "\n", "x1", "=", "int", "(", "round", "(", "self", ".", "tl_x", "*", "x_maxrange", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "self", ".", "tl_y", "*", "y_maxrange", ")", ")", "\n", "return", "resized_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "width", ",", "y1", "+", "self", ".", "height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.spatial_transforms.Random2DTranslation.randomize_parameters": [[442, 446], ["random.random", "random.random", "random.uniform"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "cropping", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "self", ".", "p", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.LoopPadding.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.LoopPadding.__call__": [[13, 23], ["list", "len", "list.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "list", "(", "frame_indices", ")", "\n", "\n", "while", "len", "(", "out", ")", "<", "self", ".", "size", ":", "\n", "            ", "for", "index", "in", "out", ":", "\n", "                ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                    ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalCenterCrop.__init__": [[35, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "True", ",", "pad_method", "=", "'loop'", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "pad_method", "=", "pad_method", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalCenterCrop.__call__": [[40, 70], ["max", "min", "list", "len", "len", "list.sort", "len", "len", "list.append", "list.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "center_index", "=", "len", "(", "frame_indices", ")", "//", "2", "\n", "begin_index", "=", "max", "(", "0", ",", "center_index", "-", "(", "self", ".", "size", "//", "2", ")", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "list", "(", "frame_indices", "[", "begin_index", ":", "end_index", "]", ")", "\n", "\n", "if", "self", ".", "padding", "==", "True", ":", "\n", "            ", "if", "self", ".", "pad_method", "==", "'loop'", ":", "\n", "                ", "while", "len", "(", "out", ")", "<", "self", ".", "size", ":", "\n", "                    ", "for", "index", "in", "out", ":", "\n", "                        ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                            ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "", "", "", "else", ":", "\n", "                ", "while", "len", "(", "out", ")", "<", "self", ".", "size", ":", "\n", "                    ", "for", "index", "in", "out", ":", "\n", "                        ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                            ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "", "", "out", ".", "sort", "(", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalRandomCrop.__init__": [[82, 85], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", "=", "4", ",", "stride", "=", "8", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalRandomCrop.__call__": [[86, 110], ["list", "len", "random.randint", "len", "numpy.random.choice", "numpy.random.choice.sort", "numpy.random.choice", "numpy.random.choice.sort", "len", "len", "len", "range", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "frame_indices", "=", "list", "(", "frame_indices", ")", "\n", "\n", "if", "len", "(", "frame_indices", ")", ">=", "self", ".", "size", "*", "self", ".", "stride", ":", "\n", "            ", "rand_end", "=", "len", "(", "frame_indices", ")", "-", "(", "self", ".", "size", "-", "1", ")", "*", "self", ".", "stride", "-", "1", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "begin_index", "+", "(", "self", ".", "size", "-", "1", ")", "*", "self", ".", "stride", "+", "1", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", ":", "self", ".", "stride", "]", "\n", "", "elif", "len", "(", "frame_indices", ")", ">=", "self", ".", "size", ":", "\n", "            ", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "frame_indices", ")", ",", "size", "=", "self", ".", "size", ",", "replace", "=", "False", ")", "\n", "index", ".", "sort", "(", ")", "\n", "out", "=", "[", "frame_indices", "[", "index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "", "else", ":", "\n", "            ", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "frame_indices", ")", ",", "size", "=", "self", ".", "size", ",", "replace", "=", "True", ")", "\n", "index", ".", "sort", "(", ")", "\n", "out", "=", "[", "frame_indices", "[", "index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__init__": [[122, 124], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", "=", "4", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.guxinqian_TKP.transforms.temporal_transforms.TemporalBeginCrop.__call__": [[125, 145], ["list", "len", "len", "len", "len", "len", "out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "frame_indices", "=", "list", "(", "frame_indices", ")", "\n", "\n", "if", "len", "(", "frame_indices", ")", ">=", "25", ":", "\n", "            ", "out", "=", "frame_indices", "[", "0", ":", "25", ":", "8", "]", "\n", "", "elif", "len", "(", "frame_indices", ")", ">=", "13", ":", "\n", "            ", "out", "=", "frame_indices", "[", "0", ":", "13", ":", "4", "]", "\n", "", "elif", "len", "(", "frame_indices", ")", ">=", "7", ":", "\n", "            ", "out", "=", "frame_indices", "[", "0", ":", "7", ":", "2", "]", "\n", "", "elif", "len", "(", "frame_indices", ")", ">=", "4", ":", "\n", "            ", "out", "=", "frame_indices", "[", "0", ":", "4", ":", "1", "]", "\n", "", "else", ":", "\n", "            ", "out", "=", "frame_indices", "[", "0", ":", "4", "]", "\n", "while", "len", "(", "out", ")", "<", "4", ":", "\n", "                ", "for", "index", "in", "out", ":", "\n", "                    ", "if", "len", "(", "out", ")", ">=", "4", ":", "\n", "                        ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "", "", "return", "out", "", "", "", ""]]}