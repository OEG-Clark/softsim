{"home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.Normalize.__init__": [[27, 31], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", "\n", "self", ".", "std", "=", "torch", ".", "Tensor", "(", "std", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.Normalize.forward": [[31, 33], ["model.Normalize.std.type_as", "model.Normalize.mean.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "x", "-", "self", ".", "mean", ".", "type_as", "(", "x", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "/", "self", ".", "std", ".", "type_as", "(", "x", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.BPR.__init__": [[35, 43], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "user_num", ",", "item_num", ",", "factor_num", ")", ":", "\n", "        ", "super", "(", "BPR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_user", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "embed_item", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.BPR.forward": [[44, 52], ["model.BPR.embed_user", "model.BPR.embed_item", "model.BPR.embed_item"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "user", ",", "item_i", ",", "item_j", ")", ":", "\n", "        ", "user", "=", "self", ".", "embed_user", "(", "user", ")", "\n", "item_i", "=", "self", ".", "embed_item", "(", "item_i", ")", "\n", "item_j", "=", "self", ".", "embed_item", "(", "item_j", ")", "\n", "\n", "prediction_i", "=", "(", "user", "*", "item_i", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "prediction_j", "=", "(", "user", "*", "item_j", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "prediction_i", ",", "prediction_j", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.pthDVBPR.__init__": [[56, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "K", ")", ":", "\n", "\n", "        ", "super", "(", "pthDVBPR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "11", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "pool_m", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "256", ",", "4096", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4096", ",", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.pthDVBPR.forward": [[73, 84], ["model.pthDVBPR.pool", "model.pthDVBPR.pool", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.pthDVBPR.pool_m", "model.pthDVBPR.view", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "model.pthDVBPR.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.pthDVBPR.conv3", "model.pthDVBPR.conv4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.pthDVBPR.conv1", "model.pthDVBPR.conv2", "model.pthDVBPR.conv5", "model.pthDVBPR.fc1", "model.pthDVBPR.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "pool_m", "(", "F", ".", "relu", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "7", "*", "7", "*", "256", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", ",", "0.5", ")", "\n", "x", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", ",", "0.5", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.User_Em.__init__": [[87, 91], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "user_size", ",", "dim", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "[", "user_size", ",", "dim", "]", ")", ".", "uniform_", "(", "0", ",", "1", "/", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.User_Em.forward": [[92, 94], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u", ")", ":", "\n", "        ", "return", "self", ".", "W", "[", "u", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.pthVBPR.__init__": [[99, 132], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "user_num", ",", "item_num", ",", "factor_num", ",", "cnn_feature_dim", ")", ":", "\n", "\n", "        ", "super", "(", "pthVBPR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_user", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "embed_item", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "\n", "self", ".", "alpha", "=", "nn", ".", "Embedding", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "beta_u", "=", "nn", ".", "Embedding", "(", "user_num", ",", "1", ")", "\n", "self", ".", "beta_i", "=", "nn", ".", "Embedding", "(", "item_num", ",", "1", ")", "\n", "\n", "self", ".", "gamma_u", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "gamma_i", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "\n", "self", ".", "theta_u", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "\n", "self", ".", "E", "=", "nn", ".", "Embedding", "(", "factor_num", ",", "cnn_feature_dim", ")", "\n", "\n", "self", ".", "beta_p", "=", "nn", ".", "Embedding", "(", "1", ",", "cnn_feature_dim", ")", "\n", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "gamma_u", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "gamma_i", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "theta_u", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "E", ".", "weight", ",", "2", "/", "(", "cnn_feature_dim", "*", "factor_num", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "alpha", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_u", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_i", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_p", ".", "weight", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.pthVBPR.forward": [[134, 152], ["model.pthVBPR.beta_u", "model.pthVBPR.beta_i", "model.pthVBPR.gamma_u", "model.pthVBPR.gamma_i", "model.pthVBPR.theta_u", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "beta_p.double", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "E.weight.double"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "user", ",", "item_i", ",", "cnn_feature_i", ")", ":", "\n", "        ", "alpha", "=", "self", ".", "alpha", ".", "weight", "\n", "beta_u", "=", "self", ".", "beta_u", "(", "user", ")", "\n", "beta_i", "=", "self", ".", "beta_i", "(", "item_i", ")", "\n", "\n", "gamma_u", "=", "self", ".", "gamma_u", "(", "user", ")", "\n", "gamma_i", "=", "self", ".", "gamma_i", "(", "item_i", ")", "\n", "\n", "theta_u", "=", "self", ".", "theta_u", "(", "user", ")", "\n", "E", "=", "self", ".", "E", "\n", "beta_p", "=", "self", ".", "beta_p", ".", "weight", "\n", "\n", "prediction_i", "=", "alpha", "+", "beta_u", ".", "T", "+", "beta_i", ".", "T", "+", "torch", ".", "sum", "(", "gamma_u", "*", "gamma_i", ",", "axis", "=", "1", ")", "+", "torch", ".", "sum", "(", "theta_u", "*", "torch", ".", "mm", "(", "E", ".", "weight", ".", "double", "(", ")", ",", "cnn_feature_i", ".", "T", ")", ".", "T", ",", "axis", "=", "1", ")", "+", "torch", ".", "mm", "(", "beta_p", ".", "double", "(", ")", ",", "cnn_feature_i", ".", "T", ")", "\n", "# print(type(cnn_feature_i.T))", "\n", "# print(type(E.weight))", "\n", "\n", "return", "prediction_i", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.AMR.__init__": [[156, 189], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "user_num", ",", "item_num", ",", "factor_num", ",", "cnn_feature_dim", ")", ":", "\n", "\n", "        ", "super", "(", "AMR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_user", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "embed_item", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "\n", "self", ".", "alpha", "=", "nn", ".", "Embedding", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "beta_u", "=", "nn", ".", "Embedding", "(", "user_num", ",", "1", ")", "\n", "self", ".", "beta_i", "=", "nn", ".", "Embedding", "(", "item_num", ",", "1", ")", "\n", "\n", "self", ".", "gamma_u", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "gamma_i", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "\n", "self", ".", "theta_u", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "\n", "self", ".", "E", "=", "nn", ".", "Embedding", "(", "factor_num", ",", "cnn_feature_dim", ")", "\n", "\n", "self", ".", "beta_p", "=", "nn", ".", "Embedding", "(", "1", ",", "cnn_feature_dim", ")", "\n", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "gamma_u", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "gamma_i", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "theta_u", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "E", ".", "weight", ",", "2", "/", "(", "cnn_feature_dim", "*", "factor_num", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "alpha", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_u", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_i", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_p", ".", "weight", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.model.AMR.forward": [[191, 209], ["model.AMR.beta_u", "model.AMR.beta_i", "model.AMR.gamma_u", "model.AMR.gamma_i", "model.AMR.theta_u", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "beta_p.double", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "E.weight.double"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "user", ",", "item_i", ",", "cnn_feature_i", ",", "delta_u", "=", "None", ",", "delta_i", "=", "None", ",", "adv", "=", "False", ")", ":", "\n", "        ", "alpha", "=", "self", ".", "alpha", ".", "weight", "\n", "beta_u", "=", "self", ".", "beta_u", "(", "user", ")", "\n", "beta_i", "=", "self", ".", "beta_i", "(", "item_i", ")", "\n", "\n", "gamma_u", "=", "self", ".", "gamma_u", "(", "user", ")", "\n", "gamma_i", "=", "self", ".", "gamma_i", "(", "item_i", ")", "\n", "\n", "theta_u", "=", "self", ".", "theta_u", "(", "user", ")", "\n", "E", "=", "self", ".", "E", "\n", "beta_p", "=", "self", ".", "beta_p", ".", "weight", "\n", "if", "not", "adv", ":", "\n", "            ", "prediction_i", "=", "alpha", "+", "beta_u", ".", "T", "+", "beta_i", ".", "T", "+", "torch", ".", "sum", "(", "gamma_u", "*", "gamma_i", ",", "axis", "=", "1", ")", "+", "torch", ".", "sum", "(", "theta_u", "*", "torch", ".", "mm", "(", "E", ".", "weight", ",", "cnn_feature_i", ".", "T", ")", ".", "T", ",", "axis", "=", "1", ")", "+", "torch", ".", "mm", "(", "beta_p", ",", "cnn_feature_i", ".", "T", ")", "\n", "", "else", ":", "\n", "            ", "prediction_i", "=", "alpha", "+", "beta_u", ".", "T", "+", "beta_i", ".", "T", "+", "torch", ".", "sum", "(", "(", "gamma_u", "+", "delta_u", ")", "*", "(", "gamma_i", "+", "delta_i", ")", ",", "axis", "=", "1", ")", "+", "torch", ".", "sum", "(", "theta_u", "*", "torch", ".", "mm", "(", "E", ".", "weight", ".", "double", "(", ")", ",", "cnn_feature_i", ".", "T", ")", ".", "T", ",", "axis", "=", "1", ")", "+", "torch", ".", "mm", "(", "beta_p", ".", "double", "(", ")", ",", "cnn_feature_i", ".", "T", ")", "\n", "", "return", "prediction_i", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.trainset.__init__": [[27, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_ls", ")", ":", "\n", "        ", "self", ".", "target", "=", "train_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.trainset.__getitem__": [[30, 33], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.trainset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.INSA_DVBPR": [[55, 79], ["tensor_transform().to().unsqueeze", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "AIP.trainset", "range", "x_np.save", "torch.utils.data.DataLoader", "torchvision.ToPILImage", "tensor_transform().to", "range", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "len", "torch.sum().exp().log().mean", "torch.sum().exp().log().mean", "torch.sum().exp().log().mean", "torch.sum().exp().log().mean", "torch.sum().exp().log().mean", "torch.sum().exp().log().mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "str", "tensor_transform", "PIL.Image.open", "torch.sum().exp().log", "torch.sum().exp().log", "torch.sum().exp().log", "torch.sum().exp().log", "torch.sum().exp().log", "torch.sum().exp().log", "io.BytesIO", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.sum().exp", "torch.sum().exp", "torch.sum().exp", "torch.sum().exp", "torch.sum().exp", "torch.sum().exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model", "torch.to", "norm"], "function", ["None"], ["def", "INSA_DVBPR", "(", "save_root", ",", "org_img_num", ",", "User_content_embedding", ",", "epsilon", ",", "Item", ",", "device", ",", "model", ",", "norm", ")", ":", "\n", "\n", "    ", "image_o", "=", "tensor_transform", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "org_img_num", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "delta", "=", "torch", ".", "rand", "(", "[", "1", ",", "3", ",", "224", ",", "224", "]", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "delta", "]", ",", "lr", "=", "1e-3", ")", "\n", "\n", "train_ls", "=", "[", "User_content_embedding", "[", "u_idx", "]", "for", "u_idx", "in", "range", "(", "len", "(", "User_content_embedding", ")", ")", "]", "\n", "train_data", "=", "trainset", "(", "train_ls", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "10", ")", ":", "\n", "        ", "for", "data", "in", "DataLoader", "(", "train_data", ",", "batch_size", "=", "512", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", ":", "\n", "            ", "loss", "=", "-", "1", "*", "torch", ".", "sum", "(", "model", "(", "norm", "(", "image_o", "+", "delta", ")", ")", "*", "data", ".", "to", "(", "device", ")", ",", "axis", "=", "1", ")", ".", "exp", "(", ")", ".", "log", "(", ")", ".", "mean", "(", ")", "\n", "#             print(loss.item())", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "-", "epsilon", "/", "255", ",", "epsilon", "/", "255", ")", "\n", "delta", ".", "data", "=", "(", "torch", ".", "clamp", "(", "image_o", "+", "delta", ".", "data", ",", "0", "+", "1e-6", ",", "1", "-", "1e-6", ")", "-", "image_o", ")", "\n", "\n", "", "", "X_new", "=", "image_o", "+", "delta", ".", "data", "\n", "x_np", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "(", "torch", ".", "round", "(", "X_new", "[", "0", "]", "*", "255", ")", "/", "255", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "x_np", ".", "save", "(", "save_root", "+", "str", "(", "org_img_num", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.EXPA_DVBPR": [[81, 108], ["tensor_transform().to", "model", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "tqdm.tqdm", "x_np.save", "orginal_transform().unsqueeze().to", "range", "model", "torch.nn.MSELoss.", "torch.optim.Adam.zero_grad", "loss_fn.backward", "torch.optim.Adam.step", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torchvision.ToPILImage", "tensor_transform", "norm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "PIL.Image.open", "orginal_transform().unsqueeze", "str", "io.BytesIO", "orginal_transform", "PIL.Image.open", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "io.BytesIO"], "function", ["None"], ["", "def", "EXPA_DVBPR", "(", "org_img_path", ",", "target_number", ",", "adv_images_root", ",", "epsilon", ",", "Item", ",", "device", ",", "model", ",", "norm", ")", ":", "\n", "    ", "image_t", "=", "tensor_transform", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "org_img_path", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "target_feature", "=", "model", "(", "orginal_transform", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "target_number", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ")", "\n", "v", "=", "torch", ".", "zeros_like", "(", "image_t", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "learning_rate", "=", "1e-3", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "v", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "for", "t", "in", "tqdm", "(", "range", "(", "5000", ")", ")", ":", "\n", "\n", "        ", "y_pred", "=", "model", "(", "norm", "(", "image_t", "+", "v", ")", ")", "\n", "loss", "=", "loss_fn", "(", "y_pred", ",", "target_feature", ")", "\n", "# print(loss.item())", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "v", ".", "data", "=", "torch", ".", "clamp", "(", "v", ".", "data", ",", "-", "epsilon", "/", "255", ",", "epsilon", "/", "255", ")", "\n", "v", ".", "data", "=", "(", "torch", ".", "clamp", "(", "image_t", "+", "v", ".", "data", ",", "0", "+", "1e-6", ",", "1", "-", "1e-6", ")", "-", "image_t", ")", "\n", "", "X_new", "=", "image_t", "+", "v", ".", "data", "\n", "x_np", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "(", "torch", ".", "round", "(", "X_new", "*", "255", ")", "/", "255", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "x_np", ".", "save", "(", "adv_images_root", "+", "str", "(", "org_img_path", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.EXPA_DVBPR_new": [[109, 137], ["tensor_transform().to", "model", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "tqdm.tqdm", "x_np.save", "orginal_transform().unsqueeze().to", "range", "model", "torch.nn.MSELoss.", "loss_fn.backward", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torchvision.ToPILImage", "tensor_transform", "norm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "PIL.Image.open", "orginal_transform().unsqueeze", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "str", "io.BytesIO", "orginal_transform", "PIL.Image.open", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "io.BytesIO"], "function", ["None"], ["", "def", "EXPA_DVBPR_new", "(", "org_img_path", ",", "target_number", ",", "adv_images_root", ",", "epsilon", ",", "Item", ",", "device", ",", "model", ",", "norm", ",", "alpha", "=", "1", "/", "255", ")", ":", "\n", "    ", "image_t", "=", "tensor_transform", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "org_img_path", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "target_feature", "=", "model", "(", "orginal_transform", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "target_number", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ")", "\n", "v", "=", "torch", ".", "zeros_like", "(", "image_t", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n", "# learning_rate = 1e-2", "\n", "# optimizer = torch.optim.Adam([v], lr=learning_rate)", "\n", "\n", "for", "t", "in", "tqdm", "(", "range", "(", "1000", ")", ")", ":", "\n", "\n", "        ", "y_pred", "=", "model", "(", "norm", "(", "image_t", "+", "v", ")", ")", "\n", "loss", "=", "loss_fn", "(", "y_pred", ",", "target_feature", ")", "\n", "# print(loss.item())", "\n", "\n", "# optimizer.zero_grad()", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# optimizer.step()", "\n", "adv_images", "=", "image_t", "-", "alpha", "*", "torch", ".", "sign", "(", "v", ".", "grad", ")", "\n", "v", ".", "data", "=", "torch", ".", "clamp", "(", "adv_images", "-", "image_t", ",", "-", "epsilon", "/", "255", ",", "epsilon", "/", "255", ")", "\n", "# v.data = torch.clamp(v.data, -epsilon/255, epsilon/255)", "\n", "v", ".", "data", "=", "(", "torch", ".", "clamp", "(", "image_t", "+", "v", ".", "data", ",", "0", "+", "1e-6", ",", "1", "-", "1e-6", ")", "-", "image_t", ")", "\n", "", "X_new", "=", "image_t", "+", "v", ".", "data", "\n", "x_np", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "(", "torch", ".", "round", "(", "X_new", "*", "255", ")", "/", "255", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "x_np", ".", "save", "(", "adv_images_root", "+", "str", "(", "org_img_path", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.INSA_VBPR": [[138, 160], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "AIP.trainset", "range", "x_np.save", "list", "torch.utils.data.DataLoader", "torchvision.ToPILImage", "range", "orginal_transform_alex().unsqueeze().to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "VBPRmodel().exp().sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "str", "orginal_transform_alex().unsqueeze", "VBPRmodel().exp", "orginal_transform_alex", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "PIL.Image.open", "VBPRmodel", "io.BytesIO", "ui.to", "xj.to", "feature_model", "norm", "int", "xj[].numpy"], "function", ["None"], ["", "def", "INSA_VBPR", "(", "save_root", ",", "org_img_num", ",", "usernum", ",", "epsilon", ",", "Item", ",", "device", ",", "VBPRmodel", ",", "feature_model", ",", "norm", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "rand", "(", "[", "1", ",", "3", ",", "224", ",", "224", "]", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "delta", "]", ",", "lr", "=", "1e-4", ")", "\n", "train_ls", "=", "[", "list", "(", "(", "u_idx", ",", "org_img_num", ")", ")", "for", "u_idx", "in", "range", "(", "usernum", ")", "]", "\n", "train_data", "=", "trainset", "(", "train_ls", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "data", "in", "DataLoader", "(", "train_data", ",", "batch_size", "=", "256", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", ":", "\n", "            ", "ui", ",", "xj", "=", "data", "\n", "image_o", "=", "orginal_transform_alex", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "int", "(", "xj", "[", "0", "]", ".", "numpy", "(", ")", ")", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "loss", "=", "-", "1", "*", "(", "VBPRmodel", "(", "ui", ".", "to", "(", "device", ")", ",", "xj", ".", "to", "(", "device", ")", ",", "feature_model", "(", "norm", "(", "(", "image_o", "+", "delta", ")", ")", ")", ")", ")", ".", "exp", "(", ")", ".", "sum", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "-", "epsilon", "/", "255", ",", "epsilon", "/", "255", ")", "\n", "delta", ".", "data", "=", "(", "torch", ".", "clamp", "(", "image_o", "+", "delta", ".", "data", ",", "0", "+", "1e-6", ",", "1", "-", "1e-6", ")", "-", "image_o", ")", "\n", "\n", "", "", "X_new", "=", "image_o", "+", "delta", ".", "data", "\n", "x_np", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "(", "torch", ".", "round", "(", "X_new", "[", "0", "]", "*", "255", ")", "/", "255", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "x_np", ".", "save", "(", "save_root", "+", "str", "(", "org_img_num", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.Alex_EXPA": [[162, 181], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "x_np.save", "orginal_transform_alex().unsqueeze().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.optim.Adam.zero_grad", "torch.norm.backward", "torch.optim.Adam.step", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torchvision.ToPILImage", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "orginal_transform_alex().unsqueeze", "feature_model", "feature_model", "str", "norm", "norm", "orginal_transform_alex", "orginal_transform_alex().to", "PIL.Image.open", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "io.BytesIO", "orginal_transform_alex", "PIL.Image.open", "io.BytesIO"], "function", ["None"], ["", "def", "Alex_EXPA", "(", "save_root", ",", "org_img_num", ",", "target_item", ",", "usernum", ",", "epsilon", ",", "Item", ",", "device", ",", "feature_model", ",", "norm", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "rand", "(", "[", "1", ",", "3", ",", "224", ",", "224", "]", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "delta", "]", ",", "lr", "=", "1e-2", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "5000", ")", ":", "\n", "        ", "image_o", "=", "orginal_transform_alex", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "org_img_num", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "loss", "=", "torch", ".", "norm", "(", "feature_model", "(", "norm", "(", "(", "image_o", "+", "delta", ")", ")", ")", "-", "feature_model", "(", "norm", "(", "orginal_transform_alex", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "target_item", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "to", "(", "device", ")", ")", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "-", "epsilon", "/", "255", ",", "epsilon", "/", "255", ")", "\n", "delta", ".", "data", "=", "(", "torch", ".", "clamp", "(", "image_o", "+", "delta", ".", "data", ",", "0", "+", "1e-6", ",", "1", "-", "1e-6", ")", "-", "image_o", ")", "\n", "\n", "", "X_new", "=", "image_o", "+", "delta", ".", "data", "\n", "x_np", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "(", "torch", ".", "round", "(", "X_new", "[", "0", "]", "*", "255", ")", "/", "255", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "x_np", ".", "save", "(", "save_root", "+", "str", "(", "org_img_num", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.None.AIP.INSA_AlexRank": [[182, 211], ["tqdm.tqdm", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "orginal_transform_alex().unsqueeze().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "x_np.save", "range", "tqdm.tqdm", "torchvision.ToPILImage", "orginal_transform_alex().unsqueeze", "range", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.optim.Adam.zero_grad", "torch.norm().mean.backward", "torch.optim.Adam.step", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "item_dict[].append", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "str", "orginal_transform_alex", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "PIL.Image.open", "io.BytesIO", "model", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "norm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "INSA_AlexRank", "(", "save_root", ",", "org_img_num", ",", "alexnet_feature", ",", "usernum", ",", "epsilon", ",", "Item", ",", "device", ",", "model", ",", "norm", ",", "user_train", ")", ":", "\n", "\n", "    ", "item_dict", "=", "{", "}", "\n", "for", "u", "in", "tqdm", "(", "range", "(", "usernum", ")", ")", ":", "\n", "        ", "for", "j", "in", "user_train", "[", "u", "]", ":", "\n", "            ", "item_id", "=", "j", "[", "b'productid'", "]", "\n", "if", "u", "not", "in", "item_dict", ":", "\n", "                ", "item_dict", "[", "u", "]", "=", "[", "item_id", "]", "\n", "", "else", ":", "\n", "                ", "item_dict", "[", "u", "]", ".", "append", "(", "item_id", ")", "\n", "\n", "", "", "", "delta", "=", "torch", ".", "rand", "(", "[", "1", ",", "3", ",", "224", ",", "224", "]", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "image_o", "=", "orginal_transform_alex", "(", "Image", ".", "open", "(", "BytesIO", "(", "Item", "[", "org_img_num", "]", "[", "b'imgs'", "]", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "delta", "]", ",", "lr", "=", "1e-3", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ")", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "usernum", ")", ")", ":", "\n", "            ", "loss", "=", "torch", ".", "norm", "(", "model", "(", "norm", "(", "image_o", "+", "delta", ")", ")", "-", "torch", ".", "tensor", "(", "alexnet_feature", "[", "item_dict", "[", "i", "]", "]", ")", ".", "to", "(", "device", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "-", "epsilon", "/", "255", ",", "epsilon", "/", "255", ")", "\n", "delta", ".", "data", "=", "(", "torch", ".", "clamp", "(", "image_o", "+", "delta", ".", "data", ",", "0", "+", "1e-6", ",", "1", "-", "1e-6", ")", "-", "image_o", ")", "\n", "\n", "", "", "X_new", "=", "image_o", "+", "delta", ".", "data", "\n", "x_np", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "(", "torch", ".", "round", "(", "X_new", "[", "0", "]", "*", "255", ")", "/", "255", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "x_np", ".", "save", "(", "save_root", "+", "str", "(", "org_img_num", ")", "+", "'.png'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.trainset.__init__": [[93, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "self", ".", "images_i", "=", "file_train_i", "\n", "self", ".", "images_j", "=", "file_train_j", "\n", "self", ".", "target", "=", "train_ls", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.trainset.__getitem__": [[99, 106], ["DVBPRtrain.trainset.loader", "DVBPRtrain.trainset.loader"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fn_i", "=", "self", ".", "images_i", "[", "index", "]", "\n", "img_i", "=", "self", ".", "loader", "(", "fn_i", ")", "\n", "fn_j", "=", "self", ".", "images_j", "[", "index", "]", "\n", "img_j", "=", "self", ".", "loader", "(", "fn_j", ")", "\n", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "img_i", ",", "img_j", ",", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.trainset.__len__": [[107, 109], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.testset.__init__": [[112, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "self", ".", "images_i", "=", "file_item_i", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.testset.__getitem__": [[116, 120], ["DVBPRtrain.testset.loader"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fn_i", "=", "self", ".", "images_i", "[", "index", "]", "\n", "img_i", "=", "self", ".", "loader", "(", "fn_i", ")", "\n", "return", "img_i", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.testset.__len__": [[121, 123], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.default_loader": [[86, 90], ["PIL.Image.open().convert", "input_transform", "PIL.Image.open", "io.BytesIO"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "img_pil", "=", "Image", ".", "open", "(", "BytesIO", "(", "path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_tensor", "=", "input_transform", "(", "img_pil", ")", "\n", "return", "img_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.AUC": [[125, 148], ["tqdm_notebook", "float", "numpy.dot", "set", "set.add", "range", "float", "set.add"], "function", ["None"], ["", "", "def", "AUC", "(", "train", ",", "test", ",", "U", ",", "I", ")", ":", "\n", "    ", "ans", "=", "0", "\n", "cc", "=", "0", "\n", "for", "u", "in", "tqdm_notebook", "(", "train", ")", ":", "\n", "        ", "i", "=", "test", "[", "u", "]", "[", "0", "]", "[", "b'productid'", "]", "\n", "T", "=", "np", ".", "dot", "(", "U", "[", "u", ",", ":", "]", ",", "I", ".", "T", ")", "\n", "cc", "+=", "1", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "train", "[", "u", "]", ":", "\n", "            ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "M", ".", "add", "(", "i", ")", "\n", "\n", "count", "=", "0", "\n", "tmpans", "=", "0", "\n", "for", "j", "in", "range", "(", "itemnum", ")", ":", "\n", "#         for j in random.sample(range(itemnum),100): #sample", "\n", "            ", "if", "j", "in", "M", ":", "continue", "\n", "if", "T", "[", "i", "]", ">", "T", "[", "j", "]", ":", "tmpans", "+=", "1", "\n", "count", "+=", "1", "\n", "", "tmpans", "/=", "float", "(", "count", ")", "\n", "ans", "+=", "tmpans", "\n", "", "ans", "/=", "float", "(", "cc", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.sample": [[154, 165], ["random.randrange", "len", "set", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["def", "sample", "(", "user", ")", ":", "\n", "    ", "u", "=", "random", ".", "randrange", "(", "usernum", ")", "\n", "numu", "=", "len", "(", "user", "[", "u", "]", ")", "\n", "i", "=", "user", "[", "u", "]", "[", "random", ".", "randrange", "(", "numu", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", "[", "u", "]", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "(", "u", ",", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.init_weights": [[172, 176], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_", "type", "type"], "function", ["None"], ["def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", "or", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.Evaluate": [[185, 203], ["thetau.parameters", "model.eval", "DVBPRtrain.testset", "numpy.array", "torch.utils.data.DataLoader", "DVBPRtrain.AUC", "item.cpu().data.numpy", "len", "model().cpu().data.numpy", "numpy.append", "model().cpu().data.numpy", "item.cpu", "model().cpu", "model().cpu", "model", "data.to", "model", "data.to"], "function", ["home.repos.pwc.inspect_result.liuzrcc_AIP.train.DVBPRtrain.AUC"], ["def", "Evaluate", "(", "thetau", ",", "model", ")", ":", "\n", "\n", "    ", "for", "item", "in", "thetau", ".", "parameters", "(", ")", ":", "\n", "        ", "U_np", "=", "item", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "model_t", "=", "model", ".", "eval", "(", ")", "\n", "\n", "#     file_item_i = [Item[i][b'imgs'] for i in range(itemnum)]", "\n", "item_data", "=", "testset", "(", ")", "\n", "#     change to tensor does not help to accelerate!!!!", "\n", "I", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "data", "in", "DataLoader", "(", "item_data", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "numofworkers", ")", ":", "\n", "        ", "if", "len", "(", "I", ")", "==", "0", ":", "\n", "            ", "I", "=", "model", "(", "data", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "I", "=", "np", ".", "append", "(", "I", ",", "model", "(", "data", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "AUC", "(", "user_train", ",", "user_validation", ",", "U_np", ",", "I", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.trainset.__init__": [[86, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "train_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.trainset.__getitem__": [[89, 92], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.trainset.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.testset.__init__": [[97, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "test_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.testset.__getitem__": [[100, 103], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.testset.__len__": [[104, 106], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.valset.__init__": [[108, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "val_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.valset.__getitem__": [[111, 114], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.valset.__len__": [[115, 117], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.metrics_hr": [[68, 84], ["numpy.mean", "user.to.to", "item_i.to.to", "item_j.to.to", "model", "numpy.append", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "prediction_j.detach().cpu().numpy", "prediction_i[].detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HR.append", "HR.append", "prediction_j.detach().cpu", "prediction_i[].detach().cpu", "prediction_j.detach", "prediction_i[].detach"], "function", ["None"], ["", "def", "metrics_hr", "(", "model", ",", "val_loader", ",", "top_k", ")", ":", "\n", "    ", "HR", "=", "[", "]", "\n", "\n", "for", "user", ",", "item_i", ",", "item_j", "in", "val_loader", ":", "\n", "        ", "user", "=", "user", ".", "to", "(", "device", ")", "\n", "item_i", "=", "item_i", ".", "to", "(", "device", ")", "\n", "item_j", "=", "item_j", ".", "to", "(", "device", ")", "\n", "\n", "prediction_i", ",", "prediction_j", "=", "model", "(", "user", ",", "item_i", ",", "item_j", ")", "\n", "to_rank", "=", "np", ".", "append", "(", "prediction_j", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "prediction_i", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "torch", ".", "tensor", "(", "to_rank", ")", ",", "top_k", ")", "\n", "if", "100", "in", "indices", ":", "\n", "            ", "HR", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "HR", ".", "append", "(", "0", ")", "\n", "", "", "return", "np", ".", "mean", "(", "HR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.sample": [[122, 133], ["random.randrange", "len", "set", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["def", "sample", "(", "user", ")", ":", "\n", "    ", "u", "=", "random", ".", "randrange", "(", "usernum", ")", "\n", "numu", "=", "len", "(", "user", "[", "u", "]", ")", "\n", "i", "=", "user", "[", "u", "]", "[", "random", ".", "randrange", "(", "numu", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", "[", "u", "]", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "(", "u", ",", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.BPRtrain.sample_val": [[134, 145], ["set", "list", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["", "def", "sample_val", "(", "u_idx", ")", ":", "\n", "    ", "u", "=", "u_idx", "\n", "user", "=", "user_validation", "[", "u_idx", "]", "\n", "i", "=", "user", "[", "random", ".", "randrange", "(", "1", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "list", "(", "(", "u", ",", "i", ",", "j", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.trainset.__init__": [[96, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "train_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.trainset.__getitem__": [[99, 102], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", ",", "target", "[", "3", "]", ",", "target", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.trainset.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.testset.__init__": [[107, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "test_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.testset.__getitem__": [[110, 113], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", ",", "target", "[", "3", "]", ",", "target", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.testset.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.valset.__init__": [[118, 120], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "val_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.valset.__getitem__": [[121, 124], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", ",", "target", "[", "3", "]", ",", "target", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.valset.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.sample": [[79, 90], ["random.randrange", "len", "set", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["def", "sample", "(", "user", ")", ":", "\n", "    ", "u", "=", "random", ".", "randrange", "(", "usernum", ")", "\n", "numu", "=", "len", "(", "user", "[", "u", "]", ")", "\n", "i", "=", "user", "[", "u", "]", "[", "random", ".", "randrange", "(", "numu", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", "[", "u", "]", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "(", "u", ",", "i", ",", "j", ",", "alex_4096_cnn_f", "[", "i", "]", ",", "alex_4096_cnn_f", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.sample_val": [[131, 142], ["set", "list", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["def", "sample_val", "(", "u_idx", ")", ":", "\n", "    ", "u", "=", "u_idx", "\n", "user", "=", "user_validation", "[", "u_idx", "]", "\n", "i", "=", "user", "[", "random", ".", "randrange", "(", "1", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "list", "(", "(", "u", ",", "i", ",", "j", ",", "alex_4096_cnn_f", "[", "i", "]", ",", "alex_4096_cnn_f", "[", "j", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.VBPRtrain.metrics_VBPR": [[152, 172], ["numpy.mean", "user.to.to", "item_i.to.to", "item_j.to.to", "cnn_i.to.to", "cnn_j.to.to", "model", "model", "numpy.append", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.detach().cpu().numpy", "[].detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HR.append", "HR.append", "model.detach().cpu", "[].detach().cpu", "model.detach", "[].detach"], "function", ["None"], ["def", "metrics_VBPR", "(", "model", ",", "val_loader", ",", "top_k", ")", ":", "\n", "    ", "HR", ",", "NDCG", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "user", ",", "item_i", ",", "item_j", ",", "cnn_i", ",", "cnn_j", "in", "val_loader", ":", "\n", "        ", "user", "=", "user", ".", "to", "(", "device", ")", "\n", "\n", "item_i", "=", "item_i", ".", "to", "(", "device", ")", "\n", "item_j", "=", "item_j", ".", "to", "(", "device", ")", "\n", "cnn_i", "=", "cnn_i", ".", "to", "(", "device", ")", "\n", "cnn_j", "=", "cnn_j", ".", "to", "(", "device", ")", "\n", "\n", "prediction_i", "=", "model", "(", "user", ",", "item_i", ",", "cnn_i", ")", "\n", "prediction_j", "=", "model", "(", "user", ",", "item_j", ",", "cnn_j", ")", "\n", "to_rank", "=", "np", ".", "append", "(", "prediction_j", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "prediction_i", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "torch", ".", "tensor", "(", "to_rank", ")", ",", "top_k", ")", "\n", "if", "100", "in", "indices", ":", "\n", "            ", "HR", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "HR", ".", "append", "(", "0", ")", "\n", "", "", "return", "np", ".", "mean", "(", "HR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.trainset.__init__": [[96, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "train_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.trainset.__getitem__": [[99, 102], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", ",", "target", "[", "3", "]", ",", "target", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.trainset.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.testset.__init__": [[107, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "test_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.testset.__getitem__": [[110, 113], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", ",", "target", "[", "3", "]", ",", "target", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.testset.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__init__": [[118, 120], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "target", "=", "val_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__getitem__": [[121, 124], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "self", ".", "target", "[", "index", "]", "\n", "return", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", ",", "target", "[", "3", "]", ",", "target", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.valset.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.sample": [[79, 90], ["random.randrange", "len", "set", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["def", "sample", "(", "user", ")", ":", "\n", "    ", "u", "=", "random", ".", "randrange", "(", "usernum", ")", "\n", "numu", "=", "len", "(", "user", "[", "u", "]", ")", "\n", "i", "=", "user", "[", "u", "]", "[", "random", ".", "randrange", "(", "numu", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", "[", "u", "]", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "(", "u", ",", "i", ",", "j", ",", "alex_4096_cnn_f", "[", "i", "]", ",", "alex_4096_cnn_f", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.sample_val": [[131, 142], ["set", "list", "set.add", "random.randrange", "random.randrange"], "function", ["None"], ["def", "sample_val", "(", "u_idx", ")", ":", "\n", "    ", "u", "=", "u_idx", "\n", "user", "=", "user_validation", "[", "u_idx", "]", "\n", "i", "=", "user", "[", "random", ".", "randrange", "(", "1", ")", "]", "[", "b'productid'", "]", "\n", "M", "=", "set", "(", ")", "\n", "for", "item", "in", "user", ":", "\n", "        ", "M", ".", "add", "(", "item", "[", "b'productid'", "]", ")", "\n", "", "while", "True", ":", "\n", "        ", "j", "=", "random", ".", "randrange", "(", "itemnum", ")", "\n", "if", "(", "not", "j", "in", "M", ")", "and", "(", "not", "j", "in", "cold_list", ")", ":", "break", "\n", "", "return", "list", "(", "(", "u", ",", "i", ",", "j", ",", "alex_4096_cnn_f", "[", "i", "]", ",", "alex_4096_cnn_f", "[", "j", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.metrics_VBPR": [[152, 172], ["numpy.mean", "user.to.to", "item_i.to.to", "item_j.to.to", "cnn_i.to.to", "cnn_j.to.to", "model", "model", "numpy.append", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.detach().cpu().numpy", "[].detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HR.append", "HR.append", "model.detach().cpu", "[].detach().cpu", "model.detach", "[].detach"], "function", ["None"], ["def", "metrics_VBPR", "(", "model", ",", "val_loader", ",", "top_k", ")", ":", "\n", "    ", "HR", ",", "NDCG", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "user", ",", "item_i", ",", "item_j", ",", "cnn_i", ",", "cnn_j", "in", "val_loader", ":", "\n", "        ", "user", "=", "user", ".", "to", "(", "device", ")", "\n", "\n", "item_i", "=", "item_i", ".", "to", "(", "device", ")", "\n", "item_j", "=", "item_j", ".", "to", "(", "device", ")", "\n", "cnn_i", "=", "cnn_i", ".", "to", "(", "device", ")", "\n", "cnn_j", "=", "cnn_j", ".", "to", "(", "device", ")", "\n", "\n", "prediction_i", "=", "model", "(", "user", ",", "item_i", ",", "cnn_i", ")", "\n", "prediction_j", "=", "model", "(", "user", ",", "item_j", ",", "cnn_j", ")", "\n", "to_rank", "=", "np", ".", "append", "(", "prediction_j", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "prediction_i", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "torch", ".", "tensor", "(", "to_rank", ")", ",", "top_k", ")", "\n", "if", "100", "in", "indices", ":", "\n", "            ", "HR", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "HR", ".", "append", "(", "0", ")", "\n", "", "", "return", "np", ".", "mean", "(", "HR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzrcc_AIP.train.AMR.adv_AMRmodel": [[190, 206], ["AMRmodel", "AMRmodel", "loss.backward", "user.to", "item_i.to", "cnn_i.to", "user.to", "item_j.to", "cnn_j.to", "AMRmodel.gamma_u.weight.grad.detach", "AMRmodel.gamma_i.weight.grad.detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["def", "adv_AMRmodel", "(", "u", ",", "i", ",", "j", ",", "cnn_i", ",", "cnn_j", ",", "eps_at", "=", "0.5", ")", ":", "\n", "\n", "# delta = torch.zeros_like(X, requires_grad=True)", "\n", "\n", "    ", "prediction_i", "=", "AMRmodel", "(", "user", ".", "to", "(", "device", ")", ",", "item_i", ".", "to", "(", "device", ")", ",", "cnn_i", ".", "to", "(", "device", ")", ")", "\n", "prediction_j", "=", "AMRmodel", "(", "user", ".", "to", "(", "device", ")", ",", "item_j", ".", "to", "(", "device", ")", ",", "cnn_j", ".", "to", "(", "device", ")", ")", "\n", "loss", "=", "-", "(", "(", "(", "prediction_i", "-", "prediction_j", ")", ")", ".", "exp", "(", ")", "+", "1", ")", ".", "sigmoid", "(", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "delta_u", "=", "AMRmodel", ".", "gamma_u", ".", "weight", ".", "grad", ".", "detach", "(", ")", "[", "u", "]", "\n", "delta_i", "=", "AMRmodel", ".", "gamma_i", ".", "weight", ".", "grad", ".", "detach", "(", ")", "[", "i", "]", "\n", "\n", "delta_u", "=", "eps_at", "*", "(", "delta_u", "/", "torch", ".", "norm", "(", "delta_u", ")", ")", "\n", "delta_u", "=", "eps_at", "*", "(", "delta_i", "/", "torch", ".", "norm", "(", "delta_i", ")", ")", "\n", "\n", "return", "delta_u", ",", "delta_u", "\n", "\n"]]}