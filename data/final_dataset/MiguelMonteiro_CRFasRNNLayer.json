{"home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_rnn_layer.crf_rnn_layer": [[32, 68], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.diag", "tensorflow.diag", "tensorflow.get_variable", "unaries.get_shape", "numpy.ones", "range", "tensorflow.nn.softmax", "module.lattice_filter", "module.lattice_filter", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.initializers.truncated_normal", "tensorflow.initializers.truncated_normal", "tensorflow.initializers.truncated_normal", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["def", "crf_rnn_layer", "(", "unaries", ",", "reference_image", ",", "num_classes", ",", "theta_alpha", ",", "theta_beta", ",", "theta_gamma", ",", "num_iterations", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'crf_as_rnn_layer'", ")", ":", "\n", "        ", "spatial_ker_weights", "=", "tf", ".", "get_variable", "(", "'spatial_ker_weights'", ",", "shape", "=", "(", "num_classes", ")", ",", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ")", "\n", "bilateral_ker_weights", "=", "tf", ".", "get_variable", "(", "'bilateral_ker_weights'", ",", "shape", "=", "(", "num_classes", ")", ",", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ")", "\n", "spatial_ker_weights", "=", "tf", ".", "diag", "(", "spatial_ker_weights", ")", "\n", "bilateral_ker_weights", "=", "tf", ".", "diag", "(", "bilateral_ker_weights", ")", "\n", "compatibility_matrix", "=", "tf", ".", "get_variable", "(", "'compatibility_matrix'", ",", "shape", "=", "(", "num_classes", ",", "num_classes", ")", ",", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "# Prepare filter normalization coefficients", "\n", "unaries_shape", "=", "unaries", ".", "get_shape", "(", ")", "\n", "all_ones", "=", "np", ".", "ones", "(", "unaries_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "q_values", "=", "unaries", "\n", "for", "i", "in", "range", "(", "num_iterations", ")", ":", "\n", "\n", "            ", "q_values", "=", "tf", ".", "nn", ".", "softmax", "(", "q_values", ")", "\n", "\n", "# Spatial filtering", "\n", "spatial_out", "=", "module", ".", "lattice_filter", "(", "q_values", ",", "reference_image", ",", "bilateral", "=", "False", ",", "theta_gamma", "=", "theta_gamma", ")", "\n", "\n", "# Bilateral filtering", "\n", "bilateral_out", "=", "module", ".", "lattice_filter", "(", "q_values", ",", "reference_image", ",", "bilateral", "=", "True", ",", "theta_alpha", "=", "theta_alpha", ",", "\n", "theta_beta", "=", "theta_beta", ")", "\n", "\n", "# Weighting filter outputs", "\n", "message_passing", "=", "tf", ".", "matmul", "(", "spatial_ker_weights", ",", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "spatial_out", ",", "(", "-", "1", ",", "num_classes", ")", ")", ")", ")", "+", "tf", ".", "matmul", "(", "bilateral_ker_weights", ",", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "bilateral_out", ",", "(", "-", "1", ",", "num_classes", ")", ")", ")", ")", "\n", "\n", "# Compatibility transform", "\n", "pairwise", "=", "tf", ".", "matmul", "(", "compatibility_matrix", ",", "message_passing", ")", "\n", "\n", "# Adding unary potentials", "\n", "pairwise", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "pairwise", ")", ",", "unaries_shape", ")", "\n", "q_values", "=", "unaries", "-", "pairwise", "\n", "\n", "", "return", "q_values", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_as_rnn_keras_layer.CRF_RNN_Layer.__init__": [[40, 58], ["keras.engine.topology.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.VNetCRF.__init__"], ["def", "__init__", "(", "self", ",", "\n", "image_dims", ",", "\n", "num_classes", ",", "\n", "theta_alpha", ",", "\n", "theta_beta", ",", "\n", "theta_gamma", ",", "\n", "num_iterations", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "image_dims", "=", "image_dims", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "theta_alpha", "=", "theta_alpha", "\n", "self", ".", "theta_beta", "=", "theta_beta", "\n", "self", ".", "theta_gamma", "=", "theta_gamma", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "spatial_ker_weights", "=", "None", "\n", "self", ".", "bilateral_ker_weights", "=", "None", "\n", "self", ".", "compatibility_matrix", "=", "None", "\n", "super", "(", "CRF_RNN_Layer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_as_rnn_keras_layer.CRF_RNN_Layer.build": [[59, 79], ["crf_as_rnn_keras_layer.CRF_RNN_Layer.add_weight", "tensorflow.diag", "crf_as_rnn_keras_layer.CRF_RNN_Layer.add_weight", "tensorflow.diag", "crf_as_rnn_keras_layer.CRF_RNN_Layer.add_weight", "super().build", "tensorflow.initializers.truncated_normal", "tensorflow.initializers.truncated_normal", "tensorflow.initializers.truncated_normal"], "methods", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_as_rnn_keras_layer.CRF_RNN_Layer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "spatial_ker_weights", "=", "self", ".", "add_weight", "(", "name", "=", "'spatial_ker_weights'", ",", "\n", "shape", "=", "(", "self", ".", "num_classes", ",", ")", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "self", ".", "spatial_ker_weights", "=", "tf", ".", "diag", "(", "self", ".", "spatial_ker_weights", ")", "\n", "\n", "self", ".", "bilateral_ker_weights", "=", "self", ".", "add_weight", "(", "name", "=", "'bilateral_ker_weights'", ",", "\n", "shape", "=", "(", "self", ".", "num_classes", ",", ")", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "bilateral_ker_weights", "=", "tf", ".", "diag", "(", "self", ".", "bilateral_ker_weights", ")", "\n", "\n", "self", ".", "compatibility_matrix", "=", "self", ".", "add_weight", "(", "name", "=", "'compatibility_matrix'", ",", "\n", "shape", "=", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "CRF_RNN_Layer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_as_rnn_keras_layer.CRF_RNN_Layer.call": [[80, 112], ["unaries.get_shape", "range", "tensorflow.nn.softmax", "module.lattice_filter", "module.lattice_filter", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "unaries", "=", "inputs", "[", "0", "]", "\n", "reference_image", "=", "inputs", "[", "1", "]", "\n", "\n", "# Prepare filter normalization coefficients", "\n", "unaries_shape", "=", "unaries", ".", "get_shape", "(", ")", "\n", "q_values", "=", "unaries", "\n", "for", "i", "in", "range", "(", "self", ".", "num_iterations", ")", ":", "\n", "            ", "q_values", "=", "tf", ".", "nn", ".", "softmax", "(", "q_values", ")", "\n", "\n", "# Spatial filtering", "\n", "spatial_out", "=", "module", ".", "lattice_filter", "(", "q_values", ",", "reference_image", ",", "bilateral", "=", "False", ",", "\n", "theta_gamma", "=", "self", ".", "theta_gamma", ")", "\n", "\n", "# Bilateral filtering", "\n", "bilateral_out", "=", "module", ".", "lattice_filter", "(", "q_values", ",", "reference_image", ",", "bilateral", "=", "True", ",", "\n", "theta_alpha", "=", "self", ".", "theta_alpha", ",", "theta_beta", "=", "self", ".", "theta_beta", ")", "\n", "\n", "# Weighting filter outputs", "\n", "message_passing", "=", "tf", ".", "matmul", "(", "self", ".", "spatial_ker_weights", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "spatial_out", ",", "(", "-", "1", ",", "self", ".", "num_classes", ")", ")", ")", ")", "+", "tf", ".", "matmul", "(", "self", ".", "bilateral_ker_weights", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "bilateral_out", ",", "(", "-", "1", ",", "self", ".", "num_classes", ")", ")", ")", ")", "\n", "\n", "# Compatibility transform", "\n", "pairwise", "=", "tf", ".", "matmul", "(", "self", ".", "compatibility_matrix", ",", "message_passing", ")", "\n", "\n", "# Adding unary potentials", "\n", "pairwise", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "pairwise", ")", ",", "unaries_shape", ")", "\n", "q_values", "=", "unaries", "-", "pairwise", "\n", "\n", "", "return", "q_values", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_as_rnn_keras_layer.CRF_RNN_Layer.compute_output_shape": [[113, 115], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.VNetCRF.__init__": [[140, 178], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "keep_prob", "=", "1.0", ",", "\n", "num_channels", "=", "16", ",", "\n", "num_levels", "=", "4", ",", "\n", "num_convolutions", "=", "(", "1", ",", "2", ",", "3", ",", "3", ")", ",", "\n", "bottom_convolutions", "=", "3", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "theta_alpha", "=", "50", ",", "\n", "theta_beta", "=", "25", ",", "\n", "theta_gamma", "=", "50", ",", "\n", "num_iterations", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        Implements VNet architecture https://arxiv.org/abs/1606.04797\n        :param num_classes: Number of output classes.\n        :param keep_prob: Dropout keep probability, set to 1.0 if not training or if no dropout is desired.\n        :param num_channels: The number of output channels in the first level, this will be doubled every level.\n        :param num_levels: The number of levels in the network. Default is 4 as in the paper.\n        :param num_convolutions: An array with the number of convolutions at each level.\n        :param bottom_convolutions: The number of convolutions at the bottom level of the network.\n        :param activation_fn: The activation function.\n        :param theta_alpha: Spatial standard deviation for bilateral filter\n        :param theta_beta: Color standard deviation for bilateral filter\n        :param theta_gamma: Spatial standard deviation for Gaussian filter\n        :param num_iterations: Number of iterations for mean field approximation of the CRF\n        \"\"\"", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "assert", "num_levels", "==", "len", "(", "num_convolutions", ")", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "num_convolutions", "=", "num_convolutions", "\n", "self", ".", "bottom_convolutions", "=", "bottom_convolutions", "\n", "self", ".", "activation_fn", "=", "activation_fn", "\n", "self", ".", "theta_alpha", "=", "theta_alpha", "\n", "self", ".", "theta_beta", "=", "theta_beta", "\n", "self", ".", "theta_gamma", "=", "theta_gamma", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.VNetCRF.network_fn": [[179, 225], ["example.get_num_channels", "example.get_spatial_rank", "list", "range", "reversed", "tensorflow.variable_scope", "tensorflow.variable_scope", "example.convolution_block", "range", "tensorflow.variable_scope", "example.convolution", "tensorflow.variable_scope", "crf_rnn_layer.crf_rnn_layer.crf_rnn_layer", "tensorflow.tile", "example.VNetCRF.activation_fn", "tensorflow.variable_scope", "example.convolution_block", "list.append", "tensorflow.variable_scope", "example.convolution_block_2", "example.convolution", "tensorflow.variable_scope", "example.VNetCRF.activation_fn", "tensorflow.variable_scope", "example.VNetCRF.activation_fn", "str", "example.down_convolution", "str", "example.up_convolution", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_num_channels", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution_block", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.crf_rnn_layer.crf_rnn_layer", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution_block", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution_block_2", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.down_convolution", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.up_convolution"], ["", "def", "network_fn", "(", "self", ",", "x", ",", "is_training", ")", ":", "\n", "\n", "        ", "input_image", "=", "x", "\n", "input_channels", "=", "get_num_channels", "(", "x", ")", "\n", "spatial_rank", "=", "get_spatial_rank", "(", "x", ")", "\n", "keep_prob", "=", "self", ".", "keep_prob", "if", "is_training", "else", "1.0", "\n", "# if the input has more than 1 channel it has to be expanded because broadcasting only works for 1 input", "\n", "# channel", "\n", "with", "tf", ".", "variable_scope", "(", "'vnet/input_layer'", ")", ":", "\n", "            ", "if", "input_channels", "==", "1", ":", "\n", "                ", "x", "=", "tf", ".", "tile", "(", "x", ",", "(", "spatial_rank", "+", "1", ")", "*", "[", "1", "]", "+", "[", "self", ".", "num_channels", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "activation_fn", "(", "convolution", "(", "x", ",", "spatial_rank", "*", "[", "5", "]", "+", "[", "input_channels", ",", "self", ".", "num_channels", "]", ")", ")", "\n", "\n", "", "", "features", "=", "list", "(", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'vnet/encoder/level_'", "+", "str", "(", "l", "+", "1", ")", ")", ":", "\n", "                ", "x", "=", "convolution_block", "(", "x", ",", "self", ".", "num_convolutions", "[", "l", "]", ",", "keep_prob", ",", "activation_fn", "=", "self", ".", "activation_fn", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'down_convolution'", ")", ":", "\n", "                    ", "x", "=", "self", ".", "activation_fn", "(", "down_convolution", "(", "x", ",", "factor", "=", "2", ",", "kernel_size", "=", "2", ")", ")", "\n", "\n", "", "", "", "with", "tf", ".", "variable_scope", "(", "'vnet/bottom_level'", ")", ":", "\n", "            ", "x", "=", "convolution_block", "(", "x", ",", "self", ".", "bottom_convolutions", ",", "keep_prob", ",", "activation_fn", "=", "self", ".", "activation_fn", ")", "\n", "\n", "", "for", "l", "in", "reversed", "(", "range", "(", "self", ".", "num_levels", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'vnet/decoder/level_'", "+", "str", "(", "l", "+", "1", ")", ")", ":", "\n", "                ", "f", "=", "features", "[", "l", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'up_convolution'", ")", ":", "\n", "                    ", "x", "=", "self", ".", "activation_fn", "(", "up_convolution", "(", "x", ",", "tf", ".", "shape", "(", "f", ")", ",", "factor", "=", "2", ",", "kernel_size", "=", "2", ")", ")", "\n", "\n", "", "x", "=", "convolution_block_2", "(", "x", ",", "f", ",", "self", ".", "num_convolutions", "[", "l", "]", ",", "keep_prob", ",", "activation_fn", "=", "self", ".", "activation_fn", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'vnet/output_layer'", ")", ":", "\n", "            ", "logits", "=", "convolution", "(", "x", ",", "spatial_rank", "*", "[", "1", "]", "+", "[", "self", ".", "num_channels", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'crf_as_rnn'", ")", ":", "\n", "            ", "logits", "=", "crf_rnn_layer", "(", "unaries", "=", "logits", ",", "\n", "reference_image", "=", "input_image", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "theta_alpha", "=", "self", ".", "theta_alpha", ",", "\n", "theta_beta", "=", "self", ".", "theta_beta", ",", "\n", "theta_gamma", "=", "self", ".", "theta_gamma", ",", "\n", "num_iterations", "=", "self", ".", "num_iterations", ")", "\n", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank": [[6, 13], ["len", "x.get_shape"], "function", ["None"], ["def", "get_spatial_rank", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x: an input tensor with shape [batch_size, ..., num_channels]\n    :return: the spatial rank of the tensor i.e. the number of spatial dimensions between batch_size and num_channels\n    \"\"\"", "\n", "return", "len", "(", "x", ".", "get_shape", "(", ")", ")", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_num_channels": [[15, 22], ["int", "x.get_shape"], "function", ["None"], ["", "def", "get_num_channels", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x: an input tensor with shape [batch_size, ..., num_channels]\n    :return: the number of channels of x\n    \"\"\"", "\n", "return", "int", "(", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_size": [[24, 31], ["x.get_shape"], "function", ["None"], ["", "def", "get_spatial_size", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x: an input tensor with shape [batch_size, ..., num_channels]\n    :return: The spatial shape of x, excluding batch_size and num_channels.\n    \"\"\"", "\n", "return", "x", ".", "get_shape", "(", ")", "[", "1", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.constant_initializer": [[33, 38], ["numpy.full().astype", "tensorflow.constant", "numpy.full"], "function", ["None"], ["", "def", "constant_initializer", "(", "value", ",", "shape", ",", "lambda_initializer", "=", "True", ")", ":", "\n", "    ", "if", "lambda_initializer", ":", "\n", "        ", "return", "np", ".", "full", "(", "shape", ",", "value", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "constant", "(", "value", ",", "tf", ".", "float32", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.xavier_initializer_convolution": [[40, 67], ["ValueError", "len", "numpy.prod", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "numpy.random.uniform().astype", "tensorflow.random_uniform", "numpy.random.normal().astype", "tensorflow.truncated_normal", "numpy.random.uniform", "numpy.random.normal"], "function", ["None"], ["", "", "def", "xavier_initializer_convolution", "(", "shape", ",", "dist", "=", "'uniform'", ",", "lambda_initializer", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Xavier initializer for N-D convolution patches. input_activations = patch_volume * in_channels;\n    output_activations = patch_volume * out_channels; Uniform: lim = sqrt(3/(input_activations + output_activations))\n    Normal: stddev =  sqrt(6/(input_activations + output_activations))\n    :param shape: The shape of the convolution patch i.e. spatial_shape + [input_channels, output_channels]. The order of\n    input_channels and output_channels is irrelevant, hence this can be used to initialize deconvolution parameters.\n    :param dist: A string either 'uniform' or 'normal' determining the type of distribution\n    :param lambda_initializer: Whether to return the initial actual values of the parameters (True) or placeholders that\n    are initialized when the session is initiated\n    :return: A numpy araray with the initial values for the parameters in the patch\n    \"\"\"", "\n", "s", "=", "len", "(", "shape", ")", "-", "2", "\n", "num_activations", "=", "np", ".", "prod", "(", "shape", "[", ":", "s", "]", ")", "*", "np", ".", "sum", "(", "shape", "[", "s", ":", "]", ")", "# input_activations + output_activations", "\n", "if", "dist", "==", "'uniform'", ":", "\n", "        ", "lim", "=", "np", ".", "sqrt", "(", "6.", "/", "num_activations", ")", "\n", "if", "lambda_initializer", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "-", "lim", ",", "lim", ",", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "lim", ",", "maxval", "=", "lim", ")", "\n", "", "", "if", "dist", "==", "'normal'", ":", "\n", "        ", "stddev", "=", "np", ".", "sqrt", "(", "3.", "/", "num_activations", ")", "\n", "if", "lambda_initializer", ":", "\n", "            ", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "stddev", ",", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "tf", ".", "truncated_normal", "(", "shape", ",", "mean", "=", "0", ",", "stddev", "=", "stddev", ")", "\n", "", "", "raise", "ValueError", "(", "'Distribution must be either \"uniform\" or \"normal\".'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution": [[69, 74], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.convolution", "example.xavier_initializer_convolution", "example.constant_initializer"], "function", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.xavier_initializer_convolution", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.constant_initializer"], ["", "def", "convolution", "(", "x", ",", "filter", ",", "padding", "=", "'SAME'", ",", "strides", "=", "None", ",", "dilation_rate", "=", "None", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'weights'", ",", "initializer", "=", "xavier_initializer_convolution", "(", "shape", "=", "filter", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'biases'", ",", "initializer", "=", "constant_initializer", "(", "0", ",", "shape", "=", "filter", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "convolution", "(", "x", ",", "w", ",", "padding", ",", "strides", ",", "dilation_rate", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.deconvolution": [[76, 86], ["tensorflow.get_variable", "tensorflow.get_variable", "example.get_spatial_rank", "ValueError", "example.xavier_initializer_convolution", "example.constant_initializer", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.conv3d_transpose"], "function", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.xavier_initializer_convolution", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.constant_initializer"], ["", "def", "deconvolution", "(", "x", ",", "filter", ",", "output_shape", ",", "strides", ",", "padding", "=", "'SAME'", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'weights'", ",", "initializer", "=", "xavier_initializer_convolution", "(", "shape", "=", "filter", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'biases'", ",", "initializer", "=", "constant_initializer", "(", "0", ",", "shape", "=", "filter", "[", "-", "2", "]", ")", ")", "\n", "\n", "spatial_rank", "=", "get_spatial_rank", "(", "x", ")", "\n", "if", "spatial_rank", "==", "2", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "w", ",", "output_shape", ",", "strides", ",", "padding", ")", "+", "b", "\n", "", "if", "spatial_rank", "==", "3", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "conv3d_transpose", "(", "x", ",", "w", ",", "output_shape", ",", "strides", ",", "padding", ")", "+", "b", "\n", "", "raise", "ValueError", "(", "'Only 2D and 3D images supported.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.down_convolution": [[89, 96], ["example.get_num_channels", "example.get_spatial_rank", "example.convolution"], "function", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_num_channels", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution"], ["", "def", "down_convolution", "(", "x", ",", "factor", ",", "kernel_size", ")", ":", "\n", "    ", "num_channels", "=", "get_num_channels", "(", "x", ")", "\n", "spatial_rank", "=", "get_spatial_rank", "(", "x", ")", "\n", "strides", "=", "spatial_rank", "*", "[", "factor", "]", "\n", "filter", "=", "spatial_rank", "*", "[", "kernel_size", "]", "+", "[", "num_channels", ",", "num_channels", "*", "factor", "]", "\n", "x", "=", "convolution", "(", "x", ",", "filter", ",", "strides", "=", "strides", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.up_convolution": [[99, 106], ["example.get_num_channels", "example.get_spatial_rank", "example.deconvolution"], "function", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_num_channels", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.deconvolution"], ["", "def", "up_convolution", "(", "x", ",", "output_shape", ",", "factor", ",", "kernel_size", ")", ":", "\n", "    ", "num_channels", "=", "get_num_channels", "(", "x", ")", "\n", "spatial_rank", "=", "get_spatial_rank", "(", "x", ")", "\n", "strides", "=", "[", "1", "]", "+", "spatial_rank", "*", "[", "factor", "]", "+", "[", "1", "]", "\n", "filter", "=", "spatial_rank", "*", "[", "kernel_size", "]", "+", "[", "num_channels", "//", "factor", ",", "num_channels", "]", "\n", "x", "=", "deconvolution", "(", "x", ",", "filter", ",", "output_shape", ",", "strides", "=", "strides", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution_block": [[108, 121], ["example.get_num_channels", "example.get_spatial_rank", "range", "tensorflow.variable_scope", "example.convolution", "activation_fn", "tensorflow.nn.dropout", "str"], "function", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_num_channels", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution"], ["", "def", "convolution_block", "(", "layer_input", ",", "num_convolutions", ",", "keep_prob", ",", "activation_fn", ")", ":", "\n", "    ", "n_channels", "=", "get_num_channels", "(", "layer_input", ")", "\n", "spatial_rank", "=", "get_spatial_rank", "(", "layer_input", ")", "\n", "x", "=", "layer_input", "\n", "kernel", "=", "spatial_rank", "*", "[", "5", "]", "+", "[", "n_channels", ",", "n_channels", "]", "\n", "for", "i", "in", "range", "(", "num_convolutions", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'conv_'", "+", "str", "(", "i", "+", "1", ")", ")", ":", "\n", "            ", "x", "=", "convolution", "(", "x", ",", "kernel", ")", "\n", "if", "i", "==", "num_convolutions", "-", "1", ":", "\n", "                ", "x", "=", "x", "+", "layer_input", "\n", "", "x", "=", "activation_fn", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "keep_prob", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution_block_2": [[123, 137], ["example.get_num_channels", "example.get_spatial_rank", "tensorflow.concat", "range", "tensorflow.variable_scope", "example.convolution", "activation_fn", "tensorflow.nn.dropout", "str"], "function", ["home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_num_channels", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.get_spatial_rank", "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.convolution"], ["", "def", "convolution_block_2", "(", "layer_input", ",", "fine_grained_features", ",", "num_convolutions", ",", "keep_prob", ",", "activation_fn", ")", ":", "\n", "    ", "n_channels", "=", "get_num_channels", "(", "layer_input", ")", "\n", "spatial_rank", "=", "get_spatial_rank", "(", "layer_input", ")", "\n", "x", "=", "tf", ".", "concat", "(", "(", "layer_input", ",", "fine_grained_features", ")", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "num_convolutions", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'conv_'", "+", "str", "(", "i", "+", "1", ")", ")", ":", "\n", "            ", "kernel", "=", "spatial_rank", "*", "[", "5", "]", "\n", "kernel", "=", "kernel", "+", "[", "n_channels", "*", "2", ",", "n_channels", "]", "if", "i", "==", "0", "else", "kernel", "+", "[", "n_channels", ",", "n_channels", "]", "\n", "x", "=", "convolution", "(", "x", ",", "kernel", ")", "\n", "if", "i", "==", "num_convolutions", "-", "1", ":", "\n", "                ", "x", "=", "x", "+", "layer_input", "\n", "", "x", "=", "activation_fn", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "keep_prob", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MiguelMonteiro_CRFasRNNLayer.None.example.input_function": [[227, 235], ["tensorflow.constant", "tensorflow.constant", "tensorflow.data.Dataset.from_tensors", "dataset.repeat.repeat", "dataset.repeat.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next"], "function", ["None"], ["", "", "def", "input_function", "(", "batch_size", ",", "reference_channels", ",", "num_classes", ")", ":", "\n", "# dummy inputs (feed your own images by using TFRecordDataset: tf.data.TFRecordDataset(filenames))", "\n", "    ", "input_image", "=", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "(", "batch_size", ",", "100", ",", "100", ",", "50", ",", "reference_channels", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "ground_truth", "=", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "(", "batch_size", ",", "100", ",", "100", ",", "50", ",", "num_classes", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensors", "(", "(", "input_image", ",", "ground_truth", ")", ")", "\n", "dataset", "=", "dataset", ".", "repeat", "(", "10", ")", "# 10 epochs", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "return", "iterator", ".", "get_next", "(", ")", "\n", "\n"]]}